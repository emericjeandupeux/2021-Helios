
HeliosModifLora+SF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a9e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001fd8  0801ab78  0801ab78  0002ab78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cb50  0801cb50  00030a94  2**0
                  CONTENTS
  4 .ARM          00000008  0801cb50  0801cb50  0002cb50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801cb58  0801cb58  00030a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801cb58  0801cb58  0002cb58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801cb5c  0801cb5c  0002cb5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  0801cb60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003320  20000a94  0801d5f4  00030a94  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  20003db4  0801d5f4  00033db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0015853d  00000000  00000000  00030ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b157  00000000  00000000  00189001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004368  00000000  00000000  00194158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ee8  00000000  00000000  001984c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003327a  00000000  00000000  0019c3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047792  00000000  00000000  001cf622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107b27  00000000  00000000  00216db4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0031e8db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00012f74  00000000  00000000  0031e930  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a94 	.word	0x20000a94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801ab5c 	.word	0x0801ab5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a98 	.word	0x20000a98
 80001cc:	0801ab5c 	.word	0x0801ab5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8000f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000f90:	f016 fc82 	bl	8017898 <USBD_static_malloc>
 8000f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e066      	b.n	8001076 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	2181      	movs	r1, #129	; 0x81
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f016 fa6b 	bl	801749c <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f016 fa61 	bl	801749c <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8000fea:	e016      	b.n	800101a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	2202      	movs	r2, #2
 8000ff0:	2181      	movs	r1, #129	; 0x81
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f016 fa52 	bl	801749c <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	2202      	movs	r2, #2
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f016 fa49 	bl	801749c <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2210      	movs	r2, #16
 8001016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800101a:	2308      	movs	r3, #8
 800101c:	2203      	movs	r2, #3
 800101e:	2182      	movs	r1, #130	; 0x82
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f016 fa3b 	bl	801749c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7c1b      	ldrb	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	2101      	movs	r1, #1
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f016 fb99 	bl	8017794 <USBD_LL_PrepareReceive>
 8001062:	e007      	b.n	8001074 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	2101      	movs	r1, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f016 fb90 	bl	8017794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800108a:	2181      	movs	r1, #129	; 0x81
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f016 fa43 	bl	8017518 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001098:	2101      	movs	r1, #1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f016 fa3c 	bl	8017518 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80010a8:	2182      	movs	r1, #130	; 0x82
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f016 fa34 	bl	8017518 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010da:	4618      	mov	r0, r3
 80010dc:	f016 fbea 	bl	80178b4 <USBD_static_free>
    pdev->pClassData = NULL;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001104:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001118:	2303      	movs	r3, #3
 800111a:	e0af      	b.n	800127c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001124:	2b00      	cmp	r3, #0
 8001126:	d03f      	beq.n	80011a8 <USBD_CDC_Setup+0xb4>
 8001128:	2b20      	cmp	r3, #32
 800112a:	f040 809f 	bne.w	800126c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	88db      	ldrh	r3, [r3, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02e      	beq.n	8001194 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	da16      	bge.n	800116e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800114c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	88d2      	ldrh	r2, [r2, #6]
 8001152:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	88db      	ldrh	r3, [r3, #6]
 8001158:	2b07      	cmp	r3, #7
 800115a:	bf28      	it	cs
 800115c:	2307      	movcs	r3, #7
 800115e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f015 fd05 	bl	8016b76 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800116c:	e085      	b.n	800127a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	88db      	ldrh	r3, [r3, #6]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	88db      	ldrh	r3, [r3, #6]
 800118a:	461a      	mov	r2, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f015 fd1e 	bl	8016bce <USBD_CtlPrepareRx>
      break;
 8001192:	e072      	b.n	800127a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	7850      	ldrb	r0, [r2, #1]
 80011a0:	2200      	movs	r2, #0
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4798      	blx	r3
      break;
 80011a6:	e068      	b.n	800127a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	2b0b      	cmp	r3, #11
 80011ae:	d852      	bhi.n	8001256 <USBD_CDC_Setup+0x162>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <USBD_CDC_Setup+0xc4>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	08001265 	.word	0x08001265
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001213 	.word	0x08001213
 80011e4:	0800123d 	.word	0x0800123d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d107      	bne.n	8001204 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80011f4:	f107 030a 	add.w	r3, r7, #10
 80011f8:	2202      	movs	r2, #2
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f015 fcba 	bl	8016b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001202:	e032      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f015 fc44 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 800120c:	2303      	movs	r3, #3
 800120e:	75fb      	strb	r3, [r7, #23]
          break;
 8001210:	e02b      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800121e:	f107 030d 	add.w	r3, r7, #13
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f015 fca5 	bl	8016b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800122c:	e01d      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f015 fc2f 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8001236:	2303      	movs	r3, #3
 8001238:	75fb      	strb	r3, [r7, #23]
          break;
 800123a:	e016      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d00f      	beq.n	8001268 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f015 fc22 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8001250:	2303      	movs	r3, #3
 8001252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8001254:	e008      	b.n	8001268 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f015 fc1b 	bl	8016a94 <USBD_CtlError>
          ret = USBD_FAIL;
 800125e:	2303      	movs	r3, #3
 8001260:	75fb      	strb	r3, [r7, #23]
          break;
 8001262:	e002      	b.n	800126a <USBD_CDC_Setup+0x176>
          break;
 8001264:	bf00      	nop
 8001266:	e008      	b.n	800127a <USBD_CDC_Setup+0x186>
          break;
 8001268:	bf00      	nop
      }
      break;
 800126a:	e006      	b.n	800127a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f015 fc10 	bl	8016a94 <USBD_CtlError>
      ret = USBD_FAIL;
 8001274:	2303      	movs	r3, #3
 8001276:	75fb      	strb	r3, [r7, #23]
      break;
 8001278:	bf00      	nop
  }

  return (uint8_t)ret;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04f      	b.n	8001346 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80012ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3318      	adds	r3, #24
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d029      	beq.n	8001318 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3318      	adds	r3, #24
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	78f9      	ldrb	r1, [r7, #3]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	460b      	mov	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4403      	add	r3, r0
 80012e4:	3338      	adds	r3, #56	; 0x38
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80012ec:	fb03 f301 	mul.w	r3, r3, r1
 80012f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d110      	bne.n	8001318 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3318      	adds	r3, #24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800130a:	78f9      	ldrb	r1, [r7, #3]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f016 fa07 	bl	8017724 <USBD_LL_Transmit>
 8001316:	e015      	b.n	8001344 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800136c:	2303      	movs	r3, #3
 800136e:	e015      	b.n	800139c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f016 fa45 	bl	8017804 <USBD_LL_GetRxDataSize>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001396:	4611      	mov	r1, r2
 8001398:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80013b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e01b      	b.n	80013f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d010      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80013e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2243      	movs	r2, #67	; 0x43
 800140c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	2000008c 	.word	0x2000008c

08001420 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2243      	movs	r2, #67	; 0x43
 800142c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000048 	.word	0x20000048

08001440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2243      	movs	r2, #67	; 0x43
 800144c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	200000d0 	.word	0x200000d0

08001460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	220a      	movs	r2, #10
 800146c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e008      	b.n	80014da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001526:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001536:	2303      	movs	r3, #3
 8001538:	e01a      	b.n	8001570 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001540:	2b00      	cmp	r3, #0
 8001542:	d114      	bne.n	800156e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001562:	2181      	movs	r1, #129	; 0x81
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f016 f8dd 	bl	8017724 <USBD_LL_Transmit>

    ret = USBD_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8001592:	2303      	movs	r3, #3
 8001594:	e016      	b.n	80015c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7c1b      	ldrb	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f016 f8f2 	bl	8017794 <USBD_LL_PrepareReceive>
 80015b0:	e007      	b.n	80015c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f016 f8e9 	bl	8017794 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <CDC_Init_FS+0x1c>)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <CDC_Init_FS+0x20>)
 80015d6:	f7ff ff68 	bl	80014aa <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80015da:	4905      	ldr	r1, [pc, #20]	; (80015f0 <CDC_Init_FS+0x24>)
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <CDC_Init_FS+0x20>)
 80015de:	f7ff ff82 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80015e2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200010ec 	.word	0x200010ec
 80015ec:	200035e0 	.word	0x200035e0
 80015f0:	20001514 	.word	0x20001514

080015f4 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80015f8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b23      	cmp	r3, #35	; 0x23
 8001618:	d84a      	bhi.n	80016b0 <CDC_Control_FS+0xac>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <CDC_Control_FS+0x1c>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	080016b1 	.word	0x080016b1
 8001624:	080016b1 	.word	0x080016b1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	080016b1 	.word	0x080016b1
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016b1 	.word	0x080016b1
 8001638:	080016b1 	.word	0x080016b1
 800163c:	080016b1 	.word	0x080016b1
 8001640:	080016b1 	.word	0x080016b1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016b1 	.word	0x080016b1
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016b1 	.word	0x080016b1
 8001668:	080016b1 	.word	0x080016b1
 800166c:	080016b1 	.word	0x080016b1
 8001670:	080016b1 	.word	0x080016b1
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016b1 	.word	0x080016b1
 800167c:	080016b1 	.word	0x080016b1
 8001680:	080016b1 	.word	0x080016b1
 8001684:	080016b1 	.word	0x080016b1
 8001688:	080016b1 	.word	0x080016b1
 800168c:	080016b1 	.word	0x080016b1
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016b1 	.word	0x080016b1
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016b1 	.word	0x080016b1
 80016a8:	080016b1 	.word	0x080016b1
 80016ac:	080016b1 	.word	0x080016b1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80016b0:	bf00      	nop
	}

	return (USBD_OK);
 80016b2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <CDC_Receive_FS>:
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */

//LBLeo
uint8_t received_data[64];
int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <CDC_Receive_FS+0x4c>)
 80016ce:	f7ff ff0a 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <CDC_Receive_FS+0x4c>)
 80016d4:	f7ff ff50 	bl	8001578 <USBD_CDC_ReceivePacket>

	//LBLeo
	memset(received_data, 0, 64);
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	2100      	movs	r1, #0
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <CDC_Receive_FS+0x50>)
 80016de:	f016 f935 	bl	801794c <memset>
	uint8_t len = (uint8_t) *Len;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	73fb      	strb	r3, [r7, #15]
	memcpy(received_data, Buf, len);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	461a      	mov	r2, r3
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <CDC_Receive_FS+0x50>)
 80016f0:	f016 f91e 	bl	8017930 <memcpy>
	memset(Buf, 0, len);
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f016 f926 	bl	801794c <memset>

	return (USBD_OK);
 8001700:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200035e0 	.word	0x200035e0
 8001710:	200014d4 	.word	0x200014d4

08001714 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <CDC_Transmit_FS+0x48>)
 8001726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800172a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8001736:	2301      	movs	r3, #1
 8001738:	e00b      	b.n	8001752 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	461a      	mov	r2, r3
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <CDC_Transmit_FS+0x48>)
 8001742:	f7ff feb2 	bl	80014aa <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <CDC_Transmit_FS+0x48>)
 8001748:	f7ff fee6 	bl	8001518 <USBD_CDC_TransmitPacket>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200035e0 	.word	0x200035e0

08001760 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8001772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <display_Init>:

uint8_t blink_soundLevel = 1;
/*
* Permet de faire l'initialisation  de l'�cran au d�marrage
*/
void display_Init(uint8_t b_display_msg) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <display_Init+0x44>)
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <display_Init+0x48>)
 8001792:	490f      	ldr	r1, [pc, #60]	; (80017d0 <display_Init+0x4c>)
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <display_Init+0x50>)
 8001796:	f005 fb69 	bl	8006e6c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
	u8g2_InitDisplay(&u8g2);
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <display_Init+0x50>)
 800179c:	f006 ff7e 	bl	800869c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <display_Init+0x50>)
 80017a4:	f006 ff89 	bl	80086ba <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <display_Init+0x50>)
 80017aa:	f005 fb39 	bl	8006e20 <u8g2_ClearDisplay>
	if(b_display_msg)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <display_Init+0x34>
		display_Chargement_perso();
 80017b4:	f000 fa7c 	bl	8001cb0 <display_Chargement_perso>
	u8g2_FirstPage(&u8g2);  // EJ : test bug ecran clear
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <display_Init+0x50>)
 80017ba:	f005 faef 	bl	8006d9c <u8g2_FirstPage>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	08002549 	.word	0x08002549
 80017cc:	08002489 	.word	0x08002489
 80017d0:	0801c5e8 	.word	0x0801c5e8
 80017d4:	200026c4 	.word	0x200026c4

080017d8 <display_InitBis>:

void display_InitBis() 
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <display_InitBis+0x28>)
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <display_InitBis+0x2c>)
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <display_InitBis+0x30>)
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <display_InitBis+0x34>)
 80017e4:	f005 fb42 	bl	8006e6c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
	u8g2_InitDisplay(&u8g2);
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <display_InitBis+0x34>)
 80017ea:	f006 ff57 	bl	800869c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <display_InitBis+0x34>)
 80017f2:	f006 ff62 	bl	80086ba <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <display_InitBis+0x34>)
 80017f8:	f005 fb12 	bl	8006e20 <u8g2_ClearDisplay>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08002549 	.word	0x08002549
 8001804:	08002489 	.word	0x08002489
 8001808:	0801c5e8 	.word	0x0801c5e8
 800180c:	200026c4 	.word	0x200026c4

08001810 <display_dco>:
/*
* Fonction permettant d'afficher les taux des differents gaz et niveau sonore
* ainsi que les etats des alertes, du GPS , du reseau et de la batterie
*/
void display_dco(float TabFloatValue[],int TabAlert[],int TabGen[], uint32_t TabTimer[], char name[], char * msg1, char * msg2, char *msg3, char *msg4) 
	{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0b8      	sub	sp, #224	; 0xe0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6178      	str	r0, [r7, #20]
 8001818:	6139      	str	r1, [r7, #16]
 800181a:	60fa      	str	r2, [r7, #12]
 800181c:	60bb      	str	r3, [r7, #8]

	char str_ppm[] = " PPM";
 800181e:	4aad      	ldr	r2, [pc, #692]	; (8001ad4 <display_dco+0x2c4>)
 8001820:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	char poucent[] = " %";
 800182e:	4aaa      	ldr	r2, [pc, #680]	; (8001ad8 <display_dco+0x2c8>)
 8001830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	8019      	strh	r1, [r3, #0]
 800183a:	3302      	adds	r3, #2
 800183c:	0c12      	lsrs	r2, r2, #16
 800183e:	701a      	strb	r2, [r3, #0]
	char vme[]		 = " VME";
 8001840:	4aa6      	ldr	r2, [pc, #664]	; (8001adc <display_dco+0x2cc>)
 8001842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	7019      	strb	r1, [r3, #0]
	char manque[]		 = " <<";
 8001850:	4ba3      	ldr	r3, [pc, #652]	; (8001ae0 <display_dco+0x2d0>)
 8001852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	char explo[]		 = " >>";
 8001856:	4ba3      	ldr	r3, [pc, #652]	; (8001ae4 <display_dco+0x2d4>)
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	char vlct[] 	 = " VLCT";
 800185c:	4aa2      	ldr	r2, [pc, #648]	; (8001ae8 <display_dco+0x2d8>)
 800185e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001866:	6018      	str	r0, [r3, #0]
 8001868:	3304      	adds	r3, #4
 800186a:	8019      	strh	r1, [r3, #0]
	char db[] 		 = " dB";
 800186c:	4b9f      	ldr	r3, [pc, #636]	; (8001aec <display_dco+0x2dc>)
 800186e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char str_H2S [30] = {0};
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	831a      	strh	r2, [r3, #24]
	char str_O2 [30]	= {0};
 800188c:	2300      	movs	r3, #0
 800188e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001890:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	831a      	strh	r2, [r3, #24]
	char str_CO [30]	= {0};
 80018a4:	2300      	movs	r3, #0
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80018a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	831a      	strh	r2, [r3, #24]
	char str_EX [30]	= {0};
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	831a      	strh	r2, [r3, #24]

	char str_son[6] = {0};
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
 80018d8:	2300      	movs	r3, #0
 80018da:	86bb      	strh	r3, [r7, #52]	; 0x34

	// H2S
	strcat(str_H2S, str_taux_H2S);
 80018dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e0:	4983      	ldr	r1, [pc, #524]	; (8001af0 <display_dco+0x2e0>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f016 fd32 	bl	801834c <strcat>
	strcat(str_H2S, msg1);
 80018e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ec:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80018f0:	4618      	mov	r0, r3
 80018f2:	f016 fd2b 	bl	801834c <strcat>
	strcat(str_H2S, str_ppm);
 80018f6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80018fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f016 fd23 	bl	801834c <strcat>
	if (TabAlert[ALERT_H2SVLCT] == 1)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3320      	adds	r3, #32
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <display_dco+0x112>
	{
		strcat(str_H2S, vlct);
 8001910:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001914:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f016 fd16 	bl	801834c <strcat>
 8001920:	e00c      	b.n	800193c <display_dco+0x12c>
	}
	else if (TabAlert[ALERT_H2SVME] == 1)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	331c      	adds	r3, #28
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <display_dco+0x12c>
	{
		strcat(str_H2S, vme);
 800192c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f016 fd08 	bl	801834c <strcat>
	}
	// O2 clignotement
	strcat(str_O2, str_taux_O2);
 800193c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001940:	496c      	ldr	r1, [pc, #432]	; (8001af4 <display_dco+0x2e4>)
 8001942:	4618      	mov	r0, r3
 8001944:	f016 fd02 	bl	801834c <strcat>
	strcat(str_O2, msg2);
 8001948:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800194c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001950:	4618      	mov	r0, r3
 8001952:	f016 fcfb 	bl	801834c <strcat>
	strcat(str_O2, poucent);
 8001956:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800195a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f016 fcf3 	bl	801834c <strcat>
	if (TabAlert[ALERT_O2] == 1)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3324      	adds	r3, #36	; 0x24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <display_dco+0x170>
	{
		strcat(str_O2, manque);
 8001970:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001974:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f016 fce6 	bl	801834c <strcat>
	}


	//CO pas afficher
	strcat(str_CO, str_taux_CO);
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	495c      	ldr	r1, [pc, #368]	; (8001af8 <display_dco+0x2e8>)
 8001986:	4618      	mov	r0, r3
 8001988:	f016 fce0 	bl	801834c <strcat>
	strcat(str_CO, msg3);
 800198c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001990:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001994:	4618      	mov	r0, r3
 8001996:	f016 fcd9 	bl	801834c <strcat>
	strcat(str_CO, str_ppm);
 800199a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800199e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f016 fcd1 	bl	801834c <strcat>
	if (TabAlert[ALERT_COVLCT] == 1) {
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	332c      	adds	r3, #44	; 0x2c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <display_dco+0x1b6>
		strcat(str_CO, vlct);
 80019b4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80019b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f016 fcc4 	bl	801834c <strcat>
 80019c4:	e00c      	b.n	80019e0 <display_dco+0x1d0>
	}
	else if (TabAlert[ALERT_COVME] ==+ 1) {
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <display_dco+0x1d0>
		strcat(str_CO, vme);
 80019d0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80019d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f016 fcb6 	bl	801834c <strcat>
	}

	// EX
	strcat(str_EX, str_taux_EX);
 80019e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e4:	4945      	ldr	r1, [pc, #276]	; (8001afc <display_dco+0x2ec>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f016 fcb0 	bl	801834c <strcat>
	
	strcat(str_EX, msg4);
 80019ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f016 fca9 	bl	801834c <strcat>
	strcat(str_EX, poucent);
 80019fa:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f016 fca1 	bl	801834c <strcat>
	if (TabAlert[ALERT_EX] == 1) {
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <display_dco+0x214>
		strcat(str_EX, explo);
 8001a14:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f016 fc94 	bl	801834c <strcat>
	}

	 son = ((uint8_t) TabFloatValue[DB_VALUE])+10;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3310      	adds	r3, #16
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a34:	793b      	ldrb	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	330a      	adds	r3, #10
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b30      	ldr	r3, [pc, #192]	; (8001b00 <display_dco+0x2f0>)
 8001a3e:	701a      	strb	r2, [r3, #0]
	
	sprintf(str_son, "%i", son);
 8001a40:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <display_dco+0x2f0>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	492e      	ldr	r1, [pc, #184]	; (8001b04 <display_dco+0x2f4>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f016 fc5d 	bl	801830c <siprintf>
	strcat(str_son, db);
 8001a52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f016 fc75 	bl	801834c <strcat>

	

		u8g2_FirstPage(&u8g2);   
 8001a62:	4829      	ldr	r0, [pc, #164]	; (8001b08 <display_dco+0x2f8>)
 8001a64:	f005 f99a 	bl	8006d9c <u8g2_FirstPage>
	
	do {
		
			char str_display[18];
			u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001a68:	4928      	ldr	r1, [pc, #160]	; (8001b0c <display_dco+0x2fc>)
 8001a6a:	4827      	ldr	r0, [pc, #156]	; (8001b08 <display_dco+0x2f8>)
 8001a6c:	f005 ff94 	bl	8007998 <u8g2_SetFont>
			if(IMU_nodata == 100)
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <display_dco+0x300>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d105      	bne.n	8001a84 <display_dco+0x274>
			{
				u8g2_DrawStr(&u8g2, 45, 8, "!IMU!");
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <display_dco+0x304>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	212d      	movs	r1, #45	; 0x2d
 8001a7e:	4822      	ldr	r0, [pc, #136]	; (8001b08 <display_dco+0x2f8>)
 8001a80:	f005 fee8 	bl	8007854 <u8g2_DrawStr>
			}
			else
				show_RSSI = 0;
		}
		//display_son(son);
		if(GPSOK == 1 && show_RSSI == 0)
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <display_dco+0x308>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d106      	bne.n	8001a9a <display_dco+0x28a>
			display_GPS_status(status_GPS, TabTimer, TabGen);
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <display_dco+0x30c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	68b9      	ldr	r1, [r7, #8]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f849 	bl	8001b2c <display_GPS_status>

		if(BATTERYOK == 1 && SUEZ == 0)
			display_BatteryLvl(batteryLevel, 108, 0);
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <display_dco+0x310>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	216c      	movs	r1, #108	; 0x6c
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 fdd2 	bl	800264c <display_BatteryLvl>
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001aa8:	491e      	ldr	r1, [pc, #120]	; (8001b24 <display_dco+0x314>)
 8001aaa:	4817      	ldr	r0, [pc, #92]	; (8001b08 <display_dco+0x2f8>)
 8001aac:	f005 ff74 	bl	8007998 <u8g2_SetFont>
		else 
		if (SUEZ == 1)
		{
			u8g2_DrawStr(&u8g2, 2, 17, str_H2S);
		}
		display_Alerte(TabGen, alerte);
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <display_dco+0x318>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 fa76 	bl	8001fa8 <display_Alerte>
	} while (u8g2_NextPage(&u8g2));
 8001abc:	4812      	ldr	r0, [pc, #72]	; (8001b08 <display_dco+0x2f8>)
 8001abe:	f005 f981 	bl	8006dc4 <u8g2_NextPage>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d1cf      	bne.n	8001a68 <display_dco+0x258>
	//blink_soundLevel = !blink_soundLevel;
}
 8001ac8:	bf00      	nop
 8001aca:	bf00      	nop
 8001acc:	37e0      	adds	r7, #224	; 0xe0
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	0801ab84 	.word	0x0801ab84
 8001ad8:	0801ab8c 	.word	0x0801ab8c
 8001adc:	0801ab90 	.word	0x0801ab90
 8001ae0:	003c3c20 	.word	0x003c3c20
 8001ae4:	003e3e20 	.word	0x003e3e20
 8001ae8:	0801ab98 	.word	0x0801ab98
 8001aec:	00426420 	.word	0x00426420
 8001af0:	20000754 	.word	0x20000754
 8001af4:	2000075c 	.word	0x2000075c
 8001af8:	20000764 	.word	0x20000764
 8001afc:	2000076c 	.word	0x2000076c
 8001b00:	20000b83 	.word	0x20000b83
 8001b04:	0801ab78 	.word	0x0801ab78
 8001b08:	200026c4 	.word	0x200026c4
 8001b0c:	0801b1ac 	.word	0x0801b1ac
 8001b10:	20000b98 	.word	0x20000b98
 8001b14:	0801ab7c 	.word	0x0801ab7c
 8001b18:	20000ab0 	.word	0x20000ab0
 8001b1c:	20000b81 	.word	0x20000b81
 8001b20:	20000b80 	.word	0x20000b80
 8001b24:	0801b9a8 	.word	0x0801b9a8
 8001b28:	20000b82 	.word	0x20000b82

08001b2c <display_GPS_status>:

/*
* Permet d'afficher l'etat du GPS
*/
void display_GPS_status(uint8_t status, uint32_t TabGpsTimer[], int TabGen[]) 
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08e      	sub	sp, #56	; 0x38
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	4603      	mov	r3, r0
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
 8001b38:	73fb      	strb	r3, [r7, #15]
	uint32_t last_update = 0 ;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	char str_last[8];
	char nb_sat[2];
	
//	TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick() - 8 *60 * 1000 *59 ;
	
	if(TabGen[GPS_ON] == 1)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d10a      	bne.n	8001b5e <display_GPS_status+0x32>
	{
		sprintf(nb_sat, "%d", TabGen[NB_SATT_FOUND]);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	494a      	ldr	r1, [pc, #296]	; (8001c80 <display_GPS_status+0x154>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	f016 fbd8 	bl	801830c <siprintf>
 8001b5c:	e001      	b.n	8001b62 <display_GPS_status+0x36>
//				else if (TabGen[NB_SATT_FOUND] >= 5)
//					strcat(str_last, "+");  // concatenation

	}
	else 
		strcpy(nb_sat, ".");  // concatenation
 8001b5e:	232e      	movs	r3, #46	; 0x2e
 8001b60:	82bb      	strh	r3, [r7, #20]
	
	//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);	
	//u8g2_DrawStr(&u8g2, 60, 8, nb_sat); 		// Display elasped time since last good GPS position
	
	if (TabGpsTimer[LAST_UPDATE_GPS] <= 0) // never got location
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3308      	adds	r3, #8
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <display_GPS_status+0x46>
		last_update = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b70:	e065      	b.n	8001c3e <display_GPS_status+0x112>
	else // last update seems valid, display time on screen
	{
		// display time when location acquired
		last_update = (HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000 + 1 ; //    / 60000
 8001b72:	f008 fc71 	bl	800a458 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	3308      	adds	r3, #8
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	4a40      	ldr	r2, [pc, #256]	; (8001c84 <display_GPS_status+0x158>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0b9b      	lsrs	r3, r3, #14
 8001b88:	3301      	adds	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	
		if(last_update > (8 * 60))
 8001b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b8e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001b92:	d909      	bls.n	8001ba8 <display_GPS_status+0x7c>
		{
			strcpy(str_last, "++"); // copy
 8001b94:	f107 0318 	add.w	r3, r7, #24
 8001b98:	4a3b      	ldr	r2, [pc, #236]	; (8001c88 <display_GPS_status+0x15c>)
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	8019      	strh	r1, [r3, #0]
 8001ba0:	3302      	adds	r3, #2
 8001ba2:	0c12      	lsrs	r2, r2, #16
 8001ba4:	701a      	strb	r2, [r3, #0]
 8001ba6:	e031      	b.n	8001c0c <display_GPS_status+0xe0>
		}
		else
		{
			if( last_update >= 60)
 8001ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001baa:	2b3b      	cmp	r3, #59	; 0x3b
 8001bac:	d91a      	bls.n	8001be4 <display_GPS_status+0xb8>
			{
				sprintf(str_last, "%u", last_update / 60);
 8001bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb0:	4a36      	ldr	r2, [pc, #216]	; (8001c8c <display_GPS_status+0x160>)
 8001bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bb6:	095a      	lsrs	r2, r3, #5
 8001bb8:	f107 0318 	add.w	r3, r7, #24
 8001bbc:	4934      	ldr	r1, [pc, #208]	; (8001c90 <display_GPS_status+0x164>)
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f016 fba4 	bl	801830c <siprintf>
				strcat(str_last, "h");  // concatenation
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb01 	bl	80001d0 <strlen>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	f107 0318 	add.w	r3, r7, #24
 8001bd6:	4413      	add	r3, r2
 8001bd8:	492e      	ldr	r1, [pc, #184]	; (8001c94 <display_GPS_status+0x168>)
 8001bda:	461a      	mov	r2, r3
 8001bdc:	460b      	mov	r3, r1
 8001bde:	881b      	ldrh	r3, [r3, #0]
 8001be0:	8013      	strh	r3, [r2, #0]
 8001be2:	e013      	b.n	8001c0c <display_GPS_status+0xe0>
			}
			else
			{
				sprintf(str_last, "%u", last_update);
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bea:	4929      	ldr	r1, [pc, #164]	; (8001c90 <display_GPS_status+0x164>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f016 fb8d 	bl	801830c <siprintf>
				strcat(str_last, "min");  // concatenation
 8001bf2:	f107 0318 	add.w	r3, r7, #24
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe faea 	bl	80001d0 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4413      	add	r3, r2
 8001c06:	4a24      	ldr	r2, [pc, #144]	; (8001c98 <display_GPS_status+0x16c>)
 8001c08:	6810      	ldr	r0, [r2, #0]
 8001c0a:	6018      	str	r0, [r3, #0]
			}
			//strcat(str_last, nb_sat);  // concatenation
		}
		//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
		u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);	
 8001c0c:	4923      	ldr	r1, [pc, #140]	; (8001c9c <display_GPS_status+0x170>)
 8001c0e:	4824      	ldr	r0, [pc, #144]	; (8001ca0 <display_GPS_status+0x174>)
 8001c10:	f005 fec2 	bl	8007998 <u8g2_SetFont>
		sprintf(str_display, "GPS:");
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	4922      	ldr	r1, [pc, #136]	; (8001ca4 <display_GPS_status+0x178>)
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f016 fb76 	bl	801830c <siprintf>
		strcat(str_display, str_last);
 8001c20:	f107 0218 	add.w	r2, r7, #24
 8001c24:	f107 0320 	add.w	r3, r7, #32
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f016 fb8e 	bl	801834c <strcat>
		u8g2_DrawStr(&u8g2, 0, 8, str_display); // Display elasped time since last good GPS position
 8001c30:	f107 0320 	add.w	r3, r7, #32
 8001c34:	2208      	movs	r2, #8
 8001c36:	2100      	movs	r1, #0
 8001c38:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <display_GPS_status+0x174>)
 8001c3a:	f005 fe0b 	bl	8007854 <u8g2_DrawStr>
	}
			
	
//	u8g2_SetFont(&u8g2,u8g2_font_t0_11_tr); // fonctionne
	if (last_update > 0 && last_update <= 1)  // (status)
 8001c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00d      	beq.n	8001c60 <display_GPS_status+0x134>
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d80a      	bhi.n	8001c60 <display_GPS_status+0x134>
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_on_width, gps_on_height, (uint8_t *)gps_on_bits);
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <display_GPS_status+0x17c>)
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	230c      	movs	r3, #12
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	230c      	movs	r3, #12
 8001c54:	2200      	movs	r2, #0
 8001c56:	215a      	movs	r1, #90	; 0x5a
 8001c58:	4811      	ldr	r0, [pc, #68]	; (8001ca0 <display_GPS_status+0x174>)
 8001c5a:	f004 ffd1 	bl	8006c00 <u8g2_DrawXBM>
 8001c5e:	e00a      	b.n	8001c76 <display_GPS_status+0x14a>
	}
	else 
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_off_width, gps_off_height, (uint8_t *)gps_off_bits);
 8001c60:	4b12      	ldr	r3, [pc, #72]	; (8001cac <display_GPS_status+0x180>)
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	230c      	movs	r3, #12
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	230c      	movs	r3, #12
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	215a      	movs	r1, #90	; 0x5a
 8001c6e:	480c      	ldr	r0, [pc, #48]	; (8001ca0 <display_GPS_status+0x174>)
 8001c70:	f004 ffc6 	bl	8006c00 <u8g2_DrawXBM>
	}
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3730      	adds	r7, #48	; 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	0801aba4 	.word	0x0801aba4
 8001c84:	45e7b273 	.word	0x45e7b273
 8001c88:	0801aba8 	.word	0x0801aba8
 8001c8c:	88888889 	.word	0x88888889
 8001c90:	0801abac 	.word	0x0801abac
 8001c94:	0801abb0 	.word	0x0801abb0
 8001c98:	0801abb4 	.word	0x0801abb4
 8001c9c:	0801b1ac 	.word	0x0801b1ac
 8001ca0:	200026c4 	.word	0x200026c4
 8001ca4:	0801abb8 	.word	0x0801abb8
 8001ca8:	2000073c 	.word	0x2000073c
 8001cac:	20000724 	.word	0x20000724

08001cb0 <display_Chargement_perso>:
}
}


void display_Chargement_perso(void) 
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
	
	char name_start[20] = "HELIOS";
 8001cb6:	4a14      	ldr	r2, [pc, #80]	; (8001d08 <display_Chargement_perso+0x58>)
 8001cb8:	1d3b      	adds	r3, r7, #4
 8001cba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cbe:	6018      	str	r0, [r3, #0]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	8019      	strh	r1, [r3, #0]
 8001cc4:	3302      	adds	r3, #2
 8001cc6:	0c0a      	lsrs	r2, r1, #16
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	f107 030b 	add.w	r3, r7, #11
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	731a      	strb	r2, [r3, #12]
//	#ifdef debug_sound_vibration
//	strcat(name_start, "_debug2");
//	#endif
	
//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
	u8g2_FirstPage(&u8g2);
 8001cd8:	480c      	ldr	r0, [pc, #48]	; (8001d0c <display_Chargement_perso+0x5c>)
 8001cda:	f005 f85f 	bl	8006d9c <u8g2_FirstPage>
	u8g2_SetFont(&u8g2, u8g2_font_7x14_tr);	
 8001cde:	490c      	ldr	r1, [pc, #48]	; (8001d10 <display_Chargement_perso+0x60>)
 8001ce0:	480a      	ldr	r0, [pc, #40]	; (8001d0c <display_Chargement_perso+0x5c>)
 8001ce2:	f005 fe59 	bl	8007998 <u8g2_SetFont>

	do 
	{
		u8g2_DrawStr(&u8g2, 50, 20, name_start);
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2214      	movs	r2, #20
 8001cea:	2132      	movs	r1, #50	; 0x32
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <display_Chargement_perso+0x5c>)
 8001cee:	f005 fdb1 	bl	8007854 <u8g2_DrawStr>
		
	}while (u8g2_NextPage(&u8g2));
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <display_Chargement_perso+0x5c>)
 8001cf4:	f005 f866 	bl	8006dc4 <u8g2_NextPage>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f3      	bne.n	8001ce6 <display_Chargement_perso+0x36>
//		} while (u8g2_NextPage(&u8g2));
//		HAL_Delay(500);
//		}
//	
//	}
}
 8001cfe:	bf00      	nop
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	0801abdc 	.word	0x0801abdc
 8001d0c:	200026c4 	.word	0x200026c4
 8001d10:	0801b524 	.word	0x0801b524

08001d14 <display_AlerteDanger>:



void display_AlerteDanger(int TabGen[], uint32_t TabAlertAll[], int type_warning) {
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b08b      	sub	sp, #44	; 0x2c
 8001d18:	af02      	add	r7, sp, #8
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]

if (	TabGen[TYPE_ALERT] != NONE_ALERT ) 
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3390      	adds	r3, #144	; 0x90
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 80df 	beq.w	8001eea <display_AlerteDanger+0x1d6>
{
	u8g2_FirstPage(&u8g2);
 8001d2c:	4871      	ldr	r0, [pc, #452]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001d2e:	f005 f835 	bl	8006d9c <u8g2_FirstPage>
	do 
	{
		if (type_warning == 0) 
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10a      	bne.n	8001d4e <display_AlerteDanger+0x3a>
		{
			u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height, (uint8_t *)warning1_bits); // blinking warning sign step 1
 8001d38:	4b6f      	ldr	r3, [pc, #444]	; (8001ef8 <display_AlerteDanger+0x1e4>)
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2320      	movs	r3, #32
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	2320      	movs	r3, #32
 8001d42:	2200      	movs	r2, #0
 8001d44:	2105      	movs	r1, #5
 8001d46:	486b      	ldr	r0, [pc, #428]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001d48:	f004 ff5a 	bl	8006c00 <u8g2_DrawXBM>
 8001d4c:	e009      	b.n	8001d62 <display_AlerteDanger+0x4e>
		}
		else 
		{
			u8g2_DrawXBM(&u8g2, 5, 0, warning2_width, warning2_height, (uint8_t *)warning2_bits);  // blinking warning sign step 2
 8001d4e:	4b6b      	ldr	r3, [pc, #428]	; (8001efc <display_AlerteDanger+0x1e8>)
 8001d50:	9301      	str	r3, [sp, #4]
 8001d52:	2320      	movs	r3, #32
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2320      	movs	r3, #32
 8001d58:	2200      	movs	r2, #0
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	4865      	ldr	r0, [pc, #404]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001d5e:	f004 ff4f 	bl	8006c00 <u8g2_DrawXBM>
		}
		
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr ); 
 8001d62:	4967      	ldr	r1, [pc, #412]	; (8001f00 <display_AlerteDanger+0x1ec>)
 8001d64:	4863      	ldr	r0, [pc, #396]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001d66:	f005 fe17 	bl	8007998 <u8g2_SetFont>
		char timerChar[3];
		unsigned int timer = (SIGDURATION * 1000 + 500) -  (HAL_GetTick() - TabAlertAll[ALL_TIM_1]);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	681c      	ldr	r4, [r3, #0]
 8001d6e:	f008 fb73 	bl	800a458 <HAL_GetTick>
 8001d72:	4603      	mov	r3, r0
 8001d74:	1ae3      	subs	r3, r4, r3
 8001d76:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8001d7a:	3324      	adds	r3, #36	; 0x24
 8001d7c:	61fb      	str	r3, [r7, #28]
		timer = timer / 1000;
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	4a60      	ldr	r2, [pc, #384]	; (8001f04 <display_AlerteDanger+0x1f0>)
 8001d82:	fba2 2303 	umull	r2, r3, r2, r3
 8001d86:	099b      	lsrs	r3, r3, #6
 8001d88:	61fb      	str	r3, [r7, #28]
		sprintf(timerChar, "%u", timer);
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	495d      	ldr	r1, [pc, #372]	; (8001f08 <display_AlerteDanger+0x1f4>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f016 faba 	bl	801830c <siprintf>
		int posXmes = 45, posYmes = 0;
 8001d98:	232d      	movs	r3, #45	; 0x2d
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
		
		u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE");
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	b2d9      	uxtb	r1, r3
 8001da4:	4b59      	ldr	r3, [pc, #356]	; (8001f0c <display_AlerteDanger+0x1f8>)
 8001da6:	220d      	movs	r2, #13
 8001da8:	4852      	ldr	r0, [pc, #328]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001daa:	f005 fd53 	bl	8007854 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 80, 25, timerChar);
 8001dae:	f107 0310 	add.w	r3, r7, #16
 8001db2:	2219      	movs	r2, #25
 8001db4:	2150      	movs	r1, #80	; 0x50
 8001db6:	484f      	ldr	r0, [pc, #316]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001db8:	f005 fd4c 	bl	8007854 <u8g2_DrawStr>
		
		if (TabGen[TYPE_ALERT] == ALERT_FALL) 
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3390      	adds	r3, #144	; 0x90
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b0d      	cmp	r3, #13
 8001dc4:	d106      	bne.n	8001dd4 <display_AlerteDanger+0xc0>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE CHUTE");
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	b2d9      	uxtb	r1, r3
 8001dca:	4b51      	ldr	r3, [pc, #324]	; (8001f10 <display_AlerteDanger+0x1fc>)
 8001dcc:	220d      	movs	r2, #13
 8001dce:	4849      	ldr	r0, [pc, #292]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001dd0:	f005 fd40 	bl	8007854 <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "CHUTE");
		}
		if (TabGen[TYPE_ALERT] == ALERT_SOS) 
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3390      	adds	r3, #144	; 0x90
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d106      	bne.n	8001dec <display_AlerteDanger+0xd8>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SOS");
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	b2d9      	uxtb	r1, r3
 8001de2:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <display_AlerteDanger+0x200>)
 8001de4:	220d      	movs	r2, #13
 8001de6:	4843      	ldr	r0, [pc, #268]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001de8:	f005 fd34 	bl	8007854 <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "SOS");
		}
		if (TabGen[TYPE_ALERT] == ALERT_MALAISE) 
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	3390      	adds	r3, #144	; 0x90
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d106      	bne.n	8001e04 <display_AlerteDanger+0xf0>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE MALAISE");
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	b2d9      	uxtb	r1, r3
 8001dfa:	4b47      	ldr	r3, [pc, #284]	; (8001f18 <display_AlerteDanger+0x204>)
 8001dfc:	220d      	movs	r2, #13
 8001dfe:	483d      	ldr	r0, [pc, #244]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e00:	f005 fd28 	bl	8007854 <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "MALAISE");
		}
		if (TabGen[TYPE_ALERT] == ALERT_SONO) 
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3390      	adds	r3, #144	; 0x90
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d106      	bne.n	8001e1c <display_AlerteDanger+0x108>
		{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SON");
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	4b42      	ldr	r3, [pc, #264]	; (8001f1c <display_AlerteDanger+0x208>)
 8001e14:	220d      	movs	r2, #13
 8001e16:	4837      	ldr	r0, [pc, #220]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e18:	f005 fd1c 	bl	8007854 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "SON");
		}
		if (TabGen[TYPE_ALERT] == ALERT_H2SVME) 
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3390      	adds	r3, #144	; 0x90
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b07      	cmp	r3, #7
 8001e24:	d105      	bne.n	8001e32 <display_AlerteDanger+0x11e>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 8001e26:	4b3e      	ldr	r3, [pc, #248]	; (8001f20 <display_AlerteDanger+0x20c>)
 8001e28:	220d      	movs	r2, #13
 8001e2a:	2132      	movs	r1, #50	; 0x32
 8001e2c:	4831      	ldr	r0, [pc, #196]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e2e:	f005 fd11 	bl	8007854 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 30, "VME");
		}
		if (TabGen[TYPE_ALERT] == ALERT_H2SVLCT) 
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3390      	adds	r3, #144	; 0x90
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d10b      	bne.n	8001e54 <display_AlerteDanger+0x140>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 8001e3c:	4b38      	ldr	r3, [pc, #224]	; (8001f20 <display_AlerteDanger+0x20c>)
 8001e3e:	220d      	movs	r2, #13
 8001e40:	2132      	movs	r1, #50	; 0x32
 8001e42:	482c      	ldr	r0, [pc, #176]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e44:	f005 fd06 	bl	8007854 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8001e48:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <display_AlerteDanger+0x210>)
 8001e4a:	221e      	movs	r2, #30
 8001e4c:	2164      	movs	r1, #100	; 0x64
 8001e4e:	4829      	ldr	r0, [pc, #164]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e50:	f005 fd00 	bl	8007854 <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_O2) 
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	3390      	adds	r3, #144	; 0x90
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	d10b      	bne.n	8001e76 <display_AlerteDanger+0x162>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "MANQUE");
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <display_AlerteDanger+0x214>)
 8001e60:	220d      	movs	r2, #13
 8001e62:	2132      	movs	r1, #50	; 0x32
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e66:	f005 fcf5 	bl	8007854 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "O2");
 8001e6a:	4b30      	ldr	r3, [pc, #192]	; (8001f2c <display_AlerteDanger+0x218>)
 8001e6c:	221e      	movs	r2, #30
 8001e6e:	2164      	movs	r1, #100	; 0x64
 8001e70:	4820      	ldr	r0, [pc, #128]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e72:	f005 fcef 	bl	8007854 <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_COVME) 
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	3390      	adds	r3, #144	; 0x90
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b0a      	cmp	r3, #10
 8001e7e:	d10b      	bne.n	8001e98 <display_AlerteDanger+0x184>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "CO");
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <display_AlerteDanger+0x21c>)
 8001e82:	220d      	movs	r2, #13
 8001e84:	2132      	movs	r1, #50	; 0x32
 8001e86:	481b      	ldr	r0, [pc, #108]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e88:	f005 fce4 	bl	8007854 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VME");
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <display_AlerteDanger+0x220>)
 8001e8e:	221e      	movs	r2, #30
 8001e90:	2164      	movs	r1, #100	; 0x64
 8001e92:	4818      	ldr	r0, [pc, #96]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001e94:	f005 fcde 	bl	8007854 <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_COVLCT) 
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	3390      	adds	r3, #144	; 0x90
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2b0b      	cmp	r3, #11
 8001ea0:	d10b      	bne.n	8001eba <display_AlerteDanger+0x1a6>
		{
					u8g2_DrawStr(&u8g2, 50, 13, "CO");
 8001ea2:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <display_AlerteDanger+0x21c>)
 8001ea4:	220d      	movs	r2, #13
 8001ea6:	2132      	movs	r1, #50	; 0x32
 8001ea8:	4812      	ldr	r0, [pc, #72]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001eaa:	f005 fcd3 	bl	8007854 <u8g2_DrawStr>
					u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8001eae:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <display_AlerteDanger+0x210>)
 8001eb0:	221e      	movs	r2, #30
 8001eb2:	2164      	movs	r1, #100	; 0x64
 8001eb4:	480f      	ldr	r0, [pc, #60]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001eb6:	f005 fccd 	bl	8007854 <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_EX) 
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3390      	adds	r3, #144	; 0x90
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	d10b      	bne.n	8001edc <display_AlerteDanger+0x1c8>
		{
					u8g2_DrawStr(&u8g2, 50, 13, "RISQUE");
 8001ec4:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <display_AlerteDanger+0x224>)
 8001ec6:	220d      	movs	r2, #13
 8001ec8:	2132      	movs	r1, #50	; 0x32
 8001eca:	480a      	ldr	r0, [pc, #40]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001ecc:	f005 fcc2 	bl	8007854 <u8g2_DrawStr>
					u8g2_DrawStr(&u8g2, 100, 30, "EX");
 8001ed0:	4b1a      	ldr	r3, [pc, #104]	; (8001f3c <display_AlerteDanger+0x228>)
 8001ed2:	221e      	movs	r2, #30
 8001ed4:	2164      	movs	r1, #100	; 0x64
 8001ed6:	4807      	ldr	r0, [pc, #28]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001ed8:	f005 fcbc 	bl	8007854 <u8g2_DrawStr>
		}
	} while (u8g2_NextPage(&u8g2));
 8001edc:	4805      	ldr	r0, [pc, #20]	; (8001ef4 <display_AlerteDanger+0x1e0>)
 8001ede:	f004 ff71 	bl	8006dc4 <u8g2_NextPage>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f af24 	bne.w	8001d32 <display_AlerteDanger+0x1e>
}
}
 8001eea:	bf00      	nop
 8001eec:	3724      	adds	r7, #36	; 0x24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd90      	pop	{r4, r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	200026c4 	.word	0x200026c4
 8001ef8:	20000128 	.word	0x20000128
 8001efc:	200001a8 	.word	0x200001a8
 8001f00:	0801b9a8 	.word	0x0801b9a8
 8001f04:	10624dd3 	.word	0x10624dd3
 8001f08:	0801abac 	.word	0x0801abac
 8001f0c:	0801abf0 	.word	0x0801abf0
 8001f10:	0801abf8 	.word	0x0801abf8
 8001f14:	0801ac08 	.word	0x0801ac08
 8001f18:	0801ac14 	.word	0x0801ac14
 8001f1c:	0801ac24 	.word	0x0801ac24
 8001f20:	0801ac30 	.word	0x0801ac30
 8001f24:	0801ac34 	.word	0x0801ac34
 8001f28:	0801ac3c 	.word	0x0801ac3c
 8001f2c:	0801ac44 	.word	0x0801ac44
 8001f30:	0801ac48 	.word	0x0801ac48
 8001f34:	0801ac4c 	.word	0x0801ac4c
 8001f38:	0801ac50 	.word	0x0801ac50
 8001f3c:	0801ac58 	.word	0x0801ac58

08001f40 <display_SendMess>:



void display_SendMess(void) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8001f46:	4813      	ldr	r0, [pc, #76]	; (8001f94 <display_SendMess+0x54>)
 8001f48:	f004 ff28 	bl	8006d9c <u8g2_FirstPage>
	do {
		u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height, (uint8_t *)warning1_bits);
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <display_SendMess+0x58>)
 8001f4e:	9301      	str	r3, [sp, #4]
 8001f50:	2320      	movs	r3, #32
 8001f52:	9300      	str	r3, [sp, #0]
 8001f54:	2320      	movs	r3, #32
 8001f56:	2200      	movs	r2, #0
 8001f58:	2105      	movs	r1, #5
 8001f5a:	480e      	ldr	r0, [pc, #56]	; (8001f94 <display_SendMess+0x54>)
 8001f5c:	f004 fe50 	bl	8006c00 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8001f60:	490e      	ldr	r1, [pc, #56]	; (8001f9c <display_SendMess+0x5c>)
 8001f62:	480c      	ldr	r0, [pc, #48]	; (8001f94 <display_SendMess+0x54>)
 8001f64:	f005 fd18 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 50, 13, "ENVOI");
 8001f68:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <display_SendMess+0x60>)
 8001f6a:	220d      	movs	r2, #13
 8001f6c:	2132      	movs	r1, #50	; 0x32
 8001f6e:	4809      	ldr	r0, [pc, #36]	; (8001f94 <display_SendMess+0x54>)
 8001f70:	f005 fc70 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 30, "ALERTE");
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <display_SendMess+0x64>)
 8001f76:	221e      	movs	r2, #30
 8001f78:	2132      	movs	r1, #50	; 0x32
 8001f7a:	4806      	ldr	r0, [pc, #24]	; (8001f94 <display_SendMess+0x54>)
 8001f7c:	f005 fc6a 	bl	8007854 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <display_SendMess+0x54>)
 8001f82:	f004 ff1f 	bl	8006dc4 <u8g2_NextPage>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1df      	bne.n	8001f4c <display_SendMess+0xc>
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	200026c4 	.word	0x200026c4
 8001f98:	20000128 	.word	0x20000128
 8001f9c:	0801b9a8 	.word	0x0801b9a8
 8001fa0:	0801ac5c 	.word	0x0801ac5c
 8001fa4:	0801abf0 	.word	0x0801abf0

08001fa8 <display_Alerte>:

/*
* Permet d'afficher une alerte
*/
void display_Alerte(int TabGen[], uint8_t type_alerte) 
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b09e      	sub	sp, #120	; 0x78
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	70fb      	strb	r3, [r7, #3]
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001fb4:	4965      	ldr	r1, [pc, #404]	; (800214c <display_Alerte+0x1a4>)
 8001fb6:	4866      	ldr	r0, [pc, #408]	; (8002150 <display_Alerte+0x1a8>)
 8001fb8:	f005 fcee 	bl	8007998 <u8g2_SetFont>
	char str_display[25];


	if (GPSOK == 1)
	{
		if(show_RSSI == 1)
 8001fbc:	4b65      	ldr	r3, [pc, #404]	; (8002154 <display_Alerte+0x1ac>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	f000 80be 	beq.w	8002142 <display_Alerte+0x19a>
				//u8g2_DrawStr(&u8g2, 1, 8, str_display);
				u8g2_DrawStr(&u8g2, 0, 30, str_display);
			}

		}
		else if (TabGen[CHARGEC] == 1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	33ac      	adds	r3, #172	; 0xac
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d113      	bne.n	8001ff8 <display_Alerte+0x50>
		{
			char str_display[25];
			u8g2_DrawStr(&u8g2, 1, 30, "Alertes desactivees");
 8001fd0:	4b61      	ldr	r3, [pc, #388]	; (8002158 <display_Alerte+0x1b0>)
 8001fd2:	221e      	movs	r2, #30
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	485e      	ldr	r0, [pc, #376]	; (8002150 <display_Alerte+0x1a8>)
 8001fd8:	f005 fc3c 	bl	8007854 <u8g2_DrawStr>
			sprintf(str_display, "En charge...");//: %ddB", TabGen[LORAWAN_RSSI]);
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	495e      	ldr	r1, [pc, #376]	; (800215c <display_Alerte+0x1b4>)
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f016 f992 	bl	801830c <siprintf>
			u8g2_DrawStr(&u8g2, 1, 18, str_display);
 8001fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fec:	2212      	movs	r2, #18
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4857      	ldr	r0, [pc, #348]	; (8002150 <display_Alerte+0x1a8>)
 8001ff2:	f005 fc2f 	bl	8007854 <u8g2_DrawStr>
		{
			u8g2_DrawStr(&u8g2, 2, 30, "En attente de reseau");
		}

	}
}
 8001ff6:	e0a4      	b.n	8002142 <display_Alerte+0x19a>
			if(TabGen[BAT_VALUE] < 15 && TabGen[BAT_VALUE] > 5 && (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	33a8      	adds	r3, #168	; 0xa8
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b0e      	cmp	r3, #14
 8002000:	dc15      	bgt.n	800202e <display_Alerte+0x86>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	33a8      	adds	r3, #168	; 0xa8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b05      	cmp	r3, #5
 800200a:	dd10      	ble.n	800202e <display_Alerte+0x86>
 800200c:	f008 fa24 	bl	800a458 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	4b53      	ldr	r3, [pc, #332]	; (8002160 <display_Alerte+0x1b8>)
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f242 720f 	movw	r2, #9999	; 0x270f
 800201c:	4293      	cmp	r3, r2
 800201e:	d806      	bhi.n	800202e <display_Alerte+0x86>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie faible");
 8002020:	4b50      	ldr	r3, [pc, #320]	; (8002164 <display_Alerte+0x1bc>)
 8002022:	221e      	movs	r2, #30
 8002024:	2102      	movs	r1, #2
 8002026:	484a      	ldr	r0, [pc, #296]	; (8002150 <display_Alerte+0x1a8>)
 8002028:	f005 fc14 	bl	8007854 <u8g2_DrawStr>
 800202c:	e089      	b.n	8002142 <display_Alerte+0x19a>
			else if(TabGen[BAT_VALUE] < 5  && (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	33a8      	adds	r3, #168	; 0xa8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2b04      	cmp	r3, #4
 8002036:	dc10      	bgt.n	800205a <display_Alerte+0xb2>
 8002038:	f008 fa0e 	bl	800a458 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	4b48      	ldr	r3, [pc, #288]	; (8002160 <display_Alerte+0x1b8>)
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f242 720f 	movw	r2, #9999	; 0x270f
 8002048:	4293      	cmp	r3, r2
 800204a:	d806      	bhi.n	800205a <display_Alerte+0xb2>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie tres faible");
 800204c:	4b46      	ldr	r3, [pc, #280]	; (8002168 <display_Alerte+0x1c0>)
 800204e:	221e      	movs	r2, #30
 8002050:	2102      	movs	r1, #2
 8002052:	483f      	ldr	r0, [pc, #252]	; (8002150 <display_Alerte+0x1a8>)
 8002054:	f005 fbfe 	bl	8007854 <u8g2_DrawStr>
 8002058:	e073      	b.n	8002142 <display_Alerte+0x19a>
			else if (BiGaz_ON == 1)
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <display_Alerte+0x1c4>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d13a      	bne.n	80020d8 <display_Alerte+0x130>
				if (GAZ_THRESHOLD_ALERT == 1)
 8002062:	4b43      	ldr	r3, [pc, #268]	; (8002170 <display_Alerte+0x1c8>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d108      	bne.n	800207c <display_Alerte+0xd4>
					sprintf(str_display, "CO  : %4u ppm - GAZ!", gaz1_ppm);
 800206a:	4b42      	ldr	r3, [pc, #264]	; (8002174 <display_Alerte+0x1cc>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002072:	4941      	ldr	r1, [pc, #260]	; (8002178 <display_Alerte+0x1d0>)
 8002074:	4618      	mov	r0, r3
 8002076:	f016 f949 	bl	801830c <siprintf>
 800207a:	e008      	b.n	800208e <display_Alerte+0xe6>
					sprintf(str_display, "CO  : %4u ppm %4u", gaz1_ppm, gaz1_level_mean);
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <display_Alerte+0x1cc>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b3e      	ldr	r3, [pc, #248]	; (800217c <display_Alerte+0x1d4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8002088:	493d      	ldr	r1, [pc, #244]	; (8002180 <display_Alerte+0x1d8>)
 800208a:	f016 f93f 	bl	801830c <siprintf>
				u8g2_DrawStr(&u8g2, 0, 20, str_display);
 800208e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002092:	2214      	movs	r2, #20
 8002094:	2100      	movs	r1, #0
 8002096:	482e      	ldr	r0, [pc, #184]	; (8002150 <display_Alerte+0x1a8>)
 8002098:	f005 fbdc 	bl	8007854 <u8g2_DrawStr>
				if (GAZ_THRESHOLD_ALERT == 2)
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <display_Alerte+0x1c8>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d108      	bne.n	80020b6 <display_Alerte+0x10e>
					sprintf(str_display, "H2S : %4u ppm - GAZ!", gaz2_ppm);
 80020a4:	4b37      	ldr	r3, [pc, #220]	; (8002184 <display_Alerte+0x1dc>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020ac:	4936      	ldr	r1, [pc, #216]	; (8002188 <display_Alerte+0x1e0>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f016 f92c 	bl	801830c <siprintf>
 80020b4:	e008      	b.n	80020c8 <display_Alerte+0x120>
					sprintf(str_display, "H2S : %4u ppm %4u", gaz2_ppm, gaz2_level_mean);
 80020b6:	4b33      	ldr	r3, [pc, #204]	; (8002184 <display_Alerte+0x1dc>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	4b34      	ldr	r3, [pc, #208]	; (800218c <display_Alerte+0x1e4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80020c2:	4933      	ldr	r1, [pc, #204]	; (8002190 <display_Alerte+0x1e8>)
 80020c4:	f016 f922 	bl	801830c <siprintf>
				u8g2_DrawStr(&u8g2, 0, 30, str_display);
 80020c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020cc:	221e      	movs	r2, #30
 80020ce:	2100      	movs	r1, #0
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <display_Alerte+0x1a8>)
 80020d2:	f005 fbbf 	bl	8007854 <u8g2_DrawStr>
}
 80020d6:	e034      	b.n	8002142 <display_Alerte+0x19a>
				if (TabGen[STATUT_GPS] == 1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	33a0      	adds	r3, #160	; 0xa0
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d106      	bne.n	80020f0 <display_Alerte+0x148>
					u8g2_DrawStr(&u8g2, 2, 30, "Protection active");
 80020e2:	4b2c      	ldr	r3, [pc, #176]	; (8002194 <display_Alerte+0x1ec>)
 80020e4:	221e      	movs	r2, #30
 80020e6:	2102      	movs	r1, #2
 80020e8:	4819      	ldr	r0, [pc, #100]	; (8002150 <display_Alerte+0x1a8>)
 80020ea:	f005 fbb3 	bl	8007854 <u8g2_DrawStr>
}
 80020ee:	e028      	b.n	8002142 <display_Alerte+0x19a>
				else if (TabGen[GPS_ON] == 1 || TabGen[FORCE_GPS] == 1 )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d004      	beq.n	8002104 <display_Alerte+0x15c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	33f0      	adds	r3, #240	; 0xf0
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <display_Alerte+0x16a>
					u8g2_DrawStr(&u8g2, 2, 30, "Recherche GPS...");
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <display_Alerte+0x1f0>)
 8002106:	221e      	movs	r2, #30
 8002108:	2102      	movs	r1, #2
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <display_Alerte+0x1a8>)
 800210c:	f005 fba2 	bl	8007854 <u8g2_DrawStr>
 8002110:	e017      	b.n	8002142 <display_Alerte+0x19a>
				else if (	TabGen[GPS_ON] == 0 &&	TabGen[GPS_ON_PREVIOUS] == 0 )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <display_Alerte+0x18c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	338c      	adds	r3, #140	; 0x8c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <display_Alerte+0x18c>
					u8g2_DrawStr(&u8g2, 2, 30, "GPS OFF");
 8002126:	4b1d      	ldr	r3, [pc, #116]	; (800219c <display_Alerte+0x1f4>)
 8002128:	221e      	movs	r2, #30
 800212a:	2102      	movs	r1, #2
 800212c:	4808      	ldr	r0, [pc, #32]	; (8002150 <display_Alerte+0x1a8>)
 800212e:	f005 fb91 	bl	8007854 <u8g2_DrawStr>
 8002132:	e006      	b.n	8002142 <display_Alerte+0x19a>
					u8g2_DrawStr(&u8g2, 2, 30, "NONE");
 8002134:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <display_Alerte+0x1f8>)
 8002136:	221e      	movs	r2, #30
 8002138:	2102      	movs	r1, #2
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <display_Alerte+0x1a8>)
 800213c:	f005 fb8a 	bl	8007854 <u8g2_DrawStr>
}
 8002140:	e7ff      	b.n	8002142 <display_Alerte+0x19a>
 8002142:	bf00      	nop
 8002144:	3778      	adds	r7, #120	; 0x78
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0801b9a8 	.word	0x0801b9a8
 8002150:	200026c4 	.word	0x200026c4
 8002154:	20000ab0 	.word	0x20000ab0
 8002158:	0801ac64 	.word	0x0801ac64
 800215c:	0801ac78 	.word	0x0801ac78
 8002160:	20002878 	.word	0x20002878
 8002164:	0801ac88 	.word	0x0801ac88
 8002168:	0801ac98 	.word	0x0801ac98
 800216c:	20000b99 	.word	0x20000b99
 8002170:	20000b7e 	.word	0x20000b7e
 8002174:	20000b70 	.word	0x20000b70
 8002178:	0801acb0 	.word	0x0801acb0
 800217c:	20000b6c 	.word	0x20000b6c
 8002180:	0801acc8 	.word	0x0801acc8
 8002184:	20000b78 	.word	0x20000b78
 8002188:	0801acdc 	.word	0x0801acdc
 800218c:	20000b74 	.word	0x20000b74
 8002190:	0801acf4 	.word	0x0801acf4
 8002194:	0801ad08 	.word	0x0801ad08
 8002198:	0801ad1c 	.word	0x0801ad1c
 800219c:	0801ad30 	.word	0x0801ad30
 80021a0:	0801ad38 	.word	0x0801ad38

080021a4 <display_wait>:



void display_wait(uint8_t step) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
	switch (step) {
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	2b07      	cmp	r3, #7
 80021b4:	f200 8128 	bhi.w	8002408 <display_wait+0x264>
 80021b8:	a201      	add	r2, pc, #4	; (adr r2, 80021c0 <display_wait+0x1c>)
 80021ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021be:	bf00      	nop
 80021c0:	080021e1 	.word	0x080021e1
 80021c4:	08002229 	.word	0x08002229
 80021c8:	08002271 	.word	0x08002271
 80021cc:	080022b9 	.word	0x080022b9
 80021d0:	08002301 	.word	0x08002301
 80021d4:	08002349 	.word	0x08002349
 80021d8:	08002391 	.word	0x08002391
 80021dc:	080023cd 	.word	0x080023cd
	case 1:
		u8g2_FirstPage(&u8g2);
 80021e0:	488b      	ldr	r0, [pc, #556]	; (8002410 <display_wait+0x26c>)
 80021e2:	f004 fddb 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading1_width, loading1_height, (uint8_t *)loading1_bits);
 80021e6:	4b8b      	ldr	r3, [pc, #556]	; (8002414 <display_wait+0x270>)
 80021e8:	9301      	str	r3, [sp, #4]
 80021ea:	2320      	movs	r3, #32
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	2320      	movs	r3, #32
 80021f0:	2200      	movs	r2, #0
 80021f2:	2100      	movs	r1, #0
 80021f4:	4886      	ldr	r0, [pc, #536]	; (8002410 <display_wait+0x26c>)
 80021f6:	f004 fd03 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80021fa:	4987      	ldr	r1, [pc, #540]	; (8002418 <display_wait+0x274>)
 80021fc:	4884      	ldr	r0, [pc, #528]	; (8002410 <display_wait+0x26c>)
 80021fe:	f005 fbcb 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002202:	4b86      	ldr	r3, [pc, #536]	; (800241c <display_wait+0x278>)
 8002204:	220c      	movs	r2, #12
 8002206:	212d      	movs	r1, #45	; 0x2d
 8002208:	4881      	ldr	r0, [pc, #516]	; (8002410 <display_wait+0x26c>)
 800220a:	f005 fb23 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 800220e:	4b84      	ldr	r3, [pc, #528]	; (8002420 <display_wait+0x27c>)
 8002210:	221c      	movs	r2, #28
 8002212:	2132      	movs	r1, #50	; 0x32
 8002214:	487e      	ldr	r0, [pc, #504]	; (8002410 <display_wait+0x26c>)
 8002216:	f005 fb1d 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800221a:	487d      	ldr	r0, [pc, #500]	; (8002410 <display_wait+0x26c>)
 800221c:	f004 fdd2 	bl	8006dc4 <u8g2_NextPage>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1df      	bne.n	80021e6 <display_wait+0x42>
		break;
 8002226:	e0ef      	b.n	8002408 <display_wait+0x264>
	case 2:
		u8g2_FirstPage(&u8g2);
 8002228:	4879      	ldr	r0, [pc, #484]	; (8002410 <display_wait+0x26c>)
 800222a:	f004 fdb7 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading2_width, loading2_height, (uint8_t *)loading2_bits);
 800222e:	4b7d      	ldr	r3, [pc, #500]	; (8002424 <display_wait+0x280>)
 8002230:	9301      	str	r3, [sp, #4]
 8002232:	2320      	movs	r3, #32
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	2320      	movs	r3, #32
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	4874      	ldr	r0, [pc, #464]	; (8002410 <display_wait+0x26c>)
 800223e:	f004 fcdf 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8002242:	4975      	ldr	r1, [pc, #468]	; (8002418 <display_wait+0x274>)
 8002244:	4872      	ldr	r0, [pc, #456]	; (8002410 <display_wait+0x26c>)
 8002246:	f005 fba7 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800224a:	4b74      	ldr	r3, [pc, #464]	; (800241c <display_wait+0x278>)
 800224c:	220c      	movs	r2, #12
 800224e:	212d      	movs	r1, #45	; 0x2d
 8002250:	486f      	ldr	r0, [pc, #444]	; (8002410 <display_wait+0x26c>)
 8002252:	f005 faff 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <display_wait+0x27c>)
 8002258:	221c      	movs	r2, #28
 800225a:	2132      	movs	r1, #50	; 0x32
 800225c:	486c      	ldr	r0, [pc, #432]	; (8002410 <display_wait+0x26c>)
 800225e:	f005 faf9 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002262:	486b      	ldr	r0, [pc, #428]	; (8002410 <display_wait+0x26c>)
 8002264:	f004 fdae 	bl	8006dc4 <u8g2_NextPage>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1df      	bne.n	800222e <display_wait+0x8a>
		break;
 800226e:	e0cb      	b.n	8002408 <display_wait+0x264>

	case 3 :
		u8g2_FirstPage(&u8g2);
 8002270:	4867      	ldr	r0, [pc, #412]	; (8002410 <display_wait+0x26c>)
 8002272:	f004 fd93 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading3_width, loading3_height, (uint8_t *)loading3_bits);
 8002276:	4b6c      	ldr	r3, [pc, #432]	; (8002428 <display_wait+0x284>)
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	2320      	movs	r3, #32
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2320      	movs	r3, #32
 8002280:	2200      	movs	r2, #0
 8002282:	2100      	movs	r1, #0
 8002284:	4862      	ldr	r0, [pc, #392]	; (8002410 <display_wait+0x26c>)
 8002286:	f004 fcbb 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 800228a:	4963      	ldr	r1, [pc, #396]	; (8002418 <display_wait+0x274>)
 800228c:	4860      	ldr	r0, [pc, #384]	; (8002410 <display_wait+0x26c>)
 800228e:	f005 fb83 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <display_wait+0x278>)
 8002294:	220c      	movs	r2, #12
 8002296:	212d      	movs	r1, #45	; 0x2d
 8002298:	485d      	ldr	r0, [pc, #372]	; (8002410 <display_wait+0x26c>)
 800229a:	f005 fadb 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 800229e:	4b63      	ldr	r3, [pc, #396]	; (800242c <display_wait+0x288>)
 80022a0:	221c      	movs	r2, #28
 80022a2:	2132      	movs	r1, #50	; 0x32
 80022a4:	485a      	ldr	r0, [pc, #360]	; (8002410 <display_wait+0x26c>)
 80022a6:	f005 fad5 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80022aa:	4859      	ldr	r0, [pc, #356]	; (8002410 <display_wait+0x26c>)
 80022ac:	f004 fd8a 	bl	8006dc4 <u8g2_NextPage>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1df      	bne.n	8002276 <display_wait+0xd2>
		break;
 80022b6:	e0a7      	b.n	8002408 <display_wait+0x264>
			case 4 :
		u8g2_FirstPage(&u8g2);
 80022b8:	4855      	ldr	r0, [pc, #340]	; (8002410 <display_wait+0x26c>)
 80022ba:	f004 fd6f 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading4_width, loading4_height, (uint8_t *)loading4_bits);
 80022be:	4b5c      	ldr	r3, [pc, #368]	; (8002430 <display_wait+0x28c>)
 80022c0:	9301      	str	r3, [sp, #4]
 80022c2:	2320      	movs	r3, #32
 80022c4:	9300      	str	r3, [sp, #0]
 80022c6:	2320      	movs	r3, #32
 80022c8:	2200      	movs	r2, #0
 80022ca:	2100      	movs	r1, #0
 80022cc:	4850      	ldr	r0, [pc, #320]	; (8002410 <display_wait+0x26c>)
 80022ce:	f004 fc97 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80022d2:	4951      	ldr	r1, [pc, #324]	; (8002418 <display_wait+0x274>)
 80022d4:	484e      	ldr	r0, [pc, #312]	; (8002410 <display_wait+0x26c>)
 80022d6:	f005 fb5f 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 80022da:	4b50      	ldr	r3, [pc, #320]	; (800241c <display_wait+0x278>)
 80022dc:	220c      	movs	r2, #12
 80022de:	212d      	movs	r1, #45	; 0x2d
 80022e0:	484b      	ldr	r0, [pc, #300]	; (8002410 <display_wait+0x26c>)
 80022e2:	f005 fab7 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 80022e6:	4b51      	ldr	r3, [pc, #324]	; (800242c <display_wait+0x288>)
 80022e8:	221c      	movs	r2, #28
 80022ea:	2132      	movs	r1, #50	; 0x32
 80022ec:	4848      	ldr	r0, [pc, #288]	; (8002410 <display_wait+0x26c>)
 80022ee:	f005 fab1 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80022f2:	4847      	ldr	r0, [pc, #284]	; (8002410 <display_wait+0x26c>)
 80022f4:	f004 fd66 	bl	8006dc4 <u8g2_NextPage>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1df      	bne.n	80022be <display_wait+0x11a>
		break;
 80022fe:	e083      	b.n	8002408 <display_wait+0x264>

	case 5:
		u8g2_FirstPage(&u8g2);
 8002300:	4843      	ldr	r0, [pc, #268]	; (8002410 <display_wait+0x26c>)
 8002302:	f004 fd4b 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading5_width, loading5_height, (uint8_t *)loading5_bits);
 8002306:	4b4b      	ldr	r3, [pc, #300]	; (8002434 <display_wait+0x290>)
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	2320      	movs	r3, #32
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	2320      	movs	r3, #32
 8002310:	2200      	movs	r2, #0
 8002312:	2100      	movs	r1, #0
 8002314:	483e      	ldr	r0, [pc, #248]	; (8002410 <display_wait+0x26c>)
 8002316:	f004 fc73 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 800231a:	493f      	ldr	r1, [pc, #252]	; (8002418 <display_wait+0x274>)
 800231c:	483c      	ldr	r0, [pc, #240]	; (8002410 <display_wait+0x26c>)
 800231e:	f005 fb3b 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002322:	4b3e      	ldr	r3, [pc, #248]	; (800241c <display_wait+0x278>)
 8002324:	220c      	movs	r2, #12
 8002326:	212d      	movs	r1, #45	; 0x2d
 8002328:	4839      	ldr	r0, [pc, #228]	; (8002410 <display_wait+0x26c>)
 800232a:	f005 fa93 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 800232e:	4b42      	ldr	r3, [pc, #264]	; (8002438 <display_wait+0x294>)
 8002330:	221c      	movs	r2, #28
 8002332:	2132      	movs	r1, #50	; 0x32
 8002334:	4836      	ldr	r0, [pc, #216]	; (8002410 <display_wait+0x26c>)
 8002336:	f005 fa8d 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800233a:	4835      	ldr	r0, [pc, #212]	; (8002410 <display_wait+0x26c>)
 800233c:	f004 fd42 	bl	8006dc4 <u8g2_NextPage>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1df      	bne.n	8002306 <display_wait+0x162>
		break;
 8002346:	e05f      	b.n	8002408 <display_wait+0x264>
		case 6:
		u8g2_FirstPage(&u8g2);
 8002348:	4831      	ldr	r0, [pc, #196]	; (8002410 <display_wait+0x26c>)
 800234a:	f004 fd27 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading6_width, loading6_height, (uint8_t *)loading6_bits);
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <display_wait+0x298>)
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2320      	movs	r3, #32
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2320      	movs	r3, #32
 8002358:	2200      	movs	r2, #0
 800235a:	2100      	movs	r1, #0
 800235c:	482c      	ldr	r0, [pc, #176]	; (8002410 <display_wait+0x26c>)
 800235e:	f004 fc4f 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8002362:	492d      	ldr	r1, [pc, #180]	; (8002418 <display_wait+0x274>)
 8002364:	482a      	ldr	r0, [pc, #168]	; (8002410 <display_wait+0x26c>)
 8002366:	f005 fb17 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <display_wait+0x278>)
 800236c:	220c      	movs	r2, #12
 800236e:	212d      	movs	r1, #45	; 0x2d
 8002370:	4827      	ldr	r0, [pc, #156]	; (8002410 <display_wait+0x26c>)
 8002372:	f005 fa6f 	bl	8007854 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 8002376:	4b30      	ldr	r3, [pc, #192]	; (8002438 <display_wait+0x294>)
 8002378:	221c      	movs	r2, #28
 800237a:	2132      	movs	r1, #50	; 0x32
 800237c:	4824      	ldr	r0, [pc, #144]	; (8002410 <display_wait+0x26c>)
 800237e:	f005 fa69 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002382:	4823      	ldr	r0, [pc, #140]	; (8002410 <display_wait+0x26c>)
 8002384:	f004 fd1e 	bl	8006dc4 <u8g2_NextPage>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1df      	bne.n	800234e <display_wait+0x1aa>
		break;
 800238e:	e03b      	b.n	8002408 <display_wait+0x264>

	case 7:
		u8g2_FirstPage(&u8g2);
 8002390:	481f      	ldr	r0, [pc, #124]	; (8002410 <display_wait+0x26c>)
 8002392:	f004 fd03 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading7_width, loading7_height, (uint8_t *)loading7_bits);
 8002396:	4b2a      	ldr	r3, [pc, #168]	; (8002440 <display_wait+0x29c>)
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2320      	movs	r3, #32
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2320      	movs	r3, #32
 80023a0:	2200      	movs	r2, #0
 80023a2:	2100      	movs	r1, #0
 80023a4:	481a      	ldr	r0, [pc, #104]	; (8002410 <display_wait+0x26c>)
 80023a6:	f004 fc2b 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80023aa:	491b      	ldr	r1, [pc, #108]	; (8002418 <display_wait+0x274>)
 80023ac:	4818      	ldr	r0, [pc, #96]	; (8002410 <display_wait+0x26c>)
 80023ae:	f005 faf3 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <display_wait+0x278>)
 80023b4:	2214      	movs	r2, #20
 80023b6:	2128      	movs	r1, #40	; 0x28
 80023b8:	4815      	ldr	r0, [pc, #84]	; (8002410 <display_wait+0x26c>)
 80023ba:	f005 fa4b 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80023be:	4814      	ldr	r0, [pc, #80]	; (8002410 <display_wait+0x26c>)
 80023c0:	f004 fd00 	bl	8006dc4 <u8g2_NextPage>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1e5      	bne.n	8002396 <display_wait+0x1f2>
		break;
 80023ca:	e01d      	b.n	8002408 <display_wait+0x264>
		
	case 8:
		u8g2_FirstPage(&u8g2);
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <display_wait+0x26c>)
 80023ce:	f004 fce5 	bl	8006d9c <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading8_width, loading8_height, (uint8_t *)loading8_bits);
 80023d2:	4b1c      	ldr	r3, [pc, #112]	; (8002444 <display_wait+0x2a0>)
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2320      	movs	r3, #32
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	2320      	movs	r3, #32
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <display_wait+0x26c>)
 80023e2:	f004 fc0d 	bl	8006c00 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80023e6:	490c      	ldr	r1, [pc, #48]	; (8002418 <display_wait+0x274>)
 80023e8:	4809      	ldr	r0, [pc, #36]	; (8002410 <display_wait+0x26c>)
 80023ea:	f005 fad5 	bl	8007998 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <display_wait+0x278>)
 80023f0:	2214      	movs	r2, #20
 80023f2:	2128      	movs	r1, #40	; 0x28
 80023f4:	4806      	ldr	r0, [pc, #24]	; (8002410 <display_wait+0x26c>)
 80023f6:	f005 fa2d 	bl	8007854 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <display_wait+0x26c>)
 80023fc:	f004 fce2 	bl	8006dc4 <u8g2_NextPage>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1e5      	bne.n	80023d2 <display_wait+0x22e>
		break;
 8002406:	bf00      	nop
	}
}
 8002408:	bf00      	nop
 800240a:	3708      	adds	r7, #8
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200026c4 	.word	0x200026c4
 8002414:	20000228 	.word	0x20000228
 8002418:	0801b9a8 	.word	0x0801b9a8
 800241c:	0801ad40 	.word	0x0801ad40
 8002420:	0801ad4c 	.word	0x0801ad4c
 8002424:	200002a8 	.word	0x200002a8
 8002428:	20000328 	.word	0x20000328
 800242c:	0801ad58 	.word	0x0801ad58
 8002430:	200003a8 	.word	0x200003a8
 8002434:	20000428 	.word	0x20000428
 8002438:	0801ad64 	.word	0x0801ad64
 800243c:	200004a8 	.word	0x200004a8
 8002440:	20000528 	.word	0x20000528
 8002444:	200005a8 	.word	0x200005a8

08002448 <display_Print>:

/*
* Fonction permettant d'afficher un message basique
*/
void display_Print(char *msg) {
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 8002450:	480b      	ldr	r0, [pc, #44]	; (8002480 <display_Print+0x38>)
 8002452:	f004 fca3 	bl	8006d9c <u8g2_FirstPage>
	do {
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8002456:	490b      	ldr	r1, [pc, #44]	; (8002484 <display_Print+0x3c>)
 8002458:	4809      	ldr	r0, [pc, #36]	; (8002480 <display_Print+0x38>)
 800245a:	f005 fa9d 	bl	8007998 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 15, msg);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	220f      	movs	r2, #15
 8002462:	2100      	movs	r1, #0
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <display_Print+0x38>)
 8002466:	f005 f9f5 	bl	8007854 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 800246a:	4805      	ldr	r0, [pc, #20]	; (8002480 <display_Print+0x38>)
 800246c:	f004 fcaa 	bl	8006dc4 <u8g2_NextPage>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <display_Print+0xe>
}
 8002476:	bf00      	nop
 8002478:	bf00      	nop
 800247a:	3708      	adds	r7, #8
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	200026c4 	.word	0x200026c4
 8002484:	0801bd94 	.word	0x0801bd94

08002488 <u8x8_byte_hw_i2c>:

/*
* fonction pour u8g2
*/
uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af02      	add	r7, sp, #8
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	460b      	mov	r3, r1
 8002494:	72fb      	strb	r3, [r7, #11]
 8002496:	4613      	mov	r3, r2
 8002498:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	/* add extra byte for the i2c address */
	static uint8_t buffer[34];
	static uint8_t buf_idx;
	uint8_t *data;
	switch (msg)  {
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	3b14      	subs	r3, #20
 800249e:	2b0c      	cmp	r3, #12
 80024a0:	d844      	bhi.n	800252c <u8x8_byte_hw_i2c+0xa4>
 80024a2:	a201      	add	r2, pc, #4	; (adr r2, 80024a8 <u8x8_byte_hw_i2c+0x20>)
 80024a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024a8:	08002531 	.word	0x08002531
 80024ac:	0800252d 	.word	0x0800252d
 80024b0:	0800252d 	.word	0x0800252d
 80024b4:	080024dd 	.word	0x080024dd
 80024b8:	0800250d 	.word	0x0800250d
 80024bc:	08002515 	.word	0x08002515
 80024c0:	0800252d 	.word	0x0800252d
 80024c4:	0800252d 	.word	0x0800252d
 80024c8:	0800252d 	.word	0x0800252d
 80024cc:	0800252d 	.word	0x0800252d
 80024d0:	0800252d 	.word	0x0800252d
 80024d4:	0800252d 	.word	0x0800252d
 80024d8:	08002531 	.word	0x08002531
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	617b      	str	r3, [r7, #20]
		while ( arg_int > 0 )
 80024e0:	e010      	b.n	8002504 <u8x8_byte_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 80024e2:	4b16      	ldr	r3, [pc, #88]	; (800253c <u8x8_byte_hw_i2c+0xb4>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	b2d1      	uxtb	r1, r2
 80024ea:	4a14      	ldr	r2, [pc, #80]	; (800253c <u8x8_byte_hw_i2c+0xb4>)
 80024ec:	7011      	strb	r1, [r2, #0]
 80024ee:	461a      	mov	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	7819      	ldrb	r1, [r3, #0]
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <u8x8_byte_hw_i2c+0xb8>)
 80024f6:	5499      	strb	r1, [r3, r2]
			data++;
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
			arg_int--;
 80024fe:	7abb      	ldrb	r3, [r7, #10]
 8002500:	3b01      	subs	r3, #1
 8002502:	72bb      	strb	r3, [r7, #10]
		while ( arg_int > 0 )
 8002504:	7abb      	ldrb	r3, [r7, #10]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1eb      	bne.n	80024e2 <u8x8_byte_hw_i2c+0x5a>
		}
		break;
 800250a:	e012      	b.n	8002532 <u8x8_byte_hw_i2c+0xaa>
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;

	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <u8x8_byte_hw_i2c+0xb4>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
		break;
 8002512:	e00e      	b.n	8002532 <u8x8_byte_hw_i2c+0xaa>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&BIGOLED_I2C_PORT, (0x78), (uint8_t *)buffer, buf_idx, 1000);
 8002514:	4b09      	ldr	r3, [pc, #36]	; (800253c <u8x8_byte_hw_i2c+0xb4>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b29b      	uxth	r3, r3
 800251a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800251e:	9200      	str	r2, [sp, #0]
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <u8x8_byte_hw_i2c+0xb8>)
 8002522:	2178      	movs	r1, #120	; 0x78
 8002524:	4807      	ldr	r0, [pc, #28]	; (8002544 <u8x8_byte_hw_i2c+0xbc>)
 8002526:	f00a fac9 	bl	800cabc <HAL_I2C_Master_Transmit>
		break;
 800252a:	e002      	b.n	8002532 <u8x8_byte_hw_i2c+0xaa>

	default:
		return 0;
 800252c:	2300      	movs	r3, #0
 800252e:	e001      	b.n	8002534 <u8x8_byte_hw_i2c+0xac>
		break;
 8002530:	bf00      	nop
	}
	return 1;
 8002532:	2301      	movs	r3, #1
}
 8002534:	4618      	mov	r0, r3
 8002536:	3718      	adds	r7, #24
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	20000ab1 	.word	0x20000ab1
 8002540:	20000ab4 	.word	0x20000ab4
 8002544:	20001d60 	.word	0x20001d60

08002548 <u8x8_gpio_and_delay>:

/*
* Fonction pour u8g2
*/
uint8_t u8x8_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr) {
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	72fb      	strb	r3, [r7, #11]
 8002556:	4613      	mov	r3, r2
 8002558:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	3b28      	subs	r3, #40	; 0x28
 800255e:	2b25      	cmp	r3, #37	; 0x25
 8002560:	d867      	bhi.n	8002632 <u8x8_gpio_and_delay+0xea>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <u8x8_gpio_and_delay+0x20>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002601 	.word	0x08002601
 800256c:	08002609 	.word	0x08002609
 8002570:	08002633 	.word	0x08002633
 8002574:	08002633 	.word	0x08002633
 8002578:	08002633 	.word	0x08002633
 800257c:	0800263d 	.word	0x0800263d
 8002580:	08002633 	.word	0x08002633
 8002584:	08002633 	.word	0x08002633
 8002588:	08002633 	.word	0x08002633
 800258c:	08002633 	.word	0x08002633
 8002590:	08002633 	.word	0x08002633
 8002594:	08002633 	.word	0x08002633
 8002598:	08002633 	.word	0x08002633
 800259c:	08002633 	.word	0x08002633
 80025a0:	08002633 	.word	0x08002633
 80025a4:	08002633 	.word	0x08002633
 80025a8:	08002633 	.word	0x08002633
 80025ac:	08002633 	.word	0x08002633
 80025b0:	08002633 	.word	0x08002633
 80025b4:	08002633 	.word	0x08002633
 80025b8:	08002633 	.word	0x08002633
 80025bc:	08002633 	.word	0x08002633
 80025c0:	08002633 	.word	0x08002633
 80025c4:	08002633 	.word	0x08002633
 80025c8:	08002633 	.word	0x08002633
 80025cc:	08002633 	.word	0x08002633
 80025d0:	08002633 	.word	0x08002633
 80025d4:	08002633 	.word	0x08002633
 80025d8:	08002633 	.word	0x08002633
 80025dc:	08002633 	.word	0x08002633
 80025e0:	08002633 	.word	0x08002633
 80025e4:	08002633 	.word	0x08002633
 80025e8:	08002633 	.word	0x08002633
 80025ec:	08002633 	.word	0x08002633
 80025f0:	08002633 	.word	0x08002633
 80025f4:	08002633 	.word	0x08002633
 80025f8:	08002613 	.word	0x08002613
 80025fc:	08002623 	.word	0x08002623
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8002600:	2001      	movs	r0, #1
 8002602:	f007 ff35 	bl	800a470 <HAL_Delay>
		break;
 8002606:	e01a      	b.n	800263e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8002608:	7abb      	ldrb	r3, [r7, #10]
 800260a:	4618      	mov	r0, r3
 800260c:	f007 ff30 	bl	800a470 <HAL_Delay>
		break;
 8002610:	e015      	b.n	800263e <u8x8_gpio_and_delay+0xf6>
		break;

	case U8X8_MSG_GPIO_I2C_CLOCK:
		// arg_int=0: Output low at I2C clock pin
		// arg_int=1: Input dir with pullup high for I2C clock pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, arg_int);
 8002612:	7abb      	ldrb	r3, [r7, #10]
 8002614:	461a      	mov	r2, r3
 8002616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261a:	480b      	ldr	r0, [pc, #44]	; (8002648 <u8x8_gpio_and_delay+0x100>)
 800261c:	f00a f9a6 	bl	800c96c <HAL_GPIO_WritePin>
		break;
 8002620:	e00d      	b.n	800263e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_GPIO_I2C_DATA:
		// arg_int=0: Output low at I2C data pin
		// arg_int=1: Input dir with pullup high for I2C data pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, arg_int);
 8002622:	7abb      	ldrb	r3, [r7, #10]
 8002624:	461a      	mov	r2, r3
 8002626:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <u8x8_gpio_and_delay+0x100>)
 800262c:	f00a f99e 	bl	800c96c <HAL_GPIO_WritePin>
		break;
 8002630:	e005      	b.n	800263e <u8x8_gpio_and_delay+0xf6>

	default:
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 800263a:	e000      	b.n	800263e <u8x8_gpio_and_delay+0xf6>
		break;
 800263c:	bf00      	nop

	}
	return 1;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	48000400 	.word	0x48000400

0800264c <display_BatteryLvl>:

/*
* Permet d'afficher le niveau de batterie
*/
void display_BatteryLvl(uint8_t lvl, uint8_t posXmes, uint8_t posYmes)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af02      	add	r7, sp, #8
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	460b      	mov	r3, r1
 8002658:	71bb      	strb	r3, [r7, #6]
 800265a:	4613      	mov	r3, r2
 800265c:	717b      	strb	r3, [r7, #5]

	if ( lvl <= 10) 
 800265e:	79fb      	ldrb	r3, [r7, #7]
 8002660:	2b0a      	cmp	r3, #10
 8002662:	d80a      	bhi.n	800267a <display_BatteryLvl+0x2e>
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_0_width, bat_0_height, (uint8_t *)bat_0_bits);
 8002664:	79b9      	ldrb	r1, [r7, #6]
 8002666:	4b37      	ldr	r3, [pc, #220]	; (8002744 <display_BatteryLvl+0xf8>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	230c      	movs	r3, #12
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2314      	movs	r3, #20
 8002670:	2200      	movs	r2, #0
 8002672:	4835      	ldr	r0, [pc, #212]	; (8002748 <display_BatteryLvl+0xfc>)
 8002674:	f004 fac4 	bl	8006c00 <u8g2_DrawXBM>
	}
	else
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width, BattertyError_height, (uint8_t *)BattertyError_bits);
	}
}
 8002678:	e05f      	b.n	800273a <display_BatteryLvl+0xee>
	if (lvl > 10 && lvl < 30) 
 800267a:	79fb      	ldrb	r3, [r7, #7]
 800267c:	2b0a      	cmp	r3, #10
 800267e:	d90d      	bls.n	800269c <display_BatteryLvl+0x50>
 8002680:	79fb      	ldrb	r3, [r7, #7]
 8002682:	2b1d      	cmp	r3, #29
 8002684:	d80a      	bhi.n	800269c <display_BatteryLvl+0x50>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_20_width, bat_20_height, (uint8_t *)bat_20_bits);
 8002686:	79b9      	ldrb	r1, [r7, #6]
 8002688:	4b30      	ldr	r3, [pc, #192]	; (800274c <display_BatteryLvl+0x100>)
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	230c      	movs	r3, #12
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2314      	movs	r3, #20
 8002692:	2200      	movs	r2, #0
 8002694:	482c      	ldr	r0, [pc, #176]	; (8002748 <display_BatteryLvl+0xfc>)
 8002696:	f004 fab3 	bl	8006c00 <u8g2_DrawXBM>
 800269a:	e04e      	b.n	800273a <display_BatteryLvl+0xee>
	if ( lvl >= 30 && lvl < 50) 
 800269c:	79fb      	ldrb	r3, [r7, #7]
 800269e:	2b1d      	cmp	r3, #29
 80026a0:	d90d      	bls.n	80026be <display_BatteryLvl+0x72>
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	2b31      	cmp	r3, #49	; 0x31
 80026a6:	d80a      	bhi.n	80026be <display_BatteryLvl+0x72>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_40_width, bat_40_height, (uint8_t *)bat_40_bits);
 80026a8:	79b9      	ldrb	r1, [r7, #6]
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <display_BatteryLvl+0x104>)
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	230c      	movs	r3, #12
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2314      	movs	r3, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	4824      	ldr	r0, [pc, #144]	; (8002748 <display_BatteryLvl+0xfc>)
 80026b8:	f004 faa2 	bl	8006c00 <u8g2_DrawXBM>
 80026bc:	e03d      	b.n	800273a <display_BatteryLvl+0xee>
	if (lvl >= 50 && lvl < 70) 
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b31      	cmp	r3, #49	; 0x31
 80026c2:	d90d      	bls.n	80026e0 <display_BatteryLvl+0x94>
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b45      	cmp	r3, #69	; 0x45
 80026c8:	d80a      	bhi.n	80026e0 <display_BatteryLvl+0x94>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_60_width, bat_60_height, (uint8_t *)bat_60_bits);
 80026ca:	79b9      	ldrb	r1, [r7, #6]
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <display_BatteryLvl+0x108>)
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	230c      	movs	r3, #12
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2314      	movs	r3, #20
 80026d6:	2200      	movs	r2, #0
 80026d8:	481b      	ldr	r0, [pc, #108]	; (8002748 <display_BatteryLvl+0xfc>)
 80026da:	f004 fa91 	bl	8006c00 <u8g2_DrawXBM>
 80026de:	e02c      	b.n	800273a <display_BatteryLvl+0xee>
	if (lvl >= 70 && lvl < 90) {
 80026e0:	79fb      	ldrb	r3, [r7, #7]
 80026e2:	2b45      	cmp	r3, #69	; 0x45
 80026e4:	d90d      	bls.n	8002702 <display_BatteryLvl+0xb6>
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b59      	cmp	r3, #89	; 0x59
 80026ea:	d80a      	bhi.n	8002702 <display_BatteryLvl+0xb6>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_80_width, bat_80_height, (uint8_t *)bat_80_bits);
 80026ec:	79b9      	ldrb	r1, [r7, #6]
 80026ee:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <display_BatteryLvl+0x10c>)
 80026f0:	9301      	str	r3, [sp, #4]
 80026f2:	230c      	movs	r3, #12
 80026f4:	9300      	str	r3, [sp, #0]
 80026f6:	2314      	movs	r3, #20
 80026f8:	2200      	movs	r2, #0
 80026fa:	4813      	ldr	r0, [pc, #76]	; (8002748 <display_BatteryLvl+0xfc>)
 80026fc:	f004 fa80 	bl	8006c00 <u8g2_DrawXBM>
 8002700:	e01b      	b.n	800273a <display_BatteryLvl+0xee>
	if (lvl >= 90 && lvl <= 100)
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b59      	cmp	r3, #89	; 0x59
 8002706:	d90d      	bls.n	8002724 <display_BatteryLvl+0xd8>
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b64      	cmp	r3, #100	; 0x64
 800270c:	d80a      	bhi.n	8002724 <display_BatteryLvl+0xd8>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_100_width, bat_100_height, (uint8_t *)bat_100_bits);
 800270e:	79b9      	ldrb	r1, [r7, #6]
 8002710:	4b12      	ldr	r3, [pc, #72]	; (800275c <display_BatteryLvl+0x110>)
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	230c      	movs	r3, #12
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	2314      	movs	r3, #20
 800271a:	2200      	movs	r2, #0
 800271c:	480a      	ldr	r0, [pc, #40]	; (8002748 <display_BatteryLvl+0xfc>)
 800271e:	f004 fa6f 	bl	8006c00 <u8g2_DrawXBM>
 8002722:	e00a      	b.n	800273a <display_BatteryLvl+0xee>
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width, BattertyError_height, (uint8_t *)BattertyError_bits);
 8002724:	79b9      	ldrb	r1, [r7, #6]
 8002726:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <display_BatteryLvl+0x114>)
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	230c      	movs	r3, #12
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	2314      	movs	r3, #20
 8002730:	2200      	movs	r2, #0
 8002732:	4805      	ldr	r0, [pc, #20]	; (8002748 <display_BatteryLvl+0xfc>)
 8002734:	f004 fa64 	bl	8006c00 <u8g2_DrawXBM>
}
 8002738:	e7ff      	b.n	800273a <display_BatteryLvl+0xee>
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	20000628 	.word	0x20000628
 8002748:	200026c4 	.word	0x200026c4
 800274c:	2000064c 	.word	0x2000064c
 8002750:	20000670 	.word	0x20000670
 8002754:	20000694 	.word	0x20000694
 8002758:	200006b8 	.word	0x200006b8
 800275c:	200006dc 	.word	0x200006dc
 8002760:	20000700 	.word	0x20000700

08002764 <PowerVib>:
	HAL_Delay(Delay);
	OutBuzOff();
}

void PowerVib(uint32_t Delay)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
	OutMotorWu(1);
 800276c:	2001      	movs	r0, #1
 800276e:	f000 fea1 	bl	80034b4 <OutMotorWu>
	HAL_Delay(Delay);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f007 fe7c 	bl	800a470 <HAL_Delay>
	OutMotorWu(0);
 8002778:	2000      	movs	r0, #0
 800277a:	f000 fe9b 	bl	80034b4 <OutMotorWu>
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <chargerRead>:

extern HAL_StatusTypeDef I2C1_OK;

//LP3947
void chargerRead(int *bmsEOC,int *bmsCharge, int TabGen[])
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b08a      	sub	sp, #40	; 0x28
 800278c:	af04      	add	r7, sp, #16
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]

		
	uint8_t buffer = 0x00 ; 
 8002794:	2300      	movs	r3, #0
 8002796:	75fb      	strb	r3, [r7, #23]
		
	if (I2C1_OK == HAL_OK)
 8002798:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <chargerRead+0x6c>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d110      	bne.n	80027c2 <chargerRead+0x3a>
	{
		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C <<1, 0x01, 1, &buffer, 1, 100); // Charger
 80027a0:	2364      	movs	r3, #100	; 0x64
 80027a2:	9302      	str	r3, [sp, #8]
 80027a4:	2301      	movs	r3, #1
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	f107 0317 	add.w	r3, r7, #23
 80027ac:	9300      	str	r3, [sp, #0]
 80027ae:	2301      	movs	r3, #1
 80027b0:	2201      	movs	r2, #1
 80027b2:	218e      	movs	r1, #142	; 0x8e
 80027b4:	4810      	ldr	r0, [pc, #64]	; (80027f8 <chargerRead+0x70>)
 80027b6:	f00a fa75 	bl	800cca4 <HAL_I2C_Mem_Read>
 80027ba:	4603      	mov	r3, r0
 80027bc:	461a      	mov	r2, r3
 80027be:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <chargerRead+0x6c>)
 80027c0:	701a      	strb	r2, [r3, #0]
	}
	
	

	*bmsEOC    = (int) (( buffer & ( (uint8_t) 0x10) )/( (uint8_t) 0x10)); //10000
 80027c2:	7dfb      	ldrb	r3, [r7, #23]
 80027c4:	f003 0310 	and.w	r3, r3, #16
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da00      	bge.n	80027ce <chargerRead+0x46>
 80027cc:	330f      	adds	r3, #15
 80027ce:	111b      	asrs	r3, r3, #4
 80027d0:	461a      	mov	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	601a      	str	r2, [r3, #0]
	*bmsCharge  = (int) (( buffer & ( (uint8_t) 0x08) )/( (uint8_t) 0x08)); //1000
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	da00      	bge.n	80027e2 <chargerRead+0x5a>
 80027e0:	3307      	adds	r3, #7
 80027e2:	10db      	asrs	r3, r3, #3
 80027e4:	461a      	mov	r2, r3
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	601a      	str	r2, [r3, #0]
//	{
//		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C <<1, 0x00, 1, &buffer, 1, 50); // Charger
//	}


}
 80027ea:	bf00      	nop
 80027ec:	3718      	adds	r7, #24
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	20000b69 	.word	0x20000b69
 80027f8:	20001dac 	.word	0x20001dac
 80027fc:	00000000 	.word	0x00000000

08002800 <ReadBat>:


//MAX17260
void ReadBat(int *percent, int bmsEOC, int bmsCharge, int TabGen[]) 
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b092      	sub	sp, #72	; 0x48
 8002804:	af04      	add	r7, sp, #16
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
	int battmVolt;
	int newPercent ;
	int current;
		
 
	if(TabGen[LOCK_I2C1] == 0) // I2C available
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	33ec      	adds	r3, #236	; 0xec
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2b00      	cmp	r3, #0
 8002816:	f040 8138 	bne.w	8002a8a <ReadBat+0x28a>
	{	
		buffer[1] = 0x00;  buffer[0] = 0x00;
 800281a:	2300      	movs	r3, #0
 800281c:	757b      	strb	r3, [r7, #21]
 800281e:	2300      	movs	r3, #0
 8002820:	753b      	strb	r3, [r7, #20]
		
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	33ec      	adds	r3, #236	; 0xec
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);
		
		// 0x36 => max17260
		// 0x47 => LP3947 (to test)

		if (I2C1_OK == HAL_OK)
 800282a:	4b9d      	ldr	r3, [pc, #628]	; (8002aa0 <ReadBat+0x2a0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	f040 8081 	bne.w	8002936 <ReadBat+0x136>
		{
			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, 0x36 << 1, 0x19, 1, buffer, 2, 100);
 8002834:	2364      	movs	r3, #100	; 0x64
 8002836:	9302      	str	r3, [sp, #8]
 8002838:	2302      	movs	r3, #2
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	f107 0314 	add.w	r3, r7, #20
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	2301      	movs	r3, #1
 8002844:	2219      	movs	r2, #25
 8002846:	216c      	movs	r1, #108	; 0x6c
 8002848:	4896      	ldr	r0, [pc, #600]	; (8002aa4 <ReadBat+0x2a4>)
 800284a:	f00a fa2b 	bl	800cca4 <HAL_I2C_Mem_Read>
 800284e:	4603      	mov	r3, r0
 8002850:	461a      	mov	r2, r3
 8002852:	4b93      	ldr	r3, [pc, #588]	; (8002aa0 <ReadBat+0x2a0>)
 8002854:	701a      	strb	r2, [r3, #0]
			uint32_t buff = buffer[1];
 8002856:	7d7b      	ldrb	r3, [r7, #21]
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
			buff = buff * 256;
 800285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285c:	021b      	lsls	r3, r3, #8
 800285e:	633b      	str	r3, [r7, #48]	; 0x30
			//buff += buffer[0]	;
			buff = buff / 16.0;
 8002860:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002862:	f7fd fe4f 	bl	8000504 <__aeabi_ui2d>
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	4b8f      	ldr	r3, [pc, #572]	; (8002aa8 <ReadBat+0x2a8>)
 800286c:	f7fd ffee 	bl	800084c <__aeabi_ddiv>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f996 	bl	8000ba8 <__aeabi_d2uiz>
 800287c:	4603      	mov	r3, r0
 800287e:	633b      	str	r3, [r7, #48]	; 0x30
			battmVolt = buff * 1.25;
 8002880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002882:	f7fd fe3f 	bl	8000504 <__aeabi_ui2d>
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	4b88      	ldr	r3, [pc, #544]	; (8002aac <ReadBat+0x2ac>)
 800288c:	f7fd feb4 	bl	80005f8 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f7fe f95e 	bl	8000b58 <__aeabi_d2iz>
 800289c:	4603      	mov	r3, r0
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c

			if(battmVolt >= BAT_MIN)
 80028a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a2:	f640 42e3 	movw	r2, #3299	; 0xce3
 80028a6:	4293      	cmp	r3, r2
 80028a8:	dd19      	ble.n	80028de <ReadBat+0xde>
			{
				if (battmVolt < BAT_MAX)
 80028aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ac:	f241 0203 	movw	r2, #4099	; 0x1003
 80028b0:	4293      	cmp	r3, r2
 80028b2:	dc11      	bgt.n	80028d8 <ReadBat+0xd8>
				{
					buff = battmVolt - BAT_MIN;
 80028b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b6:	f6a3 43e4 	subw	r3, r3, #3300	; 0xce4
 80028ba:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff * 100;
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	2264      	movs	r2, #100	; 0x64
 80028c0:	fb02 f303 	mul.w	r3, r2, r3
 80028c4:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff / (BAT_MAX - BAT_MIN);
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	4a79      	ldr	r2, [pc, #484]	; (8002ab0 <ReadBat+0x2b0>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30

					newPercent = buff ; //+ 5; // =(95 * ((A5 - 3100) / 700) + 5)
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	637b      	str	r3, [r7, #52]	; 0x34
 80028d6:	e00c      	b.n	80028f2 <ReadBat+0xf2>
				}
				else
				{
					newPercent = 100;
 80028d8:	2364      	movs	r3, #100	; 0x64
 80028da:	637b      	str	r3, [r7, #52]	; 0x34
 80028dc:	e009      	b.n	80028f2 <ReadBat+0xf2>
				}
			}
			else
			{
				if(battmVolt < BAT_MIN - 200)
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	f640 421b 	movw	r2, #3099	; 0xc1b
 80028e4:	4293      	cmp	r3, r2
 80028e6:	dc02      	bgt.n	80028ee <ReadBat+0xee>
					newPercent = 255;
 80028e8:	23ff      	movs	r3, #255	; 0xff
 80028ea:	637b      	str	r3, [r7, #52]	; 0x34
 80028ec:	e001      	b.n	80028f2 <ReadBat+0xf2>
				else
					newPercent = 1;
 80028ee:	2301      	movs	r3, #1
 80028f0:	637b      	str	r3, [r7, #52]	; 0x34
			}



			if(battmVolt  < 3800)
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	f640 62d7 	movw	r2, #3799	; 0xed7
 80028f8:	4293      	cmp	r3, r2
 80028fa:	dc05      	bgt.n	8002908 <ReadBat+0x108>
			{
				TabGen[LOW_BAT] = 1;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002902:	2201      	movs	r2, #1
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	e004      	b.n	8002912 <ReadBat+0x112>
			}
			else
				TabGen[LOW_BAT] = 0;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]



			if ((newPercent < *percent) || (bmsEOC==1) || (bmsCharge==1) || newPercent == 255)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002918:	429a      	cmp	r2, r3
 800291a:	db08      	blt.n	800292e <ReadBat+0x12e>
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d005      	beq.n	800292e <ReadBat+0x12e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d002      	beq.n	800292e <ReadBat+0x12e>
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	2bff      	cmp	r3, #255	; 0xff
 800292c:	d108      	bne.n	8002940 <ReadBat+0x140>
			{
				*percent = newPercent;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e004      	b.n	8002940 <ReadBat+0x140>
			}
		}
		else
			*percent = TabGen[BAT_VALUE];
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);		// bms // AvrgVoltage (mm 45s)
		
		TabGen[LOCK_I2C1] = 0;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	33ec      	adds	r3, #236	; 0xec
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
		




		uint16_t capacity_uV = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	857b      	strh	r3, [r7, #42]	; 0x2a
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x05, 1, buffer, 2, 20); // capacity measured

		capacity_uV = buffer[1] *255 + buffer[0];
 800294c:	7d7b      	ldrb	r3, [r7, #21]
 800294e:	b29b      	uxth	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	0212      	lsls	r2, r2, #8
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	b29a      	uxth	r2, r3
 8002958:	7d3b      	ldrb	r3, [r7, #20]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4413      	add	r3, r2
 800295e:	857b      	strh	r3, [r7, #42]	; 0x2a
		float capacity = (5 / 0.01) * capacity_uV / 1000; // capacity in mAH = (5.0uV / RSENSE) * capacity in uv / 1000
 8002960:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fdde 	bl	8000524 <__aeabi_i2d>
 8002968:	f04f 0200 	mov.w	r2, #0
 800296c:	4b51      	ldr	r3, [pc, #324]	; (8002ab4 <ReadBat+0x2b4>)
 800296e:	f7fd fe43 	bl	80005f8 <__aeabi_dmul>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	4610      	mov	r0, r2
 8002978:	4619      	mov	r1, r3
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	4b4e      	ldr	r3, [pc, #312]	; (8002ab8 <ReadBat+0x2b8>)
 8002980:	f7fd ff64 	bl	800084c <__aeabi_ddiv>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f92c 	bl	8000be8 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	627b      	str	r3, [r7, #36]	; 0x24

		uint16_t cycles = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	847b      	strh	r3, [r7, #34]	; 0x22
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x17, 1, buffer, 2, 20); //
		cycles = buffer[1] *255 + buffer[0];
 8002998:	7d7b      	ldrb	r3, [r7, #21]
 800299a:	b29b      	uxth	r3, r3
 800299c:	461a      	mov	r2, r3
 800299e:	0212      	lsls	r2, r2, #8
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	7d3b      	ldrb	r3, [r7, #20]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	4413      	add	r3, r2
 80029aa:	847b      	strh	r3, [r7, #34]	; 0x22

		uint16_t percentage = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	843b      	strh	r3, [r7, #32]

		int16_t avg_current = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	83fb      	strh	r3, [r7, #30]
//		if (I2C1_OK == HAL_OK)
//		{
//			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x0B, 1, buffer, 2, 100); // avg current
//		}

		uint16_t temp = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	83bb      	strh	r3, [r7, #28]
		temp = buffer[1];
 80029b8:	7d7b      	ldrb	r3, [r7, #21]
 80029ba:	83bb      	strh	r3, [r7, #28]
		temp = temp ;//& 0b01111111;
		temp = temp << 8 ;
 80029bc:	8bbb      	ldrh	r3, [r7, #28]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	83bb      	strh	r3, [r7, #28]
		temp = temp + buffer[0];
 80029c2:	7d3b      	ldrb	r3, [r7, #20]
 80029c4:	b29a      	uxth	r2, r3
 80029c6:	8bbb      	ldrh	r3, [r7, #28]
 80029c8:	4413      	add	r3, r2
 80029ca:	83bb      	strh	r3, [r7, #28]
		avg_current = (int16_t) temp;
 80029cc:	8bbb      	ldrh	r3, [r7, #28]
 80029ce:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int16_t)0xcdde;
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] =ke
		avg_current = avg_current*(1.5625/0.01)/1000;// * (buffer[1] *255 + buffer[0]) ;
 80029d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fd fda5 	bl	8000524 <__aeabi_i2d>
 80029da:	a32f      	add	r3, pc, #188	; (adr r3, 8002a98 <ReadBat+0x298>)
 80029dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e0:	f7fd fe0a 	bl	80005f8 <__aeabi_dmul>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b31      	ldr	r3, [pc, #196]	; (8002ab8 <ReadBat+0x2b8>)
 80029f2:	f7fd ff2b 	bl	800084c <__aeabi_ddiv>
 80029f6:	4602      	mov	r2, r0
 80029f8:	460b      	mov	r3, r1
 80029fa:	4610      	mov	r0, r2
 80029fc:	4619      	mov	r1, r3
 80029fe:	f7fe f8ab 	bl	8000b58 <__aeabi_d2iz>
 8002a02:	4603      	mov	r3, r0
 8002a04:	83fb      	strh	r3, [r7, #30]
		TabGen[AVG_CURRENT] = (int)abs(avg_current);
 8002a06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bfb8      	it	lt
 8002a0e:	425b      	neglt	r3, r3
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a18:	601a      	str	r2, [r3, #0]

		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x1C, 1, buffer, 2, 20); // min max current

		uint16_t min,max = 0;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	837b      	strh	r3, [r7, #26]

		max = buffer[1];
 8002a1e:	7d7b      	ldrb	r3, [r7, #21]
 8002a20:	837b      	strh	r3, [r7, #26]
		min = buffer[0];
 8002a22:	7d3b      	ldrb	r3, [r7, #20]
 8002a24:	833b      	strh	r3, [r7, #24]
		//temp = temp << 8 ;
		//temp = buffer[0];
				//(uint16_t)buffer[1] << 8 + buffer[0];
		avg_current = (int)min;
 8002a26:	8b3b      	ldrh	r3, [r7, #24]
 8002a28:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] = avg_current*(0.4/0.01)/1000;// * (buffer[1] *255 + buffer[0]) ;

		uint16_t time = 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x20, 1, buffer, 2, 100); // TTF
		time = buffer[1] * 255 + buffer[0];
 8002a2e:	7d7b      	ldrb	r3, [r7, #21]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	461a      	mov	r2, r3
 8002a34:	0212      	lsls	r2, r2, #8
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	7d3b      	ldrb	r3, [r7, #20]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a42:	8afb      	ldrh	r3, [r7, #22]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <ReadBat+0x2bc>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a4e:	8afb      	ldrh	r3, [r7, #22]
 8002a50:	4a1a      	ldr	r2, [pc, #104]	; (8002abc <ReadBat+0x2bc>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	82fb      	strh	r3, [r7, #22]

		time = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x11, 1, buffer, 2, 100); // TTE
		time = buffer[1] *255 + buffer[0];
 8002a5e:	7d7b      	ldrb	r3, [r7, #21]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	461a      	mov	r2, r3
 8002a64:	0212      	lsls	r2, r2, #8
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	7d3b      	ldrb	r3, [r7, #20]
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4413      	add	r3, r2
 8002a70:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a72:	8afb      	ldrh	r3, [r7, #22]
 8002a74:	4a11      	ldr	r2, [pc, #68]	; (8002abc <ReadBat+0x2bc>)
 8002a76:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a7e:	8afb      	ldrh	r3, [r7, #22]
 8002a80:	4a0e      	ldr	r2, [pc, #56]	; (8002abc <ReadBat+0x2bc>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	095b      	lsrs	r3, r3, #5
 8002a88:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(100);
		OutCmdBuzzer(0);
		HAL_Delay(50);
	}*/
			
}
 8002a8a:	bf00      	nop
 8002a8c:	3738      	adds	r7, #56	; 0x38
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	f3af 8000 	nop.w
 8002a98:	00000000 	.word	0x00000000
 8002a9c:	40638800 	.word	0x40638800
 8002aa0:	20000b69 	.word	0x20000b69
 8002aa4:	20001dac 	.word	0x20001dac
 8002aa8:	40300000 	.word	0x40300000
 8002aac:	3ff40000 	.word	0x3ff40000
 8002ab0:	51eb851f 	.word	0x51eb851f
 8002ab4:	407f4000 	.word	0x407f4000
 8002ab8:	408f4000 	.word	0x408f4000
 8002abc:	88888889 	.word	0x88888889

08002ac0 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aca:	2000      	movs	r0, #0
 8002acc:	f000 f83e 	bl	8002b4c <ee_read>
 8002ad0:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	bd80      	pop	{r7, pc}
	...

08002ad8 <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8002ae2:	f009 facb 	bl	800c07c <HAL_FLASH_Unlock>
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
  flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
#elif _EE_PAGE_OR_SECTOR == PAGE_NUM
  flashErase.NbPages = 1;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 8002aea:	237f      	movs	r3, #127	; 0x7f
 8002aec:	617b      	str	r3, [r7, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8002af2:	2301      	movs	r3, #1
 8002af4:	613b      	str	r3, [r7, #16]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8002af6:	f107 021c 	add.w	r2, r7, #28
 8002afa:	f107 030c 	add.w	r3, r7, #12
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f009 fba1 	bl	800c248 <HAL_FLASHEx_Erase>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d115      	bne.n	8002b38 <ee_format+0x60>
  {
    HAL_FLASH_Lock();
 8002b0c:	f009 fad8 	bl	800c0c0 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b16:	d001      	beq.n	8002b1c <ee_format+0x44>
      return false;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	e010      	b.n	8002b3e <ee_format+0x66>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8002b1c:	79fb      	ldrb	r3, [r7, #7]
 8002b1e:	f083 0301 	eor.w	r3, r3, #1
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <ee_format+0x5c>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8002b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b2c:	21ff      	movs	r1, #255	; 0xff
 8002b2e:	4806      	ldr	r0, [pc, #24]	; (8002b48 <ee_format+0x70>)
 8002b30:	f014 ff0c 	bl	801794c <memset>
#endif
      return true;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e002      	b.n	8002b3e <ee_format+0x66>
    }
  }
  HAL_FLASH_Lock();
 8002b38:	f009 fac2 	bl	800c0c0 <HAL_FLASH_Lock>
  return false;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3720      	adds	r7, #32
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200018fc 	.word	0x200018fc

08002b4c <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b62:	d901      	bls.n	8002b68 <ee_read+0x1c>
    return false;
 8002b64:	2300      	movs	r3, #0
 8002b66:	e02b      	b.n	8002bc0 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	617b      	str	r3, [r7, #20]
 8002b6c:	e021      	b.n	8002bb2 <ee_read+0x66>
  {
    if (data != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00b      	beq.n	8002b8c <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002b7a:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	701a      	strb	r2, [r3, #0]
      data++;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b92:	d20b      	bcs.n	8002bac <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002b9a:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	b2d9      	uxtb	r1, r3
 8002ba2:	4a0a      	ldr	r2, [pc, #40]	; (8002bcc <ee_read+0x80>)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	460a      	mov	r2, r1
 8002baa:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	617b      	str	r3, [r7, #20]
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	697a      	ldr	r2, [r7, #20]
 8002bba:	429a      	cmp	r2, r3
 8002bbc:	d3d7      	bcc.n	8002b6e <ee_read+0x22>
#endif
  }
  return true;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	371c      	adds	r7, #28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr
 8002bcc:	200018fc 	.word	0x200018fc

08002bd0 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8002bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd4:	b091      	sub	sp, #68	; 0x44
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002bda:	62b9      	str	r1, [r7, #40]	; 0x28
 8002bdc:	627a      	str	r2, [r7, #36]	; 0x24
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002bde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be2:	4413      	add	r3, r2
 8002be4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002be8:	d901      	bls.n	8002bee <ee_write+0x1e>
    return false;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e0c2      	b.n	8002d74 <ee_write+0x1a4>
  if (data == NULL)
 8002bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <ee_write+0x28>
    return false;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e0bd      	b.n	8002d74 <ee_write+0x1a4>
  HAL_FLASH_Unlock();
 8002bf8:	f009 fa40 	bl	800c07c <HAL_FLASH_Unlock>
      return false;
    }
  }
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c00:	e0b0      	b.n	8002d64 <ee_write+0x194>
  {
    uint64_t data64 = data[i];
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c06:	4413      	add	r3, r2
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 1] * 0x100;
 8002c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c16:	1c5a      	adds	r2, r3, #1
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	4413      	add	r3, r2
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	4618      	mov	r0, r3
 8002c22:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c2a:	1814      	adds	r4, r2, r0
 8002c2c:	eb43 0501 	adc.w	r5, r3, r1
 8002c30:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    data64 += data[i + 2] * 0x10000;
 8002c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c36:	1c9a      	adds	r2, r3, #2
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	4618      	mov	r0, r3
 8002c42:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c4a:	eb12 0800 	adds.w	r8, r2, r0
 8002c4e:	eb43 0901 	adc.w	r9, r3, r1
 8002c52:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    data64 += data[i + 3] * 0x1000000;
 8002c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c58:	1cda      	adds	r2, r3, #3
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	4413      	add	r3, r2
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	4618      	mov	r0, r3
 8002c64:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c68:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c6c:	eb12 0a00 	adds.w	sl, r2, r0
 8002c70:	eb43 0b01 	adc.w	fp, r3, r1
 8002c74:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    data64 += data[i + 4] * 0x100000000;
 8002c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7a:	1d1a      	adds	r2, r3, #4
 8002c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7e:	4413      	add	r3, r2
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	f04f 0300 	mov.w	r3, #0
 8002c88:	f04f 0000 	mov.w	r0, #0
 8002c8c:	f04f 0100 	mov.w	r1, #0
 8002c90:	0011      	movs	r1, r2
 8002c92:	2000      	movs	r0, #0
 8002c94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c98:	1816      	adds	r6, r2, r0
 8002c9a:	61be      	str	r6, [r7, #24]
 8002c9c:	414b      	adcs	r3, r1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 5] * 0x10000000000;
 8002ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002caa:	1d5a      	adds	r2, r3, #5
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	f04f 0300 	mov.w	r3, #0
 8002cb8:	f04f 0000 	mov.w	r0, #0
 8002cbc:	f04f 0100 	mov.w	r1, #0
 8002cc0:	0211      	lsls	r1, r2, #8
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cc8:	1816      	adds	r6, r2, r0
 8002cca:	613e      	str	r6, [r7, #16]
 8002ccc:	414b      	adcs	r3, r1
 8002cce:	617b      	str	r3, [r7, #20]
 8002cd0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 6] * 0x1000000000000;
 8002cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cda:	1d9a      	adds	r2, r3, #6
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	4413      	add	r3, r2
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	0411      	lsls	r1, r2, #16
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cf8:	1816      	adds	r6, r2, r0
 8002cfa:	60be      	str	r6, [r7, #8]
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 7] * 0x100000000000000;
 8002d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0a:	1dda      	adds	r2, r3, #7
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	4413      	add	r3, r2
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	f04f 0300 	mov.w	r3, #0
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0611      	lsls	r1, r2, #24
 8002d22:	2000      	movs	r0, #0
 8002d24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d28:	1816      	adds	r6, r2, r0
 8002d2a:	603e      	str	r6, [r7, #0]
 8002d2c:	414b      	adcs	r3, r1
 8002d2e:	607b      	str	r3, [r7, #4]
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8002d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002d42:	f501 317e 	add.w	r1, r1, #260096	; 0x3f800
 8002d46:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f009 f92a 	bl	800bfa4 <HAL_FLASH_Program>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <ee_write+0x18e>
    {
      HAL_FLASH_Lock();
 8002d56:	f009 f9b3 	bl	800c0c0 <HAL_FLASH_Lock>
      return false;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e00a      	b.n	8002d74 <ee_write+0x1a4>
  for (uint32_t i = 0; i < len; i += 8)
 8002d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d60:	3308      	adds	r3, #8
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f4ff af4a 	bcc.w	8002c02 <ee_write+0x32>
    }
  }
#endif
  HAL_FLASH_Lock();
 8002d6e:	f009 f9a7 	bl	800c0c0 <HAL_FLASH_Lock>
  return true;
 8002d72:	2301      	movs	r3, #1
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3744      	adds	r7, #68	; 0x44
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002d80 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	4413      	add	r3, r2
 8002d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d96:	d901      	bls.n	8002d9c <ee_writeToRam+0x1c>
    return false;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	e00d      	b.n	8002db8 <ee_writeToRam+0x38>
  if (data == NULL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <ee_writeToRam+0x26>
    return false;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e008      	b.n	8002db8 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4a05      	ldr	r2, [pc, #20]	; (8002dc0 <ee_writeToRam+0x40>)
 8002daa:	4413      	add	r3, r2
 8002dac:	68ba      	ldr	r2, [r7, #8]
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f014 fdbd 	bl	8017930 <memcpy>
  return true;
 8002db6:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	200018fc 	.word	0x200018fc

08002dc4 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7ff fe85 	bl	8002ad8 <ee_format>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <ee_commit+0x1a>
    return false;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e006      	b.n	8002dec <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8002dde:	4a04      	ldr	r2, [pc, #16]	; (8002df0 <ee_commit+0x2c>)
 8002de0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002de4:	2000      	movs	r0, #0
 8002de6:	f7ff fef3 	bl	8002bd0 <ee_write>
 8002dea:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	200018fc 	.word	0x200018fc

08002df4 <mean>:
#include "hes_fall.h"



uint16_t mean(uint8_t *t, uint16_t val_initiale) {
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
	uint16_t a;
	a = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 8002e04:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <mean+0x60>)
 8002e06:	887b      	ldrh	r3, [r7, #2]
 8002e08:	8013      	strh	r3, [r2, #0]
 8002e0a:	e00f      	b.n	8002e2c <mean+0x38>
		a = a + t[i];
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <mean+0x60>)
 8002e0e:	881b      	ldrh	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4413      	add	r3, r2
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	89fb      	ldrh	r3, [r7, #14]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <mean+0x60>)
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	b29a      	uxth	r2, r3
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <mean+0x60>)
 8002e2a:	801a      	strh	r2, [r3, #0]
 8002e2c:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <mean+0x60>)
 8002e2e:	881b      	ldrh	r3, [r3, #0]
 8002e30:	461a      	mov	r2, r3
 8002e32:	887b      	ldrh	r3, [r7, #2]
 8002e34:	330a      	adds	r3, #10
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dde8      	ble.n	8002e0c <mean+0x18>
	}
	a = a / 11;
 8002e3a:	89fb      	ldrh	r3, [r7, #14]
 8002e3c:	4a06      	ldr	r2, [pc, #24]	; (8002e58 <mean+0x64>)
 8002e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e42:	08db      	lsrs	r3, r3, #3
 8002e44:	81fb      	strh	r3, [r7, #14]

	return a;
 8002e46:	89fb      	ldrh	r3, [r7, #14]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000b90 	.word	0x20000b90
 8002e58:	ba2e8ba3 	.word	0xba2e8ba3

08002e5c <test_chute>:



uint8_t test_chute(uint16_t *accl, uint8_t *v) {
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]

	uint32_t millis_begin;

	millis_begin = HAL_GetTick();
 8002e66:	f007 faf7 	bl	800a458 <HAL_GetTick>
 8002e6a:	60f8      	str	r0, [r7, #12]

	/*double total_time;
	clock_t start, end;
	 start = clock();
	 srand(time(NULL));*/
	uint16_t i = 0;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	82fb      	strh	r3, [r7, #22]

	uint8_t  a = 0;
 8002e70:	2300      	movs	r3, #0
 8002e72:	757b      	strb	r3, [r7, #21]


	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 8002e74:	e051      	b.n	8002f1a <test_chute+0xbe>
		//CDC_Transmit_FS("Debut test chute\n",sizeof("Debut test chute\n"));
//    Serial.print("Debut test chute\n");
		if (accl[i] < 153) {                        // on detecte la chute et le nombre 153 ~ 0.80 en d�cimale
 8002e76:	8afb      	ldrh	r3, [r7, #22]
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	881b      	ldrh	r3, [r3, #0]
 8002e80:	2b98      	cmp	r3, #152	; 0x98
 8002e82:	d847      	bhi.n	8002f14 <test_chute+0xb8>
			a = 1;
 8002e84:	2301      	movs	r3, #1
 8002e86:	757b      	strb	r3, [r7, #21]
			// CDC_Transmit_FS("a <0.8063",sizeof("a <0.8063idr"));
//          Serial.print("1er if");
			for (uint16_t j = i; j <= 2 + i; j++) {
 8002e88:	8afb      	ldrh	r3, [r7, #22]
 8002e8a:	827b      	strh	r3, [r7, #18]
 8002e8c:	e00c      	b.n	8002ea8 <test_chute+0x4c>
				if (accl[j] > 153) {               // on test si la chute dure 30ms   le nombre 153 ~ 0.80 en d�cimale
 8002e8e:	8a7b      	ldrh	r3, [r7, #18]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	2b99      	cmp	r3, #153	; 0x99
 8002e9a:	d902      	bls.n	8002ea2 <test_chute+0x46>
					a = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	757b      	strb	r3, [r7, #21]
					break;
 8002ea0:	e007      	b.n	8002eb2 <test_chute+0x56>
			for (uint16_t j = i; j <= 2 + i; j++) {
 8002ea2:	8a7b      	ldrh	r3, [r7, #18]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	827b      	strh	r3, [r7, #18]
 8002ea8:	8a7a      	ldrh	r2, [r7, #18]
 8002eaa:	8afb      	ldrh	r3, [r7, #22]
 8002eac:	3302      	adds	r3, #2
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	dded      	ble.n	8002e8e <test_chute+0x32>
				}
			}
//
//         Serial.print("a==true");
			if (a == 1) {
 8002eb2:	7d7b      	ldrb	r3, [r7, #21]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d116      	bne.n	8002ee6 <test_chute+0x8a>
				// CDC_Transmit_FS("a==true",sizeof("a==true"));
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8002eb8:	8afb      	ldrh	r3, [r7, #22]
 8002eba:	823b      	strh	r3, [r7, #16]
 8002ebc:	e00e      	b.n	8002edc <test_chute+0x80>

					if (accl[j] >= 207 ) { // /*2.5025*/){      207 ~ 2.50 en d�cimal
 8002ebe:	8a3b      	ldrh	r3, [r7, #16]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	2bce      	cmp	r3, #206	; 0xce
 8002eca:	d902      	bls.n	8002ed2 <test_chute+0x76>
						a = 1;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	757b      	strb	r3, [r7, #21]
						//		 CDC_Transmit_FS("acc supe � 8",sizeof("acc supe � 8"));
						break;
 8002ed0:	e009      	b.n	8002ee6 <test_chute+0x8a>
					}
					else {
						a = 0;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	757b      	strb	r3, [r7, #21]
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8002ed6:	8a3b      	ldrh	r3, [r7, #16]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	823b      	strh	r3, [r7, #16]
 8002edc:	8a3a      	ldrh	r2, [r7, #16]
 8002ede:	8afb      	ldrh	r3, [r7, #22]
 8002ee0:	333a      	adds	r3, #58	; 0x3a
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	ddeb      	ble.n	8002ebe <test_chute+0x62>
					}

				}

			}
			if (a == 1 ) {
 8002ee6:	7d7b      	ldrb	r3, [r7, #21]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d113      	bne.n	8002f14 <test_chute+0xb8>
				uint16_t b;
				//   float angle;
				b = mean(v, i + 3 + 56 + 50);
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	336d      	adds	r3, #109	; 0x6d
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6838      	ldr	r0, [r7, #0]
 8002ef6:	f7ff ff7d 	bl	8002df4 <mean>
 8002efa:	4603      	mov	r3, r0
 8002efc:	817b      	strh	r3, [r7, #10]
//
//
////          angle =acos(b)*180/(3.14);                         // on calcul l'angle que fais le vecteur de la pesenteur avec l'axe y

//             //if (60<=angle){
				if (b <= 140 && b >= 114)
 8002efe:	897b      	ldrh	r3, [r7, #10]
 8002f00:	2b8c      	cmp	r3, #140	; 0x8c
 8002f02:	d805      	bhi.n	8002f10 <test_chute+0xb4>
 8002f04:	897b      	ldrh	r3, [r7, #10]
 8002f06:	2b71      	cmp	r3, #113	; 0x71
 8002f08:	d902      	bls.n	8002f10 <test_chute+0xb4>
				{ // 140 ~ 0.4   -0.4 ~ 114
					a = 1;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	757b      	strb	r3, [r7, #21]
					break;
 8002f0e:	e00b      	b.n	8002f28 <test_chute+0xcc>
				}
				else
				{
					a = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	757b      	strb	r3, [r7, #21]

			}

		}

		i = i + 1;
 8002f14:	8afb      	ldrh	r3, [r7, #22]
 8002f16:	3301      	adds	r3, #1
 8002f18:	82fb      	strh	r3, [r7, #22]
	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 8002f1a:	8afb      	ldrh	r3, [r7, #22]
 8002f1c:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8002f20:	d802      	bhi.n	8002f28 <test_chute+0xcc>
 8002f22:	7d7b      	ldrb	r3, [r7, #21]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d0a6      	beq.n	8002e76 <test_chute+0x1a>

	//sprintf(lcd_buf1, "%d\n",( (int) millis_tot));
	//CDC_Transmit_FS(lcd_buf1,sizeof(lcd_buf1));


	return a;
 8002f28:	7d7b      	ldrb	r3, [r7, #21]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <LedChargeIndic>:
#include "hes_fct.h"

void LedChargeIndic(int TabGen[])
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b086      	sub	sp, #24
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
	int bmsCharge = 0;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	613b      	str	r3, [r7, #16]
	int percent = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	60fb      	str	r3, [r7, #12]

	chargerRead(&bmsEOC, &bmsCharge, TabGen);
 8002f46:	f107 0110 	add.w	r1, r7, #16
 8002f4a:	f107 0314 	add.w	r3, r7, #20
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fc19 	bl	8002788 <chargerRead>
	ReadBat(&percent, 1, 1, TabGen);
 8002f56:	f107 000c 	add.w	r0, r7, #12
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	2101      	movs	r1, #1
 8002f60:	f7ff fc4e 	bl	8002800 <ReadBat>

	if (percent == 0xFF)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2bff      	cmp	r3, #255	; 0xff
 8002f68:	d106      	bne.n	8002f78 <LedChargeIndic+0x46>
	{
		LedOn(0, 0, 100, TabGen);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2264      	movs	r2, #100	; 0x64
 8002f6e:	2100      	movs	r1, #0
 8002f70:	2000      	movs	r0, #0
 8002f72:	f000 fddf 	bl	8003b34 <LedOn>
//	while ((bmsCharge == 1) || (bmsEOC == 1)) {chargerRead(&bmsEOC, &bmsCharge); HAL_Delay(3000);};
//	
//	
//	if ((bmsCharge == 0) &&	(bmsEOC == 0)) {		LedOn(0, 0, 0);
//	}
}
 8002f76:	e02c      	b.n	8002fd2 <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent < 100))
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d002      	beq.n	8002f84 <LedChargeIndic+0x52>
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d109      	bne.n	8002f98 <LedChargeIndic+0x66>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2b63      	cmp	r3, #99	; 0x63
 8002f88:	dc06      	bgt.n	8002f98 <LedChargeIndic+0x66>
			LedOn(50, 0, 0, TabGen);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2032      	movs	r0, #50	; 0x32
 8002f92:	f000 fdcf 	bl	8003b34 <LedOn>
		if (BOX4GAZ == 0)
 8002f96:	e01c      	b.n	8002fd2 <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent == 100))
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d002      	beq.n	8002fa4 <LedChargeIndic+0x72>
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d109      	bne.n	8002fb8 <LedChargeIndic+0x86>
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d106      	bne.n	8002fb8 <LedChargeIndic+0x86>
			LedOn(0, 0, 0, TabGen);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f000 fdbf 	bl	8003b34 <LedOn>
		if (BOX4GAZ == 0)
 8002fb6:	e00c      	b.n	8002fd2 <LedChargeIndic+0xa0>
	else if ((bmsCharge == 0) && (bmsEOC == 0))
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d109      	bne.n	8002fd2 <LedChargeIndic+0xa0>
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d106      	bne.n	8002fd2 <LedChargeIndic+0xa0>
		LedOn(0, 0, 0, TabGen);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	2000      	movs	r0, #0
 8002fcc:	f000 fdb2 	bl	8003b34 <LedOn>
}
 8002fd0:	e7ff      	b.n	8002fd2 <LedChargeIndic+0xa0>
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}

08002fda <TaskAlertAcc>:
//	
//	
//}

void TaskAlertAcc(uint8_t accy, uint16_t accres, int TabAlert[], int TabGen[])
{
 8002fda:	b480      	push	{r7}
 8002fdc:	b085      	sub	sp, #20
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60ba      	str	r2, [r7, #8]
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	73fb      	strb	r3, [r7, #15]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	81bb      	strh	r3, [r7, #12]
#endif

	//fall

#ifdef CHUTE_ACTIF
	if (((accy <= 140) && (accy >= 114)) && (TabGen[FALL_DELAY] == 1)
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	2b8c      	cmp	r3, #140	; 0x8c
 8002ff0:	d823      	bhi.n	800303a <TaskAlertAcc+0x60>
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b71      	cmp	r3, #113	; 0x71
 8002ff6:	d920      	bls.n	800303a <TaskAlertAcc+0x60>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3328      	adds	r3, #40	; 0x28
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d11b      	bne.n	800303a <TaskAlertAcc+0x60>
			&& (TabAlert[ALERT_MALAISE] == 0) && (TabAlert[ALERT_FALL] == 0))
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3308      	adds	r3, #8
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d116      	bne.n	800303a <TaskAlertAcc+0x60>
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3334      	adds	r3, #52	; 0x34
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d111      	bne.n	800303a <TaskAlertAcc+0x60>
	{
		TabGen[NS_FALL]++;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	3344      	adds	r3, #68	; 0x44
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	3201      	adds	r2, #1
 800301e:	601a      	str	r2, [r3, #0]

		if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3344      	adds	r3, #68	; 0x44
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3338      	adds	r3, #56	; 0x38
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	429a      	cmp	r2, r3
 800302e:	db0d      	blt.n	800304c <TaskAlertAcc+0x72>
		{
			TabGen[FALL_UP_DELAY] = 1;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	332c      	adds	r3, #44	; 0x2c
 8003034:	2201      	movs	r2, #1
 8003036:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 8003038:	e008      	b.n	800304c <TaskAlertAcc+0x72>
		}

	}
	else
	{
		TabGen[FALL_UP_DELAY] = 0;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	332c      	adds	r3, #44	; 0x2c
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
		TabGen[NS_FALL] = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3344      	adds	r3, #68	; 0x44
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
	}
#endif

}
 800304a:	bf00      	nop
 800304c:	bf00      	nop
 800304e:	3714      	adds	r7, #20
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <bootloader>:

unsigned char bootloader(unsigned char tps_appui)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
	while (tps_appui > 0)
 8003062:	e010      	b.n	8003086 <bootloader+0x2e>
	{
		if (InOn() == 1)
 8003064:	f000 fa58 	bl	8003518 <InOn>
 8003068:	4603      	mov	r3, r0
 800306a:	2b01      	cmp	r3, #1
 800306c:	d109      	bne.n	8003082 <bootloader+0x2a>
		{
			vibration_LBL(1, 250, 1000);
 800306e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003072:	21fa      	movs	r1, #250	; 0xfa
 8003074:	2001      	movs	r0, #1
 8003076:	f006 fca7 	bl	80099c8 <vibration_LBL>
			tps_appui--;
 800307a:	79fb      	ldrb	r3, [r7, #7]
 800307c:	3b01      	subs	r3, #1
 800307e:	71fb      	strb	r3, [r7, #7]
 8003080:	e001      	b.n	8003086 <bootloader+0x2e>
		}
		else
		{
			return 0;
 8003082:	2300      	movs	r3, #0
 8003084:	e003      	b.n	800308e <bootloader+0x36>
	while (tps_appui > 0)
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1eb      	bne.n	8003064 <bootloader+0xc>
		}
	}
	return 1;
 800308c:	2301      	movs	r3, #1
}
 800308e:	4618      	mov	r0, r3
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <default_value>:

extern uint8_t nb_parametre;
extern struct config_data c_default;
void default_value(void)
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	466b      	mov	r3, sp
 80030a0:	461d      	mov	r5, r3
	uint8_t curent_conf[nb_parametre];
 80030a2:	4b58      	ldr	r3, [pc, #352]	; (8003204 <default_value+0x16c>)
 80030a4:	781c      	ldrb	r4, [r3, #0]
 80030a6:	4623      	mov	r3, r4
 80030a8:	3b01      	subs	r3, #1
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	b2e0      	uxtb	r0, r4
 80030ae:	f04f 0100 	mov.w	r1, #0
 80030b2:	f04f 0200 	mov.w	r2, #0
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030c0:	00c2      	lsls	r2, r0, #3
 80030c2:	b2e0      	uxtb	r0, r4
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	00cb      	lsls	r3, r1, #3
 80030d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030d6:	00c2      	lsls	r2, r0, #3
 80030d8:	4623      	mov	r3, r4
 80030da:	3307      	adds	r3, #7
 80030dc:	08db      	lsrs	r3, r3, #3
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	ebad 0d03 	sub.w	sp, sp, r3
 80030e4:	466b      	mov	r3, sp
 80030e6:	3300      	adds	r3, #0
 80030e8:	613b      	str	r3, [r7, #16]
	uint8_t count2 = 0;
 80030ea:	2300      	movs	r3, #0
 80030ec:	76fb      	strb	r3, [r7, #27]
	ee_init();
 80030ee:	f7ff fce7 	bl	8002ac0 <ee_init>
	ee_read(0, sizeof(curent_conf), curent_conf);
 80030f2:	4621      	mov	r1, r4
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	461a      	mov	r2, r3
 80030f8:	2000      	movs	r0, #0
 80030fa:	f7ff fd27 	bl	8002b4c <ee_read>
	for (int i = 0; i <= sizeof(curent_conf); i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e00b      	b.n	800311c <default_value+0x84>
	{
		if (curent_conf[i] == 255)
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2bff      	cmp	r3, #255	; 0xff
 800310e:	d102      	bne.n	8003116 <default_value+0x7e>
		{
			count2++;
 8003110:	7efb      	ldrb	r3, [r7, #27]
 8003112:	3301      	adds	r3, #1
 8003114:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i <= sizeof(curent_conf); i++)
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	3301      	adds	r3, #1
 800311a:	61fb      	str	r3, [r7, #28]
 800311c:	4622      	mov	r2, r4
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d2ef      	bcs.n	8003104 <default_value+0x6c>
		}
	}
	if (count2 > 0)
 8003124:	7efb      	ldrb	r3, [r7, #27]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d067      	beq.n	80031fa <default_value+0x162>
	{
		c_default.tps_immo = 1;
 800312a:	4b37      	ldr	r3, [pc, #220]	; (8003208 <default_value+0x170>)
 800312c:	2201      	movs	r2, #1
 800312e:	701a      	strb	r2, [r3, #0]
		c_default.tps_PerteDeVerticalite = 2;
 8003130:	4b35      	ldr	r3, [pc, #212]	; (8003208 <default_value+0x170>)
 8003132:	2202      	movs	r2, #2
 8003134:	705a      	strb	r2, [r3, #1]
		c_default.tps_GPS_ON = 3;
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <default_value+0x170>)
 8003138:	2203      	movs	r2, #3
 800313a:	709a      	strb	r2, [r3, #2]
		c_default.tps_GPS_OFF = 4;
 800313c:	4b32      	ldr	r3, [pc, #200]	; (8003208 <default_value+0x170>)
 800313e:	2204      	movs	r2, #4
 8003140:	70da      	strb	r2, [r3, #3]
		c_default.tps_Alarme = 5;
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <default_value+0x170>)
 8003144:	2205      	movs	r2, #5
 8003146:	711a      	strb	r2, [r3, #4]
		c_default.chute_Actif = 6;
 8003148:	4b2f      	ldr	r3, [pc, #188]	; (8003208 <default_value+0x170>)
 800314a:	2206      	movs	r2, #6
 800314c:	715a      	strb	r2, [r3, #5]
		c_default.malaise_Actif = 7;
 800314e:	4b2e      	ldr	r3, [pc, #184]	; (8003208 <default_value+0x170>)
 8003150:	2207      	movs	r2, #7
 8003152:	719a      	strb	r2, [r3, #6]
		c_default.com_sigfox = 8;
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <default_value+0x170>)
 8003156:	2208      	movs	r2, #8
 8003158:	71da      	strb	r2, [r3, #7]
		c_default.com_LoRa = 9;
 800315a:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <default_value+0x170>)
 800315c:	2209      	movs	r2, #9
 800315e:	721a      	strb	r2, [r3, #8]
		c_default.GPS_Actif = 99;
 8003160:	4b29      	ldr	r3, [pc, #164]	; (8003208 <default_value+0x170>)
 8003162:	2263      	movs	r2, #99	; 0x63
 8003164:	725a      	strb	r2, [r3, #9]
		c_default.Immo_Actif = 11;
 8003166:	4b28      	ldr	r3, [pc, #160]	; (8003208 <default_value+0x170>)
 8003168:	220b      	movs	r2, #11
 800316a:	729a      	strb	r2, [r3, #10]
		c_default.Verti_Actif = 12;
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <default_value+0x170>)
 800316e:	220c      	movs	r2, #12
 8003170:	72da      	strb	r2, [r3, #11]
		c_default.Sensibilite_chute = 13;
 8003172:	4b25      	ldr	r3, [pc, #148]	; (8003208 <default_value+0x170>)
 8003174:	220d      	movs	r2, #13
 8003176:	731a      	strb	r2, [r3, #12]
		c_default.tps_chute = 14;
 8003178:	4b23      	ldr	r3, [pc, #140]	; (8003208 <default_value+0x170>)
 800317a:	220e      	movs	r2, #14
 800317c:	735a      	strb	r2, [r3, #13]
		c_default.Angle = 15;
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <default_value+0x170>)
 8003180:	220f      	movs	r2, #15
 8003182:	739a      	strb	r2, [r3, #14]
		uint8_t data2[] =
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 8003184:	4b20      	ldr	r3, [pc, #128]	; (8003208 <default_value+0x170>)
 8003186:	781b      	ldrb	r3, [r3, #0]
		uint8_t data2[] =
 8003188:	703b      	strb	r3, [r7, #0]
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 800318a:	4b1f      	ldr	r3, [pc, #124]	; (8003208 <default_value+0x170>)
 800318c:	785b      	ldrb	r3, [r3, #1]
		uint8_t data2[] =
 800318e:	707b      	strb	r3, [r7, #1]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <default_value+0x170>)
 8003192:	789b      	ldrb	r3, [r3, #2]
		uint8_t data2[] =
 8003194:	70bb      	strb	r3, [r7, #2]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 8003196:	4b1c      	ldr	r3, [pc, #112]	; (8003208 <default_value+0x170>)
 8003198:	78db      	ldrb	r3, [r3, #3]
		uint8_t data2[] =
 800319a:	70fb      	strb	r3, [r7, #3]
				c_default.tps_Alarme, c_default.chute_Actif,
 800319c:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <default_value+0x170>)
 800319e:	791b      	ldrb	r3, [r3, #4]
		uint8_t data2[] =
 80031a0:	713b      	strb	r3, [r7, #4]
				c_default.tps_Alarme, c_default.chute_Actif,
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <default_value+0x170>)
 80031a4:	795b      	ldrb	r3, [r3, #5]
		uint8_t data2[] =
 80031a6:	717b      	strb	r3, [r7, #5]
				c_default.malaise_Actif, c_default.com_sigfox,
 80031a8:	4b17      	ldr	r3, [pc, #92]	; (8003208 <default_value+0x170>)
 80031aa:	799b      	ldrb	r3, [r3, #6]
		uint8_t data2[] =
 80031ac:	71bb      	strb	r3, [r7, #6]
				c_default.malaise_Actif, c_default.com_sigfox,
 80031ae:	4b16      	ldr	r3, [pc, #88]	; (8003208 <default_value+0x170>)
 80031b0:	79db      	ldrb	r3, [r3, #7]
		uint8_t data2[] =
 80031b2:	71fb      	strb	r3, [r7, #7]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <default_value+0x170>)
 80031b6:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t data2[] =
 80031b8:	723b      	strb	r3, [r7, #8]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031ba:	4b13      	ldr	r3, [pc, #76]	; (8003208 <default_value+0x170>)
 80031bc:	7a5b      	ldrb	r3, [r3, #9]
		uint8_t data2[] =
 80031be:	727b      	strb	r3, [r7, #9]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031c0:	4b11      	ldr	r3, [pc, #68]	; (8003208 <default_value+0x170>)
 80031c2:	7a9b      	ldrb	r3, [r3, #10]
		uint8_t data2[] =
 80031c4:	72bb      	strb	r3, [r7, #10]
				c_default.Verti_Actif, c_default.Sensibilite_chute,
 80031c6:	4b10      	ldr	r3, [pc, #64]	; (8003208 <default_value+0x170>)
 80031c8:	7adb      	ldrb	r3, [r3, #11]
		uint8_t data2[] =
 80031ca:	72fb      	strb	r3, [r7, #11]
				c_default.Verti_Actif, c_default.Sensibilite_chute,
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <default_value+0x170>)
 80031ce:	7b1b      	ldrb	r3, [r3, #12]
		uint8_t data2[] =
 80031d0:	733b      	strb	r3, [r7, #12]
				c_default.tps_chute, c_default.Angle };
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <default_value+0x170>)
 80031d4:	7b5b      	ldrb	r3, [r3, #13]
		uint8_t data2[] =
 80031d6:	737b      	strb	r3, [r7, #13]
				c_default.tps_chute, c_default.Angle };
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <default_value+0x170>)
 80031da:	7b9b      	ldrb	r3, [r3, #14]
		uint8_t data2[] =
 80031dc:	73bb      	strb	r3, [r7, #14]
		ee_writeToRam(0, sizeof(data2), data2);
 80031de:	463b      	mov	r3, r7
 80031e0:	461a      	mov	r2, r3
 80031e2:	210f      	movs	r1, #15
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7ff fdcb 	bl	8002d80 <ee_writeToRam>
		ee_commit();
 80031ea:	f7ff fdeb 	bl	8002dc4 <ee_commit>
		vibration_LBL(3, 200, 1000);
 80031ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031f2:	21c8      	movs	r1, #200	; 0xc8
 80031f4:	2003      	movs	r0, #3
 80031f6:	f006 fbe7 	bl	80099c8 <vibration_LBL>
 80031fa:	46ad      	mov	sp, r5
	}
}
 80031fc:	bf00      	nop
 80031fe:	3720      	adds	r7, #32
 8003200:	46bd      	mov	sp, r7
 8003202:	bdb0      	pop	{r4, r5, r7, pc}
 8003204:	20000778 	.word	0x20000778
 8003208:	200010dc 	.word	0x200010dc

0800320c <Load_configuration_value>:

extern struct config_data c1;
void Load_configuration_value(void)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	466b      	mov	r3, sp
 8003214:	461d      	mov	r5, r3
	uint8_t curent_conf2[nb_parametre];
 8003216:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <Load_configuration_value+0xe4>)
 8003218:	781c      	ldrb	r4, [r3, #0]
 800321a:	4623      	mov	r3, r4
 800321c:	3b01      	subs	r3, #1
 800321e:	607b      	str	r3, [r7, #4]
 8003220:	b2e0      	uxtb	r0, r4
 8003222:	f04f 0100 	mov.w	r1, #0
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	00cb      	lsls	r3, r1, #3
 8003230:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003234:	00c2      	lsls	r2, r0, #3
 8003236:	b2e0      	uxtb	r0, r4
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	00cb      	lsls	r3, r1, #3
 8003246:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800324a:	00c2      	lsls	r2, r0, #3
 800324c:	4623      	mov	r3, r4
 800324e:	3307      	adds	r3, #7
 8003250:	08db      	lsrs	r3, r3, #3
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	ebad 0d03 	sub.w	sp, sp, r3
 8003258:	466b      	mov	r3, sp
 800325a:	3300      	adds	r3, #0
 800325c:	603b      	str	r3, [r7, #0]
	ee_init();
 800325e:	f7ff fc2f 	bl	8002ac0 <ee_init>
	ee_read(0, sizeof(curent_conf2), curent_conf2);
 8003262:	4621      	mov	r1, r4
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	2000      	movs	r0, #0
 800326a:	f7ff fc6f 	bl	8002b4c <ee_read>
	c1.tps_immo = curent_conf2[0];
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	781a      	ldrb	r2, [r3, #0]
 8003272:	4b20      	ldr	r3, [pc, #128]	; (80032f4 <Load_configuration_value+0xe8>)
 8003274:	701a      	strb	r2, [r3, #0]
	c1.tps_PerteDeVerticalite = curent_conf2[1];
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	785a      	ldrb	r2, [r3, #1]
 800327a:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <Load_configuration_value+0xe8>)
 800327c:	705a      	strb	r2, [r3, #1]
	c1.tps_GPS_ON = curent_conf2[2];
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	789a      	ldrb	r2, [r3, #2]
 8003282:	4b1c      	ldr	r3, [pc, #112]	; (80032f4 <Load_configuration_value+0xe8>)
 8003284:	709a      	strb	r2, [r3, #2]
	c1.tps_GPS_OFF = curent_conf2[3];
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	78da      	ldrb	r2, [r3, #3]
 800328a:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <Load_configuration_value+0xe8>)
 800328c:	70da      	strb	r2, [r3, #3]
	c1.tps_Alarme = curent_conf2[4];
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	791a      	ldrb	r2, [r3, #4]
 8003292:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <Load_configuration_value+0xe8>)
 8003294:	711a      	strb	r2, [r3, #4]
	c1.chute_Actif = curent_conf2[5];
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	795a      	ldrb	r2, [r3, #5]
 800329a:	4b16      	ldr	r3, [pc, #88]	; (80032f4 <Load_configuration_value+0xe8>)
 800329c:	715a      	strb	r2, [r3, #5]
	c1.malaise_Actif = curent_conf2[6];
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	799a      	ldrb	r2, [r3, #6]
 80032a2:	4b14      	ldr	r3, [pc, #80]	; (80032f4 <Load_configuration_value+0xe8>)
 80032a4:	719a      	strb	r2, [r3, #6]
	c1.com_sigfox = curent_conf2[7];
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	79da      	ldrb	r2, [r3, #7]
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <Load_configuration_value+0xe8>)
 80032ac:	71da      	strb	r2, [r3, #7]
	c1.com_LoRa = curent_conf2[8];
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	7a1a      	ldrb	r2, [r3, #8]
 80032b2:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <Load_configuration_value+0xe8>)
 80032b4:	721a      	strb	r2, [r3, #8]
	c1.GPS_Actif = curent_conf2[9];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7a5a      	ldrb	r2, [r3, #9]
 80032ba:	4b0e      	ldr	r3, [pc, #56]	; (80032f4 <Load_configuration_value+0xe8>)
 80032bc:	725a      	strb	r2, [r3, #9]
	c1.Immo_Actif = curent_conf2[10];
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	7a9a      	ldrb	r2, [r3, #10]
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <Load_configuration_value+0xe8>)
 80032c4:	729a      	strb	r2, [r3, #10]
	c1.Verti_Actif = curent_conf2[11];
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7ada      	ldrb	r2, [r3, #11]
 80032ca:	4b0a      	ldr	r3, [pc, #40]	; (80032f4 <Load_configuration_value+0xe8>)
 80032cc:	72da      	strb	r2, [r3, #11]
	c1.Sensibilite_chute = curent_conf2[12];
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7b1a      	ldrb	r2, [r3, #12]
 80032d2:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <Load_configuration_value+0xe8>)
 80032d4:	731a      	strb	r2, [r3, #12]
	c1.tps_chute = curent_conf2[13];
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7b5a      	ldrb	r2, [r3, #13]
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <Load_configuration_value+0xe8>)
 80032dc:	735a      	strb	r2, [r3, #13]
	c1.Angle = curent_conf2[14];
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7b9a      	ldrb	r2, [r3, #14]
 80032e2:	4b04      	ldr	r3, [pc, #16]	; (80032f4 <Load_configuration_value+0xe8>)
 80032e4:	739a      	strb	r2, [r3, #14]
 80032e6:	46ad      	mov	sp, r5
}
 80032e8:	bf00      	nop
 80032ea:	3708      	adds	r7, #8
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bdb0      	pop	{r4, r5, r7, pc}
 80032f0:	20000778 	.word	0x20000778
 80032f4:	200010cc 	.word	0x200010cc

080032f8 <OuChaIsel>:
#include "hes_gpio_h3.h"

// function :  set output * to 1 (param. : 1) or to 0  (param. : 0)

// function :  set output OuChaIsel to 1 (param. : 1) or to 0  (param. : 0)
void OuChaIsel(int outputValue) {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d105      	bne.n	8003312 <OuChaIsel+0x1a>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_SET);
 8003306:	2201      	movs	r2, #1
 8003308:	2120      	movs	r1, #32
 800330a:	4806      	ldr	r0, [pc, #24]	; (8003324 <OuChaIsel+0x2c>)
 800330c:	f009 fb2e 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
  }
}
 8003310:	e004      	b.n	800331c <OuChaIsel+0x24>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
 8003312:	2200      	movs	r2, #0
 8003314:	2120      	movs	r1, #32
 8003316:	4803      	ldr	r0, [pc, #12]	; (8003324 <OuChaIsel+0x2c>)
 8003318:	f009 fb28 	bl	800c96c <HAL_GPIO_WritePin>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	48000400 	.word	0x48000400

08003328 <OutDone1>:

// function :  set output OutDone1 to 1 (param. : 1) or to 0  (param. : 0) // PB4 - DONE
void OutDone1(int outputValue) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d105      	bne.n	8003342 <OutDone1+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_SET);
 8003336:	2201      	movs	r2, #1
 8003338:	2110      	movs	r1, #16
 800333a:	4806      	ldr	r0, [pc, #24]	; (8003354 <OutDone1+0x2c>)
 800333c:	f009 fb16 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
  }
}
 8003340:	e004      	b.n	800334c <OutDone1+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
 8003342:	2200      	movs	r2, #0
 8003344:	2110      	movs	r1, #16
 8003346:	4803      	ldr	r0, [pc, #12]	; (8003354 <OutDone1+0x2c>)
 8003348:	f009 fb10 	bl	800c96c <HAL_GPIO_WritePin>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	48000400 	.word	0x48000400

08003358 <OutDone2>:

// function :  set output OuDone2 to 1 (param. : 1) or to 0  (param. : 0)  // PB3 - DRV
void OutDone2(int outputValue) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d105      	bne.n	8003372 <OutDone2+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_SET);
 8003366:	2201      	movs	r2, #1
 8003368:	2108      	movs	r1, #8
 800336a:	4806      	ldr	r0, [pc, #24]	; (8003384 <OutDone2+0x2c>)
 800336c:	f009 fafe 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
  }
}
 8003370:	e004      	b.n	800337c <OutDone2+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
 8003372:	2200      	movs	r2, #0
 8003374:	2108      	movs	r1, #8
 8003376:	4803      	ldr	r0, [pc, #12]	; (8003384 <OutDone2+0x2c>)
 8003378:	f009 faf8 	bl	800c96c <HAL_GPIO_WritePin>
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	48000400 	.word	0x48000400

08003388 <OutDwmRst>:

// function :  set output OutDwmRst to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmRst(int outputValue) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d107      	bne.n	80033a6 <OutDwmRst+0x1e>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_SET);
 8003396:	2201      	movs	r2, #1
 8003398:	f44f 7180 	mov.w	r1, #256	; 0x100
 800339c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a0:	f009 fae4 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
  }
}
 80033a4:	e006      	b.n	80033b4 <OutDwmRst+0x2c>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
 80033a6:	2200      	movs	r2, #0
 80033a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b0:	f009 fadc 	bl	800c96c <HAL_GPIO_WritePin>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <OutDwmWu>:

// function :  set output OutDwmWu to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmWu(int outputValue) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d106      	bne.n	80033d8 <OutDwmWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_SET);
 80033ca:	2201      	movs	r2, #1
 80033cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d0:	4806      	ldr	r0, [pc, #24]	; (80033ec <OutDwmWu+0x30>)
 80033d2:	f009 facb 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
  }
}
 80033d6:	e005      	b.n	80033e4 <OutDwmWu+0x28>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
 80033d8:	2200      	movs	r2, #0
 80033da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033de:	4803      	ldr	r0, [pc, #12]	; (80033ec <OutDwmWu+0x30>)
 80033e0:	f009 fac4 	bl	800c96c <HAL_GPIO_WritePin>
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	48000400 	.word	0x48000400

080033f0 <OutOledWu>:
}
*/

// for L433
// function :  set output OutOledWu to 1 (param. : 1) or to 0  (param. : 0)
void OutOledWu(int outputValue) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d106      	bne.n	800340c <OutOledWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_SET);
 80033fe:	2201      	movs	r2, #1
 8003400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003404:	4806      	ldr	r0, [pc, #24]	; (8003420 <OutOledWu+0x30>)
 8003406:	f009 fab1 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
  }
}
 800340a:	e005      	b.n	8003418 <OutOledWu+0x28>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
 800340c:	2200      	movs	r2, #0
 800340e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003412:	4803      	ldr	r0, [pc, #12]	; (8003420 <OutOledWu+0x30>)
 8003414:	f009 faaa 	bl	800c96c <HAL_GPIO_WritePin>
}
 8003418:	bf00      	nop
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	48000400 	.word	0x48000400

08003424 <OutLoraWu>:

// function :  set output OutLoraWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLoraWu(int outputValue) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b01      	cmp	r3, #1
 8003430:	d105      	bne.n	800343e <OutLoraWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_SET);
 8003432:	2201      	movs	r2, #1
 8003434:	2104      	movs	r1, #4
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <OutLoraWu+0x2c>)
 8003438:	f009 fa98 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
  }
}
 800343c:	e004      	b.n	8003448 <OutLoraWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
 800343e:	2200      	movs	r2, #0
 8003440:	2104      	movs	r1, #4
 8003442:	4803      	ldr	r0, [pc, #12]	; (8003450 <OutLoraWu+0x2c>)
 8003444:	f009 fa92 	bl	800c96c <HAL_GPIO_WritePin>
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	48000400 	.word	0x48000400

08003454 <OutGpsRst>:

// function :  set output OutGpsRst to 1 (param. : 1) or to 0  (param. : 0)
void OutGpsRst(int outputValue) {
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d105      	bne.n	800346e <OutGpsRst+0x1a>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_SET);
 8003462:	2201      	movs	r2, #1
 8003464:	2102      	movs	r1, #2
 8003466:	4806      	ldr	r0, [pc, #24]	; (8003480 <OutGpsRst+0x2c>)
 8003468:	f009 fa80 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
  }
}
 800346c:	e004      	b.n	8003478 <OutGpsRst+0x24>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
 800346e:	2200      	movs	r2, #0
 8003470:	2102      	movs	r1, #2
 8003472:	4803      	ldr	r0, [pc, #12]	; (8003480 <OutGpsRst+0x2c>)
 8003474:	f009 fa7a 	bl	800c96c <HAL_GPIO_WritePin>
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}
 8003480:	48000400 	.word	0x48000400

08003484 <OutLedWu>:

// function :  set output OutLedWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLedWu(int outputValue) {
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d105      	bne.n	800349e <OutLedWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_SET);
 8003492:	2201      	movs	r2, #1
 8003494:	2101      	movs	r1, #1
 8003496:	4806      	ldr	r0, [pc, #24]	; (80034b0 <OutLedWu+0x2c>)
 8003498:	f009 fa68 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
  }
}
 800349c:	e004      	b.n	80034a8 <OutLedWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
 800349e:	2200      	movs	r2, #0
 80034a0:	2101      	movs	r1, #1
 80034a2:	4803      	ldr	r0, [pc, #12]	; (80034b0 <OutLedWu+0x2c>)
 80034a4:	f009 fa62 	bl	800c96c <HAL_GPIO_WritePin>
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	48000400 	.word	0x48000400

080034b4 <OutMotorWu>:
    HAL_GPIO_WritePin(GPIOA,GAZ_WU_Pin, GPIO_PIN_RESET);
  }
}

// function :  set output OutMotorWu to 1 (param. : 1) or to 0  (param. : 0)
void OutMotorWu(int outputValue) {
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
	if (VIBOK==1)
	{
  if (outputValue==1) {
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d106      	bne.n	80034d0 <OutMotorWu+0x1c>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_SET);
 80034c2:	2201      	movs	r2, #1
 80034c4:	2108      	movs	r1, #8
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ca:	f009 fa4f 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
  }
}
}
 80034ce:	e005      	b.n	80034dc <OutMotorWu+0x28>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
 80034d0:	2200      	movs	r2, #0
 80034d2:	2108      	movs	r1, #8
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f009 fa48 	bl	800c96c <HAL_GPIO_WritePin>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <OutOledRst>:

// function :  set output OutOledRst to 1 (param. : 1) or to 0  (param. : 0)
void OutOledRst(int outputValue) {
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d106      	bne.n	8003500 <OutOledRst+0x1c>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
 80034f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034f8:	4806      	ldr	r0, [pc, #24]	; (8003514 <OutOledRst+0x30>)
 80034fa:	f009 fa37 	bl	800c96c <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
  }
}
 80034fe:	e005      	b.n	800350c <OutOledRst+0x28>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003506:	4803      	ldr	r0, [pc, #12]	; (8003514 <OutOledRst+0x30>)
 8003508:	f009 fa30 	bl	800c96c <HAL_GPIO_WritePin>
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	48000800 	.word	0x48000800

08003518 <InOn>:

// function :  read binary value of input * (param. : 1 for high value or param. : 0 for low value)

// function :  read binary value of input InOn (param. : 1 for high value or param. : 0 for low value)
int InOn(void) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 800351e:	2300      	movs	r3, #0
 8003520:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_ON_Pin)) == 0)
 8003522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003526:	4806      	ldr	r0, [pc, #24]	; (8003540 <InOn+0x28>)
 8003528:	f009 fa08 	bl	800c93c <HAL_GPIO_ReadPin>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <InOn+0x1e>
	{
		stateBP = 1 ; 
 8003532:	2301      	movs	r3, #1
 8003534:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 8003536:	687b      	ldr	r3, [r7, #4]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	48000400 	.word	0x48000400

08003544 <InSOS>:

// function :  read binary value of input InSOS (param. : 1 for high value or param. : 0 for low value)
int InSOS(void) {
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_SOS_Pin)) == 0)
 800354e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003552:	4806      	ldr	r0, [pc, #24]	; (800356c <InSOS+0x28>)
 8003554:	f009 f9f2 	bl	800c93c <HAL_GPIO_ReadPin>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <InSOS+0x1e>
	{
		stateBP = 1 ; 
 800355e:	2301      	movs	r3, #1
 8003560:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 8003562:	687b      	ldr	r3, [r7, #4]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	48000400 	.word	0x48000400

08003570 <OutBuzOn>:

// function : start Buzzer  
void OutBuzOn() {
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
	if (BUZOK==1){
HAL_TIM_PWM_Start(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 8003574:	2100      	movs	r1, #0
 8003576:	4802      	ldr	r0, [pc, #8]	; (8003580 <OutBuzOn+0x10>)
 8003578:	f00c ffec 	bl	8010554 <HAL_TIM_PWM_Start>
	}
}
 800357c:	bf00      	nop
 800357e:	bd80      	pop	{r7, pc}
 8003580:	200032e0 	.word	0x200032e0

08003584 <OutBuzOff>:

// function : stop Buzzer 
void OutBuzOff() {
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
		if (BUZOK==1){
HAL_TIM_PWM_Stop(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 8003588:	2100      	movs	r1, #0
 800358a:	4802      	ldr	r0, [pc, #8]	; (8003594 <OutBuzOff+0x10>)
 800358c:	f00d f8c0 	bl	8010710 <HAL_TIM_PWM_Stop>
		}
}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	200032e0 	.word	0x200032e0

08003598 <GpsStop>:

#include "hes_gps.h"

void GpsStop(void) {
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
	
	OutGpsRst(1);
 800359e:	2001      	movs	r0, #1
 80035a0:	f7ff ff58 	bl	8003454 <OutGpsRst>
HAL_Delay(1);
 80035a4:	2001      	movs	r0, #1
 80035a6:	f006 ff63 	bl	800a470 <HAL_Delay>
	 // hexadecimal messages to stop GPS
 uint8_t stop_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x16, 0x74};
 80035aa:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <GpsStop+0x58>)
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 uint8_t stop_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};
 80035b6:	4a0f      	ldr	r2, [pc, #60]	; (80035f4 <GpsStop+0x5c>)
 80035b8:	1d3b      	adds	r3, r7, #4
 80035ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035be:	e883 0003 	stmia.w	r3, {r0, r1}
 

  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps1, sizeof(stop_gps1));
 80035c2:	f107 030c 	add.w	r3, r7, #12
 80035c6:	220c      	movs	r2, #12
 80035c8:	4619      	mov	r1, r3
 80035ca:	480b      	ldr	r0, [pc, #44]	; (80035f8 <GpsStop+0x60>)
 80035cc:	f00e f866 	bl	801169c <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 80035d0:	2014      	movs	r0, #20
 80035d2:	f006 ff4d 	bl	800a470 <HAL_Delay>
  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps2, sizeof(stop_gps2));
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	2208      	movs	r2, #8
 80035da:	4619      	mov	r1, r3
 80035dc:	4806      	ldr	r0, [pc, #24]	; (80035f8 <GpsStop+0x60>)
 80035de:	f00e f85d 	bl	801169c <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 80035e2:	2014      	movs	r0, #20
 80035e4:	f006 ff44 	bl	800a470 <HAL_Delay>
  //OutGpsRst(0);
}
 80035e8:	bf00      	nop
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	0801ad70 	.word	0x0801ad70
 80035f4:	0801ad7c 	.word	0x0801ad7c
 80035f8:	2000348c 	.word	0x2000348c

080035fc <CheckSum>:
3E 89 // check
*/


void CheckSum(uint8_t tab[], uint8_t size)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]
	uint8_t CK_A = 0, CK_B = 0;
 8003608:	2300      	movs	r3, #0
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	2300      	movs	r3, #0
 800360e:	73bb      	strb	r3, [r7, #14]
	int i;
	for( i = 2; i < size-2; i++)
 8003610:	2302      	movs	r3, #2
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	e00d      	b.n	8003632 <CheckSum+0x36>
	{
		CK_A = CK_A + tab[i];
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4413      	add	r3, r2
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	7bfb      	ldrb	r3, [r7, #15]
 8003620:	4413      	add	r3, r2
 8003622:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8003624:	7bba      	ldrb	r2, [r7, #14]
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	4413      	add	r3, r2
 800362a:	73bb      	strb	r3, [r7, #14]
	for( i = 2; i < size-2; i++)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	3301      	adds	r3, #1
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	3b02      	subs	r3, #2
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbec      	blt.n	8003616 <CheckSum+0x1a>
	}
	tab[i] = CK_A;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	4413      	add	r3, r2
 8003642:	7bfa      	ldrb	r2, [r7, #15]
 8003644:	701a      	strb	r2, [r3, #0]
	i++;
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	3301      	adds	r3, #1
 800364a:	60bb      	str	r3, [r7, #8]
	tab[i] = CK_B;
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	4413      	add	r3, r2
 8003652:	7bba      	ldrb	r2, [r7, #14]
 8003654:	701a      	strb	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <GpsStart>:

void GpsStart(void) {
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b0bb      	sub	sp, #236	; 0xec
 8003668:	af00      	add	r7, sp, #0

  // hexadecimal messages to start GPS
uint8_t start_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x17, 0x76}; //UBX-CFG-RST -> 04 -> hardware reset
 800366a:	4a66      	ldr	r2, [pc, #408]	; (8003804 <GpsStart+0x1a0>)
 800366c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003670:	ca07      	ldmia	r2, {r0, r1, r2}
 8003672:	e883 0007 	stmia.w	r3, {r0, r1, r2}
uint8_t start_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};	// Poll receiver
 8003676:	4a64      	ldr	r2, [pc, #400]	; (8003808 <GpsStart+0x1a4>)
 8003678:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800367c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003680:	e883 0003 	stmia.w	r3, {r0, r1}

 
uint8_t RMC_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X04, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X3F};
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <GpsStart+0x1a8>)
 8003686:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 800368a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800368c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t VTG_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X05, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X04, 0X46};
 8003690:	4b5f      	ldr	r3, [pc, #380]	; (8003810 <GpsStart+0x1ac>)
 8003692:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8003696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003698:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X02, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X01, 0X31};
 800369c:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <GpsStart+0x1b0>)
 800369e:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 80036a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSV_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X03, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X02, 0X38};
 80036a8:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <GpsStart+0x1b4>)
 80036aa:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80036ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GLL_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X01, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X2A};
 80036b4:	4b59      	ldr	r3, [pc, #356]	; (800381c <GpsStart+0x1b8>)
 80036b6:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80036ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
// char GGA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XFF, 0X23};
uint8_t GGA_On[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X01, 0X01, 0X00, 0X00, 0X00, 0X01, 0X2C};
 80036c0:	4b57      	ldr	r3, [pc, #348]	; (8003820 <GpsStart+0x1bc>)
 80036c2:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80036c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t ZDA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X08, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X07, 0X5B};
 80036cc:	4b55      	ldr	r3, [pc, #340]	; (8003824 <GpsStart+0x1c0>)
 80036ce:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80036d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

//uint8_t POWER_MODE_CONFIG[] = { 0xB5, 0x62, 0x06, 0x3B, 0x2C, 0x01, 0x00, 0x3C, 0x00,  }; //  UBX-CFG-PM2 - Extended power management configuration

uint8_t POWER_MODE_ECO[] 			= { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x5B}; //UBX-CFG-RXM
 80036d8:	4b53      	ldr	r3, [pc, #332]	; (8003828 <GpsStart+0x1c4>)
 80036da:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80036de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t POWER_MODE_ECO_UCENTER[]	= { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x6F};
 80036e4:	4b51      	ldr	r3, [pc, #324]	; (800382c <GpsStart+0x1c8>)
 80036e6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80036ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

 

//Power Save Mode (PSM) allows a reduction in system power consumption by selectively switchingparts of the receiver on and off. It is selected using the message UBX-CFG-RXM and configured using UBX-CFG-PM2. It is recommended to use UBX-CFG-PMS instead if available (only supported inprotocol versions 18+) as it provides a simplified interface; see section Power mode setup fordetails
//CAM-M8Q-0-10  = >  SPG 3.01  => 18.00  //ROM CORE 3.01 (107888)
uint8_t GNSS_Selection[] = { 0XB5, 0X62, 0X06, 0X3E, 0X3C,
 80036f0:	4a4f      	ldr	r2, [pc, #316]	; (8003830 <GpsStart+0x1cc>)
 80036f2:	463b      	mov	r3, r7
 80036f4:	4611      	mov	r1, r2
 80036f6:	2244      	movs	r2, #68	; 0x44
 80036f8:	4618      	mov	r0, r3
 80036fa:	f014 f919 	bl	8017930 <memcpy>
		0X2C, 0X4D};




CheckSum(GNSS_Selection, sizeof(GNSS_Selection));
 80036fe:	463b      	mov	r3, r7
 8003700:	2144      	movs	r1, #68	; 0x44
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff7a 	bl	80035fc <CheckSum>

CheckSum(POWER_MODE_ECO, sizeof(POWER_MODE_ECO));
 8003708:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800370c:	2110      	movs	r1, #16
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff ff74 	bl	80035fc <CheckSum>


OutGpsRst(1);
 8003714:	2001      	movs	r0, #1
 8003716:	f7ff fe9d 	bl	8003454 <OutGpsRst>
HAL_Delay(1);
 800371a:	2001      	movs	r0, #1
 800371c:	f006 fea8 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps1, sizeof(start_gps1));
 8003720:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003724:	220c      	movs	r2, #12
 8003726:	4619      	mov	r1, r3
 8003728:	4842      	ldr	r0, [pc, #264]	; (8003834 <GpsStart+0x1d0>)
 800372a:	f00d ffb7 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(100);
 800372e:	2064      	movs	r0, #100	; 0x64
 8003730:	f006 fe9e 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps2, sizeof(start_gps2));
 8003734:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003738:	2208      	movs	r2, #8
 800373a:	4619      	mov	r1, r3
 800373c:	483d      	ldr	r0, [pc, #244]	; (8003834 <GpsStart+0x1d0>)
 800373e:	f00d ffad 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(100);
 8003742:	2064      	movs	r0, #100	; 0x64
 8003744:	f006 fe94 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, RMC_Off, sizeof(RMC_Off));
 8003748:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800374c:	2210      	movs	r2, #16
 800374e:	4619      	mov	r1, r3
 8003750:	4838      	ldr	r0, [pc, #224]	; (8003834 <GpsStart+0x1d0>)
 8003752:	f00d ffa3 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003756:	201e      	movs	r0, #30
 8003758:	f006 fe8a 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, VTG_Off, sizeof(VTG_Off));
 800375c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003760:	2210      	movs	r2, #16
 8003762:	4619      	mov	r1, r3
 8003764:	4833      	ldr	r0, [pc, #204]	; (8003834 <GpsStart+0x1d0>)
 8003766:	f00d ff99 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800376a:	201e      	movs	r0, #30
 800376c:	f006 fe80 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSA_Off, sizeof(GSA_Off));
 8003770:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003774:	2210      	movs	r2, #16
 8003776:	4619      	mov	r1, r3
 8003778:	482e      	ldr	r0, [pc, #184]	; (8003834 <GpsStart+0x1d0>)
 800377a:	f00d ff8f 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800377e:	201e      	movs	r0, #30
 8003780:	f006 fe76 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSV_Off, sizeof(GSV_Off));
 8003784:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003788:	2210      	movs	r2, #16
 800378a:	4619      	mov	r1, r3
 800378c:	4829      	ldr	r0, [pc, #164]	; (8003834 <GpsStart+0x1d0>)
 800378e:	f00d ff85 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003792:	201e      	movs	r0, #30
 8003794:	f006 fe6c 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GLL_Off, sizeof(GLL_Off));
 8003798:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800379c:	2210      	movs	r2, #16
 800379e:	4619      	mov	r1, r3
 80037a0:	4824      	ldr	r0, [pc, #144]	; (8003834 <GpsStart+0x1d0>)
 80037a2:	f00d ff7b 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037a6:	201e      	movs	r0, #30
 80037a8:	f006 fe62 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, ZDA_Off, sizeof(ZDA_Off));
 80037ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037b0:	2210      	movs	r2, #16
 80037b2:	4619      	mov	r1, r3
 80037b4:	481f      	ldr	r0, [pc, #124]	; (8003834 <GpsStart+0x1d0>)
 80037b6:	f00d ff71 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037ba:	201e      	movs	r0, #30
 80037bc:	f006 fe58 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GGA_On, sizeof(GGA_On));
 80037c0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037c4:	2210      	movs	r2, #16
 80037c6:	4619      	mov	r1, r3
 80037c8:	481a      	ldr	r0, [pc, #104]	; (8003834 <GpsStart+0x1d0>)
 80037ca:	f00d ff67 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(200);
 80037ce:	20c8      	movs	r0, #200	; 0xc8
 80037d0:	f006 fe4e 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GNSS_Selection, sizeof(GNSS_Selection));
 80037d4:	463b      	mov	r3, r7
 80037d6:	2244      	movs	r2, #68	; 0x44
 80037d8:	4619      	mov	r1, r3
 80037da:	4816      	ldr	r0, [pc, #88]	; (8003834 <GpsStart+0x1d0>)
 80037dc:	f00d ff5e 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(200);
 80037e0:	20c8      	movs	r0, #200	; 0xc8
 80037e2:	f006 fe45 	bl	800a470 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, POWER_MODE_ECO_UCENTER, sizeof(POWER_MODE_ECO_UCENTER)); // UBX-CFG-RXM
 80037e6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037ea:	2210      	movs	r2, #16
 80037ec:	4619      	mov	r1, r3
 80037ee:	4811      	ldr	r0, [pc, #68]	; (8003834 <GpsStart+0x1d0>)
 80037f0:	f00d ff54 	bl	801169c <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037f4:	201e      	movs	r0, #30
 80037f6:	f006 fe3b 	bl	800a470 <HAL_Delay>


}
 80037fa:	bf00      	nop
 80037fc:	37ec      	adds	r7, #236	; 0xec
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd90      	pop	{r4, r7, pc}
 8003802:	bf00      	nop
 8003804:	0801ad84 	.word	0x0801ad84
 8003808:	0801ad7c 	.word	0x0801ad7c
 800380c:	0801ad90 	.word	0x0801ad90
 8003810:	0801ada0 	.word	0x0801ada0
 8003814:	0801adb0 	.word	0x0801adb0
 8003818:	0801adc0 	.word	0x0801adc0
 800381c:	0801add0 	.word	0x0801add0
 8003820:	0801ade0 	.word	0x0801ade0
 8003824:	0801adf0 	.word	0x0801adf0
 8003828:	0801ae00 	.word	0x0801ae00
 800382c:	0801ae10 	.word	0x0801ae10
 8003830:	0801ae20 	.word	0x0801ae20
 8003834:	2000348c 	.word	0x2000348c

08003838 <Init_IMU>:
extern HAL_StatusTypeDef I2C1_OK;

extern uint8_t IMU_nodata;

void Init_IMU(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af02      	add	r7, sp, #8

	IMU_nodata = 0;
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <Init_IMU+0x44>)
 8003840:	2200      	movs	r2, #0
 8003842:	701a      	strb	r2, [r3, #0]
#ifdef DWM1001C

// HAL_I2C_Mem_Read(&hi2c1,0x33,0x0F, 1, &buffer_acc, 1, 10);

	uint8_t buffer2[2];
	buffer2[0] = 0x20;
 8003844:	2320      	movs	r3, #32
 8003846:	713b      	strb	r3, [r7, #4]
	buffer2[1] = 0x7F;
 8003848:	237f      	movs	r3, #127	; 0x7f
 800384a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, 0x32, buffer2, 2, 20); // 0x32
 800384c:	1d3a      	adds	r2, r7, #4
 800384e:	2314      	movs	r3, #20
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2302      	movs	r3, #2
 8003854:	2132      	movs	r1, #50	; 0x32
 8003856:	480a      	ldr	r0, [pc, #40]	; (8003880 <Init_IMU+0x48>)
 8003858:	f009 f930 	bl	800cabc <HAL_I2C_Master_Transmit>

	buffer2[0] = 0x23;
 800385c:	2323      	movs	r3, #35	; 0x23
 800385e:	713b      	strb	r3, [r7, #4]
	buffer2[1] = 0x18;
 8003860:	2318      	movs	r3, #24
 8003862:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, 0x32, buffer2, 2, 20); // x032
 8003864:	1d3a      	adds	r2, r7, #4
 8003866:	2314      	movs	r3, #20
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	2302      	movs	r3, #2
 800386c:	2132      	movs	r1, #50	; 0x32
 800386e:	4804      	ldr	r0, [pc, #16]	; (8003880 <Init_IMU+0x48>)
 8003870:	f009 f924 	bl	800cabc <HAL_I2C_Master_Transmit>

#endif

}
 8003874:	bf00      	nop
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	20000b98 	.word	0x20000b98
 8003880:	20001dac 	.word	0x20001dac

08003884 <Measure_IMU>:

extern uint8_t IMU_Count = 0;

void Measure_IMU(uint8_t buffer6[])
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af04      	add	r7, sp, #16
 800388a:	6078      	str	r0, [r7, #4]
	if (I2C1_OK == HAL_OK)
 800388c:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <Measure_IMU+0xf4>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d133      	bne.n	80038fc <Measure_IMU+0x78>
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register              ****/

#ifdef DWM1001C
//HAL_I2C_Mem_Read(&hi2c1,0x33,0x28, 1, &buffer6[0], 1, 10);   // xLSB
	I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x29, 1, &buffer6[1], 1, 10); // xMSB//  HAL_I2C_Mem_Read(&hi2c1,0x33,0x29, 1, &buffer6[1], 1, 10);   // xMSB
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3301      	adds	r3, #1
 8003898:	220a      	movs	r2, #10
 800389a:	9202      	str	r2, [sp, #8]
 800389c:	2201      	movs	r2, #1
 800389e:	9201      	str	r2, [sp, #4]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	2301      	movs	r3, #1
 80038a4:	2229      	movs	r2, #41	; 0x29
 80038a6:	2133      	movs	r1, #51	; 0x33
 80038a8:	4834      	ldr	r0, [pc, #208]	; (800397c <Measure_IMU+0xf8>)
 80038aa:	f009 f9fb 	bl	800cca4 <HAL_I2C_Mem_Read>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b31      	ldr	r3, [pc, #196]	; (8003978 <Measure_IMU+0xf4>)
 80038b4:	701a      	strb	r2, [r3, #0]
//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2A, 1, &buffer6[2], 1, 10);   // yLSB
		I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x2B, 1, &buffer6[3], 1, 10);   // yMSB
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3303      	adds	r3, #3
 80038ba:	220a      	movs	r2, #10
 80038bc:	9202      	str	r2, [sp, #8]
 80038be:	2201      	movs	r2, #1
 80038c0:	9201      	str	r2, [sp, #4]
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2301      	movs	r3, #1
 80038c6:	222b      	movs	r2, #43	; 0x2b
 80038c8:	2133      	movs	r1, #51	; 0x33
 80038ca:	482c      	ldr	r0, [pc, #176]	; (800397c <Measure_IMU+0xf8>)
 80038cc:	f009 f9ea 	bl	800cca4 <HAL_I2C_Mem_Read>
 80038d0:	4603      	mov	r3, r0
 80038d2:	461a      	mov	r2, r3
 80038d4:	4b28      	ldr	r3, [pc, #160]	; (8003978 <Measure_IMU+0xf4>)
 80038d6:	701a      	strb	r2, [r3, #0]
//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2C, 1, &buffer6[4], 1, 10);   // zLSB
		I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x2D, 1, &buffer6[5], 1, 10);   // zMSB
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3305      	adds	r3, #5
 80038dc:	220a      	movs	r2, #10
 80038de:	9202      	str	r2, [sp, #8]
 80038e0:	2201      	movs	r2, #1
 80038e2:	9201      	str	r2, [sp, #4]
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2301      	movs	r3, #1
 80038e8:	222d      	movs	r2, #45	; 0x2d
 80038ea:	2133      	movs	r1, #51	; 0x33
 80038ec:	4823      	ldr	r0, [pc, #140]	; (800397c <Measure_IMU+0xf8>)
 80038ee:	f009 f9d9 	bl	800cca4 <HAL_I2C_Mem_Read>
 80038f2:	4603      	mov	r3, r0
 80038f4:	461a      	mov	r2, r3
 80038f6:	4b20      	ldr	r3, [pc, #128]	; (8003978 <Measure_IMU+0xf4>)
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e005      	b.n	8003908 <Measure_IMU+0x84>
#endif

	}
	else
	{
		HAL_Delay(1);
 80038fc:	2001      	movs	r0, #1
 80038fe:	f006 fdb7 	bl	800a470 <HAL_Delay>
		I2C1_OK = HAL_OK;
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <Measure_IMU+0xf4>)
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]

//acceleration_mg[0]  = ((float)	(((int8_t) buffer6[1]))) / 32; 	
//acceleration_mg[1]  = ((float)	(	((int8_t) buffer6[3])) )/ 32; 		
//acceleration_mg[2]  = ((float)	(	((int8_t) buffer6[5]))) / 32; 	

	if (IMU_Count < 200 && IMU_nodata < 100)
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <Measure_IMU+0xfc>)
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2bc7      	cmp	r3, #199	; 0xc7
 800390e:	d82c      	bhi.n	800396a <Measure_IMU+0xe6>
 8003910:	4b1c      	ldr	r3, [pc, #112]	; (8003984 <Measure_IMU+0x100>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b63      	cmp	r3, #99	; 0x63
 8003916:	d828      	bhi.n	800396a <Measure_IMU+0xe6>
	{
		IMU_Count++;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <Measure_IMU+0xfc>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	3301      	adds	r3, #1
 800391e:	b2da      	uxtb	r2, r3
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <Measure_IMU+0xfc>)
 8003922:	701a      	strb	r2, [r3, #0]
		if (buffer6[0] == 0 && buffer6[1] == 0 && buffer6[2] == 0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d11e      	bne.n	800396a <Measure_IMU+0xe6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3301      	adds	r3, #1
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d119      	bne.n	800396a <Measure_IMU+0xe6>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3302      	adds	r3, #2
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d114      	bne.n	800396a <Measure_IMU+0xe6>
				&& buffer6[3] == 0 && buffer6[4] == 0 && buffer6[5] == 0)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3303      	adds	r3, #3
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <Measure_IMU+0xe6>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	3304      	adds	r3, #4
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10a      	bne.n	800396a <Measure_IMU+0xe6>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	3305      	adds	r3, #5
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d105      	bne.n	800396a <Measure_IMU+0xe6>
			IMU_nodata++;
 800395e:	4b09      	ldr	r3, [pc, #36]	; (8003984 <Measure_IMU+0x100>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	3301      	adds	r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	4b07      	ldr	r3, [pc, #28]	; (8003984 <Measure_IMU+0x100>)
 8003968:	701a      	strb	r2, [r3, #0]
	}

	imuMsr2floatG_y_bit_res16bit(buffer6); // compute norm of acceleration and Y axis acceleation
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 f80c 	bl	8003988 <imuMsr2floatG_y_bit_res16bit>

}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}
 8003978:	20000b69 	.word	0x20000b69
 800397c:	20001dac 	.word	0x20001dac
 8003980:	20000ad6 	.word	0x20000ad6
 8003984:	20000b98 	.word	0x20000b98

08003988 <imuMsr2floatG_y_bit_res16bit>:

extern float acc[4];

void imuMsr2floatG_y_bit_res16bit(uint8_t buffer6[])
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
accy = (uint16_t) (((-acc[0])+4)*255)/ 8;  // y to top
#endif

// Decawave 1001C
#ifdef DWM1001C
	acc[0] = ((float) (((int8_t) buffer6[1]))) / 32;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3301      	adds	r3, #1
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b25b      	sxtb	r3, r3
 8003998:	ee07 3a90 	vmov	s15, r3
 800399c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039a0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8003aa4 <imuMsr2floatG_y_bit_res16bit+0x11c>
 80039a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039a8:	4b3f      	ldr	r3, [pc, #252]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 80039aa:	edc3 7a00 	vstr	s15, [r3]
	acc[1] = ((float) (((int8_t) buffer6[3]))) / 32;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3303      	adds	r3, #3
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	b25b      	sxtb	r3, r3
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039be:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003aa4 <imuMsr2floatG_y_bit_res16bit+0x11c>
 80039c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 80039c8:	edc3 7a01 	vstr	s15, [r3, #4]
	acc[2] = ((float) (((int8_t) buffer6[5]))) / 32;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3305      	adds	r3, #5
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b25b      	sxtb	r3, r3
 80039d4:	ee07 3a90 	vmov	s15, r3
 80039d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039dc:	eddf 6a31 	vldr	s13, [pc, #196]	; 8003aa4 <imuMsr2floatG_y_bit_res16bit+0x11c>
 80039e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039e4:	4b30      	ldr	r3, [pc, #192]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 80039e6:	edc3 7a02 	vstr	s15, [r3, #8]

	accy = (uint16_t) (((-acc[1]) + 4) * 255) / 8;  // y to top
 80039ea:	4b2f      	ldr	r3, [pc, #188]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 80039ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f0:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80039f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039f8:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003aac <imuMsr2floatG_y_bit_res16bit+0x124>
 80039fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a04:	ee17 3a90 	vmov	r3, s15
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	4b28      	ldr	r3, [pc, #160]	; (8003ab0 <imuMsr2floatG_y_bit_res16bit+0x128>)
 8003a10:	801a      	strh	r2, [r3, #0]
#endif

	acc[3] = sqrt(acc[0] * acc[0] + acc[1] * acc[1] + acc[2] * acc[2]); //computation of result acceleration
 8003a12:	4b25      	ldr	r3, [pc, #148]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a14:	ed93 7a00 	vldr	s14, [r3]
 8003a18:	4b23      	ldr	r3, [pc, #140]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a22:	4b21      	ldr	r3, [pc, #132]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a24:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a28:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a2a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a38:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a3c:	4b1a      	ldr	r3, [pc, #104]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a3e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a4a:	ee17 0a90 	vmov	r0, s15
 8003a4e:	f7fc fd7b 	bl	8000548 <__aeabi_f2d>
 8003a52:	4602      	mov	r2, r0
 8003a54:	460b      	mov	r3, r1
 8003a56:	ec43 2b10 	vmov	d0, r2, r3
 8003a5a:	f016 ff97 	bl	801a98c <sqrt>
 8003a5e:	ec53 2b10 	vmov	r2, r3, d0
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f7fd f8bf 	bl	8000be8 <__aeabi_d2f>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4a0e      	ldr	r2, [pc, #56]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a6e:	60d3      	str	r3, [r2, #12]

	accres = (uint16_t) (((acc[3] + 4) * 255) / 8);
 8003a70:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a72:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003a7e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003aac <imuMsr2floatG_y_bit_res16bit+0x124>
 8003a82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a86:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a92:	ee17 3a90 	vmov	r3, s15
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <imuMsr2floatG_y_bit_res16bit+0x12c>)
 8003a9a:	801a      	strh	r2, [r3, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	3708      	adds	r7, #8
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	42000000 	.word	0x42000000
 8003aa8:	20001f40 	.word	0x20001f40
 8003aac:	437f0000 	.word	0x437f0000
 8003ab0:	200026c0 	.word	0x200026c0
 8003ab4:	2000254c 	.word	0x2000254c

08003ab8 <LedOff>:
#include "hes_led.h"

void LedOff(int TabGen[]) {
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af02      	add	r7, sp, #8
 8003abe:	6078      	str	r0, [r7, #4]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	33ec      	adds	r3, #236	; 0xec
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12e      	bne.n	8003b28 <LedOff+0x70>
	{	
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	33ec      	adds	r3, #236	; 0xec
 8003ace:	2201      	movs	r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

  uint8_t buffer[3];

  OutLedWu(1);
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	f7ff fcd6 	bl	8003484 <OutLedWu>

  buffer[0] = 0x20;
 8003ad8:	2320      	movs	r3, #32
 8003ada:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x40;
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0x60;
 8003ae0:	2360      	movs	r3, #96	; 0x60
 8003ae2:	73bb      	strb	r3, [r7, #14]
	//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8003ae4:	f107 020c 	add.w	r2, r7, #12
 8003ae8:	230a      	movs	r3, #10
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2303      	movs	r3, #3
 8003aee:	219a      	movs	r1, #154	; 0x9a
 8003af0:	480f      	ldr	r0, [pc, #60]	; (8003b30 <LedOff+0x78>)
 8003af2:	f008 ffe3 	bl	800cabc <HAL_I2C_Master_Transmit>

  buffer[0] = 0x80;
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0xA0;
 8003afa:	23a0      	movs	r3, #160	; 0xa0
 8003afc:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0xC0;
 8003afe:	23c0      	movs	r3, #192	; 0xc0
 8003b00:	73bb      	strb	r3, [r7, #14]
		
	HAL_Delay(1);
 8003b02:	2001      	movs	r0, #1
 8003b04:	f006 fcb4 	bl	800a470 <HAL_Delay>

  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8003b08:	f107 020c 	add.w	r2, r7, #12
 8003b0c:	230a      	movs	r3, #10
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	2303      	movs	r3, #3
 8003b12:	219a      	movs	r1, #154	; 0x9a
 8003b14:	4806      	ldr	r0, [pc, #24]	; (8003b30 <LedOff+0x78>)
 8003b16:	f008 ffd1 	bl	800cabc <HAL_I2C_Master_Transmit>
	//HAL_Delay(1);
  OutLedWu(0);
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f7ff fcb2 	bl	8003484 <OutLedWu>
		
		TabGen[LOCK_I2C1] = 0; 
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	33ec      	adds	r3, #236	; 0xec
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
	}
}
 8003b28:	bf00      	nop
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20001dac 	.word	0x20001dac

08003b34 <LedOn>:

void LedOn(int red, int green, int blue, int TabGen[]) 
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	33ec      	adds	r3, #236	; 0xec
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d137      	bne.n	8003bbc <LedOn+0x88>
	{	

		
	TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	33ec      	adds	r3, #236	; 0xec
 8003b50:	2201      	movs	r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
		
  uint8_t buffer[3];
	
	OutLedWu(1);
 8003b54:	2001      	movs	r0, #1
 8003b56:	f7ff fc95 	bl	8003484 <OutLedWu>


    buffer[0] = 0x20;
 8003b5a:	2320      	movs	r3, #32
 8003b5c:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x40;
 8003b5e:	2340      	movs	r3, #64	; 0x40
 8003b60:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x60;
 8003b62:	2360      	movs	r3, #96	; 0x60
 8003b64:	75bb      	strb	r3, [r7, #22]


  buffer[0] = buffer[0] + ((uint8_t)(red / 8));
 8003b66:	7d3a      	ldrb	r2, [r7, #20]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da00      	bge.n	8003b70 <LedOn+0x3c>
 8003b6e:	3307      	adds	r3, #7
 8003b70:	10db      	asrs	r3, r3, #3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	753b      	strb	r3, [r7, #20]
  buffer[1] = buffer[1] + ((uint8_t)(green / 8));
 8003b7a:	7d7a      	ldrb	r2, [r7, #21]
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da00      	bge.n	8003b84 <LedOn+0x50>
 8003b82:	3307      	adds	r3, #7
 8003b84:	10db      	asrs	r3, r3, #3
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4413      	add	r3, r2
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	757b      	strb	r3, [r7, #21]
  buffer[2] = buffer[2] + ((uint8_t)(blue / 8));
 8003b8e:	7dba      	ldrb	r2, [r7, #22]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	da00      	bge.n	8003b98 <LedOn+0x64>
 8003b96:	3307      	adds	r3, #7
 8003b98:	10db      	asrs	r3, r3, #3
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	75bb      	strb	r3, [r7, #22]
		//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A , buffer, 3,10);
 8003ba2:	f107 0214 	add.w	r2, r7, #20
 8003ba6:	230a      	movs	r3, #10
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	2303      	movs	r3, #3
 8003bac:	219a      	movs	r1, #154	; 0x9a
 8003bae:	4805      	ldr	r0, [pc, #20]	; (8003bc4 <LedOn+0x90>)
 8003bb0:	f008 ff84 	bl	800cabc <HAL_I2C_Master_Transmit>
		//HAL_Delay(1);
		TabGen[LOCK_I2C1] = 0; // I2C locked for interrupt on TIM7
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	33ec      	adds	r3, #236	; 0xec
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
	}
  //HAL_I2C_Master_Transmit(&hi2c1,0x47<<1,0x01,1,10);
 8003bbc:	bf00      	nop
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	20001dac 	.word	0x20001dac

08003bc8 <PowerSave>:
#include "hes_powersave.h"


int PowerSave(void) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0

  int powerSave = 0 ; 
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
	
	 if (InOn() == 0)
 8003bd2:	f7ff fca1 	bl	8003518 <InOn>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <PowerSave+0x2a>
	 {
		 // DONE SIGNAL -> turn off power
		 OutDone1(1); //Start Powersave part 1 // PB4 - DONE
 8003bdc:	2001      	movs	r0, #1
 8003bde:	f7ff fba3 	bl	8003328 <OutDone1>

		 OutDone2(0); //Start Powersave part 2 // PB3 - DRV
 8003be2:	2000      	movs	r0, #0
 8003be4:	f7ff fbb8 	bl	8003358 <OutDone2>
		 powerSave = 1;
 8003be8:	2301      	movs	r3, #1
 8003bea:	607b      	str	r3, [r7, #4]
		 HAL_Delay(100);
 8003bec:	2064      	movs	r0, #100	; 0x64
 8003bee:	f006 fc3f 	bl	800a470 <HAL_Delay>
	}

  return powerSave ;
 8003bf2:	687b      	ldr	r3, [r7, #4]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <ScreenOn>:
  OutOledRst(1);
	HAL_Delay(1);
}


void ScreenOn() {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(0);
	else
	{
		OutOledWu(1);
 8003c00:	2001      	movs	r0, #1
 8003c02:	f7ff fbf5 	bl	80033f0 <OutOledWu>
		OutOledRst(1);
 8003c06:	2001      	movs	r0, #1
 8003c08:	f7ff fc6c 	bl	80034e4 <OutOledRst>
		OutOledWu(0);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f7ff fbef 	bl	80033f0 <OutOledWu>
		HAL_Delay(1);
 8003c12:	2001      	movs	r0, #1
 8003c14:	f006 fc2c 	bl	800a470 <HAL_Delay>
		OutOledRst(1);
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7ff fc63 	bl	80034e4 <OutOledRst>
		HAL_Delay(1);
 8003c1e:	2001      	movs	r0, #1
 8003c20:	f006 fc26 	bl	800a470 <HAL_Delay>
	}
}
 8003c24:	bf00      	nop
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <ScreenOff>:

void ScreenOff() {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(1);
	else
	{
	  OutOledWu(1);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7ff fbdf 	bl	80033f0 <OutOledWu>
		OutOledRst(0);
 8003c32:	2000      	movs	r0, #0
 8003c34:	f7ff fc56 	bl	80034e4 <OutOledRst>
	}
}
 8003c38:	bf00      	nop
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <InitTaskState>:
#include "hes_sequencer.h"

void InitTaskState(uint32_t Tab[], uint32_t nbDelay) {
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]

  Tab[0] = 1; // On / Off
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	601a      	str	r2, [r3, #0]
  Tab[1] = nbDelay; // NbDelay
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	601a      	str	r2, [r3, #0]
  Tab[2] = 1; // currentState
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	3308      	adds	r3, #8
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]
  Tab[3] = 0; // previousState
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	2200      	movs	r2, #0
 8003c62:	601a      	str	r2, [r3, #0]
  Tab[4] = 0; // currentDelay
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	3310      	adds	r3, #16
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	370c      	adds	r7, #12
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <TaskState>:

int TaskState(uint32_t Tab[]) {
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  // currentState  <= Tab[2]; // init : 1
  // previousState <= Tab[3]; // init : 0
  // delayGo       <= Tab[4]; // init : 0

  uint32_t millis;
  int state = 0;
 8003c80:	2300      	movs	r3, #0
 8003c82:	60fb      	str	r3, [r7, #12]

  if (Tab[0] == 1) 
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d13e      	bne.n	8003d0a <TaskState+0x92>
	{ // if doOn
    millis = HAL_GetTick();
 8003c8c:	f006 fbe4 	bl	800a458 <HAL_GetTick>
 8003c90:	60b8      	str	r0, [r7, #8]
    if (Tab[2] == Tab[3]) 
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3308      	adds	r3, #8
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	330c      	adds	r3, #12
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d12a      	bne.n	8003cf8 <TaskState+0x80>
		{                                 // if (previousState == currentState)
      if ((millis - Tab[4]) >= Tab[((size_t)(Tab[2] + 4))]) //  if ( (millis - delayGo) >= Tab[currentState + 4] )
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	3310      	adds	r3, #16
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	1ad2      	subs	r2, r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	440b      	add	r3, r1
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d324      	bcc.n	8003d0a <TaskState+0x92>
      {
        state = Tab[2];      // state = currentState
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3308      	adds	r3, #8
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60fb      	str	r3, [r7, #12]
        Tab[2] = Tab[2] + 1; // currentState = currentState + 1
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	3308      	adds	r3, #8
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	3201      	adds	r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]
        if (Tab[2] > Tab[1]) // if (currentState > nbDelay )
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d911      	bls.n	8003d0a <TaskState+0x92>
        {
          Tab[2] = 1; // currentState  = 1 ;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3308      	adds	r3, #8
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
          Tab[3] = 0; // previousState = 0 ;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	330c      	adds	r3, #12
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]
 8003cf6:	e008      	b.n	8003d0a <TaskState+0x92>
        }
      }
    } 
		else 
		{
      Tab[4] = millis; // delayGo  <= millis
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	3310      	adds	r3, #16
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	601a      	str	r2, [r3, #0]
      Tab[3] = Tab[2]; // previousState <= currentState
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	330c      	adds	r3, #12
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6892      	ldr	r2, [r2, #8]
 8003d08:	601a      	str	r2, [r3, #0]
    }
  }
  return state;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <WakeUpNemeusLS>:
//##############################################################
// Nemeus module 
//##############################################################

void WakeUpNemeusLS(void) 
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	OutLoraWu(1);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7ff fb83 	bl	8003424 <OutLoraWu>
	HAL_Delay(3);
 8003d1e:	2003      	movs	r0, #3
 8003d20:	f006 fba6 	bl	800a470 <HAL_Delay>
	OutLoraWu(0);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7ff fb7d 	bl	8003424 <OutLoraWu>
}
 8003d2a:	bf00      	nop
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <RebootNemeusLS>:

extern uint8_t DUAL_STATE_LS;

void RebootNemeusLS(int TabGen[]) 
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b0a1      	sub	sp, #132	; 0x84
 8003d34:	af1e      	add	r7, sp, #120	; 0x78
 8003d36:	6078      	str	r0, [r7, #4]
		//SendMess("\n", NEMEUS_UART_PORT);
		SendMess("AT+GA=DIND,1,8401\n", NEMEUS_UART_PORT);
 8003d38:	4c0a      	ldr	r4, [pc, #40]	; (8003d64 <RebootNemeusLS+0x34>)
 8003d3a:	4668      	mov	r0, sp
 8003d3c:	f104 030c 	add.w	r3, r4, #12
 8003d40:	2278      	movs	r2, #120	; 0x78
 8003d42:	4619      	mov	r1, r3
 8003d44:	f013 fdf4 	bl	8017930 <memcpy>
 8003d48:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003d4c:	4806      	ldr	r0, [pc, #24]	; (8003d68 <RebootNemeusLS+0x38>)
 8003d4e:	f000 fa2d 	bl	80041ac <SendMess>
		//SendMess("AT+SF=?\n");
		//SendMess("AT+MAC=RDEVUID\n"); // DevEui
		//SendMess("AT+MAC=RAPPUID\n"); //AppEui
		//SendMess("AT+MAC=RAPPKEY\n", NEMEUS_UART_PORT); //AppKey
		HAL_Delay(2000);
 8003d52:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d56:	f006 fb8b 	bl	800a470 <HAL_Delay>


}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20003510 	.word	0x20003510
 8003d68:	0801ae64 	.word	0x0801ae64

08003d6c <LoraWanOn>:
// LoraWan, to Objenious or similar
//##############################################################

// Activate the LoraWan layer
void LoraWanOn(void)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	af00      	add	r7, sp, #0
		SendMess("AT+MAC=SDR,SF12BW125,10,001F,0,0\n", NEMEUS_UART_PORT);  // active lorawan
		HAL_Delay(200);
		SendMess("AT+MAC=ON,3,A,1\n", NEMEUS_UART_PORT);  // active lorawan

	}
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <SendOnLora>:
	}
}

// Send a message when you finally joined LoraWan network
void SendOnLora(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
	if(LORAWANOK == 1)
	{
		HAL_Delay(1000);
		SendMess("AT+MAC=SNDBIN,000000000000,6,2,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
	}
}
 8003d7e:	bf00      	nop
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <SendMessLoraWan>:

// Send a string of hexa using LoraWan, to objenious
void SendMessLoraWan(char buffer_lorawan[])
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b08d      	sub	sp, #52	; 0x34
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
		sprintf(buffer_all,"AT+MAC=SNDBIN,%s,3,2,0\n", buffer_lorawan);  // %s,buffersig
		SendMess(buffer_all, NEMEUS_UART_PORT);
		HAL_Delay(1000);

	}
}
 8003d90:	bf00      	nop
 8003d92:	3734      	adds	r7, #52	; 0x34
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <SigfoxOn>:
	}
}

// Turn on Sigfox layer
void SigfoxOn(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
		//SendMess("AT+GA= DIND,1,880201\n", NEMEUS_UART_PORT);

		SendMess("AT+SF=ON\n", NEMEUS_UART_PORT);
		HAL_Delay(1000);
	}
}
 8003da0:	bf00      	nop
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr

08003daa <SendMessSigfox>:

// Send a string of hexa using Sigfox
void SendMessSigfox(char buffer_sig[], int TabGen[]) 
{
 8003daa:	b480      	push	{r7}
 8003dac:	b091      	sub	sp, #68	; 0x44
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
 8003db2:	6039      	str	r1, [r7, #0]
		else
			sprintf(buffer_all,"AT+SF=SNDBIN,%s,0\n", buffer_sig); // ERROR // should wait 5s before using nemeus module
		
		SendMess(buffer_all, NEMEUS_UART_PORT);		//AT+SF=SNDB / IN,1050d4f / 7499298001 / 100,0\n"
	}
}
 8003db4:	bf00      	nop
 8003db6:	3744      	adds	r7, #68	; 0x44
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <BuildMessGPS>:

}


void BuildMessGPS(char buffer_sig[], int TabGen[], float TabFloatValue[], uint32_t TabGpsTimer[])
{  
 8003dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc2:	b0ad      	sub	sp, #180	; 0xb4
 8003dc4:	af0e      	add	r7, sp, #56	; 0x38
 8003dc6:	6378      	str	r0, [r7, #52]	; 0x34
 8003dc8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
	
	char b1;
	char b2; 
  char buffer1 ;
	int signe_value = -1 ;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	673b      	str	r3, [r7, #112]	; 0x70
	int elapsed_time_GPS = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int val1byte = 0 ;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	667b      	str	r3, [r7, #100]	; 0x64
	int val2byte = 0 ;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	66bb      	str	r3, [r7, #104]	; 0x68
	int val3to7byte = 0 ;
 8003de0:	2300      	movs	r3, #0
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
	int val8to12byte = 0 ;
 8003de4:	2300      	movs	r3, #0
 8003de6:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t buffer = 0x00 ;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char buffer_long[5] ;
	char buffer_lat2[5] ;
	char buffer_long2[5] ;
	char buffer_last_gps[3];
	
	if (TabFloatValue[LONGI] > 0)	{		signe_value = 1 ;	}
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	3318      	adds	r3, #24
 8003df2:	edd3 7a00 	vldr	s15, [r3]
 8003df6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dfe:	dd01      	ble.n	8003e04 <BuildMessGPS+0x44>
 8003e00:	2301      	movs	r3, #1
 8003e02:	673b      	str	r3, [r7, #112]	; 0x70
//malaise + 8
//malaise - 9



	if (TabGen[SIG_ALERT] == ALERT_SOS)
 8003e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e06:	33e0      	adds	r3, #224	; 0xe0
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d110      	bne.n	8003e30 <BuildMessGPS+0x70>
	{	if (signe_value == 1) {  b1 = '0' ;b2='0';}	else	{  b1 = '1' ;b2='0';}	}
 8003e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <BuildMessGPS+0x62>
 8003e14:	2330      	movs	r3, #48	; 0x30
 8003e16:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e1a:	2330      	movs	r3, #48	; 0x30
 8003e1c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e20:	e0cb      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003e22:	2331      	movs	r3, #49	; 0x31
 8003e24:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e28:	2330      	movs	r3, #48	; 0x30
 8003e2a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e2e:	e0c4      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_FALL)
 8003e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e32:	33e0      	adds	r3, #224	; 0xe0
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2b0d      	cmp	r3, #13
 8003e38:	d110      	bne.n	8003e5c <BuildMessGPS+0x9c>
	{	if (signe_value == 1) {  b1 = '2' ;b2='0';}	else	{  b1 = '3' ;b2='0';}	}
 8003e3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d106      	bne.n	8003e4e <BuildMessGPS+0x8e>
 8003e40:	2332      	movs	r3, #50	; 0x32
 8003e42:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e46:	2330      	movs	r3, #48	; 0x30
 8003e48:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e4c:	e0b5      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003e4e:	2333      	movs	r3, #51	; 0x33
 8003e50:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e54:	2330      	movs	r3, #48	; 0x30
 8003e56:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e5a:	e0ae      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_LOWBAT)
 8003e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5e:	33e0      	adds	r3, #224	; 0xe0
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d110      	bne.n	8003e88 <BuildMessGPS+0xc8>
	{	if (signe_value == 1) {  b1 = '4' ;b2='0';}	else	{  b1 = '5' ;b2='0';}	}
 8003e66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <BuildMessGPS+0xba>
 8003e6c:	2334      	movs	r3, #52	; 0x34
 8003e6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e72:	2330      	movs	r3, #48	; 0x30
 8003e74:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e78:	e09f      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003e7a:	2335      	movs	r3, #53	; 0x35
 8003e7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e80:	2330      	movs	r3, #48	; 0x30
 8003e82:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003e86:	e098      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_MALAISE)
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	33e0      	adds	r3, #224	; 0xe0
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d110      	bne.n	8003eb4 <BuildMessGPS+0xf4>
	{	if (signe_value == 1) {  b1 = '8' ;b2='0';}	else	{  b1 = '9' ;b2='0';}	}
 8003e92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d106      	bne.n	8003ea6 <BuildMessGPS+0xe6>
 8003e98:	2338      	movs	r3, #56	; 0x38
 8003e9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003e9e:	2330      	movs	r3, #48	; 0x30
 8003ea0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003ea4:	e089      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003ea6:	2339      	movs	r3, #57	; 0x39
 8003ea8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003eac:	2330      	movs	r3, #48	; 0x30
 8003eae:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003eb2:	e082      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_O2)
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	33e0      	adds	r3, #224	; 0xe0
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2b09      	cmp	r3, #9
 8003ebc:	d110      	bne.n	8003ee0 <BuildMessGPS+0x120>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='0';}	else	{  b1 = 'A' ;b2='1';}	}
 8003ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d106      	bne.n	8003ed2 <BuildMessGPS+0x112>
 8003ec4:	2341      	movs	r3, #65	; 0x41
 8003ec6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003eca:	2330      	movs	r3, #48	; 0x30
 8003ecc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003ed0:	e073      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003ed2:	2341      	movs	r3, #65	; 0x41
 8003ed4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ed8:	2331      	movs	r3, #49	; 0x31
 8003eda:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003ede:	e06c      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVME)
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ee2:	33e0      	adds	r3, #224	; 0xe0
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b07      	cmp	r3, #7
 8003ee8:	d110      	bne.n	8003f0c <BuildMessGPS+0x14c>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='2';}	else	{  b1 = 'A' ;b2='3';}	}
 8003eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d106      	bne.n	8003efe <BuildMessGPS+0x13e>
 8003ef0:	2341      	movs	r3, #65	; 0x41
 8003ef2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ef6:	2332      	movs	r3, #50	; 0x32
 8003ef8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003efc:	e05d      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003efe:	2341      	movs	r3, #65	; 0x41
 8003f00:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f04:	2333      	movs	r3, #51	; 0x33
 8003f06:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f0a:	e056      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVLCT)
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	33e0      	adds	r3, #224	; 0xe0
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d110      	bne.n	8003f38 <BuildMessGPS+0x178>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='4';}	else	{  b1 = 'A' ;b2='5';}	}
 8003f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d106      	bne.n	8003f2a <BuildMessGPS+0x16a>
 8003f1c:	2341      	movs	r3, #65	; 0x41
 8003f1e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f22:	2334      	movs	r3, #52	; 0x34
 8003f24:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f28:	e047      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003f2a:	2341      	movs	r3, #65	; 0x41
 8003f2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f30:	2335      	movs	r3, #53	; 0x35
 8003f32:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f36:	e040      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVME)
 8003f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3a:	33e0      	adds	r3, #224	; 0xe0
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b0a      	cmp	r3, #10
 8003f40:	d110      	bne.n	8003f64 <BuildMessGPS+0x1a4>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='6';}	else	{  b1 = 'A' ;b2='7';}	}
 8003f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d106      	bne.n	8003f56 <BuildMessGPS+0x196>
 8003f48:	2341      	movs	r3, #65	; 0x41
 8003f4a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f4e:	2336      	movs	r3, #54	; 0x36
 8003f50:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f54:	e031      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003f56:	2341      	movs	r3, #65	; 0x41
 8003f58:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f5c:	2337      	movs	r3, #55	; 0x37
 8003f5e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f62:	e02a      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVLCT)
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	33e0      	adds	r3, #224	; 0xe0
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b0b      	cmp	r3, #11
 8003f6c:	d110      	bne.n	8003f90 <BuildMessGPS+0x1d0>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='8';}	else	{  b1 = 'A' ;b2='9';}	}
 8003f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d106      	bne.n	8003f82 <BuildMessGPS+0x1c2>
 8003f74:	2341      	movs	r3, #65	; 0x41
 8003f76:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f7a:	2338      	movs	r3, #56	; 0x38
 8003f7c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f80:	e01b      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003f82:	2341      	movs	r3, #65	; 0x41
 8003f84:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f88:	2339      	movs	r3, #57	; 0x39
 8003f8a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f8e:	e014      	b.n	8003fba <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_EX)
 8003f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f92:	33e0      	adds	r3, #224	; 0xe0
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b0c      	cmp	r3, #12
 8003f98:	d10f      	bne.n	8003fba <BuildMessGPS+0x1fa>
	{	if (signe_value == 1) {  b1 = 'B' ;b2='0';}	else	{  b1 = 'B' ;b2='1';}	}
 8003f9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <BuildMessGPS+0x1ee>
 8003fa0:	2342      	movs	r3, #66	; 0x42
 8003fa2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fa6:	2330      	movs	r3, #48	; 0x30
 8003fa8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003fac:	e005      	b.n	8003fba <BuildMessGPS+0x1fa>
 8003fae:	2342      	movs	r3, #66	; 0x42
 8003fb0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fb4:	2331      	movs	r3, #49	; 0x31
 8003fb6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	
	
	

	val2byte = TabGen[BAT_VALUE] / 10 ;
 8003fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fbc:	33a8      	adds	r3, #168	; 0xa8
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a75      	ldr	r2, [pc, #468]	; (8004198 <BuildMessGPS+0x3d8>)
 8003fc2:	fb82 1203 	smull	r1, r2, r2, r3
 8003fc6:	1092      	asrs	r2, r2, #2
 8003fc8:	17db      	asrs	r3, r3, #31
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte > 9)
 8003fce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fd0:	2b09      	cmp	r3, #9
 8003fd2:	dd01      	ble.n	8003fd8 <BuildMessGPS+0x218>
	{val2byte = 9 ;}
 8003fd4:	2309      	movs	r3, #9
 8003fd6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte < 0)
 8003fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	da01      	bge.n	8003fe2 <BuildMessGPS+0x222>
	{val2byte = 0 ;}
 8003fde:	2300      	movs	r3, #0
 8003fe0:	66bb      	str	r3, [r7, #104]	; 0x68

	val3to7byte = (int) (    roundf ( (float) ( fabs(TabFloatValue[LATI] * 10000)  )  ) );
 8003fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800419c <BuildMessGPS+0x3dc>
 8003fee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ff2:	eef0 7ae7 	vabs.f32	s15, s15
 8003ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8003ffa:	f016 fca1 	bl	801a940 <roundf>
 8003ffe:	eef0 7a40 	vmov.f32	s15, s0
 8004002:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004006:	ee17 3a90 	vmov	r3, s15
 800400a:	663b      	str	r3, [r7, #96]	; 0x60
	val8to12byte = (int) ( roundf ( (float) ( fabs(TabFloatValue[LONGI] * 100000)  ) )  );
 800400c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800400e:	3318      	adds	r3, #24
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80041a0 <BuildMessGPS+0x3e0>
 8004018:	ee67 7a87 	vmul.f32	s15, s15, s14
 800401c:	eef0 7ae7 	vabs.f32	s15, s15
 8004020:	eeb0 0a67 	vmov.f32	s0, s15
 8004024:	f016 fc8c 	bl	801a940 <roundf>
 8004028:	eef0 7a40 	vmov.f32	s15, s0
 800402c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004030:	ee17 3a90 	vmov	r3, s15
 8004034:	65fb      	str	r3, [r7, #92]	; 0x5c

	buffer = (uint8_t) ( val1byte * 16 + val2byte );
 8004036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004038:	b2db      	uxtb	r3, r3
 800403a:	011b      	lsls	r3, r3, #4
 800403c:	b2da      	uxtb	r2, r3
 800403e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4413      	add	r3, r2
 8004044:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	elapsed_time_GPS = (int)((HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000 + 1) ;
 8004048:	f006 fa06 	bl	800a458 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004050:	3308      	adds	r3, #8
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	4a53      	ldr	r2, [pc, #332]	; (80041a4 <BuildMessGPS+0x3e4>)
 8004058:	fba2 2303 	umull	r2, r3, r2, r3
 800405c:	0b9b      	lsrs	r3, r3, #14
 800405e:	3301      	adds	r3, #1
 8004060:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (TabGpsTimer[LAST_UPDATE_GPS] == 0)
 8004062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004064:	3308      	adds	r3, #8
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <BuildMessGPS+0x2b0>
		elapsed_time_GPS = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	//elapsed_time_GPS = 8*60-1;
	if (elapsed_time_GPS > 8 * 60)  // 0x1E0  max, more than 8 hours => 0xFFF
 8004070:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004072:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004076:	dd02      	ble.n	800407e <BuildMessGPS+0x2be>
		elapsed_time_GPS = 4095; // 0xFFF
 8004078:	f640 73ff 	movw	r3, #4095	; 0xfff
 800407c:	66fb      	str	r3, [r7, #108]	; 0x6c
	

	//elapsed_time_GPS = 8*60-1;
	decimal2hexa(val3to7byte, buffer_lat, 5);
 800407e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004080:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8004084:	2205      	movs	r2, #5
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f8ae 	bl	80041e8 <decimal2hexa>
	decimal2hexa(val8to12byte, buffer_long, 5);
 800408c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800408e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004092:	2205      	movs	r2, #5
 8004094:	4618      	mov	r0, r3
 8004096:	f000 f8a7 	bl	80041e8 <decimal2hexa>
	decimal2hexa(elapsed_time_GPS, buffer_last_gps, 3); 
 800409a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800409c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80040a0:	2203      	movs	r2, #3
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 f8a0 	bl	80041e8 <decimal2hexa>
	


	buffer_lat2[0] = buffer_lat[0];
 80040a8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80040ac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer_lat2[1] = buffer_lat[1];
 80040b0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80040b4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer_lat2[2] = buffer_lat[2];
 80040b8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80040bc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer_lat2[3] = buffer_lat[3];
 80040c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80040c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer_lat2[4] = buffer_lat[4];
 80040c8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80040cc:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer_long2[0]  = buffer_long[0];
 80040d0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80040d4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer_long2[1]  = buffer_long[1];
 80040d8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80040dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer_long2[2]  = buffer_long[2];
 80040e0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80040e4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer_long2[3]  = buffer_long[3];
 80040e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80040ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer_long2[4]  = buffer_long[4];
 80040f0:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80040f4:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40



	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 80040f8:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 80040fc:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
	b1, b2,  //15
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004100:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004104:	461d      	mov	r5, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004106:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800410a:	461e      	mov	r6, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 800410c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004112:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004116:	623b      	str	r3, [r7, #32]
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004118:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800411c:	61fb      	str	r3, [r7, #28]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800411e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004122:	61bb      	str	r3, [r7, #24]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004124:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004128:	617b      	str	r3, [r7, #20]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800412a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800412e:	613b      	str	r3, [r7, #16]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004130:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004134:	60fb      	str	r3, [r7, #12]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004136:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800413a:	60bb      	str	r3, [r7, #8]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 800413c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004140:	607b      	str	r3, [r7, #4]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 8004142:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004146:	461c      	mov	r4, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 8004148:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800414c:	461a      	mov	r2, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 800414e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004150:	f503 738a 	add.w	r3, r3, #276	; 0x114
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	930d      	str	r3, [sp, #52]	; 0x34
 8004158:	920c      	str	r2, [sp, #48]	; 0x30
 800415a:	940b      	str	r4, [sp, #44]	; 0x2c
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	920a      	str	r2, [sp, #40]	; 0x28
 8004160:	68ba      	ldr	r2, [r7, #8]
 8004162:	9209      	str	r2, [sp, #36]	; 0x24
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	9208      	str	r2, [sp, #32]
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	9207      	str	r2, [sp, #28]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	9206      	str	r2, [sp, #24]
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	9205      	str	r2, [sp, #20]
 8004174:	69fa      	ldr	r2, [r7, #28]
 8004176:	9204      	str	r2, [sp, #16]
 8004178:	6a3a      	ldr	r2, [r7, #32]
 800417a:	9203      	str	r2, [sp, #12]
 800417c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417e:	9302      	str	r3, [sp, #8]
 8004180:	9601      	str	r6, [sp, #4]
 8004182:	9500      	str	r5, [sp, #0]
 8004184:	4603      	mov	r3, r0
 8004186:	460a      	mov	r2, r1
 8004188:	4907      	ldr	r1, [pc, #28]	; (80041a8 <BuildMessGPS+0x3e8>)
 800418a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800418c:	f014 f8be 	bl	801830c <siprintf>


	if(LORAWANOK == 1 && SIGFOXOK == 1)
		buffer_sig[15] = '2';

}
 8004190:	bf00      	nop
 8004192:	377c      	adds	r7, #124	; 0x7c
 8004194:	46bd      	mov	sp, r7
 8004196:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004198:	66666667 	.word	0x66666667
 800419c:	461c4000 	.word	0x461c4000
 80041a0:	47c35000 	.word	0x47c35000
 80041a4:	45e7b273 	.word	0x45e7b273
 80041a8:	0801afc0 	.word	0x0801afc0

080041ac <SendMess>:
//##############################################################



void SendMess(char *char_in, UART_HandleTypeDef huart)
{
 80041ac:	b084      	sub	sp, #16
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b084      	sub	sp, #16
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	f107 001c 	add.w	r0, r7, #28
 80041ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t Timeout_local = 1000;
 80041be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041c2:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&NEMEUS_UART_PORT,((uint8_t *)char_in),sizeof(*char_in)-1,Timeout_local  );
	
	HAL_UART_Transmit(&huart,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7fc f803 	bl	80001d0 <strlen>
 80041ca:	4603      	mov	r3, r0
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	f107 001c 	add.w	r0, r7, #28
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	f00d f9cd 	bl	8011574 <HAL_UART_Transmit>
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041e4:	b004      	add	sp, #16
 80041e6:	4770      	bx	lr

080041e8 <decimal2hexa>:
	HAL_UART_Transmit(&huart1,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
}


void decimal2hexa(unsigned int decimal,char hexa[],unsigned int size_char)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
   static char const hexaset[] = "0123456789ABCDEF";
   //unsigned int quotient = decimal;
   unsigned int size = size_char;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	617b      	str	r3, [r7, #20]
	
	for(unsigned int i=0;i<size_char;i++)
 80041f8:	2300      	movs	r3, #0
 80041fa:	613b      	str	r3, [r7, #16]
 80041fc:	e007      	b.n	800420e <decimal2hexa+0x26>
	{
		hexa[i] = '0';
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	4413      	add	r3, r2
 8004204:	2230      	movs	r2, #48	; 0x30
 8004206:	701a      	strb	r2, [r3, #0]
	for(unsigned int i=0;i<size_char;i++)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3301      	adds	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	429a      	cmp	r2, r3
 8004214:	d3f3      	bcc.n	80041fe <decimal2hexa+0x16>
	}

	do
	{
		 size--;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	3b01      	subs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
		 hexa[size] = hexaset[decimal % 16];
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	68b9      	ldr	r1, [r7, #8]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	440b      	add	r3, r1
 8004228:	4907      	ldr	r1, [pc, #28]	; (8004248 <decimal2hexa+0x60>)
 800422a:	5c8a      	ldrb	r2, [r1, r2]
 800422c:	701a      	strb	r2, [r3, #0]
		 decimal /= 16;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	60fb      	str	r3, [r7, #12]
	}
	while(decimal != 0);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1ed      	bne.n	8004216 <decimal2hexa+0x2e>
}
 800423a:	bf00      	nop
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	0801b198 	.word	0x0801b198

0800424c <TaskBigScreen>:
}

void TaskBigScreen(uint32_t Tab[], int TabAlert[], int TabGen[],
		float TabFloatValue[], uint32_t TabGpsTimer[], uint32_t TabAlertAll[],
		char name[])
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b096      	sub	sp, #88	; 0x58
 8004250:	af06      	add	r7, sp, #24
 8004252:	60f8      	str	r0, [r7, #12]
 8004254:	60b9      	str	r1, [r7, #8]
 8004256:	607a      	str	r2, [r7, #4]
 8004258:	603b      	str	r3, [r7, #0]
	char str_h2S[10];
	char str_o2[10];
	char str_co[10];
	char str_ex[10];

	if (TabGen[SCREENSTATE] == 1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	33d0      	adds	r3, #208	; 0xd0
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d148      	bne.n	80042f6 <TaskBigScreen+0xaa>
	{
		switch (TaskState(Tab))
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f7ff fd07 	bl	8003c78 <TaskState>
 800426a:	4603      	mov	r3, r0
 800426c:	2b03      	cmp	r3, #3
 800426e:	d037      	beq.n	80042e0 <TaskBigScreen+0x94>
 8004270:	2b03      	cmp	r3, #3
 8004272:	dc47      	bgt.n	8004304 <TaskBigScreen+0xb8>
 8004274:	2b01      	cmp	r3, #1
 8004276:	d002      	beq.n	800427e <TaskBigScreen+0x32>
 8004278:	2b02      	cmp	r3, #2
 800427a:	d026      	beq.n	80042ca <TaskBigScreen+0x7e>
			}
			break;
		}
	}

}
 800427c:	e042      	b.n	8004304 <TaskBigScreen+0xb8>
			if (TabGen[TYPE_ALERT] == NONE_ALERT)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3390      	adds	r3, #144	; 0x90
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d138      	bne.n	80042fa <TaskBigScreen+0xae>
				status_GPS = (uint8_t) TabGen[STATUT_GPS];
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	33a0      	adds	r3, #160	; 0xa0
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	4b1e      	ldr	r3, [pc, #120]	; (800430c <TaskBigScreen+0xc0>)
 8004292:	701a      	strb	r2, [r3, #0]
				batteryLevel = (uint8_t) TabGen[BAT_VALUE];
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	33a8      	adds	r3, #168	; 0xa8
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	b2da      	uxtb	r2, r3
 800429c:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <TaskBigScreen+0xc4>)
 800429e:	701a      	strb	r2, [r3, #0]
				display_dco(TabFloatValue, TabAlert, TabGen, TabGpsTimer, name,
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	9304      	str	r3, [sp, #16]
 80042a6:	f107 031c 	add.w	r3, r7, #28
 80042aa:	9303      	str	r3, [sp, #12]
 80042ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042b0:	9302      	str	r3, [sp, #8]
 80042b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80042b6:	9301      	str	r3, [sp, #4]
 80042b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68b9      	ldr	r1, [r7, #8]
 80042c2:	6838      	ldr	r0, [r7, #0]
 80042c4:	f7fd faa4 	bl	8001810 <display_dco>
			break;
 80042c8:	e017      	b.n	80042fa <TaskBigScreen+0xae>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3390      	adds	r3, #144	; 0x90
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d014      	beq.n	80042fe <TaskBigScreen+0xb2>
				display_AlerteDanger(TabGen, TabAlertAll, 0);
 80042d4:	2200      	movs	r2, #0
 80042d6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fd fd1b 	bl	8001d14 <display_AlerteDanger>
			break;
 80042de:	e00e      	b.n	80042fe <TaskBigScreen+0xb2>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	3390      	adds	r3, #144	; 0x90
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <TaskBigScreen+0xb6>
				display_AlerteDanger(TabGen, TabAlertAll, 1);
 80042ea:	2201      	movs	r2, #1
 80042ec:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd fd10 	bl	8001d14 <display_AlerteDanger>
			break;
 80042f4:	e005      	b.n	8004302 <TaskBigScreen+0xb6>
	}
 80042f6:	bf00      	nop
 80042f8:	e004      	b.n	8004304 <TaskBigScreen+0xb8>
			break;
 80042fa:	bf00      	nop
 80042fc:	e002      	b.n	8004304 <TaskBigScreen+0xb8>
			break;
 80042fe:	bf00      	nop
 8004300:	e000      	b.n	8004304 <TaskBigScreen+0xb8>
			break;
 8004302:	bf00      	nop
}
 8004304:	bf00      	nop
 8004306:	3740      	adds	r7, #64	; 0x40
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	20000b81 	.word	0x20000b81
 8004310:	20000b80 	.word	0x20000b80

08004314 <TaskLedBlinking>:

void TaskLedBlinking(uint32_t Tab[], int TabGen[])
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
	if (TabGen[CHARGEC] == 1)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	33ac      	adds	r3, #172	; 0xac
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d112      	bne.n	800434e <TaskLedBlinking+0x3a>
	{
		if (TabGen[BAT_VALUE] >= 100)
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	33a8      	adds	r3, #168	; 0xa8
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b63      	cmp	r3, #99	; 0x63
 8004330:	dd06      	ble.n	8004340 <TaskLedBlinking+0x2c>
			LedOn(0, 100, 0, TabGen);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	2164      	movs	r1, #100	; 0x64
 8004338:	2000      	movs	r0, #0
 800433a:	f7ff fbfb 	bl	8003b34 <LedOn>

		default:
			break;
		}
	}
}
 800433e:	e029      	b.n	8004394 <TaskLedBlinking+0x80>
			LedOn(100, 0, 0, TabGen);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	2100      	movs	r1, #0
 8004346:	2064      	movs	r0, #100	; 0x64
 8004348:	f7ff fbf4 	bl	8003b34 <LedOn>
}
 800434c:	e022      	b.n	8004394 <TaskLedBlinking+0x80>
		switch (TaskState(Tab))
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f7ff fc92 	bl	8003c78 <TaskState>
 8004354:	4603      	mov	r3, r0
 8004356:	2b01      	cmp	r3, #1
 8004358:	d002      	beq.n	8004360 <TaskLedBlinking+0x4c>
 800435a:	2b02      	cmp	r3, #2
 800435c:	d00d      	beq.n	800437a <TaskLedBlinking+0x66>
			break;
 800435e:	e019      	b.n	8004394 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR0], TabGen[LEDV0], TabGen[LEDB0], TabGen);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	33c0      	adds	r3, #192	; 0xc0
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	33c4      	adds	r3, #196	; 0xc4
 800436a:	6819      	ldr	r1, [r3, #0]
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	33c8      	adds	r3, #200	; 0xc8
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	f7ff fbde 	bl	8003b34 <LedOn>
			break;
 8004378:	e00c      	b.n	8004394 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR], TabGen[LEDV], TabGen[LEDB], TabGen);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	33b4      	adds	r3, #180	; 0xb4
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	33b8      	adds	r3, #184	; 0xb8
 8004384:	6819      	ldr	r1, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	33bc      	adds	r3, #188	; 0xbc
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f7ff fbd1 	bl	8003b34 <LedOn>
			break;
 8004392:	bf00      	nop
}
 8004394:	bf00      	nop
 8004396:	3708      	adds	r7, #8
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <TaskUpdateUpperLed>:

void TaskUpdateUpperLed(uint32_t Tab[], int TabGen[])
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]

	switch (TaskState(Tab))
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff fc66 	bl	8003c78 <TaskState>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	f040 80b5 	bne.w	800451e <TaskUpdateUpperLed+0x182>
	{
	case 1:
		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	33ac      	adds	r3, #172	; 0xac
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d004      	beq.n	80043c8 <TaskUpdateUpperLed+0x2c>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	33b0      	adds	r3, #176	; 0xb0
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d11c      	bne.n	8004402 <TaskUpdateUpperLed+0x66>
				&& (TabGen[BAT_VALUE] < 100))
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	33a8      	adds	r3, #168	; 0xa8
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	2b63      	cmp	r3, #99	; 0x63
 80043d0:	dc17      	bgt.n	8004402 <TaskUpdateUpperLed+0x66>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 50;
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	33b4      	adds	r3, #180	; 0xb4
 80043d6:	2232      	movs	r2, #50	; 0x32
 80043d8:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 0;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	33b8      	adds	r3, #184	; 0xb8
 80043de:	2200      	movs	r2, #0
 80043e0:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	33bc      	adds	r3, #188	; 0xbc
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 50;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	33c0      	adds	r3, #192	; 0xc0
 80043ee:	2232      	movs	r2, #50	; 0x32
 80043f0:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	33c4      	adds	r3, #196	; 0xc4
 80043f6:	2200      	movs	r2, #0
 80043f8:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	33c8      	adds	r3, #200	; 0xc8
 80043fe:	2200      	movs	r2, #0
 8004400:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
				TabGen[LEDB0] = 0;
			}
		}

		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	33ac      	adds	r3, #172	; 0xac
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d004      	beq.n	8004416 <TaskUpdateUpperLed+0x7a>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	33b0      	adds	r3, #176	; 0xb0
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d11c      	bne.n	8004450 <TaskUpdateUpperLed+0xb4>
				&& (TabGen[BAT_VALUE] == 100))
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	33a8      	adds	r3, #168	; 0xa8
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b64      	cmp	r3, #100	; 0x64
 800441e:	d117      	bne.n	8004450 <TaskUpdateUpperLed+0xb4>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 0;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	33b4      	adds	r3, #180	; 0xb4
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 50;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	33b8      	adds	r3, #184	; 0xb8
 800442c:	2232      	movs	r2, #50	; 0x32
 800442e:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	33bc      	adds	r3, #188	; 0xbc
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 0;
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	33c0      	adds	r3, #192	; 0xc0
 800443c:	2200      	movs	r2, #0
 800443e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 50;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	33c4      	adds	r3, #196	; 0xc4
 8004444:	2232      	movs	r2, #50	; 0x32
 8004446:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	33c8      	adds	r3, #200	; 0xc8
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 250;
				TabGen[LEDB0] = 0;
			}
		}

		if ((TabGen[CHARGEC] == 0) && (TabGen[EOC] == 0))
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	33ac      	adds	r3, #172	; 0xac
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d163      	bne.n	8004522 <TaskUpdateUpperLed+0x186>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	33b0      	adds	r3, #176	; 0xb0
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d15e      	bne.n	8004522 <TaskUpdateUpperLed+0x186>
		{
			if ((TabGen[BAT_VALUE] >= 50))
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	33a8      	adds	r3, #168	; 0xa8
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	2b31      	cmp	r3, #49	; 0x31
 800446c:	dd17      	ble.n	800449e <TaskUpdateUpperLed+0x102>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 0;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	33b4      	adds	r3, #180	; 0xb4
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 50;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	33b8      	adds	r3, #184	; 0xb8
 800447a:	2232      	movs	r2, #50	; 0x32
 800447c:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	33bc      	adds	r3, #188	; 0xbc
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	33c0      	adds	r3, #192	; 0xc0
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	33c4      	adds	r3, #196	; 0xc4
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	33c8      	adds	r3, #200	; 0xc8
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if ((TabGen[BAT_VALUE] < 50) && (TabGen[BAT_VALUE] >= 20))
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	33a8      	adds	r3, #168	; 0xa8
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2b31      	cmp	r3, #49	; 0x31
 80044a6:	dc1c      	bgt.n	80044e2 <TaskUpdateUpperLed+0x146>
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	33a8      	adds	r3, #168	; 0xa8
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b13      	cmp	r3, #19
 80044b0:	dd17      	ble.n	80044e2 <TaskUpdateUpperLed+0x146>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 127;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	33b4      	adds	r3, #180	; 0xb4
 80044b6:	227f      	movs	r2, #127	; 0x7f
 80044b8:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 10;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	33b8      	adds	r3, #184	; 0xb8
 80044be:	220a      	movs	r2, #10
 80044c0:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	33bc      	adds	r3, #188	; 0xbc
 80044c6:	2200      	movs	r2, #0
 80044c8:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	33c0      	adds	r3, #192	; 0xc0
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	33c4      	adds	r3, #196	; 0xc4
 80044d6:	2200      	movs	r2, #0
 80044d8:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	33c8      	adds	r3, #200	; 0xc8
 80044de:	2200      	movs	r2, #0
 80044e0:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if (TabGen[BAT_VALUE] < 20)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	33a8      	adds	r3, #168	; 0xa8
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b13      	cmp	r3, #19
 80044ea:	dc1a      	bgt.n	8004522 <TaskUpdateUpperLed+0x186>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 100;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	33b4      	adds	r3, #180	; 0xb4
 80044f0:	2264      	movs	r2, #100	; 0x64
 80044f2:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 0;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	33b8      	adds	r3, #184	; 0xb8
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	33bc      	adds	r3, #188	; 0xbc
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	33c0      	adds	r3, #192	; 0xc0
 8004508:	2200      	movs	r2, #0
 800450a:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	33c4      	adds	r3, #196	; 0xc4
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	33c8      	adds	r3, #200	; 0xc8
 8004518:	2200      	movs	r2, #0
 800451a:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
				}
			}
		}

		break;
 800451c:	e001      	b.n	8004522 <TaskUpdateUpperLed+0x186>

	default:
		break;
 800451e:	bf00      	nop
 8004520:	e000      	b.n	8004524 <TaskUpdateUpperLed+0x188>
		break;
 8004522:	bf00      	nop
	}
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <TaskCharger>:
//		break;
//	}
//}

void TaskCharger(int TabGen[])
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	60fb      	str	r3, [r7, #12]
	int bmsCharge = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	60bb      	str	r3, [r7, #8]
	//*bmsEOC_out = InEOC();
	//*bmsCharge_out = InCHG();

	// by I2C

	if (TabGen[LOCK_I2C1] == 0) // I2C available
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	33ec      	adds	r3, #236	; 0xec
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d10f      	bne.n	8004566 <TaskCharger+0x3a>
	{
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	33ec      	adds	r3, #236	; 0xec
 800454a:	2201      	movs	r2, #1
 800454c:	601a      	str	r2, [r3, #0]

		//HAL_Delay(1);
		chargerRead(&bmsEOC, &bmsCharge, TabGen);
 800454e:	f107 0108 	add.w	r1, r7, #8
 8004552:	f107 030c 	add.w	r3, r7, #12
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe f915 	bl	8002788 <chargerRead>
		//HAL_Delay(1);

		TabGen[LOCK_I2C1] = 0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	33ec      	adds	r3, #236	; 0xec
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
	}

	TabGen[EOC]		= bmsEOC;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	33b0      	adds	r3, #176	; 0xb0
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	601a      	str	r2, [r3, #0]
	TabGen[CHARGEC] = bmsCharge;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	33ac      	adds	r3, #172	; 0xac
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	601a      	str	r2, [r3, #0]

}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <TaskReadBat>:
//		break;
//	} 
//}

void TaskReadBat(int TabGen[])
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
	int percent;

	ReadBat(&percent, 1, 1, TabGen);
 8004586:	f107 000c 	add.w	r0, r7, #12
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	2101      	movs	r1, #1
 8004590:	f7fe f936 	bl	8002800 <ReadBat>
	TabGen[BAT_VALUE] = percent;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	33a8      	adds	r3, #168	; 0xa8
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]
}
 800459c:	bf00      	nop
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <TaskExtButton>:

extern uint32_t low_bat_shutdown;

void TaskExtButton(int TabGen[])
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]

	int i = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
	int butOn = 1;
 80045b0:	2301      	movs	r3, #1
 80045b2:	60bb      	str	r3, [r7, #8]

	if ((TabGen[NS_ON] > 30 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)) // >3s
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3358      	adds	r3, #88	; 0x58
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b1e      	cmp	r3, #30
 80045bc:	dc05      	bgt.n	80045ca <TaskExtButton+0x26>
 80045be:	4ba3      	ldr	r3, [pc, #652]	; (800484c <TaskExtButton+0x2a8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4aa3      	ldr	r2, [pc, #652]	; (8004850 <TaskExtButton+0x2ac>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	f240 813c 	bls.w	8004842 <TaskExtButton+0x29e>
	{
		PowerVib(100);
 80045ca:	2064      	movs	r0, #100	; 0x64
 80045cc:	f7fe f8ca 	bl	8002764 <PowerVib>

//		ScreenMessExt3s();
		display_wait(1);
 80045d0:	2001      	movs	r0, #1
 80045d2:	f7fd fde7 	bl	80021a4 <display_wait>

		i = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80045da:	e00f      	b.n	80045fc <TaskExtButton+0x58>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80045dc:	200a      	movs	r0, #10
 80045de:	f005 ff47 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 80045e2:	f7fe ff99 	bl	8003518 <InOn>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d102      	bne.n	80045f2 <TaskExtButton+0x4e>
			{
				butOn = 1;
 80045ec:	2301      	movs	r3, #1
 80045ee:	60bb      	str	r3, [r7, #8]
 80045f0:	e001      	b.n	80045f6 <TaskExtButton+0x52>
			}
			else
			{
				butOn = 0;
 80045f2:	2300      	movs	r3, #0
 80045f4:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b31      	cmp	r3, #49	; 0x31
 8004600:	dc07      	bgt.n	8004612 <TaskExtButton+0x6e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d0e9      	beq.n	80045dc <TaskExtButton+0x38>
 8004608:	4b90      	ldr	r3, [pc, #576]	; (800484c <TaskExtButton+0x2a8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a90      	ldr	r2, [pc, #576]	; (8004850 <TaskExtButton+0x2ac>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d8e4      	bhi.n	80045dc <TaskExtButton+0x38>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b01      	cmp	r3, #1
 8004616:	d004      	beq.n	8004622 <TaskExtButton+0x7e>
 8004618:	4b8c      	ldr	r3, [pc, #560]	; (800484c <TaskExtButton+0x2a8>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a8c      	ldr	r2, [pc, #560]	; (8004850 <TaskExtButton+0x2ac>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d902      	bls.n	8004628 <TaskExtButton+0x84>
		{
			//ScreenMessExt2s();
			display_wait(2);
 8004622:	2002      	movs	r0, #2
 8004624:	f7fd fdbe 	bl	80021a4 <display_wait>

		}
		i = 0;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800462c:	e00f      	b.n	800464e <TaskExtButton+0xaa>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 800462e:	200a      	movs	r0, #10
 8004630:	f005 ff1e 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 8004634:	f7fe ff70 	bl	8003518 <InOn>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d102      	bne.n	8004644 <TaskExtButton+0xa0>
			{
				butOn = 1;
 800463e:	2301      	movs	r3, #1
 8004640:	60bb      	str	r3, [r7, #8]
 8004642:	e001      	b.n	8004648 <TaskExtButton+0xa4>
			}
			else
			{
				butOn = 0;
 8004644:	2300      	movs	r3, #0
 8004646:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2b31      	cmp	r3, #49	; 0x31
 8004652:	dc07      	bgt.n	8004664 <TaskExtButton+0xc0>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e9      	bne.n	800462e <TaskExtButton+0x8a>
 800465a:	4b7c      	ldr	r3, [pc, #496]	; (800484c <TaskExtButton+0x2a8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7c      	ldr	r2, [pc, #496]	; (8004850 <TaskExtButton+0x2ac>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d8e4      	bhi.n	800462e <TaskExtButton+0x8a>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d004      	beq.n	8004674 <TaskExtButton+0xd0>
 800466a:	4b78      	ldr	r3, [pc, #480]	; (800484c <TaskExtButton+0x2a8>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a78      	ldr	r2, [pc, #480]	; (8004850 <TaskExtButton+0x2ac>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d902      	bls.n	800467a <TaskExtButton+0xd6>
		{
			//ScreenMessExt1s();
			display_wait(3);
 8004674:	2003      	movs	r0, #3
 8004676:	f7fd fd95 	bl	80021a4 <display_wait>
		}
		i = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800467e:	e00f      	b.n	80046a0 <TaskExtButton+0xfc>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8004680:	200a      	movs	r0, #10
 8004682:	f005 fef5 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 8004686:	f7fe ff47 	bl	8003518 <InOn>
 800468a:	4603      	mov	r3, r0
 800468c:	2b01      	cmp	r3, #1
 800468e:	d102      	bne.n	8004696 <TaskExtButton+0xf2>
			{
				butOn = 1;
 8004690:	2301      	movs	r3, #1
 8004692:	60bb      	str	r3, [r7, #8]
 8004694:	e001      	b.n	800469a <TaskExtButton+0xf6>
			}
			else
			{
				butOn = 0;
 8004696:	2300      	movs	r3, #0
 8004698:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b31      	cmp	r3, #49	; 0x31
 80046a4:	dc07      	bgt.n	80046b6 <TaskExtButton+0x112>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d0e9      	beq.n	8004680 <TaskExtButton+0xdc>
 80046ac:	4b67      	ldr	r3, [pc, #412]	; (800484c <TaskExtButton+0x2a8>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a67      	ldr	r2, [pc, #412]	; (8004850 <TaskExtButton+0x2ac>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d8e4      	bhi.n	8004680 <TaskExtButton+0xdc>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d004      	beq.n	80046c6 <TaskExtButton+0x122>
 80046bc:	4b63      	ldr	r3, [pc, #396]	; (800484c <TaskExtButton+0x2a8>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a63      	ldr	r2, [pc, #396]	; (8004850 <TaskExtButton+0x2ac>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d902      	bls.n	80046cc <TaskExtButton+0x128>
		{
			//ScreenMessExt1s();
			display_wait(4);
 80046c6:	2004      	movs	r0, #4
 80046c8:	f7fd fd6c 	bl	80021a4 <display_wait>
		}
		i = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80046d0:	e00f      	b.n	80046f2 <TaskExtButton+0x14e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80046d2:	200a      	movs	r0, #10
 80046d4:	f005 fecc 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 80046d8:	f7fe ff1e 	bl	8003518 <InOn>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d102      	bne.n	80046e8 <TaskExtButton+0x144>
			{
				butOn = 1;
 80046e2:	2301      	movs	r3, #1
 80046e4:	60bb      	str	r3, [r7, #8]
 80046e6:	e001      	b.n	80046ec <TaskExtButton+0x148>
			}
			else
			{
				butOn = 0;
 80046e8:	2300      	movs	r3, #0
 80046ea:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3301      	adds	r3, #1
 80046f0:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b31      	cmp	r3, #49	; 0x31
 80046f6:	dc07      	bgt.n	8004708 <TaskExtButton+0x164>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d0e9      	beq.n	80046d2 <TaskExtButton+0x12e>
 80046fe:	4b53      	ldr	r3, [pc, #332]	; (800484c <TaskExtButton+0x2a8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a53      	ldr	r2, [pc, #332]	; (8004850 <TaskExtButton+0x2ac>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d8e4      	bhi.n	80046d2 <TaskExtButton+0x12e>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d004      	beq.n	8004718 <TaskExtButton+0x174>
 800470e:	4b4f      	ldr	r3, [pc, #316]	; (800484c <TaskExtButton+0x2a8>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a4f      	ldr	r2, [pc, #316]	; (8004850 <TaskExtButton+0x2ac>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d902      	bls.n	800471e <TaskExtButton+0x17a>
		{
			//ScreenMessExt1s();
			display_wait(5);
 8004718:	2005      	movs	r0, #5
 800471a:	f7fd fd43 	bl	80021a4 <display_wait>
		}
		i = 0;
 800471e:	2300      	movs	r3, #0
 8004720:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004722:	e00f      	b.n	8004744 <TaskExtButton+0x1a0>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8004724:	200a      	movs	r0, #10
 8004726:	f005 fea3 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 800472a:	f7fe fef5 	bl	8003518 <InOn>
 800472e:	4603      	mov	r3, r0
 8004730:	2b01      	cmp	r3, #1
 8004732:	d102      	bne.n	800473a <TaskExtButton+0x196>
			{
				butOn = 1;
 8004734:	2301      	movs	r3, #1
 8004736:	60bb      	str	r3, [r7, #8]
 8004738:	e001      	b.n	800473e <TaskExtButton+0x19a>
			}
			else
			{
				butOn = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	3301      	adds	r3, #1
 8004742:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b31      	cmp	r3, #49	; 0x31
 8004748:	dc07      	bgt.n	800475a <TaskExtButton+0x1b6>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b01      	cmp	r3, #1
 800474e:	d0e9      	beq.n	8004724 <TaskExtButton+0x180>
 8004750:	4b3e      	ldr	r3, [pc, #248]	; (800484c <TaskExtButton+0x2a8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a3e      	ldr	r2, [pc, #248]	; (8004850 <TaskExtButton+0x2ac>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d8e4      	bhi.n	8004724 <TaskExtButton+0x180>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d004      	beq.n	800476a <TaskExtButton+0x1c6>
 8004760:	4b3a      	ldr	r3, [pc, #232]	; (800484c <TaskExtButton+0x2a8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a3a      	ldr	r2, [pc, #232]	; (8004850 <TaskExtButton+0x2ac>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d902      	bls.n	8004770 <TaskExtButton+0x1cc>
		{
			//ScreenMessExt1s();
			display_wait(6);
 800476a:	2006      	movs	r0, #6
 800476c:	f7fd fd1a 	bl	80021a4 <display_wait>
		}
		i = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004774:	e00f      	b.n	8004796 <TaskExtButton+0x1f2>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8004776:	200a      	movs	r0, #10
 8004778:	f005 fe7a 	bl	800a470 <HAL_Delay>
			if ((InOn() == 1))
 800477c:	f7fe fecc 	bl	8003518 <InOn>
 8004780:	4603      	mov	r3, r0
 8004782:	2b01      	cmp	r3, #1
 8004784:	d102      	bne.n	800478c <TaskExtButton+0x1e8>
			{
				butOn = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	e001      	b.n	8004790 <TaskExtButton+0x1ec>
			}
			else
			{
				butOn = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3301      	adds	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2b31      	cmp	r3, #49	; 0x31
 800479a:	dc07      	bgt.n	80047ac <TaskExtButton+0x208>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d0e9      	beq.n	8004776 <TaskExtButton+0x1d2>
 80047a2:	4b2a      	ldr	r3, [pc, #168]	; (800484c <TaskExtButton+0x2a8>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a2a      	ldr	r2, [pc, #168]	; (8004850 <TaskExtButton+0x2ac>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d8e4      	bhi.n	8004776 <TaskExtButton+0x1d2>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d004      	beq.n	80047bc <TaskExtButton+0x218>
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <TaskExtButton+0x2a8>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a26      	ldr	r2, [pc, #152]	; (8004850 <TaskExtButton+0x2ac>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d902      	bls.n	80047c2 <TaskExtButton+0x21e>
		{
			//ScreenMessExt1s();
			display_wait(7);
 80047bc:	2007      	movs	r0, #7
 80047be:	f7fd fcf1 	bl	80021a4 <display_wait>
		}
		i = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80047c6:	e007      	b.n	80047d8 <TaskExtButton+0x234>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80047c8:	200a      	movs	r0, #10
 80047ca:	f005 fe51 	bl	800a470 <HAL_Delay>
			//}
			//else
			//{
			//butOn = 0;
			//}
			i = i + 1;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	60fb      	str	r3, [r7, #12]
			butOn = 1; // Even if you stop pressing the ON/OFF button, device will turn off while showing "Extinction"
 80047d4:	2301      	movs	r3, #1
 80047d6:	60bb      	str	r3, [r7, #8]
		while ((i < 50)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b31      	cmp	r3, #49	; 0x31
 80047dc:	dc07      	bgt.n	80047ee <TaskExtButton+0x24a>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d0f1      	beq.n	80047c8 <TaskExtButton+0x224>
 80047e4:	4b19      	ldr	r3, [pc, #100]	; (800484c <TaskExtButton+0x2a8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <TaskExtButton+0x2ac>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d8ec      	bhi.n	80047c8 <TaskExtButton+0x224>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d004      	beq.n	80047fe <TaskExtButton+0x25a>
 80047f4:	4b15      	ldr	r3, [pc, #84]	; (800484c <TaskExtButton+0x2a8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a15      	ldr	r2, [pc, #84]	; (8004850 <TaskExtButton+0x2ac>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d921      	bls.n	8004842 <TaskExtButton+0x29e>
		{
			//ScreenMessExtOnly();
			display_wait(8);
 80047fe:	2008      	movs	r0, #8
 8004800:	f7fd fcd0 	bl	80021a4 <display_wait>

			PowerVib(100);
 8004804:	2064      	movs	r0, #100	; 0x64
 8004806:	f7fd ffad 	bl	8002764 <PowerVib>
			HAL_Delay(500);
 800480a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800480e:	f005 fe2f 	bl	800a470 <HAL_Delay>
			LedOff(TabGen);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff f950 	bl	8003ab8 <LedOff>
			//ScreenMessEmpty();
			display_Print("");
 8004818:	480e      	ldr	r0, [pc, #56]	; (8004854 <TaskExtButton+0x2b0>)
 800481a:	f7fd fe15 	bl	8002448 <display_Print>
			//HAL_Delay(2000);
			TabGen[STOPDEVICE] = 1;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	33cc      	adds	r3, #204	; 0xcc
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]
			//  HAL_Delay(1);
			//  OutDone(1);
			//  HAL_Delay(1);
			//  OutDone(0);
			//  HAL_Delay(1000);
			HAL_Delay(2000);
 8004826:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800482a:	f005 fe21 	bl	800a470 <HAL_Delay>
			OutDone1(1); //Start Powersave part 1
 800482e:	2001      	movs	r0, #1
 8004830:	f7fe fd7a 	bl	8003328 <OutDone1>
			OutDone2(0); //Start Powersave part 2
 8004834:	2000      	movs	r0, #0
 8004836:	f7fe fd8f 	bl	8003358 <OutDone2>
			//powerSave = 1;
			HAL_Delay(1000);
 800483a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800483e:	f005 fe17 	bl	800a470 <HAL_Delay>
		}
	}
}
 8004842:	bf00      	nop
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	20000b64 	.word	0x20000b64
 8004850:	000186a0 	.word	0x000186a0
 8004854:	0801b008 	.word	0x0801b008

08004858 <TaskFallTest>:

void TaskFallTest(int TabAlert[], int TabGen[])
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]

	int fallBrutal = 0;
 8004862:	2300      	movs	r3, #0
 8004864:	60fb      	str	r3, [r7, #12]

	if ((TabGen[FALL_DELAY] == 0) && (TabAlert[ALERT_FALL] == 0)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	3328      	adds	r3, #40	; 0x28
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d14a      	bne.n	8004906 <TaskFallTest+0xae>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3334      	adds	r3, #52	; 0x34
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d145      	bne.n	8004906 <TaskFallTest+0xae>
			&& (TabAlert[ALERT_MALAISE] == 0))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3308      	adds	r3, #8
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d140      	bne.n	8004906 <TaskFallTest+0xae>
	{
		if (TabGen[FALL_COND_3] == 1)
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	3378      	adds	r3, #120	; 0x78
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d112      	bne.n	80048b4 <TaskFallTest+0x5c>
		{
			TabGen[FALL_COND_3] = 0;
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	3378      	adds	r3, #120	; 0x78
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
			uint8_t z = 0;
 8004896:	2300      	movs	r3, #0
 8004898:	72fb      	strb	r3, [r7, #11]
			z = test_chute(ar_full, y_full);
 800489a:	492a      	ldr	r1, [pc, #168]	; (8004944 <TaskFallTest+0xec>)
 800489c:	482a      	ldr	r0, [pc, #168]	; (8004948 <TaskFallTest+0xf0>)
 800489e:	f7fe fadd 	bl	8002e5c <test_chute>
 80048a2:	4603      	mov	r3, r0
 80048a4:	72fb      	strb	r3, [r7, #11]
//			for ( int k = 0; k < 400 ; k++) // on teste si on a un grand pic qui va caract�riser surement une chute pas besoin de v�rifier l'angle
//			{
//				if (ar_full[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			if (z == 1)
 80048a6:	7afb      	ldrb	r3, [r7, #11]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d103      	bne.n	80048b4 <TaskFallTest+0x5c>
			{
				TabGen[FALL_DELAY] = 1;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	3328      	adds	r3, #40	; 0x28
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
			}
		}
		if (TabGen[FALL_COND_4] == 1)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	337c      	adds	r3, #124	; 0x7c
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d112      	bne.n	80048e4 <TaskFallTest+0x8c>
		{
			uint8_t z = 0;
 80048be:	2300      	movs	r3, #0
 80048c0:	72bb      	strb	r3, [r7, #10]
			z = test_chute(arr, yy);
 80048c2:	4922      	ldr	r1, [pc, #136]	; (800494c <TaskFallTest+0xf4>)
 80048c4:	4822      	ldr	r0, [pc, #136]	; (8004950 <TaskFallTest+0xf8>)
 80048c6:	f7fe fac9 	bl	8002e5c <test_chute>
 80048ca:	4603      	mov	r3, r0
 80048cc:	72bb      	strb	r3, [r7, #10]
//			{
//				if (arr[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			//z= test_chute(ar_full,y_full);
			if (z == 1)
 80048ce:	7abb      	ldrb	r3, [r7, #10]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d103      	bne.n	80048dc <TaskFallTest+0x84>
			{
				TabGen[FALL_DELAY] = 1;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	3328      	adds	r3, #40	; 0x28
 80048d8:	2201      	movs	r2, #1
 80048da:	601a      	str	r2, [r3, #0]
			}
			TabGen[FALL_COND_4] = 0;
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	337c      	adds	r3, #124	; 0x7c
 80048e0:	2200      	movs	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
		}
		if (fallBrutal == 1)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d10d      	bne.n	8004906 <TaskFallTest+0xae>
		{
			fallBrutal = 0;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
			TabAlert[ALERT_FALL] = 1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3334      	adds	r3, #52	; 0x34
 80048f2:	2201      	movs	r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	332c      	adds	r3, #44	; 0x2c
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	3328      	adds	r3, #40	; 0x28
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[FALL_DELAY] == 1) && (TabAlert[ALERT_FALL] == 0))
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	3328      	adds	r3, #40	; 0x28
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d115      	bne.n	800493c <TaskFallTest+0xe4>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	3334      	adds	r3, #52	; 0x34
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d110      	bne.n	800493c <TaskFallTest+0xe4>
	{
		if (TabGen[FALL_UP_DELAY] == 1)
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	332c      	adds	r3, #44	; 0x2c
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d10b      	bne.n	800493c <TaskFallTest+0xe4>
		{
			TabAlert[ALERT_FALL] = 1;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	3334      	adds	r3, #52	; 0x34
 8004928:	2201      	movs	r2, #1
 800492a:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	332c      	adds	r3, #44	; 0x2c
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	3328      	adds	r3, #40	; 0x28
 8004938:	2200      	movs	r2, #0
 800493a:	601a      	str	r2, [r3, #0]
		}
	}

}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20003140 	.word	0x20003140
 8004948:	200028a4 	.word	0x200028a4
 800494c:	20002f64 	.word	0x20002f64
 8004950:	2000222c 	.word	0x2000222c

08004954 <TaskAlertAll>:

void TaskAlertAll(int TabAlert[], int TabGen[], uint32_t TabAlertAll[],
		float TabFloatValue[]) // int *sosRelach, uint32_t *OnLength, uint32_t *On_nb_sample, int *sigSend, char lcd_buf1[], char lcd_buf2[], uint32_t  *nS_malaise, uint32_t  *nS_immo, uint32_t  *nS_fall, int *h2sAlerte, int *COAlerte, int *sos, int *fallmalaise, int *send_mess, uint32_t *SOS_nb_sample, uint32_t *alert_t0, uint32_t *alert_duration, uint32_t *sosLength, int *malaise, int *fall, int *alert_on, int *alert_on_previous, int *gps_on, int *buz_on, int *ledAlert)
{
 8004954:	b590      	push	{r4, r7, lr}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
//#define NB_GAZ_END    11

//uint8_t charuart[11];
	uint32_t millis2;

	millis2 = HAL_GetTick();
 8004962:	f005 fd79 	bl	800a458 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

//char bufferSig[30];

	if (TabGen[ALERT_ON] == 0)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 80fe 	bne.w	8004b6e <TaskAlertAll+0x21a>
	{
		if (TabAlert[ALERT_SOS] == 1)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3304      	adds	r3, #4
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b01      	cmp	r3, #1
 800497a:	d104      	bne.n	8004986 <TaskAlertAll+0x32>
		{
			TabGen[TYPE_ALERT] = ALERT_SOS;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	3390      	adds	r3, #144	; 0x90
 8004980:	2201      	movs	r2, #1
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e0f3      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_FALL] == 1
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3334      	adds	r3, #52	; 0x34
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d113      	bne.n	80049b8 <TaskAlertAll+0x64>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004990:	f005 fd62 	bl	800a458 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3308      	adds	r3, #8
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d908      	bls.n	80049b8 <TaskAlertAll+0x64>
		{
			TabGen[TYPE_ALERT] = ALERT_FALL;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	3390      	adds	r3, #144	; 0x90
 80049aa:	220d      	movs	r2, #13
 80049ac:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3308      	adds	r3, #8
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	e0da      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_MALAISE] == 1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	3308      	adds	r3, #8
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d113      	bne.n	80049ea <TaskAlertAll+0x96>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 80049c2:	f005 fd49 	bl	800a458 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3308      	adds	r3, #8
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	1ad3      	subs	r3, r2, r3
 80049d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d908      	bls.n	80049ea <TaskAlertAll+0x96>
		{
			TabGen[TYPE_ALERT] = ALERT_MALAISE;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	3390      	adds	r3, #144	; 0x90
 80049dc:	2202      	movs	r2, #2
 80049de:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3308      	adds	r3, #8
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e0c1      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_EX] == 1)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3330      	adds	r3, #48	; 0x30
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d113      	bne.n	8004a1c <TaskAlertAll+0xc8>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 80049f4:	f005 fd30 	bl	800a458 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3308      	adds	r3, #8
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d908      	bls.n	8004a1c <TaskAlertAll+0xc8>
		{
			TabGen[TYPE_ALERT] = ALERT_EX;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	3390      	adds	r3, #144	; 0x90
 8004a0e:	220c      	movs	r2, #12
 8004a10:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3308      	adds	r3, #8
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	601a      	str	r2, [r3, #0]
 8004a1a:	e0a8      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_O2] == 1)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	3324      	adds	r3, #36	; 0x24
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d113      	bne.n	8004a4e <TaskAlertAll+0xfa>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004a26:	f005 fd17 	bl	800a458 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3308      	adds	r3, #8
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d908      	bls.n	8004a4e <TaskAlertAll+0xfa>
		{
			TabGen[TYPE_ALERT] = ALERT_O2;
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	3390      	adds	r3, #144	; 0x90
 8004a40:	2209      	movs	r2, #9
 8004a42:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3308      	adds	r3, #8
 8004a48:	693a      	ldr	r2, [r7, #16]
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	e08f      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVME] == 1)
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	3328      	adds	r3, #40	; 0x28
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d113      	bne.n	8004a80 <TaskAlertAll+0x12c>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004a58:	f005 fcfe 	bl	800a458 <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3308      	adds	r3, #8
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d908      	bls.n	8004a80 <TaskAlertAll+0x12c>
		{
			TabGen[TYPE_ALERT] = ALERT_COVME;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	3390      	adds	r3, #144	; 0x90
 8004a72:	220a      	movs	r2, #10
 8004a74:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	3308      	adds	r3, #8
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e076      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVME] == 1)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	331c      	adds	r3, #28
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d113      	bne.n	8004ab2 <TaskAlertAll+0x15e>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004a8a:	f005 fce5 	bl	800a458 <HAL_GetTick>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3308      	adds	r3, #8
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d908      	bls.n	8004ab2 <TaskAlertAll+0x15e>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVME;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3390      	adds	r3, #144	; 0x90
 8004aa4:	2207      	movs	r2, #7
 8004aa6:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	693a      	ldr	r2, [r7, #16]
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	e05d      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVLCT] == 1)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	332c      	adds	r3, #44	; 0x2c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d113      	bne.n	8004ae4 <TaskAlertAll+0x190>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004abc:	f005 fccc 	bl	800a458 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d908      	bls.n	8004ae4 <TaskAlertAll+0x190>
		{
			TabGen[TYPE_ALERT] = ALERT_COVLCT;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3390      	adds	r3, #144	; 0x90
 8004ad6:	220b      	movs	r2, #11
 8004ad8:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3308      	adds	r3, #8
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	e044      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVLCT] == 1)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3320      	adds	r3, #32
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d113      	bne.n	8004b16 <TaskAlertAll+0x1c2>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004aee:	f005 fcb3 	bl	800a458 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3308      	adds	r3, #8
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d908      	bls.n	8004b16 <TaskAlertAll+0x1c2>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVLCT;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	3390      	adds	r3, #144	; 0x90
 8004b08:	2208      	movs	r2, #8
 8004b0a:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3308      	adds	r3, #8
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	601a      	str	r2, [r3, #0]
 8004b14:	e02b      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_SONO] == 1)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	330c      	adds	r3, #12
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d104      	bne.n	8004b2a <TaskAlertAll+0x1d6>
		{
			TabGen[TYPE_ALERT] = ALERT_SONO;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	3390      	adds	r3, #144	; 0x90
 8004b24:	2203      	movs	r2, #3
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	e021      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_COL] == 1)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	3310      	adds	r3, #16
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d104      	bne.n	8004b3e <TaskAlertAll+0x1ea>
		{
			TabGen[TYPE_ALERT] = ALERT_COL;
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	3390      	adds	r3, #144	; 0x90
 8004b38:	2204      	movs	r2, #4
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	e017      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_DIST] == 1)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3314      	adds	r3, #20
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d104      	bne.n	8004b52 <TaskAlertAll+0x1fe>
		{
			TabGen[TYPE_ALERT] = ALERT_DIST;
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	3390      	adds	r3, #144	; 0x90
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	601a      	str	r2, [r3, #0]
 8004b50:	e00d      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_LOWBAT] == 1)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3318      	adds	r3, #24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d104      	bne.n	8004b66 <TaskAlertAll+0x212>
		{
			TabGen[TYPE_ALERT] = ALERT_LOWBAT;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3390      	adds	r3, #144	; 0x90
 8004b60:	2206      	movs	r2, #6
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e003      	b.n	8004b6e <TaskAlertAll+0x21a>
		}
		else
		{
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	3390      	adds	r3, #144	; 0x90
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[TYPE_ALERT] != NONE_ALERT) && (TabGen[ALERT_ON] == 0))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	3390      	adds	r3, #144	; 0x90
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d077      	beq.n	8004c68 <TaskAlertAll+0x314>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d173      	bne.n	8004c68 <TaskAlertAll+0x314>
	{
		TabAlertAll[ALL_TIM_1] = HAL_GetTick(); // beg. timer
 8004b80:	f005 fc6a 	bl	800a458 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_ON] = 1;
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	601a      	str	r2, [r3, #0]
		TabGen[GPS_ON] = 1;
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3304      	adds	r3, #4
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
		// Big Led Blinking (major)
		if ((TabAlert[ALERT_FALL] == 1) || (TabAlert[ALERT_MALAISE] == 1)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3334      	adds	r3, #52	; 0x34
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d027      	beq.n	8004bf2 <TaskAlertAll+0x29e>
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d022      	beq.n	8004bf2 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_SOS] == 1) || (TabAlert[ALERT_EX] == 1)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d01d      	beq.n	8004bf2 <TaskAlertAll+0x29e>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	3330      	adds	r3, #48	; 0x30
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d018      	beq.n	8004bf2 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_O2] == 1) || (TabAlert[ALERT_COVLCT] == 1)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b01      	cmp	r3, #1
 8004bc8:	d013      	beq.n	8004bf2 <TaskAlertAll+0x29e>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	332c      	adds	r3, #44	; 0x2c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d00e      	beq.n	8004bf2 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_H2SVLCT] == 1) || (TabAlert[ALERT_COL] == 1)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	3320      	adds	r3, #32
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d009      	beq.n	8004bf2 <TaskAlertAll+0x29e>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3310      	adds	r3, #16
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d004      	beq.n	8004bf2 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_DIST])) // Big Alert
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	3314      	adds	r3, #20
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d013      	beq.n	8004c1a <TaskAlertAll+0x2c6>
		{
			TabGen[BUZ_ON_FAST] = 1;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_FAST] = 1;
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	2201      	movs	r2, #1
 8004c00:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_FAST] = 1;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	3310      	adds	r3, #16
 8004c06:	2201      	movs	r2, #1
 8004c08:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 8004c0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c0e:	2203      	movs	r2, #3
 8004c10:	495a      	ldr	r1, [pc, #360]	; (8004d7c <TaskAlertAll+0x428>)
 8004c12:	485b      	ldr	r0, [pc, #364]	; (8004d80 <TaskAlertAll+0x42c>)
 8004c14:	f00c fcae 	bl	8011574 <HAL_UART_Transmit>
 8004c18:	e026      	b.n	8004c68 <TaskAlertAll+0x314>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

		}
		else if ((TabAlert[ALERT_COVME] == 1) || (TabAlert[ALERT_H2SVME] == 1)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	3328      	adds	r3, #40	; 0x28
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d00e      	beq.n	8004c42 <TaskAlertAll+0x2ee>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	331c      	adds	r3, #28
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d009      	beq.n	8004c42 <TaskAlertAll+0x2ee>
				|| (TabAlert[ALERT_SONO] == 1) || (TabAlert[ALERT_LOWBAT]))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	330c      	adds	r3, #12
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d004      	beq.n	8004c42 <TaskAlertAll+0x2ee>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3318      	adds	r3, #24
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d012      	beq.n	8004c68 <TaskAlertAll+0x314>
		{
			TabGen[BUZ_ON_SLOW] = 1;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	3314      	adds	r3, #20
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_SLOW] = 1;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	3318      	adds	r3, #24
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_SLOW] = 1;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	331c      	adds	r3, #28
 8004c56:	2201      	movs	r2, #1
 8004c58:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 8004c5a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004c5e:	2203      	movs	r2, #3
 8004c60:	4946      	ldr	r1, [pc, #280]	; (8004d7c <TaskAlertAll+0x428>)
 8004c62:	4847      	ldr	r0, [pc, #284]	; (8004d80 <TaskAlertAll+0x42c>)
 8004c64:	f00c fc86 	bl	8011574 <HAL_UART_Transmit>

		}

	}

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 8004c68:	2300      	movs	r3, #0
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e008      	b.n	8004c80 <TaskAlertAll+0x32c>
	{
		TabAlert[i_fct] = 0;
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4413      	add	r3, r2
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	3301      	adds	r3, #1
 8004c7e:	617b      	str	r3, [r7, #20]
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	2b0d      	cmp	r3, #13
 8004c84:	ddf3      	ble.n	8004c6e <TaskAlertAll+0x31a>
	}

	if (TabGen[ALERT_ON] == 1)  // if Alert Actually
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d172      	bne.n	8004d74 <TaskAlertAll+0x420>
	{
		if (TabGen[SOS_PUSH_LONG] == 1) // if long punch on SOS or ON/off button
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3320      	adds	r3, #32
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d137      	bne.n	8004d08 <TaskAlertAll+0x3b4>
		{
			TabGen[ALERT_ON] = 0;     // clear alert
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	333c      	adds	r3, #60	; 0x3c
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
			TabGen[NS_IMMO] = 0;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	3340      	adds	r3, #64	; 0x40
 8004caa:	2200      	movs	r2, #0
 8004cac:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	3320      	adds	r3, #32
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	3390      	adds	r3, #144	; 0x90
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",sizeof((uint8_t*) "A050B010C1D") - 1, 500); // A periodicité, B fréquence, C on/off
 8004cbe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004cc2:	2203      	movs	r2, #3
 8004cc4:	492f      	ldr	r1, [pc, #188]	; (8004d84 <TaskAlertAll+0x430>)
 8004cc6:	482e      	ldr	r0, [pc, #184]	; (8004d80 <TaskAlertAll+0x42c>)
 8004cc8:	f00c fc54 	bl	8011574 <HAL_UART_Transmit>

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f103 0408 	add.w	r4, r3, #8
 8004cd2:	f005 fbc1 	bl	800a458 <HAL_GetTick>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	6023      	str	r3, [r4, #0]

			TabFloatValue[O2_VALUE] = 21;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4a2a      	ldr	r2, [pc, #168]	; (8004d88 <TaskAlertAll+0x434>)
 8004ce0:	601a      	str	r2, [r3, #0]
			TabFloatValue[CO_VALUE] = 0;
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
			TabFloatValue[EX_VALUE] = 0;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	330c      	adds	r3, #12
 8004cf0:	f04f 0200 	mov.w	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]
			TabFloatValue[H2S_VALUE] = 0;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
			TabFloatValue[DB_VALUE] = 0;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	3310      	adds	r3, #16
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

		}

		if ((HAL_GetTick() - TabAlertAll[ALL_TIM_1]) > (SIGDURATION * 1000)) // if timer to cancel alert is over
 8004d08:	f005 fba6 	bl	800a458 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	f247 5230 	movw	r2, #30000	; 0x7530
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d92b      	bls.n	8004d74 <TaskAlertAll+0x420>
		{
			TabGen[NS_MALAISE] = 0;
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	333c      	adds	r3, #60	; 0x3c
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_PENDING] = 1;
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
			if (LORAP2POK == 1)
			{
				TabGen[LORAP2P_SEND] = 1; // send lora mess
			}

			TabGen[SIG_ALERT] = TabGen[TYPE_ALERT];
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	33e0      	adds	r3, #224	; 0xe0
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004d38:	601a      	str	r2, [r3, #0]

			TabGen[NS_IMMO] = 0;
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	3340      	adds	r3, #64	; 0x40
 8004d3e:	2200      	movs	r2, #0
 8004d40:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_ON] = 0;     // clear alert
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3320      	adds	r3, #32
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3390      	adds	r3, #144	; 0x90
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",
 8004d58:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d5c:	2203      	movs	r2, #3
 8004d5e:	4909      	ldr	r1, [pc, #36]	; (8004d84 <TaskAlertAll+0x430>)
 8004d60:	4807      	ldr	r0, [pc, #28]	; (8004d80 <TaskAlertAll+0x42c>)
 8004d62:	f00c fc07 	bl	8011574 <HAL_UART_Transmit>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f103 0408 	add.w	r4, r3, #8
 8004d6c:	f005 fb74 	bl	800a458 <HAL_GetTick>
 8004d70:	4603      	mov	r3, r0
 8004d72:	6023      	str	r3, [r4, #0]
		}
	}

}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd90      	pop	{r4, r7, pc}
 8004d7c:	0801b00c 	.word	0x0801b00c
 8004d80:	20003408 	.word	0x20003408
 8004d84:	0801b018 	.word	0x0801b018
 8004d88:	41a80000 	.word	0x41a80000

08004d8c <TaskOnScreen>:

extern uint8_t REBOOT_FROM_WATCHDOG;

void TaskOnScreen(int TabGen[], uint32_t *Timer_screen)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
//		display_InitBis();
//		TabGen[SCREENSTATE] = 1;
//		TabGen[SCREENSTATEON] = 0 ;
//	}

	if ((TabGen[RE_ON_SCREEN] == 1) || (TabGen[TYPE_ALERT] != NONE_ALERT))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3350      	adds	r3, #80	; 0x50
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d004      	beq.n	8004daa <TaskOnScreen+0x1e>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3390      	adds	r3, #144	; 0x90
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d016      	beq.n	8004dd8 <TaskOnScreen+0x4c>
	{

		TabGen[RE_ON_SCREEN] = 0;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3350      	adds	r3, #80	; 0x50
 8004dae:	2200      	movs	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
		*Timer_screen = HAL_GetTick() - 1;
 8004db2:	f005 fb51 	bl	800a458 <HAL_GetTick>
 8004db6:	4603      	mov	r3, r0
 8004db8:	1e5a      	subs	r2, r3, #1
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	601a      	str	r2, [r3, #0]
		if (TabGen[SCREENSTATE] == 0)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	33d0      	adds	r3, #208	; 0xd0
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d107      	bne.n	8004dd8 <TaskOnScreen+0x4c>
		{
			ScreenOn();
 8004dc8:	f7fe ff18 	bl	8003bfc <ScreenOn>
			display_InitBis();
 8004dcc:	f7fc fd04 	bl	80017d8 <display_InitBis>
			TabGen[SCREENSTATE] = 1;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	33d0      	adds	r3, #208	; 0xd0
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - *Timer_screen) > (SEC_ONOFF_SCREEN * 1000))
 8004dd8:	f005 fb3e 	bl	800a458 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d905      	bls.n	8004df8 <TaskOnScreen+0x6c>
	{

		ScreenOff();
 8004dec:	f7fe ff1c 	bl	8003c28 <ScreenOff>
		//HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI);  // Enter stop mode for test only
		TabGen[SCREENSTATE] = 0;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	33d0      	adds	r3, #208	; 0xd0
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
	}
}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <TaskGPS>:

void TaskGPS(uint8_t RxI[], int TabGen[], uint32_t TabGpsTimer[],
		float TabFloatValue[])
{
 8004e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e04:	b088      	sub	sp, #32
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	607a      	str	r2, [r7, #4]
 8004e0e:	603b      	str	r3, [r7, #0]

	float lati = 0;
 8004e10:	f04f 0300 	mov.w	r3, #0
 8004e14:	61fb      	str	r3, [r7, #28]
	float longi = 0;
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	61bb      	str	r3, [r7, #24]

	if (GPSOK == 1) // GPS IS ENABLED
	{
		if (TabGen[GPS_ON] == 1)
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	f040 8280 	bne.w	8005328 <TaskGPS+0x528>
		{
//			if ((RxI[0] == '$') && (RxI[1] == 'G') && (RxI[2] == 'N') && (RxI[3] == 'G') && (RxI[4] == 'G') && (RxI[5] == 'A'))
//			{

			if ((RxI[6] == ',') && (RxI[16] == ',') && (RxI[27] == ',')
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	3306      	adds	r3, #6
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b2c      	cmp	r3, #44	; 0x2c
 8004e30:	f040 827a 	bne.w	8005328 <TaskGPS+0x528>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3310      	adds	r3, #16
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	2b2c      	cmp	r3, #44	; 0x2c
 8004e3c:	f040 8274 	bne.w	8005328 <TaskGPS+0x528>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	331b      	adds	r3, #27
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b2c      	cmp	r3, #44	; 0x2c
 8004e48:	f040 826e 	bne.w	8005328 <TaskGPS+0x528>
					&& (RxI[29] == ',') && (RxI[41] == ',') && (RxI[43] == ','))
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	331d      	adds	r3, #29
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	2b2c      	cmp	r3, #44	; 0x2c
 8004e54:	f040 8268 	bne.w	8005328 <TaskGPS+0x528>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	3329      	adds	r3, #41	; 0x29
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b2c      	cmp	r3, #44	; 0x2c
 8004e60:	f040 8262 	bne.w	8005328 <TaskGPS+0x528>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	332b      	adds	r3, #43	; 0x2b
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b2c      	cmp	r3, #44	; 0x2c
 8004e6c:	f040 825c 	bne.w	8005328 <TaskGPS+0x528>
			{
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3311      	adds	r3, #17
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004e7a:	4613      	mov	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4413      	add	r3, r2
 8004e80:	005b      	lsls	r3, r3, #1
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3312      	adds	r3, #18
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	3b30      	subs	r3, #48	; 0x30
 8004e8c:	4413      	add	r3, r2
						+ ((RxI[19] - 48) * pow(10, 6)
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7fb fb48 	bl	8000524 <__aeabi_i2d>
 8004e94:	4604      	mov	r4, r0
 8004e96:	460d      	mov	r5, r1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	3313      	adds	r3, #19
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	3b30      	subs	r3, #48	; 0x30
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fb3f 	bl	8000524 <__aeabi_i2d>
 8004ea6:	a3ec      	add	r3, pc, #944	; (adr r3, 8005258 <TaskGPS+0x458>)
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f7fb fba4 	bl	80005f8 <__aeabi_dmul>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	460b      	mov	r3, r1
 8004eb4:	4690      	mov	r8, r2
 8004eb6:	4699      	mov	r9, r3
								+ (RxI[20] - 48) * pow(10, 5)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	3314      	adds	r3, #20
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	3b30      	subs	r3, #48	; 0x30
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb fb2f 	bl	8000524 <__aeabi_i2d>
 8004ec6:	a3e6      	add	r3, pc, #920	; (adr r3, 8005260 <TaskGPS+0x460>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb fb94 	bl	80005f8 <__aeabi_dmul>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb f9d8 	bl	800028c <__adddf3>
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4690      	mov	r8, r2
 8004ee2:	4699      	mov	r9, r3
								+ (RxI[22] - 48) * pow(10, 4)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	3316      	adds	r3, #22
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	3b30      	subs	r3, #48	; 0x30
 8004eec:	4618      	mov	r0, r3
 8004eee:	f7fb fb19 	bl	8000524 <__aeabi_i2d>
 8004ef2:	a3dd      	add	r3, pc, #884	; (adr r3, 8005268 <TaskGPS+0x468>)
 8004ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef8:	f7fb fb7e 	bl	80005f8 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb f9c2 	bl	800028c <__adddf3>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4690      	mov	r8, r2
 8004f0e:	4699      	mov	r9, r3
								+ (RxI[23] - 48) * pow(10, 3)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3317      	adds	r3, #23
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	3b30      	subs	r3, #48	; 0x30
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f7fb fb03 	bl	8000524 <__aeabi_i2d>
 8004f1e:	f04f 0200 	mov.w	r2, #0
 8004f22:	4bd3      	ldr	r3, [pc, #844]	; (8005270 <TaskGPS+0x470>)
 8004f24:	f7fb fb68 	bl	80005f8 <__aeabi_dmul>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4640      	mov	r0, r8
 8004f2e:	4649      	mov	r1, r9
 8004f30:	f7fb f9ac 	bl	800028c <__adddf3>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4690      	mov	r8, r2
 8004f3a:	4699      	mov	r9, r3
								+ (RxI[24] - 48) * pow(10, 2)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	3318      	adds	r3, #24
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	3b30      	subs	r3, #48	; 0x30
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb faed 	bl	8000524 <__aeabi_i2d>
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	4bc9      	ldr	r3, [pc, #804]	; (8005274 <TaskGPS+0x474>)
 8004f50:	f7fb fb52 	bl	80005f8 <__aeabi_dmul>
 8004f54:	4602      	mov	r2, r0
 8004f56:	460b      	mov	r3, r1
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fb f996 	bl	800028c <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4690      	mov	r8, r2
 8004f66:	4699      	mov	r9, r3
								+ (RxI[25] - 48) * 10 + RxI[26] - 48) * 0.00001
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	3319      	adds	r3, #25
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fb fad2 	bl	8000524 <__aeabi_i2d>
 8004f80:	4602      	mov	r2, r0
 8004f82:	460b      	mov	r3, r1
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb f980 	bl	800028c <__adddf3>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4690      	mov	r8, r2
 8004f92:	4699      	mov	r9, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	331a      	adds	r3, #26
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7fb fac2 	bl	8000524 <__aeabi_i2d>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4640      	mov	r0, r8
 8004fa6:	4649      	mov	r1, r9
 8004fa8:	f7fb f970 	bl	800028c <__adddf3>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4610      	mov	r0, r2
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	4baf      	ldr	r3, [pc, #700]	; (8005278 <TaskGPS+0x478>)
 8004fba:	f7fb f965 	bl	8000288 <__aeabi_dsub>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	a3a2      	add	r3, pc, #648	; (adr r3, 8005250 <TaskGPS+0x450>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb fb14 	bl	80005f8 <__aeabi_dmul>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4610      	mov	r0, r2
 8004fd6:	4619      	mov	r1, r3
								/ 60;
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	4ba7      	ldr	r3, [pc, #668]	; (800527c <TaskGPS+0x47c>)
 8004fde:	f7fb fc35 	bl	800084c <__aeabi_ddiv>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	460b      	mov	r3, r1
						+ ((RxI[19] - 48) * pow(10, 6)
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb f94f 	bl	800028c <__adddf3>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7fb fdf7 	bl	8000be8 <__aeabi_d2f>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	61fb      	str	r3, [r7, #28]
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	331e      	adds	r3, #30
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	3b30      	subs	r3, #48	; 0x30
 8005006:	4618      	mov	r0, r3
 8005008:	f7fb fa8c 	bl	8000524 <__aeabi_i2d>
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	4b98      	ldr	r3, [pc, #608]	; (8005274 <TaskGPS+0x474>)
 8005012:	f7fb faf1 	bl	80005f8 <__aeabi_dmul>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4614      	mov	r4, r2
 800501c:	461d      	mov	r5, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	331f      	adds	r3, #31
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	4618      	mov	r0, r3
 8005032:	f7fb fa77 	bl	8000524 <__aeabi_i2d>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4620      	mov	r0, r4
 800503c:	4629      	mov	r1, r5
 800503e:	f7fb f925 	bl	800028c <__adddf3>
 8005042:	4602      	mov	r2, r0
 8005044:	460b      	mov	r3, r1
 8005046:	4614      	mov	r4, r2
 8005048:	461d      	mov	r5, r3
						+ (RxI[32] - 48))
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	3320      	adds	r3, #32
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	3b30      	subs	r3, #48	; 0x30
 8005052:	4618      	mov	r0, r3
 8005054:	f7fb fa66 	bl	8000524 <__aeabi_i2d>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4620      	mov	r0, r4
 800505e:	4629      	mov	r1, r5
 8005060:	f7fb f914 	bl	800028c <__adddf3>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4614      	mov	r4, r2
 800506a:	461d      	mov	r5, r3
						+ ((RxI[33] - 48) * pow(10, 6)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	3321      	adds	r3, #33	; 0x21
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	3b30      	subs	r3, #48	; 0x30
 8005074:	4618      	mov	r0, r3
 8005076:	f7fb fa55 	bl	8000524 <__aeabi_i2d>
 800507a:	a377      	add	r3, pc, #476	; (adr r3, 8005258 <TaskGPS+0x458>)
 800507c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005080:	f7fb faba 	bl	80005f8 <__aeabi_dmul>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4690      	mov	r8, r2
 800508a:	4699      	mov	r9, r3
								+ (RxI[34] - 48) * pow(10, 5)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	3322      	adds	r3, #34	; 0x22
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	3b30      	subs	r3, #48	; 0x30
 8005094:	4618      	mov	r0, r3
 8005096:	f7fb fa45 	bl	8000524 <__aeabi_i2d>
 800509a:	a371      	add	r3, pc, #452	; (adr r3, 8005260 <TaskGPS+0x460>)
 800509c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a0:	f7fb faaa 	bl	80005f8 <__aeabi_dmul>
 80050a4:	4602      	mov	r2, r0
 80050a6:	460b      	mov	r3, r1
 80050a8:	4640      	mov	r0, r8
 80050aa:	4649      	mov	r1, r9
 80050ac:	f7fb f8ee 	bl	800028c <__adddf3>
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	4690      	mov	r8, r2
 80050b6:	4699      	mov	r9, r3
								+ (RxI[36] - 48) * pow(10, 4)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3324      	adds	r3, #36	; 0x24
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	3b30      	subs	r3, #48	; 0x30
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7fb fa2f 	bl	8000524 <__aeabi_i2d>
 80050c6:	a368      	add	r3, pc, #416	; (adr r3, 8005268 <TaskGPS+0x468>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb fa94 	bl	80005f8 <__aeabi_dmul>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f8d8 	bl	800028c <__adddf3>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4690      	mov	r8, r2
 80050e2:	4699      	mov	r9, r3
								+ (RxI[37] - 48) * pow(10, 3)
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	3325      	adds	r3, #37	; 0x25
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	3b30      	subs	r3, #48	; 0x30
 80050ec:	4618      	mov	r0, r3
 80050ee:	f7fb fa19 	bl	8000524 <__aeabi_i2d>
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	4b5e      	ldr	r3, [pc, #376]	; (8005270 <TaskGPS+0x470>)
 80050f8:	f7fb fa7e 	bl	80005f8 <__aeabi_dmul>
 80050fc:	4602      	mov	r2, r0
 80050fe:	460b      	mov	r3, r1
 8005100:	4640      	mov	r0, r8
 8005102:	4649      	mov	r1, r9
 8005104:	f7fb f8c2 	bl	800028c <__adddf3>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4690      	mov	r8, r2
 800510e:	4699      	mov	r9, r3
								+ (RxI[38] - 48) * pow(10, 2)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	3326      	adds	r3, #38	; 0x26
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	3b30      	subs	r3, #48	; 0x30
 8005118:	4618      	mov	r0, r3
 800511a:	f7fb fa03 	bl	8000524 <__aeabi_i2d>
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	4b54      	ldr	r3, [pc, #336]	; (8005274 <TaskGPS+0x474>)
 8005124:	f7fb fa68 	bl	80005f8 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb f8ac 	bl	800028c <__adddf3>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4690      	mov	r8, r2
 800513a:	4699      	mov	r9, r3
								+ (RxI[39] - 48) * 10 + RxI[40] - 48) * 0.00001
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3327      	adds	r3, #39	; 0x27
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4618      	mov	r0, r3
 8005150:	f7fb f9e8 	bl	8000524 <__aeabi_i2d>
 8005154:	4602      	mov	r2, r0
 8005156:	460b      	mov	r3, r1
 8005158:	4640      	mov	r0, r8
 800515a:	4649      	mov	r1, r9
 800515c:	f7fb f896 	bl	800028c <__adddf3>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4690      	mov	r8, r2
 8005166:	4699      	mov	r9, r3
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3328      	adds	r3, #40	; 0x28
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fb f9d8 	bl	8000524 <__aeabi_i2d>
 8005174:	4602      	mov	r2, r0
 8005176:	460b      	mov	r3, r1
 8005178:	4640      	mov	r0, r8
 800517a:	4649      	mov	r1, r9
 800517c:	f7fb f886 	bl	800028c <__adddf3>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	f04f 0200 	mov.w	r2, #0
 800518c:	4b3a      	ldr	r3, [pc, #232]	; (8005278 <TaskGPS+0x478>)
 800518e:	f7fb f87b 	bl	8000288 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4610      	mov	r0, r2
 8005198:	4619      	mov	r1, r3
 800519a:	a32d      	add	r3, pc, #180	; (adr r3, 8005250 <TaskGPS+0x450>)
 800519c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a0:	f7fb fa2a 	bl	80005f8 <__aeabi_dmul>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
								/ 60;
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <TaskGPS+0x47c>)
 80051b2:	f7fb fb4b 	bl	800084c <__aeabi_ddiv>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
						+ ((RxI[33] - 48) * pow(10, 6)
 80051ba:	4620      	mov	r0, r4
 80051bc:	4629      	mov	r1, r5
 80051be:	f7fb f865 	bl	800028c <__adddf3>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fb fd0d 	bl	8000be8 <__aeabi_d2f>
 80051ce:	4603      	mov	r3, r0
 80051d0:	61bb      	str	r3, [r7, #24]
				if (RxI[28] == 'S')
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	331c      	adds	r3, #28
 80051d6:	781b      	ldrb	r3, [r3, #0]
 80051d8:	2b53      	cmp	r3, #83	; 0x53
 80051da:	d105      	bne.n	80051e8 <TaskGPS+0x3e8>
				{
					lati = -lati;
 80051dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80051e0:	eef1 7a67 	vneg.f32	s15, s15
 80051e4:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				if (RxI[42] == 'W')
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	332a      	adds	r3, #42	; 0x2a
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b57      	cmp	r3, #87	; 0x57
 80051f0:	d105      	bne.n	80051fe <TaskGPS+0x3fe>
				{
					longi = -longi;
 80051f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80051f6:	eef1 7a67 	vneg.f32	s15, s15
 80051fa:	edc7 7a06 	vstr	s15, [r7, #24]
				}
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 80051fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005202:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005280 <TaskGPS+0x480>
 8005206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520e:	dc00      	bgt.n	8005212 <TaskGPS+0x412>
				}
			}
			//	}
		}
	}
}
 8005210:	e08a      	b.n	8005328 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 8005212:	edd7 7a07 	vldr	s15, [r7, #28]
 8005216:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005284 <TaskGPS+0x484>
 800521a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005222:	d400      	bmi.n	8005226 <TaskGPS+0x426>
}
 8005224:	e080      	b.n	8005328 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 8005226:	edd7 7a06 	vldr	s15, [r7, #24]
 800522a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800522e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005236:	dc00      	bgt.n	800523a <TaskGPS+0x43a>
}
 8005238:	e076      	b.n	8005328 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 800523a:	edd7 7a06 	vldr	s15, [r7, #24]
 800523e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8005242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d41d      	bmi.n	8005288 <TaskGPS+0x488>
}
 800524c:	e06c      	b.n	8005328 <TaskGPS+0x528>
 800524e:	bf00      	nop
 8005250:	88e368f1 	.word	0x88e368f1
 8005254:	3ee4f8b5 	.word	0x3ee4f8b5
 8005258:	00000000 	.word	0x00000000
 800525c:	412e8480 	.word	0x412e8480
 8005260:	00000000 	.word	0x00000000
 8005264:	40f86a00 	.word	0x40f86a00
 8005268:	00000000 	.word	0x00000000
 800526c:	40c38800 	.word	0x40c38800
 8005270:	408f4000 	.word	0x408f4000
 8005274:	40590000 	.word	0x40590000
 8005278:	40480000 	.word	0x40480000
 800527c:	404e0000 	.word	0x404e0000
 8005280:	420c0000 	.word	0x420c0000
 8005284:	42700000 	.word	0x42700000
					int sat = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
					if (RxI[46] >= '0' && RxI[46] <= '9' && RxI[47] >= '0'
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	332e      	adds	r3, #46	; 0x2e
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	2b2f      	cmp	r3, #47	; 0x2f
 8005294:	d921      	bls.n	80052da <TaskGPS+0x4da>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	332e      	adds	r3, #46	; 0x2e
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b39      	cmp	r3, #57	; 0x39
 800529e:	d81c      	bhi.n	80052da <TaskGPS+0x4da>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	332f      	adds	r3, #47	; 0x2f
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b2f      	cmp	r3, #47	; 0x2f
 80052a8:	d917      	bls.n	80052da <TaskGPS+0x4da>
							&& RxI[47] <= '9')
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	332f      	adds	r3, #47	; 0x2f
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b39      	cmp	r3, #57	; 0x39
 80052b2:	d812      	bhi.n	80052da <TaskGPS+0x4da>
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	332e      	adds	r3, #46	; 0x2e
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	461a      	mov	r2, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	332f      	adds	r3, #47	; 0x2f
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	441a      	add	r2, r3
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
								- '0';
 80052d6:	3a30      	subs	r2, #48	; 0x30
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 80052d8:	601a      	str	r2, [r3, #0]
					TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick();
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f103 0408 	add.w	r4, r3, #8
 80052e0:	f005 f8ba 	bl	800a458 <HAL_GetTick>
 80052e4:	4603      	mov	r3, r0
 80052e6:	6023      	str	r3, [r4, #0]
					TabFloatValue[LATI] = lati;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	3314      	adds	r3, #20
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	601a      	str	r2, [r3, #0]
					TabFloatValue[LONGI] = longi;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	3318      	adds	r3, #24
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	601a      	str	r2, [r3, #0]
					TabGen[STATUT_GPS] = 1;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	33a0      	adds	r3, #160	; 0xa0
 80052fc:	2201      	movs	r2, #1
 80052fe:	601a      	str	r2, [r3, #0]
					if (TabGen[GPS_GOOD] == 0)
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	33e4      	adds	r3, #228	; 0xe4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10e      	bne.n	8005328 <TaskGPS+0x528>
						TabGpsTimer[GPS_FIRST_START] = HAL_GetTick();//- (GPSDURA * 60 * 1000) + (GPSSTOP * 60 * 1000) ;  //LAST CHANGE 18h10-07/10
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	1d1c      	adds	r4, r3, #4
 800530e:	f005 f8a3 	bl	800a458 <HAL_GetTick>
 8005312:	4603      	mov	r3, r0
 8005314:	6023      	str	r3, [r4, #0]
						TabGen[GPS_GOOD] = 1;
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	33e4      	adds	r3, #228	; 0xe4
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]
						TabGen[GPS_DURATION] = 1;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8005324:	2201      	movs	r2, #1
 8005326:	601a      	str	r2, [r3, #0]
}
 8005328:	bf00      	nop
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005332:	bf00      	nop

08005334 <TaskSendDUAL>:
}

//Sigfox to antenna
void TaskSendDUAL(int TabGen[], float TabFloatValue[], uint32_t TabTimer[],
		char WifiName[])
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b08e      	sub	sp, #56	; 0x38
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
	char bufferDual[40];

	if (TabGen[DUAL_SEND] == 1)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d177      	bne.n	800543e <TaskSendDUAL+0x10a>
	{
		srand(HAL_GetTick());
 800534e:	f005 f883 	bl	800a458 <HAL_GetTick>
 8005352:	4603      	mov	r3, r0
 8005354:	4618      	mov	r0, r3
 8005356:	f012 ff6b 	bl	8018230 <srand>
		TabGen[ID_ALERT] = (rand() % 98) + 1;
 800535a:	f012 ff97 	bl	801828c <rand>
 800535e:	4602      	mov	r2, r0
 8005360:	4b39      	ldr	r3, [pc, #228]	; (8005448 <TaskSendDUAL+0x114>)
 8005362:	fb83 1302 	smull	r1, r3, r3, r2
 8005366:	1159      	asrs	r1, r3, #5
 8005368:	17d3      	asrs	r3, r2, #31
 800536a:	1acb      	subs	r3, r1, r3
 800536c:	2162      	movs	r1, #98	; 0x62
 800536e:	fb01 f303 	mul.w	r3, r1, r3
 8005372:	1ad3      	subs	r3, r2, r3
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800537a:	3301      	adds	r3, #1
 800537c:	6013      	str	r3, [r2, #0]
		display_SendMess();
 800537e:	f7fc fddf 	bl	8001f40 <display_SendMess>
		TabGen[RE_ON_SCREEN] = 1;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	3350      	adds	r3, #80	; 0x50
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
		OutBuzOff();
 800538a:	f7fe f8fb 	bl	8003584 <OutBuzOff>
		OutMotorWu(0);
 800538e:	2000      	movs	r0, #0
 8005390:	f7fe f890 	bl	80034b4 <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	2000      	movs	r0, #0
 800539c:	f7fe fbca 	bl	8003b34 <LedOn>
		if (WIFI == 1)
			BuildMessWifi(bufferDual, TabGen, TabFloatValue, TabTimer,
					WifiName);
		else
			BuildMessGPS(bufferDual, TabGen, TabFloatValue, TabTimer);
 80053a0:	f107 0010 	add.w	r0, r7, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	68f9      	ldr	r1, [r7, #12]
 80053aa:	f7fe fd09 	bl	8003dc0 <BuildMessGPS>

		SendMessLoraWan(bufferDual);
 80053ae:	f107 0310 	add.w	r3, r7, #16
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fce8 	bl	8003d88 <SendMessLoraWan>
		RebootNemeusLS(TabGen);
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f7fe fcb9 	bl	8003d30 <RebootNemeusLS>
		HAL_Delay(5000);
 80053be:	f241 3088 	movw	r0, #5000	; 0x1388
 80053c2:	f005 f855 	bl	800a470 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80053c6:	4821      	ldr	r0, [pc, #132]	; (800544c <TaskSendDUAL+0x118>)
 80053c8:	f008 f82b 	bl	800d422 <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80053cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80053d0:	f005 f84e 	bl	800a470 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80053d4:	481d      	ldr	r0, [pc, #116]	; (800544c <TaskSendDUAL+0x118>)
 80053d6:	f008 f824 	bl	800d422 <HAL_IWDG_Refresh>

		RebootNemeusLS(TabGen); // Override duty cycle limitation, must wait 9 min before sending another message
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f7fe fca8 	bl	8003d30 <RebootNemeusLS>
		SigfoxOn();
 80053e0:	f7fe fcdc 	bl	8003d9c <SigfoxOn>

		HAL_IWDG_Refresh(&hiwdg);
 80053e4:	4819      	ldr	r0, [pc, #100]	; (800544c <TaskSendDUAL+0x118>)
 80053e6:	f008 f81c 	bl	800d422 <HAL_IWDG_Refresh>
		SendMessSigfox(bufferDual, TabGen);
 80053ea:	f107 0310 	add.w	r3, r7, #16
 80053ee:	68f9      	ldr	r1, [r7, #12]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fcda 	bl	8003daa <SendMessSigfox>

		HAL_Delay(5000);
 80053f6:	f241 3088 	movw	r0, #5000	; 0x1388
 80053fa:	f005 f839 	bl	800a470 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80053fe:	4813      	ldr	r0, [pc, #76]	; (800544c <TaskSendDUAL+0x118>)
 8005400:	f008 f80f 	bl	800d422 <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 8005404:	f241 3088 	movw	r0, #5000	; 0x1388
 8005408:	f005 f832 	bl	800a470 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 800540c:	480f      	ldr	r0, [pc, #60]	; (800544c <TaskSendDUAL+0x118>)
 800540e:	f008 f808 	bl	800d422 <HAL_IWDG_Refresh>

		TabGen[DUAL_SEND] = 0;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005418:	2200      	movs	r2, #0
 800541a:	601a      	str	r2, [r3, #0]
		TabGen[ID_ALERT] = 0;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_PENDING] = 0;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
		RebootNemeusLS(TabGen);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe fc7d 	bl	8003d30 <RebootNemeusLS>
		SigfoxOn();
 8005436:	f7fe fcb1 	bl	8003d9c <SigfoxOn>
		LoraWanOn();
 800543a:	f7fe fc97 	bl	8003d6c <LoraWanOn>
	}
}
 800543e:	bf00      	nop
 8005440:	3738      	adds	r7, #56	; 0x38
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	5397829d 	.word	0x5397829d
 800544c:	20001df8 	.word	0x20001df8

08005450 <TaskButtonManager>:

	}
}

void TaskButtonManager(int TabGen[], int TabAlert[])
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	6039      	str	r1, [r7, #0]
	//if (TabGen[I_READ_BUTTON] == 10)  // button management
	//{
	if (InOn() == 1)
 800545a:	f7fe f85d 	bl	8003518 <InOn>
 800545e:	4603      	mov	r3, r0
 8005460:	2b01      	cmp	r3, #1
 8005462:	d12a      	bne.n	80054ba <TaskButtonManager+0x6a>
	{
		if (TabGen[ALERT_ON] == 0) // EJ : button on to update GPS
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d103      	bne.n	8005474 <TaskButtonManager+0x24>
		{
			TabGen[FORCE_GPS] = 1;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	33f0      	adds	r3, #240	; 0xf0
 8005470:	2201      	movs	r2, #1
 8005472:	601a      	str	r2, [r3, #0]
//					TabGen[STATUT_GPS] = 0 ;
//					TabGen[GPS_GOOD] = 0 ;
		}

		TabGen[RE_ON_SCREEN] = 1;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3350      	adds	r3, #80	; 0x50
 8005478:	2201      	movs	r2, #1
 800547a:	601a      	str	r2, [r3, #0]
		TabGen[ON_ON] = 1;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3354      	adds	r3, #84	; 0x54
 8005480:	2201      	movs	r2, #1
 8005482:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON]++;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3358      	adds	r3, #88	; 0x58
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	3201      	adds	r2, #1
 800548c:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_ON] > (ON_TOUCH * 100))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3358      	adds	r3, #88	; 0x58
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2bc8      	cmp	r3, #200	; 0xc8
 8005496:	dd18      	ble.n	80054ca <TaskButtonManager+0x7a>
		{
			if (TabGen[ALERT_ON] == 1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d107      	bne.n	80054b0 <TaskButtonManager+0x60>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	3320      	adds	r3, #32
 80054a4:	2201      	movs	r2, #1
 80054a6:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	333c      	adds	r3, #60	; 0x3c
 80054ac:	2200      	movs	r2, #0
 80054ae:	601a      	str	r2, [r3, #0]
			}
			TabGen[NS_SOS] = 0;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	3360      	adds	r3, #96	; 0x60
 80054b4:	2200      	movs	r2, #0
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e007      	b.n	80054ca <TaskButtonManager+0x7a>
		}
	}
	else
	{
		TabGen[ON_ON] = 0;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3354      	adds	r3, #84	; 0x54
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON] = 0;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3358      	adds	r3, #88	; 0x58
 80054c6:	2200      	movs	r2, #0
 80054c8:	601a      	str	r2, [r3, #0]
	}

	if (InSOS() == 1)
 80054ca:	f7fe f83b 	bl	8003544 <InSOS>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d140      	bne.n	8005556 <TaskButtonManager+0x106>
	{
		TabGen[FORCE_GPS] = 1;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	33f0      	adds	r3, #240	; 0xf0
 80054d8:	2201      	movs	r2, #1
 80054da:	601a      	str	r2, [r3, #0]

		TabGen[RE_ON_SCREEN] = 1;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3350      	adds	r3, #80	; 0x50
 80054e0:	2201      	movs	r2, #1
 80054e2:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 1;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	335c      	adds	r3, #92	; 0x5c
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS]++;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3360      	adds	r3, #96	; 0x60
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	3201      	adds	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_SOS] > (SOS_TOUCH))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	3360      	adds	r3, #96	; 0x60
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	dd36      	ble.n	800556e <TaskButtonManager+0x11e>
		{
			if (TabGen[ALERT_ON] == 1 && TabGen[SOS_RELEACH] == 1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d110      	bne.n	800552a <TaskButtonManager+0xda>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3364      	adds	r3, #100	; 0x64
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2b01      	cmp	r3, #1
 8005510:	d10b      	bne.n	800552a <TaskButtonManager+0xda>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	3320      	adds	r3, #32
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	333c      	adds	r3, #60	; 0x3c
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
				TabGen[NS_SOS] = 0;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	2200      	movs	r2, #0
 8005528:	601a      	str	r2, [r3, #0]
			}

			if (TabGen[NS_SOS] > (SOS_TOUCH * 100))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	3360      	adds	r3, #96	; 0x60
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b64      	cmp	r3, #100	; 0x64
 8005532:	dd1c      	ble.n	800556e <TaskButtonManager+0x11e>
			{
				if (TabGen[ALERT_ON] == 0)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d118      	bne.n	800556e <TaskButtonManager+0x11e>
				{

					TabAlert[ALERT_SOS] = 1;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	3304      	adds	r3, #4
 8005540:	2201      	movs	r2, #1
 8005542:	601a      	str	r2, [r3, #0]
					TabGen[NS_SOS] = 0;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3360      	adds	r3, #96	; 0x60
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]
					TabGen[SOS_RELEACH] = 0;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	3364      	adds	r3, #100	; 0x64
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
 8005554:	e00b      	b.n	800556e <TaskButtonManager+0x11e>
//				TabGen[NS_SOS] = 0 ;
//			}
	}
	else
	{
		TabGen[SOS_RELEACH] = 1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3364      	adds	r3, #100	; 0x64
 800555a:	2201      	movs	r2, #1
 800555c:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 0;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	335c      	adds	r3, #92	; 0x5c
 8005562:	2200      	movs	r2, #0
 8005564:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS] = 0;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	3360      	adds	r3, #96	; 0x60
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
	}
	TabGen[I_READ_BUTTON] = 0;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	334c      	adds	r3, #76	; 0x4c
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]

	if ((TabGen[ON_ON] == 1) || (TabGen[SOS_ON] == 1))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	3354      	adds	r3, #84	; 0x54
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d004      	beq.n	800558a <TaskButtonManager+0x13a>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	335c      	adds	r3, #92	; 0x5c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d11b      	bne.n	80055c2 <TaskButtonManager+0x172>
	{

		if (TabGen[CHARGEC] == 0)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	33ac      	adds	r3, #172	; 0xac
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d105      	bne.n	80055a0 <TaskButtonManager+0x150>
			LedOn(50, 0, 0, TabGen);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	2100      	movs	r1, #0
 800559a:	2032      	movs	r0, #50	; 0x32
 800559c:	f7fe faca 	bl	8003b34 <LedOn>

		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	33ac      	adds	r3, #172	; 0xac
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d117      	bne.n	80055da <TaskButtonManager+0x18a>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	3354      	adds	r3, #84	; 0x54
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d112      	bne.n	80055da <TaskButtonManager+0x18a>
			LedOn(50, 0, 0, TabGen);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2200      	movs	r2, #0
 80055b8:	2100      	movs	r1, #0
 80055ba:	2032      	movs	r0, #50	; 0x32
 80055bc:	f7fe faba 	bl	8003b34 <LedOn>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 80055c0:	e00b      	b.n	80055da <TaskButtonManager+0x18a>
	}
	else
	{
		if (TabGen[CHARGEC] == 0)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	33ac      	adds	r3, #172	; 0xac
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d107      	bne.n	80055dc <TaskButtonManager+0x18c>
			LedOn(0, 0, 0, TabGen);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	2100      	movs	r1, #0
 80055d2:	2000      	movs	r0, #0
 80055d4:	f7fe faae 	bl	8003b34 <LedOn>
	 else
	 {
	 TabGen[I_READ_BUTTON]++ ;
	 }*/

}
 80055d8:	e000      	b.n	80055dc <TaskButtonManager+0x18c>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 80055da:	bf00      	nop
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <TaskAlertManager>:

void TaskAlertManager(int TabGen[], int *i_led)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
	if (TabGen[ALERT_ON] == 1) // if there is an alert
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d16e      	bne.n	80056d4 <TaskAlertManager+0xf0>
	{
		if ((TabGen[BUZ_ON_FAST] == 1) && (TabGen[LED_ON_FAST] == 1)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3308      	adds	r3, #8
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d12f      	bne.n	8005660 <TaskAlertManager+0x7c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	330c      	adds	r3, #12
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d12a      	bne.n	8005660 <TaskAlertManager+0x7c>
				&& (TabGen[VIB_ON_FAST] == 1)) // fast vibration, blinking, and noise mode
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3310      	adds	r3, #16
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d125      	bne.n	8005660 <TaskAlertManager+0x7c>
		{
			if (*i_led == 1)
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d105      	bne.n	8005628 <TaskAlertManager+0x44>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	22c8      	movs	r2, #200	; 0xc8
 8005620:	21c8      	movs	r1, #200	; 0xc8
 8005622:	20fa      	movs	r0, #250	; 0xfa
 8005624:	f7fe fa86 	bl	8003b34 <LedOn>
#ifndef debug_sound_vibration
				OutBuzOn();			// buzzer on  // EJ : stop sound for debug
				OutMotorWu(1);				// vibration on
#endif
			}
			if (*i_led == 10)   // after 100 ms
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b0a      	cmp	r3, #10
 800562e:	d10a      	bne.n	8005646 <TaskAlertManager+0x62>
			{
				LedOn(0, 0, 0, TabGen); // turn led off
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	2100      	movs	r1, #0
 8005636:	2000      	movs	r0, #0
 8005638:	f7fe fa7c 	bl	8003b34 <LedOn>
				OutBuzOff();		// buzzer off
 800563c:	f7fd ffa2 	bl	8003584 <OutBuzOff>
				OutMotorWu(0);	// vibration on
 8005640:	2000      	movs	r0, #0
 8005642:	f7fd ff37 	bl	80034b4 <OutMotorWu>
			}
			if (*i_led == 100) // every 1 sec
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b64      	cmp	r3, #100	; 0x64
 800564c:	d102      	bne.n	8005654 <TaskAlertManager+0x70>
			{
				*i_led = 0;     // restart
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	2200      	movs	r2, #0
 8005652:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	e039      	b.n	80056d4 <TaskAlertManager+0xf0>
		}
		else if ((TabGen[BUZ_ON_SLOW] == 1) && (TabGen[LED_ON_SLOW] == 1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3314      	adds	r3, #20
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d134      	bne.n	80056d4 <TaskAlertManager+0xf0>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3318      	adds	r3, #24
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d12f      	bne.n	80056d4 <TaskAlertManager+0xf0>
				&& (TabGen[VIB_ON_SLOW] == 1)) // slow vibration, blinking, and noise mode
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	331c      	adds	r3, #28
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d12a      	bne.n	80056d4 <TaskAlertManager+0xf0>
		{
			if (*i_led == 1)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d10a      	bne.n	800569c <TaskAlertManager+0xb8>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	22c8      	movs	r2, #200	; 0xc8
 800568a:	21c8      	movs	r1, #200	; 0xc8
 800568c:	20fa      	movs	r0, #250	; 0xfa
 800568e:	f7fe fa51 	bl	8003b34 <LedOn>
				OutBuzOn();						// buzzer on
 8005692:	f7fd ff6d 	bl	8003570 <OutBuzOn>
				OutMotorWu(1);				// vibration on
 8005696:	2001      	movs	r0, #1
 8005698:	f7fd ff0c 	bl	80034b4 <OutMotorWu>
			}
			if (*i_led == 10) 		// after 100 ms
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b0a      	cmp	r3, #10
 80056a2:	d10a      	bne.n	80056ba <TaskAlertManager+0xd6>
			{
				LedOn(0, 0, 0, TabGen); 	// turn led off
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	2000      	movs	r0, #0
 80056ac:	f7fe fa42 	bl	8003b34 <LedOn>
				OutBuzOff();			// buzzer off
 80056b0:	f7fd ff68 	bl	8003584 <OutBuzOff>
				OutMotorWu(0);		// vibration off
 80056b4:	2000      	movs	r0, #0
 80056b6:	f7fd fefd 	bl	80034b4 <OutMotorWu>
			}
			if (*i_led == 1000) 	// every 10 sec
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c2:	d102      	bne.n	80056ca <TaskAlertManager+0xe6>
			{
				*i_led = 0; 			// restart
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	2200      	movs	r2, #0
 80056c8:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	1c5a      	adds	r2, r3, #1
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	601a      	str	r2, [r3, #0]
		}
	}
	if ((TabGen[ALERT_ON_PREVIOUS] == 1) && (TabGen[ALERT_ON] == 0))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3348      	adds	r3, #72	; 0x48
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d12a      	bne.n	8005734 <TaskAlertManager+0x150>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d126      	bne.n	8005734 <TaskAlertManager+0x150>
	{
		LedOn(0, 0, 0, TabGen);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2100      	movs	r1, #0
 80056ec:	2000      	movs	r0, #0
 80056ee:	f7fe fa21 	bl	8003b34 <LedOn>
		OutBuzOff();
 80056f2:	f7fd ff47 	bl	8003584 <OutBuzOff>
		OutMotorWu(0);
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7fd fedc 	bl	80034b4 <OutMotorWu>
		TabGen[ALERT_ON_PREVIOUS] = 0;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3348      	adds	r3, #72	; 0x48
 8005700:	2200      	movs	r2, #0
 8005702:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	3368      	adds	r3, #104	; 0x68
 8005708:	2200      	movs	r2, #0
 800570a:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	336c      	adds	r3, #108	; 0x6c
 8005710:	2200      	movs	r2, #0
 8005712:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	3370      	adds	r3, #112	; 0x70
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3374      	adds	r3, #116	; 0x74
 8005720:	2201      	movs	r2, #1
 8005722:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3378      	adds	r3, #120	; 0x78
 8005728:	2200      	movs	r2, #0
 800572a:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	337c      	adds	r3, #124	; 0x7c
 8005730:	2200      	movs	r2, #0
 8005732:	601a      	str	r2, [r3, #0]

	}

	if ((TabGen[ALERT_ON_PREVIOUS] == 0) && (TabGen[ALERT_ON] == 1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3348      	adds	r3, #72	; 0x48
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d11f      	bne.n	800577e <TaskAlertManager+0x19a>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d11b      	bne.n	800577e <TaskAlertManager+0x19a>
	{
		TabGen[ALERT_ON_PREVIOUS] = 1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3348      	adds	r3, #72	; 0x48
 800574a:	2201      	movs	r2, #1
 800574c:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3368      	adds	r3, #104	; 0x68
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	336c      	adds	r3, #108	; 0x6c
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	3370      	adds	r3, #112	; 0x70
 8005762:	2200      	movs	r2, #0
 8005764:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	3374      	adds	r3, #116	; 0x74
 800576a:	2201      	movs	r2, #1
 800576c:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	3378      	adds	r3, #120	; 0x78
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	337c      	adds	r3, #124	; 0x7c
 800577a:	2200      	movs	r2, #0
 800577c:	601a      	str	r2, [r3, #0]
	}
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
	...

08005788 <TaskFallManager>:

void TaskFallManager(uint16_t ar[], uint8_t y[], uint16_t accres, uint8_t accy,
		int TabGen[])
{
 8005788:	b480      	push	{r7}
 800578a:	b087      	sub	sp, #28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	4611      	mov	r1, r2
 8005794:	461a      	mov	r2, r3
 8005796:	460b      	mov	r3, r1
 8005798:	80fb      	strh	r3, [r7, #6]
 800579a:	4613      	mov	r3, r2
 800579c:	717b      	strb	r3, [r7, #5]
	uint16_t i_full;

	if (TabGen[FALL_IND_1] < 200 && TabGen[FALL_COND_2])
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	3368      	adds	r3, #104	; 0x68
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2bc7      	cmp	r3, #199	; 0xc7
 80057a6:	dc19      	bgt.n	80057dc <TaskFallManager+0x54>
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	3374      	adds	r3, #116	; 0x74
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d014      	beq.n	80057dc <TaskFallManager+0x54>
	{ // teste2 est initialis� en true ce if s'execute une seule fois pour remplie les 200 premiers elements du tableau
		ar[TabGen[FALL_IND_1]] = accres;
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	3368      	adds	r3, #104	; 0x68
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	68fa      	ldr	r2, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	3368      	adds	r3, #104	; 0x68
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	461a      	mov	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4413      	add	r3, r2
 80057ce:	797a      	ldrb	r2, [r7, #5]
 80057d0:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	3368      	adds	r3, #104	; 0x68
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	3201      	adds	r2, #1
 80057da:	601a      	str	r2, [r3, #0]
	}

	if ((TabGen[FALL_IND_1] == 200) && (TabGen[FALL_COND_2]))
 80057dc:	6a3b      	ldr	r3, [r7, #32]
 80057de:	3368      	adds	r3, #104	; 0x68
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	2bc8      	cmp	r3, #200	; 0xc8
 80057e4:	d10c      	bne.n	8005800 <TaskFallManager+0x78>
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	3374      	adds	r3, #116	; 0x74
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <TaskFallManager+0x78>
	{ // lorsque les 2OO premieres elements sont remplis dans le 1er tableau la valeur de test2 sera false donc le 1er if ne devient plus activ�
		TabGen[FALL_COND_1] = 1; //la variable test va nous permettre de savoir que les 200 premiers element du tableau sont bien remplis
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	3370      	adds	r3, #112	; 0x70
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 0;
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	3374      	adds	r3, #116	; 0x74
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
	}

	// notez bien que les 2 tableaux sont d�phas� dans le temps par 2s.
	if (TabGen[FALL_COND_1] && 200 <= TabGen[FALL_IND_1]
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	3370      	adds	r3, #112	; 0x70
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d06f      	beq.n	80058ea <TaskFallManager+0x162>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	3368      	adds	r3, #104	; 0x68
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2bc7      	cmp	r3, #199	; 0xc7
 8005812:	dd6a      	ble.n	80058ea <TaskFallManager+0x162>
			&& TabGen[FALL_IND_1] <= 399 && 0 <= TabGen[FALL_IND_2]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	3368      	adds	r3, #104	; 0x68
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800581e:	da64      	bge.n	80058ea <TaskFallManager+0x162>
 8005820:	6a3b      	ldr	r3, [r7, #32]
 8005822:	336c      	adds	r3, #108	; 0x6c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	db5f      	blt.n	80058ea <TaskFallManager+0x162>
			&& TabGen[FALL_IND_2] <= 199)
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	336c      	adds	r3, #108	; 0x6c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2bc7      	cmp	r3, #199	; 0xc7
 8005832:	dc5a      	bgt.n	80058ea <TaskFallManager+0x162>
	{ // cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		ar[TabGen[FALL_IND_1]] = accres;
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	3368      	adds	r3, #104	; 0x68
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	005b      	lsls	r3, r3, #1
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	88fa      	ldrh	r2, [r7, #6]
 8005842:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	3368      	adds	r3, #104	; 0x68
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	4413      	add	r3, r2
 8005850:	797a      	ldrb	r2, [r7, #5]
 8005852:	701a      	strb	r2, [r3, #0]
		arr[TabGen[FALL_IND_2]] = ar[TabGen[FALL_IND_1]];
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	3368      	adds	r3, #104	; 0x68
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	005b      	lsls	r3, r3, #1
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	441a      	add	r2, r3
 8005860:	6a3b      	ldr	r3, [r7, #32]
 8005862:	336c      	adds	r3, #108	; 0x6c
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	8811      	ldrh	r1, [r2, #0]
 8005868:	4a5b      	ldr	r2, [pc, #364]	; (80059d8 <TaskFallManager+0x250>)
 800586a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = y[TabGen[FALL_IND_1]];
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	3368      	adds	r3, #104	; 0x68
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	461a      	mov	r2, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	441a      	add	r2, r3
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	336c      	adds	r3, #108	; 0x6c
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	7811      	ldrb	r1, [r2, #0]
 8005882:	4a56      	ldr	r2, [pc, #344]	; (80059dc <TaskFallManager+0x254>)
 8005884:	54d1      	strb	r1, [r2, r3]
		TabGen[FALL_IND_2]++;
 8005886:	6a3b      	ldr	r3, [r7, #32]
 8005888:	336c      	adds	r3, #108	; 0x6c
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	3201      	adds	r2, #1
 800588e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	3368      	adds	r3, #104	; 0x68
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	3201      	adds	r2, #1
 8005898:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_1] == 400)
 800589a:	6a3b      	ldr	r3, [r7, #32]
 800589c:	3368      	adds	r3, #104	; 0x68
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058a4:	d121      	bne.n	80058ea <TaskFallManager+0x162>
		{
			for (i_full = 0; i_full < 400; i_full++)
 80058a6:	2300      	movs	r3, #0
 80058a8:	82fb      	strh	r3, [r7, #22]
 80058aa:	e012      	b.n	80058d2 <TaskFallManager+0x14a>
			{
				ar_full[i_full] = ar[i_full];
 80058ac:	8afb      	ldrh	r3, [r7, #22]
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	441a      	add	r2, r3
 80058b4:	8afb      	ldrh	r3, [r7, #22]
 80058b6:	8811      	ldrh	r1, [r2, #0]
 80058b8:	4a49      	ldr	r2, [pc, #292]	; (80059e0 <TaskFallManager+0x258>)
 80058ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = y[i_full];
 80058be:	8afb      	ldrh	r3, [r7, #22]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	441a      	add	r2, r3
 80058c4:	8afb      	ldrh	r3, [r7, #22]
 80058c6:	7811      	ldrb	r1, [r2, #0]
 80058c8:	4a46      	ldr	r2, [pc, #280]	; (80059e4 <TaskFallManager+0x25c>)
 80058ca:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 80058cc:	8afb      	ldrh	r3, [r7, #22]
 80058ce:	3301      	adds	r3, #1
 80058d0:	82fb      	strh	r3, [r7, #22]
 80058d2:	8afb      	ldrh	r3, [r7, #22]
 80058d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80058d8:	d3e8      	bcc.n	80058ac <TaskFallManager+0x124>
			}
			TabGen[FALL_IND_1] = 0;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	3368      	adds	r3, #104	; 0x68
 80058de:	2200      	movs	r2, #0
 80058e0:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_3] = 1;
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	3378      	adds	r3, #120	; 0x78
 80058e6:	2201      	movs	r2, #1
 80058e8:	601a      	str	r2, [r3, #0]
		}
	}

	if (TabGen[FALL_COND_1] && 0 <= TabGen[FALL_IND_1]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	3370      	adds	r3, #112	; 0x70
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d06a      	beq.n	80059ca <TaskFallManager+0x242>
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	3368      	adds	r3, #104	; 0x68
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	db65      	blt.n	80059ca <TaskFallManager+0x242>
			&& TabGen[FALL_IND_1] <= 199 && 200 <= TabGen[FALL_IND_2]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	3368      	adds	r3, #104	; 0x68
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2bc7      	cmp	r3, #199	; 0xc7
 8005906:	dc60      	bgt.n	80059ca <TaskFallManager+0x242>
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	336c      	adds	r3, #108	; 0x6c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2bc7      	cmp	r3, #199	; 0xc7
 8005910:	dd5b      	ble.n	80059ca <TaskFallManager+0x242>
			&& TabGen[FALL_IND_2] <= 399)
 8005912:	6a3b      	ldr	r3, [r7, #32]
 8005914:	336c      	adds	r3, #108	; 0x6c
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800591c:	da55      	bge.n	80059ca <TaskFallManager+0x242>
	{ //	cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		arr[TabGen[FALL_IND_2]] = accres;
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	336c      	adds	r3, #108	; 0x6c
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	492c      	ldr	r1, [pc, #176]	; (80059d8 <TaskFallManager+0x250>)
 8005926:	88fa      	ldrh	r2, [r7, #6]
 8005928:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = accy;
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	336c      	adds	r3, #108	; 0x6c
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	492a      	ldr	r1, [pc, #168]	; (80059dc <TaskFallManager+0x254>)
 8005934:	797a      	ldrb	r2, [r7, #5]
 8005936:	54ca      	strb	r2, [r1, r3]
		ar[TabGen[FALL_IND_1]] = arr[TabGen[FALL_IND_2]];
 8005938:	6a3b      	ldr	r3, [r7, #32]
 800593a:	336c      	adds	r3, #108	; 0x6c
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	6a3b      	ldr	r3, [r7, #32]
 8005940:	3368      	adds	r3, #104	; 0x68
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	440b      	add	r3, r1
 800594a:	4923      	ldr	r1, [pc, #140]	; (80059d8 <TaskFallManager+0x250>)
 800594c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005950:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = yy[TabGen[FALL_IND_2]];
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	336c      	adds	r3, #108	; 0x6c
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	3368      	adds	r3, #104	; 0x68
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4619      	mov	r1, r3
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	440b      	add	r3, r1
 8005964:	491d      	ldr	r1, [pc, #116]	; (80059dc <TaskFallManager+0x254>)
 8005966:	5c8a      	ldrb	r2, [r1, r2]
 8005968:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_2]++;
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	336c      	adds	r3, #108	; 0x6c
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	3201      	adds	r2, #1
 8005972:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8005974:	6a3b      	ldr	r3, [r7, #32]
 8005976:	3368      	adds	r3, #104	; 0x68
 8005978:	681a      	ldr	r2, [r3, #0]
 800597a:	3201      	adds	r2, #1
 800597c:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_2] == 400)
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	336c      	adds	r3, #108	; 0x6c
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005988:	d11f      	bne.n	80059ca <TaskFallManager+0x242>
		{
			for (i_full = 0; i_full < 400; i_full++)
 800598a:	2300      	movs	r3, #0
 800598c:	82fb      	strh	r3, [r7, #22]
 800598e:	e010      	b.n	80059b2 <TaskFallManager+0x22a>
			{
				ar_full[i_full] = arr[i_full];
 8005990:	8afa      	ldrh	r2, [r7, #22]
 8005992:	8afb      	ldrh	r3, [r7, #22]
 8005994:	4910      	ldr	r1, [pc, #64]	; (80059d8 <TaskFallManager+0x250>)
 8005996:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 800599a:	4a11      	ldr	r2, [pc, #68]	; (80059e0 <TaskFallManager+0x258>)
 800599c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = yy[i_full];
 80059a0:	8afa      	ldrh	r2, [r7, #22]
 80059a2:	8afb      	ldrh	r3, [r7, #22]
 80059a4:	490d      	ldr	r1, [pc, #52]	; (80059dc <TaskFallManager+0x254>)
 80059a6:	5c89      	ldrb	r1, [r1, r2]
 80059a8:	4a0e      	ldr	r2, [pc, #56]	; (80059e4 <TaskFallManager+0x25c>)
 80059aa:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 80059ac:	8afb      	ldrh	r3, [r7, #22]
 80059ae:	3301      	adds	r3, #1
 80059b0:	82fb      	strh	r3, [r7, #22]
 80059b2:	8afb      	ldrh	r3, [r7, #22]
 80059b4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80059b8:	d3ea      	bcc.n	8005990 <TaskFallManager+0x208>
			}
			TabGen[FALL_IND_2] = 0;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	336c      	adds	r3, #108	; 0x6c
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_4] = 1;
 80059c2:	6a3b      	ldr	r3, [r7, #32]
 80059c4:	337c      	adds	r3, #124	; 0x7c
 80059c6:	2201      	movs	r2, #1
 80059c8:	601a      	str	r2, [r3, #0]
		}
	}
}
 80059ca:	bf00      	nop
 80059cc:	371c      	adds	r7, #28
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000222c 	.word	0x2000222c
 80059dc:	20002f64 	.word	0x20002f64
 80059e0:	200028a4 	.word	0x200028a4
 80059e4:	20003140 	.word	0x20003140

080059e8 <Task_Read_Nemeus>:
extern uint32_t time_network_rep;
extern uint8_t network_state;
extern uint8_t DUAL_STATE_LS;

void Task_Read_Nemeus(void)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
// SIGFOX
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'S')
 80059ee:	4b55      	ldr	r3, [pc, #340]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b2b      	cmp	r3, #43	; 0x2b
 80059f4:	f040 80db 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
 80059f8:	4b52      	ldr	r3, [pc, #328]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 80059fa:	785b      	ldrb	r3, [r3, #1]
 80059fc:	2b53      	cmp	r3, #83	; 0x53
 80059fe:	f040 80d6 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[2] == 'F') && (Rx_bufferNemeus[3] == ':')
 8005a02:	4b50      	ldr	r3, [pc, #320]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a04:	789b      	ldrb	r3, [r3, #2]
 8005a06:	2b46      	cmp	r3, #70	; 0x46
 8005a08:	f040 80d1 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
 8005a0c:	4b4d      	ldr	r3, [pc, #308]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a0e:	78db      	ldrb	r3, [r3, #3]
 8005a10:	2b3a      	cmp	r3, #58	; 0x3a
 8005a12:	f040 80cc 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[4] == ' '))
 8005a16:	4b4b      	ldr	r3, [pc, #300]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a18:	791b      	ldrb	r3, [r3, #4]
 8005a1a:	2b20      	cmp	r3, #32
 8005a1c:	f040 80c7 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
	{
		if ( //
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 8005a20:	4b48      	ldr	r3, [pc, #288]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a22:	795b      	ldrb	r3, [r3, #5]
		if ( //
 8005a24:	2b53      	cmp	r3, #83	; 0x53
 8005a26:	d102      	bne.n	8005a2e <Task_Read_Nemeus+0x46>
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 8005a28:	4b46      	ldr	r3, [pc, #280]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a2a:	799b      	ldrb	r3, [r3, #6]
 8005a2c:	2b4e      	cmp	r3, #78	; 0x4e
		{
			//TabGen[SIGFOX_STATE] = 10;
		}

		if ( //
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 8005a2e:	4b45      	ldr	r3, [pc, #276]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a30:	795b      	ldrb	r3, [r3, #5]
		if ( //
 8005a32:	2b52      	cmp	r3, #82	; 0x52
 8005a34:	f040 80bb 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 8005a38:	4b42      	ldr	r3, [pc, #264]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a3a:	799b      	ldrb	r3, [r3, #6]
 8005a3c:	2b43      	cmp	r3, #67	; 0x43
 8005a3e:	f040 80b6 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[7] == 'V') && (Rx_bufferNemeus[8] == 'B')
 8005a42:	4b40      	ldr	r3, [pc, #256]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a44:	79db      	ldrb	r3, [r3, #7]
 8005a46:	2b56      	cmp	r3, #86	; 0x56
 8005a48:	f040 80b1 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
 8005a4c:	4b3d      	ldr	r3, [pc, #244]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a4e:	7a1b      	ldrb	r3, [r3, #8]
 8005a50:	2b42      	cmp	r3, #66	; 0x42
 8005a52:	f040 80ac 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[9] == 'I') && (Rx_bufferNemeus[10] == 'N'))
 8005a56:	4b3b      	ldr	r3, [pc, #236]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a58:	7a5b      	ldrb	r3, [r3, #9]
 8005a5a:	2b49      	cmp	r3, #73	; 0x49
 8005a5c:	f040 80a7 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
 8005a60:	4b38      	ldr	r3, [pc, #224]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a62:	7a9b      	ldrb	r3, [r3, #10]
 8005a64:	2b4e      	cmp	r3, #78	; 0x4e
 8005a66:	f040 80a2 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
		{
			if (  //
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 8005a6a:	4b36      	ldr	r3, [pc, #216]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a6c:	7b1b      	ldrb	r3, [r3, #12]
			if (  //
 8005a6e:	2b31      	cmp	r3, #49	; 0x31
 8005a70:	f040 809d 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 8005a74:	4b33      	ldr	r3, [pc, #204]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a76:	7b5b      	ldrb	r3, [r3, #13]
 8005a78:	2b32      	cmp	r3, #50	; 0x32
 8005a7a:	f040 8098 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[14] == '3')
 8005a7e:	4b31      	ldr	r3, [pc, #196]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a80:	7b9b      	ldrb	r3, [r3, #14]
 8005a82:	2b33      	cmp	r3, #51	; 0x33
 8005a84:	f040 8093 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[15] == '4'))
 8005a88:	4b2e      	ldr	r3, [pc, #184]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005a8a:	7bdb      	ldrb	r3, [r3, #15]
 8005a8c:	2b34      	cmp	r3, #52	; 0x34
 8005a8e:	f040 808e 	bne.w	8005bae <Task_Read_Nemeus+0x1c6>
			{
				uint8_t nbcomma = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	73fb      	strb	r3, [r7, #15]
				uint8_t nbchar = 0;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73bb      	strb	r3, [r7, #14]

				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 8005a9a:	e00a      	b.n	8005ab2 <Task_Read_Nemeus+0xca>
				{
					if (Rx_bufferNemeus[nbchar] == ',')
 8005a9c:	7bbb      	ldrb	r3, [r7, #14]
 8005a9e:	4a29      	ldr	r2, [pc, #164]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005aa0:	5cd3      	ldrb	r3, [r2, r3]
 8005aa2:	2b2c      	cmp	r3, #44	; 0x2c
 8005aa4:	d102      	bne.n	8005aac <Task_Read_Nemeus+0xc4>
						nbcomma++;
 8005aa6:	7bfb      	ldrb	r3, [r7, #15]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
					nbchar++;
 8005aac:	7bbb      	ldrb	r3, [r7, #14]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	73bb      	strb	r3, [r7, #14]
				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d802      	bhi.n	8005abe <Task_Read_Nemeus+0xd6>
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2bc8      	cmp	r3, #200	; 0xc8
 8005abc:	d9ee      	bls.n	8005a9c <Task_Read_Nemeus+0xb4>
				}

				if (Rx_bufferNemeus[nbchar] == '-') // RSSI AVAILABLE
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005ac2:	5cd3      	ldrb	r3, [r2, r3]
 8005ac4:	2b2d      	cmp	r3, #45	; 0x2d
 8005ac6:	d172      	bne.n	8005bae <Task_Read_Nemeus+0x1c6>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005ac8:	2064      	movs	r0, #100	; 0x64
 8005aca:	f7fc fe4b 	bl	8002764 <PowerVib>
#endif

					if (DUAL_STATE_LS == ACK_SF_PENDING)
 8005ace:	4b1e      	ldr	r3, [pc, #120]	; (8005b48 <Task_Read_Nemeus+0x160>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d10a      	bne.n	8005aec <Task_Read_Nemeus+0x104>
					{
						//SendOnMessSigfox(1);
						TabTimer[ACK_TIMER] = HAL_GetTick();
 8005ad6:	f004 fcbf 	bl	800a458 <HAL_GetTick>
 8005ada:	4603      	mov	r3, r0
 8005adc:	4a1b      	ldr	r2, [pc, #108]	; (8005b4c <Task_Read_Nemeus+0x164>)
 8005ade:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8005ae0:	4b1b      	ldr	r3, [pc, #108]	; (8005b50 <Task_Read_Nemeus+0x168>)
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 8005ae6:	4b18      	ldr	r3, [pc, #96]	; (8005b48 <Task_Read_Nemeus+0x160>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]

					}

					if (DUAL_STATE_LS == ACK_SF_PENDING_2)
 8005aec:	4b16      	ldr	r3, [pc, #88]	; (8005b48 <Task_Read_Nemeus+0x160>)
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d10c      	bne.n	8005b0e <Task_Read_Nemeus+0x126>
					{
						TabTimer[ACK_TIMER] = HAL_GetTick();
 8005af4:	f004 fcb0 	bl	800a458 <HAL_GetTick>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4a14      	ldr	r2, [pc, #80]	; (8005b4c <Task_Read_Nemeus+0x164>)
 8005afc:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8005afe:	4b14      	ldr	r3, [pc, #80]	; (8005b50 <Task_Read_Nemeus+0x168>)
 8005b00:	2201      	movs	r2, #1
 8005b02:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 8005b04:	4b10      	ldr	r3, [pc, #64]	; (8005b48 <Task_Read_Nemeus+0x160>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
						LoraWanOn();
 8005b0a:	f7fe f92f 	bl	8003d6c <LoraWanOn>
					}

					//RebootNemeusLS(TabGen);

					if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 8005b0e:	7bbb      	ldrb	r3, [r7, #14]
 8005b10:	3303      	adds	r3, #3
 8005b12:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005b14:	5cd3      	ldrb	r3, [r2, r3]
 8005b16:	2b2e      	cmp	r3, #46	; 0x2e
 8005b18:	d11c      	bne.n	8005b54 <Task_Read_Nemeus+0x16c>
					{
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 8005b1a:	7bbb      	ldrb	r3, [r7, #14]
 8005b1c:	3301      	adds	r3, #1
 8005b1e:	4a09      	ldr	r2, [pc, #36]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005b20:	5cd3      	ldrb	r3, [r2, r3]
 8005b22:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
								- '0') * 10
 8005b26:	4613      	mov	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	4413      	add	r3, r2
 8005b2c:	005b      	lsls	r3, r3, #1
 8005b2e:	4619      	mov	r1, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0');
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	3302      	adds	r3, #2
 8005b34:	4a03      	ldr	r2, [pc, #12]	; (8005b44 <Task_Read_Nemeus+0x15c>)
 8005b36:	5cd3      	ldrb	r3, [r2, r3]
 8005b38:	3b30      	subs	r3, #48	; 0x30
 8005b3a:	440b      	add	r3, r1
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 8005b3c:	4a04      	ldr	r2, [pc, #16]	; (8005b50 <Task_Read_Nemeus+0x168>)
 8005b3e:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8005b42:	e034      	b.n	8005bae <Task_Read_Nemeus+0x1c6>
 8005b44:	200027b0 	.word	0x200027b0
 8005b48:	20000b7f 	.word	0x20000b7f
 8005b4c:	20002878 	.word	0x20002878
 8005b50:	20002550 	.word	0x20002550
					}
					else // 3 digits => -XXX.XX
					{
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	3301      	adds	r3, #1
 8005b58:	4a98      	ldr	r2, [pc, #608]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
								- '0') * 100
 8005b5c:	3b30      	subs	r3, #48	; 0x30
 8005b5e:	2264      	movs	r2, #100	; 0x64
 8005b60:	fb02 f103 	mul.w	r1, r2, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	3302      	adds	r3, #2
 8005b68:	4a94      	ldr	r2, [pc, #592]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005b6a:	5cd3      	ldrb	r3, [r2, r3]
 8005b6c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	18ca      	adds	r2, r1, r3
								+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 8005b7a:	7bbb      	ldrb	r3, [r7, #14]
 8005b7c:	3303      	adds	r3, #3
 8005b7e:	498f      	ldr	r1, [pc, #572]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005b80:	5ccb      	ldrb	r3, [r1, r3]
 8005b82:	3b30      	subs	r3, #48	; 0x30
 8005b84:	4413      	add	r3, r2
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 8005b86:	425b      	negs	r3, r3
 8005b88:	4a8d      	ldr	r2, [pc, #564]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005b8a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

						if (TabGen[SIGFOX_RSSI] <= -150
 8005b8e:	4b8c      	ldr	r3, [pc, #560]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005b90:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005b94:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8005b98:	da09      	bge.n	8005bae <Task_Read_Nemeus+0x1c6>
								&& TabGen[SIGFOX_RSSI] >= -10)
 8005b9a:	4b89      	ldr	r3, [pc, #548]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005b9c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005ba0:	f113 0f0a 	cmn.w	r3, #10
 8005ba4:	db03      	blt.n	8005bae <Task_Read_Nemeus+0x1c6>
						{
							TabGen[SIGFOX_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 8005ba6:	4b86      	ldr	r3, [pc, #536]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			}
		}
	}

	// LORA (Orange or Objenious)
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'M')
 8005bae:	4b83      	ldr	r3, [pc, #524]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b2b      	cmp	r3, #43	; 0x2b
 8005bb4:	f040 817e 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
 8005bb8:	4b80      	ldr	r3, [pc, #512]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	2b4d      	cmp	r3, #77	; 0x4d
 8005bbe:	f040 8179 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[2] == 'A') && (Rx_bufferNemeus[3] == 'C')
 8005bc2:	4b7e      	ldr	r3, [pc, #504]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bc4:	789b      	ldrb	r3, [r3, #2]
 8005bc6:	2b41      	cmp	r3, #65	; 0x41
 8005bc8:	f040 8174 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
 8005bcc:	4b7b      	ldr	r3, [pc, #492]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bce:	78db      	ldrb	r3, [r3, #3]
 8005bd0:	2b43      	cmp	r3, #67	; 0x43
 8005bd2:	f040 816f 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[4] == ':'))
 8005bd6:	4b79      	ldr	r3, [pc, #484]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bd8:	791b      	ldrb	r3, [r3, #4]
 8005bda:	2b3a      	cmp	r3, #58	; 0x3a
 8005bdc:	f040 816a 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
	{
		if ((Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'D')
 8005be0:	4b76      	ldr	r3, [pc, #472]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005be2:	799b      	ldrb	r3, [r3, #6]
 8005be4:	2b52      	cmp	r3, #82	; 0x52
 8005be6:	d155      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
 8005be8:	4b74      	ldr	r3, [pc, #464]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bea:	79db      	ldrb	r3, [r3, #7]
 8005bec:	2b44      	cmp	r3, #68	; 0x44
 8005bee:	d151      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[8] == 'E') && (Rx_bufferNemeus[9] == 'V')
 8005bf0:	4b72      	ldr	r3, [pc, #456]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bf2:	7a1b      	ldrb	r3, [r3, #8]
 8005bf4:	2b45      	cmp	r3, #69	; 0x45
 8005bf6:	d14d      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
 8005bf8:	4b70      	ldr	r3, [pc, #448]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005bfa:	7a5b      	ldrb	r3, [r3, #9]
 8005bfc:	2b56      	cmp	r3, #86	; 0x56
 8005bfe:	d149      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[10] == 'A') && (Rx_bufferNemeus[11] == 'D'))
 8005c00:	4b6e      	ldr	r3, [pc, #440]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c02:	7a9b      	ldrb	r3, [r3, #10]
 8005c04:	2b41      	cmp	r3, #65	; 0x41
 8005c06:	d145      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
 8005c08:	4b6c      	ldr	r3, [pc, #432]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c0a:	7adb      	ldrb	r3, [r3, #11]
 8005c0c:	2b44      	cmp	r3, #68	; 0x44
 8005c0e:	d141      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
		{
			if (  //
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 8005c10:	4b6a      	ldr	r3, [pc, #424]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c12:	7bdb      	ldrb	r3, [r3, #15]
			if (  //
 8005c14:	2b30      	cmp	r3, #48	; 0x30
 8005c16:	d11b      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 8005c18:	4b68      	ldr	r3, [pc, #416]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c1a:	7c1b      	ldrb	r3, [r3, #16]
 8005c1c:	2b30      	cmp	r3, #48	; 0x30
 8005c1e:	d117      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[17] != '0')
 8005c20:	4b66      	ldr	r3, [pc, #408]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c22:	7c5b      	ldrb	r3, [r3, #17]
 8005c24:	2b30      	cmp	r3, #48	; 0x30
 8005c26:	d113      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[18] != '0')
 8005c28:	4b64      	ldr	r3, [pc, #400]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c2a:	7c9b      	ldrb	r3, [r3, #18]
 8005c2c:	2b30      	cmp	r3, #48	; 0x30
 8005c2e:	d10f      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[19] != '0')
 8005c30:	4b62      	ldr	r3, [pc, #392]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c32:	7cdb      	ldrb	r3, [r3, #19]
 8005c34:	2b30      	cmp	r3, #48	; 0x30
 8005c36:	d10b      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[20] != '0')
 8005c38:	4b60      	ldr	r3, [pc, #384]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c3a:	7d1b      	ldrb	r3, [r3, #20]
 8005c3c:	2b30      	cmp	r3, #48	; 0x30
 8005c3e:	d107      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[21] != '0')
 8005c40:	4b5e      	ldr	r3, [pc, #376]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c42:	7d5b      	ldrb	r3, [r3, #21]
 8005c44:	2b30      	cmp	r3, #48	; 0x30
 8005c46:	d103      	bne.n	8005c50 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[22] != '0'))
 8005c48:	4b5c      	ldr	r3, [pc, #368]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c4a:	7d9b      	ldrb	r3, [r3, #22]
 8005c4c:	2b30      	cmp	r3, #48	; 0x30
 8005c4e:	d021      	beq.n	8005c94 <Task_Read_Nemeus+0x2ac>
			{
				// --'UN'SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 8005c50:	4b5b      	ldr	r3, [pc, #364]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005c52:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d11c      	bne.n	8005c94 <Task_Read_Nemeus+0x2ac>
				{
					HAL_Delay(500);
 8005c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c5e:	f004 fc07 	bl	800a470 <HAL_Delay>
					SendOnLora();
 8005c62:	f7fe f88a 	bl	8003d7a <SendOnLora>

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005c66:	2064      	movs	r0, #100	; 0x64
 8005c68:	f7fc fd7c 	bl	8002764 <PowerVib>
#endif
					AskJoinTimeLoraWan = HAL_GetTick();
 8005c6c:	f004 fbf4 	bl	800a458 <HAL_GetTick>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4a54      	ldr	r2, [pc, #336]	; (8005dc4 <Task_Read_Nemeus+0x3dc>)
 8005c74:	6013      	str	r3, [r2, #0]

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8005c76:	f004 fbef 	bl	800a458 <HAL_GetTick>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	4a52      	ldr	r2, [pc, #328]	; (8005dc8 <Task_Read_Nemeus+0x3e0>)
 8005c7e:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8005c80:	4b4f      	ldr	r3, [pc, #316]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005c82:	2201      	movs	r2, #1
 8005c84:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 8005c86:	4b4e      	ldr	r3, [pc, #312]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 8005c8e:	4b4f      	ldr	r3, [pc, #316]	; (8005dcc <Task_Read_Nemeus+0x3e4>)
 8005c90:	2202      	movs	r2, #2
 8005c92:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		if ((Rx_bufferNemeus[14] == ',' && Rx_bufferNemeus[6] != 'R')
 8005c94:	4b49      	ldr	r3, [pc, #292]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c96:	7b9b      	ldrb	r3, [r3, #14]
 8005c98:	2b2c      	cmp	r3, #44	; 0x2c
 8005c9a:	d103      	bne.n	8005ca4 <Task_Read_Nemeus+0x2bc>
 8005c9c:	4b47      	ldr	r3, [pc, #284]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005c9e:	799b      	ldrb	r3, [r3, #6]
 8005ca0:	2b52      	cmp	r3, #82	; 0x52
 8005ca2:	d103      	bne.n	8005cac <Task_Read_Nemeus+0x2c4>
				|| GA_Nem == 1)
 8005ca4:	4b4a      	ldr	r3, [pc, #296]	; (8005dd0 <Task_Read_Nemeus+0x3e8>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d141      	bne.n	8005d30 <Task_Read_Nemeus+0x348>
		{
			if (  //
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 8005cac:	4b43      	ldr	r3, [pc, #268]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cae:	799b      	ldrb	r3, [r3, #6]
			if (  //
 8005cb0:	2b30      	cmp	r3, #48	; 0x30
 8005cb2:	d11b      	bne.n	8005cec <Task_Read_Nemeus+0x304>
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 8005cb4:	4b41      	ldr	r3, [pc, #260]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cb6:	79db      	ldrb	r3, [r3, #7]
 8005cb8:	2b30      	cmp	r3, #48	; 0x30
 8005cba:	d117      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[8] != '0')
 8005cbc:	4b3f      	ldr	r3, [pc, #252]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cbe:	7a1b      	ldrb	r3, [r3, #8]
 8005cc0:	2b30      	cmp	r3, #48	; 0x30
 8005cc2:	d113      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[9] != '0')
 8005cc4:	4b3d      	ldr	r3, [pc, #244]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cc6:	7a5b      	ldrb	r3, [r3, #9]
 8005cc8:	2b30      	cmp	r3, #48	; 0x30
 8005cca:	d10f      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[10] != '0')
 8005ccc:	4b3b      	ldr	r3, [pc, #236]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cce:	7a9b      	ldrb	r3, [r3, #10]
 8005cd0:	2b30      	cmp	r3, #48	; 0x30
 8005cd2:	d10b      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[11] != '0')
 8005cd4:	4b39      	ldr	r3, [pc, #228]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cd6:	7adb      	ldrb	r3, [r3, #11]
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d107      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[12] != '0')
 8005cdc:	4b37      	ldr	r3, [pc, #220]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005cde:	7b1b      	ldrb	r3, [r3, #12]
 8005ce0:	2b30      	cmp	r3, #48	; 0x30
 8005ce2:	d103      	bne.n	8005cec <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[13] != '0'))
 8005ce4:	4b35      	ldr	r3, [pc, #212]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005ce6:	7b5b      	ldrb	r3, [r3, #13]
 8005ce8:	2b30      	cmp	r3, #48	; 0x30
 8005cea:	d021      	beq.n	8005d30 <Task_Read_Nemeus+0x348>
			{
				// SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 8005cec:	4b34      	ldr	r3, [pc, #208]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005cee:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005cf2:	2b01      	cmp	r3, #1
 8005cf4:	d11c      	bne.n	8005d30 <Task_Read_Nemeus+0x348>
				{
					HAL_Delay(500);
 8005cf6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cfa:	f004 fbb9 	bl	800a470 <HAL_Delay>
					SendOnLora();
 8005cfe:	f7fe f83c 	bl	8003d7a <SendOnLora>

					AskJoinTimeLoraWan = HAL_GetTick();
 8005d02:	f004 fba9 	bl	800a458 <HAL_GetTick>
 8005d06:	4603      	mov	r3, r0
 8005d08:	4a2e      	ldr	r2, [pc, #184]	; (8005dc4 <Task_Read_Nemeus+0x3dc>)
 8005d0a:	6013      	str	r3, [r2, #0]

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005d0c:	2064      	movs	r0, #100	; 0x64
 8005d0e:	f7fc fd29 	bl	8002764 <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8005d12:	f004 fba1 	bl	800a458 <HAL_GetTick>
 8005d16:	4603      	mov	r3, r0
 8005d18:	4a2b      	ldr	r2, [pc, #172]	; (8005dc8 <Task_Read_Nemeus+0x3e0>)
 8005d1a:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8005d1c:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 8005d22:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <Task_Read_Nemeus+0x3d8>)
 8005d24:	2202      	movs	r2, #2
 8005d26:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 8005d2a:	4b28      	ldr	r3, [pc, #160]	; (8005dcc <Task_Read_Nemeus+0x3e4>)
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if ( //
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 8005d30:	4b22      	ldr	r3, [pc, #136]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d32:	799b      	ldrb	r3, [r3, #6]
		if ( //
 8005d34:	2b52      	cmp	r3, #82	; 0x52
 8005d36:	f040 80bd 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 8005d3a:	4b20      	ldr	r3, [pc, #128]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d3c:	79db      	ldrb	r3, [r3, #7]
 8005d3e:	2b43      	cmp	r3, #67	; 0x43
 8005d40:	f040 80b8 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[8] == 'V') && (Rx_bufferNemeus[9] == 'B')
 8005d44:	4b1d      	ldr	r3, [pc, #116]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d46:	7a1b      	ldrb	r3, [r3, #8]
 8005d48:	2b56      	cmp	r3, #86	; 0x56
 8005d4a:	f040 80b3 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
 8005d4e:	4b1b      	ldr	r3, [pc, #108]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d50:	7a5b      	ldrb	r3, [r3, #9]
 8005d52:	2b42      	cmp	r3, #66	; 0x42
 8005d54:	f040 80ae 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[10] == 'I') && (Rx_bufferNemeus[11] == 'N'))
 8005d58:	4b18      	ldr	r3, [pc, #96]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d5a:	7a9b      	ldrb	r3, [r3, #10]
 8005d5c:	2b49      	cmp	r3, #73	; 0x49
 8005d5e:	f040 80a9 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
 8005d62:	4b16      	ldr	r3, [pc, #88]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d64:	7adb      	ldrb	r3, [r3, #11]
 8005d66:	2b4e      	cmp	r3, #78	; 0x4e
 8005d68:	f040 80a4 	bne.w	8005eb4 <Task_Read_Nemeus+0x4cc>
		{

			uint8_t nbcomma = 0;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	737b      	strb	r3, [r7, #13]
			uint8_t nbchar = 0;
 8005d70:	2300      	movs	r3, #0
 8005d72:	733b      	strb	r3, [r7, #12]
			uint8_t pending_downlink = 0;
 8005d74:	2300      	movs	r3, #0
 8005d76:	70fb      	strb	r3, [r7, #3]

			// PARSING ',' to look for RSSI
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8005d78:	e012      	b.n	8005da0 <Task_Read_Nemeus+0x3b8>
			{
				if (Rx_bufferNemeus[nbchar] == ',')
 8005d7a:	7b3b      	ldrb	r3, [r7, #12]
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <Task_Read_Nemeus+0x3d4>)
 8005d7e:	5cd3      	ldrb	r3, [r2, r3]
 8005d80:	2b2c      	cmp	r3, #44	; 0x2c
 8005d82:	d102      	bne.n	8005d8a <Task_Read_Nemeus+0x3a2>
					nbcomma++;
 8005d84:	7b7b      	ldrb	r3, [r7, #13]
 8005d86:	3301      	adds	r3, #1
 8005d88:	737b      	strb	r3, [r7, #13]
				if (nbcomma == 2)
 8005d8a:	7b7b      	ldrb	r3, [r7, #13]
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d104      	bne.n	8005d9a <Task_Read_Nemeus+0x3b2>
					if (nbchar + 1 == 't')
 8005d90:	7b3b      	ldrb	r3, [r7, #12]
 8005d92:	2b73      	cmp	r3, #115	; 0x73
 8005d94:	d101      	bne.n	8005d9a <Task_Read_Nemeus+0x3b2>
						pending_downlink = 1; // not use, never true
 8005d96:	2301      	movs	r3, #1
 8005d98:	70fb      	strb	r3, [r7, #3]

				nbchar++;
 8005d9a:	7b3b      	ldrb	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	733b      	strb	r3, [r7, #12]
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8005da0:	7b7b      	ldrb	r3, [r7, #13]
 8005da2:	2b03      	cmp	r3, #3
 8005da4:	d802      	bhi.n	8005dac <Task_Read_Nemeus+0x3c4>
 8005da6:	7b3b      	ldrb	r3, [r7, #12]
 8005da8:	2bc8      	cmp	r3, #200	; 0xc8
 8005daa:	d9e6      	bls.n	8005d7a <Task_Read_Nemeus+0x392>
			}

			// TESTING LORA SUCCESSFUL, TIME TO TEST SIGFOX
			if (DUAL_STATE_LS == ACK_LORA_PENDING)
 8005dac:	4b07      	ldr	r3, [pc, #28]	; (8005dcc <Task_Read_Nemeus+0x3e4>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d122      	bne.n	8005dfa <Task_Read_Nemeus+0x412>
			{
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005db4:	2300      	movs	r3, #0
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	e014      	b.n	8005de4 <Task_Read_Nemeus+0x3fc>
 8005dba:	bf00      	nop
 8005dbc:	200027b0 	.word	0x200027b0
 8005dc0:	20002550 	.word	0x20002550
 8005dc4:	20000b9c 	.word	0x20000b9c
 8005dc8:	20002878 	.word	0x20002878
 8005dcc:	20000b7f 	.word	0x20000b7f
 8005dd0:	20000b88 	.word	0x20000b88
				{
					Rx_Nemeus[i_fct] = 0;
 8005dd4:	4a43      	ldr	r2, [pc, #268]	; (8005ee4 <Task_Read_Nemeus+0x4fc>)
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	4413      	add	r3, r2
 8005dda:	2200      	movs	r2, #0
 8005ddc:	701a      	strb	r2, [r3, #0]
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	3301      	adds	r3, #1
 8005de2:	60bb      	str	r3, [r7, #8]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	2bc7      	cmp	r3, #199	; 0xc7
 8005de8:	ddf4      	ble.n	8005dd4 <Task_Read_Nemeus+0x3ec>
				}

				DUAL_STATE_LS = SF_DELAY_ON;
 8005dea:	4b3f      	ldr	r3, [pc, #252]	; (8005ee8 <Task_Read_Nemeus+0x500>)
 8005dec:	2203      	movs	r2, #3
 8005dee:	701a      	strb	r2, [r3, #0]
				AskJoinTimeLoraWan = HAL_GetTick();
 8005df0:	f004 fb32 	bl	800a458 <HAL_GetTick>
 8005df4:	4603      	mov	r3, r0
 8005df6:	4a3d      	ldr	r2, [pc, #244]	; (8005eec <Task_Read_Nemeus+0x504>)
 8005df8:	6013      	str	r3, [r2, #0]

			}

			// IF THERE IS A '-' IT MEANS THE MESSAGE IS RECEIVED FROM AN ANTENNA
			if (Rx_bufferNemeus[nbchar] == '-')	//if (Rx_Nemeus[22] == '-')
 8005dfa:	7b3b      	ldrb	r3, [r7, #12]
 8005dfc:	4a3c      	ldr	r2, [pc, #240]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005dfe:	5cd3      	ldrb	r3, [r2, r3]
 8005e00:	2b2d      	cmp	r3, #45	; 0x2d
 8005e02:	d157      	bne.n	8005eb4 <Task_Read_Nemeus+0x4cc>
//						TabGen[ALERT_PENDING] = 0;
//						TabGen[SIGFOX_SEND] = 0;
//						TabGen[ALERT_PENDING] = 0;
//					}

				if (TabGen[LORAWAN_RSSI] == 0)
 8005e04:	4b3b      	ldr	r3, [pc, #236]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005e06:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <Task_Read_Nemeus+0x43c>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005e0e:	2064      	movs	r0, #100	; 0x64
 8005e10:	f7fc fca8 	bl	8002764 <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8005e14:	f004 fb20 	bl	800a458 <HAL_GetTick>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	4a37      	ldr	r2, [pc, #220]	; (8005ef8 <Task_Read_Nemeus+0x510>)
 8005e1c:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8005e1e:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	651a      	str	r2, [r3, #80]	; 0x50
				}

				if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 8005e24:	7b3b      	ldrb	r3, [r7, #12]
 8005e26:	3303      	adds	r3, #3
 8005e28:	4a31      	ldr	r2, [pc, #196]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e2a:	5cd3      	ldrb	r3, [r2, r3]
 8005e2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005e2e:	d114      	bne.n	8005e5a <Task_Read_Nemeus+0x472>
				{
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 8005e30:	7b3b      	ldrb	r3, [r7, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a2e      	ldr	r2, [pc, #184]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e36:	5cd3      	ldrb	r3, [r2, r3]
 8005e38:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
							* 10 + (Rx_bufferNemeus[nbchar + 2] - '0');
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4619      	mov	r1, r3
 8005e46:	7b3b      	ldrb	r3, [r7, #12]
 8005e48:	3302      	adds	r3, #2
 8005e4a:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e4c:	5cd3      	ldrb	r3, [r2, r3]
 8005e4e:	3b30      	subs	r3, #48	; 0x30
 8005e50:	440b      	add	r3, r1
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 8005e52:	4a28      	ldr	r2, [pc, #160]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005e54:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8005e58:	e02c      	b.n	8005eb4 <Task_Read_Nemeus+0x4cc>
				}
				else // 3 digits => -XXX.XX
				{
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 8005e5a:	7b3b      	ldrb	r3, [r7, #12]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	4a24      	ldr	r2, [pc, #144]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e60:	5cd3      	ldrb	r3, [r2, r3]
 8005e62:	3b30      	subs	r3, #48	; 0x30
							* 100 + (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 8005e64:	2264      	movs	r2, #100	; 0x64
 8005e66:	fb02 f103 	mul.w	r1, r2, r3
 8005e6a:	7b3b      	ldrb	r3, [r7, #12]
 8005e6c:	3302      	adds	r3, #2
 8005e6e:	4a20      	ldr	r2, [pc, #128]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e70:	5cd3      	ldrb	r3, [r2, r3]
 8005e72:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	18ca      	adds	r2, r1, r3
							+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 8005e80:	7b3b      	ldrb	r3, [r7, #12]
 8005e82:	3303      	adds	r3, #3
 8005e84:	491a      	ldr	r1, [pc, #104]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005e86:	5ccb      	ldrb	r3, [r1, r3]
 8005e88:	3b30      	subs	r3, #48	; 0x30
 8005e8a:	4413      	add	r3, r2
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 8005e8c:	425b      	negs	r3, r3
 8005e8e:	4a19      	ldr	r2, [pc, #100]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005e90:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c

					if (TabGen[LORAWAN_RSSI] <= -150
 8005e94:	4b17      	ldr	r3, [pc, #92]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005e96:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005e9a:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8005e9e:	da09      	bge.n	8005eb4 <Task_Read_Nemeus+0x4cc>
							&& TabGen[LORAWAN_RSSI] >= -10)
 8005ea0:	4b14      	ldr	r3, [pc, #80]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005ea2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005ea6:	f113 0f0a 	cmn.w	r3, #10
 8005eaa:	db03      	blt.n	8005eb4 <Task_Read_Nemeus+0x4cc>
					{
						TabGen[LORAWAN_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <Task_Read_Nemeus+0x50c>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
//				}
		}
	}

	// CLEAR DMA BUFFER
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	607b      	str	r3, [r7, #4]
 8005eb8:	e00c      	b.n	8005ed4 <Task_Read_Nemeus+0x4ec>
	{
		Rx_Nemeus[i_fct] = 0;
 8005eba:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <Task_Read_Nemeus+0x4fc>)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
		Rx_bufferNemeus[i_fct] = 0;
 8005ec4:	4a0a      	ldr	r2, [pc, #40]	; (8005ef0 <Task_Read_Nemeus+0x508>)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4413      	add	r3, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	607b      	str	r3, [r7, #4]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2bc7      	cmp	r3, #199	; 0xc7
 8005ed8:	ddef      	ble.n	8005eba <Task_Read_Nemeus+0x4d2>
	}
}
 8005eda:	bf00      	nop
 8005edc:	bf00      	nop
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20001e14 	.word	0x20001e14
 8005ee8:	20000b7f 	.word	0x20000b7f
 8005eec:	20000b9c 	.word	0x20000b9c
 8005ef0:	200027b0 	.word	0x200027b0
 8005ef4:	20002550 	.word	0x20002550
 8005ef8:	20002878 	.word	0x20002878

08005efc <Battery_Charger_Management>:
extern volatile uint8_t Flag[];
extern uint8_t USB_In_Event;
extern float TabFloatValue[];

void Battery_Charger_Management(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
	if (Flag[F_CHARGER] == 1)
 8005f02:	4b37      	ldr	r3, [pc, #220]	; (8005fe0 <Battery_Charger_Management+0xe4>)
 8005f04:	785b      	ldrb	r3, [r3, #1]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d165      	bne.n	8005fd8 <Battery_Charger_Management+0xdc>
	{
		Flag[F_CHARGER] = 0;
 8005f0c:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <Battery_Charger_Management+0xe4>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	705a      	strb	r2, [r3, #1]
		TaskCharger(TabGen);
 8005f12:	4834      	ldr	r0, [pc, #208]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f14:	f7fe fb0a 	bl	800452c <TaskCharger>
		if (TabGen[CHARGEC] == 0)
 8005f18:	4b32      	ldr	r3, [pc, #200]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d127      	bne.n	8005f72 <Battery_Charger_Management+0x76>
		{
			if (USB_In_Event == 1)
 8005f22:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <Battery_Charger_Management+0xec>)
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d123      	bne.n	8005f72 <Battery_Charger_Management+0x76>
			{
				USB_In_Event = 0;
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <Battery_Charger_Management+0xec>)
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 8005f30:	4b2c      	ldr	r3, [pc, #176]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f32:	2201      	movs	r2, #1
 8005f34:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 8005f36:	2032      	movs	r0, #50	; 0x32
 8005f38:	f7fc fc14 	bl	8002764 <PowerVib>

				TabGen[ALERT_ON] = 0; // clear alert
 8005f3c:	4b29      	ldr	r3, [pc, #164]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 8005f42:	4b28      	ldr	r3, [pc, #160]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	63da      	str	r2, [r3, #60]	; 0x3c
				TabGen[NS_IMMO] = 0;
 8005f48:	4b26      	ldr	r3, [pc, #152]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
				for (uint8_t i = 0; i < NB_ALERT; i++)
 8005f4e:	2300      	movs	r3, #0
 8005f50:	71fb      	strb	r3, [r7, #7]
 8005f52:	e007      	b.n	8005f64 <Battery_Charger_Management+0x68>
					TabAlert[i] = 0;
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	4a25      	ldr	r2, [pc, #148]	; (8005fec <Battery_Charger_Management+0xf0>)
 8005f58:	2100      	movs	r1, #0
 8005f5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i = 0; i < NB_ALERT; i++)
 8005f5e:	79fb      	ldrb	r3, [r7, #7]
 8005f60:	3301      	adds	r3, #1
 8005f62:	71fb      	strb	r3, [r7, #7]
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	2b0d      	cmp	r3, #13
 8005f68:	d9f4      	bls.n	8005f54 <Battery_Charger_Management+0x58>
				TabGen[TYPE_ALERT] = NONE_ALERT;
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			}
		}
		if (TabGen[CHARGEC] == 1)
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d12d      	bne.n	8005fd8 <Battery_Charger_Management+0xdc>
		{
			if (USB_In_Event == 0)
 8005f7c:	4b1a      	ldr	r3, [pc, #104]	; (8005fe8 <Battery_Charger_Management+0xec>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d108      	bne.n	8005f96 <Battery_Charger_Management+0x9a>
			{
				USB_In_Event = 1;
 8005f84:	4b18      	ldr	r3, [pc, #96]	; (8005fe8 <Battery_Charger_Management+0xec>)
 8005f86:	2201      	movs	r2, #1
 8005f88:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 8005f90:	2032      	movs	r0, #50	; 0x32
 8005f92:	f7fc fbe7 	bl	8002764 <PowerVib>
			}
			TabGen[ALERT_ON] = 0; // clear alert
 8005f96:	4b13      	ldr	r3, [pc, #76]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 8005f9c:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	63da      	str	r2, [r3, #60]	; 0x3c
			TabGen[NS_IMMO] = 0;
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	641a      	str	r2, [r3, #64]	; 0x40
			for (uint8_t i = 0; i < NB_ALERT; i++)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	71bb      	strb	r3, [r7, #6]
 8005fac:	e007      	b.n	8005fbe <Battery_Charger_Management+0xc2>
				TabAlert[i] = 0;
 8005fae:	79bb      	ldrb	r3, [r7, #6]
 8005fb0:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <Battery_Charger_Management+0xf0>)
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t i = 0; i < NB_ALERT; i++)
 8005fb8:	79bb      	ldrb	r3, [r7, #6]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	71bb      	strb	r3, [r7, #6]
 8005fbe:	79bb      	ldrb	r3, [r7, #6]
 8005fc0:	2b0d      	cmp	r3, #13
 8005fc2:	d9f4      	bls.n	8005fae <Battery_Charger_Management+0xb2>
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8005fc4:	4b07      	ldr	r3, [pc, #28]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <Battery_Charger_Management+0xf4>)
 8005fce:	4a09      	ldr	r2, [pc, #36]	; (8005ff4 <Battery_Charger_Management+0xf8>)
 8005fd0:	4904      	ldr	r1, [pc, #16]	; (8005fe4 <Battery_Charger_Management+0xe8>)
 8005fd2:	4806      	ldr	r0, [pc, #24]	; (8005fec <Battery_Charger_Management+0xf0>)
 8005fd4:	f7fe fcbe 	bl	8004954 <TaskAlertAll>
		if (low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT - 10)
			TabGen[RE_ON_SCREEN] = 1;
	}

#endif
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20002c40 	.word	0x20002c40
 8005fe4:	20002550 	.word	0x20002550
 8005fe8:	20000b84 	.word	0x20000b84
 8005fec:	20003100 	.word	0x20003100
 8005ff0:	20002be4 	.word	0x20002be4
 8005ff4:	20001f50 	.word	0x20001f50

08005ff8 <GPS_Management>:

void GPS_Management(void)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	if (TabGen[FORCE_GPS] == 1)
 8005ffc:	4b36      	ldr	r3, [pc, #216]	; (80060d8 <GPS_Management+0xe0>)
 8005ffe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d106      	bne.n	8006014 <GPS_Management+0x1c>
	{
		TabGen[GPS_ON] = 1;
 8006006:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <GPS_Management+0xe0>)
 8006008:	2201      	movs	r2, #1
 800600a:	605a      	str	r2, [r3, #4]
		TabGen[FORCE_GPS] = 0;
 800600c:	4b32      	ldr	r3, [pc, #200]	; (80060d8 <GPS_Management+0xe0>)
 800600e:	2200      	movs	r2, #0
 8006010:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	}

	// STEP 1
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 0)) // IF GPS MUST BE ON BUT WASN'T ALREADY
 8006014:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <GPS_Management+0xe0>)
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d122      	bne.n	8006062 <GPS_Management+0x6a>
 800601c:	4b2e      	ldr	r3, [pc, #184]	; (80060d8 <GPS_Management+0xe0>)
 800601e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006022:	2b00      	cmp	r3, #0
 8006024:	d11d      	bne.n	8006062 <GPS_Management+0x6a>
	{
		// GPS is on, first start.
		TabGen[GPS_ON_PREVIOUS] = 1;
 8006026:	4b2c      	ldr	r3, [pc, #176]	; (80060d8 <GPS_Management+0xe0>)
 8006028:	2201      	movs	r2, #1
 800602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		TabTimer[GPS_FIRST_START] = millis;
 800602e:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <GPS_Management+0xe4>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a2b      	ldr	r2, [pc, #172]	; (80060e0 <GPS_Management+0xe8>)
 8006034:	6053      	str	r3, [r2, #4]
		GpsStart();
 8006036:	f7fd fb15 	bl	8003664 <GpsStart>
		TabGen[GPS_GOOD] = 0;
 800603a:	4b27      	ldr	r3, [pc, #156]	; (80060d8 <GPS_Management+0xe0>)
 800603c:	2200      	movs	r2, #0
 800603e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		if (millis - TabTimer[LAST_UPDATE_GPS] > 10 * 60 * 1000 || TabTimer[LAST_UPDATE_GPS] == 0)
 8006042:	4b26      	ldr	r3, [pc, #152]	; (80060dc <GPS_Management+0xe4>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b26      	ldr	r3, [pc, #152]	; (80060e0 <GPS_Management+0xe8>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	4a25      	ldr	r2, [pc, #148]	; (80060e4 <GPS_Management+0xec>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d803      	bhi.n	800605a <GPS_Management+0x62>
 8006052:	4b23      	ldr	r3, [pc, #140]	; (80060e0 <GPS_Management+0xe8>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d103      	bne.n	8006062 <GPS_Management+0x6a>
			TabGen[GPS_DURATION] = 10;
 800605a:	4b1f      	ldr	r3, [pc, #124]	; (80060d8 <GPS_Management+0xe0>)
 800605c:	220a      	movs	r2, #10
 800605e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	// STEP 2
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 1)) // IF GPS IS ON ALREADY
 8006062:	4b1d      	ldr	r3, [pc, #116]	; (80060d8 <GPS_Management+0xe0>)
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d11f      	bne.n	80060aa <GPS_Management+0xb2>
 800606a:	4b1b      	ldr	r3, [pc, #108]	; (80060d8 <GPS_Management+0xe0>)
 800606c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d11a      	bne.n	80060aa <GPS_Management+0xb2>
	{
		if ((millis - TabTimer[GPS_FIRST_START]) > (TabGen[GPS_DURATION] * 60 * 1000)) // in minutes
 8006074:	4b19      	ldr	r3, [pc, #100]	; (80060dc <GPS_Management+0xe4>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <GPS_Management+0xe8>)
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	4a16      	ldr	r2, [pc, #88]	; (80060d8 <GPS_Management+0xe0>)
 8006080:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8006084:	f64e 2160 	movw	r1, #60000	; 0xea60
 8006088:	fb01 f202 	mul.w	r2, r1, r2
 800608c:	4293      	cmp	r3, r2
 800608e:	d90c      	bls.n	80060aa <GPS_Management+0xb2>
		{
			TabGen[GPS_ON] = 0;
 8006090:	4b11      	ldr	r3, [pc, #68]	; (80060d8 <GPS_Management+0xe0>)
 8006092:	2200      	movs	r2, #0
 8006094:	605a      	str	r2, [r3, #4]
			TabGen[GPS_ON_PREVIOUS] = 0;
 8006096:	4b10      	ldr	r3, [pc, #64]	; (80060d8 <GPS_Management+0xe0>)
 8006098:	2200      	movs	r2, #0
 800609a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			TabTimer[GPS_REPEAT_START] = millis;
 800609e:	4b0f      	ldr	r3, [pc, #60]	; (80060dc <GPS_Management+0xe4>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a0f      	ldr	r2, [pc, #60]	; (80060e0 <GPS_Management+0xe8>)
 80060a4:	6013      	str	r3, [r2, #0]
			GpsStop();
 80060a6:	f7fd fa77 	bl	8003598 <GpsStop>
		}
	}

	// STEP 3
	if ((TabGen[GPS_ON] == 0) && (TabGen[GPS_ON_PREVIOUS] == 0))
 80060aa:	4b0b      	ldr	r3, [pc, #44]	; (80060d8 <GPS_Management+0xe0>)
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d110      	bne.n	80060d4 <GPS_Management+0xdc>
 80060b2:	4b09      	ldr	r3, [pc, #36]	; (80060d8 <GPS_Management+0xe0>)
 80060b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d10b      	bne.n	80060d4 <GPS_Management+0xdc>
	{
		// GPS is not on => turn it on
		if ((millis - TabTimer[GPS_REPEAT_START]) > (GPSREPEAT * 60 * 1000)) // in minutes
 80060bc:	4b07      	ldr	r3, [pc, #28]	; (80060dc <GPS_Management+0xe4>)
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <GPS_Management+0xe8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	1ad3      	subs	r3, r2, r3
 80060c6:	f64e 2260 	movw	r2, #60000	; 0xea60
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d902      	bls.n	80060d4 <GPS_Management+0xdc>
		{
			TabGen[GPS_ON] = 1;
 80060ce:	4b02      	ldr	r3, [pc, #8]	; (80060d8 <GPS_Management+0xe0>)
 80060d0:	2201      	movs	r2, #1
 80060d2:	605a      	str	r2, [r3, #4]
		}
	}
}
 80060d4:	bf00      	nop
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20002550 	.word	0x20002550
 80060dc:	20000b5c 	.word	0x20000b5c
 80060e0:	20002878 	.word	0x20002878
 80060e4:	000927c0 	.word	0x000927c0

080060e8 <Task_USB_Configuration>:

extern uint8_t nb_parametre;
extern uint8_t received_data[64];
extern struct config_data c1;
void Task_USB_Configuration(void)
{
 80060e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ec:	b0be      	sub	sp, #248	; 0xf8
 80060ee:	af0e      	add	r7, sp, #56	; 0x38
	uint8_t len = sizeof(received_data);
 80060f0:	2340      	movs	r3, #64	; 0x40
 80060f2:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
	uint8_t count = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

	if (len > 0)
 80060fc:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8322 	beq.w	800674a <Task_USB_Configuration+0x662>
	{
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 8006106:	e004      	b.n	8006112 <Task_USB_Configuration+0x2a>
				&& (count < len))
		{
			count++;
 8006108:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800610c:	3301      	adds	r3, #1
 800610e:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 8006112:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006116:	4aa0      	ldr	r2, [pc, #640]	; (8006398 <Task_USB_Configuration+0x2b0>)
 8006118:	5cd3      	ldrb	r3, [r2, r3]
 800611a:	2b72      	cmp	r3, #114	; 0x72
 800611c:	d00b      	beq.n	8006136 <Task_USB_Configuration+0x4e>
 800611e:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006122:	4a9d      	ldr	r2, [pc, #628]	; (8006398 <Task_USB_Configuration+0x2b0>)
 8006124:	5cd3      	ldrb	r3, [r2, r3]
 8006126:	2b77      	cmp	r3, #119	; 0x77
 8006128:	d005      	beq.n	8006136 <Task_USB_Configuration+0x4e>
				&& (count < len))
 800612a:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 800612e:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8006132:	429a      	cmp	r2, r3
 8006134:	d3e8      	bcc.n	8006108 <Task_USB_Configuration+0x20>
		}
		if ((received_data[count] == 'r') && (received_data[count + 1] == 'e')
 8006136:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800613a:	4a97      	ldr	r2, [pc, #604]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	2b72      	cmp	r3, #114	; 0x72
 8006140:	f040 80c8 	bne.w	80062d4 <Task_USB_Configuration+0x1ec>
 8006144:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006148:	3301      	adds	r3, #1
 800614a:	4a93      	ldr	r2, [pc, #588]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800614c:	5cd3      	ldrb	r3, [r2, r3]
 800614e:	2b65      	cmp	r3, #101	; 0x65
 8006150:	f040 80c0 	bne.w	80062d4 <Task_USB_Configuration+0x1ec>
				&& (received_data[count + 2] == 'a')
 8006154:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006158:	3302      	adds	r3, #2
 800615a:	4a8f      	ldr	r2, [pc, #572]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800615c:	5cd3      	ldrb	r3, [r2, r3]
 800615e:	2b61      	cmp	r3, #97	; 0x61
 8006160:	f040 80b8 	bne.w	80062d4 <Task_USB_Configuration+0x1ec>
				&& (received_data[count + 3] == 'd'))
 8006164:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006168:	3303      	adds	r3, #3
 800616a:	4a8b      	ldr	r2, [pc, #556]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800616c:	5cd3      	ldrb	r3, [r2, r3]
 800616e:	2b64      	cmp	r3, #100	; 0x64
 8006170:	f040 80b0 	bne.w	80062d4 <Task_USB_Configuration+0x1ec>
		{
 8006174:	466b      	mov	r3, sp
 8006176:	4698      	mov	r8, r3
			uint8_t buffer[] = "ID SIGFOX + Vbat";
 8006178:	4b88      	ldr	r3, [pc, #544]	; (800639c <Task_USB_Configuration+0x2b4>)
 800617a:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 800617e:	461d      	mov	r5, r3
 8006180:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006182:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	7023      	strb	r3, [r4, #0]
			uint8_t send_buffer2[nb_parametre];
 8006188:	4b85      	ldr	r3, [pc, #532]	; (80063a0 <Task_USB_Configuration+0x2b8>)
 800618a:	781c      	ldrb	r4, [r3, #0]
 800618c:	4623      	mov	r3, r4
 800618e:	3b01      	subs	r3, #1
 8006190:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006194:	b2e0      	uxtb	r0, r4
 8006196:	f04f 0100 	mov.w	r1, #0
 800619a:	f04f 0200 	mov.w	r2, #0
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	00cb      	lsls	r3, r1, #3
 80061a4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80061a8:	00c2      	lsls	r2, r0, #3
 80061aa:	b2e0      	uxtb	r0, r4
 80061ac:	f04f 0100 	mov.w	r1, #0
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	00cb      	lsls	r3, r1, #3
 80061ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80061be:	00c2      	lsls	r2, r0, #3
 80061c0:	4623      	mov	r3, r4
 80061c2:	3307      	adds	r3, #7
 80061c4:	08db      	lsrs	r3, r3, #3
 80061c6:	00db      	lsls	r3, r3, #3
 80061c8:	ebad 0d03 	sub.w	sp, sp, r3
 80061cc:	ab0e      	add	r3, sp, #56	; 0x38
 80061ce:	3300      	adds	r3, #0
 80061d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			uint8_t send_buffer3[64];
			CDC_Transmit_FS(buffer, sizeof(buffer));
 80061d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80061d8:	2111      	movs	r1, #17
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fb fa9a 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 80061e0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80061e4:	461a      	mov	r2, r3
 80061e6:	2100      	movs	r1, #0
 80061e8:	486b      	ldr	r0, [pc, #428]	; (8006398 <Task_USB_Configuration+0x2b0>)
 80061ea:	f011 fbaf 	bl	801794c <memset>
			vibration_LBL(1, 0, 200);
 80061ee:	22c8      	movs	r2, #200	; 0xc8
 80061f0:	2100      	movs	r1, #0
 80061f2:	2001      	movs	r0, #1
 80061f4:	f003 fbe8 	bl	80099c8 <vibration_LBL>
			ee_init();
 80061f8:	f7fc fc62 	bl	8002ac0 <ee_init>
			ee_read(0, sizeof(send_buffer2), send_buffer2);
 80061fc:	4621      	mov	r1, r4
 80061fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006202:	461a      	mov	r2, r3
 8006204:	2000      	movs	r0, #0
 8006206:	f7fc fca1 	bl	8002b4c <ee_read>
			sprintf(send_buffer3,
					"CONFIG,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d",
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 800620a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800620e:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_buffer3,
 8006210:	469c      	mov	ip, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 8006212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006216:	785b      	ldrb	r3, [r3, #1]
			sprintf(send_buffer3,
 8006218:	469e      	mov	lr, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 800621a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800621e:	789b      	ldrb	r3, [r3, #2]
			sprintf(send_buffer3,
 8006220:	461c      	mov	r4, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 8006222:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006226:	78db      	ldrb	r3, [r3, #3]
			sprintf(send_buffer3,
 8006228:	461d      	mov	r5, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 800622a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800622e:	791b      	ldrb	r3, [r3, #4]
			sprintf(send_buffer3,
 8006230:	461e      	mov	r6, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 8006232:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006236:	795b      	ldrb	r3, [r3, #5]
			sprintf(send_buffer3,
 8006238:	61fb      	str	r3, [r7, #28]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 800623a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800623e:	799b      	ldrb	r3, [r3, #6]
			sprintf(send_buffer3,
 8006240:	61bb      	str	r3, [r7, #24]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 8006242:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006246:	79db      	ldrb	r3, [r3, #7]
			sprintf(send_buffer3,
 8006248:	617b      	str	r3, [r7, #20]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 800624a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800624e:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(send_buffer3,
 8006250:	613b      	str	r3, [r7, #16]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8006252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006256:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(send_buffer3,
 8006258:	60fb      	str	r3, [r7, #12]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 800625a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800625e:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(send_buffer3,
 8006260:	60bb      	str	r3, [r7, #8]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8006262:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006266:	7adb      	ldrb	r3, [r3, #11]
			sprintf(send_buffer3,
 8006268:	607b      	str	r3, [r7, #4]
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 800626a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800626e:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(send_buffer3,
 8006270:	4619      	mov	r1, r3
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 8006272:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006276:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(send_buffer3,
 8006278:	461a      	mov	r2, r3
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 800627a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800627e:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(send_buffer3,
 8006280:	f107 0020 	add.w	r0, r7, #32
 8006284:	930c      	str	r3, [sp, #48]	; 0x30
 8006286:	920b      	str	r2, [sp, #44]	; 0x2c
 8006288:	910a      	str	r1, [sp, #40]	; 0x28
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	9209      	str	r2, [sp, #36]	; 0x24
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	9208      	str	r2, [sp, #32]
 8006292:	68fa      	ldr	r2, [r7, #12]
 8006294:	9207      	str	r2, [sp, #28]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	9206      	str	r2, [sp, #24]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	9205      	str	r2, [sp, #20]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	9204      	str	r2, [sp, #16]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	9303      	str	r3, [sp, #12]
 80062a6:	9602      	str	r6, [sp, #8]
 80062a8:	9501      	str	r5, [sp, #4]
 80062aa:	9400      	str	r4, [sp, #0]
 80062ac:	4673      	mov	r3, lr
 80062ae:	4662      	mov	r2, ip
 80062b0:	493c      	ldr	r1, [pc, #240]	; (80063a4 <Task_USB_Configuration+0x2bc>)
 80062b2:	f012 f82b 	bl	801830c <siprintf>
			CDC_Transmit_FS(send_buffer3, strlen(send_buffer3));
 80062b6:	f107 0320 	add.w	r3, r7, #32
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7f9 ff88 	bl	80001d0 <strlen>
 80062c0:	4602      	mov	r2, r0
 80062c2:	f107 0320 	add.w	r3, r7, #32
 80062c6:	4611      	mov	r1, r2
 80062c8:	4618      	mov	r0, r3
 80062ca:	f7fb fa23 	bl	8001714 <CDC_Transmit_FS>
 80062ce:	46c5      	mov	sp, r8
		{
 80062d0:	bf00      	nop
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
			CDC_Transmit_FS(send_buffer, strlen(send_buffer));
		}
	}
}
 80062d2:	e23a      	b.n	800674a <Task_USB_Configuration+0x662>
		else if ((received_data[count] == 'w')
 80062d4:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80062d8:	4a2f      	ldr	r2, [pc, #188]	; (8006398 <Task_USB_Configuration+0x2b0>)
 80062da:	5cd3      	ldrb	r3, [r2, r3]
 80062dc:	2b77      	cmp	r3, #119	; 0x77
 80062de:	f040 8234 	bne.w	800674a <Task_USB_Configuration+0x662>
				&& (received_data[count + 1] == 'r')
 80062e2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80062e6:	3301      	adds	r3, #1
 80062e8:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <Task_USB_Configuration+0x2b0>)
 80062ea:	5cd3      	ldrb	r3, [r2, r3]
 80062ec:	2b72      	cmp	r3, #114	; 0x72
 80062ee:	f040 822c 	bne.w	800674a <Task_USB_Configuration+0x662>
				&& (received_data[count + 2] == 'i')
 80062f2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80062f6:	3302      	adds	r3, #2
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <Task_USB_Configuration+0x2b0>)
 80062fa:	5cd3      	ldrb	r3, [r2, r3]
 80062fc:	2b69      	cmp	r3, #105	; 0x69
 80062fe:	f040 8224 	bne.w	800674a <Task_USB_Configuration+0x662>
				&& (received_data[count + 3] == 't')
 8006302:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006306:	3303      	adds	r3, #3
 8006308:	4a23      	ldr	r2, [pc, #140]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800630a:	5cd3      	ldrb	r3, [r2, r3]
 800630c:	2b74      	cmp	r3, #116	; 0x74
 800630e:	f040 821c 	bne.w	800674a <Task_USB_Configuration+0x662>
				&& (received_data[count + 4] == 'e'))
 8006312:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 8006316:	3304      	adds	r3, #4
 8006318:	4a1f      	ldr	r2, [pc, #124]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800631a:	5cd3      	ldrb	r3, [r2, r3]
 800631c:	2b65      	cmp	r3, #101	; 0x65
 800631e:	f040 8214 	bne.w	800674a <Task_USB_Configuration+0x662>
		{
 8006322:	466b      	mov	r3, sp
 8006324:	4698      	mov	r8, r3
			vibration_LBL(1, 0, 200);
 8006326:	22c8      	movs	r2, #200	; 0xc8
 8006328:	2100      	movs	r1, #0
 800632a:	2001      	movs	r0, #1
 800632c:	f003 fb4c 	bl	80099c8 <vibration_LBL>
			int tabint[nb_parametre];
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <Task_USB_Configuration+0x2b8>)
 8006332:	781c      	ldrb	r4, [r3, #0]
 8006334:	4623      	mov	r3, r4
 8006336:	3b01      	subs	r3, #1
 8006338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800633c:	b2e0      	uxtb	r0, r4
 800633e:	f04f 0100 	mov.w	r1, #0
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	014b      	lsls	r3, r1, #5
 800634c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006350:	0142      	lsls	r2, r0, #5
 8006352:	b2e0      	uxtb	r0, r4
 8006354:	f04f 0100 	mov.w	r1, #0
 8006358:	f04f 0200 	mov.w	r2, #0
 800635c:	f04f 0300 	mov.w	r3, #0
 8006360:	014b      	lsls	r3, r1, #5
 8006362:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006366:	0142      	lsls	r2, r0, #5
 8006368:	4623      	mov	r3, r4
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	3307      	adds	r3, #7
 800636e:	08db      	lsrs	r3, r3, #3
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	ebad 0d03 	sub.w	sp, sp, r3
 8006376:	ab0e      	add	r3, sp, #56	; 0x38
 8006378:	3303      	adds	r3, #3
 800637a:	089b      	lsrs	r3, r3, #2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			unsigned char i = 0;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			config_data_received = strtok(received_data, ",");
 8006388:	4907      	ldr	r1, [pc, #28]	; (80063a8 <Task_USB_Configuration+0x2c0>)
 800638a:	4803      	ldr	r0, [pc, #12]	; (8006398 <Task_USB_Configuration+0x2b0>)
 800638c:	f011 ffee 	bl	801836c <strtok>
 8006390:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			while (config_data_received != NULL)
 8006394:	e052      	b.n	800643c <Task_USB_Configuration+0x354>
 8006396:	bf00      	nop
 8006398:	200014d4 	.word	0x200014d4
 800639c:	0801b09c 	.word	0x0801b09c
 80063a0:	20000778 	.word	0x20000778
 80063a4:	0801b040 	.word	0x0801b040
 80063a8:	0801b094 	.word	0x0801b094
			{
 80063ac:	466b      	mov	r3, sp
 80063ae:	461d      	mov	r5, r3
				unsigned char tabtemp2[nb_parametre];
 80063b0:	4bab      	ldr	r3, [pc, #684]	; (8006660 <Task_USB_Configuration+0x578>)
 80063b2:	781c      	ldrb	r4, [r3, #0]
 80063b4:	4623      	mov	r3, r4
 80063b6:	3b01      	subs	r3, #1
 80063b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063bc:	b2e0      	uxtb	r0, r4
 80063be:	f04f 0100 	mov.w	r1, #0
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	00cb      	lsls	r3, r1, #3
 80063cc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80063d0:	00c2      	lsls	r2, r0, #3
 80063d2:	b2e0      	uxtb	r0, r4
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	f04f 0200 	mov.w	r2, #0
 80063dc:	f04f 0300 	mov.w	r3, #0
 80063e0:	00cb      	lsls	r3, r1, #3
 80063e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80063e6:	00c2      	lsls	r2, r0, #3
 80063e8:	4623      	mov	r3, r4
 80063ea:	3307      	adds	r3, #7
 80063ec:	08db      	lsrs	r3, r3, #3
 80063ee:	00db      	lsls	r3, r3, #3
 80063f0:	ebad 0d03 	sub.w	sp, sp, r3
 80063f4:	ab0e      	add	r3, sp, #56	; 0x38
 80063f6:	3300      	adds	r3, #0
 80063f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				sprintf(tabtemp2, "%s", config_data_received);
 80063fc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006400:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006404:	4997      	ldr	r1, [pc, #604]	; (8006664 <Task_USB_Configuration+0x57c>)
 8006406:	4618      	mov	r0, r3
 8006408:	f011 ff80 	bl	801830c <siprintf>
				tabint[i] = atoi(tabtemp2);
 800640c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006410:	f897 40b9 	ldrb.w	r4, [r7, #185]	; 0xb9
 8006414:	4618      	mov	r0, r3
 8006416:	f011 fa5d 	bl	80178d4 <atoi>
 800641a:	4602      	mov	r2, r0
 800641c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006420:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				config_data_received = strtok(NULL, ",");
 8006424:	4990      	ldr	r1, [pc, #576]	; (8006668 <Task_USB_Configuration+0x580>)
 8006426:	2000      	movs	r0, #0
 8006428:	f011 ffa0 	bl	801836c <strtok>
 800642c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
				i++;
 8006430:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 8006434:	3301      	adds	r3, #1
 8006436:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 800643a:	46ad      	mov	sp, r5
			while (config_data_received != NULL)
 800643c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1b3      	bne.n	80063ac <Task_USB_Configuration+0x2c4>
			c1.tps_immo = tabint[1];
 8006444:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	b2da      	uxtb	r2, r3
 800644c:	4b87      	ldr	r3, [pc, #540]	; (800666c <Task_USB_Configuration+0x584>)
 800644e:	701a      	strb	r2, [r3, #0]
			c1.tps_PerteDeVerticalite = tabint[2];
 8006450:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	b2da      	uxtb	r2, r3
 8006458:	4b84      	ldr	r3, [pc, #528]	; (800666c <Task_USB_Configuration+0x584>)
 800645a:	705a      	strb	r2, [r3, #1]
			c1.tps_GPS_ON = tabint[3];
 800645c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	b2da      	uxtb	r2, r3
 8006464:	4b81      	ldr	r3, [pc, #516]	; (800666c <Task_USB_Configuration+0x584>)
 8006466:	709a      	strb	r2, [r3, #2]
			c1.tps_GPS_OFF = tabint[4];
 8006468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	b2da      	uxtb	r2, r3
 8006470:	4b7e      	ldr	r3, [pc, #504]	; (800666c <Task_USB_Configuration+0x584>)
 8006472:	70da      	strb	r2, [r3, #3]
			c1.tps_Alarme = tabint[5];
 8006474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006478:	695b      	ldr	r3, [r3, #20]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	4b7b      	ldr	r3, [pc, #492]	; (800666c <Task_USB_Configuration+0x584>)
 800647e:	711a      	strb	r2, [r3, #4]
			c1.chute_Actif = tabint[6];
 8006480:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	b2da      	uxtb	r2, r3
 8006488:	4b78      	ldr	r3, [pc, #480]	; (800666c <Task_USB_Configuration+0x584>)
 800648a:	715a      	strb	r2, [r3, #5]
			c1.malaise_Actif = tabint[7];
 800648c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	b2da      	uxtb	r2, r3
 8006494:	4b75      	ldr	r3, [pc, #468]	; (800666c <Task_USB_Configuration+0x584>)
 8006496:	719a      	strb	r2, [r3, #6]
			c1.com_sigfox = tabint[8];
 8006498:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	b2da      	uxtb	r2, r3
 80064a0:	4b72      	ldr	r3, [pc, #456]	; (800666c <Task_USB_Configuration+0x584>)
 80064a2:	71da      	strb	r2, [r3, #7]
			c1.com_LoRa = tabint[9];
 80064a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	4b6f      	ldr	r3, [pc, #444]	; (800666c <Task_USB_Configuration+0x584>)
 80064ae:	721a      	strb	r2, [r3, #8]
			c1.GPS_Actif = tabint[10];
 80064b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	4b6c      	ldr	r3, [pc, #432]	; (800666c <Task_USB_Configuration+0x584>)
 80064ba:	725a      	strb	r2, [r3, #9]
			c1.Immo_Actif = tabint[11];
 80064bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c2:	b2da      	uxtb	r2, r3
 80064c4:	4b69      	ldr	r3, [pc, #420]	; (800666c <Task_USB_Configuration+0x584>)
 80064c6:	729a      	strb	r2, [r3, #10]
			c1.Verti_Actif = tabint[12];
 80064c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ce:	b2da      	uxtb	r2, r3
 80064d0:	4b66      	ldr	r3, [pc, #408]	; (800666c <Task_USB_Configuration+0x584>)
 80064d2:	72da      	strb	r2, [r3, #11]
			c1.Sensibilite_chute = tabint[13];
 80064d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	4b63      	ldr	r3, [pc, #396]	; (800666c <Task_USB_Configuration+0x584>)
 80064de:	731a      	strb	r2, [r3, #12]
			c1.tps_chute = tabint[14];
 80064e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	4b60      	ldr	r3, [pc, #384]	; (800666c <Task_USB_Configuration+0x584>)
 80064ea:	735a      	strb	r2, [r3, #13]
			c1.Angle = tabint[15];
 80064ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80064f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	4b5d      	ldr	r3, [pc, #372]	; (800666c <Task_USB_Configuration+0x584>)
 80064f6:	739a      	strb	r2, [r3, #14]
			uint8_t buffer[] = "config ok";
 80064f8:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <Task_USB_Configuration+0x588>)
 80064fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80064fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006500:	c303      	stmia	r3!, {r0, r1}
 8006502:	801a      	strh	r2, [r3, #0]
			CDC_Transmit_FS(buffer, sizeof(buffer));
 8006504:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006508:	210a      	movs	r1, #10
 800650a:	4618      	mov	r0, r3
 800650c:	f7fb f902 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 8006510:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8006514:	461a      	mov	r2, r3
 8006516:	2100      	movs	r1, #0
 8006518:	4856      	ldr	r0, [pc, #344]	; (8006674 <Task_USB_Configuration+0x58c>)
 800651a:	f011 fa17 	bl	801794c <memset>
			ee_init();
 800651e:	f7fc facf 	bl	8002ac0 <ee_init>
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 8006522:	4b52      	ldr	r3, [pc, #328]	; (800666c <Task_USB_Configuration+0x584>)
 8006524:	781b      	ldrb	r3, [r3, #0]
			uint8_t d[] =
 8006526:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 800652a:	4b50      	ldr	r3, [pc, #320]	; (800666c <Task_USB_Configuration+0x584>)
 800652c:	785b      	ldrb	r3, [r3, #1]
			uint8_t d[] =
 800652e:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 8006532:	4b4e      	ldr	r3, [pc, #312]	; (800666c <Task_USB_Configuration+0x584>)
 8006534:	789b      	ldrb	r3, [r3, #2]
			uint8_t d[] =
 8006536:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 800653a:	4b4c      	ldr	r3, [pc, #304]	; (800666c <Task_USB_Configuration+0x584>)
 800653c:	78db      	ldrb	r3, [r3, #3]
			uint8_t d[] =
 800653e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 8006542:	4b4a      	ldr	r3, [pc, #296]	; (800666c <Task_USB_Configuration+0x584>)
 8006544:	791b      	ldrb	r3, [r3, #4]
			uint8_t d[] =
 8006546:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 800654a:	4b48      	ldr	r3, [pc, #288]	; (800666c <Task_USB_Configuration+0x584>)
 800654c:	795b      	ldrb	r3, [r3, #5]
			uint8_t d[] =
 800654e:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 8006552:	4b46      	ldr	r3, [pc, #280]	; (800666c <Task_USB_Configuration+0x584>)
 8006554:	799b      	ldrb	r3, [r3, #6]
			uint8_t d[] =
 8006556:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 800655a:	4b44      	ldr	r3, [pc, #272]	; (800666c <Task_USB_Configuration+0x584>)
 800655c:	79db      	ldrb	r3, [r3, #7]
			uint8_t d[] =
 800655e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 8006562:	4b42      	ldr	r3, [pc, #264]	; (800666c <Task_USB_Configuration+0x584>)
 8006564:	7a1b      	ldrb	r3, [r3, #8]
			uint8_t d[] =
 8006566:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 800656a:	4b40      	ldr	r3, [pc, #256]	; (800666c <Task_USB_Configuration+0x584>)
 800656c:	7a5b      	ldrb	r3, [r3, #9]
			uint8_t d[] =
 800656e:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 8006572:	4b3e      	ldr	r3, [pc, #248]	; (800666c <Task_USB_Configuration+0x584>)
 8006574:	7a9b      	ldrb	r3, [r3, #10]
			uint8_t d[] =
 8006576:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 800657a:	4b3c      	ldr	r3, [pc, #240]	; (800666c <Task_USB_Configuration+0x584>)
 800657c:	7adb      	ldrb	r3, [r3, #11]
			uint8_t d[] =
 800657e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 8006582:	4b3a      	ldr	r3, [pc, #232]	; (800666c <Task_USB_Configuration+0x584>)
 8006584:	7b1b      	ldrb	r3, [r3, #12]
			uint8_t d[] =
 8006586:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
					c1.tps_chute, c1.Angle};
 800658a:	4b38      	ldr	r3, [pc, #224]	; (800666c <Task_USB_Configuration+0x584>)
 800658c:	7b5b      	ldrb	r3, [r3, #13]
			uint8_t d[] =
 800658e:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					c1.tps_chute, c1.Angle};
 8006592:	4b36      	ldr	r3, [pc, #216]	; (800666c <Task_USB_Configuration+0x584>)
 8006594:	7b9b      	ldrb	r3, [r3, #14]
			uint8_t d[] =
 8006596:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			ee_read(0, sizeof(d), dr);
 800659a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800659e:	461a      	mov	r2, r3
 80065a0:	210f      	movs	r1, #15
 80065a2:	2000      	movs	r0, #0
 80065a4:	f7fc fad2 	bl	8002b4c <ee_read>
			if ((c1.tps_immo != dr[0]) || (c1.tps_PerteDeVerticalite != dr[1])
 80065a8:	4b30      	ldr	r3, [pc, #192]	; (800666c <Task_USB_Configuration+0x584>)
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d161      	bne.n	8006678 <Task_USB_Configuration+0x590>
 80065b4:	4b2d      	ldr	r3, [pc, #180]	; (800666c <Task_USB_Configuration+0x584>)
 80065b6:	785a      	ldrb	r2, [r3, #1]
 80065b8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80065bc:	429a      	cmp	r2, r3
 80065be:	d15b      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.tps_GPS_ON != dr[2]) || (c1.tps_GPS_OFF != dr[3])
 80065c0:	4b2a      	ldr	r3, [pc, #168]	; (800666c <Task_USB_Configuration+0x584>)
 80065c2:	789a      	ldrb	r2, [r3, #2]
 80065c4:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d155      	bne.n	8006678 <Task_USB_Configuration+0x590>
 80065cc:	4b27      	ldr	r3, [pc, #156]	; (800666c <Task_USB_Configuration+0x584>)
 80065ce:	78da      	ldrb	r2, [r3, #3]
 80065d0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d14f      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.tps_Alarme != dr[4]) || (c1.chute_Actif != dr[5])
 80065d8:	4b24      	ldr	r3, [pc, #144]	; (800666c <Task_USB_Configuration+0x584>)
 80065da:	791a      	ldrb	r2, [r3, #4]
 80065dc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d149      	bne.n	8006678 <Task_USB_Configuration+0x590>
 80065e4:	4b21      	ldr	r3, [pc, #132]	; (800666c <Task_USB_Configuration+0x584>)
 80065e6:	795a      	ldrb	r2, [r3, #5]
 80065e8:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d143      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.malaise_Actif != dr[6]) || (c1.com_sigfox != dr[7])
 80065f0:	4b1e      	ldr	r3, [pc, #120]	; (800666c <Task_USB_Configuration+0x584>)
 80065f2:	799a      	ldrb	r2, [r3, #6]
 80065f4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d13d      	bne.n	8006678 <Task_USB_Configuration+0x590>
 80065fc:	4b1b      	ldr	r3, [pc, #108]	; (800666c <Task_USB_Configuration+0x584>)
 80065fe:	79da      	ldrb	r2, [r3, #7]
 8006600:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006604:	429a      	cmp	r2, r3
 8006606:	d137      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.com_LoRa != dr[8]) || (c1.GPS_Actif != dr[9])
 8006608:	4b18      	ldr	r3, [pc, #96]	; (800666c <Task_USB_Configuration+0x584>)
 800660a:	7a1a      	ldrb	r2, [r3, #8]
 800660c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8006610:	429a      	cmp	r2, r3
 8006612:	d131      	bne.n	8006678 <Task_USB_Configuration+0x590>
 8006614:	4b15      	ldr	r3, [pc, #84]	; (800666c <Task_USB_Configuration+0x584>)
 8006616:	7a5a      	ldrb	r2, [r3, #9]
 8006618:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800661c:	429a      	cmp	r2, r3
 800661e:	d12b      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.Immo_Actif != dr[10]) || (c1.Verti_Actif != dr[11])
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <Task_USB_Configuration+0x584>)
 8006622:	7a9a      	ldrb	r2, [r3, #10]
 8006624:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 8006628:	429a      	cmp	r2, r3
 800662a:	d125      	bne.n	8006678 <Task_USB_Configuration+0x590>
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <Task_USB_Configuration+0x584>)
 800662e:	7ada      	ldrb	r2, [r3, #11]
 8006630:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8006634:	429a      	cmp	r2, r3
 8006636:	d11f      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.Sensibilite_chute != dr[12])
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <Task_USB_Configuration+0x584>)
 800663a:	7b1a      	ldrb	r2, [r3, #12]
 800663c:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006640:	429a      	cmp	r2, r3
 8006642:	d119      	bne.n	8006678 <Task_USB_Configuration+0x590>
					|| (c1.tps_chute != dr[13]) || (c1.Angle != dr[14]))
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <Task_USB_Configuration+0x584>)
 8006646:	7b5a      	ldrb	r2, [r3, #13]
 8006648:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800664c:	429a      	cmp	r2, r3
 800664e:	d113      	bne.n	8006678 <Task_USB_Configuration+0x590>
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <Task_USB_Configuration+0x584>)
 8006652:	7b9a      	ldrb	r2, [r3, #14]
 8006654:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006658:	429a      	cmp	r2, r3
 800665a:	d01b      	beq.n	8006694 <Task_USB_Configuration+0x5ac>
 800665c:	e00c      	b.n	8006678 <Task_USB_Configuration+0x590>
 800665e:	bf00      	nop
 8006660:	20000778 	.word	0x20000778
 8006664:	0801b098 	.word	0x0801b098
 8006668:	0801b094 	.word	0x0801b094
 800666c:	200010cc 	.word	0x200010cc
 8006670:	0801b0b0 	.word	0x0801b0b0
 8006674:	200014d4 	.word	0x200014d4
				ee_writeToRam(0, sizeof(d), d);
 8006678:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800667c:	461a      	mov	r2, r3
 800667e:	210f      	movs	r1, #15
 8006680:	2000      	movs	r0, #0
 8006682:	f7fc fb7d 	bl	8002d80 <ee_writeToRam>
				ee_commit();
 8006686:	f7fc fb9d 	bl	8002dc4 <ee_commit>
				vibration_LBL(2, 200, 200);
 800668a:	22c8      	movs	r2, #200	; 0xc8
 800668c:	21c8      	movs	r1, #200	; 0xc8
 800668e:	2002      	movs	r0, #2
 8006690:	f003 f99a 	bl	80099c8 <vibration_LBL>
			ee_read(0, sizeof(d), dr);
 8006694:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006698:	461a      	mov	r2, r3
 800669a:	210f      	movs	r1, #15
 800669c:	2000      	movs	r0, #0
 800669e:	f7fc fa55 	bl	8002b4c <ee_read>
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066a2:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
			sprintf(send_buffer,
 80066a6:	469c      	mov	ip, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066a8:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
			sprintf(send_buffer,
 80066ac:	469e      	mov	lr, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066ae:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
			sprintf(send_buffer,
 80066b2:	461c      	mov	r4, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066b4:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
			sprintf(send_buffer,
 80066b8:	461d      	mov	r5, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066ba:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
			sprintf(send_buffer,
 80066be:	461e      	mov	r6, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066c0:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
			sprintf(send_buffer,
 80066c4:	61fb      	str	r3, [r7, #28]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066c6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
			sprintf(send_buffer,
 80066ca:	61bb      	str	r3, [r7, #24]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 80066cc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
			sprintf(send_buffer,
 80066d0:	617b      	str	r3, [r7, #20]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066d2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
			sprintf(send_buffer,
 80066d6:	613b      	str	r3, [r7, #16]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066d8:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
			sprintf(send_buffer,
 80066dc:	60fb      	str	r3, [r7, #12]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066de:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
			sprintf(send_buffer,
 80066e2:	60bb      	str	r3, [r7, #8]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
			sprintf(send_buffer,
 80066e8:	607b      	str	r3, [r7, #4]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066ea:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
			sprintf(send_buffer,
 80066ee:	4619      	mov	r1, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066f0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
			sprintf(send_buffer,
 80066f4:	461a      	mov	r2, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 80066f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
			sprintf(send_buffer,
 80066fa:	f107 0020 	add.w	r0, r7, #32
 80066fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006700:	920b      	str	r2, [sp, #44]	; 0x2c
 8006702:	910a      	str	r1, [sp, #40]	; 0x28
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	9209      	str	r2, [sp, #36]	; 0x24
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	9208      	str	r2, [sp, #32]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	9207      	str	r2, [sp, #28]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	9206      	str	r2, [sp, #24]
 8006714:	697a      	ldr	r2, [r7, #20]
 8006716:	9205      	str	r2, [sp, #20]
 8006718:	69ba      	ldr	r2, [r7, #24]
 800671a:	9204      	str	r2, [sp, #16]
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	9303      	str	r3, [sp, #12]
 8006720:	9602      	str	r6, [sp, #8]
 8006722:	9501      	str	r5, [sp, #4]
 8006724:	9400      	str	r4, [sp, #0]
 8006726:	4673      	mov	r3, lr
 8006728:	4662      	mov	r2, ip
 800672a:	490a      	ldr	r1, [pc, #40]	; (8006754 <Task_USB_Configuration+0x66c>)
 800672c:	f011 fdee 	bl	801830c <siprintf>
			CDC_Transmit_FS(send_buffer, strlen(send_buffer));
 8006730:	f107 0320 	add.w	r3, r7, #32
 8006734:	4618      	mov	r0, r3
 8006736:	f7f9 fd4b 	bl	80001d0 <strlen>
 800673a:	4602      	mov	r2, r0
 800673c:	f107 0320 	add.w	r3, r7, #32
 8006740:	4611      	mov	r1, r2
 8006742:	4618      	mov	r0, r3
 8006744:	f7fa ffe6 	bl	8001714 <CDC_Transmit_FS>
 8006748:	46c5      	mov	sp, r8
}
 800674a:	bf00      	nop
 800674c:	37c0      	adds	r7, #192	; 0xc0
 800674e:	46bd      	mov	sp, r7
 8006750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006754:	0801b040 	.word	0x0801b040

08006758 <Task_Gaz>:
extern uint32_t last_vib ;

uint8_t GAZ_THRESHOLD_ALERT ;

void Task_Gaz()
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08a      	sub	sp, #40	; 0x28
 800675c:	af00      	add	r7, sp, #0
	if (BiGaz_ON == 1 && TabGen[ALERT_ON] == 0 && TabGen[SIGFOX_SEND] == 0)
 800675e:	4bb0      	ldr	r3, [pc, #704]	; (8006a20 <Task_Gaz+0x2c8>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	f040 81d1 	bne.w	8006b0a <Task_Gaz+0x3b2>
 8006768:	4bae      	ldr	r3, [pc, #696]	; (8006a24 <Task_Gaz+0x2cc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f040 81cc 	bne.w	8006b0a <Task_Gaz+0x3b2>
 8006772:	4bac      	ldr	r3, [pc, #688]	; (8006a24 <Task_Gaz+0x2cc>)
 8006774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006776:	2b00      	cmp	r3, #0
 8006778:	f040 81c7 	bne.w	8006b0a <Task_Gaz+0x3b2>
	{
		uint32_t time = HAL_GetTick();
 800677c:	f003 fe6c 	bl	800a458 <HAL_GetTick>
 8006780:	6238      	str	r0, [r7, #32]
		if (time > 20000)
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006788:	4293      	cmp	r3, r2
 800678a:	d902      	bls.n	8006792 <Task_Gaz+0x3a>
			Calibration_Time_Over = 1;
 800678c:	4ba6      	ldr	r3, [pc, #664]	; (8006a28 <Task_Gaz+0x2d0>)
 800678e:	2201      	movs	r2, #1
 8006790:	701a      	strb	r2, [r3, #0]

		if (time % 500 == 0)
 8006792:	6a3a      	ldr	r2, [r7, #32]
 8006794:	4ba5      	ldr	r3, [pc, #660]	; (8006a2c <Task_Gaz+0x2d4>)
 8006796:	fba3 1302 	umull	r1, r3, r3, r2
 800679a:	095b      	lsrs	r3, r3, #5
 800679c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80067a0:	fb01 f303 	mul.w	r3, r1, r3
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	f040 810d 	bne.w	80069c6 <Task_Gaz+0x26e>
		{

			ADC_ChannelConfTypeDef sConfig = {0};
 80067ac:	1d3b      	adds	r3, r7, #4
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	605a      	str	r2, [r3, #4]
 80067b4:	609a      	str	r2, [r3, #8]
 80067b6:	60da      	str	r2, [r3, #12]
 80067b8:	611a      	str	r2, [r3, #16]
 80067ba:	615a      	str	r2, [r3, #20]

			// CHANNEL 5 ALONE OK, CO VOUT1, RIGHT SENSOR, ADC_G1
			sConfig.Channel = ADC_CHANNEL_5;
 80067bc:	4b9c      	ldr	r3, [pc, #624]	; (8006a30 <Task_Gaz+0x2d8>)
 80067be:	607b      	str	r3, [r7, #4]
			sConfig.Rank = 1;
 80067c0:	2301      	movs	r3, #1
 80067c2:	60bb      	str	r3, [r7, #8]
			sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80067c4:	2306      	movs	r3, #6
 80067c6:	60fb      	str	r3, [r7, #12]
			sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80067c8:	237f      	movs	r3, #127	; 0x7f
 80067ca:	613b      	str	r3, [r7, #16]
			sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80067cc:	2304      	movs	r3, #4
 80067ce:	617b      	str	r3, [r7, #20]
			sConfig.Offset = 0;
 80067d0:	2300      	movs	r3, #0
 80067d2:	61bb      	str	r3, [r7, #24]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80067d4:	1d3b      	adds	r3, r7, #4
 80067d6:	4619      	mov	r1, r3
 80067d8:	4896      	ldr	r0, [pc, #600]	; (8006a34 <Task_Gaz+0x2dc>)
 80067da:	f004 fafd 	bl	800add8 <HAL_ADC_ConfigChannel>
 80067de:	4603      	mov	r3, r0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <Task_Gaz+0x90>
			{
				Error_Handler();
 80067e4:	f003 f948 	bl	8009a78 <Error_Handler>
			}

			if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80067e8:	4892      	ldr	r0, [pc, #584]	; (8006a34 <Task_Gaz+0x2dc>)
 80067ea:	f004 f9c3 	bl	800ab74 <HAL_ADC_Start>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <Task_Gaz+0xa0>
			{
				Error_Handler();
 80067f4:	f003 f940 	bl	8009a78 <Error_Handler>
			}

			if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 80067f8:	2164      	movs	r1, #100	; 0x64
 80067fa:	488e      	ldr	r0, [pc, #568]	; (8006a34 <Task_Gaz+0x2dc>)
 80067fc:	f004 fa50 	bl	800aca0 <HAL_ADC_PollForConversion>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d001      	beq.n	800680a <Task_Gaz+0xb2>
			{
				Error_Handler();
 8006806:	f003 f937 	bl	8009a78 <Error_Handler>
			}

			uint16_t gaz_12bit = 0;
 800680a:	2300      	movs	r3, #0
 800680c:	83fb      	strh	r3, [r7, #30]
			gaz_12bit = HAL_ADC_GetValue(&hadc1);
 800680e:	4889      	ldr	r0, [pc, #548]	; (8006a34 <Task_Gaz+0x2dc>)
 8006810:	f004 fad5 	bl	800adbe <HAL_ADC_GetValue>
 8006814:	4603      	mov	r3, r0
 8006816:	83fb      	strh	r3, [r7, #30]

			HAL_ADC_Stop(&hadc1);
 8006818:	4886      	ldr	r0, [pc, #536]	; (8006a34 <Task_Gaz+0x2dc>)
 800681a:	f004 fa0e 	bl	800ac3a <HAL_ADC_Stop>

			gaz1_level[count_gaz] = gaz_12bit ;//((double)gaz_12bit * 3.3)/4096;
 800681e:	4b86      	ldr	r3, [pc, #536]	; (8006a38 <Task_Gaz+0x2e0>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4619      	mov	r1, r3
 8006824:	4a85      	ldr	r2, [pc, #532]	; (8006a3c <Task_Gaz+0x2e4>)
 8006826:	8bfb      	ldrh	r3, [r7, #30]
 8006828:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

			gaz1_level_mean = 0;
 800682c:	4b84      	ldr	r3, [pc, #528]	; (8006a40 <Task_Gaz+0x2e8>)
 800682e:	2200      	movs	r2, #0
 8006830:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i < NB_SAMPLES_GAZ; i++)
 8006832:	2300      	movs	r3, #0
 8006834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006838:	e00f      	b.n	800685a <Task_Gaz+0x102>
				gaz1_level_mean +=  (uint32_t)gaz1_level[i];
 800683a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800683e:	4a7f      	ldr	r2, [pc, #508]	; (8006a3c <Task_Gaz+0x2e4>)
 8006840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006844:	461a      	mov	r2, r3
 8006846:	4b7e      	ldr	r3, [pc, #504]	; (8006a40 <Task_Gaz+0x2e8>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4413      	add	r3, r2
 800684c:	4a7c      	ldr	r2, [pc, #496]	; (8006a40 <Task_Gaz+0x2e8>)
 800684e:	6013      	str	r3, [r2, #0]
			for (uint8_t i = 0; i < NB_SAMPLES_GAZ; i++)
 8006850:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006854:	3301      	adds	r3, #1
 8006856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800685a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800685e:	2b04      	cmp	r3, #4
 8006860:	d9eb      	bls.n	800683a <Task_Gaz+0xe2>

			gaz1_level_mean = (uint32_t) ((double)gaz1_level_mean / NB_SAMPLES_GAZ) ;
 8006862:	4b77      	ldr	r3, [pc, #476]	; (8006a40 <Task_Gaz+0x2e8>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4618      	mov	r0, r3
 8006868:	f7f9 fe4c 	bl	8000504 <__aeabi_ui2d>
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	4b74      	ldr	r3, [pc, #464]	; (8006a44 <Task_Gaz+0x2ec>)
 8006872:	f7f9 ffeb 	bl	800084c <__aeabi_ddiv>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	f7fa f993 	bl	8000ba8 <__aeabi_d2uiz>
 8006882:	4603      	mov	r3, r0
 8006884:	4a6e      	ldr	r2, [pc, #440]	; (8006a40 <Task_Gaz+0x2e8>)
 8006886:	6013      	str	r3, [r2, #0]
			gaz1_ppm = (uint32_t)((double)gaz1_level_mean * 3.3);
 8006888:	4b6d      	ldr	r3, [pc, #436]	; (8006a40 <Task_Gaz+0x2e8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4618      	mov	r0, r3
 800688e:	f7f9 fe39 	bl	8000504 <__aeabi_ui2d>
 8006892:	a361      	add	r3, pc, #388	; (adr r3, 8006a18 <Task_Gaz+0x2c0>)
 8006894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006898:	f7f9 feae 	bl	80005f8 <__aeabi_dmul>
 800689c:	4602      	mov	r2, r0
 800689e:	460b      	mov	r3, r1
 80068a0:	4610      	mov	r0, r2
 80068a2:	4619      	mov	r1, r3
 80068a4:	f7fa f980 	bl	8000ba8 <__aeabi_d2uiz>
 80068a8:	4603      	mov	r3, r0
 80068aa:	4a67      	ldr	r2, [pc, #412]	; (8006a48 <Task_Gaz+0x2f0>)
 80068ac:	6013      	str	r3, [r2, #0]
			//gaz1_level_mean = ((double) gaz1_level_mean * 3.3)/4095;



			// CHANNEL 9 ALONE OK, H2S VOUT2, LEFT SENSOR, ADC_G3
			sConfig.Channel = ADC_CHANNEL_9;
 80068ae:	4b67      	ldr	r3, [pc, #412]	; (8006a4c <Task_Gaz+0x2f4>)
 80068b0:	607b      	str	r3, [r7, #4]
			sConfig.Rank = 1;
 80068b2:	2301      	movs	r3, #1
 80068b4:	60bb      	str	r3, [r7, #8]
			sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80068b6:	2306      	movs	r3, #6
 80068b8:	60fb      	str	r3, [r7, #12]
			sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80068ba:	237f      	movs	r3, #127	; 0x7f
 80068bc:	613b      	str	r3, [r7, #16]
			sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80068be:	2304      	movs	r3, #4
 80068c0:	617b      	str	r3, [r7, #20]
			sConfig.Offset = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]

			if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80068c6:	1d3b      	adds	r3, r7, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	485a      	ldr	r0, [pc, #360]	; (8006a34 <Task_Gaz+0x2dc>)
 80068cc:	f004 fa84 	bl	800add8 <HAL_ADC_ConfigChannel>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <Task_Gaz+0x182>
			{
				Error_Handler();
 80068d6:	f003 f8cf 	bl	8009a78 <Error_Handler>
			}

			if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80068da:	4856      	ldr	r0, [pc, #344]	; (8006a34 <Task_Gaz+0x2dc>)
 80068dc:	f004 f94a 	bl	800ab74 <HAL_ADC_Start>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d001      	beq.n	80068ea <Task_Gaz+0x192>
			{
				Error_Handler();
 80068e6:	f003 f8c7 	bl	8009a78 <Error_Handler>
			}

			if (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 80068ea:	2164      	movs	r1, #100	; 0x64
 80068ec:	4851      	ldr	r0, [pc, #324]	; (8006a34 <Task_Gaz+0x2dc>)
 80068ee:	f004 f9d7 	bl	800aca0 <HAL_ADC_PollForConversion>
 80068f2:	4603      	mov	r3, r0
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d001      	beq.n	80068fc <Task_Gaz+0x1a4>
			{
				Error_Handler();
 80068f8:	f003 f8be 	bl	8009a78 <Error_Handler>
			}

			gaz_12bit = 0;
 80068fc:	2300      	movs	r3, #0
 80068fe:	83fb      	strh	r3, [r7, #30]
			gaz_12bit = HAL_ADC_GetValue(&hadc1);
 8006900:	484c      	ldr	r0, [pc, #304]	; (8006a34 <Task_Gaz+0x2dc>)
 8006902:	f004 fa5c 	bl	800adbe <HAL_ADC_GetValue>
 8006906:	4603      	mov	r3, r0
 8006908:	83fb      	strh	r3, [r7, #30]

			HAL_ADC_Stop(&hadc1);
 800690a:	484a      	ldr	r0, [pc, #296]	; (8006a34 <Task_Gaz+0x2dc>)
 800690c:	f004 f995 	bl	800ac3a <HAL_ADC_Stop>

			gaz2_level[count_gaz] = gaz_12bit ;//((double)gaz_12bit * 3.3)/4096;
 8006910:	4b49      	ldr	r3, [pc, #292]	; (8006a38 <Task_Gaz+0x2e0>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	4619      	mov	r1, r3
 8006916:	4a4e      	ldr	r2, [pc, #312]	; (8006a50 <Task_Gaz+0x2f8>)
 8006918:	8bfb      	ldrh	r3, [r7, #30]
 800691a:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]

			gaz2_level_mean = 0;
 800691e:	4b4d      	ldr	r3, [pc, #308]	; (8006a54 <Task_Gaz+0x2fc>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 0; i < NB_SAMPLES_GAZ; i++)
 8006924:	2300      	movs	r3, #0
 8006926:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800692a:	e00f      	b.n	800694c <Task_Gaz+0x1f4>
				gaz2_level_mean +=  (uint32_t) gaz2_level[i];
 800692c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006930:	4a47      	ldr	r2, [pc, #284]	; (8006a50 <Task_Gaz+0x2f8>)
 8006932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006936:	461a      	mov	r2, r3
 8006938:	4b46      	ldr	r3, [pc, #280]	; (8006a54 <Task_Gaz+0x2fc>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4413      	add	r3, r2
 800693e:	4a45      	ldr	r2, [pc, #276]	; (8006a54 <Task_Gaz+0x2fc>)
 8006940:	6013      	str	r3, [r2, #0]
			for (uint8_t i = 0; i < NB_SAMPLES_GAZ; i++)
 8006942:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006946:	3301      	adds	r3, #1
 8006948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800694c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006950:	2b04      	cmp	r3, #4
 8006952:	d9eb      	bls.n	800692c <Task_Gaz+0x1d4>

			gaz2_level_mean = (uint32_t) ((double)gaz2_level_mean / NB_SAMPLES_GAZ) ;
 8006954:	4b3f      	ldr	r3, [pc, #252]	; (8006a54 <Task_Gaz+0x2fc>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4618      	mov	r0, r3
 800695a:	f7f9 fdd3 	bl	8000504 <__aeabi_ui2d>
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <Task_Gaz+0x2ec>)
 8006964:	f7f9 ff72 	bl	800084c <__aeabi_ddiv>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4610      	mov	r0, r2
 800696e:	4619      	mov	r1, r3
 8006970:	f7fa f91a 	bl	8000ba8 <__aeabi_d2uiz>
 8006974:	4603      	mov	r3, r0
 8006976:	4a37      	ldr	r2, [pc, #220]	; (8006a54 <Task_Gaz+0x2fc>)
 8006978:	6013      	str	r3, [r2, #0]
			gaz2_ppm = (uint32_t)((double)(25 * gaz2_level_mean)/1600.0);
 800697a:	4b36      	ldr	r3, [pc, #216]	; (8006a54 <Task_Gaz+0x2fc>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	4613      	mov	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	009a      	lsls	r2, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	4618      	mov	r0, r3
 800698a:	f7f9 fdbb 	bl	8000504 <__aeabi_ui2d>
 800698e:	f04f 0200 	mov.w	r2, #0
 8006992:	4b31      	ldr	r3, [pc, #196]	; (8006a58 <Task_Gaz+0x300>)
 8006994:	f7f9 ff5a 	bl	800084c <__aeabi_ddiv>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4610      	mov	r0, r2
 800699e:	4619      	mov	r1, r3
 80069a0:	f7fa f902 	bl	8000ba8 <__aeabi_d2uiz>
 80069a4:	4603      	mov	r3, r0
 80069a6:	4a2d      	ldr	r2, [pc, #180]	; (8006a5c <Task_Gaz+0x304>)
 80069a8:	6013      	str	r3, [r2, #0]
			//gaz2_level_mean = ((double) gaz2_level_mean * 3.3)/4095;
			//gaz2_level = gaz_12bit; //((double)gaz_12bit * 3.3)/4096;

			if (count_gaz < NB_SAMPLES_GAZ)
 80069aa:	4b23      	ldr	r3, [pc, #140]	; (8006a38 <Task_Gaz+0x2e0>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d806      	bhi.n	80069c0 <Task_Gaz+0x268>
				count_gaz++;
 80069b2:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <Task_Gaz+0x2e0>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	3301      	adds	r3, #1
 80069b8:	b2da      	uxtb	r2, r3
 80069ba:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <Task_Gaz+0x2e0>)
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	e002      	b.n	80069c6 <Task_Gaz+0x26e>
			else
				count_gaz = 0;
 80069c0:	4b1d      	ldr	r3, [pc, #116]	; (8006a38 <Task_Gaz+0x2e0>)
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]

		}


		uint8_t VLEP_CO = 100;
 80069c6:	2364      	movs	r3, #100	; 0x64
 80069c8:	777b      	strb	r3, [r7, #29]
		uint8_t VLEP_H2S = 10;
 80069ca:	230a      	movs	r3, #10
 80069cc:	773b      	strb	r3, [r7, #28]

		if (gaz1_ppm > VLEP_CO || gaz2_ppm > VLEP_H2S && Calibration_Time_Over == 1)
 80069ce:	7f7a      	ldrb	r2, [r7, #29]
 80069d0:	4b1d      	ldr	r3, [pc, #116]	; (8006a48 <Task_Gaz+0x2f0>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d30a      	bcc.n	80069ee <Task_Gaz+0x296>
 80069d8:	7f3a      	ldrb	r2, [r7, #28]
 80069da:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <Task_Gaz+0x304>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	429a      	cmp	r2, r3
 80069e0:	f080 808e 	bcs.w	8006b00 <Task_Gaz+0x3a8>
 80069e4:	4b10      	ldr	r3, [pc, #64]	; (8006a28 <Task_Gaz+0x2d0>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	f040 8089 	bne.w	8006b00 <Task_Gaz+0x3a8>
		{
			if (gaz1_ppm > VLEP_CO )
 80069ee:	7f7a      	ldrb	r2, [r7, #29]
 80069f0:	4b15      	ldr	r3, [pc, #84]	; (8006a48 <Task_Gaz+0x2f0>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d203      	bcs.n	8006a00 <Task_Gaz+0x2a8>
				GAZ_THRESHOLD_ALERT = 1;
 80069f8:	4b19      	ldr	r3, [pc, #100]	; (8006a60 <Task_Gaz+0x308>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
 80069fe:	e034      	b.n	8006a6a <Task_Gaz+0x312>
			else if (gaz2_ppm > VLEP_H2S)
 8006a00:	7f3a      	ldrb	r2, [r7, #28]
 8006a02:	4b16      	ldr	r3, [pc, #88]	; (8006a5c <Task_Gaz+0x304>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d22c      	bcs.n	8006a64 <Task_Gaz+0x30c>
				GAZ_THRESHOLD_ALERT = 2;
 8006a0a:	4b15      	ldr	r3, [pc, #84]	; (8006a60 <Task_Gaz+0x308>)
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	701a      	strb	r2, [r3, #0]
 8006a10:	e02b      	b.n	8006a6a <Task_Gaz+0x312>
 8006a12:	bf00      	nop
 8006a14:	f3af 8000 	nop.w
 8006a18:	66666666 	.word	0x66666666
 8006a1c:	400a6666 	.word	0x400a6666
 8006a20:	20000b99 	.word	0x20000b99
 8006a24:	20002550 	.word	0x20002550
 8006a28:	20000b7d 	.word	0x20000b7d
 8006a2c:	10624dd3 	.word	0x10624dd3
 8006a30:	14f00020 	.word	0x14f00020
 8006a34:	20001cfc 	.word	0x20001cfc
 8006a38:	20000b6a 	.word	0x20000b6a
 8006a3c:	200032d4 	.word	0x200032d4
 8006a40:	20000b6c 	.word	0x20000b6c
 8006a44:	40140000 	.word	0x40140000
 8006a48:	20000b70 	.word	0x20000b70
 8006a4c:	25b00200 	.word	0x25b00200
 8006a50:	200030f4 	.word	0x200030f4
 8006a54:	20000b74 	.word	0x20000b74
 8006a58:	40990000 	.word	0x40990000
 8006a5c:	20000b78 	.word	0x20000b78
 8006a60:	20000b7e 	.word	0x20000b7e
			else
				GAZ_THRESHOLD_ALERT = 0;
 8006a64:	4b2b      	ldr	r3, [pc, #172]	; (8006b14 <Task_Gaz+0x3bc>)
 8006a66:	2200      	movs	r2, #0
 8006a68:	701a      	strb	r2, [r3, #0]

			if (time - last_vib > 1000 && gaz_alert_phase == 0)
 8006a6a:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <Task_Gaz+0x3c0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a76:	d919      	bls.n	8006aac <Task_Gaz+0x354>
 8006a78:	4b28      	ldr	r3, [pc, #160]	; (8006b1c <Task_Gaz+0x3c4>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d115      	bne.n	8006aac <Task_Gaz+0x354>
			{
				gaz_alert_phase = 1;
 8006a80:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <Task_Gaz+0x3c4>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
				LedOn(250, 250, 250, TabGen);
 8006a86:	4b26      	ldr	r3, [pc, #152]	; (8006b20 <Task_Gaz+0x3c8>)
 8006a88:	22fa      	movs	r2, #250	; 0xfa
 8006a8a:	21fa      	movs	r1, #250	; 0xfa
 8006a8c:	20fa      	movs	r0, #250	; 0xfa
 8006a8e:	f7fd f851 	bl	8003b34 <LedOn>


				OutBuzOn();
 8006a92:	f7fc fd6d 	bl	8003570 <OutBuzOn>
				PowerVib(80);
 8006a96:	2050      	movs	r0, #80	; 0x50
 8006a98:	f7fb fe64 	bl	8002764 <PowerVib>
				OutBuzOff();
 8006a9c:	f7fc fd72 	bl	8003584 <OutBuzOff>

				//LedOn(0, 0, 0, TabGen);
				last_vib = HAL_GetTick();
 8006aa0:	f003 fcda 	bl	800a458 <HAL_GetTick>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	4a1c      	ldr	r2, [pc, #112]	; (8006b18 <Task_Gaz+0x3c0>)
 8006aa8:	6013      	str	r3, [r2, #0]
 8006aaa:	e028      	b.n	8006afe <Task_Gaz+0x3a6>
			}
			else if (time - last_vib > 100 && gaz_alert_phase == 1)
 8006aac:	4b1a      	ldr	r3, [pc, #104]	; (8006b18 <Task_Gaz+0x3c0>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	6a3a      	ldr	r2, [r7, #32]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b64      	cmp	r3, #100	; 0x64
 8006ab6:	d907      	bls.n	8006ac8 <Task_Gaz+0x370>
 8006ab8:	4b18      	ldr	r3, [pc, #96]	; (8006b1c <Task_Gaz+0x3c4>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d103      	bne.n	8006ac8 <Task_Gaz+0x370>
			{
				gaz_alert_phase = 2;
 8006ac0:	4b16      	ldr	r3, [pc, #88]	; (8006b1c <Task_Gaz+0x3c4>)
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	701a      	strb	r2, [r3, #0]
 8006ac6:	e01a      	b.n	8006afe <Task_Gaz+0x3a6>

			}
			else if (time - last_vib > 150 && gaz_alert_phase == 2)
 8006ac8:	4b13      	ldr	r3, [pc, #76]	; (8006b18 <Task_Gaz+0x3c0>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6a3a      	ldr	r2, [r7, #32]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b96      	cmp	r3, #150	; 0x96
 8006ad2:	d919      	bls.n	8006b08 <Task_Gaz+0x3b0>
 8006ad4:	4b11      	ldr	r3, [pc, #68]	; (8006b1c <Task_Gaz+0x3c4>)
 8006ad6:	781b      	ldrb	r3, [r3, #0]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d115      	bne.n	8006b08 <Task_Gaz+0x3b0>
			{
				gaz_alert_phase = 0;
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <Task_Gaz+0x3c4>)
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]

				OutBuzOn();
 8006ae2:	f7fc fd45 	bl	8003570 <OutBuzOn>
				PowerVib(80);
 8006ae6:	2050      	movs	r0, #80	; 0x50
 8006ae8:	f7fb fe3c 	bl	8002764 <PowerVib>
				OutBuzOff();
 8006aec:	f7fc fd4a 	bl	8003584 <OutBuzOff>

				LedOn(0, 0, 0, TabGen);
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <Task_Gaz+0x3c8>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	2100      	movs	r1, #0
 8006af6:	2000      	movs	r0, #0
 8006af8:	f7fd f81c 	bl	8003b34 <LedOn>
			if (time - last_vib > 1000 && gaz_alert_phase == 0)
 8006afc:	e004      	b.n	8006b08 <Task_Gaz+0x3b0>
 8006afe:	e003      	b.n	8006b08 <Task_Gaz+0x3b0>



		}
		else
			GAZ_THRESHOLD_ALERT = 0;
 8006b00:	4b04      	ldr	r3, [pc, #16]	; (8006b14 <Task_Gaz+0x3bc>)
 8006b02:	2200      	movs	r2, #0
 8006b04:	701a      	strb	r2, [r3, #0]
	}
}
 8006b06:	e000      	b.n	8006b0a <Task_Gaz+0x3b2>
			if (time - last_vib > 1000 && gaz_alert_phase == 0)
 8006b08:	bf00      	nop
}
 8006b0a:	bf00      	nop
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000b7e 	.word	0x20000b7e
 8006b18:	20000b60 	.word	0x20000b60
 8006b1c:	20000b7c 	.word	0x20000b7c
 8006b20:	20002550 	.word	0x20002550

08006b24 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af02      	add	r7, sp, #8
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	70fb      	strb	r3, [r7, #3]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70bb      	strb	r3, [r7, #2]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8006b44:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	bf0c      	ite	eq
 8006b4c:	2301      	moveq	r3, #1
 8006b4e:	2300      	movne	r3, #0
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8006b54:	78fa      	ldrb	r2, [r7, #3]
 8006b56:	787b      	ldrb	r3, [r7, #1]
 8006b58:	4413      	add	r3, r2
 8006b5a:	b2d8      	uxtb	r0, r3
 8006b5c:	78bb      	ldrb	r3, [r7, #2]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	78ba      	ldrb	r2, [r7, #2]
 8006b64:	78f9      	ldrb	r1, [r7, #3]
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	4603      	mov	r3, r0
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f001 f853 	bl	8007c16 <u8g2_IsIntersection>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 8006b7a:	e035      	b.n	8006be8 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 8006b7c:	69bb      	ldr	r3, [r7, #24]
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	4013      	ands	r3, r2
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d00c      	beq.n	8006ba4 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	7bba      	ldrb	r2, [r7, #14]
 8006b8e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006b92:	78ba      	ldrb	r2, [r7, #2]
 8006b94:	78f9      	ldrb	r1, [r7, #3]
 8006b96:	2300      	movs	r3, #0
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 ff84 	bl	8007aaa <u8g2_DrawHVLine>
 8006ba2:	e010      	b.n	8006bc6 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	7b7a      	ldrb	r2, [r7, #13]
 8006bb2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8006bb6:	78ba      	ldrb	r2, [r7, #2]
 8006bb8:	78f9      	ldrb	r1, [r7, #3]
 8006bba:	2300      	movs	r3, #0
 8006bbc:	9300      	str	r3, [sp, #0]
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 ff72 	bl	8007aaa <u8g2_DrawHVLine>
    }
    x++;
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	005b      	lsls	r3, r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d104      	bne.n	8006be2 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
      b++;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	3301      	adds	r3, #1
 8006be0:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8006be2:	787b      	ldrb	r3, [r7, #1]
 8006be4:	3b01      	subs	r3, #1
 8006be6:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8006be8:	787b      	ldrb	r3, [r7, #1]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1c6      	bne.n	8006b7c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	7bba      	ldrb	r2, [r7, #14]
 8006bf2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8006bf6:	e000      	b.n	8006bfa <u8g2_DrawHXBM+0xd6>
    return;
 8006bf8:	bf00      	nop
}
 8006bfa:	3710      	adds	r7, #16
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af02      	add	r7, sp, #8
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	4608      	mov	r0, r1
 8006c0a:	4611      	mov	r1, r2
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	4603      	mov	r3, r0
 8006c10:	70fb      	strb	r3, [r7, #3]
 8006c12:	460b      	mov	r3, r1
 8006c14:	70bb      	strb	r3, [r7, #2]
 8006c16:	4613      	mov	r3, r2
 8006c18:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 8006c1a:	787b      	ldrb	r3, [r7, #1]
 8006c1c:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	3307      	adds	r3, #7
 8006c22:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
 8006c26:	08db      	lsrs	r3, r3, #3
 8006c28:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	787b      	ldrb	r3, [r7, #1]
 8006c2e:	4413      	add	r3, r2
 8006c30:	b2d8      	uxtb	r0, r3
 8006c32:	78ba      	ldrb	r2, [r7, #2]
 8006c34:	7e3b      	ldrb	r3, [r7, #24]
 8006c36:	4413      	add	r3, r2
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	78ba      	ldrb	r2, [r7, #2]
 8006c3c:	78f9      	ldrb	r1, [r7, #3]
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4603      	mov	r3, r0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 ffe7 	bl	8007c16 <u8g2_IsIntersection>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d017      	beq.n	8006c7e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8006c4e:	e012      	b.n	8006c76 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8006c50:	7878      	ldrb	r0, [r7, #1]
 8006c52:	78ba      	ldrb	r2, [r7, #2]
 8006c54:	78f9      	ldrb	r1, [r7, #3]
 8006c56:	69fb      	ldr	r3, [r7, #28]
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff61 	bl	8006b24 <u8g2_DrawHXBM>
    bitmap += blen;
 8006c62:	7bfb      	ldrb	r3, [r7, #15]
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	4413      	add	r3, r2
 8006c68:	61fb      	str	r3, [r7, #28]
    y++;
 8006c6a:	78bb      	ldrb	r3, [r7, #2]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	70bb      	strb	r3, [r7, #2]
    h--;
 8006c70:	7e3b      	ldrb	r3, [r7, #24]
 8006c72:	3b01      	subs	r3, #1
 8006c74:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8006c76:	7e3b      	ldrb	r3, [r7, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e9      	bne.n	8006c50 <u8g2_DrawXBM+0x50>
 8006c7c:	e000      	b.n	8006c80 <u8g2_DrawXBM+0x80>
    return;
 8006c7e:	bf00      	nop
  }
}
 8006c80:	3710      	adds	r7, #16
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b084      	sub	sp, #16
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	7c1b      	ldrb	r3, [r3, #16]
 8006c94:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	fb02 f303 	mul.w	r3, r2, r3
 8006ca4:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	f010 fe49 	bl	801794c <memset>
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b086      	sub	sp, #24
 8006cc6:	af02      	add	r7, sp, #8
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	7c1b      	ldrb	r3, [r3, #16]
 8006cd8:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	89ba      	ldrh	r2, [r7, #12]
 8006cea:	fb12 f303 	smulbb	r3, r2, r3
 8006cee:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8006cf0:	89bb      	ldrh	r3, [r7, #12]
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8006cf6:	89bb      	ldrh	r3, [r7, #12]
 8006cf8:	68ba      	ldr	r2, [r7, #8]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8006cfe:	7bf9      	ldrb	r1, [r7, #15]
 8006d00:	78ba      	ldrb	r2, [r7, #2]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	460b      	mov	r3, r1
 8006d08:	2100      	movs	r1, #0
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f001 fc95 	bl	800863a <u8x8_DrawTile>
}
 8006d10:	bf00      	nop
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2a:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d32:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	7c5b      	ldrb	r3, [r3, #17]
 8006d3a:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8006d3c:	7bba      	ldrb	r2, [r7, #14]
 8006d3e:	7bfb      	ldrb	r3, [r7, #15]
 8006d40:	4619      	mov	r1, r3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7ff ffbd 	bl	8006cc2 <u8g2_send_tile_row>
    src_row++;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	3301      	adds	r3, #1
 8006d52:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8006d54:	7bfa      	ldrb	r2, [r7, #15]
 8006d56:	7b7b      	ldrb	r3, [r7, #13]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d203      	bcs.n	8006d64 <u8g2_send_buffer+0x4c>
 8006d5c:	7bba      	ldrb	r2, [r7, #14]
 8006d5e:	7b3b      	ldrb	r3, [r7, #12]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d3eb      	bcc.n	8006d3c <u8g2_send_buffer+0x24>
}
 8006d64:	bf00      	nop
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b082      	sub	sp, #8
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
}
 8006d94:	bf00      	nop
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d002      	beq.n	8006db4 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7ff ff69 	bl	8006c86 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8006db4:	2100      	movs	r1, #0
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7ff ffd8 	bl	8006d6c <u8g2_SetBufferCurrTileRow>
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ffa3 	bl	8006d18 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dd8:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	4413      	add	r3, r2
 8006de4:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	7c5b      	ldrb	r3, [r3, #17]
 8006dec:	7bfa      	ldrb	r2, [r7, #15]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d304      	bcc.n	8006dfc <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f001 fc72 	bl	80086dc <u8x8_RefreshDisplay>
    return 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	e00d      	b.n	8006e18 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d002      	beq.n	8006e0c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff ff3d 	bl	8006c86 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	4619      	mov	r1, r3
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff ffab 	bl	8006d6c <u8g2_SetBufferCurrTileRow>
  return 1;
 8006e16:	2301      	movs	r3, #1
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7ff ffb7 	bl	8006d9c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f7ff ffc8 	bl	8006dc4 <u8g2_NextPage>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f9      	bne.n	8006e2e <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff95 	bl	8006d6c <u8g2_SetBufferCurrTileRow>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <u8g2_m_16_4_1>:
/* generated code, codebuild, u8g2 project */

#include "u8g2.h"

uint8_t *u8g2_m_16_4_1(uint8_t *page_cnt)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	701a      	strb	r2, [r3, #0]
  return buf;
 8006e5a:	4b03      	ldr	r3, [pc, #12]	; (8006e68 <u8g2_m_16_4_1+0x1c>)
  #endif
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20000ad8 	.word	0x20000ad8

08006e6c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_i2c_128x32_univision_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b088      	sub	sp, #32
 8006e70:	af02      	add	r7, sp, #8
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	607a      	str	r2, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a0b      	ldr	r2, [pc, #44]	; (8006eb0 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x44>)
 8006e82:	490c      	ldr	r1, [pc, #48]	; (8006eb4 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x48>)
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f001 fc8d 	bl	80087a4 <u8x8_Setup>
  buf = u8g2_m_16_4_1(&tile_buf_height);
 8006e8a:	f107 0313 	add.w	r3, r7, #19
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff ffdc 	bl	8006e4c <u8g2_m_16_4_1>
 8006e94:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8006e96:	7cfa      	ldrb	r2, [r7, #19]
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	9300      	str	r3, [sp, #0]
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x4c>)
 8006e9e:	6979      	ldr	r1, [r7, #20]
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f000 ffa1 	bl	8007de8 <u8g2_SetupBuffer>
}
 8006ea6:	bf00      	nop
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}
 8006eae:	bf00      	nop
 8006eb0:	080082ed 	.word	0x080082ed
 8006eb4:	08008559 	.word	0x08008559
 8006eb8:	08007c6d 	.word	0x08007c6d

08006ebc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b083      	sub	sp, #12
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8006ec8:	78fb      	ldrb	r3, [r7, #3]
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	4413      	add	r3, r2
 8006ece:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	781b      	ldrb	r3, [r3, #0]
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr

08006ee0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	460b      	mov	r3, r1
 8006eea:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8006eec:	78fb      	ldrb	r3, [r7, #3]
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	81fb      	strh	r3, [r7, #14]
    font++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	3301      	adds	r3, #1
 8006efe:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8006f00:	89fb      	ldrh	r3, [r7, #14]
 8006f02:	021b      	lsls	r3, r3, #8
 8006f04:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	89fb      	ldrh	r3, [r7, #14]
 8006f0e:	4413      	add	r3, r2
 8006f10:	81fb      	strh	r3, [r7, #14]
    return pos;
 8006f12:	89fb      	ldrh	r3, [r7, #14]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	6838      	ldr	r0, [r7, #0]
 8006f2e:	f7ff ffc5 	bl	8006ebc <u8g2_font_get_byte>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8006f3a:	2101      	movs	r1, #1
 8006f3c:	6838      	ldr	r0, [r7, #0]
 8006f3e:	f7ff ffbd 	bl	8006ebc <u8g2_font_get_byte>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	6838      	ldr	r0, [r7, #0]
 8006f4e:	f7ff ffb5 	bl	8006ebc <u8g2_font_get_byte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	461a      	mov	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8006f5a:	2103      	movs	r1, #3
 8006f5c:	6838      	ldr	r0, [r7, #0]
 8006f5e:	f7ff ffad 	bl	8006ebc <u8g2_font_get_byte>
 8006f62:	4603      	mov	r3, r0
 8006f64:	461a      	mov	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	6838      	ldr	r0, [r7, #0]
 8006f6e:	f7ff ffa5 	bl	8006ebc <u8g2_font_get_byte>
 8006f72:	4603      	mov	r3, r0
 8006f74:	461a      	mov	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8006f7a:	2105      	movs	r1, #5
 8006f7c:	6838      	ldr	r0, [r7, #0]
 8006f7e:	f7ff ff9d 	bl	8006ebc <u8g2_font_get_byte>
 8006f82:	4603      	mov	r3, r0
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8006f8a:	2106      	movs	r1, #6
 8006f8c:	6838      	ldr	r0, [r7, #0]
 8006f8e:	f7ff ff95 	bl	8006ebc <u8g2_font_get_byte>
 8006f92:	4603      	mov	r3, r0
 8006f94:	461a      	mov	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8006f9a:	2107      	movs	r1, #7
 8006f9c:	6838      	ldr	r0, [r7, #0]
 8006f9e:	f7ff ff8d 	bl	8006ebc <u8g2_font_get_byte>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8006faa:	2108      	movs	r1, #8
 8006fac:	6838      	ldr	r0, [r7, #0]
 8006fae:	f7ff ff85 	bl	8006ebc <u8g2_font_get_byte>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	461a      	mov	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8006fba:	2109      	movs	r1, #9
 8006fbc:	6838      	ldr	r0, [r7, #0]
 8006fbe:	f7ff ff7d 	bl	8006ebc <u8g2_font_get_byte>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	b25a      	sxtb	r2, r3
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8006fca:	210a      	movs	r1, #10
 8006fcc:	6838      	ldr	r0, [r7, #0]
 8006fce:	f7ff ff75 	bl	8006ebc <u8g2_font_get_byte>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	b25a      	sxtb	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8006fda:	210b      	movs	r1, #11
 8006fdc:	6838      	ldr	r0, [r7, #0]
 8006fde:	f7ff ff6d 	bl	8006ebc <u8g2_font_get_byte>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	b25a      	sxtb	r2, r3
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8006fea:	210c      	movs	r1, #12
 8006fec:	6838      	ldr	r0, [r7, #0]
 8006fee:	f7ff ff65 	bl	8006ebc <u8g2_font_get_byte>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	b25a      	sxtb	r2, r3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8006ffa:	210d      	movs	r1, #13
 8006ffc:	6838      	ldr	r0, [r7, #0]
 8006ffe:	f7ff ff5d 	bl	8006ebc <u8g2_font_get_byte>
 8007002:	4603      	mov	r3, r0
 8007004:	b25a      	sxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800700a:	210e      	movs	r1, #14
 800700c:	6838      	ldr	r0, [r7, #0]
 800700e:	f7ff ff55 	bl	8006ebc <u8g2_font_get_byte>
 8007012:	4603      	mov	r3, r0
 8007014:	b25a      	sxtb	r2, r3
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800701a:	210f      	movs	r1, #15
 800701c:	6838      	ldr	r0, [r7, #0]
 800701e:	f7ff ff4d 	bl	8006ebc <u8g2_font_get_byte>
 8007022:	4603      	mov	r3, r0
 8007024:	b25a      	sxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800702a:	2110      	movs	r1, #16
 800702c:	6838      	ldr	r0, [r7, #0]
 800702e:	f7ff ff45 	bl	8006ebc <u8g2_font_get_byte>
 8007032:	4603      	mov	r3, r0
 8007034:	b25a      	sxtb	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800703a:	2111      	movs	r1, #17
 800703c:	6838      	ldr	r0, [r7, #0]
 800703e:	f7ff ff4f 	bl	8006ee0 <u8g2_font_get_word>
 8007042:	4603      	mov	r3, r0
 8007044:	461a      	mov	r2, r3
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800704a:	2113      	movs	r1, #19
 800704c:	6838      	ldr	r0, [r7, #0]
 800704e:	f7ff ff47 	bl	8006ee0 <u8g2_font_get_word>
 8007052:	4603      	mov	r3, r0
 8007054:	461a      	mov	r2, r3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800705a:	2115      	movs	r1, #21
 800705c:	6838      	ldr	r0, [r7, #0]
 800705e:	f7ff ff3f 	bl	8006ee0 <u8g2_font_get_word>
 8007062:	4603      	mov	r3, r0
 8007064:	461a      	mov	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	82da      	strh	r2, [r3, #22]
#endif
}
 800706a:	bf00      	nop
 800706c:	3708      	adds	r7, #8
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	7a9b      	ldrb	r3, [r3, #10]
 8007082:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800708c:	7bfa      	ldrb	r2, [r7, #15]
 800708e:	7b7b      	ldrb	r3, [r7, #13]
 8007090:	fa42 f303 	asr.w	r3, r2, r3
 8007094:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800709a:	7bba      	ldrb	r2, [r7, #14]
 800709c:	78fb      	ldrb	r3, [r7, #3]
 800709e:	4413      	add	r3, r2
 80070a0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b07      	cmp	r3, #7
 80070a6:	d91a      	bls.n	80070de <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80070a8:	2308      	movs	r3, #8
 80070aa:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80070ac:	7b3a      	ldrb	r2, [r7, #12]
 80070ae:	7b7b      	ldrb	r3, [r7, #13]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	7b3b      	ldrb	r3, [r7, #12]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	b25a      	sxtb	r2, r3
 80070ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	b25b      	sxtb	r3, r3
 80070d6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80070d8:	7bbb      	ldrb	r3, [r7, #14]
 80070da:	3b08      	subs	r3, #8
 80070dc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80070de:	78fb      	ldrb	r3, [r7, #3]
 80070e0:	f04f 32ff 	mov.w	r2, #4294967295
 80070e4:	fa02 f303 	lsl.w	r3, r2, r3
 80070e8:	b2db      	uxtb	r3, r3
 80070ea:	43db      	mvns	r3, r3
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	4013      	ands	r3, r2
 80070f2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	7bba      	ldrb	r2, [r7, #14]
 80070f8:	729a      	strb	r2, [r3, #10]
  return val;
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	460b      	mov	r3, r1
 8007112:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	4619      	mov	r1, r3
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f7ff ffaa 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 800711e:	4603      	mov	r3, r0
 8007120:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8007126:	78fb      	ldrb	r3, [r7, #3]
 8007128:	3b01      	subs	r3, #1
 800712a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800712c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8007138:	7bfa      	ldrb	r2, [r7, #15]
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	b2db      	uxtb	r3, r3
 8007140:	73fb      	strb	r3, [r7, #15]
  return v;
 8007142:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800714e:	b490      	push	{r4, r7}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	4604      	mov	r4, r0
 8007156:	4608      	mov	r0, r1
 8007158:	4611      	mov	r1, r2
 800715a:	461a      	mov	r2, r3
 800715c:	4623      	mov	r3, r4
 800715e:	71fb      	strb	r3, [r7, #7]
 8007160:	4603      	mov	r3, r0
 8007162:	71bb      	strb	r3, [r7, #6]
 8007164:	460b      	mov	r3, r1
 8007166:	717b      	strb	r3, [r7, #5]
 8007168:	4613      	mov	r3, r2
 800716a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800716c:	793b      	ldrb	r3, [r7, #4]
 800716e:	2b02      	cmp	r3, #2
 8007170:	d010      	beq.n	8007194 <u8g2_add_vector_y+0x46>
 8007172:	2b02      	cmp	r3, #2
 8007174:	dc13      	bgt.n	800719e <u8g2_add_vector_y+0x50>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d002      	beq.n	8007180 <u8g2_add_vector_y+0x32>
 800717a:	2b01      	cmp	r3, #1
 800717c:	d005      	beq.n	800718a <u8g2_add_vector_y+0x3c>
 800717e:	e00e      	b.n	800719e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8007180:	797a      	ldrb	r2, [r7, #5]
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	4413      	add	r3, r2
 8007186:	71fb      	strb	r3, [r7, #7]
      break;
 8007188:	e00e      	b.n	80071a8 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800718a:	79ba      	ldrb	r2, [r7, #6]
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	4413      	add	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
      break;
 8007192:	e009      	b.n	80071a8 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8007194:	797b      	ldrb	r3, [r7, #5]
 8007196:	79fa      	ldrb	r2, [r7, #7]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	71fb      	strb	r3, [r7, #7]
      break;
 800719c:	e004      	b.n	80071a8 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800719e:	79bb      	ldrb	r3, [r7, #6]
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	71fb      	strb	r3, [r7, #7]
      break;      
 80071a6:	bf00      	nop
  }
  return dy;
 80071a8:	79fb      	ldrb	r3, [r7, #7]
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bc90      	pop	{r4, r7}
 80071b2:	4770      	bx	lr

080071b4 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80071b4:	b490      	push	{r4, r7}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	4604      	mov	r4, r0
 80071bc:	4608      	mov	r0, r1
 80071be:	4611      	mov	r1, r2
 80071c0:	461a      	mov	r2, r3
 80071c2:	4623      	mov	r3, r4
 80071c4:	71fb      	strb	r3, [r7, #7]
 80071c6:	4603      	mov	r3, r0
 80071c8:	71bb      	strb	r3, [r7, #6]
 80071ca:	460b      	mov	r3, r1
 80071cc:	717b      	strb	r3, [r7, #5]
 80071ce:	4613      	mov	r3, r2
 80071d0:	713b      	strb	r3, [r7, #4]
  switch(dir)
 80071d2:	793b      	ldrb	r3, [r7, #4]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d010      	beq.n	80071fa <u8g2_add_vector_x+0x46>
 80071d8:	2b02      	cmp	r3, #2
 80071da:	dc13      	bgt.n	8007204 <u8g2_add_vector_x+0x50>
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d002      	beq.n	80071e6 <u8g2_add_vector_x+0x32>
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d005      	beq.n	80071f0 <u8g2_add_vector_x+0x3c>
 80071e4:	e00e      	b.n	8007204 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 80071e6:	79ba      	ldrb	r2, [r7, #6]
 80071e8:	79fb      	ldrb	r3, [r7, #7]
 80071ea:	4413      	add	r3, r2
 80071ec:	71fb      	strb	r3, [r7, #7]
      break;
 80071ee:	e00e      	b.n	800720e <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 80071f0:	797b      	ldrb	r3, [r7, #5]
 80071f2:	79fa      	ldrb	r2, [r7, #7]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	71fb      	strb	r3, [r7, #7]
      break;
 80071f8:	e009      	b.n	800720e <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 80071fa:	79bb      	ldrb	r3, [r7, #6]
 80071fc:	79fa      	ldrb	r2, [r7, #7]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	71fb      	strb	r3, [r7, #7]
      break;
 8007202:	e004      	b.n	800720e <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 8007204:	797a      	ldrb	r2, [r7, #5]
 8007206:	79fb      	ldrb	r3, [r7, #7]
 8007208:	4413      	add	r3, r2
 800720a:	71fb      	strb	r3, [r7, #7]
      break;      
 800720c:	bf00      	nop
  }
  return dx;
 800720e:	79fb      	ldrb	r3, [r7, #7]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3708      	adds	r7, #8
 8007214:	46bd      	mov	sp, r7
 8007216:	bc90      	pop	{r4, r7}
 8007218:	4770      	bx	lr

0800721a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b088      	sub	sp, #32
 800721e:	af02      	add	r7, sp, #8
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
 8007226:	4613      	mov	r3, r2
 8007228:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3358      	adds	r3, #88	; 0x58
 800722e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800723a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8007242:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800724a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800724c:	7bfa      	ldrb	r2, [r7, #15]
 800724e:	7d7b      	ldrb	r3, [r7, #21]
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8007258:	7dfa      	ldrb	r2, [r7, #23]
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	429a      	cmp	r2, r3
 800725e:	d201      	bcs.n	8007264 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8007260:	7dfb      	ldrb	r3, [r7, #23]
 8007262:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	791b      	ldrb	r3, [r3, #4]
 8007268:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	795b      	ldrb	r3, [r3, #5]
 800726e:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8007270:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8007274:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	7b9b      	ldrb	r3, [r3, #14]
 800727c:	7bb8      	ldrb	r0, [r7, #14]
 800727e:	f7ff ff99 	bl	80071b4 <u8g2_add_vector_x>
 8007282:	4603      	mov	r3, r0
 8007284:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8007286:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800728a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	7b9b      	ldrb	r3, [r3, #14]
 8007292:	7b78      	ldrb	r0, [r7, #13]
 8007294:	f7ff ff5b 	bl	800714e <u8g2_add_vector_y>
 8007298:	4603      	mov	r3, r0
 800729a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800729c:	78bb      	ldrb	r3, [r7, #2]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00f      	beq.n	80072c2 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	7b1a      	ldrb	r2, [r3, #12]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	7b9b      	ldrb	r3, [r3, #14]
 80072b0:	7db8      	ldrb	r0, [r7, #22]
 80072b2:	7b7a      	ldrb	r2, [r7, #13]
 80072b4:	7bb9      	ldrb	r1, [r7, #14]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	4603      	mov	r3, r0
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fbf5 	bl	8007aaa <u8g2_DrawHVLine>
 80072c0:	e012      	b.n	80072e8 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	7adb      	ldrb	r3, [r3, #11]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10e      	bne.n	80072e8 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	7b5a      	ldrb	r2, [r3, #13]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	7b9b      	ldrb	r3, [r3, #14]
 80072d8:	7db8      	ldrb	r0, [r7, #22]
 80072da:	7b7a      	ldrb	r2, [r7, #13]
 80072dc:	7bb9      	ldrb	r1, [r7, #14]
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	4603      	mov	r3, r0
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fbe1 	bl	8007aaa <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80072e8:	7dfa      	ldrb	r2, [r7, #23]
 80072ea:	7bfb      	ldrb	r3, [r7, #15]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d309      	bcc.n	8007304 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 80072f0:	7dfa      	ldrb	r2, [r7, #23]
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	1ad3      	subs	r3, r2, r3
 80072f6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	757b      	strb	r3, [r7, #21]
    ly++;
 80072fc:	7d3b      	ldrb	r3, [r7, #20]
 80072fe:	3301      	adds	r3, #1
 8007300:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8007302:	e79f      	b.n	8007244 <u8g2_font_decode_len+0x2a>
      break;
 8007304:	bf00      	nop
  }
  lx += cnt;
 8007306:	7d7a      	ldrb	r2, [r7, #21]
 8007308:	7dfb      	ldrb	r3, [r7, #23]
 800730a:	4413      	add	r3, r2
 800730c:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800730e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 8007316:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	71da      	strb	r2, [r3, #7]
  
}
 800731e:	bf00      	nop
 8007320:	3718      	adds	r7, #24
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b084      	sub	sp, #16
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	3358      	adds	r3, #88	; 0x58
 8007334:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007348:	4619      	mov	r1, r3
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	f7ff fe91 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 8007350:	4603      	mov	r3, r0
 8007352:	b25a      	sxtb	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800735e:	4619      	mov	r1, r3
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff fe86 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 8007366:	4603      	mov	r3, r0
 8007368:	b25a      	sxtb	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	7b1b      	ldrb	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	461a      	mov	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	735a      	strb	r2, [r3, #13]
}
 800738c:	bf00      	nop
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	3358      	adds	r3, #88	; 0x58
 80073a2:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 80073a4:	6839      	ldr	r1, [r7, #0]
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7ff ffbd 	bl	8007326 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073b2:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80073ba:	4619      	mov	r1, r3
 80073bc:	6938      	ldr	r0, [r7, #16]
 80073be:	f7ff fea3 	bl	8007108 <u8g2_font_decode_get_signed_bits>
 80073c2:	4603      	mov	r3, r0
 80073c4:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80073cc:	4619      	mov	r1, r3
 80073ce:	6938      	ldr	r0, [r7, #16]
 80073d0:	f7ff fe9a 	bl	8007108 <u8g2_font_decode_get_signed_bits>
 80073d4:	4603      	mov	r3, r0
 80073d6:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073de:	4619      	mov	r1, r3
 80073e0:	6938      	ldr	r0, [r7, #16]
 80073e2:	f7ff fe91 	bl	8007108 <u8g2_font_decode_get_signed_bits>
 80073e6:	4603      	mov	r3, r0
 80073e8:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f340 80cf 	ble.w	8007594 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	7918      	ldrb	r0, [r3, #4]
 80073fa:	7bfa      	ldrb	r2, [r7, #15]
 80073fc:	7b7b      	ldrb	r3, [r7, #13]
 80073fe:	4413      	add	r3, r2
 8007400:	b2db      	uxtb	r3, r3
 8007402:	425b      	negs	r3, r3
 8007404:	b2db      	uxtb	r3, r3
 8007406:	b25a      	sxtb	r2, r3
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	7b9b      	ldrb	r3, [r3, #14]
 800740c:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007410:	f7ff fed0 	bl	80071b4 <u8g2_add_vector_x>
 8007414:	4603      	mov	r3, r0
 8007416:	461a      	mov	r2, r3
 8007418:	693b      	ldr	r3, [r7, #16]
 800741a:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	7958      	ldrb	r0, [r3, #5]
 8007420:	7bfa      	ldrb	r2, [r7, #15]
 8007422:	7b7b      	ldrb	r3, [r7, #13]
 8007424:	4413      	add	r3, r2
 8007426:	b2db      	uxtb	r3, r3
 8007428:	425b      	negs	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	b25a      	sxtb	r2, r3
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	7b9b      	ldrb	r3, [r3, #14]
 8007432:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8007436:	f7ff fe8a 	bl	800714e <u8g2_add_vector_y>
 800743a:	4603      	mov	r3, r0
 800743c:	461a      	mov	r2, r3
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	791b      	ldrb	r3, [r3, #4]
 8007446:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	795b      	ldrb	r3, [r3, #5]
 800744c:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8007452:	7d7b      	ldrb	r3, [r7, #21]
 8007454:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	7b9b      	ldrb	r3, [r3, #14]
 800745a:	2b03      	cmp	r3, #3
 800745c:	d852      	bhi.n	8007504 <u8g2_font_decode_glyph+0x170>
 800745e:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <u8g2_font_decode_glyph+0xd0>)
 8007460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007464:	08007475 	.word	0x08007475
 8007468:	0800748d 	.word	0x0800748d
 800746c:	080074b1 	.word	0x080074b1
 8007470:	080074e1 	.word	0x080074e1
      {
	case 0:
	    x1 += decode->glyph_width;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800747a:	b2da      	uxtb	r2, r3
 800747c:	7dbb      	ldrb	r3, [r7, #22]
 800747e:	4413      	add	r3, r2
 8007480:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8007482:	7bfa      	ldrb	r2, [r7, #15]
 8007484:	7d3b      	ldrb	r3, [r7, #20]
 8007486:	4413      	add	r3, r2
 8007488:	753b      	strb	r3, [r7, #20]
	    break;
 800748a:	e03b      	b.n	8007504 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	7dfa      	ldrb	r2, [r7, #23]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	3301      	adds	r3, #1
 8007498:	75fb      	strb	r3, [r7, #23]
	    x1++;
 800749a:	7dbb      	ldrb	r3, [r7, #22]
 800749c:	3301      	adds	r3, #1
 800749e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	7d3b      	ldrb	r3, [r7, #20]
 80074aa:	4413      	add	r3, r2
 80074ac:	753b      	strb	r3, [r7, #20]
	    break;
 80074ae:	e029      	b.n	8007504 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	7dfa      	ldrb	r2, [r7, #23]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	3301      	adds	r3, #1
 80074c2:	75fb      	strb	r3, [r7, #23]
	    x1++;
 80074c4:	7dbb      	ldrb	r3, [r7, #22]
 80074c6:	3301      	adds	r3, #1
 80074c8:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	7d7a      	ldrb	r2, [r7, #21]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80074d2:	7d7b      	ldrb	r3, [r7, #21]
 80074d4:	3301      	adds	r3, #1
 80074d6:	757b      	strb	r3, [r7, #21]
	    y1++;
 80074d8:	7d3b      	ldrb	r3, [r7, #20]
 80074da:	3301      	adds	r3, #1
 80074dc:	753b      	strb	r3, [r7, #20]
	    break;	  
 80074de:	e011      	b.n	8007504 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 80074e0:	7bfa      	ldrb	r2, [r7, #15]
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	4413      	add	r3, r2
 80074e6:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	7d7a      	ldrb	r2, [r7, #21]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80074f6:	7d7b      	ldrb	r3, [r7, #21]
 80074f8:	3301      	adds	r3, #1
 80074fa:	757b      	strb	r3, [r7, #21]
	    y1++;
 80074fc:	7d3b      	ldrb	r3, [r7, #20]
 80074fe:	3301      	adds	r3, #1
 8007500:	753b      	strb	r3, [r7, #20]
	    break;	  
 8007502:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8007504:	7db8      	ldrb	r0, [r7, #22]
 8007506:	7d7a      	ldrb	r2, [r7, #21]
 8007508:	7df9      	ldrb	r1, [r7, #23]
 800750a:	7d3b      	ldrb	r3, [r7, #20]
 800750c:	9300      	str	r3, [sp, #0]
 800750e:	4603      	mov	r3, r0
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fb80 	bl	8007c16 <u8g2_IsIntersection>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d102      	bne.n	8007522 <u8g2_font_decode_glyph+0x18e>
	return d;
 800751c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007520:	e03a      	b.n	8007598 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	2200      	movs	r2, #0
 8007526:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	2200      	movs	r2, #0
 800752c:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8007534:	4619      	mov	r1, r3
 8007536:	6938      	ldr	r0, [r7, #16]
 8007538:	f7ff fd9b 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 800753c:	4603      	mov	r3, r0
 800753e:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8007546:	4619      	mov	r1, r3
 8007548:	6938      	ldr	r0, [r7, #16]
 800754a:	f7ff fd92 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 800754e:	4603      	mov	r3, r0
 8007550:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	2200      	movs	r2, #0
 8007556:	4619      	mov	r1, r3
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff fe5e 	bl	800721a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 800755e:	7abb      	ldrb	r3, [r7, #10]
 8007560:	2201      	movs	r2, #1
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f7ff fe58 	bl	800721a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800756a:	2101      	movs	r1, #1
 800756c:	6938      	ldr	r0, [r7, #16]
 800756e:	f7ff fd80 	bl	8007072 <u8g2_font_decode_get_unsigned_bits>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1ec      	bne.n	8007552 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800757e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007582:	429a      	cmp	r2, r3
 8007584:	dd00      	ble.n	8007588 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8007586:	e7d2      	b.n	800752e <u8g2_font_decode_glyph+0x19a>
	break;
 8007588:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	7b1a      	ldrb	r2, [r3, #12]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8007594:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	460b      	mov	r3, r1
 80075aa:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b0:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3317      	adds	r3, #23
 80075b6:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80075b8:	887b      	ldrh	r3, [r7, #2]
 80075ba:	2bff      	cmp	r3, #255	; 0xff
 80075bc:	d82a      	bhi.n	8007614 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80075be:	887b      	ldrh	r3, [r7, #2]
 80075c0:	2b60      	cmp	r3, #96	; 0x60
 80075c2:	d907      	bls.n	80075d4 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075ca:	461a      	mov	r2, r3
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4413      	add	r3, r2
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	e009      	b.n	80075e8 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80075d4:	887b      	ldrh	r3, [r7, #2]
 80075d6:	2b40      	cmp	r3, #64	; 0x40
 80075d8:	d906      	bls.n	80075e8 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80075e0:	461a      	mov	r2, r3
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	4413      	add	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	3301      	adds	r3, #1
 80075ec:	781b      	ldrb	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d04e      	beq.n	8007690 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	887a      	ldrh	r2, [r7, #2]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d102      	bne.n	8007604 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	3302      	adds	r3, #2
 8007602:	e049      	b.n	8007698 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3301      	adds	r3, #1
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8007612:	e7e9      	b.n	80075e8 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 800761a:	461a      	mov	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	4413      	add	r3, r2
 8007620:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8007626:	2100      	movs	r1, #0
 8007628:	6938      	ldr	r0, [r7, #16]
 800762a:	f7ff fc59 	bl	8006ee0 <u8g2_font_get_word>
 800762e:	4603      	mov	r3, r0
 8007630:	461a      	mov	r2, r3
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8007638:	2102      	movs	r1, #2
 800763a:	6938      	ldr	r0, [r7, #16]
 800763c:	f7ff fc50 	bl	8006ee0 <u8g2_font_get_word>
 8007640:	4603      	mov	r3, r0
 8007642:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	3304      	adds	r3, #4
 8007648:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800764a:	89fa      	ldrh	r2, [r7, #14]
 800764c:	887b      	ldrh	r3, [r7, #2]
 800764e:	429a      	cmp	r2, r3
 8007650:	d3e9      	bcc.n	8007626 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8007658:	89fb      	ldrh	r3, [r7, #14]
 800765a:	021b      	lsls	r3, r3, #8
 800765c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	3301      	adds	r3, #1
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	b29a      	uxth	r2, r3
 8007666:	89fb      	ldrh	r3, [r7, #14]
 8007668:	4313      	orrs	r3, r2
 800766a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 800766c:	89fb      	ldrh	r3, [r7, #14]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d010      	beq.n	8007694 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8007672:	89fa      	ldrh	r2, [r7, #14]
 8007674:	887b      	ldrh	r3, [r7, #2]
 8007676:	429a      	cmp	r2, r3
 8007678:	d102      	bne.n	8007680 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	3303      	adds	r3, #3
 800767e:	e00b      	b.n	8007698 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	3302      	adds	r3, #2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	4413      	add	r3, r2
 800768c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 800768e:	e7e0      	b.n	8007652 <u8g2_font_get_glyph_data+0xb2>
	break;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <u8g2_font_get_glyph_data+0xf6>
	break;
 8007694:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	3718      	adds	r7, #24
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	4608      	mov	r0, r1
 80076aa:	4611      	mov	r1, r2
 80076ac:	461a      	mov	r2, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	70fb      	strb	r3, [r7, #3]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70bb      	strb	r3, [r7, #2]
 80076b6:	4613      	mov	r3, r2
 80076b8:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 80076ba:	2300      	movs	r3, #0
 80076bc:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	78fa      	ldrb	r2, [r7, #3]
 80076c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	78ba      	ldrb	r2, [r7, #2]
 80076ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80076ce:	883b      	ldrh	r3, [r7, #0]
 80076d0:	4619      	mov	r1, r3
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7ff ff64 	bl	80075a0 <u8g2_font_get_glyph_data>
 80076d8:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80076e0:	68b9      	ldr	r1, [r7, #8]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f7ff fe56 	bl	8007394 <u8g2_font_decode_glyph>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
	...

080076f8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	4608      	mov	r0, r1
 8007702:	4611      	mov	r1, r2
 8007704:	461a      	mov	r2, r3
 8007706:	4603      	mov	r3, r0
 8007708:	70fb      	strb	r3, [r7, #3]
 800770a:	460b      	mov	r3, r1
 800770c:	70bb      	strb	r3, [r7, #2]
 800770e:	4613      	mov	r3, r2
 8007710:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007718:	2b03      	cmp	r3, #3
 800771a:	d833      	bhi.n	8007784 <u8g2_DrawGlyph+0x8c>
 800771c:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <u8g2_DrawGlyph+0x2c>)
 800771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007722:	bf00      	nop
 8007724:	08007735 	.word	0x08007735
 8007728:	08007749 	.word	0x08007749
 800772c:	0800775d 	.word	0x0800775d
 8007730:	08007771 	.word	0x08007771
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	6878      	ldr	r0, [r7, #4]
 800773a:	4798      	blx	r3
 800773c:	4603      	mov	r3, r0
 800773e:	461a      	mov	r2, r3
 8007740:	78bb      	ldrb	r3, [r7, #2]
 8007742:	4413      	add	r3, r2
 8007744:	70bb      	strb	r3, [r7, #2]
      break;
 8007746:	e01d      	b.n	8007784 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	4798      	blx	r3
 8007750:	4603      	mov	r3, r0
 8007752:	461a      	mov	r2, r3
 8007754:	78fb      	ldrb	r3, [r7, #3]
 8007756:	1a9b      	subs	r3, r3, r2
 8007758:	70fb      	strb	r3, [r7, #3]
      break;
 800775a:	e013      	b.n	8007784 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	4798      	blx	r3
 8007764:	4603      	mov	r3, r0
 8007766:	461a      	mov	r2, r3
 8007768:	78bb      	ldrb	r3, [r7, #2]
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	70bb      	strb	r3, [r7, #2]
      break;
 800776e:	e009      	b.n	8007784 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	4798      	blx	r3
 8007778:	4603      	mov	r3, r0
 800777a:	461a      	mov	r2, r3
 800777c:	78fb      	ldrb	r3, [r7, #3]
 800777e:	4413      	add	r3, r2
 8007780:	70fb      	strb	r3, [r7, #3]
      break;
 8007782:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8007784:	883b      	ldrh	r3, [r7, #0]
 8007786:	78ba      	ldrb	r2, [r7, #2]
 8007788:	78f9      	ldrb	r1, [r7, #3]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff ff88 	bl	80076a0 <u8g2_font_draw_glyph>
 8007790:	4603      	mov	r3, r0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3708      	adds	r7, #8
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop

0800779c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b086      	sub	sp, #24
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	72fb      	strb	r3, [r7, #11]
 80077aa:	4613      	mov	r3, r2
 80077ac:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fc6e 	bl	8008090 <u8x8_utf8_init>
  sum = 0;
 80077b4:	2300      	movs	r3, #0
 80077b6:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	7812      	ldrb	r2, [r2, #0]
 80077c0:	4611      	mov	r1, r2
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 80077ca:	8abb      	ldrh	r3, [r7, #20]
 80077cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d038      	beq.n	8007846 <u8g2_draw_string+0xaa>
      break;
    str++;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3301      	adds	r3, #1
 80077d8:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 80077da:	8abb      	ldrh	r3, [r7, #20]
 80077dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d0e9      	beq.n	80077b8 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80077e4:	8abb      	ldrh	r3, [r7, #20]
 80077e6:	7aba      	ldrb	r2, [r7, #10]
 80077e8:	7af9      	ldrb	r1, [r7, #11]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff ff84 	bl	80076f8 <u8g2_DrawGlyph>
 80077f0:	4603      	mov	r3, r0
 80077f2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d81e      	bhi.n	800783c <u8g2_draw_string+0xa0>
 80077fe:	a201      	add	r2, pc, #4	; (adr r2, 8007804 <u8g2_draw_string+0x68>)
 8007800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007804:	08007815 	.word	0x08007815
 8007808:	0800781f 	.word	0x0800781f
 800780c:	08007829 	.word	0x08007829
 8007810:	08007833 	.word	0x08007833
      {
	case 0:
	  x += delta;
 8007814:	7afa      	ldrb	r2, [r7, #11]
 8007816:	7cfb      	ldrb	r3, [r7, #19]
 8007818:	4413      	add	r3, r2
 800781a:	72fb      	strb	r3, [r7, #11]
	  break;
 800781c:	e00e      	b.n	800783c <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 800781e:	7aba      	ldrb	r2, [r7, #10]
 8007820:	7cfb      	ldrb	r3, [r7, #19]
 8007822:	4413      	add	r3, r2
 8007824:	72bb      	strb	r3, [r7, #10]
	  break;
 8007826:	e009      	b.n	800783c <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8007828:	7afa      	ldrb	r2, [r7, #11]
 800782a:	7cfb      	ldrb	r3, [r7, #19]
 800782c:	1ad3      	subs	r3, r2, r3
 800782e:	72fb      	strb	r3, [r7, #11]
	  break;
 8007830:	e004      	b.n	800783c <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8007832:	7aba      	ldrb	r2, [r7, #10]
 8007834:	7cfb      	ldrb	r3, [r7, #19]
 8007836:	1ad3      	subs	r3, r2, r3
 8007838:	72bb      	strb	r3, [r7, #10]
	  break;
 800783a:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 800783c:	7dfa      	ldrb	r2, [r7, #23]
 800783e:	7cfb      	ldrb	r3, [r7, #19]
 8007840:	4413      	add	r3, r2
 8007842:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8007844:	e7b8      	b.n	80077b8 <u8g2_draw_string+0x1c>
      break;
 8007846:	bf00      	nop
    }
  }
  return sum;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	607b      	str	r3, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	72fb      	strb	r3, [r7, #11]
 8007862:	4613      	mov	r3, r2
 8007864:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4a06      	ldr	r2, [pc, #24]	; (8007884 <u8g2_DrawStr+0x30>)
 800786a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800786c:	7aba      	ldrb	r2, [r7, #10]
 800786e:	7af9      	ldrb	r1, [r7, #11]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68f8      	ldr	r0, [r7, #12]
 8007874:	f7ff ff92 	bl	800779c <u8g2_draw_string>
 8007878:	4603      	mov	r3, r0
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	080080ad 	.word	0x080080ad

08007888 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007894:	2b00      	cmp	r3, #0
 8007896:	d05d      	beq.n	8007954 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d04d      	beq.n	8007956 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d11c      	bne.n	80078fe <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80078d0:	429a      	cmp	r2, r3
 80078d2:	da05      	bge.n	80078e0 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80078ec:	429a      	cmp	r2, r3
 80078ee:	dd32      	ble.n	8007956 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80078fc:	e02b      	b.n	8007956 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8007904:	461a      	mov	r2, r3
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800790c:	4619      	mov	r1, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007914:	440b      	add	r3, r1
 8007916:	429a      	cmp	r2, r3
 8007918:	da0d      	bge.n	8007936 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8007920:	b2da      	uxtb	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007928:	b2db      	uxtb	r3, r3
 800792a:	4413      	add	r3, r2
 800792c:	b2db      	uxtb	r3, r3
 800792e:	b25a      	sxtb	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007942:	429a      	cmp	r2, r3
 8007944:	dd07      	ble.n	8007956 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8007952:	e000      	b.n	8007956 <u8g2_UpdateRefHeight+0xce>
    return;
 8007954:	bf00      	nop
  }  
}
 8007956:	370c      	adds	r7, #12
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  return 0;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
	...

08007978 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a04      	ldr	r2, [pc, #16]	; (8007994 <u8g2_SetFontPosBaseline+0x1c>)
 8007984:	655a      	str	r2, [r3, #84]	; 0x54
}
 8007986:	bf00      	nop
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	08007961 	.word	0x08007961

08007998 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d00b      	beq.n	80079c4 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	683a      	ldr	r2, [r7, #0]
 80079b0:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	3368      	adds	r3, #104	; 0x68
 80079b6:	6839      	ldr	r1, [r7, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7ff fab1 	bl	8006f20 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7ff ff62 	bl	8007888 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80079c4:	bf00      	nop
 80079c6:	3708      	adds	r7, #8
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b087      	sub	sp, #28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	4611      	mov	r1, r2
 80079d8:	461a      	mov	r2, r3
 80079da:	460b      	mov	r3, r1
 80079dc:	71fb      	strb	r3, [r7, #7]
 80079de:	4613      	mov	r3, r2
 80079e0:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	75bb      	strb	r3, [r7, #22]
  b += *len;
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	781a      	ldrb	r2, [r3, #0]
 80079f0:	7dbb      	ldrb	r3, [r7, #22]
 80079f2:	4413      	add	r3, r2
 80079f4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80079f6:	7dfa      	ldrb	r2, [r7, #23]
 80079f8:	7dbb      	ldrb	r3, [r7, #22]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d90b      	bls.n	8007a16 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80079fe:	7dfa      	ldrb	r2, [r7, #23]
 8007a00:	79bb      	ldrb	r3, [r7, #6]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d205      	bcs.n	8007a12 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8007a06:	79bb      	ldrb	r3, [r7, #6]
 8007a08:	75bb      	strb	r3, [r7, #22]
      b--;
 8007a0a:	7dbb      	ldrb	r3, [r7, #22]
 8007a0c:	3b01      	subs	r3, #1
 8007a0e:	75bb      	strb	r3, [r7, #22]
 8007a10:	e001      	b.n	8007a16 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8007a12:	79fb      	ldrb	r3, [r7, #7]
 8007a14:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8007a16:	7dfa      	ldrb	r2, [r7, #23]
 8007a18:	79bb      	ldrb	r3, [r7, #6]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d301      	bcc.n	8007a22 <u8g2_clip_intersection2+0x56>
    return 0;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	e01c      	b.n	8007a5c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8007a22:	7dba      	ldrb	r2, [r7, #22]
 8007a24:	79fb      	ldrb	r3, [r7, #7]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d801      	bhi.n	8007a2e <u8g2_clip_intersection2+0x62>
    return 0;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e016      	b.n	8007a5c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8007a2e:	7dfa      	ldrb	r2, [r7, #23]
 8007a30:	79fb      	ldrb	r3, [r7, #7]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d201      	bcs.n	8007a3a <u8g2_clip_intersection2+0x6e>
    a = c;
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 8007a3a:	7dba      	ldrb	r2, [r7, #22]
 8007a3c:	79bb      	ldrb	r3, [r7, #6]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d901      	bls.n	8007a46 <u8g2_clip_intersection2+0x7a>
    b = d;
 8007a42:	79bb      	ldrb	r3, [r7, #6]
 8007a44:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	7dfa      	ldrb	r2, [r7, #23]
 8007a4a:	701a      	strb	r2, [r3, #0]
  b -= a;
 8007a4c:	7dba      	ldrb	r2, [r7, #22]
 8007a4e:	7dfb      	ldrb	r3, [r7, #23]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	7dba      	ldrb	r2, [r7, #22]
 8007a58:	701a      	strb	r2, [r3, #0]
  return 1;
 8007a5a:	2301      	movs	r3, #1
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af02      	add	r7, sp, #8
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	4608      	mov	r0, r1
 8007a72:	4611      	mov	r1, r2
 8007a74:	461a      	mov	r2, r3
 8007a76:	4603      	mov	r3, r0
 8007a78:	70fb      	strb	r3, [r7, #3]
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	70bb      	strb	r3, [r7, #2]
 8007a7e:	4613      	mov	r3, r2
 8007a80:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a88:	78ba      	ldrb	r2, [r7, #2]
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007a92:	7878      	ldrb	r0, [r7, #1]
 8007a94:	78ba      	ldrb	r2, [r7, #2]
 8007a96:	78f9      	ldrb	r1, [r7, #3]
 8007a98:	7e3b      	ldrb	r3, [r7, #24]
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	47a0      	blx	r4
}
 8007aa2:	bf00      	nop
 8007aa4:	370c      	adds	r7, #12
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd90      	pop	{r4, r7, pc}

08007aaa <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007aaa:	b590      	push	{r4, r7, lr}
 8007aac:	b085      	sub	sp, #20
 8007aae:	af02      	add	r7, sp, #8
 8007ab0:	6078      	str	r0, [r7, #4]
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	4603      	mov	r3, r0
 8007aba:	70fb      	strb	r3, [r7, #3]
 8007abc:	460b      	mov	r3, r1
 8007abe:	70bb      	strb	r3, [r7, #2]
 8007ac0:	4613      	mov	r3, r2
 8007ac2:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d06d      	beq.n	8007baa <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8007ace:	787b      	ldrb	r3, [r7, #1]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d06a      	beq.n	8007baa <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8007ad4:	787b      	ldrb	r3, [r7, #1]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d918      	bls.n	8007b0c <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 8007ada:	7e3b      	ldrb	r3, [r7, #24]
 8007adc:	2b02      	cmp	r3, #2
 8007ade:	d109      	bne.n	8007af4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8007ae0:	78fa      	ldrb	r2, [r7, #3]
 8007ae2:	787b      	ldrb	r3, [r7, #1]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	70fb      	strb	r3, [r7, #3]
	  x++;
 8007aea:	78fb      	ldrb	r3, [r7, #3]
 8007aec:	3301      	adds	r3, #1
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	70fb      	strb	r3, [r7, #3]
 8007af2:	e00b      	b.n	8007b0c <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 8007af4:	7e3b      	ldrb	r3, [r7, #24]
 8007af6:	2b03      	cmp	r3, #3
 8007af8:	d108      	bne.n	8007b0c <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 8007afa:	78ba      	ldrb	r2, [r7, #2]
 8007afc:	787b      	ldrb	r3, [r7, #1]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	70bb      	strb	r3, [r7, #2]
	  y++;
 8007b04:	78bb      	ldrb	r3, [r7, #2]
 8007b06:	3301      	adds	r3, #1
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 8007b0c:	7e3b      	ldrb	r3, [r7, #24]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 8007b14:	7e3b      	ldrb	r3, [r7, #24]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d119      	bne.n	8007b4e <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007b20:	78bb      	ldrb	r3, [r7, #2]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d838      	bhi.n	8007b98 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007b2c:	78bb      	ldrb	r3, [r7, #2]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d934      	bls.n	8007b9c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b3e:	1c79      	adds	r1, r7, #1
 8007b40:	1cf8      	adds	r0, r7, #3
 8007b42:	f7ff ff43 	bl	80079cc <u8g2_clip_intersection2>
 8007b46:	4603      	mov	r3, r0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d119      	bne.n	8007b80 <u8g2_DrawHVLine+0xd6>
	  return;
 8007b4c:	e02d      	b.n	8007baa <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d822      	bhi.n	8007ba0 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b60:	78fb      	ldrb	r3, [r7, #3]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d91e      	bls.n	8007ba4 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b72:	1c79      	adds	r1, r7, #1
 8007b74:	1cb8      	adds	r0, r7, #2
 8007b76:	f7ff ff29 	bl	80079cc <u8g2_clip_intersection2>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d013      	beq.n	8007ba8 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b84:	689c      	ldr	r4, [r3, #8]
 8007b86:	78f9      	ldrb	r1, [r7, #3]
 8007b88:	78ba      	ldrb	r2, [r7, #2]
 8007b8a:	7878      	ldrb	r0, [r7, #1]
 8007b8c:	7e3b      	ldrb	r3, [r7, #24]
 8007b8e:	9300      	str	r3, [sp, #0]
 8007b90:	4603      	mov	r3, r0
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	47a0      	blx	r4
 8007b96:	e008      	b.n	8007baa <u8g2_DrawHVLine+0x100>
	  return;
 8007b98:	bf00      	nop
 8007b9a:	e006      	b.n	8007baa <u8g2_DrawHVLine+0x100>
	  return;
 8007b9c:	bf00      	nop
 8007b9e:	e004      	b.n	8007baa <u8g2_DrawHVLine+0x100>
	  return;
 8007ba0:	bf00      	nop
 8007ba2:	e002      	b.n	8007baa <u8g2_DrawHVLine+0x100>
	  return;
 8007ba4:	bf00      	nop
 8007ba6:	e000      	b.n	8007baa <u8g2_DrawHVLine+0x100>
	  return;
 8007ba8:	bf00      	nop
    }
}
 8007baa:	370c      	adds	r7, #12
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd90      	pop	{r4, r7, pc}

08007bb0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8007bb0:	b490      	push	{r4, r7}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	4608      	mov	r0, r1
 8007bba:	4611      	mov	r1, r2
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	4623      	mov	r3, r4
 8007bc0:	71fb      	strb	r3, [r7, #7]
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	71bb      	strb	r3, [r7, #6]
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	717b      	strb	r3, [r7, #5]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 8007bce:	797a      	ldrb	r2, [r7, #5]
 8007bd0:	79bb      	ldrb	r3, [r7, #6]
 8007bd2:	429a      	cmp	r2, r3
 8007bd4:	d20d      	bcs.n	8007bf2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8007bd6:	793a      	ldrb	r2, [r7, #4]
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d901      	bls.n	8007be2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e014      	b.n	8007c0c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8007be2:	797a      	ldrb	r2, [r7, #5]
 8007be4:	793b      	ldrb	r3, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d901      	bls.n	8007bee <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e00e      	b.n	8007c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e00c      	b.n	8007c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8007bf2:	793a      	ldrb	r2, [r7, #4]
 8007bf4:	79fb      	ldrb	r3, [r7, #7]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d907      	bls.n	8007c0a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8007bfa:	797a      	ldrb	r2, [r7, #5]
 8007bfc:	793b      	ldrb	r3, [r7, #4]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d901      	bls.n	8007c06 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e002      	b.n	8007c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8007c06:	2300      	movs	r3, #0
 8007c08:	e000      	b.n	8007c0c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8007c0a:	2300      	movs	r3, #0
    }
  }
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bc90      	pop	{r4, r7}
 8007c14:	4770      	bx	lr

08007c16 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b082      	sub	sp, #8
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
 8007c1e:	4608      	mov	r0, r1
 8007c20:	4611      	mov	r1, r2
 8007c22:	461a      	mov	r2, r3
 8007c24:	4603      	mov	r3, r0
 8007c26:	70fb      	strb	r3, [r7, #3]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70bb      	strb	r3, [r7, #2]
 8007c2c:	4613      	mov	r3, r2
 8007c2e:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8007c3c:	7c3b      	ldrb	r3, [r7, #16]
 8007c3e:	78ba      	ldrb	r2, [r7, #2]
 8007c40:	f7ff ffb6 	bl	8007bb0 <u8g2_is_intersection_decision_tree>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d101      	bne.n	8007c4e <u8g2_IsIntersection+0x38>
    return 0; 
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	e00a      	b.n	8007c64 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8007c5a:	787b      	ldrb	r3, [r7, #1]
 8007c5c:	78fa      	ldrb	r2, [r7, #3]
 8007c5e:	f7ff ffa7 	bl	8007bb0 <u8g2_is_intersection_decision_tree>
 8007c62:	4603      	mov	r3, r0
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3708      	adds	r7, #8
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	4608      	mov	r0, r1
 8007c76:	4611      	mov	r1, r2
 8007c78:	461a      	mov	r2, r3
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	70fb      	strb	r3, [r7, #3]
 8007c7e:	460b      	mov	r3, r1
 8007c80:	70bb      	strb	r3, [r7, #2]
 8007c82:	4613      	mov	r3, r2
 8007c84:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8007c86:	78bb      	ldrb	r3, [r7, #2]
 8007c88:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8007c8a:	7cfb      	ldrb	r3, [r7, #19]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8007c96:	7c3a      	ldrb	r2, [r7, #16]
 8007c98:	7cfb      	ldrb	r3, [r7, #19]
 8007c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9e:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d801      	bhi.n	8007cb6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8007cb2:	7c3b      	ldrb	r3, [r7, #16]
 8007cb4:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d001      	beq.n	8007cc4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8007cc0:	7c3b      	ldrb	r3, [r7, #16]
 8007cc2:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8007cc4:	78bb      	ldrb	r3, [r7, #2]
 8007cc6:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8007cc8:	89fb      	ldrh	r3, [r7, #14]
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	7c1b      	ldrb	r3, [r3, #16]
 8007cd6:	b29b      	uxth	r3, r3
 8007cd8:	89fa      	ldrh	r2, [r7, #14]
 8007cda:	fb12 f303 	smulbb	r3, r2, r3
 8007cde:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ce4:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8007ce6:	89fb      	ldrh	r3, [r7, #14]
 8007ce8:	697a      	ldr	r2, [r7, #20]
 8007cea:	4413      	add	r3, r2
 8007cec:	617b      	str	r3, [r7, #20]
  ptr += x;
 8007cee:	78fb      	ldrb	r3, [r7, #3]
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 8007cf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d117      	bne.n	8007d2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	781a      	ldrb	r2, [r3, #0]
 8007d02:	7cbb      	ldrb	r3, [r7, #18]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	781a      	ldrb	r2, [r3, #0]
 8007d10:	7c7b      	ldrb	r3, [r7, #17]
 8007d12:	4053      	eors	r3, r2
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	701a      	strb	r2, [r3, #0]
	ptr++;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	3301      	adds	r3, #1
 8007d1e:	617b      	str	r3, [r7, #20]
	len--;
 8007d20:	787b      	ldrb	r3, [r7, #1]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 8007d26:	787b      	ldrb	r3, [r7, #1]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d1e8      	bne.n	8007cfe <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8007d2c:	e039      	b.n	8007da2 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	7cbb      	ldrb	r3, [r7, #18]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	781a      	ldrb	r2, [r3, #0]
 8007d40:	7c7b      	ldrb	r3, [r7, #17]
 8007d42:	4053      	eors	r3, r2
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8007d4a:	7cfb      	ldrb	r3, [r7, #19]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8007d50:	7cfb      	ldrb	r3, [r7, #19]
 8007d52:	f003 0307 	and.w	r3, r3, #7
 8007d56:	74fb      	strb	r3, [r7, #19]
      len--;
 8007d58:	787b      	ldrb	r3, [r7, #1]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 8007d5e:	7cfb      	ldrb	r3, [r7, #19]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d115      	bne.n	8007d90 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	4413      	add	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d801      	bhi.n	8007d80 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d008      	beq.n	8007d9c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	747b      	strb	r3, [r7, #17]
 8007d8e:	e005      	b.n	8007d9c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8007d90:	7cbb      	ldrb	r3, [r7, #18]
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8007d96:	7c7b      	ldrb	r3, [r7, #17]
 8007d98:	005b      	lsls	r3, r3, #1
 8007d9a:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 8007d9c:	787b      	ldrb	r3, [r7, #1]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1c5      	bne.n	8007d2e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8007da2:	bf00      	nop
 8007da4:	371c      	adds	r7, #28
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8007dae:	b580      	push	{r7, lr}
 8007db0:	b082      	sub	sp, #8
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	22ff      	movs	r2, #255	; 0xff
 8007dca:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	22ff      	movs	r2, #255	; 0xff
 8007dd2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	4798      	blx	r3
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	4613      	mov	r3, r2
 8007df6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	79fa      	ldrb	r2, [r7, #7]
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	f7ff ffaf 	bl	8007dae <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f7ff fd91 	bl	8007978 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b085      	sub	sp, #20
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e7a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	00db      	lsls	r3, r3, #3
 8007e80:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	7bfa      	ldrb	r2, [r7, #15]
 8007e86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	7c1b      	ldrb	r3, [r3, #16]
 8007e8e:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8007e90:	7bfb      	ldrb	r3, [r7, #15]
 8007e92:	2b1f      	cmp	r3, #31
 8007e94:	d901      	bls.n	8007e9a <u8g2_update_dimension_common+0x34>
    t = 31;
 8007e96:	231f      	movs	r3, #31
 8007e98:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	00db      	lsls	r3, r3, #3
 8007e9e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	7bfa      	ldrb	r2, [r7, #15]
 8007ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eae:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007eb0:	7bfb      	ldrb	r3, [r7, #15]
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	7bfa      	ldrb	r2, [r7, #15]
 8007eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ec4:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
 8007ec8:	687a      	ldr	r2, [r7, #4]
 8007eca:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8007ece:	4413      	add	r3, r2
 8007ed0:	68ba      	ldr	r2, [r7, #8]
 8007ed2:	7c52      	ldrb	r2, [r2, #17]
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	dd06      	ble.n	8007ee6 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	7c5a      	ldrb	r2, [r3, #17]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee2:	1ad3      	subs	r3, r2, r3
 8007ee4:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	00db      	lsls	r3, r3, #3
 8007eea:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	22f0      	movs	r2, #240	; 0xf0
 8007f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	8a9b      	ldrh	r3, [r3, #20]
 8007f22:	2bf0      	cmp	r3, #240	; 0xf0
 8007f24:	d805      	bhi.n	8007f32 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	8a9b      	ldrh	r3, [r3, #20]
 8007f2a:	b2da      	uxtb	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	8adb      	ldrh	r3, [r3, #22]
 8007f36:	b2da      	uxtb	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 8007f3e:	bf00      	nop
 8007f40:	3714      	adds	r7, #20
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr

08007f4a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8007f4a:	b580      	push	{r7, lr}
 8007f4c:	b084      	sub	sp, #16
 8007f4e:	af02      	add	r7, sp, #8
 8007f50:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007f6a:	9300      	str	r3, [sp, #0]
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fe51 	bl	8007c16 <u8g2_IsIntersection>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d104      	bne.n	8007f84 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8007f82:	e03b      	b.n	8007ffc <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d205      	bcs.n	8007fa8 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d905      	bls.n	8007fc4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007fd0:	429a      	cmp	r2, r3
 8007fd2:	d205      	bcs.n	8007fe0 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d905      	bls.n	8007ffc <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b082      	sub	sp, #8
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7ff ff2a 	bl	8007e66 <u8g2_update_dimension_common>
}
 8008012:	bf00      	nop
 8008014:	3708      	adds	r7, #8
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}

0800801a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800801a:	b580      	push	{r7, lr}
 800801c:	b082      	sub	sp, #8
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7ff ff7b 	bl	8007f4a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8008054:	bf00      	nop
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af02      	add	r7, sp, #8
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	4608      	mov	r0, r1
 8008066:	4611      	mov	r1, r2
 8008068:	461a      	mov	r2, r3
 800806a:	4603      	mov	r3, r0
 800806c:	70fb      	strb	r3, [r7, #3]
 800806e:	460b      	mov	r3, r1
 8008070:	70bb      	strb	r3, [r7, #2]
 8008072:	4613      	mov	r3, r2
 8008074:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8008076:	7878      	ldrb	r0, [r7, #1]
 8008078:	78ba      	ldrb	r2, [r7, #2]
 800807a:	78f9      	ldrb	r1, [r7, #3]
 800807c:	7c3b      	ldrb	r3, [r7, #16]
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	4603      	mov	r3, r0
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7ff fcf0 	bl	8007a68 <u8g2_draw_hv_line_2dir>
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2200      	movs	r2, #0
 800809c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
 80080b4:	460b      	mov	r3, r1
 80080b6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80080b8:	78fb      	ldrb	r3, [r7, #3]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d002      	beq.n	80080c4 <u8x8_ascii_next+0x18>
 80080be:	78fb      	ldrb	r3, [r7, #3]
 80080c0:	2b0a      	cmp	r3, #10
 80080c2:	d102      	bne.n	80080ca <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80080c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080c8:	e001      	b.n	80080ce <u8x8_ascii_next+0x22>
  return b;
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	b29b      	uxth	r3, r3
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	370c      	adds	r7, #12
 80080d2:	46bd      	mov	sp, r7
 80080d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d8:	4770      	bx	lr

080080da <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80080da:	b590      	push	{r4, r7, lr}
 80080dc:	b085      	sub	sp, #20
 80080de:	af00      	add	r7, sp, #0
 80080e0:	60f8      	str	r0, [r7, #12]
 80080e2:	460b      	mov	r3, r1
 80080e4:	607a      	str	r2, [r7, #4]
 80080e6:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	691c      	ldr	r4, [r3, #16]
 80080ec:	7afa      	ldrb	r2, [r7, #11]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2117      	movs	r1, #23
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	47a0      	blx	r4
 80080f6:	4603      	mov	r3, r0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3714      	adds	r7, #20
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd90      	pop	{r4, r7, pc}

08008100 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
 8008108:	460b      	mov	r3, r1
 800810a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800810c:	1cfb      	adds	r3, r7, #3
 800810e:	461a      	mov	r2, r3
 8008110:	2101      	movs	r1, #1
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff ffe1 	bl	80080da <u8x8_byte_SendBytes>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8008122:	b590      	push	{r4, r7, lr}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691c      	ldr	r4, [r3, #16]
 800812e:	2300      	movs	r3, #0
 8008130:	2200      	movs	r2, #0
 8008132:	2118      	movs	r1, #24
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	47a0      	blx	r4
 8008138:	4603      	mov	r3, r0
}
 800813a:	4618      	mov	r0, r3
 800813c:	370c      	adds	r7, #12
 800813e:	46bd      	mov	sp, r7
 8008140:	bd90      	pop	{r4, r7, pc}

08008142 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8008142:	b590      	push	{r4, r7, lr}
 8008144:	b083      	sub	sp, #12
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691c      	ldr	r4, [r3, #16]
 800814e:	2300      	movs	r3, #0
 8008150:	2200      	movs	r2, #0
 8008152:	2119      	movs	r1, #25
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	47a0      	blx	r4
 8008158:	4603      	mov	r3, r0
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	bd90      	pop	{r4, r7, pc}

08008162 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8008162:	b590      	push	{r4, r7, lr}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68dc      	ldr	r4, [r3, #12]
 8008172:	78fa      	ldrb	r2, [r7, #3]
 8008174:	2300      	movs	r3, #0
 8008176:	2115      	movs	r1, #21
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	47a0      	blx	r4
 800817c:	4603      	mov	r3, r0
}
 800817e:	4618      	mov	r0, r3
 8008180:	370c      	adds	r7, #12
 8008182:	46bd      	mov	sp, r7
 8008184:	bd90      	pop	{r4, r7, pc}

08008186 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8008186:	b590      	push	{r4, r7, lr}
 8008188:	b083      	sub	sp, #12
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68dc      	ldr	r4, [r3, #12]
 8008196:	78fa      	ldrb	r2, [r7, #3]
 8008198:	2300      	movs	r3, #0
 800819a:	2116      	movs	r1, #22
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	47a0      	blx	r4
 80081a0:	4603      	mov	r3, r0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	370c      	adds	r7, #12
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd90      	pop	{r4, r7, pc}

080081aa <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80081aa:	b590      	push	{r4, r7, lr}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	60f8      	str	r0, [r7, #12]
 80081b2:	460b      	mov	r3, r1
 80081b4:	607a      	str	r2, [r7, #4]
 80081b6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	68dc      	ldr	r4, [r3, #12]
 80081bc:	7afa      	ldrb	r2, [r7, #11]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2117      	movs	r1, #23
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	47a0      	blx	r4
 80081c6:	4603      	mov	r3, r0
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3714      	adds	r7, #20
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd90      	pop	{r4, r7, pc}

080081d0 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80081d0:	b590      	push	{r4, r7, lr}
 80081d2:	b083      	sub	sp, #12
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	68dc      	ldr	r4, [r3, #12]
 80081dc:	2300      	movs	r3, #0
 80081de:	2200      	movs	r2, #0
 80081e0:	2118      	movs	r1, #24
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	47a0      	blx	r4
 80081e6:	4603      	mov	r3, r0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd90      	pop	{r4, r7, pc}

080081f0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80081f0:	b590      	push	{r4, r7, lr}
 80081f2:	b083      	sub	sp, #12
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68dc      	ldr	r4, [r3, #12]
 80081fc:	2300      	movs	r3, #0
 80081fe:	2200      	movs	r2, #0
 8008200:	2119      	movs	r1, #25
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	47a0      	blx	r4
 8008206:	4603      	mov	r3, r0
}
 8008208:	4618      	mov	r0, r3
 800820a:	370c      	adds	r7, #12
 800820c:	46bd      	mov	sp, r7
 800820e:	bd90      	pop	{r4, r7, pc}

08008210 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8008210:	b590      	push	{r4, r7, lr}
 8008212:	b085      	sub	sp, #20
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	73fb      	strb	r3, [r7, #15]
    data++;
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	2bfe      	cmp	r3, #254	; 0xfe
 800822a:	d031      	beq.n	8008290 <u8x8_cad_SendSequence+0x80>
 800822c:	2bfe      	cmp	r3, #254	; 0xfe
 800822e:	dc3d      	bgt.n	80082ac <u8x8_cad_SendSequence+0x9c>
 8008230:	2b19      	cmp	r3, #25
 8008232:	dc3b      	bgt.n	80082ac <u8x8_cad_SendSequence+0x9c>
 8008234:	2b18      	cmp	r3, #24
 8008236:	da23      	bge.n	8008280 <u8x8_cad_SendSequence+0x70>
 8008238:	2b16      	cmp	r3, #22
 800823a:	dc02      	bgt.n	8008242 <u8x8_cad_SendSequence+0x32>
 800823c:	2b15      	cmp	r3, #21
 800823e:	da03      	bge.n	8008248 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8008240:	e034      	b.n	80082ac <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8008242:	2b17      	cmp	r3, #23
 8008244:	d00e      	beq.n	8008264 <u8x8_cad_SendSequence+0x54>
	return;
 8008246:	e031      	b.n	80082ac <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	68dc      	ldr	r4, [r3, #12]
 8008252:	7bba      	ldrb	r2, [r7, #14]
 8008254:	7bf9      	ldrb	r1, [r7, #15]
 8008256:	2300      	movs	r3, #0
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	47a0      	blx	r4
	  data++;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	3301      	adds	r3, #1
 8008260:	603b      	str	r3, [r7, #0]
	  break;
 8008262:	e022      	b.n	80082aa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800826a:	f107 030e 	add.w	r3, r7, #14
 800826e:	461a      	mov	r2, r3
 8008270:	2101      	movs	r1, #1
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7ff ff99 	bl	80081aa <u8x8_cad_SendData>
	  data++;
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	3301      	adds	r3, #1
 800827c:	603b      	str	r3, [r7, #0]
	  break;
 800827e:	e014      	b.n	80082aa <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68dc      	ldr	r4, [r3, #12]
 8008284:	7bf9      	ldrb	r1, [r7, #15]
 8008286:	2300      	movs	r3, #0
 8008288:	2200      	movs	r2, #0
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	47a0      	blx	r4
	  break;
 800828e:	e00c      	b.n	80082aa <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	461a      	mov	r2, r3
 800829a:	2129      	movs	r1, #41	; 0x29
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 fa2c 	bl	80086fa <u8x8_gpio_call>
	  data++;
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	603b      	str	r3, [r7, #0]
	  break;
 80082a8:	bf00      	nop
    cmd = *data;
 80082aa:	e7b6      	b.n	800821a <u8x8_cad_SendSequence+0xa>
	return;
 80082ac:	bf00      	nop
    }
  }
}
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd90      	pop	{r4, r7, pc}

080082b4 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80082b4:	b590      	push	{r4, r7, lr}
 80082b6:	b085      	sub	sp, #20
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	460b      	mov	r3, r1
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	f7ff ff2d 	bl	8008122 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80082c8:	2140      	movs	r1, #64	; 0x40
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f7ff ff18 	bl	8008100 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	691c      	ldr	r4, [r3, #16]
 80082d4:	7afa      	ldrb	r2, [r7, #11]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2117      	movs	r1, #23
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80082de:	68f8      	ldr	r0, [r7, #12]
 80082e0:	f7ff ff2f 	bl	8008142 <u8x8_byte_EndTransfer>
}
 80082e4:	bf00      	nop
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd90      	pop	{r4, r7, pc}

080082ec <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	460b      	mov	r3, r1
 80082f8:	72fb      	strb	r3, [r7, #11]
 80082fa:	4613      	mov	r3, r2
 80082fc:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	3b14      	subs	r3, #20
 8008302:	2b05      	cmp	r3, #5
 8008304:	d86e      	bhi.n	80083e4 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 8008306:	a201      	add	r2, pc, #4	; (adr r2, 800830c <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 8008308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830c:	080083a3 	.word	0x080083a3
 8008310:	08008325 	.word	0x08008325
 8008314:	08008353 	.word	0x08008353
 8008318:	0800835f 	.word	0x0800835f
 800831c:	080083c7 	.word	0x080083c7
 8008320:	080083cf 	.word	0x080083cf
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 8008324:	4b33      	ldr	r3, [pc, #204]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff ff08 	bl	8008142 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 8008332:	68f8      	ldr	r0, [r7, #12]
 8008334:	f7ff fef5 	bl	8008122 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 8008338:	2100      	movs	r1, #0
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f7ff fee0 	bl	8008100 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8008340:	7abb      	ldrb	r3, [r7, #10]
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff fedb 	bl	8008100 <u8x8_byte_SendByte>
      in_transfer = 1;
 800834a:	4b2a      	ldr	r3, [pc, #168]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800834c:	2201      	movs	r2, #1
 800834e:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8008350:	e04a      	b.n	80083e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8008352:	7abb      	ldrb	r3, [r7, #10]
 8008354:	4619      	mov	r1, r3
 8008356:	68f8      	ldr	r0, [r7, #12]
 8008358:	f7ff fed2 	bl	8008100 <u8x8_byte_SendByte>
      break;      
 800835c:	e044      	b.n	80083e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 800835e:	4b25      	ldr	r3, [pc, #148]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d002      	beq.n	800836c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8008366:	68f8      	ldr	r0, [r7, #12]
 8008368:	f7ff feeb 	bl	8008142 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8008370:	e00a      	b.n	8008388 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8008372:	697a      	ldr	r2, [r7, #20]
 8008374:	2118      	movs	r1, #24
 8008376:	68f8      	ldr	r0, [r7, #12]
 8008378:	f7ff ff9c 	bl	80082b4 <u8x8_i2c_data_transfer>
	arg_int-=24;
 800837c:	7abb      	ldrb	r3, [r7, #10]
 800837e:	3b18      	subs	r3, #24
 8008380:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	3318      	adds	r3, #24
 8008386:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8008388:	7abb      	ldrb	r3, [r7, #10]
 800838a:	2b18      	cmp	r3, #24
 800838c:	d8f1      	bhi.n	8008372 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 800838e:	7abb      	ldrb	r3, [r7, #10]
 8008390:	697a      	ldr	r2, [r7, #20]
 8008392:	4619      	mov	r1, r3
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f7ff ff8d 	bl	80082b4 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 800839a:	4b16      	ldr	r3, [pc, #88]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800839c:	2200      	movs	r2, #0
 800839e:	701a      	strb	r2, [r3, #0]
      break;
 80083a0:	e022      	b.n	80083e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083a8:	2bff      	cmp	r3, #255	; 0xff
 80083aa:	d103      	bne.n	80083b4 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2278      	movs	r2, #120	; 0x78
 80083b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	691c      	ldr	r4, [r3, #16]
 80083b8:	7aba      	ldrb	r2, [r7, #10]
 80083ba:	7af9      	ldrb	r1, [r7, #11]
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	47a0      	blx	r4
 80083c2:	4603      	mov	r3, r0
 80083c4:	e011      	b.n	80083ea <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 80083c6:	4b0b      	ldr	r3, [pc, #44]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
      break;
 80083cc:	e00c      	b.n	80083e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 80083ce:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083d0:	781b      	ldrb	r3, [r3, #0]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d002      	beq.n	80083dc <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 80083d6:	68f8      	ldr	r0, [r7, #12]
 80083d8:	f7ff feb3 	bl	8008142 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 80083dc:	4b05      	ldr	r3, [pc, #20]	; (80083f4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083de:	2200      	movs	r2, #0
 80083e0:	701a      	strb	r2, [r3, #0]
      break;
 80083e2:	e001      	b.n	80083e8 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 80083e4:	2300      	movs	r3, #0
 80083e6:	e000      	b.n	80083ea <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 80083e8:	2301      	movs	r3, #1
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd90      	pop	{r4, r7, pc}
 80083f2:	bf00      	nop
 80083f4:	20000b58 	.word	0x20000b58

080083f8 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b086      	sub	sp, #24
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	607b      	str	r3, [r7, #4]
 8008402:	460b      	mov	r3, r1
 8008404:	72fb      	strb	r3, [r7, #11]
 8008406:	4613      	mov	r3, r2
 8008408:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	3b0a      	subs	r3, #10
 800840e:	2b05      	cmp	r3, #5
 8008410:	f200 8090 	bhi.w	8008534 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8008414:	a201      	add	r2, pc, #4	; (adr r2, 800841c <u8x8_d_ssd1306_128x32_generic+0x24>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008435 	.word	0x08008435
 8008420:	08008445 	.word	0x08008445
 8008424:	08008535 	.word	0x08008535
 8008428:	0800845f 	.word	0x0800845f
 800842c:	08008491 	.word	0x08008491
 8008430:	080084b1 	.word	0x080084b1
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 f8c3 	bl	80085c0 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 800843a:	4942      	ldr	r1, [pc, #264]	; (8008544 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff fee7 	bl	8008210 <u8x8_cad_SendSequence>
      break;
 8008442:	e079      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8008444:	7abb      	ldrb	r3, [r7, #10]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d104      	bne.n	8008454 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 800844a:	493f      	ldr	r1, [pc, #252]	; (8008548 <u8x8_d_ssd1306_128x32_generic+0x150>)
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff fedf 	bl	8008210 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8008452:	e071      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8008454:	493d      	ldr	r1, [pc, #244]	; (800854c <u8x8_d_ssd1306_128x32_generic+0x154>)
 8008456:	68f8      	ldr	r0, [r7, #12]
 8008458:	f7ff feda 	bl	8008210 <u8x8_cad_SendSequence>
      break;
 800845c:	e06c      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800845e:	7abb      	ldrb	r3, [r7, #10]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10a      	bne.n	800847a <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8008464:	493a      	ldr	r1, [pc, #232]	; (8008550 <u8x8_d_ssd1306_128x32_generic+0x158>)
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f7ff fed2 	bl	8008210 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	7c9a      	ldrb	r2, [r3, #18]
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8008478:	e05e      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 800847a:	4936      	ldr	r1, [pc, #216]	; (8008554 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 800847c:	68f8      	ldr	r0, [r7, #12]
 800847e:	f7ff fec7 	bl	8008210 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	7cda      	ldrb	r2, [r3, #19]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800848e:	e053      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fe9d 	bl	80081d0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8008496:	2181      	movs	r1, #129	; 0x81
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff fe62 	bl	8008162 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 800849e:	7abb      	ldrb	r3, [r7, #10]
 80084a0:	4619      	mov	r1, r3
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff fe6f 	bl	8008186 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7ff fea1 	bl	80081f0 <u8x8_cad_EndTransfer>
      break;
 80084ae:	e043      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80084b0:	68f8      	ldr	r0, [r7, #12]
 80084b2:	f7ff fe8d 	bl	80081d0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	795b      	ldrb	r3, [r3, #5]
 80084ba:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80084bc:	7dfb      	ldrb	r3, [r7, #23]
 80084be:	00db      	lsls	r3, r3, #3
 80084c0:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80084c8:	7dfb      	ldrb	r3, [r7, #23]
 80084ca:	4413      	add	r3, r2
 80084cc:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80084ce:	7dfb      	ldrb	r3, [r7, #23]
 80084d0:	091b      	lsrs	r3, r3, #4
 80084d2:	b2db      	uxtb	r3, r3
 80084d4:	f043 0310 	orr.w	r3, r3, #16
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	4619      	mov	r1, r3
 80084dc:	68f8      	ldr	r0, [r7, #12]
 80084de:	f7ff fe40 	bl	8008162 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80084e2:	7dfb      	ldrb	r3, [r7, #23]
 80084e4:	f003 030f 	and.w	r3, r3, #15
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f7ff fe38 	bl	8008162 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	799b      	ldrb	r3, [r3, #6]
 80084f6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	4619      	mov	r1, r3
 80084fe:	68f8      	ldr	r0, [r7, #12]
 8008500:	f7ff fe2f 	bl	8008162 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	791b      	ldrb	r3, [r3, #4]
 8008508:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8008510:	7dbb      	ldrb	r3, [r7, #22]
 8008512:	00db      	lsls	r3, r3, #3
 8008514:	b2db      	uxtb	r3, r3
 8008516:	693a      	ldr	r2, [r7, #16]
 8008518:	4619      	mov	r1, r3
 800851a:	68f8      	ldr	r0, [r7, #12]
 800851c:	f7ff fe45 	bl	80081aa <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8008520:	7abb      	ldrb	r3, [r7, #10]
 8008522:	3b01      	subs	r3, #1
 8008524:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8008526:	7abb      	ldrb	r3, [r7, #10]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1eb      	bne.n	8008504 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff fe5f 	bl	80081f0 <u8x8_cad_EndTransfer>
      break;
 8008532:	e001      	b.n	8008538 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8008534:	2300      	movs	r3, #0
 8008536:	e000      	b.n	800853a <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8008538:	2301      	movs	r3, #1
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	0801c5f4 	.word	0x0801c5f4
 8008548:	0801c62c 	.word	0x0801c62c
 800854c:	0801c634 	.word	0x0801c634
 8008550:	0801c63c 	.word	0x0801c63c
 8008554:	0801c644 	.word	0x0801c644

08008558 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	460b      	mov	r3, r1
 8008564:	72fb      	strb	r3, [r7, #11]
 8008566:	4613      	mov	r3, r2
 8008568:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 800856a:	7afb      	ldrb	r3, [r7, #11]
 800856c:	2b09      	cmp	r3, #9
 800856e:	d105      	bne.n	800857c <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8008570:	4908      	ldr	r1, [pc, #32]	; (8008594 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8008572:	68f8      	ldr	r0, [r7, #12]
 8008574:	f000 f810 	bl	8008598 <u8x8_d_helper_display_setup_memory>
      return 1;
 8008578:	2301      	movs	r3, #1
 800857a:	e006      	b.n	800858a <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 800857c:	7aba      	ldrb	r2, [r7, #10]
 800857e:	7af9      	ldrb	r1, [r7, #11]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	68f8      	ldr	r0, [r7, #12]
 8008584:	f7ff ff38 	bl	80083f8 <u8x8_d_ssd1306_128x32_generic>
 8008588:	4603      	mov	r3, r0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	0801c64c 	.word	0x0801c64c

08008598 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	7c9a      	ldrb	r2, [r3, #18]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80085c0:	b590      	push	{r4, r7, lr}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	695c      	ldr	r4, [r3, #20]
 80085cc:	2300      	movs	r3, #0
 80085ce:	2200      	movs	r2, #0
 80085d0:	2128      	movs	r1, #40	; 0x28
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	68dc      	ldr	r4, [r3, #12]
 80085da:	2300      	movs	r3, #0
 80085dc:	2200      	movs	r2, #0
 80085de:	2114      	movs	r1, #20
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80085e4:	2201      	movs	r2, #1
 80085e6:	214b      	movs	r1, #75	; 0x4b
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 f886 	bl	80086fa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	791b      	ldrb	r3, [r3, #4]
 80085f4:	461a      	mov	r2, r3
 80085f6:	2129      	movs	r1, #41	; 0x29
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f000 f87e 	bl	80086fa <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80085fe:	2200      	movs	r2, #0
 8008600:	214b      	movs	r1, #75	; 0x4b
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f879 	bl	80086fa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	791b      	ldrb	r3, [r3, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	2129      	movs	r1, #41	; 0x29
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f871 	bl	80086fa <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8008618:	2201      	movs	r2, #1
 800861a:	214b      	movs	r1, #75	; 0x4b
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f86c 	bl	80086fa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	795b      	ldrb	r3, [r3, #5]
 8008628:	461a      	mov	r2, r3
 800862a:	2129      	movs	r1, #41	; 0x29
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f864 	bl	80086fa <u8x8_gpio_call>
}    
 8008632:	bf00      	nop
 8008634:	370c      	adds	r7, #12
 8008636:	46bd      	mov	sp, r7
 8008638:	bd90      	pop	{r4, r7, pc}

0800863a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800863a:	b590      	push	{r4, r7, lr}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	6078      	str	r0, [r7, #4]
 8008642:	4608      	mov	r0, r1
 8008644:	4611      	mov	r1, r2
 8008646:	461a      	mov	r2, r3
 8008648:	4603      	mov	r3, r0
 800864a:	70fb      	strb	r3, [r7, #3]
 800864c:	460b      	mov	r3, r1
 800864e:	70bb      	strb	r3, [r7, #2]
 8008650:	4613      	mov	r3, r2
 8008652:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8008654:	78fb      	ldrb	r3, [r7, #3]
 8008656:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8008658:	78bb      	ldrb	r3, [r7, #2]
 800865a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800865c:	787b      	ldrb	r3, [r7, #1]
 800865e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	689c      	ldr	r4, [r3, #8]
 8008668:	f107 0308 	add.w	r3, r7, #8
 800866c:	2201      	movs	r2, #1
 800866e:	210f      	movs	r1, #15
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	47a0      	blx	r4
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3714      	adds	r7, #20
 800867a:	46bd      	mov	sp, r7
 800867c:	bd90      	pop	{r4, r7, pc}

0800867e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800867e:	b590      	push	{r4, r7, lr}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	689c      	ldr	r4, [r3, #8]
 800868a:	2300      	movs	r3, #0
 800868c:	2200      	movs	r2, #0
 800868e:	2109      	movs	r1, #9
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	47a0      	blx	r4
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	bd90      	pop	{r4, r7, pc}

0800869c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800869c:	b590      	push	{r4, r7, lr}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689c      	ldr	r4, [r3, #8]
 80086a8:	2300      	movs	r3, #0
 80086aa:	2200      	movs	r2, #0
 80086ac:	210a      	movs	r1, #10
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	47a0      	blx	r4
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd90      	pop	{r4, r7, pc}

080086ba <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80086ba:	b590      	push	{r4, r7, lr}
 80086bc:	b083      	sub	sp, #12
 80086be:	af00      	add	r7, sp, #0
 80086c0:	6078      	str	r0, [r7, #4]
 80086c2:	460b      	mov	r3, r1
 80086c4:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	689c      	ldr	r4, [r3, #8]
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	2300      	movs	r3, #0
 80086ce:	210b      	movs	r1, #11
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	47a0      	blx	r4
}
 80086d4:	bf00      	nop
 80086d6:	370c      	adds	r7, #12
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}

080086dc <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	689c      	ldr	r4, [r3, #8]
 80086e8:	2300      	movs	r3, #0
 80086ea:	2200      	movs	r2, #0
 80086ec:	2110      	movs	r1, #16
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	47a0      	blx	r4
}
 80086f2:	bf00      	nop
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd90      	pop	{r4, r7, pc}

080086fa <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80086fa:	b590      	push	{r4, r7, lr}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
 8008702:	460b      	mov	r3, r1
 8008704:	70fb      	strb	r3, [r7, #3]
 8008706:	4613      	mov	r3, r2
 8008708:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695c      	ldr	r4, [r3, #20]
 800870e:	78ba      	ldrb	r2, [r7, #2]
 8008710:	78f9      	ldrb	r1, [r7, #3]
 8008712:	2300      	movs	r3, #0
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	47a0      	blx	r4
}
 8008718:	bf00      	nop
 800871a:	370c      	adds	r7, #12
 800871c:	46bd      	mov	sp, r7
 800871e:	bd90      	pop	{r4, r7, pc}

08008720 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8008720:	b480      	push	{r7}
 8008722:	b085      	sub	sp, #20
 8008724:	af00      	add	r7, sp, #0
 8008726:	60f8      	str	r0, [r7, #12]
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	72fb      	strb	r3, [r7, #11]
 800872e:	4613      	mov	r3, r2
 8008730:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4a13      	ldr	r2, [pc, #76]	; (80087a0 <u8x8_SetupDefaults+0x60>)
 8008752:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a12      	ldr	r2, [pc, #72]	; (80087a0 <u8x8_SetupDefaults+0x60>)
 8008758:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a10      	ldr	r2, [pc, #64]	; (80087a0 <u8x8_SetupDefaults+0x60>)
 800875e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a0f      	ldr	r2, [pc, #60]	; (80087a0 <u8x8_SetupDefaults+0x60>)
 8008764:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2200      	movs	r2, #0
 800877a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	22ff      	movs	r2, #255	; 0xff
 8008788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	22ff      	movs	r2, #255	; 0xff
 8008790:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr
 80087a0:	08008721 	.word	0x08008721

080087a4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7ff ffc4 	bl	8008740 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	687a      	ldr	r2, [r7, #4]
 80087c2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	683a      	ldr	r2, [r7, #0]
 80087c8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	69ba      	ldr	r2, [r7, #24]
 80087ce:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f7ff ff54 	bl	800867e <u8x8_SetupMemory>
}
 80087d6:	bf00      	nop
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b086      	sub	sp, #24
 80087e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80087e6:	463b      	mov	r3, r7
 80087e8:	2200      	movs	r2, #0
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	605a      	str	r2, [r3, #4]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	60da      	str	r2, [r3, #12]
 80087f2:	611a      	str	r2, [r3, #16]
 80087f4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80087f6:	4b29      	ldr	r3, [pc, #164]	; (800889c <MX_ADC1_Init+0xbc>)
 80087f8:	4a29      	ldr	r2, [pc, #164]	; (80088a0 <MX_ADC1_Init+0xc0>)
 80087fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 80087fc:	4b27      	ldr	r3, [pc, #156]	; (800889c <MX_ADC1_Init+0xbc>)
 80087fe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008802:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008804:	4b25      	ldr	r3, [pc, #148]	; (800889c <MX_ADC1_Init+0xbc>)
 8008806:	2200      	movs	r2, #0
 8008808:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800880a:	4b24      	ldr	r3, [pc, #144]	; (800889c <MX_ADC1_Init+0xbc>)
 800880c:	2200      	movs	r2, #0
 800880e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8008810:	4b22      	ldr	r3, [pc, #136]	; (800889c <MX_ADC1_Init+0xbc>)
 8008812:	2200      	movs	r2, #0
 8008814:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8008816:	4b21      	ldr	r3, [pc, #132]	; (800889c <MX_ADC1_Init+0xbc>)
 8008818:	2204      	movs	r2, #4
 800881a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800881c:	4b1f      	ldr	r3, [pc, #124]	; (800889c <MX_ADC1_Init+0xbc>)
 800881e:	2200      	movs	r2, #0
 8008820:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008822:	4b1e      	ldr	r3, [pc, #120]	; (800889c <MX_ADC1_Init+0xbc>)
 8008824:	2201      	movs	r2, #1
 8008826:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8008828:	4b1c      	ldr	r3, [pc, #112]	; (800889c <MX_ADC1_Init+0xbc>)
 800882a:	2201      	movs	r2, #1
 800882c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800882e:	4b1b      	ldr	r3, [pc, #108]	; (800889c <MX_ADC1_Init+0xbc>)
 8008830:	2200      	movs	r2, #0
 8008832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008836:	4b19      	ldr	r3, [pc, #100]	; (800889c <MX_ADC1_Init+0xbc>)
 8008838:	2200      	movs	r2, #0
 800883a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800883c:	4b17      	ldr	r3, [pc, #92]	; (800889c <MX_ADC1_Init+0xbc>)
 800883e:	2200      	movs	r2, #0
 8008840:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8008842:	4b16      	ldr	r3, [pc, #88]	; (800889c <MX_ADC1_Init+0xbc>)
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800884a:	4b14      	ldr	r3, [pc, #80]	; (800889c <MX_ADC1_Init+0xbc>)
 800884c:	2200      	movs	r2, #0
 800884e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8008850:	4b12      	ldr	r3, [pc, #72]	; (800889c <MX_ADC1_Init+0xbc>)
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008858:	4810      	ldr	r0, [pc, #64]	; (800889c <MX_ADC1_Init+0xbc>)
 800885a:	f002 f843 	bl	800a8e4 <HAL_ADC_Init>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8008864:	f001 f908 	bl	8009a78 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8008868:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <MX_ADC1_Init+0xc4>)
 800886a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800886c:	2306      	movs	r3, #6
 800886e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8008870:	2306      	movs	r3, #6
 8008872:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008874:	237f      	movs	r3, #127	; 0x7f
 8008876:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008878:	2304      	movs	r3, #4
 800887a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008880:	463b      	mov	r3, r7
 8008882:	4619      	mov	r1, r3
 8008884:	4805      	ldr	r0, [pc, #20]	; (800889c <MX_ADC1_Init+0xbc>)
 8008886:	f002 faa7 	bl	800add8 <HAL_ADC_ConfigChannel>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d001      	beq.n	8008894 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8008890:	f001 f8f2 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008894:	bf00      	nop
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}
 800889c:	20001cfc 	.word	0x20001cfc
 80088a0:	50040000 	.word	0x50040000
 80088a4:	25b00200 	.word	0x25b00200

080088a8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08a      	sub	sp, #40	; 0x28
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088b0:	f107 0314 	add.w	r3, r7, #20
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]
 80088b8:	605a      	str	r2, [r3, #4]
 80088ba:	609a      	str	r2, [r3, #8]
 80088bc:	60da      	str	r2, [r3, #12]
 80088be:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a15      	ldr	r2, [pc, #84]	; (800891c <HAL_ADC_MspInit+0x74>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d124      	bne.n	8008914 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80088ca:	4b15      	ldr	r3, [pc, #84]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ce:	4a14      	ldr	r2, [pc, #80]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088d0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80088d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088d6:	4b12      	ldr	r3, [pc, #72]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088de:	613b      	str	r3, [r7, #16]
 80088e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088e6:	4a0e      	ldr	r2, [pc, #56]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088e8:	f043 0301 	orr.w	r3, r3, #1
 80088ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088ee:	4b0c      	ldr	r3, [pc, #48]	; (8008920 <HAL_ADC_MspInit+0x78>)
 80088f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GAZ1_CH5_Pin|GAZ3_CH9_Pin;
 80088fa:	2311      	movs	r3, #17
 80088fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80088fe:	230b      	movs	r3, #11
 8008900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008902:	2300      	movs	r3, #0
 8008904:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008906:	f107 0314 	add.w	r3, r7, #20
 800890a:	4619      	mov	r1, r3
 800890c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008910:	f003 fdc0 	bl	800c494 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008914:	bf00      	nop
 8008916:	3728      	adds	r7, #40	; 0x28
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	50040000 	.word	0x50040000
 8008920:	40021000 	.word	0x40021000

08008924 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800892a:	4b14      	ldr	r3, [pc, #80]	; (800897c <MX_DMA_Init+0x58>)
 800892c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800892e:	4a13      	ldr	r2, [pc, #76]	; (800897c <MX_DMA_Init+0x58>)
 8008930:	f043 0301 	orr.w	r3, r3, #1
 8008934:	6493      	str	r3, [r2, #72]	; 0x48
 8008936:	4b11      	ldr	r3, [pc, #68]	; (800897c <MX_DMA_Init+0x58>)
 8008938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8008942:	2200      	movs	r2, #0
 8008944:	2100      	movs	r1, #0
 8008946:	200d      	movs	r0, #13
 8008948:	f003 f87f 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800894c:	200d      	movs	r0, #13
 800894e:	f003 f898 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	200f      	movs	r0, #15
 8008958:	f003 f877 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800895c:	200f      	movs	r0, #15
 800895e:	f003 f890 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008962:	2200      	movs	r2, #0
 8008964:	2100      	movs	r1, #0
 8008966:	2010      	movs	r0, #16
 8008968:	f003 f86f 	bl	800ba4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800896c:	2010      	movs	r0, #16
 800896e:	f003 f888 	bl	800ba82 <HAL_NVIC_EnableIRQ>

}
 8008972:	bf00      	nop
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	40021000 	.word	0x40021000

08008980 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008986:	f107 0314 	add.w	r3, r7, #20
 800898a:	2200      	movs	r2, #0
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	605a      	str	r2, [r3, #4]
 8008990:	609a      	str	r2, [r3, #8]
 8008992:	60da      	str	r2, [r3, #12]
 8008994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008996:	4b6d      	ldr	r3, [pc, #436]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	4a6c      	ldr	r2, [pc, #432]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 800899c:	f043 0304 	orr.w	r3, r3, #4
 80089a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089a2:	4b6a      	ldr	r3, [pc, #424]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a6:	f003 0304 	and.w	r3, r3, #4
 80089aa:	613b      	str	r3, [r7, #16]
 80089ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80089ae:	4b67      	ldr	r3, [pc, #412]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b2:	4a66      	ldr	r2, [pc, #408]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089ba:	4b64      	ldr	r3, [pc, #400]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089c6:	4b61      	ldr	r3, [pc, #388]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ca:	4a60      	ldr	r2, [pc, #384]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089cc:	f043 0301 	orr.w	r3, r3, #1
 80089d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089d2:	4b5e      	ldr	r3, [pc, #376]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	60bb      	str	r3, [r7, #8]
 80089dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089de:	4b5b      	ldr	r3, [pc, #364]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089e2:	4a5a      	ldr	r2, [pc, #360]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089ea:	4b58      	ldr	r3, [pc, #352]	; (8008b4c <MX_GPIO_Init+0x1cc>)
 80089ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 80089f6:	2200      	movs	r2, #0
 80089f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80089fc:	4854      	ldr	r0, [pc, #336]	; (8008b50 <MX_GPIO_Init+0x1d0>)
 80089fe:	f003 ffb5 	bl	800c96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_WU_Pin|GAZ_WU_Pin|DWM_RST_Pin, GPIO_PIN_RESET);
 8008a02:	2200      	movs	r2, #0
 8008a04:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8008a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a0c:	f003 ffae 	bl	800c96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_WU_Pin|LORA_WU_Pin|DWM_WU_Pin|DONE_2_Pin
 8008a10:	2200      	movs	r2, #0
 8008a12:	f248 013d 	movw	r1, #32829	; 0x803d
 8008a16:	484f      	ldr	r0, [pc, #316]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008a18:	f003 ffa8 	bl	800c96c <HAL_GPIO_WritePin>
                          |DONE_1_Pin|CHA_ISEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPS_RST_Pin|OLED_WU_Pin, GPIO_PIN_SET);
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f241 0102 	movw	r1, #4098	; 0x1002
 8008a22:	484c      	ldr	r0, [pc, #304]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008a24:	f003 ffa2 	bl	800c96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8008a28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a2e:	2301      	movs	r3, #1
 8008a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008a32:	2302      	movs	r3, #2
 8008a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a36:	2300      	movs	r3, #0
 8008a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8008a3a:	f107 0314 	add.w	r3, r7, #20
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4843      	ldr	r0, [pc, #268]	; (8008b50 <MX_GPIO_Init+0x1d0>)
 8008a42:	f003 fd27 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8008a46:	2322      	movs	r3, #34	; 0x22
 8008a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008a4a:	2303      	movs	r3, #3
 8008a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a52:	f107 0314 	add.w	r3, r7, #20
 8008a56:	4619      	mov	r1, r3
 8008a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a5c:	f003 fd1a 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_WU_Pin|GAZ_WU_Pin;
 8008a60:	2388      	movs	r3, #136	; 0x88
 8008a62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a64:	2301      	movs	r3, #1
 8008a66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a70:	f107 0314 	add.w	r3, r7, #20
 8008a74:	4619      	mov	r1, r3
 8008a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a7a:	f003 fd0b 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_WU_Pin|LORA_WU_Pin;
 8008a7e:	2305      	movs	r3, #5
 8008a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a82:	2301      	movs	r3, #1
 8008a84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008a86:	2302      	movs	r3, #2
 8008a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	4619      	mov	r1, r3
 8008a94:	482f      	ldr	r0, [pc, #188]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008a96:	f003 fcfd 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|OLED_WU_Pin;
 8008a9a:	f241 0302 	movw	r3, #4098	; 0x1002
 8008a9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aac:	f107 0314 	add.w	r3, r7, #20
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4828      	ldr	r0, [pc, #160]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008ab4:	f003 fcee 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DWM_WU_Pin|DONE_2_Pin|DONE_1_Pin;
 8008ab8:	f248 0318 	movw	r3, #32792	; 0x8018
 8008abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aca:	f107 0314 	add.w	r3, r7, #20
 8008ace:	4619      	mov	r1, r3
 8008ad0:	4820      	ldr	r0, [pc, #128]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008ad2:	f003 fcdf 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DWM_RST_Pin;
 8008ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008adc:	2301      	movs	r3, #1
 8008ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DWM_RST_GPIO_Port, &GPIO_InitStruct);
 8008ae8:	f107 0314 	add.w	r3, r7, #20
 8008aec:	4619      	mov	r1, r3
 8008aee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008af2:	f003 fccf 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHA_ISEL_Pin;
 8008af6:	2320      	movs	r3, #32
 8008af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008afa:	2301      	movs	r3, #1
 8008afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008afe:	2300      	movs	r3, #0
 8008b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008b02:	2302      	movs	r3, #2
 8008b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHA_ISEL_GPIO_Port, &GPIO_InitStruct);
 8008b06:	f107 0314 	add.w	r3, r7, #20
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	4811      	ldr	r0, [pc, #68]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008b0e:	f003 fcc1 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008b12:	2308      	movs	r3, #8
 8008b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008b16:	2303      	movs	r3, #3
 8008b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8008b1e:	f107 0314 	add.w	r3, r7, #20
 8008b22:	4619      	mov	r1, r3
 8008b24:	480c      	ldr	r0, [pc, #48]	; (8008b58 <MX_GPIO_Init+0x1d8>)
 8008b26:	f003 fcb5 	bl	800c494 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BP_ON_Pin|BP_SOS_Pin;
 8008b2a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008b2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b30:	2300      	movs	r3, #0
 8008b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b34:	2301      	movs	r3, #1
 8008b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b38:	f107 0314 	add.w	r3, r7, #20
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4805      	ldr	r0, [pc, #20]	; (8008b54 <MX_GPIO_Init+0x1d4>)
 8008b40:	f003 fca8 	bl	800c494 <HAL_GPIO_Init>

}
 8008b44:	bf00      	nop
 8008b46:	3728      	adds	r7, #40	; 0x28
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	48000800 	.word	0x48000800
 8008b54:	48000400 	.word	0x48000400
 8008b58:	48001c00 	.word	0x48001c00

08008b5c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008b60:	4b1b      	ldr	r3, [pc, #108]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b62:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <MX_I2C1_Init+0x78>)
 8008b64:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000103;
 8008b66:	4b1a      	ldr	r3, [pc, #104]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b68:	f240 1203 	movw	r2, #259	; 0x103
 8008b6c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008b6e:	4b18      	ldr	r3, [pc, #96]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b70:	2200      	movs	r2, #0
 8008b72:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b74:	4b16      	ldr	r3, [pc, #88]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b7a:	4b15      	ldr	r3, [pc, #84]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008b80:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b82:	2200      	movs	r2, #0
 8008b84:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b8c:	4b10      	ldr	r3, [pc, #64]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b92:	4b0f      	ldr	r3, [pc, #60]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b98:	480d      	ldr	r0, [pc, #52]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008b9a:	f003 feff 	bl	800c99c <HAL_I2C_Init>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d001      	beq.n	8008ba8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008ba4:	f000 ff68 	bl	8009a78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008ba8:	2100      	movs	r1, #0
 8008baa:	4809      	ldr	r0, [pc, #36]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008bac:	f004 fb5c 	bl	800d268 <HAL_I2CEx_ConfigAnalogFilter>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d001      	beq.n	8008bba <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8008bb6:	f000 ff5f 	bl	8009a78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008bba:	2100      	movs	r1, #0
 8008bbc:	4804      	ldr	r0, [pc, #16]	; (8008bd0 <MX_I2C1_Init+0x74>)
 8008bbe:	f004 fb9e 	bl	800d2fe <HAL_I2CEx_ConfigDigitalFilter>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8008bc8:	f000 ff56 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008bcc:	bf00      	nop
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20001dac 	.word	0x20001dac
 8008bd4:	40005400 	.word	0x40005400

08008bd8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008bdc:	4b1b      	ldr	r3, [pc, #108]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008bde:	4a1c      	ldr	r2, [pc, #112]	; (8008c50 <MX_I2C2_Init+0x78>)
 8008be0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000000;
 8008be2:	4b1a      	ldr	r3, [pc, #104]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008be4:	2200      	movs	r2, #0
 8008be6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008be8:	4b18      	ldr	r3, [pc, #96]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008bea:	2200      	movs	r2, #0
 8008bec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008bee:	4b17      	ldr	r3, [pc, #92]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008bf0:	2201      	movs	r2, #1
 8008bf2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008bf4:	4b15      	ldr	r3, [pc, #84]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008c06:	4b11      	ldr	r3, [pc, #68]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c0e:	2200      	movs	r2, #0
 8008c10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008c12:	480e      	ldr	r0, [pc, #56]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c14:	f003 fec2 	bl	800c99c <HAL_I2C_Init>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d001      	beq.n	8008c22 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008c1e:	f000 ff2b 	bl	8009a78 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008c22:	2100      	movs	r1, #0
 8008c24:	4809      	ldr	r0, [pc, #36]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c26:	f004 fb1f 	bl	800d268 <HAL_I2CEx_ConfigAnalogFilter>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d001      	beq.n	8008c34 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008c30:	f000 ff22 	bl	8009a78 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008c34:	2100      	movs	r1, #0
 8008c36:	4805      	ldr	r0, [pc, #20]	; (8008c4c <MX_I2C2_Init+0x74>)
 8008c38:	f004 fb61 	bl	800d2fe <HAL_I2CEx_ConfigDigitalFilter>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d001      	beq.n	8008c46 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008c42:	f000 ff19 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008c46:	bf00      	nop
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop
 8008c4c:	20001d60 	.word	0x20001d60
 8008c50:	40005800 	.word	0x40005800

08008c54 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b08c      	sub	sp, #48	; 0x30
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c5c:	f107 031c 	add.w	r3, r7, #28
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	605a      	str	r2, [r3, #4]
 8008c66:	609a      	str	r2, [r3, #8]
 8008c68:	60da      	str	r2, [r3, #12]
 8008c6a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a2e      	ldr	r2, [pc, #184]	; (8008d2c <HAL_I2C_MspInit+0xd8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d128      	bne.n	8008cc8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c76:	4b2e      	ldr	r3, [pc, #184]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c7a:	4a2d      	ldr	r2, [pc, #180]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008c7c:	f043 0302 	orr.w	r3, r3, #2
 8008c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008c82:	4b2b      	ldr	r3, [pc, #172]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8008c8e:	23c0      	movs	r3, #192	; 0xc0
 8008c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008c92:	2312      	movs	r3, #18
 8008c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008c96:	2301      	movs	r3, #1
 8008c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ca2:	f107 031c 	add.w	r3, r7, #28
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	4822      	ldr	r0, [pc, #136]	; (8008d34 <HAL_I2C_MspInit+0xe0>)
 8008caa:	f003 fbf3 	bl	800c494 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008cae:	4b20      	ldr	r3, [pc, #128]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cb2:	4a1f      	ldr	r2, [pc, #124]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008cb8:	6593      	str	r3, [r2, #88]	; 0x58
 8008cba:	4b1d      	ldr	r3, [pc, #116]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008cc6:	e02d      	b.n	8008d24 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a1a      	ldr	r2, [pc, #104]	; (8008d38 <HAL_I2C_MspInit+0xe4>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d128      	bne.n	8008d24 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cd2:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd6:	4a16      	ldr	r2, [pc, #88]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008cd8:	f043 0302 	orr.w	r3, r3, #2
 8008cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008cde:	4b14      	ldr	r3, [pc, #80]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ce2:	f003 0302 	and.w	r3, r3, #2
 8008ce6:	613b      	str	r3, [r7, #16]
 8008ce8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL2_OLED_Pin|SDA2_OLED_Pin;
 8008cea:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008cf0:	2312      	movs	r3, #18
 8008cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf8:	2303      	movs	r3, #3
 8008cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008cfc:	2304      	movs	r3, #4
 8008cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d00:	f107 031c 	add.w	r3, r7, #28
 8008d04:	4619      	mov	r1, r3
 8008d06:	480b      	ldr	r0, [pc, #44]	; (8008d34 <HAL_I2C_MspInit+0xe0>)
 8008d08:	f003 fbc4 	bl	800c494 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008d0c:	4b08      	ldr	r3, [pc, #32]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d10:	4a07      	ldr	r2, [pc, #28]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008d12:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d16:	6593      	str	r3, [r2, #88]	; 0x58
 8008d18:	4b05      	ldr	r3, [pc, #20]	; (8008d30 <HAL_I2C_MspInit+0xdc>)
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d20:	60fb      	str	r3, [r7, #12]
 8008d22:	68fb      	ldr	r3, [r7, #12]
}
 8008d24:	bf00      	nop
 8008d26:	3730      	adds	r7, #48	; 0x30
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	40005400 	.word	0x40005400
 8008d30:	40021000 	.word	0x40021000
 8008d34:	48000400 	.word	0x48000400
 8008d38:	40005800 	.word	0x40005800

08008d3c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <MX_IWDG_Init+0x34>)
 8008d42:	4a0c      	ldr	r2, [pc, #48]	; (8008d74 <MX_IWDG_Init+0x38>)
 8008d44:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8008d46:	4b0a      	ldr	r3, [pc, #40]	; (8008d70 <MX_IWDG_Init+0x34>)
 8008d48:	2205      	movs	r2, #5
 8008d4a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8008d4c:	4b08      	ldr	r3, [pc, #32]	; (8008d70 <MX_IWDG_Init+0x34>)
 8008d4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008d52:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3750;
 8008d54:	4b06      	ldr	r3, [pc, #24]	; (8008d70 <MX_IWDG_Init+0x34>)
 8008d56:	f640 62a6 	movw	r2, #3750	; 0xea6
 8008d5a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008d5c:	4804      	ldr	r0, [pc, #16]	; (8008d70 <MX_IWDG_Init+0x34>)
 8008d5e:	f004 fb1a 	bl	800d396 <HAL_IWDG_Init>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8008d68:	f000 fe86 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8008d6c:	bf00      	nop
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	20001df8 	.word	0x20001df8
 8008d74:	40003000 	.word	0x40003000

08008d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b0f2      	sub	sp, #456	; 0x1c8
 8008d7c:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	//EE_Status ee_status = EE_OK;
	int powersave = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	uint32_t upperLedTab[LTAB + 2]; // Tab[0]  <= 1 for ON or 0 for OFF
	upperLedTab[LTABD + 1] = 20;		// dt1 before task 1
 8008d84:	2314      	movs	r3, #20
 8008d86:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	upperLedTab[LTABD + 2] = 9980;	// dt2 after	task 1
 8008d8a:	f242 63fc 	movw	r3, #9980	; 0x26fc
 8008d8e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	InitTaskState(upperLedTab, 2);
 8008d92:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008d96:	2102      	movs	r1, #2
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f7fa ff4f 	bl	8003c3c <InitTaskState>

	uint32_t sosTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	sosTab[LTABD + 1] = 10;		// dt1 before task 1
 8008d9e:	230a      	movs	r3, #10
 8008da0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	InitTaskState(sosTab, 1);
 8008da4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008da8:	2101      	movs	r1, #1
 8008daa:	4618      	mov	r0, r3
 8008dac:	f7fa ff46 	bl	8003c3c <InitTaskState>

	// for REGAZ
	uint32_t ScreenTab[LTAB + 3]; // Tab[0] <= 1 for ON or 0 for OFF
	ScreenTab[LTABD + 1] = 50;	 // dt1 before task 1
 8008db0:	2332      	movs	r3, #50	; 0x32
 8008db2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	ScreenTab[LTABD + 2] = 300;	 // dt1 before task 2
 8008db6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008dba:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	ScreenTab[LTABD + 3] = 50;	 // dt1 before task 3
 8008dbe:	2332      	movs	r3, #50	; 0x32
 8008dc0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	InitTaskState(ScreenTab, 3);
 8008dc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008dc8:	2103      	movs	r1, #3
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fa ff36 	bl	8003c3c <InitTaskState>

	uint32_t BatTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	BatTab[LTABD + 1] = 5000;		 // dt1 before task 1
 8008dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	InitTaskState(BatTab, 1);
 8008dd8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008ddc:	2101      	movs	r1, #1
 8008dde:	4618      	mov	r0, r3
 8008de0:	f7fa ff2c 	bl	8003c3c <InitTaskState>

	uint32_t chargerTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	chargerTab[LTABD + 1] = 500;		// dt1 before task 1     // EJ : was 500
 8008de4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008de8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	InitTaskState(chargerTab, 1);
 8008dec:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008df0:	2101      	movs	r1, #1
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fa ff22 	bl	8003c3c <InitTaskState>

	uint32_t updateLedTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	updateLedTab[LTABD + 1] = 100;	 // dt1 before task 1
 8008df8:	2364      	movs	r3, #100	; 0x64
 8008dfa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	InitTaskState(updateLedTab, 1);
 8008dfe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008e02:	2101      	movs	r1, #1
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7fa ff19 	bl	8003c3c <InitTaskState>

	uint32_t Timer_screen;
	uint32_t TimerLastLoraMessage 	= 0 ;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	uint32_t TimerLastSigfoxMessage = 0 ;
 8008e10:	2300      	movs	r3, #0
 8008e12:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	/*!-----END DCO AJOUT----!*/

	/*!--------DCO AJOUT----------------!*/

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 8008e16:	2300      	movs	r3, #0
 8008e18:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008e1c:	e00a      	b.n	8008e34 <main+0xbc>
	{
		TabAlert[i_fct] = 0;
 8008e1e:	4a8a      	ldr	r2, [pc, #552]	; (8009048 <main+0x2d0>)
 8008e20:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008e24:	2100      	movs	r1, #0
 8008e26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 8008e2a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008e34:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008e38:	2b0d      	cmp	r3, #13
 8008e3a:	ddf0      	ble.n	8008e1e <main+0xa6>
	}
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008e42:	e00a      	b.n	8008e5a <main+0xe2>
	{
		TabGen[i_fct] = 0;
 8008e44:	4a81      	ldr	r2, [pc, #516]	; (800904c <main+0x2d4>)
 8008e46:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008e4a:	2100      	movs	r1, #0
 8008e4c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 8008e50:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008e54:	3301      	adds	r3, #1
 8008e56:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008e5a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008e5e:	2b5a      	cmp	r3, #90	; 0x5a
 8008e60:	ddf0      	ble.n	8008e44 <main+0xcc>
	}
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008e68:	e00a      	b.n	8008e80 <main+0x108>
	{
		TabTimer[i_fct] = 0;
 8008e6a:	4a79      	ldr	r2, [pc, #484]	; (8009050 <main+0x2d8>)
 8008e6c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008e70:	2100      	movs	r1, #0
 8008e72:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 8008e76:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008e80:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008e84:	2b05      	cmp	r3, #5
 8008e86:	ddf0      	ble.n	8008e6a <main+0xf2>
	}
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008e8e:	e00c      	b.n	8008eaa <main+0x132>
	{
		TabFloatValue[i_fct] = 0;
 8008e90:	4a70      	ldr	r2, [pc, #448]	; (8009054 <main+0x2dc>)
 8008e92:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	4413      	add	r3, r2
 8008e9a:	f04f 0200 	mov.w	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 8008ea0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008eaa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008eae:	2b16      	cmp	r3, #22
 8008eb0:	ddee      	ble.n	8008e90 <main+0x118>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008eb8:	e00a      	b.n	8008ed0 <main+0x158>
	{
		TabDist[i_fct] = 0;
 8008eba:	4a67      	ldr	r2, [pc, #412]	; (8009058 <main+0x2e0>)
 8008ebc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008ec6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008eca:	3301      	adds	r3, #1
 8008ecc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008ed0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008ed4:	2b04      	cmp	r3, #4
 8008ed6:	ddf0      	ble.n	8008eba <main+0x142>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008ed8:	2300      	movs	r3, #0
 8008eda:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008ede:	e00a      	b.n	8008ef6 <main+0x17e>
	{
		Rx_bufferNemeus[i_fct] = 0;
 8008ee0:	4a5e      	ldr	r2, [pc, #376]	; (800905c <main+0x2e4>)
 8008ee2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008ee6:	4413      	add	r3, r2
 8008ee8:	2200      	movs	r2, #0
 8008eea:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008eec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008ef6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	ddf0      	ble.n	8008ee0 <main+0x168>
	}
	TabGen[NMAXS_MALAISE] = SEC_DETECT_MALAISE * 100; // duration of malaise on sample (100 Hz) x [s] ;
 8008efe:	4b53      	ldr	r3, [pc, #332]	; (800904c <main+0x2d4>)
 8008f00:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008f04:	631a      	str	r2, [r3, #48]	; 0x30
	TabGen[NMAXS_IMMO] = SEC_DETECT_IMMO * 100; // duration of immo on sample (100 Hz) x [s] ;
 8008f06:	4b51      	ldr	r3, [pc, #324]	; (800904c <main+0x2d4>)
 8008f08:	4a55      	ldr	r2, [pc, #340]	; (8009060 <main+0x2e8>)
 8008f0a:	635a      	str	r2, [r3, #52]	; 0x34
	TabGen[NMAXS_FALL] = SEC_DETECT_FALL * 100; // duration of fall on sample (100 Hz) x [s] ;
 8008f0c:	4b4f      	ldr	r3, [pc, #316]	; (800904c <main+0x2d4>)
 8008f0e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38
	TabGen[FALL_COND_2] = 1;
 8008f14:	4b4d      	ldr	r3, [pc, #308]	; (800904c <main+0x2d4>)
 8008f16:	2201      	movs	r2, #1
 8008f18:	675a      	str	r2, [r3, #116]	; 0x74
	TabGen[GPS_START_IT] = 1;
 8008f1a:	4b4c      	ldr	r3, [pc, #304]	; (800904c <main+0x2d4>)
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TabGen[TYPE_ALERT] = NONE_ALERT;
 8008f22:	4b4a      	ldr	r3, [pc, #296]	; (800904c <main+0x2d4>)
 8008f24:	2200      	movs	r2, #0
 8008f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	TabGen[BAT_VALUE] = 100;
 8008f2a:	4b48      	ldr	r3, [pc, #288]	; (800904c <main+0x2d4>)
 8008f2c:	2264      	movs	r2, #100	; 0x64
 8008f2e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	TabGen[SCREENSTATE] = 1;
 8008f32:	4b46      	ldr	r3, [pc, #280]	; (800904c <main+0x2d4>)
 8008f34:	2201      	movs	r2, #1
 8008f36:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008f3a:	f001 fa24 	bl	800a386 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008f3e:	f000 fc37 	bl	80097b0 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  /* USER CODE BEGIN 2 */
	MX_GPIO_Init();
 8008f42:	f7ff fd1d 	bl	8008980 <MX_GPIO_Init>

	if (InSOS() == 1 && bootloader(3) == 1)
 8008f46:	f7fa fafd 	bl	8003544 <InSOS>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d136      	bne.n	8008fbe <main+0x246>
 8008f50:	2003      	movs	r0, #3
 8008f52:	f7fa f881 	bl	8003058 <bootloader>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d130      	bne.n	8008fbe <main+0x246>
	{
		GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8008f5c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008f60:	2200      	movs	r2, #0
 8008f62:	601a      	str	r2, [r3, #0]
 8008f64:	605a      	str	r2, [r3, #4]
 8008f66:	609a      	str	r2, [r3, #8]
 8008f68:	60da      	str	r2, [r3, #12]
 8008f6a:	611a      	str	r2, [r3, #16]
		OutMotorWu(0);
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	f7fa faa1 	bl	80034b4 <OutMotorWu>
		USB_DFU();
 8008f72:	f00d feb1 	bl	8016cd8 <USB_DFU>
		OutDone1(0); //Stop Powersave part 1
 8008f76:	2000      	movs	r0, #0
 8008f78:	f7fa f9d6 	bl	8003328 <OutDone1>
		OutDone2(1); //Stop Powersave part 2
 8008f7c:	2001      	movs	r0, #1
 8008f7e:	f7fa f9eb 	bl	8003358 <OutDone2>

		/*Configure GPIO pins : PAPin PAPin */
		MX_I2C1_Init();
 8008f82:	f7ff fdeb 	bl	8008b5c <MX_I2C1_Init>
		LedOn(0, 100, 100, TabGen);
 8008f86:	4b31      	ldr	r3, [pc, #196]	; (800904c <main+0x2d4>)
 8008f88:	2264      	movs	r2, #100	; 0x64
 8008f8a:	2164      	movs	r1, #100	; 0x64
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	f7fa fdd1 	bl	8003b34 <LedOn>
		//OutMotorWu(0);
		HAL_GPIO_DeInit(GPIOA, MOTOR_WU_Pin);
 8008f92:	2108      	movs	r1, #8
 8008f94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008f98:	f003 fbf6 	bl	800c788 <HAL_GPIO_DeInit>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008f9c:	4b31      	ldr	r3, [pc, #196]	; (8009064 <main+0x2ec>)
 8008f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa0:	4a30      	ldr	r2, [pc, #192]	; (8009064 <main+0x2ec>)
 8008fa2:	f043 0301 	orr.w	r3, r3, #1
 8008fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fa8:	4b2e      	ldr	r3, [pc, #184]	; (8009064 <main+0x2ec>)
 8008faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fac:	f003 0301 	and.w	r3, r3, #1
 8008fb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc

		jumpToBootloader();
 8008fb8:	f000 fd24 	bl	8009a04 <jumpToBootloader>
	{
 8008fbc:	e015      	b.n	8008fea <main+0x272>
	}
	else
	{
		HAL_MspInit();
 8008fbe:	f000 fd63 	bl	8009a88 <HAL_MspInit>
		MX_DMA_Init();
 8008fc2:	f7ff fcaf 	bl	8008924 <MX_DMA_Init>
		MX_I2C1_Init();
 8008fc6:	f7ff fdc9 	bl	8008b5c <MX_I2C1_Init>
		MX_I2C2_Init();
 8008fca:	f7ff fe05 	bl	8008bd8 <MX_I2C2_Init>
		if(RAK811 == 1)
			MX_USART1_UART_Init();

		MX_USART2_UART_Init();
 8008fce:	f001 f827 	bl	800a020 <MX_USART2_UART_Init>

		if(SIGFOXOK == 1 || LORAWANOK == 1)
			MX_USART3_UART_Init();
		MX_TIM7_Init();  // clock timer - IMU
 8008fd2:	f000 ff01 	bl	8009dd8 <MX_TIM7_Init>
		MX_TIM16_Init(); // PWM buzzer
 8008fd6:	f000 ff35 	bl	8009e44 <MX_TIM16_Init>
		MX_IWDG_Init();
 8008fda:	f7ff feaf 	bl	8008d3c <MX_IWDG_Init>
		if(BiGaz_ON == 1)
 8008fde:	4b22      	ldr	r3, [pc, #136]	; (8009068 <main+0x2f0>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	d101      	bne.n	8008fea <main+0x272>
			MX_ADC1_Init();
 8008fe6:	f7ff fbfb 	bl	80087e0 <MX_ADC1_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_GPIO_WritePin(GAZ_WU_GPIO_Port, GAZ_WU_Pin, GPIO_PIN_SET);
	OuChaIsel(0);
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7fa f984 	bl	80032f8 <OuChaIsel>

	// NO DONE SIGNAL -> keep power until t_DRV or wait for On button pushed in Powersave()
	OutDone1(0); //Stop Powersave part 1 // PB4 - DONE
 8008ff0:	2000      	movs	r0, #0
 8008ff2:	f7fa f999 	bl	8003328 <OutDone1>
	OutDone2(1); //Stop Powersave part 2 // PB3 - DRV
 8008ff6:	2001      	movs	r0, #1
 8008ff8:	f7fa f9ae 	bl	8003358 <OutDone2>
	HAL_Delay(1);
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	f001 fa37 	bl	800a470 <HAL_Delay>
	OutLedWu(1);
 8009002:	2001      	movs	r0, #1
 8009004:	f7fa fa3e 	bl	8003484 <OutLedWu>

	TabGen[GPS_DURATION] = 10;
 8009008:	4b10      	ldr	r3, [pc, #64]	; (800904c <main+0x2d4>)
 800900a:	220a      	movs	r2, #10
 800900c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	LedChargeIndic(TabGen);
 8009010:	480e      	ldr	r0, [pc, #56]	; (800904c <main+0x2d4>)
 8009012:	f7f9 ff8e 	bl	8002f32 <LedChargeIndic>

	if (RCC->CSR & 1 << RCC_CSR_IWDGRSTF_Pos)
 8009016:	4b13      	ldr	r3, [pc, #76]	; (8009064 <main+0x2ec>)
 8009018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800901c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009020:	2b00      	cmp	r3, #0
 8009022:	d025      	beq.n	8009070 <main+0x2f8>
	{

		__HAL_RCC_CLEAR_RESET_FLAGS();
 8009024:	4b0f      	ldr	r3, [pc, #60]	; (8009064 <main+0x2ec>)
 8009026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800902a:	4a0e      	ldr	r2, [pc, #56]	; (8009064 <main+0x2ec>)
 800902c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		OutDone1(0); //Stop Powersave part 1 // PB4 - DONE
 8009034:	2000      	movs	r0, #0
 8009036:	f7fa f977 	bl	8003328 <OutDone1>
		OutDone2(1); //Stop Powersave part 2 // PB3 - DRV
 800903a:	2001      	movs	r0, #1
 800903c:	f7fa f98c 	bl	8003358 <OutDone2>

		REBOOT_FROM_WATCHDOG = 1;
 8009040:	4b0a      	ldr	r3, [pc, #40]	; (800906c <main+0x2f4>)
 8009042:	2201      	movs	r2, #1
 8009044:	701a      	strb	r2, [r3, #0]
 8009046:	e017      	b.n	8009078 <main+0x300>
 8009048:	20003100 	.word	0x20003100
 800904c:	20002550 	.word	0x20002550
 8009050:	20002878 	.word	0x20002878
 8009054:	20002be4 	.word	0x20002be4
 8009058:	20002024 	.word	0x20002024
 800905c:	200027b0 	.word	0x200027b0
 8009060:	00015f90 	.word	0x00015f90
 8009064:	40021000 	.word	0x40021000
 8009068:	20000b99 	.word	0x20000b99
 800906c:	20000b59 	.word	0x20000b59
	}
	else
		powersave = PowerSave();
 8009070:	f7fa fdaa 	bl	8003bc8 <PowerSave>
 8009074:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
	//RCC_GetFlagStatus(RCC_FLAG_IWDGRST);

	//LBL
	default_value();
 8009078:	f7fa f80e 	bl	8003098 <default_value>

	Load_configuration_value();
 800907c:	f7fa f8c6 	bl	800320c <Load_configuration_value>

	if (powersave == 0)
 8009080:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8009084:	2b00      	cmp	r3, #0
 8009086:	d108      	bne.n	800909a <main+0x322>
	{

		HAL_Delay(2);
 8009088:	2002      	movs	r0, #2
 800908a:	f001 f9f1 	bl	800a470 <HAL_Delay>
		LedOn(0, 0, 50, TabGen);
 800908e:	4bbc      	ldr	r3, [pc, #752]	; (8009380 <main+0x608>)
 8009090:	2232      	movs	r2, #50	; 0x32
 8009092:	2100      	movs	r1, #0
 8009094:	2000      	movs	r0, #0
 8009096:	f7fa fd4d 	bl	8003b34 <LedOn>

#endif

	}

	HAL_TIM_Base_Start_IT(&htim7);
 800909a:	48ba      	ldr	r0, [pc, #744]	; (8009384 <main+0x60c>)
 800909c:	f007 f9a4 	bl	80103e8 <HAL_TIM_Base_Start_IT>

	ScreenOn();
 80090a0:	f7fa fdac 	bl	8003bfc <ScreenOn>

	display_Init(!REBOOT_FROM_WATCHDOG);
 80090a4:	4bb8      	ldr	r3, [pc, #736]	; (8009388 <main+0x610>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	bf0c      	ite	eq
 80090ac:	2301      	moveq	r3, #1
 80090ae:	2300      	movne	r3, #0
 80090b0:	b2db      	uxtb	r3, r3
 80090b2:	4618      	mov	r0, r3
 80090b4:	f7f8 fb66 	bl	8001784 <display_Init>
		GpsStop();

	}
	else
	{
		TabGen[GPS_ON] = 1;
 80090b8:	4bb1      	ldr	r3, [pc, #708]	; (8009380 <main+0x608>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	605a      	str	r2, [r3, #4]
	}

	// IMU INITIALISATION

	Init_IMU();
 80090be:	f7fa fbbb 	bl	8003838 <Init_IMU>

	/*!--------DCO AJOUT----------------!*/


#ifdef DWM1001C
	OutDwmRst(0);
 80090c2:	2000      	movs	r0, #0
 80090c4:	f7fa f960 	bl	8003388 <OutDwmRst>
	OutDwmWu(0);
 80090c8:	2000      	movs	r0, #0
 80090ca:	f7fa f977 	bl	80033bc <OutDwmWu>
	{
		OutDwmRst(0);
		OutDwmWu(0);
	}

	I2C1_OK = HAL_OK;
 80090ce:	4baf      	ldr	r3, [pc, #700]	; (800938c <main+0x614>)
 80090d0:	2200      	movs	r2, #0
 80090d2:	701a      	strb	r2, [r3, #0]
	if (I2C1_OK == HAL_OK)
 80090d4:	4bad      	ldr	r3, [pc, #692]	; (800938c <main+0x614>)
 80090d6:	781b      	ldrb	r3, [r3, #0]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d102      	bne.n	80090e2 <main+0x36a>
		TaskCharger(TabGen);
 80090dc:	48a8      	ldr	r0, [pc, #672]	; (8009380 <main+0x608>)
 80090de:	f7fb fa25 	bl	800452c <TaskCharger>

	if(TabGen[CHARGEC] == 1)
 80090e2:	4ba7      	ldr	r3, [pc, #668]	; (8009380 <main+0x608>)
 80090e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d104      	bne.n	80090f6 <main+0x37e>
	{
		USB_ON = 1;
 80090ec:	4ba8      	ldr	r3, [pc, #672]	; (8009390 <main+0x618>)
 80090ee:	2201      	movs	r2, #1
 80090f0:	701a      	strb	r2, [r3, #0]
		Hes_USB_Config_Mode();
 80090f2:	f00d fdc1 	bl	8016c78 <Hes_USB_Config_Mode>
	}

	//TaskReadBat(TabGen);
	//HAL_Delay(100);
	if (I2C1_OK == HAL_OK)
 80090f6:	4ba5      	ldr	r3, [pc, #660]	; (800938c <main+0x614>)
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d102      	bne.n	8009104 <main+0x38c>
		TaskReadBat(TabGen);
 80090fe:	48a0      	ldr	r0, [pc, #640]	; (8009380 <main+0x608>)
 8009100:	f7fb fa3d 	bl	800457e <TaskReadBat>

	/*!--------DCO AJOUT----------------!*/

	if (SUEZ == 0)
	{
		WakeUpNemeusLS();
 8009104:	f7fa fe06 	bl	8003d14 <WakeUpNemeusLS>
		RebootNemeusLS(TabGen);
 8009108:	489d      	ldr	r0, [pc, #628]	; (8009380 <main+0x608>)
 800910a:	f7fa fe11 	bl	8003d30 <RebootNemeusLS>

			AskJoinTimeLoraWan = HAL_GetTick();
			TabGen[LORAWAN_STATE] = LW_WAIT_JOIN;
			DUAL_STATE_LS = LW_JOIN_PENDING;
		}
		TimerLastSigfoxMessage = HAL_GetTick();
 800910e:	f001 f9a3 	bl	800a458 <HAL_GetTick>
 8009112:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
//		OutGazWu(1); //  command for the gaz board (switch on the power supply), board directly connect to 3.3V for now (03/05/21) problem with MOSFET
//



	HAL_TIM_Base_Start_IT(&htim7);
 8009116:	489b      	ldr	r0, [pc, #620]	; (8009384 <main+0x60c>)
 8009118:	f007 f966 	bl	80103e8 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 800911c:	2001      	movs	r0, #1
 800911e:	f001 f9a7 	bl	800a470 <HAL_Delay>
	if (GPSOK == 1)
	{
		TabGen[GPS_ON] = 1;
 8009122:	4b97      	ldr	r3, [pc, #604]	; (8009380 <main+0x608>)
 8009124:	2201      	movs	r2, #1
 8009126:	605a      	str	r2, [r3, #4]
	}
	Timer_screen = HAL_GetTick();
 8009128:	f001 f996 	bl	800a458 <HAL_GetTick>
 800912c:	4603      	mov	r3, r0
 800912e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4



	timeBeforeDMA_SF = HAL_GetTick();
 8009132:	f001 f991 	bl	800a458 <HAL_GetTick>
 8009136:	4603      	mov	r3, r0
 8009138:	4a96      	ldr	r2, [pc, #600]	; (8009394 <main+0x61c>)
 800913a:	6013      	str	r3, [r2, #0]
		//WifiName "NoName";
	}

	if (DMA_GPS_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart2, Rx_datagps, MAXITGPS);
 800913c:	2264      	movs	r2, #100	; 0x64
 800913e:	4996      	ldr	r1, [pc, #600]	; (8009398 <main+0x620>)
 8009140:	4896      	ldr	r0, [pc, #600]	; (800939c <main+0x624>)
 8009142:	f008 fb07 	bl	8011754 <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, Rx_RAK811, MAXITRAK);
	}

	if (DMA_NEMEUS_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart3, Rx_Nemeus, MAXITNEMEUS);
 8009146:	22c8      	movs	r2, #200	; 0xc8
 8009148:	4995      	ldr	r1, [pc, #596]	; (80093a0 <main+0x628>)
 800914a:	4896      	ldr	r0, [pc, #600]	; (80093a4 <main+0x62c>)
 800914c:	f008 fb02 	bl	8011754 <HAL_UART_Receive_DMA>





		uint32_t Time_Now = HAL_GetTick();
 8009150:	f001 f982 	bl	800a458 <HAL_GetTick>
 8009154:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
		millis = HAL_GetTick();
 8009158:	f001 f97e 	bl	800a458 <HAL_GetTick>
 800915c:	4603      	mov	r3, r0
 800915e:	4a92      	ldr	r2, [pc, #584]	; (80093a8 <main+0x630>)
 8009160:	6013      	str	r3, [r2, #0]
//		if (millis % 5 == 0)
//			HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

		HAL_IWDG_Refresh(&hiwdg);
 8009162:	4892      	ldr	r0, [pc, #584]	; (80093ac <main+0x634>)
 8009164:	f004 f95d 	bl	800d422 <HAL_IWDG_Refresh>
			ComputeAlerteGaz(TabAlert, TabFloatValue);
		}

// ##########################GPS################################################

		if (TabGen[GPS_GOOD] == 1)
 8009168:	4b85      	ldr	r3, [pc, #532]	; (8009380 <main+0x608>)
 800916a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800916e:	2b01      	cmp	r3, #1
 8009170:	d10b      	bne.n	800918a <main+0x412>
		{
			if (millis - TabTimer[LAST_UPDATE_GPS] < 15 * 60 * 1000)
 8009172:	4b8d      	ldr	r3, [pc, #564]	; (80093a8 <main+0x630>)
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	4b8e      	ldr	r3, [pc, #568]	; (80093b0 <main+0x638>)
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	4a8d      	ldr	r2, [pc, #564]	; (80093b4 <main+0x63c>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d803      	bhi.n	800918a <main+0x412>
				TabGen[GPS_DURATION] = GPSDURA;
 8009182:	4b7f      	ldr	r3, [pc, #508]	; (8009380 <main+0x608>)
 8009184:	2201      	movs	r2, #1
 8009186:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}

		if (GPSOK == 1) // GPS IS ENABLED
		{
			GPS_Management();
 800918a:	f7fc ff35 	bl	8005ff8 <GPS_Management>

// ########################## MESSAGE MANAGEMENT #####################################



		Task_Gaz();
 800918e:	f7fd fae3 	bl	8006758 <Task_Gaz>
				TaskSendLoraWan(TabGen, TabFloatValue, TabTimer);
				//TimerLastLoraMessage = HAL_GetTick();
			}
		}

		if (TabGen[DUAL_SEND] == 1)
 8009192:	4b7b      	ldr	r3, [pc, #492]	; (8009380 <main+0x608>)
 8009194:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8009198:	2b01      	cmp	r3, #1
 800919a:	d105      	bne.n	80091a8 <main+0x430>
			TaskSendDUAL(TabGen, TabFloatValue, TabTimer, WifiName);
 800919c:	4b86      	ldr	r3, [pc, #536]	; (80093b8 <main+0x640>)
 800919e:	4a84      	ldr	r2, [pc, #528]	; (80093b0 <main+0x638>)
 80091a0:	4986      	ldr	r1, [pc, #536]	; (80093bc <main+0x644>)
 80091a2:	4877      	ldr	r0, [pc, #476]	; (8009380 <main+0x608>)
 80091a4:	f7fc f8c6 	bl	8005334 <TaskSendDUAL>
		}			
		#endif			

		// ########################## MESSAGE MANAGEMENT END ##############################

		if (USB_ON == 1)
 80091a8:	4b79      	ldr	r3, [pc, #484]	; (8009390 <main+0x618>)
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d101      	bne.n	80091b4 <main+0x43c>
			Task_USB_Configuration();
 80091b0:	f7fc ff9a 	bl	80060e8 <Task_USB_Configuration>

		TaskExtButton(TabGen);
 80091b4:	4872      	ldr	r0, [pc, #456]	; (8009380 <main+0x608>)
 80091b6:	f7fb f9f5 	bl	80045a4 <TaskExtButton>

		TaskFallTest(TabAlert, TabGen);
 80091ba:	4971      	ldr	r1, [pc, #452]	; (8009380 <main+0x608>)
 80091bc:	4880      	ldr	r0, [pc, #512]	; (80093c0 <main+0x648>)
 80091be:	f7fb fb4b 	bl	8004858 <TaskFallTest>

		if (HAL_GetTick()% 1000 == 1)
 80091c2:	f001 f949 	bl	800a458 <HAL_GetTick>
 80091c6:	4602      	mov	r2, r0
 80091c8:	4b7e      	ldr	r3, [pc, #504]	; (80093c4 <main+0x64c>)
 80091ca:	fba3 1302 	umull	r1, r3, r3, r2
 80091ce:	099b      	lsrs	r3, r3, #6
 80091d0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80091d4:	fb01 f303 	mul.w	r3, r1, r3
 80091d8:	1ad3      	subs	r3, r2, r3
		{

		}

		if (HAL_GetTick()% 100 == 0)
 80091da:	f001 f93d 	bl	800a458 <HAL_GetTick>
 80091de:	4602      	mov	r2, r0
 80091e0:	4b79      	ldr	r3, [pc, #484]	; (80093c8 <main+0x650>)
 80091e2:	fba3 1302 	umull	r1, r3, r3, r2
 80091e6:	095b      	lsrs	r3, r3, #5
 80091e8:	2164      	movs	r1, #100	; 0x64
 80091ea:	fb01 f303 	mul.w	r3, r1, r3
 80091ee:	1ad3      	subs	r3, r2, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d129      	bne.n	8009248 <main+0x4d0>
		{
			TaskOnScreen(TabGen, &Timer_screen);
 80091f4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80091f8:	4619      	mov	r1, r3
 80091fa:	4861      	ldr	r0, [pc, #388]	; (8009380 <main+0x608>)
 80091fc:	f7fb fdc6 	bl	8004d8c <TaskOnScreen>

			TaskBigScreen(ScreenTab, TabAlert, TabGen, TabFloatValue, TabTimer, TabAlertAll, WifiName);
 8009200:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009204:	4b6c      	ldr	r3, [pc, #432]	; (80093b8 <main+0x640>)
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	4b70      	ldr	r3, [pc, #448]	; (80093cc <main+0x654>)
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	4b68      	ldr	r3, [pc, #416]	; (80093b0 <main+0x638>)
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4b6a      	ldr	r3, [pc, #424]	; (80093bc <main+0x644>)
 8009212:	4a5b      	ldr	r2, [pc, #364]	; (8009380 <main+0x608>)
 8009214:	496a      	ldr	r1, [pc, #424]	; (80093c0 <main+0x648>)
 8009216:	f7fb f819 	bl	800424c <TaskBigScreen>

			TaskUpdateUpperLed(updateLedTab, TabGen);
 800921a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800921e:	4958      	ldr	r1, [pc, #352]	; (8009380 <main+0x608>)
 8009220:	4618      	mov	r0, r3
 8009222:	f7fb f8bb 	bl	800439c <TaskUpdateUpperLed>

			TaskLedBlinking(upperLedTab, TabGen);
 8009226:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800922a:	4955      	ldr	r1, [pc, #340]	; (8009380 <main+0x608>)
 800922c:	4618      	mov	r0, r3
 800922e:	f7fb f871 	bl	8004314 <TaskLedBlinking>



			if (TabGen[CHARGEC] == 0)
 8009232:	4b53      	ldr	r3, [pc, #332]	; (8009380 <main+0x608>)
 8009234:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009238:	2b00      	cmp	r3, #0
 800923a:	d105      	bne.n	8009248 <main+0x4d0>
				TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 800923c:	4b5f      	ldr	r3, [pc, #380]	; (80093bc <main+0x644>)
 800923e:	4a63      	ldr	r2, [pc, #396]	; (80093cc <main+0x654>)
 8009240:	494f      	ldr	r1, [pc, #316]	; (8009380 <main+0x608>)
 8009242:	485f      	ldr	r0, [pc, #380]	; (80093c0 <main+0x648>)
 8009244:	f7fb fb86 	bl	8004954 <TaskAlertAll>
		}

		Battery_Charger_Management();
 8009248:	f7fc fe58 	bl	8005efc <Battery_Charger_Management>


		// EVERY 100 HZ
		if (Flag[F_100HZ] == 1)
 800924c:	4b60      	ldr	r3, [pc, #384]	; (80093d0 <main+0x658>)
 800924e:	78db      	ldrb	r3, [r3, #3]
 8009250:	b2db      	uxtb	r3, r3
 8009252:	2b01      	cmp	r3, #1
 8009254:	d122      	bne.n	800929c <main+0x524>
		{

			Flag[F_100HZ] = 0;
 8009256:	4b5e      	ldr	r3, [pc, #376]	; (80093d0 <main+0x658>)
 8009258:	2200      	movs	r2, #0
 800925a:	70da      	strb	r2, [r3, #3]

			if (TabGen[ALERT_ON] == 0)
 800925c:	4b48      	ldr	r3, [pc, #288]	; (8009380 <main+0x608>)
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d11b      	bne.n	800929c <main+0x524>
			{
				if (TabGen[LOCK_I2C1] == 0)  // check I2C1 is available
 8009264:	4b46      	ldr	r3, [pc, #280]	; (8009380 <main+0x608>)
 8009266:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800926a:	2b00      	cmp	r3, #0
 800926c:	d116      	bne.n	800929c <main+0x524>
				{
					Measure_IMU(buffer6); // read 6x register of IMU
 800926e:	4859      	ldr	r0, [pc, #356]	; (80093d4 <main+0x65c>)
 8009270:	f7fa fb08 	bl	8003884 <Measure_IMU>

					TaskAlertAcc(accy, accres, TabAlert, TabGen); // check Alert for Malaise and Immo
 8009274:	4b58      	ldr	r3, [pc, #352]	; (80093d8 <main+0x660>)
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	b2d8      	uxtb	r0, r3
 800927a:	4b58      	ldr	r3, [pc, #352]	; (80093dc <main+0x664>)
 800927c:	8819      	ldrh	r1, [r3, #0]
 800927e:	4b40      	ldr	r3, [pc, #256]	; (8009380 <main+0x608>)
 8009280:	4a4f      	ldr	r2, [pc, #316]	; (80093c0 <main+0x648>)
 8009282:	f7f9 feaa 	bl	8002fda <TaskAlertAcc>

					TaskFallManager(ar, y, accres, accy, TabGen);
 8009286:	4b55      	ldr	r3, [pc, #340]	; (80093dc <main+0x664>)
 8009288:	881a      	ldrh	r2, [r3, #0]
 800928a:	4b53      	ldr	r3, [pc, #332]	; (80093d8 <main+0x660>)
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	b2db      	uxtb	r3, r3
 8009290:	493b      	ldr	r1, [pc, #236]	; (8009380 <main+0x608>)
 8009292:	9100      	str	r1, [sp, #0]
 8009294:	4952      	ldr	r1, [pc, #328]	; (80093e0 <main+0x668>)
 8009296:	4853      	ldr	r0, [pc, #332]	; (80093e4 <main+0x66c>)
 8009298:	f7fc fa76 	bl	8005788 <TaskFallManager>
			Repeater_Link_Management();
		}

		if (DMA_GPS_ON == 1 && GPSOK == 1)
		{
			uint8_t buffer[MAXITGPS] =
 800929c:	1d3b      	adds	r3, r7, #4
 800929e:	2200      	movs	r2, #0
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	3304      	adds	r3, #4
 80092a4:	2260      	movs	r2, #96	; 0x60
 80092a6:	2100      	movs	r1, #0
 80092a8:	4618      	mov	r0, r3
 80092aa:	f00e fb4f 	bl	801794c <memset>
			{ 0 };
			if (Time_Now % 1000 == 0 && once_gps == 1)
 80092ae:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80092b2:	4b44      	ldr	r3, [pc, #272]	; (80093c4 <main+0x64c>)
 80092b4:	fba3 1302 	umull	r1, r3, r3, r2
 80092b8:	099b      	lsrs	r3, r3, #6
 80092ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80092be:	fb01 f303 	mul.w	r3, r1, r3
 80092c2:	1ad3      	subs	r3, r2, r3
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f040 80d5 	bne.w	8009474 <main+0x6fc>
 80092ca:	4b47      	ldr	r3, [pc, #284]	; (80093e8 <main+0x670>)
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	f040 80d0 	bne.w	8009474 <main+0x6fc>
			{
				once_gps = 0;
 80092d4:	4b44      	ldr	r3, [pc, #272]	; (80093e8 <main+0x670>)
 80092d6:	2200      	movs	r2, #0
 80092d8:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 80092da:	2300      	movs	r3, #0
 80092dc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for (uint8_t y = 0; y < MAXITGPS; y++)
 80092e0:	2300      	movs	r3, #0
 80092e2:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80092e6:	e00c      	b.n	8009302 <main+0x58a>
				{
					buffer[y] = Rx_datagps[y];
 80092e8:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80092ec:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80092f0:	4929      	ldr	r1, [pc, #164]	; (8009398 <main+0x620>)
 80092f2:	5c89      	ldrb	r1, [r1, r2]
 80092f4:	1d3a      	adds	r2, r7, #4
 80092f6:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 80092f8:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80092fc:	3301      	adds	r3, #1
 80092fe:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 8009302:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8009306:	2b63      	cmp	r3, #99	; 0x63
 8009308:	d9ee      	bls.n	80092e8 <main+0x570>
				}

				while (i < MAXITGPS)
 800930a:	e090      	b.n	800942e <main+0x6b6>
				{
					if (buffer[i] == '$')
 800930c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009310:	1d3a      	adds	r2, r7, #4
 8009312:	5cd3      	ldrb	r3, [r2, r3]
 8009314:	2b24      	cmp	r3, #36	; 0x24
 8009316:	f040 8085 	bne.w	8009424 <main+0x6ac>
					{
						uint8_t y = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
						Rx_Buffergps[y++] = buffer[i++];
 8009320:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
 800932a:	4619      	mov	r1, r3
 800932c:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009330:	1c5a      	adds	r2, r3, #1
 8009332:	f887 21af 	strb.w	r2, [r7, #431]	; 0x1af
 8009336:	461a      	mov	r2, r3
 8009338:	1d3b      	adds	r3, r7, #4
 800933a:	5c59      	ldrb	r1, [r3, r1]
 800933c:	4b2b      	ldr	r3, [pc, #172]	; (80093ec <main+0x674>)
 800933e:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITGPS; y++)
 8009340:	e06c      	b.n	800941c <main+0x6a4>
						{
							if (buffer[i] != '\r')
 8009342:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009346:	1d3a      	adds	r2, r7, #4
 8009348:	5cd3      	ldrb	r3, [r2, r3]
 800934a:	2b0d      	cmp	r3, #13
 800934c:	d05d      	beq.n	800940a <main+0x692>
							{
								if (i == MAXITGPS && y < MAXITGPS)
 800934e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009352:	2b64      	cmp	r3, #100	; 0x64
 8009354:	d106      	bne.n	8009364 <main+0x5ec>
 8009356:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800935a:	2b63      	cmp	r3, #99	; 0x63
 800935c:	d802      	bhi.n	8009364 <main+0x5ec>
									i = 0; // wrapping the circular buffer
 800935e:	2300      	movs	r3, #0
 8009360:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae

								Rx_Buffergps[y] = buffer[i++];
 8009364:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009368:	1c5a      	adds	r2, r3, #1
 800936a:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
 800936e:	4619      	mov	r1, r3
 8009370:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009374:	1d3a      	adds	r2, r7, #4
 8009376:	5c51      	ldrb	r1, [r2, r1]
 8009378:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <main+0x674>)
 800937a:	54d1      	strb	r1, [r2, r3]
 800937c:	e049      	b.n	8009412 <main+0x69a>
 800937e:	bf00      	nop
 8009380:	20002550 	.word	0x20002550
 8009384:	2000332c 	.word	0x2000332c
 8009388:	20000b59 	.word	0x20000b59
 800938c:	20000b69 	.word	0x20000b69
 8009390:	20000b68 	.word	0x20000b68
 8009394:	20000774 	.word	0x20000774
 8009398:	20001edc 	.word	0x20001edc
 800939c:	2000348c 	.word	0x2000348c
 80093a0:	20001e14 	.word	0x20001e14
 80093a4:	20003510 	.word	0x20003510
 80093a8:	20000b5c 	.word	0x20000b5c
 80093ac:	20001df8 	.word	0x20001df8
 80093b0:	20002878 	.word	0x20002878
 80093b4:	000dbb9f 	.word	0x000dbb9f
 80093b8:	20002bc4 	.word	0x20002bc4
 80093bc:	20002be4 	.word	0x20002be4
 80093c0:	20003100 	.word	0x20003100
 80093c4:	10624dd3 	.word	0x10624dd3
 80093c8:	51eb851f 	.word	0x51eb851f
 80093cc:	20001f50 	.word	0x20001f50
 80093d0:	20002c40 	.word	0x20002c40
 80093d4:	20003138 	.word	0x20003138
 80093d8:	200026c0 	.word	0x200026c0
 80093dc:	2000254c 	.word	0x2000254c
 80093e0:	2000209c 	.word	0x2000209c
 80093e4:	20002c44 	.word	0x20002c44
 80093e8:	20000779 	.word	0x20000779
 80093ec:	20001f5c 	.word	0x20001f5c
							}
							else
							{
								for (y; y < MAXITGPS; y++)
								{
									Rx_Buffergps[y] = 0;
 80093f0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80093f4:	4ab6      	ldr	r2, [pc, #728]	; (80096d0 <main+0x958>)
 80093f6:	2100      	movs	r1, #0
 80093f8:	54d1      	strb	r1, [r2, r3]
									i = MAXITGPS;
 80093fa:	2364      	movs	r3, #100	; 0x64
 80093fc:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
								for (y; y < MAXITGPS; y++)
 8009400:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009404:	3301      	adds	r3, #1
 8009406:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800940a:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 800940e:	2b63      	cmp	r3, #99	; 0x63
 8009410:	d9ee      	bls.n	80093f0 <main+0x678>
						for (y; y < MAXITGPS; y++)
 8009412:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009416:	3301      	adds	r3, #1
 8009418:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 800941c:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009420:	2b63      	cmp	r3, #99	; 0x63
 8009422:	d98e      	bls.n	8009342 <main+0x5ca>
								}
							}
						}
					}
					i++;
 8009424:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009428:	3301      	adds	r3, #1
 800942a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				while (i < MAXITGPS)
 800942e:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009432:	2b63      	cmp	r3, #99	; 0x63
 8009434:	f67f af6a 	bls.w	800930c <main+0x594>
				}
				TaskGPS(Rx_Buffergps, TabGen, TabTimer, TabFloatValue);
 8009438:	4ba6      	ldr	r3, [pc, #664]	; (80096d4 <main+0x95c>)
 800943a:	4aa7      	ldr	r2, [pc, #668]	; (80096d8 <main+0x960>)
 800943c:	49a7      	ldr	r1, [pc, #668]	; (80096dc <main+0x964>)
 800943e:	48a4      	ldr	r0, [pc, #656]	; (80096d0 <main+0x958>)
 8009440:	f7fb fcde 	bl	8004e00 <TaskGPS>

				for (uint8_t y = 0; y < MAXITGPS; y++)
 8009444:	2300      	movs	r3, #0
 8009446:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 800944a:	e00e      	b.n	800946a <main+0x6f2>
				{
					Rx_datagps[y] = 0;
 800944c:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009450:	4aa3      	ldr	r2, [pc, #652]	; (80096e0 <main+0x968>)
 8009452:	2100      	movs	r1, #0
 8009454:	54d1      	strb	r1, [r2, r3]
					Rx_Buffergps[y] = 0;
 8009456:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 800945a:	4a9d      	ldr	r2, [pc, #628]	; (80096d0 <main+0x958>)
 800945c:	2100      	movs	r1, #0
 800945e:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 8009460:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009464:	3301      	adds	r3, #1
 8009466:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 800946a:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 800946e:	2b63      	cmp	r3, #99	; 0x63
 8009470:	d9ec      	bls.n	800944c <main+0x6d4>
			{
 8009472:	e002      	b.n	800947a <main+0x702>
				}
			}
			else
				once_gps = 1;
 8009474:	4b9b      	ldr	r3, [pc, #620]	; (80096e4 <main+0x96c>)
 8009476:	2201      	movs	r2, #1
 8009478:	701a      	strb	r2, [r3, #0]
		}

		if (DMA_NEMEUS_ON == 1)
		{
			uint8_t save_pos_start = MAXITNEMEUS;
 800947a:	23c8      	movs	r3, #200	; 0xc8
 800947c:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
			uint8_t save_pos_end = MAXITNEMEUS;
 8009480:	23c8      	movs	r3, #200	; 0xc8
 8009482:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
			uint8_t copy = 0;
 8009486:	2300      	movs	r3, #0
 8009488:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3

			if (Time_Now % 1000 == 0 && once_nem == 1)
 800948c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8009490:	4b95      	ldr	r3, [pc, #596]	; (80096e8 <main+0x970>)
 8009492:	fba3 1302 	umull	r1, r3, r3, r2
 8009496:	099b      	lsrs	r3, r3, #6
 8009498:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800949c:	fb01 f303 	mul.w	r3, r1, r3
 80094a0:	1ad3      	subs	r3, r2, r3
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	f040 8177 	bne.w	8009796 <main+0xa1e>
 80094a8:	4b90      	ldr	r3, [pc, #576]	; (80096ec <main+0x974>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	f040 8172 	bne.w	8009796 <main+0xa1e>
			{
				once_nem = 0;
 80094b2:	4b8e      	ldr	r3, [pc, #568]	; (80096ec <main+0x974>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 80094b8:	2300      	movs	r3, #0
 80094ba:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
				uint8_t buffer[MAXITNEMEUS] =
 80094be:	1d3b      	adds	r3, r7, #4
 80094c0:	2200      	movs	r2, #0
 80094c2:	601a      	str	r2, [r3, #0]
 80094c4:	3304      	adds	r3, #4
 80094c6:	22c4      	movs	r2, #196	; 0xc4
 80094c8:	2100      	movs	r1, #0
 80094ca:	4618      	mov	r0, r3
 80094cc:	f00e fa3e 	bl	801794c <memset>
				{ 0 };
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 80094d0:	2300      	movs	r3, #0
 80094d2:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 80094d6:	e00c      	b.n	80094f2 <main+0x77a>
				{
					buffer[y] = Rx_Nemeus[y];
 80094d8:	f897 21b4 	ldrb.w	r2, [r7, #436]	; 0x1b4
 80094dc:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094e0:	4983      	ldr	r1, [pc, #524]	; (80096f0 <main+0x978>)
 80094e2:	5c89      	ldrb	r1, [r1, r2]
 80094e4:	1d3a      	adds	r2, r7, #4
 80094e6:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 80094e8:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094ec:	3301      	adds	r3, #1
 80094ee:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 80094f2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094f6:	2bc7      	cmp	r3, #199	; 0xc7
 80094f8:	d9ee      	bls.n	80094d8 <main+0x760>
				}

				while (i < MAXITNEMEUS)
 80094fa:	e123      	b.n	8009744 <main+0x9cc>
				{
					if (buffer[i] == '+')
 80094fc:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009500:	1d3a      	adds	r2, r7, #4
 8009502:	5cd3      	ldrb	r3, [r2, r3]
 8009504:	2b2b      	cmp	r3, #43	; 0x2b
 8009506:	d159      	bne.n	80095bc <main+0x844>
					{
						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'M'))
 8009508:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800950c:	2bc6      	cmp	r3, #198	; 0xc6
 800950e:	d806      	bhi.n	800951e <main+0x7a6>
 8009510:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009514:	3301      	adds	r3, #1
 8009516:	1d3a      	adds	r2, r7, #4
 8009518:	5cd3      	ldrb	r3, [r2, r3]
 800951a:	2b4d      	cmp	r3, #77	; 0x4d
 800951c:	d007      	beq.n	800952e <main+0x7b6>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'M')))
 800951e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009522:	2bc7      	cmp	r3, #199	; 0xc7
 8009524:	d120      	bne.n	8009568 <main+0x7f0>
 8009526:	1d3b      	adds	r3, r7, #4
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	2b4d      	cmp	r3, #77	; 0x4d
 800952c:	d11c      	bne.n	8009568 <main+0x7f0>
						{
							if (buffer[i + 6] == 'R' || buffer[i + 14] == ','
 800952e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009532:	3306      	adds	r3, #6
 8009534:	1d3a      	adds	r2, r7, #4
 8009536:	5cd3      	ldrb	r3, [r2, r3]
 8009538:	2b52      	cmp	r3, #82	; 0x52
 800953a:	d00a      	beq.n	8009552 <main+0x7da>
 800953c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009540:	330e      	adds	r3, #14
 8009542:	1d3a      	adds	r2, r7, #4
 8009544:	5cd3      	ldrb	r3, [r2, r3]
 8009546:	2b2c      	cmp	r3, #44	; 0x2c
 8009548:	d003      	beq.n	8009552 <main+0x7da>
									|| GA_Nem == 1)
 800954a:	4b6a      	ldr	r3, [pc, #424]	; (80096f4 <main+0x97c>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d10a      	bne.n	8009568 <main+0x7f0>
							{
								copy = 1;
 8009552:	2301      	movs	r3, #1
 8009554:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
								if (GA_Nem != 0)
 8009558:	4b66      	ldr	r3, [pc, #408]	; (80096f4 <main+0x97c>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d003      	beq.n	8009568 <main+0x7f0>
									save_pos_start = i;
 8009560:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009564:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'G'))
 8009568:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800956c:	2bc6      	cmp	r3, #198	; 0xc6
 800956e:	d806      	bhi.n	800957e <main+0x806>
 8009570:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009574:	3301      	adds	r3, #1
 8009576:	1d3a      	adds	r2, r7, #4
 8009578:	5cd3      	ldrb	r3, [r2, r3]
 800957a:	2b47      	cmp	r3, #71	; 0x47
 800957c:	d007      	beq.n	800958e <main+0x816>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'G')))
 800957e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009582:	2bc7      	cmp	r3, #199	; 0xc7
 8009584:	d11a      	bne.n	80095bc <main+0x844>
 8009586:	1d3b      	adds	r3, r7, #4
 8009588:	781b      	ldrb	r3, [r3, #0]
 800958a:	2b47      	cmp	r3, #71	; 0x47
 800958c:	d116      	bne.n	80095bc <main+0x844>
						{
							GA_Nem = 1;
 800958e:	4b59      	ldr	r3, [pc, #356]	; (80096f4 <main+0x97c>)
 8009590:	2201      	movs	r2, #1
 8009592:	701a      	strb	r2, [r3, #0]
							save_pos_start = i;
 8009594:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009598:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
							if (i + 16 < 100 && buffer[i + 16] == '\r')
 800959c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095a0:	2b53      	cmp	r3, #83	; 0x53
 80095a2:	d80b      	bhi.n	80095bc <main+0x844>
 80095a4:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095a8:	3310      	adds	r3, #16
 80095aa:	1d3a      	adds	r2, r7, #4
 80095ac:	5cd3      	ldrb	r3, [r2, r3]
 80095ae:	2b0d      	cmp	r3, #13
 80095b0:	d104      	bne.n	80095bc <main+0x844>
							{
								save_pos_end = i + 16;
 80095b2:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095b6:	3310      	adds	r3, #16
 80095b8:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
							}
						}
					}
					if (buffer[i] == 'R')
 80095bc:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095c0:	1d3a      	adds	r2, r7, #4
 80095c2:	5cd3      	ldrb	r3, [r2, r3]
 80095c4:	2b52      	cmp	r3, #82	; 0x52
 80095c6:	d148      	bne.n	800965a <main+0x8e2>
					{
						if (buffer[i + 1] == 'R' || buffer[i - 1] == 'E')
 80095c8:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095cc:	3301      	adds	r3, #1
 80095ce:	1d3a      	adds	r2, r7, #4
 80095d0:	5cd3      	ldrb	r3, [r2, r3]
 80095d2:	2b52      	cmp	r3, #82	; 0x52
 80095d4:	d006      	beq.n	80095e4 <main+0x86c>
 80095d6:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095da:	3b01      	subs	r3, #1
 80095dc:	1d3a      	adds	r2, r7, #4
 80095de:	5cd3      	ldrb	r3, [r2, r3]
 80095e0:	2b45      	cmp	r3, #69	; 0x45
 80095e2:	d11b      	bne.n	800961c <main+0x8a4>
						{
							if (buffer[i - 11] == 'S' && buffer[i - 10] == 'F')
 80095e4:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095e8:	3b0b      	subs	r3, #11
 80095ea:	1d3a      	adds	r2, r7, #4
 80095ec:	5cd3      	ldrb	r3, [r2, r3]
 80095ee:	2b53      	cmp	r3, #83	; 0x53
 80095f0:	d114      	bne.n	800961c <main+0x8a4>
 80095f2:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80095f6:	3b0a      	subs	r3, #10
 80095f8:	1d3a      	adds	r2, r7, #4
 80095fa:	5cd3      	ldrb	r3, [r2, r3]
 80095fc:	2b46      	cmp	r3, #70	; 0x46
 80095fe:	d10d      	bne.n	800961c <main+0x8a4>
							{
								//ERROR: End of SF Reception windows
								copy = 2;
 8009600:	2302      	movs	r3, #2
 8009602:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
								save_pos_start = i;
 8009606:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800960a:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
								if (DUAL_STATE_LS == ACK_SF_PENDING)
 800960e:	4b3a      	ldr	r3, [pc, #232]	; (80096f8 <main+0x980>)
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	2b04      	cmp	r3, #4
 8009614:	d102      	bne.n	800961c <main+0x8a4>
									DUAL_STATE_LS = NO_ACK_SF_RETRY;
 8009616:	4b38      	ldr	r3, [pc, #224]	; (80096f8 <main+0x980>)
 8009618:	2205      	movs	r2, #5
 800961a:	701a      	strb	r2, [r3, #0]

							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'C'))
 800961c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009620:	2bc6      	cmp	r3, #198	; 0xc6
 8009622:	d806      	bhi.n	8009632 <main+0x8ba>
 8009624:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009628:	3301      	adds	r3, #1
 800962a:	1d3a      	adds	r2, r7, #4
 800962c:	5cd3      	ldrb	r3, [r2, r3]
 800962e:	2b43      	cmp	r3, #67	; 0x43
 8009630:	d007      	beq.n	8009642 <main+0x8ca>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'C')))
 8009632:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009636:	2bc7      	cmp	r3, #199	; 0xc7
 8009638:	d10f      	bne.n	800965a <main+0x8e2>
 800963a:	1d3b      	adds	r3, r7, #4
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	2b43      	cmp	r3, #67	; 0x43
 8009640:	d10b      	bne.n	800965a <main+0x8e2>
						{
							copy = 1;
 8009642:	2301      	movs	r3, #1
 8009644:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
							i = i - 5;
 8009648:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800964c:	3b05      	subs	r3, #5
 800964e:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
							save_pos_start = i;
 8009652:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009656:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
						}
					}

					if (copy == 1)
 800965a:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800965e:	2b01      	cmp	r3, #1
 8009660:	d16b      	bne.n	800973a <main+0x9c2>
					{
						uint8_t y = 0;
 8009662:	2300      	movs	r3, #0
 8009664:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
						Rx_bufferNemeus[y++] = buffer[i++];
 8009668:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800966c:	1c5a      	adds	r2, r3, #1
 800966e:	f887 21b5 	strb.w	r2, [r7, #437]	; 0x1b5
 8009672:	4619      	mov	r1, r3
 8009674:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8009678:	1c5a      	adds	r2, r3, #1
 800967a:	f887 21b7 	strb.w	r2, [r7, #439]	; 0x1b7
 800967e:	461a      	mov	r2, r3
 8009680:	1d3b      	adds	r3, r7, #4
 8009682:	5c59      	ldrb	r1, [r3, r1]
 8009684:	4b1d      	ldr	r3, [pc, #116]	; (80096fc <main+0x984>)
 8009686:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITNEMEUS; y++)
 8009688:	e053      	b.n	8009732 <main+0x9ba>
						{
							if (buffer[i] != '\r')
 800968a:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800968e:	1d3a      	adds	r2, r7, #4
 8009690:	5cd3      	ldrb	r3, [r2, r3]
 8009692:	2b0d      	cmp	r3, #13
 8009694:	d017      	beq.n	80096c6 <main+0x94e>
							{
								if (i == MAXITNEMEUS && y < MAXITNEMEUS)
 8009696:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800969a:	2bc8      	cmp	r3, #200	; 0xc8
 800969c:	d106      	bne.n	80096ac <main+0x934>
 800969e:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80096a2:	2bc7      	cmp	r3, #199	; 0xc7
 80096a4:	d802      	bhi.n	80096ac <main+0x934>
									i = 0; // wrapping the circular buffer
 80096a6:	2300      	movs	r3, #0
 80096a8:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5

								Rx_bufferNemeus[y] = buffer[i++];
 80096ac:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	f887 21b5 	strb.w	r2, [r7, #437]	; 0x1b5
 80096b6:	4619      	mov	r1, r3
 80096b8:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 80096bc:	1d3a      	adds	r2, r7, #4
 80096be:	5c51      	ldrb	r1, [r2, r1]
 80096c0:	4a0e      	ldr	r2, [pc, #56]	; (80096fc <main+0x984>)
 80096c2:	54d1      	strb	r1, [r2, r3]
 80096c4:	e030      	b.n	8009728 <main+0x9b0>
							}
							else
							{
								save_pos_end = i;
 80096c6:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80096ca:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
								for (y; y < MAXITNEMEUS; y++)
 80096ce:	e021      	b.n	8009714 <main+0x99c>
 80096d0:	20001f5c 	.word	0x20001f5c
 80096d4:	20002be4 	.word	0x20002be4
 80096d8:	20002878 	.word	0x20002878
 80096dc:	20002550 	.word	0x20002550
 80096e0:	20001edc 	.word	0x20001edc
 80096e4:	20000779 	.word	0x20000779
 80096e8:	10624dd3 	.word	0x10624dd3
 80096ec:	2000077a 	.word	0x2000077a
 80096f0:	20001e14 	.word	0x20001e14
 80096f4:	20000b88 	.word	0x20000b88
 80096f8:	20000b7f 	.word	0x20000b7f
 80096fc:	200027b0 	.word	0x200027b0
								{
									Rx_bufferNemeus[y] = 0;
 8009700:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8009704:	4a27      	ldr	r2, [pc, #156]	; (80097a4 <main+0xa2c>)
 8009706:	2100      	movs	r1, #0
 8009708:	54d1      	strb	r1, [r2, r3]
								for (y; y < MAXITNEMEUS; y++)
 800970a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800970e:	3301      	adds	r3, #1
 8009710:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8009714:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8009718:	2bc7      	cmp	r3, #199	; 0xc7
 800971a:	d9f1      	bls.n	8009700 <main+0x988>
								}
								i = MAXITNEMEUS;
 800971c:	23c8      	movs	r3, #200	; 0xc8
 800971e:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
								y = MAXITNEMEUS;
 8009722:	23c8      	movs	r3, #200	; 0xc8
 8009724:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
						for (y; y < MAXITNEMEUS; y++)
 8009728:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800972c:	3301      	adds	r3, #1
 800972e:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8009732:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8009736:	2bc7      	cmp	r3, #199	; 0xc7
 8009738:	d9a7      	bls.n	800968a <main+0x912>
							}
						}
					}
					i++;
 800973a:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800973e:	3301      	adds	r3, #1
 8009740:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
				while (i < MAXITNEMEUS)
 8009744:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009748:	2bc7      	cmp	r3, #199	; 0xc7
 800974a:	f67f aed7 	bls.w	80094fc <main+0x784>
				}
				if (copy == 1)
 800974e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <main+0x9e2>
					Task_Read_Nemeus();
 8009756:	f7fc f947 	bl	80059e8 <Task_Read_Nemeus>

				if (copy == 1 || copy == 2)
 800975a:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800975e:	2b01      	cmp	r3, #1
 8009760:	d003      	beq.n	800976a <main+0x9f2>
 8009762:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009766:	2b02      	cmp	r3, #2
 8009768:	d119      	bne.n	800979e <main+0xa26>
				{
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 800976a:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 800976e:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8009772:	e009      	b.n	8009788 <main+0xa10>
					{
						Rx_Nemeus[y] = 0;
 8009774:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8009778:	4a0b      	ldr	r2, [pc, #44]	; (80097a8 <main+0xa30>)
 800977a:	2100      	movs	r1, #0
 800977c:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 800977e:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8009782:	3301      	adds	r3, #1
 8009784:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 8009788:	f897 21b6 	ldrb.w	r2, [r7, #438]	; 0x1b6
 800978c:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8009790:	429a      	cmp	r2, r3
 8009792:	d3ef      	bcc.n	8009774 <main+0x9fc>
			{
 8009794:	e003      	b.n	800979e <main+0xa26>
					}
				}
			}
			else
				once_nem = 1;
 8009796:	4b05      	ldr	r3, [pc, #20]	; (80097ac <main+0xa34>)
 8009798:	2201      	movs	r2, #1
 800979a:	701a      	strb	r2, [r3, #0]
 800979c:	e4d8      	b.n	8009150 <main+0x3d8>
			{
 800979e:	bf00      	nop
	{
 80097a0:	e4d6      	b.n	8009150 <main+0x3d8>
 80097a2:	bf00      	nop
 80097a4:	200027b0 	.word	0x200027b0
 80097a8:	20001e14 	.word	0x20001e14
 80097ac:	2000077a 	.word	0x2000077a

080097b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b0ae      	sub	sp, #184	; 0xb8
 80097b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80097b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80097ba:	2244      	movs	r2, #68	; 0x44
 80097bc:	2100      	movs	r1, #0
 80097be:	4618      	mov	r0, r3
 80097c0:	f00e f8c4 	bl	801794c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80097c4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80097c8:	2200      	movs	r2, #0
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	605a      	str	r2, [r3, #4]
 80097ce:	609a      	str	r2, [r3, #8]
 80097d0:	60da      	str	r2, [r3, #12]
 80097d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80097d4:	463b      	mov	r3, r7
 80097d6:	2260      	movs	r2, #96	; 0x60
 80097d8:	2100      	movs	r1, #0
 80097da:	4618      	mov	r0, r3
 80097dc:	f00e f8b6 	bl	801794c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80097e0:	f005 fb20 	bl	800ee24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80097e4:	4b3f      	ldr	r3, [pc, #252]	; (80098e4 <SystemClock_Config+0x134>)
 80097e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ea:	4a3e      	ldr	r2, [pc, #248]	; (80098e4 <SystemClock_Config+0x134>)
 80097ec:	f023 0318 	bic.w	r3, r3, #24
 80097f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80097f4:	233e      	movs	r3, #62	; 0x3e
 80097f6:	677b      	str	r3, [r7, #116]	; 0x74
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80097f8:	2301      	movs	r3, #1
 80097fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80097fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009800:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8009804:	2301      	movs	r3, #1
 8009806:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800980a:	2310      	movs	r3, #16
 800980c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009810:	2301      	movs	r3, #1
 8009812:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009816:	2301      	movs	r3, #1
 8009818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009822:	2360      	movs	r3, #96	; 0x60
 8009824:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8009828:	2300      	movs	r3, #0
 800982a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800982e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8009832:	4618      	mov	r0, r3
 8009834:	f005 fc12 	bl	800f05c <HAL_RCC_OscConfig>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800983e:	f000 f91b 	bl	8009a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009842:	230f      	movs	r3, #15
 8009844:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8009846:	2301      	movs	r3, #1
 8009848:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800984a:	2300      	movs	r3, #0
 800984c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 800984e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8009852:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV8;
 8009854:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009858:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800985a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800985e:	2100      	movs	r1, #0
 8009860:	4618      	mov	r0, r3
 8009862:	f006 f81b 	bl	800f89c <HAL_RCC_ClockConfig>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800986c:	f000 f904 	bl	8009a78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8009870:	f246 03c7 	movw	r3, #24775	; 0x60c7
 8009874:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_USB
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8009876:	2300      	movs	r3, #0
 8009878:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800987a:	2300      	movs	r3, #0
 800987c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800987e:	2300      	movs	r3, #0
 8009880:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009882:	2300      	movs	r3, #0
 8009884:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009886:	2300      	movs	r3, #0
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800988a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800988e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009890:	2300      	movs	r3, #0
 8009892:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8009894:	2301      	movs	r3, #1
 8009896:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8009898:	2301      	movs	r3, #1
 800989a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 800989c:	2310      	movs	r3, #16
 800989e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80098a0:	2307      	movs	r3, #7
 80098a2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV8;
 80098a4:	2308      	movs	r3, #8
 80098a6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV8;
 80098a8:	2308      	movs	r3, #8
 80098aa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80098ac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098b0:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80098b2:	463b      	mov	r3, r7
 80098b4:	4618      	mov	r0, r3
 80098b6:	f006 f9f7 	bl	800fca8 <HAL_RCCEx_PeriphCLKConfig>
 80098ba:	4603      	mov	r3, r0
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d001      	beq.n	80098c4 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80098c0:	f000 f8da 	bl	8009a78 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80098c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80098c8:	f005 faca 	bl	800ee60 <HAL_PWREx_ControlVoltageScaling>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80098d2:	f000 f8d1 	bl	8009a78 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80098d6:	f006 fc2d 	bl	8010134 <HAL_RCCEx_EnableMSIPLLMode>
}
 80098da:	bf00      	nop
 80098dc:	37b8      	adds	r7, #184	; 0xb8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	40021000 	.word	0x40021000

080098e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ISR function for Timer 7, every 10 ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim7.Instance)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4b25      	ldr	r3, [pc, #148]	; (800998c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d142      	bne.n	8009982 <HAL_TIM_PeriodElapsedCallback+0x9a>
	{

// loop control			
		if (count_tim7 < time_cnt)    // 1000 = 10 seconds,  100 = 1 second
 80098fc:	4b24      	ldr	r3, [pc, #144]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	4b24      	ldr	r3, [pc, #144]	; (8009994 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	429a      	cmp	r2, r3
 8009906:	d205      	bcs.n	8009914 <HAL_TIM_PeriodElapsedCallback+0x2c>
			count_tim7++;
 8009908:	4b21      	ldr	r3, [pc, #132]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	3301      	adds	r3, #1
 800990e:	4a20      	ldr	r2, [pc, #128]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8009910:	6013      	str	r3, [r2, #0]
 8009912:	e002      	b.n	800991a <HAL_TIM_PeriodElapsedCallback+0x32>
		else
			count_tim7 = 0;
 8009914:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8009916:	2200      	movs	r2, #0
 8009918:	601a      	str	r2, [r3, #0]

		if (count_tim7 % 10 == 2)
 800991a:	4b1d      	ldr	r3, [pc, #116]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800991c:	6819      	ldr	r1, [r3, #0]
 800991e:	4b1e      	ldr	r3, [pc, #120]	; (8009998 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8009920:	fba3 2301 	umull	r2, r3, r3, r1
 8009924:	08da      	lsrs	r2, r3, #3
 8009926:	4613      	mov	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	4413      	add	r3, r2
 800992c:	005b      	lsls	r3, r3, #1
 800992e:	1aca      	subs	r2, r1, r3
 8009930:	2a02      	cmp	r2, #2
 8009932:	d102      	bne.n	800993a <HAL_TIM_PeriodElapsedCallback+0x52>
			every_100ms = 1; // not used
 8009934:	4b19      	ldr	r3, [pc, #100]	; (800999c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8009936:	2201      	movs	r2, #1
 8009938:	801a      	strh	r2, [r3, #0]

		if (count_tim7 == 400)      // every 20 seconds, 0 second after startup
 800993a:	4b15      	ldr	r3, [pc, #84]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8009942:	d103      	bne.n	800994c <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if (BATTERYOK == 1)
				Flag[F_BATTERY] = 1;
 8009944:	4b16      	ldr	r3, [pc, #88]	; (80099a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009946:	2201      	movs	r2, #1
 8009948:	709a      	strb	r2, [r3, #2]
			TaskAlertManager(TabGen, &i_led);

			Flag[F_100HZ] = 1;
		}
	}
}
 800994a:	e01a      	b.n	8009982 <HAL_TIM_PeriodElapsedCallback+0x9a>
		else if (count_tim7 % 250 == +1) // every 20 seconds, 10 seconds after startup // 2
 800994c:	4b10      	ldr	r3, [pc, #64]	; (8009990 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	4b14      	ldr	r3, [pc, #80]	; (80099a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8009952:	fba3 1302 	umull	r1, r3, r3, r2
 8009956:	091b      	lsrs	r3, r3, #4
 8009958:	21fa      	movs	r1, #250	; 0xfa
 800995a:	fb01 f303 	mul.w	r3, r1, r3
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	2b01      	cmp	r3, #1
 8009962:	d103      	bne.n	800996c <HAL_TIM_PeriodElapsedCallback+0x84>
				Flag[F_CHARGER] = 1;
 8009964:	4b0e      	ldr	r3, [pc, #56]	; (80099a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009966:	2201      	movs	r2, #1
 8009968:	705a      	strb	r2, [r3, #1]
}
 800996a:	e00a      	b.n	8009982 <HAL_TIM_PeriodElapsedCallback+0x9a>
			TaskButtonManager(TabGen, TabAlert);
 800996c:	490e      	ldr	r1, [pc, #56]	; (80099a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800996e:	480f      	ldr	r0, [pc, #60]	; (80099ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009970:	f7fb fd6e 	bl	8005450 <TaskButtonManager>
			TaskAlertManager(TabGen, &i_led);
 8009974:	490e      	ldr	r1, [pc, #56]	; (80099b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8009976:	480d      	ldr	r0, [pc, #52]	; (80099ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009978:	f7fb fe34 	bl	80055e4 <TaskAlertManager>
			Flag[F_100HZ] = 1;
 800997c:	4b08      	ldr	r3, [pc, #32]	; (80099a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800997e:	2201      	movs	r2, #1
 8009980:	70da      	strb	r2, [r3, #3]
}
 8009982:	bf00      	nop
 8009984:	3708      	adds	r7, #8
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	2000332c 	.word	0x2000332c
 8009990:	20000b94 	.word	0x20000b94
 8009994:	2000077c 	.word	0x2000077c
 8009998:	cccccccd 	.word	0xcccccccd
 800999c:	20000b86 	.word	0x20000b86
 80099a0:	20002c40 	.word	0x20002c40
 80099a4:	10624dd3 	.word	0x10624dd3
 80099a8:	20003100 	.word	0x20003100
 80099ac:	20002550 	.word	0x20002550
 80099b0:	20000b8c 	.word	0x20000b8c

080099b4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{ // fonction d'interruption qui s'execute chaque 50 caract�re qui se mettent dans Rx_datagps[]
 80099b4:	b480      	push	{r7}
 80099b6:	b083      	sub	sp, #12
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
//TaskUARTMessage(TabGen, WifiName, TabDist, TabTimer, huart);
}
 80099bc:	bf00      	nop
 80099be:	370c      	adds	r7, #12
 80099c0:	46bd      	mov	sp, r7
 80099c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c6:	4770      	bx	lr

080099c8 <vibration_LBL>:

}

void vibration_LBL(uint8_t nb_de_vibration, unsigned short pause_vib,
		unsigned short duree_vib)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	4603      	mov	r3, r0
 80099d0:	71fb      	strb	r3, [r7, #7]
 80099d2:	460b      	mov	r3, r1
 80099d4:	80bb      	strh	r3, [r7, #4]
 80099d6:	4613      	mov	r3, r2
 80099d8:	807b      	strh	r3, [r7, #2]
	while (nb_de_vibration > 0)
 80099da:	e00a      	b.n	80099f2 <vibration_LBL+0x2a>
	{
		PowerVib(duree_vib);
 80099dc:	887b      	ldrh	r3, [r7, #2]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7f8 fec0 	bl	8002764 <PowerVib>
		HAL_Delay(pause_vib);
 80099e4:	88bb      	ldrh	r3, [r7, #4]
 80099e6:	4618      	mov	r0, r3
 80099e8:	f000 fd42 	bl	800a470 <HAL_Delay>
		nb_de_vibration--;
 80099ec:	79fb      	ldrb	r3, [r7, #7]
 80099ee:	3b01      	subs	r3, #1
 80099f0:	71fb      	strb	r3, [r7, #7]
	while (nb_de_vibration > 0)
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d1f1      	bne.n	80099dc <vibration_LBL+0x14>
	}
}
 80099f8:	bf00      	nop
 80099fa:	bf00      	nop
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <jumpToBootloader>:
typedef void (*pFunction)(void);
pFunction JumpToApplication;
uint32_t JumpAddress;

void jumpToBootloader(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0

	/* Test if user code is programmed starting from address 0x0800C000 */
	/*if(((*(__IO uint32_t*)DFU_BOOTLOADER_ADD) & 0x2FFE0000 ) == 0x20000000)*/
	/* Jump to user application */

	HAL_RCC_DeInit();
 8009a0a:	f005 fa8f 	bl	800ef2c <HAL_RCC_DeInit>

	SysTick->CTRL = 0;
 8009a0e:	4b15      	ldr	r3, [pc, #84]	; (8009a64 <jumpToBootloader+0x60>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 8009a14:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <jumpToBootloader+0x60>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8009a1a:	4b12      	ldr	r3, [pc, #72]	; (8009a64 <jumpToBootloader+0x60>)
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009a20:	b672      	cpsid	i
}
 8009a22:	bf00      	nop

	__disable_irq();

	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 8009a24:	4b10      	ldr	r3, [pc, #64]	; (8009a68 <jumpToBootloader+0x64>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f023 0307 	bic.w	r3, r3, #7
 8009a2c:	4a0e      	ldr	r2, [pc, #56]	; (8009a68 <jumpToBootloader+0x64>)
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	6013      	str	r3, [r2, #0]

	JumpAddress = *(__IO uint32_t*) (DFU_BOOTLOADER_ADD + 4);
 8009a34:	4b0d      	ldr	r3, [pc, #52]	; (8009a6c <jumpToBootloader+0x68>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a0d      	ldr	r2, [pc, #52]	; (8009a70 <jumpToBootloader+0x6c>)
 8009a3a:	6013      	str	r3, [r2, #0]
	JumpToApplication = (pFunction) JumpAddress;
 8009a3c:	4b0c      	ldr	r3, [pc, #48]	; (8009a70 <jumpToBootloader+0x6c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	461a      	mov	r2, r3
 8009a42:	4b0c      	ldr	r3, [pc, #48]	; (8009a74 <jumpToBootloader+0x70>)
 8009a44:	601a      	str	r2, [r3, #0]

	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t*) 0x08000000);
 8009a46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	f383 8808 	msr	MSP, r3
}
 8009a54:	bf00      	nop
	JumpToApplication();
 8009a56:	4b07      	ldr	r3, [pc, #28]	; (8009a74 <jumpToBootloader+0x70>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4798      	blx	r3
}
 8009a5c:	bf00      	nop
 8009a5e:	3708      	adds	r7, #8
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	e000e010 	.word	0xe000e010
 8009a68:	40010000 	.word	0x40010000
 8009a6c:	1fff0004 	.word	0x1fff0004
 8009a70:	20001e10 	.word	0x20001e10
 8009a74:	200026bc 	.word	0x200026bc

08009a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009a7c:	bf00      	nop
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <HAL_MspInit+0x44>)
 8009a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a92:	4a0e      	ldr	r2, [pc, #56]	; (8009acc <HAL_MspInit+0x44>)
 8009a94:	f043 0301 	orr.w	r3, r3, #1
 8009a98:	6613      	str	r3, [r2, #96]	; 0x60
 8009a9a:	4b0c      	ldr	r3, [pc, #48]	; (8009acc <HAL_MspInit+0x44>)
 8009a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a9e:	f003 0301 	and.w	r3, r3, #1
 8009aa2:	607b      	str	r3, [r7, #4]
 8009aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009aa6:	4b09      	ldr	r3, [pc, #36]	; (8009acc <HAL_MspInit+0x44>)
 8009aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aaa:	4a08      	ldr	r2, [pc, #32]	; (8009acc <HAL_MspInit+0x44>)
 8009aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8009ab2:	4b06      	ldr	r3, [pc, #24]	; (8009acc <HAL_MspInit+0x44>)
 8009ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aba:	603b      	str	r3, [r7, #0]
 8009abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009abe:	bf00      	nop
 8009ac0:	370c      	adds	r7, #12
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	40021000 	.word	0x40021000

08009ad0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009ad4:	bf00      	nop
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009ae2:	e7fe      	b.n	8009ae2 <HardFault_Handler+0x4>

08009ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009ae8:	e7fe      	b.n	8009ae8 <MemManage_Handler+0x4>

08009aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009aea:	b480      	push	{r7}
 8009aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009aee:	e7fe      	b.n	8009aee <BusFault_Handler+0x4>

08009af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009af0:	b480      	push	{r7}
 8009af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009af4:	e7fe      	b.n	8009af4 <UsageFault_Handler+0x4>

08009af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009af6:	b480      	push	{r7}
 8009af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8009afa:	bf00      	nop
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr

08009b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009b04:	b480      	push	{r7}
 8009b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009b08:	bf00      	nop
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009b12:	b480      	push	{r7}
 8009b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009b16:	bf00      	nop
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009b24:	f000 fc84 	bl	800a430 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009b28:	bf00      	nop
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8009b30:	4802      	ldr	r0, [pc, #8]	; (8009b3c <DMA1_Channel3_IRQHandler+0x10>)
 8009b32:	f002 f958 	bl	800bde6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8009b36:	bf00      	nop
 8009b38:	bd80      	pop	{r7, pc}
 8009b3a:	bf00      	nop
 8009b3c:	200033c0 	.word	0x200033c0

08009b40 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8009b44:	4802      	ldr	r0, [pc, #8]	; (8009b50 <DMA1_Channel5_IRQHandler+0x10>)
 8009b46:	f002 f94e 	bl	800bde6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8009b4a:	bf00      	nop
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20003378 	.word	0x20003378

08009b54 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009b58:	4802      	ldr	r0, [pc, #8]	; (8009b64 <DMA1_Channel6_IRQHandler+0x10>)
 8009b5a:	f002 f944 	bl	800bde6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8009b5e:	bf00      	nop
 8009b60:	bd80      	pop	{r7, pc}
 8009b62:	bf00      	nop
 8009b64:	20003594 	.word	0x20003594

08009b68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8009b6c:	4802      	ldr	r0, [pc, #8]	; (8009b78 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8009b6e:	f006 fe57 	bl	8010820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009b72:	bf00      	nop
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200032e0 	.word	0x200032e0

08009b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009b80:	4802      	ldr	r0, [pc, #8]	; (8009b8c <USART1_IRQHandler+0x10>)
 8009b82:	f007 fe2b 	bl	80117dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009b86:	bf00      	nop
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20003408 	.word	0x20003408

08009b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009b94:	4802      	ldr	r0, [pc, #8]	; (8009ba0 <USART2_IRQHandler+0x10>)
 8009b96:	f007 fe21 	bl	80117dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009b9a:	bf00      	nop
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	2000348c 	.word	0x2000348c

08009ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009ba8:	4802      	ldr	r0, [pc, #8]	; (8009bb4 <USART3_IRQHandler+0x10>)
 8009baa:	f007 fe17 	bl	80117dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009bae:	bf00      	nop
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20003510 	.word	0x20003510

08009bb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009bbc:	4802      	ldr	r0, [pc, #8]	; (8009bc8 <TIM7_IRQHandler+0x10>)
 8009bbe:	f006 fe2f 	bl	8010820 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009bc2:	bf00      	nop
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2000332c 	.word	0x2000332c

08009bcc <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009bd0:	4802      	ldr	r0, [pc, #8]	; (8009bdc <USB_IRQHandler+0x10>)
 8009bd2:	f003 fd8c 	bl	800d6ee <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8009bd6:	bf00      	nop
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20003ab0 	.word	0x20003ab0

08009be0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8009be0:	b480      	push	{r7}
 8009be2:	af00      	add	r7, sp, #0
	return 1;
 8009be4:	2301      	movs	r3, #1
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr

08009bf0 <_kill>:

int _kill(int pid, int sig)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
 8009bf8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8009bfa:	f00d fe6f 	bl	80178dc <__errno>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	2216      	movs	r2, #22
 8009c02:	601a      	str	r2, [r3, #0]
	return -1;
 8009c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3708      	adds	r7, #8
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <_exit>:

void _exit (int status)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b082      	sub	sp, #8
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8009c18:	f04f 31ff 	mov.w	r1, #4294967295
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f7ff ffe7 	bl	8009bf0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8009c22:	e7fe      	b.n	8009c22 <_exit+0x12>

08009c24 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b086      	sub	sp, #24
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
 8009c34:	e00a      	b.n	8009c4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009c36:	f3af 8000 	nop.w
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	1c5a      	adds	r2, r3, #1
 8009c40:	60ba      	str	r2, [r7, #8]
 8009c42:	b2ca      	uxtb	r2, r1
 8009c44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	617b      	str	r3, [r7, #20]
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	dbf0      	blt.n	8009c36 <_read+0x12>
	}

return len;
 8009c54:	687b      	ldr	r3, [r7, #4]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009c5e:	b580      	push	{r7, lr}
 8009c60:	b086      	sub	sp, #24
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	60f8      	str	r0, [r7, #12]
 8009c66:	60b9      	str	r1, [r7, #8]
 8009c68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	617b      	str	r3, [r7, #20]
 8009c6e:	e009      	b.n	8009c84 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	60ba      	str	r2, [r7, #8]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009c7e:	697b      	ldr	r3, [r7, #20]
 8009c80:	3301      	adds	r3, #1
 8009c82:	617b      	str	r3, [r7, #20]
 8009c84:	697a      	ldr	r2, [r7, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	dbf1      	blt.n	8009c70 <_write+0x12>
	}
	return len;
 8009c8c:	687b      	ldr	r3, [r7, #4]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3718      	adds	r7, #24
 8009c92:	46bd      	mov	sp, r7
 8009c94:	bd80      	pop	{r7, pc}

08009c96 <_close>:

int _close(int file)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
	return -1;
 8009c9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	370c      	adds	r7, #12
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b083      	sub	sp, #12
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009cbe:	605a      	str	r2, [r3, #4]
	return 0;
 8009cc0:	2300      	movs	r3, #0
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	370c      	adds	r7, #12
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr

08009cce <_isatty>:

int _isatty(int file)
{
 8009cce:	b480      	push	{r7}
 8009cd0:	b083      	sub	sp, #12
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
	return 1;
 8009cd6:	2301      	movs	r3, #1
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	370c      	adds	r7, #12
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce2:	4770      	bx	lr

08009ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
	return 0;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
	...

08009d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009d08:	4a14      	ldr	r2, [pc, #80]	; (8009d5c <_sbrk+0x5c>)
 8009d0a:	4b15      	ldr	r3, [pc, #84]	; (8009d60 <_sbrk+0x60>)
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009d10:	697b      	ldr	r3, [r7, #20]
 8009d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009d14:	4b13      	ldr	r3, [pc, #76]	; (8009d64 <_sbrk+0x64>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d102      	bne.n	8009d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009d1c:	4b11      	ldr	r3, [pc, #68]	; (8009d64 <_sbrk+0x64>)
 8009d1e:	4a12      	ldr	r2, [pc, #72]	; (8009d68 <_sbrk+0x68>)
 8009d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009d22:	4b10      	ldr	r3, [pc, #64]	; (8009d64 <_sbrk+0x64>)
 8009d24:	681a      	ldr	r2, [r3, #0]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	4413      	add	r3, r2
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d207      	bcs.n	8009d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009d30:	f00d fdd4 	bl	80178dc <__errno>
 8009d34:	4603      	mov	r3, r0
 8009d36:	220c      	movs	r2, #12
 8009d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8009d3e:	e009      	b.n	8009d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009d40:	4b08      	ldr	r3, [pc, #32]	; (8009d64 <_sbrk+0x64>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009d46:	4b07      	ldr	r3, [pc, #28]	; (8009d64 <_sbrk+0x64>)
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	4413      	add	r3, r2
 8009d4e:	4a05      	ldr	r2, [pc, #20]	; (8009d64 <_sbrk+0x64>)
 8009d50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009d52:	68fb      	ldr	r3, [r7, #12]
}
 8009d54:	4618      	mov	r0, r3
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}
 8009d5c:	20010000 	.word	0x20010000
 8009d60:	00000800 	.word	0x00000800
 8009d64:	20000ba0 	.word	0x20000ba0
 8009d68:	20003db8 	.word	0x20003db8

08009d6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009d70:	4b17      	ldr	r3, [pc, #92]	; (8009dd0 <SystemInit+0x64>)
 8009d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d76:	4a16      	ldr	r2, [pc, #88]	; (8009dd0 <SystemInit+0x64>)
 8009d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009d80:	4b14      	ldr	r3, [pc, #80]	; (8009dd4 <SystemInit+0x68>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	4a13      	ldr	r2, [pc, #76]	; (8009dd4 <SystemInit+0x68>)
 8009d86:	f043 0301 	orr.w	r3, r3, #1
 8009d8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009d8c:	4b11      	ldr	r3, [pc, #68]	; (8009dd4 <SystemInit+0x68>)
 8009d8e:	2200      	movs	r2, #0
 8009d90:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8009d92:	4b10      	ldr	r3, [pc, #64]	; (8009dd4 <SystemInit+0x68>)
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a0f      	ldr	r2, [pc, #60]	; (8009dd4 <SystemInit+0x68>)
 8009d98:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009d9c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009da0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009da2:	4b0c      	ldr	r3, [pc, #48]	; (8009dd4 <SystemInit+0x68>)
 8009da4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009da8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009daa:	4b0a      	ldr	r3, [pc, #40]	; (8009dd4 <SystemInit+0x68>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a09      	ldr	r2, [pc, #36]	; (8009dd4 <SystemInit+0x68>)
 8009db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009db4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009db6:	4b07      	ldr	r3, [pc, #28]	; (8009dd4 <SystemInit+0x68>)
 8009db8:	2200      	movs	r2, #0
 8009dba:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009dbc:	4b04      	ldr	r3, [pc, #16]	; (8009dd0 <SystemInit+0x64>)
 8009dbe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009dc2:	609a      	str	r2, [r3, #8]
#endif
}
 8009dc4:	bf00      	nop
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	e000ed00 	.word	0xe000ed00
 8009dd4:	40021000 	.word	0x40021000

08009dd8 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009dde:	1d3b      	adds	r3, r7, #4
 8009de0:	2200      	movs	r2, #0
 8009de2:	601a      	str	r2, [r3, #0]
 8009de4:	605a      	str	r2, [r3, #4]
 8009de6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009de8:	4b14      	ldr	r3, [pc, #80]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009dea:	4a15      	ldr	r2, [pc, #84]	; (8009e40 <MX_TIM7_Init+0x68>)
 8009dec:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 5-1;
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009df0:	2204      	movs	r2, #4
 8009df2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009df4:	4b11      	ldr	r3, [pc, #68]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 4000-1;
 8009dfa:	4b10      	ldr	r3, [pc, #64]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009dfc:	f640 729f 	movw	r2, #3999	; 0xf9f
 8009e00:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e02:	4b0e      	ldr	r3, [pc, #56]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009e04:	2200      	movs	r2, #0
 8009e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009e08:	480c      	ldr	r0, [pc, #48]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009e0a:	f006 fa95 	bl	8010338 <HAL_TIM_Base_Init>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009e14:	f7ff fe30 	bl	8009a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009e20:	1d3b      	adds	r3, r7, #4
 8009e22:	4619      	mov	r1, r3
 8009e24:	4805      	ldr	r0, [pc, #20]	; (8009e3c <MX_TIM7_Init+0x64>)
 8009e26:	f007 fa5b 	bl	80112e0 <HAL_TIMEx_MasterConfigSynchronization>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009e30:	f7ff fe22 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009e34:	bf00      	nop
 8009e36:	3710      	adds	r7, #16
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	2000332c 	.word	0x2000332c
 8009e40:	40001400 	.word	0x40001400

08009e44 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b092      	sub	sp, #72	; 0x48
 8009e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009e4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	605a      	str	r2, [r3, #4]
 8009e54:	609a      	str	r2, [r3, #8]
 8009e56:	60da      	str	r2, [r3, #12]
 8009e58:	611a      	str	r2, [r3, #16]
 8009e5a:	615a      	str	r2, [r3, #20]
 8009e5c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009e5e:	463b      	mov	r3, r7
 8009e60:	222c      	movs	r2, #44	; 0x2c
 8009e62:	2100      	movs	r1, #0
 8009e64:	4618      	mov	r0, r3
 8009e66:	f00d fd71 	bl	801794c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009e6a:	4b2f      	ldr	r3, [pc, #188]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e6c:	4a2f      	ldr	r2, [pc, #188]	; (8009f2c <MX_TIM16_Init+0xe8>)
 8009e6e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 100-1;
 8009e70:	4b2d      	ldr	r3, [pc, #180]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e72:	2263      	movs	r2, #99	; 0x63
 8009e74:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009e76:	4b2c      	ldr	r3, [pc, #176]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 8009e7c:	4b2a      	ldr	r3, [pc, #168]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e7e:	2209      	movs	r2, #9
 8009e80:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009e82:	4b29      	ldr	r3, [pc, #164]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009e88:	4b27      	ldr	r3, [pc, #156]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009e8e:	4b26      	ldr	r3, [pc, #152]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009e94:	4824      	ldr	r0, [pc, #144]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009e96:	f006 fa4f 	bl	8010338 <HAL_TIM_Base_Init>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8009ea0:	f7ff fdea 	bl	8009a78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8009ea4:	4820      	ldr	r0, [pc, #128]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009ea6:	f006 faf3 	bl	8010490 <HAL_TIM_PWM_Init>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d001      	beq.n	8009eb4 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8009eb0:	f7ff fde2 	bl	8009a78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009eb4:	2360      	movs	r3, #96	; 0x60
 8009eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 5;
 8009eb8:	2305      	movs	r3, #5
 8009eba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	4619      	mov	r1, r3
 8009ed8:	4813      	ldr	r0, [pc, #76]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009eda:	f006 fdc1 	bl	8010a60 <HAL_TIM_PWM_ConfigChannel>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d001      	beq.n	8009ee8 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8009ee4:	f7ff fdc8 	bl	8009a78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009ee8:	2300      	movs	r3, #0
 8009eea:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009eec:	2300      	movs	r3, #0
 8009eee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f00:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009f02:	2300      	movs	r3, #0
 8009f04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8009f06:	463b      	mov	r3, r7
 8009f08:	4619      	mov	r1, r3
 8009f0a:	4807      	ldr	r0, [pc, #28]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009f0c:	f007 fa4e 	bl	80113ac <HAL_TIMEx_ConfigBreakDeadTime>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d001      	beq.n	8009f1a <MX_TIM16_Init+0xd6>
  {
    Error_Handler();
 8009f16:	f7ff fdaf 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8009f1a:	4803      	ldr	r0, [pc, #12]	; (8009f28 <MX_TIM16_Init+0xe4>)
 8009f1c:	f000 f84a 	bl	8009fb4 <HAL_TIM_MspPostInit>

}
 8009f20:	bf00      	nop
 8009f22:	3748      	adds	r7, #72	; 0x48
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	200032e0 	.word	0x200032e0
 8009f2c:	40014400 	.word	0x40014400

08009f30 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a1a      	ldr	r2, [pc, #104]	; (8009fa8 <HAL_TIM_Base_MspInit+0x78>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d114      	bne.n	8009f6c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009f42:	4b1a      	ldr	r3, [pc, #104]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f46:	4a19      	ldr	r2, [pc, #100]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f48:	f043 0320 	orr.w	r3, r3, #32
 8009f4c:	6593      	str	r3, [r2, #88]	; 0x58
 8009f4e:	4b17      	ldr	r3, [pc, #92]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f52:	f003 0320 	and.w	r3, r3, #32
 8009f56:	60fb      	str	r3, [r7, #12]
 8009f58:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	2037      	movs	r0, #55	; 0x37
 8009f60:	f001 fd73 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009f64:	2037      	movs	r0, #55	; 0x37
 8009f66:	f001 fd8c 	bl	800ba82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009f6a:	e018      	b.n	8009f9e <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0f      	ldr	r2, [pc, #60]	; (8009fb0 <HAL_TIM_Base_MspInit+0x80>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d113      	bne.n	8009f9e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f7a:	4a0c      	ldr	r2, [pc, #48]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f80:	6613      	str	r3, [r2, #96]	; 0x60
 8009f82:	4b0a      	ldr	r3, [pc, #40]	; (8009fac <HAL_TIM_Base_MspInit+0x7c>)
 8009f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f8a:	60bb      	str	r3, [r7, #8]
 8009f8c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2101      	movs	r1, #1
 8009f92:	2019      	movs	r0, #25
 8009f94:	f001 fd59 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009f98:	2019      	movs	r0, #25
 8009f9a:	f001 fd72 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	40001400 	.word	0x40001400
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	40014400 	.word	0x40014400

08009fb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b088      	sub	sp, #32
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fbc:	f107 030c 	add.w	r3, r7, #12
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	605a      	str	r2, [r3, #4]
 8009fc6:	609a      	str	r2, [r3, #8]
 8009fc8:	60da      	str	r2, [r3, #12]
 8009fca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a11      	ldr	r2, [pc, #68]	; (800a018 <HAL_TIM_MspPostInit+0x64>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d11c      	bne.n	800a010 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009fd6:	4b11      	ldr	r3, [pc, #68]	; (800a01c <HAL_TIM_MspPostInit+0x68>)
 8009fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fda:	4a10      	ldr	r2, [pc, #64]	; (800a01c <HAL_TIM_MspPostInit+0x68>)
 8009fdc:	f043 0301 	orr.w	r3, r3, #1
 8009fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fe2:	4b0e      	ldr	r3, [pc, #56]	; (800a01c <HAL_TIM_MspPostInit+0x68>)
 8009fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fe6:	f003 0301 	and.w	r3, r3, #1
 8009fea:	60bb      	str	r3, [r7, #8]
 8009fec:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8009ffe:	230e      	movs	r3, #14
 800a000:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a002:	f107 030c 	add.w	r3, r7, #12
 800a006:	4619      	mov	r1, r3
 800a008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a00c:	f002 fa42 	bl	800c494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800a010:	bf00      	nop
 800a012:	3720      	adds	r7, #32
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	40014400 	.word	0x40014400
 800a01c:	40021000 	.word	0x40021000

0800a020 <MX_USART2_UART_Init>:

}
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a024:	4b14      	ldr	r3, [pc, #80]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a026:	4a15      	ldr	r2, [pc, #84]	; (800a07c <MX_USART2_UART_Init+0x5c>)
 800a028:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800a02a:	4b13      	ldr	r3, [pc, #76]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a02c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800a030:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a032:	4b11      	ldr	r3, [pc, #68]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a034:	2200      	movs	r2, #0
 800a036:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a038:	4b0f      	ldr	r3, [pc, #60]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a03e:	4b0e      	ldr	r3, [pc, #56]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a040:	2200      	movs	r2, #0
 800a042:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a044:	4b0c      	ldr	r3, [pc, #48]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a046:	220c      	movs	r2, #12
 800a048:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a04a:	4b0b      	ldr	r3, [pc, #44]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a050:	4b09      	ldr	r3, [pc, #36]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a052:	2200      	movs	r2, #0
 800a054:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a056:	4b08      	ldr	r3, [pc, #32]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a058:	2200      	movs	r2, #0
 800a05a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a05c:	4b06      	ldr	r3, [pc, #24]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a05e:	2200      	movs	r2, #0
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a062:	4805      	ldr	r0, [pc, #20]	; (800a078 <MX_USART2_UART_Init+0x58>)
 800a064:	f007 fa38 	bl	80114d8 <HAL_UART_Init>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a06e:	f7ff fd03 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	2000348c 	.word	0x2000348c
 800a07c:	40004400 	.word	0x40004400

0800a080 <HAL_UART_MspInit>:
  /* USER CODE END USART3_Init 2 */

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b08e      	sub	sp, #56	; 0x38
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a088:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a08c:	2200      	movs	r2, #0
 800a08e:	601a      	str	r2, [r3, #0]
 800a090:	605a      	str	r2, [r3, #4]
 800a092:	609a      	str	r2, [r3, #8]
 800a094:	60da      	str	r2, [r3, #12]
 800a096:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a9a      	ldr	r2, [pc, #616]	; (800a308 <HAL_UART_MspInit+0x288>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d15b      	bne.n	800a15a <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a0a2:	4b9a      	ldr	r3, [pc, #616]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0a6:	4a99      	ldr	r2, [pc, #612]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a0ac:	6613      	str	r3, [r2, #96]	; 0x60
 800a0ae:	4b97      	ldr	r3, [pc, #604]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a0b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a0b6:	623b      	str	r3, [r7, #32]
 800a0b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0ba:	4b94      	ldr	r3, [pc, #592]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0be:	4a93      	ldr	r2, [pc, #588]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0c0:	f043 0301 	orr.w	r3, r3, #1
 800a0c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0c6:	4b91      	ldr	r3, [pc, #580]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0ca:	f003 0301 	and.w	r3, r3, #1
 800a0ce:	61fb      	str	r3, [r7, #28]
 800a0d0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_CARTEGAZ_Pin|RX1_CARTEGAZ_Pin;
 800a0d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a0e4:	2307      	movs	r3, #7
 800a0e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a0e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a0f2:	f002 f9cf 	bl	800c494 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a0f6:	4b86      	ldr	r3, [pc, #536]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a0f8:	4a86      	ldr	r2, [pc, #536]	; (800a314 <HAL_UART_MspInit+0x294>)
 800a0fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800a0fc:	4b84      	ldr	r3, [pc, #528]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a0fe:	2202      	movs	r2, #2
 800a100:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a102:	4b83      	ldr	r3, [pc, #524]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a104:	2200      	movs	r2, #0
 800a106:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a108:	4b81      	ldr	r3, [pc, #516]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a10a:	2200      	movs	r2, #0
 800a10c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a10e:	4b80      	ldr	r3, [pc, #512]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a110:	2280      	movs	r2, #128	; 0x80
 800a112:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a114:	4b7e      	ldr	r3, [pc, #504]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a116:	2200      	movs	r2, #0
 800a118:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a11a:	4b7d      	ldr	r3, [pc, #500]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a120:	4b7b      	ldr	r3, [pc, #492]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a122:	2220      	movs	r2, #32
 800a124:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a126:	4b7a      	ldr	r3, [pc, #488]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a128:	2200      	movs	r2, #0
 800a12a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a12c:	4878      	ldr	r0, [pc, #480]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a12e:	f001 fcc3 	bl	800bab8 <HAL_DMA_Init>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800a138:	f7ff fc9e 	bl	8009a78 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a74      	ldr	r2, [pc, #464]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a140:	671a      	str	r2, [r3, #112]	; 0x70
 800a142:	4a73      	ldr	r2, [pc, #460]	; (800a310 <HAL_UART_MspInit+0x290>)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800a148:	2200      	movs	r2, #0
 800a14a:	2103      	movs	r1, #3
 800a14c:	2025      	movs	r0, #37	; 0x25
 800a14e:	f001 fc7c 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a152:	2025      	movs	r0, #37	; 0x25
 800a154:	f001 fc95 	bl	800ba82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a158:	e0d1      	b.n	800a2fe <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART2)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a6e      	ldr	r2, [pc, #440]	; (800a318 <HAL_UART_MspInit+0x298>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d16c      	bne.n	800a23e <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a164:	4b69      	ldr	r3, [pc, #420]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a168:	4a68      	ldr	r2, [pc, #416]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a16a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a16e:	6593      	str	r3, [r2, #88]	; 0x58
 800a170:	4b66      	ldr	r3, [pc, #408]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a178:	61bb      	str	r3, [r7, #24]
 800a17a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a17c:	4b63      	ldr	r3, [pc, #396]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a180:	4a62      	ldr	r2, [pc, #392]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a182:	f043 0301 	orr.w	r3, r3, #1
 800a186:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a188:	4b60      	ldr	r3, [pc, #384]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a18a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	617b      	str	r3, [r7, #20]
 800a192:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin;
 800a194:	2304      	movs	r3, #4
 800a196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a198:	2302      	movs	r3, #2
 800a19a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a19c:	2300      	movs	r3, #0
 800a19e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1a0:	2303      	movs	r3, #3
 800a1a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a1a4:	2307      	movs	r3, #7
 800a1a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800a1a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1b2:	f002 f96f 	bl	800c494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX2_GPS_Pin;
 800a1b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1c4:	2303      	movs	r3, #3
 800a1c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800a1cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a1d6:	f002 f95d 	bl	800c494 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800a1da:	4b50      	ldr	r3, [pc, #320]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1dc:	4a50      	ldr	r2, [pc, #320]	; (800a320 <HAL_UART_MspInit+0x2a0>)
 800a1de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800a1e0:	4b4e      	ldr	r3, [pc, #312]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a1e6:	4b4d      	ldr	r3, [pc, #308]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a1ec:	4b4b      	ldr	r3, [pc, #300]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a1f2:	4b4a      	ldr	r3, [pc, #296]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1f4:	2280      	movs	r2, #128	; 0x80
 800a1f6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a1f8:	4b48      	ldr	r3, [pc, #288]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a1fe:	4b47      	ldr	r3, [pc, #284]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a200:	2200      	movs	r2, #0
 800a202:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a204:	4b45      	ldr	r3, [pc, #276]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a206:	2220      	movs	r2, #32
 800a208:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a20a:	4b44      	ldr	r3, [pc, #272]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a210:	4842      	ldr	r0, [pc, #264]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a212:	f001 fc51 	bl	800bab8 <HAL_DMA_Init>
 800a216:	4603      	mov	r3, r0
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800a21c:	f7ff fc2c 	bl	8009a78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a3e      	ldr	r2, [pc, #248]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a224:	671a      	str	r2, [r3, #112]	; 0x70
 800a226:	4a3d      	ldr	r2, [pc, #244]	; (800a31c <HAL_UART_MspInit+0x29c>)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800a22c:	2200      	movs	r2, #0
 800a22e:	2102      	movs	r1, #2
 800a230:	2026      	movs	r0, #38	; 0x26
 800a232:	f001 fc0a 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a236:	2026      	movs	r0, #38	; 0x26
 800a238:	f001 fc23 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 800a23c:	e05f      	b.n	800a2fe <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a38      	ldr	r2, [pc, #224]	; (800a324 <HAL_UART_MspInit+0x2a4>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d15a      	bne.n	800a2fe <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a248:	4b30      	ldr	r3, [pc, #192]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a24a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a24c:	4a2f      	ldr	r2, [pc, #188]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a24e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a252:	6593      	str	r3, [r2, #88]	; 0x58
 800a254:	4b2d      	ldr	r3, [pc, #180]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a258:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a25c:	613b      	str	r3, [r7, #16]
 800a25e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a260:	4b2a      	ldr	r3, [pc, #168]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a264:	4a29      	ldr	r2, [pc, #164]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a266:	f043 0302 	orr.w	r3, r3, #2
 800a26a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a26c:	4b27      	ldr	r3, [pc, #156]	; (800a30c <HAL_UART_MspInit+0x28c>)
 800a26e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a270:	f003 0302 	and.w	r3, r3, #2
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_LORA_Pin|RX3_LORA_Pin;
 800a278:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a27c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a27e:	2302      	movs	r3, #2
 800a280:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a282:	2300      	movs	r3, #0
 800a284:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a286:	2303      	movs	r3, #3
 800a288:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a28a:	2307      	movs	r3, #7
 800a28c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a28e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a292:	4619      	mov	r1, r3
 800a294:	4824      	ldr	r0, [pc, #144]	; (800a328 <HAL_UART_MspInit+0x2a8>)
 800a296:	f002 f8fd 	bl	800c494 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800a29a:	4b24      	ldr	r3, [pc, #144]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a29c:	4a24      	ldr	r2, [pc, #144]	; (800a330 <HAL_UART_MspInit+0x2b0>)
 800a29e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800a2a0:	4b22      	ldr	r3, [pc, #136]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2a2:	2202      	movs	r2, #2
 800a2a4:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a2a6:	4b21      	ldr	r3, [pc, #132]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a2ac:	4b1f      	ldr	r3, [pc, #124]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a2b2:	4b1e      	ldr	r3, [pc, #120]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2b4:	2280      	movs	r2, #128	; 0x80
 800a2b6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a2b8:	4b1c      	ldr	r3, [pc, #112]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a2be:	4b1b      	ldr	r3, [pc, #108]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a2c4:	4b19      	ldr	r3, [pc, #100]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2c6:	2220      	movs	r2, #32
 800a2c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a2ca:	4b18      	ldr	r3, [pc, #96]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a2d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a2d2:	4816      	ldr	r0, [pc, #88]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2d4:	f001 fbf0 	bl	800bab8 <HAL_DMA_Init>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d001      	beq.n	800a2e2 <HAL_UART_MspInit+0x262>
      Error_Handler();
 800a2de:	f7ff fbcb 	bl	8009a78 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	4a11      	ldr	r2, [pc, #68]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2e6:	671a      	str	r2, [r3, #112]	; 0x70
 800a2e8:	4a10      	ldr	r2, [pc, #64]	; (800a32c <HAL_UART_MspInit+0x2ac>)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2101      	movs	r1, #1
 800a2f2:	2027      	movs	r0, #39	; 0x27
 800a2f4:	f001 fba9 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a2f8:	2027      	movs	r0, #39	; 0x27
 800a2fa:	f001 fbc2 	bl	800ba82 <HAL_NVIC_EnableIRQ>
}
 800a2fe:	bf00      	nop
 800a300:	3738      	adds	r7, #56	; 0x38
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}
 800a306:	bf00      	nop
 800a308:	40013800 	.word	0x40013800
 800a30c:	40021000 	.word	0x40021000
 800a310:	20003378 	.word	0x20003378
 800a314:	40020058 	.word	0x40020058
 800a318:	40004400 	.word	0x40004400
 800a31c:	20003594 	.word	0x20003594
 800a320:	4002006c 	.word	0x4002006c
 800a324:	40004800 	.word	0x40004800
 800a328:	48000400 	.word	0x48000400
 800a32c:	200033c0 	.word	0x200033c0
 800a330:	40020030 	.word	0x40020030

0800a334 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800a334:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a36c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800a338:	f7ff fd18 	bl	8009d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800a33c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800a33e:	e003      	b.n	800a348 <LoopCopyDataInit>

0800a340 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800a340:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800a342:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800a344:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800a346:	3104      	adds	r1, #4

0800a348 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800a348:	480a      	ldr	r0, [pc, #40]	; (800a374 <LoopForever+0xa>)
	ldr	r3, =_edata
 800a34a:	4b0b      	ldr	r3, [pc, #44]	; (800a378 <LoopForever+0xe>)
	adds	r2, r0, r1
 800a34c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800a34e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800a350:	d3f6      	bcc.n	800a340 <CopyDataInit>
	ldr	r2, =_sbss
 800a352:	4a0a      	ldr	r2, [pc, #40]	; (800a37c <LoopForever+0x12>)
	b	LoopFillZerobss
 800a354:	e002      	b.n	800a35c <LoopFillZerobss>

0800a356 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800a356:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800a358:	f842 3b04 	str.w	r3, [r2], #4

0800a35c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800a35c:	4b08      	ldr	r3, [pc, #32]	; (800a380 <LoopForever+0x16>)
	cmp	r2, r3
 800a35e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800a360:	d3f9      	bcc.n	800a356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800a362:	f00d fac1 	bl	80178e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800a366:	f7fe fd07 	bl	8008d78 <main>

0800a36a <LoopForever>:

LoopForever:
    b LoopForever
 800a36a:	e7fe      	b.n	800a36a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800a36c:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800a370:	0801cb60 	.word	0x0801cb60
	ldr	r0, =_sdata
 800a374:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800a378:	20000a94 	.word	0x20000a94
	ldr	r2, =_sbss
 800a37c:	20000a94 	.word	0x20000a94
	ldr	r3, = _ebss
 800a380:	20003db4 	.word	0x20003db4

0800a384 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800a384:	e7fe      	b.n	800a384 <ADC1_IRQHandler>

0800a386 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a386:	b580      	push	{r7, lr}
 800a388:	b082      	sub	sp, #8
 800a38a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a390:	2003      	movs	r0, #3
 800a392:	f001 fb4f 	bl	800ba34 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a396:	2000      	movs	r0, #0
 800a398:	f000 f80e 	bl	800a3b8 <HAL_InitTick>
 800a39c:	4603      	mov	r3, r0
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	71fb      	strb	r3, [r7, #7]
 800a3a6:	e001      	b.n	800a3ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a3a8:	f7ff fb6e 	bl	8009a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a3ac:	79fb      	ldrb	r3, [r7, #7]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b084      	sub	sp, #16
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a3c4:	4b17      	ldr	r3, [pc, #92]	; (800a424 <HAL_InitTick+0x6c>)
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d023      	beq.n	800a414 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a3cc:	4b16      	ldr	r3, [pc, #88]	; (800a428 <HAL_InitTick+0x70>)
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4b14      	ldr	r3, [pc, #80]	; (800a424 <HAL_InitTick+0x6c>)
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3da:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f001 fb5b 	bl	800ba9e <HAL_SYSTICK_Config>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d10f      	bne.n	800a40e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2b0f      	cmp	r3, #15
 800a3f2:	d809      	bhi.n	800a408 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	6879      	ldr	r1, [r7, #4]
 800a3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3fc:	f001 fb25 	bl	800ba4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <HAL_InitTick+0x74>)
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	e007      	b.n	800a418 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	73fb      	strb	r3, [r7, #15]
 800a40c:	e004      	b.n	800a418 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	73fb      	strb	r3, [r7, #15]
 800a412:	e001      	b.n	800a418 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a414:	2301      	movs	r3, #1
 800a416:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}
 800a422:	bf00      	nop
 800a424:	20000788 	.word	0x20000788
 800a428:	20000780 	.word	0x20000780
 800a42c:	20000784 	.word	0x20000784

0800a430 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a430:	b480      	push	{r7}
 800a432:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a434:	4b06      	ldr	r3, [pc, #24]	; (800a450 <HAL_IncTick+0x20>)
 800a436:	781b      	ldrb	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	4b06      	ldr	r3, [pc, #24]	; (800a454 <HAL_IncTick+0x24>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4413      	add	r3, r2
 800a440:	4a04      	ldr	r2, [pc, #16]	; (800a454 <HAL_IncTick+0x24>)
 800a442:	6013      	str	r3, [r2, #0]
}
 800a444:	bf00      	nop
 800a446:	46bd      	mov	sp, r7
 800a448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44c:	4770      	bx	lr
 800a44e:	bf00      	nop
 800a450:	20000788 	.word	0x20000788
 800a454:	200035dc 	.word	0x200035dc

0800a458 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a458:	b480      	push	{r7}
 800a45a:	af00      	add	r7, sp, #0
  return uwTick;
 800a45c:	4b03      	ldr	r3, [pc, #12]	; (800a46c <HAL_GetTick+0x14>)
 800a45e:	681b      	ldr	r3, [r3, #0]
}
 800a460:	4618      	mov	r0, r3
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	200035dc 	.word	0x200035dc

0800a470 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a478:	f7ff ffee 	bl	800a458 <HAL_GetTick>
 800a47c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a488:	d005      	beq.n	800a496 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a48a:	4b0a      	ldr	r3, [pc, #40]	; (800a4b4 <HAL_Delay+0x44>)
 800a48c:	781b      	ldrb	r3, [r3, #0]
 800a48e:	461a      	mov	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a496:	bf00      	nop
 800a498:	f7ff ffde 	bl	800a458 <HAL_GetTick>
 800a49c:	4602      	mov	r2, r0
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d8f7      	bhi.n	800a498 <HAL_Delay+0x28>
  {
  }
}
 800a4a8:	bf00      	nop
 800a4aa:	bf00      	nop
 800a4ac:	3710      	adds	r7, #16
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20000788 	.word	0x20000788

0800a4b8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
 800a4c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	431a      	orrs	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	609a      	str	r2, [r3, #8]
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
 800a4e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	431a      	orrs	r2, r3
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	609a      	str	r2, [r3, #8]
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800a514:	4618      	mov	r0, r3
 800a516:	370c      	adds	r7, #12
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800a520:	b480      	push	{r7}
 800a522:	b087      	sub	sp, #28
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3360      	adds	r3, #96	; 0x60
 800a532:	461a      	mov	r2, r3
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	009b      	lsls	r3, r3, #2
 800a538:	4413      	add	r3, r2
 800a53a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	4b08      	ldr	r3, [pc, #32]	; (800a564 <LL_ADC_SetOffset+0x44>)
 800a542:	4013      	ands	r3, r2
 800a544:	687a      	ldr	r2, [r7, #4]
 800a546:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800a54a:	683a      	ldr	r2, [r7, #0]
 800a54c:	430a      	orrs	r2, r1
 800a54e:	4313      	orrs	r3, r2
 800a550:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800a558:	bf00      	nop
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	03fff000 	.word	0x03fff000

0800a568 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
 800a570:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	3360      	adds	r3, #96	; 0x60
 800a576:	461a      	mov	r2, r3
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800a594:	b480      	push	{r7}
 800a596:	b087      	sub	sp, #28
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	3360      	adds	r3, #96	; 0x60
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	4413      	add	r3, r2
 800a5ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a5ae:	697b      	ldr	r3, [r7, #20]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	431a      	orrs	r2, r3
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800a5be:	bf00      	nop
 800a5c0:	371c      	adds	r7, #28
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800a5ca:	b480      	push	{r7}
 800a5cc:	b083      	sub	sp, #12
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	68db      	ldr	r3, [r3, #12]
 800a5d6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d101      	bne.n	800a5e2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e000      	b.n	800a5e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800a5e2:	2300      	movs	r3, #0
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	370c      	adds	r7, #12
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b087      	sub	sp, #28
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	3330      	adds	r3, #48	; 0x30
 800a600:	461a      	mov	r2, r3
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	0a1b      	lsrs	r3, r3, #8
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	f003 030c 	and.w	r3, r3, #12
 800a60c:	4413      	add	r3, r2
 800a60e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	681a      	ldr	r2, [r3, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	f003 031f 	and.w	r3, r3, #31
 800a61a:	211f      	movs	r1, #31
 800a61c:	fa01 f303 	lsl.w	r3, r1, r3
 800a620:	43db      	mvns	r3, r3
 800a622:	401a      	ands	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	0e9b      	lsrs	r3, r3, #26
 800a628:	f003 011f 	and.w	r1, r3, #31
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	f003 031f 	and.w	r3, r3, #31
 800a632:	fa01 f303 	lsl.w	r3, r1, r3
 800a636:	431a      	orrs	r2, r3
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800a63c:	bf00      	nop
 800a63e:	371c      	adds	r7, #28
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800a648:	b480      	push	{r7}
 800a64a:	b087      	sub	sp, #28
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	3314      	adds	r3, #20
 800a658:	461a      	mov	r2, r3
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	0e5b      	lsrs	r3, r3, #25
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	4413      	add	r3, r2
 800a666:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	0d1b      	lsrs	r3, r3, #20
 800a670:	f003 031f 	and.w	r3, r3, #31
 800a674:	2107      	movs	r1, #7
 800a676:	fa01 f303 	lsl.w	r3, r1, r3
 800a67a:	43db      	mvns	r3, r3
 800a67c:	401a      	ands	r2, r3
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	0d1b      	lsrs	r3, r3, #20
 800a682:	f003 031f 	and.w	r3, r3, #31
 800a686:	6879      	ldr	r1, [r7, #4]
 800a688:	fa01 f303 	lsl.w	r3, r1, r3
 800a68c:	431a      	orrs	r2, r3
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800a692:	bf00      	nop
 800a694:	371c      	adds	r7, #28
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr
	...

0800a6a0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6b8:	43db      	mvns	r3, r3
 800a6ba:	401a      	ands	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f003 0318 	and.w	r3, r3, #24
 800a6c2:	4908      	ldr	r1, [pc, #32]	; (800a6e4 <LL_ADC_SetChannelSingleDiff+0x44>)
 800a6c4:	40d9      	lsrs	r1, r3
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	400b      	ands	r3, r1
 800a6ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800a6d6:	bf00      	nop
 800a6d8:	3714      	adds	r7, #20
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	0007ffff 	.word	0x0007ffff

0800a6e8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800a6f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	6093      	str	r3, [r2, #8]
}
 800a700:	bf00      	nop
 800a702:	370c      	adds	r7, #12
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a71c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a720:	d101      	bne.n	800a726 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800a722:	2301      	movs	r3, #1
 800a724:	e000      	b.n	800a728 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800a726:	2300      	movs	r3, #0
}
 800a728:	4618      	mov	r0, r3
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr

0800a734 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800a734:	b480      	push	{r7}
 800a736:	b083      	sub	sp, #12
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800a744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a748:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800a750:	bf00      	nop
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	689b      	ldr	r3, [r3, #8]
 800a768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a76c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a770:	d101      	bne.n	800a776 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800a772:	2301      	movs	r3, #1
 800a774:	e000      	b.n	800a778 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800a776:	2300      	movs	r3, #0
}
 800a778:	4618      	mov	r0, r3
 800a77a:	370c      	adds	r7, #12
 800a77c:	46bd      	mov	sp, r7
 800a77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a782:	4770      	bx	lr

0800a784 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800a784:	b480      	push	{r7}
 800a786:	b083      	sub	sp, #12
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a794:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a798:	f043 0201 	orr.w	r2, r3, #1
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800a7a0:	bf00      	nop
 800a7a2:	370c      	adds	r7, #12
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7aa:	4770      	bx	lr

0800a7ac <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a7bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a7c0:	f043 0202 	orr.w	r2, r3, #2
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	f003 0301 	and.w	r3, r3, #1
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <LL_ADC_IsEnabled+0x18>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e000      	b.n	800a7ee <LL_ADC_IsEnabled+0x1a>
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b083      	sub	sp, #12
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d101      	bne.n	800a812 <LL_ADC_IsDisableOngoing+0x18>
 800a80e:	2301      	movs	r3, #1
 800a810:	e000      	b.n	800a814 <LL_ADC_IsDisableOngoing+0x1a>
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	689b      	ldr	r3, [r3, #8]
 800a82c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a830:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a834:	f043 0204 	orr.w	r2, r3, #4
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr

0800a848 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800a848:	b480      	push	{r7}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	689b      	ldr	r3, [r3, #8]
 800a854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a858:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a85c:	f043 0210 	orr.w	r2, r3, #16
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800a864:	bf00      	nop
 800a866:	370c      	adds	r7, #12
 800a868:	46bd      	mov	sp, r7
 800a86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86e:	4770      	bx	lr

0800a870 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b04      	cmp	r3, #4
 800a882:	d101      	bne.n	800a888 <LL_ADC_REG_IsConversionOngoing+0x18>
 800a884:	2301      	movs	r3, #1
 800a886:	e000      	b.n	800a88a <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a888:	2300      	movs	r3, #0
}
 800a88a:	4618      	mov	r0, r3
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr

0800a896 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800a896:	b480      	push	{r7}
 800a898:	b083      	sub	sp, #12
 800a89a:	af00      	add	r7, sp, #0
 800a89c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800a8aa:	f043 0220 	orr.w	r2, r3, #32
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800a8b2:	bf00      	nop
 800a8b4:	370c      	adds	r7, #12
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8bc:	4770      	bx	lr

0800a8be <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800a8be:	b480      	push	{r7}
 800a8c0:	b083      	sub	sp, #12
 800a8c2:	af00      	add	r7, sp, #0
 800a8c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	689b      	ldr	r3, [r3, #8]
 800a8ca:	f003 0308 	and.w	r3, r3, #8
 800a8ce:	2b08      	cmp	r3, #8
 800a8d0:	d101      	bne.n	800a8d6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e000      	b.n	800a8d8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800a8d6:	2300      	movs	r3, #0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b088      	sub	sp, #32
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e12c      	b.n	800ab58 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	691b      	ldr	r3, [r3, #16]
 800a902:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d109      	bne.n	800a920 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f7fd ffcb 	bl	80088a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4618      	mov	r0, r3
 800a926:	f7ff fef1 	bl	800a70c <LL_ADC_IsDeepPowerDownEnabled>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4618      	mov	r0, r3
 800a936:	f7ff fed7 	bl	800a6e8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4618      	mov	r0, r3
 800a940:	f7ff ff0c 	bl	800a75c <LL_ADC_IsInternalRegulatorEnabled>
 800a944:	4603      	mov	r3, r0
 800a946:	2b00      	cmp	r3, #0
 800a948:	d115      	bne.n	800a976 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7ff fef0 	bl	800a734 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a954:	4b82      	ldr	r3, [pc, #520]	; (800ab60 <HAL_ADC_Init+0x27c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	099b      	lsrs	r3, r3, #6
 800a95a:	4a82      	ldr	r2, [pc, #520]	; (800ab64 <HAL_ADC_Init+0x280>)
 800a95c:	fba2 2303 	umull	r2, r3, r2, r3
 800a960:	099b      	lsrs	r3, r3, #6
 800a962:	3301      	adds	r3, #1
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a968:	e002      	b.n	800a970 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	3b01      	subs	r3, #1
 800a96e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1f9      	bne.n	800a96a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7ff feee 	bl	800a75c <LL_ADC_IsInternalRegulatorEnabled>
 800a980:	4603      	mov	r3, r0
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10d      	bne.n	800a9a2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98a:	f043 0210 	orr.w	r2, r3, #16
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a996:	f043 0201 	orr.w	r2, r3, #1
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7ff ff62 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800a9ac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9b2:	f003 0310 	and.w	r3, r3, #16
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f040 80c5 	bne.w	800ab46 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	f040 80c1 	bne.w	800ab46 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800a9cc:	f043 0202 	orr.w	r2, r3, #2
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fefb 	bl	800a7d4 <LL_ADC_IsEnabled>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d10b      	bne.n	800a9fc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a9e4:	4860      	ldr	r0, [pc, #384]	; (800ab68 <HAL_ADC_Init+0x284>)
 800a9e6:	f7ff fef5 	bl	800a7d4 <LL_ADC_IsEnabled>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d105      	bne.n	800a9fc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	4619      	mov	r1, r3
 800a9f6:	485d      	ldr	r0, [pc, #372]	; (800ab6c <HAL_ADC_Init+0x288>)
 800a9f8:	f7ff fd5e 	bl	800a4b8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	7e5b      	ldrb	r3, [r3, #25]
 800aa00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800aa0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800aa12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d106      	bne.n	800aa38 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	045b      	lsls	r3, r3, #17
 800aa32:	69ba      	ldr	r2, [r7, #24]
 800aa34:	4313      	orrs	r3, r2
 800aa36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d009      	beq.n	800aa54 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	68da      	ldr	r2, [r3, #12]
 800aa5a:	4b45      	ldr	r3, [pc, #276]	; (800ab70 <HAL_ADC_Init+0x28c>)
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	6812      	ldr	r2, [r2, #0]
 800aa62:	69b9      	ldr	r1, [r7, #24]
 800aa64:	430b      	orrs	r3, r1
 800aa66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	f7ff feff 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800aa72:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f7ff ff20 	bl	800a8be <LL_ADC_INJ_IsConversionOngoing>
 800aa7e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d13d      	bne.n	800ab02 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d13a      	bne.n	800ab02 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aa90:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa98:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aaa8:	f023 0302 	bic.w	r3, r3, #2
 800aaac:	687a      	ldr	r2, [r7, #4]
 800aaae:	6812      	ldr	r2, [r2, #0]
 800aab0:	69b9      	ldr	r1, [r7, #24]
 800aab2:	430b      	orrs	r3, r1
 800aab4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d118      	bne.n	800aaf2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800aaca:	f023 0304 	bic.w	r3, r3, #4
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aad6:	4311      	orrs	r1, r2
 800aad8:	687a      	ldr	r2, [r7, #4]
 800aada:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800aadc:	4311      	orrs	r1, r2
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800aae2:	430a      	orrs	r2, r1
 800aae4:	431a      	orrs	r2, r3
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0201 	orr.w	r2, r2, #1
 800aaee:	611a      	str	r2, [r3, #16]
 800aaf0:	e007      	b.n	800ab02 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	691a      	ldr	r2, [r3, #16]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0201 	bic.w	r2, r2, #1
 800ab00:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	691b      	ldr	r3, [r3, #16]
 800ab06:	2b01      	cmp	r3, #1
 800ab08:	d10c      	bne.n	800ab24 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab10:	f023 010f 	bic.w	r1, r3, #15
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	69db      	ldr	r3, [r3, #28]
 800ab18:	1e5a      	subs	r2, r3, #1
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	631a      	str	r2, [r3, #48]	; 0x30
 800ab22:	e007      	b.n	800ab34 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f022 020f 	bic.w	r2, r2, #15
 800ab32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab38:	f023 0303 	bic.w	r3, r3, #3
 800ab3c:	f043 0201 	orr.w	r2, r3, #1
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	655a      	str	r2, [r3, #84]	; 0x54
 800ab44:	e007      	b.n	800ab56 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab4a:	f043 0210 	orr.w	r2, r3, #16
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800ab52:	2301      	movs	r3, #1
 800ab54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800ab56:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3720      	adds	r7, #32
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	20000780 	.word	0x20000780
 800ab64:	053e2d63 	.word	0x053e2d63
 800ab68:	50040000 	.word	0x50040000
 800ab6c:	50040300 	.word	0x50040300
 800ab70:	fff0c007 	.word	0xfff0c007

0800ab74 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b084      	sub	sp, #16
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4618      	mov	r0, r3
 800ab82:	f7ff fe75 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d14f      	bne.n	800ac2c <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab92:	2b01      	cmp	r3, #1
 800ab94:	d101      	bne.n	800ab9a <HAL_ADC_Start+0x26>
 800ab96:	2302      	movs	r3, #2
 800ab98:	e04b      	b.n	800ac32 <HAL_ADC_Start+0xbe>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	2201      	movs	r2, #1
 800ab9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fdb4 	bl	800b710 <ADC_Enable>
 800aba8:	4603      	mov	r3, r0
 800abaa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800abac:	7bfb      	ldrb	r3, [r7, #15]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d137      	bne.n	800ac22 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abb6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800abba:	f023 0301 	bic.w	r3, r3, #1
 800abbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800abca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800abce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800abd2:	d106      	bne.n	800abe2 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abd8:	f023 0206 	bic.w	r2, r3, #6
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	659a      	str	r2, [r3, #88]	; 0x58
 800abe0:	e002      	b.n	800abe8 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	221c      	movs	r2, #28
 800abee:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac0a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800ac0e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f7ff fe00 	bl	800a820 <LL_ADC_REG_StartConversion>
 800ac20:	e006      	b.n	800ac30 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800ac2a:	e001      	b.n	800ac30 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3710      	adds	r7, #16
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}

0800ac3a <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800ac3a:	b580      	push	{r7, lr}
 800ac3c:	b084      	sub	sp, #16
 800ac3e:	af00      	add	r7, sp, #0
 800ac40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d101      	bne.n	800ac50 <HAL_ADC_Stop+0x16>
 800ac4c:	2302      	movs	r3, #2
 800ac4e:	e023      	b.n	800ac98 <HAL_ADC_Stop+0x5e>
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2201      	movs	r2, #1
 800ac54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800ac58:	2103      	movs	r1, #3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fc9c 	bl	800b598 <ADC_ConversionStop>
 800ac60:	4603      	mov	r3, r0
 800ac62:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800ac64:	7bfb      	ldrb	r3, [r7, #15]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d111      	bne.n	800ac8e <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800ac6a:	6878      	ldr	r0, [r7, #4]
 800ac6c:	f000 fdb2 	bl	800b7d4 <ADC_Disable>
 800ac70:	4603      	mov	r3, r0
 800ac72:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800ac74:	7bfb      	ldrb	r3, [r7, #15]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d109      	bne.n	800ac8e <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800ac82:	f023 0301 	bic.w	r3, r3, #1
 800ac86:	f043 0201 	orr.w	r2, r3, #1
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	2b08      	cmp	r3, #8
 800acb0:	d102      	bne.n	800acb8 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800acb2:	2308      	movs	r3, #8
 800acb4:	617b      	str	r3, [r7, #20]
 800acb6:	e010      	b.n	800acda <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	f003 0301 	and.w	r3, r3, #1
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acca:	f043 0220 	orr.w	r2, r3, #32
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e06f      	b.n	800adb6 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 800acd6:	2304      	movs	r3, #4
 800acd8:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800acda:	f7ff fbbd 	bl	800a458 <HAL_GetTick>
 800acde:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ace0:	e021      	b.n	800ad26 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d01d      	beq.n	800ad26 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800acea:	f7ff fbb5 	bl	800a458 <HAL_GetTick>
 800acee:	4602      	mov	r2, r0
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d302      	bcc.n	800ad00 <HAL_ADC_PollForConversion+0x60>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d112      	bne.n	800ad26 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681a      	ldr	r2, [r3, #0]
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10b      	bne.n	800ad26 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad12:	f043 0204 	orr.w	r2, r3, #4
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800ad22:	2303      	movs	r3, #3
 800ad24:	e047      	b.n	800adb6 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	697b      	ldr	r3, [r7, #20]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d0d6      	beq.n	800ace2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	4618      	mov	r0, r3
 800ad46:	f7ff fc40 	bl	800a5ca <LL_ADC_REG_IsTriggerSourceSWStart>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01c      	beq.n	800ad8a <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	7e5b      	ldrb	r3, [r3, #25]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d118      	bne.n	800ad8a <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f003 0308 	and.w	r3, r3, #8
 800ad62:	2b08      	cmp	r3, #8
 800ad64:	d111      	bne.n	800ad8a <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d105      	bne.n	800ad8a <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad82:	f043 0201 	orr.w	r2, r3, #1
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	68db      	ldr	r3, [r3, #12]
 800ad90:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2b08      	cmp	r3, #8
 800ad96:	d104      	bne.n	800ada2 <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2208      	movs	r2, #8
 800ad9e:	601a      	str	r2, [r3, #0]
 800ada0:	e008      	b.n	800adb4 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d103      	bne.n	800adb4 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	220c      	movs	r2, #12
 800adb2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3718      	adds	r7, #24
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b083      	sub	sp, #12
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800adcc:	4618      	mov	r0, r3
 800adce:	370c      	adds	r7, #12
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr

0800add8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b0b6      	sub	sp, #216	; 0xd8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800ade2:	2300      	movs	r3, #0
 800ade4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d101      	bne.n	800adfa <HAL_ADC_ConfigChannel+0x22>
 800adf6:	2302      	movs	r3, #2
 800adf8:	e3b9      	b.n	800b56e <HAL_ADC_ConfigChannel+0x796>
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f7ff fd32 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800ae0c:	4603      	mov	r3, r0
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	f040 839e 	bne.w	800b550 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	685b      	ldr	r3, [r3, #4]
 800ae18:	2b05      	cmp	r3, #5
 800ae1a:	d824      	bhi.n	800ae66 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	3b02      	subs	r3, #2
 800ae22:	2b03      	cmp	r3, #3
 800ae24:	d81b      	bhi.n	800ae5e <HAL_ADC_ConfigChannel+0x86>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <HAL_ADC_ConfigChannel+0x54>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae3d 	.word	0x0800ae3d
 800ae30:	0800ae45 	.word	0x0800ae45
 800ae34:	0800ae4d 	.word	0x0800ae4d
 800ae38:	0800ae55 	.word	0x0800ae55
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	220c      	movs	r2, #12
 800ae40:	605a      	str	r2, [r3, #4]
          break;
 800ae42:	e011      	b.n	800ae68 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 800ae44:	683b      	ldr	r3, [r7, #0]
 800ae46:	2212      	movs	r2, #18
 800ae48:	605a      	str	r2, [r3, #4]
          break;
 800ae4a:	e00d      	b.n	800ae68 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	2218      	movs	r2, #24
 800ae50:	605a      	str	r2, [r3, #4]
          break;
 800ae52:	e009      	b.n	800ae68 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae5a:	605a      	str	r2, [r3, #4]
          break;
 800ae5c:	e004      	b.n	800ae68 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	2206      	movs	r2, #6
 800ae62:	605a      	str	r2, [r3, #4]
          break;
 800ae64:	e000      	b.n	800ae68 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800ae66:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	6859      	ldr	r1, [r3, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	461a      	mov	r2, r3
 800ae76:	f7ff fbbb 	bl	800a5f0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7ff fcf6 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800ae84:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7ff fd16 	bl	800a8be <LL_ADC_INJ_IsConversionOngoing>
 800ae92:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800ae96:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f040 81a6 	bne.w	800b1ec <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800aea0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f040 81a1 	bne.w	800b1ec <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6818      	ldr	r0, [r3, #0]
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	6819      	ldr	r1, [r3, #0]
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	f7ff fbc6 	bl	800a648 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	695a      	ldr	r2, [r3, #20]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	08db      	lsrs	r3, r3, #3
 800aec8:	f003 0303 	and.w	r3, r3, #3
 800aecc:	005b      	lsls	r3, r3, #1
 800aece:	fa02 f303 	lsl.w	r3, r2, r3
 800aed2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	691b      	ldr	r3, [r3, #16]
 800aeda:	2b04      	cmp	r3, #4
 800aedc:	d00a      	beq.n	800aef4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6818      	ldr	r0, [r3, #0]
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	6919      	ldr	r1, [r3, #16]
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800aeee:	f7ff fb17 	bl	800a520 <LL_ADC_SetOffset>
 800aef2:	e17b      	b.n	800b1ec <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff fb34 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800af00:	4603      	mov	r3, r0
 800af02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af06:	2b00      	cmp	r3, #0
 800af08:	d10a      	bne.n	800af20 <HAL_ADC_ConfigChannel+0x148>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f7ff fb29 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800af16:	4603      	mov	r3, r0
 800af18:	0e9b      	lsrs	r3, r3, #26
 800af1a:	f003 021f 	and.w	r2, r3, #31
 800af1e:	e01e      	b.n	800af5e <HAL_ADC_ConfigChannel+0x186>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2100      	movs	r1, #0
 800af26:	4618      	mov	r0, r3
 800af28:	f7ff fb1e 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800af2c:	4603      	mov	r3, r0
 800af2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af36:	fa93 f3a3 	rbit	r3, r3
 800af3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800af3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800af46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d101      	bne.n	800af52 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800af4e:	2320      	movs	r3, #32
 800af50:	e004      	b.n	800af5c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800af52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800af56:	fab3 f383 	clz	r3, r3
 800af5a:	b2db      	uxtb	r3, r3
 800af5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af66:	2b00      	cmp	r3, #0
 800af68:	d105      	bne.n	800af76 <HAL_ADC_ConfigChannel+0x19e>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	0e9b      	lsrs	r3, r3, #26
 800af70:	f003 031f 	and.w	r3, r3, #31
 800af74:	e018      	b.n	800afa8 <HAL_ADC_ConfigChannel+0x1d0>
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800af82:	fa93 f3a3 	rbit	r3, r3
 800af86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800af8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800af92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d101      	bne.n	800af9e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800af9a:	2320      	movs	r3, #32
 800af9c:	e004      	b.n	800afa8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800af9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800afa2:	fab3 f383 	clz	r3, r3
 800afa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d106      	bne.n	800afba <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2200      	movs	r2, #0
 800afb2:	2100      	movs	r1, #0
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7ff faed 	bl	800a594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2101      	movs	r1, #1
 800afc0:	4618      	mov	r0, r3
 800afc2:	f7ff fad1 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d10a      	bne.n	800afe6 <HAL_ADC_ConfigChannel+0x20e>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2101      	movs	r1, #1
 800afd6:	4618      	mov	r0, r3
 800afd8:	f7ff fac6 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800afdc:	4603      	mov	r3, r0
 800afde:	0e9b      	lsrs	r3, r3, #26
 800afe0:	f003 021f 	and.w	r2, r3, #31
 800afe4:	e01e      	b.n	800b024 <HAL_ADC_ConfigChannel+0x24c>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2101      	movs	r1, #1
 800afec:	4618      	mov	r0, r3
 800afee:	f7ff fabb 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800aff2:	4603      	mov	r3, r0
 800aff4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800affc:	fa93 f3a3 	rbit	r3, r3
 800b000:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800b004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b008:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800b00c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b010:	2b00      	cmp	r3, #0
 800b012:	d101      	bne.n	800b018 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800b014:	2320      	movs	r3, #32
 800b016:	e004      	b.n	800b022 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800b018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b01c:	fab3 f383 	clz	r3, r3
 800b020:	b2db      	uxtb	r3, r3
 800b022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b024:	683b      	ldr	r3, [r7, #0]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d105      	bne.n	800b03c <HAL_ADC_ConfigChannel+0x264>
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	0e9b      	lsrs	r3, r3, #26
 800b036:	f003 031f 	and.w	r3, r3, #31
 800b03a:	e018      	b.n	800b06e <HAL_ADC_ConfigChannel+0x296>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b048:	fa93 f3a3 	rbit	r3, r3
 800b04c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800b050:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b054:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800b058:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800b060:	2320      	movs	r3, #32
 800b062:	e004      	b.n	800b06e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 800b064:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b068:	fab3 f383 	clz	r3, r3
 800b06c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800b06e:	429a      	cmp	r2, r3
 800b070:	d106      	bne.n	800b080 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2200      	movs	r2, #0
 800b078:	2101      	movs	r1, #1
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff fa8a 	bl	800a594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	2102      	movs	r1, #2
 800b086:	4618      	mov	r0, r3
 800b088:	f7ff fa6e 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10a      	bne.n	800b0ac <HAL_ADC_ConfigChannel+0x2d4>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2102      	movs	r1, #2
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fa63 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	0e9b      	lsrs	r3, r3, #26
 800b0a6:	f003 021f 	and.w	r2, r3, #31
 800b0aa:	e01e      	b.n	800b0ea <HAL_ADC_ConfigChannel+0x312>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2102      	movs	r1, #2
 800b0b2:	4618      	mov	r0, r3
 800b0b4:	f7ff fa58 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c2:	fa93 f3a3 	rbit	r3, r3
 800b0c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800b0ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800b0d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d101      	bne.n	800b0de <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800b0da:	2320      	movs	r3, #32
 800b0dc:	e004      	b.n	800b0e8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800b0de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0e2:	fab3 f383 	clz	r3, r3
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d105      	bne.n	800b102 <HAL_ADC_ConfigChannel+0x32a>
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	0e9b      	lsrs	r3, r3, #26
 800b0fc:	f003 031f 	and.w	r3, r3, #31
 800b100:	e016      	b.n	800b130 <HAL_ADC_ConfigChannel+0x358>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b10a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b10e:	fa93 f3a3 	rbit	r3, r3
 800b112:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800b114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b116:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800b11a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d101      	bne.n	800b126 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800b122:	2320      	movs	r3, #32
 800b124:	e004      	b.n	800b130 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800b126:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b12a:	fab3 f383 	clz	r3, r3
 800b12e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800b130:	429a      	cmp	r2, r3
 800b132:	d106      	bne.n	800b142 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2200      	movs	r2, #0
 800b13a:	2102      	movs	r1, #2
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7ff fa29 	bl	800a594 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2103      	movs	r1, #3
 800b148:	4618      	mov	r0, r3
 800b14a:	f7ff fa0d 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b14e:	4603      	mov	r3, r0
 800b150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b154:	2b00      	cmp	r3, #0
 800b156:	d10a      	bne.n	800b16e <HAL_ADC_ConfigChannel+0x396>
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2103      	movs	r1, #3
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff fa02 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b164:	4603      	mov	r3, r0
 800b166:	0e9b      	lsrs	r3, r3, #26
 800b168:	f003 021f 	and.w	r2, r3, #31
 800b16c:	e017      	b.n	800b19e <HAL_ADC_ConfigChannel+0x3c6>
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2103      	movs	r1, #3
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff f9f7 	bl	800a568 <LL_ADC_GetOffsetChannel>
 800b17a:	4603      	mov	r3, r0
 800b17c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b17e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b180:	fa93 f3a3 	rbit	r3, r3
 800b184:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800b186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b188:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800b18a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d101      	bne.n	800b194 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800b190:	2320      	movs	r3, #32
 800b192:	e003      	b.n	800b19c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800b194:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b196:	fab3 f383 	clz	r3, r3
 800b19a:	b2db      	uxtb	r3, r3
 800b19c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d105      	bne.n	800b1b6 <HAL_ADC_ConfigChannel+0x3de>
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	0e9b      	lsrs	r3, r3, #26
 800b1b0:	f003 031f 	and.w	r3, r3, #31
 800b1b4:	e011      	b.n	800b1da <HAL_ADC_ConfigChannel+0x402>
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b1bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b1be:	fa93 f3a3 	rbit	r3, r3
 800b1c2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800b1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b1c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800b1c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d101      	bne.n	800b1d2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800b1ce:	2320      	movs	r3, #32
 800b1d0:	e003      	b.n	800b1da <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800b1d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b1d4:	fab3 f383 	clz	r3, r3
 800b1d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d106      	bne.n	800b1ec <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	2103      	movs	r1, #3
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	f7ff f9d4 	bl	800a594 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff faef 	bl	800a7d4 <LL_ADC_IsEnabled>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 813f 	bne.w	800b47c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6818      	ldr	r0, [r3, #0]
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	6819      	ldr	r1, [r3, #0]
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	68db      	ldr	r3, [r3, #12]
 800b20a:	461a      	mov	r2, r3
 800b20c:	f7ff fa48 	bl	800a6a0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	4a8e      	ldr	r2, [pc, #568]	; (800b450 <HAL_ADC_ConfigChannel+0x678>)
 800b216:	4293      	cmp	r3, r2
 800b218:	f040 8130 	bne.w	800b47c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d10b      	bne.n	800b244 <HAL_ADC_ConfigChannel+0x46c>
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	0e9b      	lsrs	r3, r3, #26
 800b232:	3301      	adds	r3, #1
 800b234:	f003 031f 	and.w	r3, r3, #31
 800b238:	2b09      	cmp	r3, #9
 800b23a:	bf94      	ite	ls
 800b23c:	2301      	movls	r3, #1
 800b23e:	2300      	movhi	r3, #0
 800b240:	b2db      	uxtb	r3, r3
 800b242:	e019      	b.n	800b278 <HAL_ADC_ConfigChannel+0x4a0>
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b24a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b24c:	fa93 f3a3 	rbit	r3, r3
 800b250:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800b252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b254:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800b256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d101      	bne.n	800b260 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 800b25c:	2320      	movs	r3, #32
 800b25e:	e003      	b.n	800b268 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800b260:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b262:	fab3 f383 	clz	r3, r3
 800b266:	b2db      	uxtb	r3, r3
 800b268:	3301      	adds	r3, #1
 800b26a:	f003 031f 	and.w	r3, r3, #31
 800b26e:	2b09      	cmp	r3, #9
 800b270:	bf94      	ite	ls
 800b272:	2301      	movls	r3, #1
 800b274:	2300      	movhi	r3, #0
 800b276:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d079      	beq.n	800b370 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b284:	2b00      	cmp	r3, #0
 800b286:	d107      	bne.n	800b298 <HAL_ADC_ConfigChannel+0x4c0>
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	0e9b      	lsrs	r3, r3, #26
 800b28e:	3301      	adds	r3, #1
 800b290:	069b      	lsls	r3, r3, #26
 800b292:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b296:	e015      	b.n	800b2c4 <HAL_ADC_ConfigChannel+0x4ec>
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b29e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2a0:	fa93 f3a3 	rbit	r3, r3
 800b2a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800b2a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800b2aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800b2b0:	2320      	movs	r3, #32
 800b2b2:	e003      	b.n	800b2bc <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 800b2b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b2b6:	fab3 f383 	clz	r3, r3
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	3301      	adds	r3, #1
 800b2be:	069b      	lsls	r3, r3, #26
 800b2c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <HAL_ADC_ConfigChannel+0x50c>
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	0e9b      	lsrs	r3, r3, #26
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	f003 031f 	and.w	r3, r3, #31
 800b2dc:	2101      	movs	r1, #1
 800b2de:	fa01 f303 	lsl.w	r3, r1, r3
 800b2e2:	e017      	b.n	800b314 <HAL_ADC_ConfigChannel+0x53c>
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2ec:	fa93 f3a3 	rbit	r3, r3
 800b2f0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800b2f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2f4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800b2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d101      	bne.n	800b300 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 800b2fc:	2320      	movs	r3, #32
 800b2fe:	e003      	b.n	800b308 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800b300:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b302:	fab3 f383 	clz	r3, r3
 800b306:	b2db      	uxtb	r3, r3
 800b308:	3301      	adds	r3, #1
 800b30a:	f003 031f 	and.w	r3, r3, #31
 800b30e:	2101      	movs	r1, #1
 800b310:	fa01 f303 	lsl.w	r3, r1, r3
 800b314:	ea42 0103 	orr.w	r1, r2, r3
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b320:	2b00      	cmp	r3, #0
 800b322:	d10a      	bne.n	800b33a <HAL_ADC_ConfigChannel+0x562>
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	0e9b      	lsrs	r3, r3, #26
 800b32a:	3301      	adds	r3, #1
 800b32c:	f003 021f 	and.w	r2, r3, #31
 800b330:	4613      	mov	r3, r2
 800b332:	005b      	lsls	r3, r3, #1
 800b334:	4413      	add	r3, r2
 800b336:	051b      	lsls	r3, r3, #20
 800b338:	e018      	b.n	800b36c <HAL_ADC_ConfigChannel+0x594>
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b342:	fa93 f3a3 	rbit	r3, r3
 800b346:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800b348:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b34a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800b34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800b352:	2320      	movs	r3, #32
 800b354:	e003      	b.n	800b35e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800b356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b358:	fab3 f383 	clz	r3, r3
 800b35c:	b2db      	uxtb	r3, r3
 800b35e:	3301      	adds	r3, #1
 800b360:	f003 021f 	and.w	r2, r3, #31
 800b364:	4613      	mov	r3, r2
 800b366:	005b      	lsls	r3, r3, #1
 800b368:	4413      	add	r3, r2
 800b36a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b36c:	430b      	orrs	r3, r1
 800b36e:	e080      	b.n	800b472 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d107      	bne.n	800b38c <HAL_ADC_ConfigChannel+0x5b4>
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	0e9b      	lsrs	r3, r3, #26
 800b382:	3301      	adds	r3, #1
 800b384:	069b      	lsls	r3, r3, #26
 800b386:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b38a:	e015      	b.n	800b3b8 <HAL_ADC_ConfigChannel+0x5e0>
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b394:	fa93 f3a3 	rbit	r3, r3
 800b398:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d101      	bne.n	800b3a8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 800b3a4:	2320      	movs	r3, #32
 800b3a6:	e003      	b.n	800b3b0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800b3a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3aa:	fab3 f383 	clz	r3, r3
 800b3ae:	b2db      	uxtb	r3, r3
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	069b      	lsls	r3, r3, #26
 800b3b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d109      	bne.n	800b3d8 <HAL_ADC_ConfigChannel+0x600>
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	0e9b      	lsrs	r3, r3, #26
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f003 031f 	and.w	r3, r3, #31
 800b3d0:	2101      	movs	r1, #1
 800b3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3d6:	e017      	b.n	800b408 <HAL_ADC_ConfigChannel+0x630>
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3de:	6a3b      	ldr	r3, [r7, #32]
 800b3e0:	fa93 f3a3 	rbit	r3, r3
 800b3e4:	61fb      	str	r3, [r7, #28]
  return result;
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d101      	bne.n	800b3f4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800b3f0:	2320      	movs	r3, #32
 800b3f2:	e003      	b.n	800b3fc <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f6:	fab3 f383 	clz	r3, r3
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	f003 031f 	and.w	r3, r3, #31
 800b402:	2101      	movs	r1, #1
 800b404:	fa01 f303 	lsl.w	r3, r1, r3
 800b408:	ea42 0103 	orr.w	r1, r2, r3
 800b40c:	683b      	ldr	r3, [r7, #0]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10d      	bne.n	800b434 <HAL_ADC_ConfigChannel+0x65c>
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	0e9b      	lsrs	r3, r3, #26
 800b41e:	3301      	adds	r3, #1
 800b420:	f003 021f 	and.w	r2, r3, #31
 800b424:	4613      	mov	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	3b1e      	subs	r3, #30
 800b42c:	051b      	lsls	r3, r3, #20
 800b42e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b432:	e01d      	b.n	800b470 <HAL_ADC_ConfigChannel+0x698>
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	fa93 f3a3 	rbit	r3, r3
 800b440:	613b      	str	r3, [r7, #16]
  return result;
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d103      	bne.n	800b454 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800b44c:	2320      	movs	r3, #32
 800b44e:	e005      	b.n	800b45c <HAL_ADC_ConfigChannel+0x684>
 800b450:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800b454:	69bb      	ldr	r3, [r7, #24]
 800b456:	fab3 f383 	clz	r3, r3
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	3301      	adds	r3, #1
 800b45e:	f003 021f 	and.w	r2, r3, #31
 800b462:	4613      	mov	r3, r2
 800b464:	005b      	lsls	r3, r3, #1
 800b466:	4413      	add	r3, r2
 800b468:	3b1e      	subs	r3, #30
 800b46a:	051b      	lsls	r3, r3, #20
 800b46c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800b470:	430b      	orrs	r3, r1
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	6892      	ldr	r2, [r2, #8]
 800b476:	4619      	mov	r1, r3
 800b478:	f7ff f8e6 	bl	800a648 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	4b3d      	ldr	r3, [pc, #244]	; (800b578 <HAL_ADC_ConfigChannel+0x7a0>)
 800b482:	4013      	ands	r3, r2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d06c      	beq.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b488:	483c      	ldr	r0, [pc, #240]	; (800b57c <HAL_ADC_ConfigChannel+0x7a4>)
 800b48a:	f7ff f83b 	bl	800a504 <LL_ADC_GetCommonPathInternalCh>
 800b48e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a3a      	ldr	r2, [pc, #232]	; (800b580 <HAL_ADC_ConfigChannel+0x7a8>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d127      	bne.n	800b4ec <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800b49c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d121      	bne.n	800b4ec <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a35      	ldr	r2, [pc, #212]	; (800b584 <HAL_ADC_ConfigChannel+0x7ac>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d157      	bne.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b4b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	482f      	ldr	r0, [pc, #188]	; (800b57c <HAL_ADC_ConfigChannel+0x7a4>)
 800b4be:	f7ff f80e 	bl	800a4de <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b4c2:	4b31      	ldr	r3, [pc, #196]	; (800b588 <HAL_ADC_ConfigChannel+0x7b0>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	099b      	lsrs	r3, r3, #6
 800b4c8:	4a30      	ldr	r2, [pc, #192]	; (800b58c <HAL_ADC_ConfigChannel+0x7b4>)
 800b4ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b4ce:	099b      	lsrs	r3, r3, #6
 800b4d0:	1c5a      	adds	r2, r3, #1
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b4dc:	e002      	b.n	800b4e4 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d1f9      	bne.n	800b4de <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800b4ea:	e03a      	b.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a27      	ldr	r2, [pc, #156]	; (800b590 <HAL_ADC_ConfigChannel+0x7b8>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d113      	bne.n	800b51e <HAL_ADC_ConfigChannel+0x746>
 800b4f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b4fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d10d      	bne.n	800b51e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a1f      	ldr	r2, [pc, #124]	; (800b584 <HAL_ADC_ConfigChannel+0x7ac>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d12a      	bne.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b50c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b514:	4619      	mov	r1, r3
 800b516:	4819      	ldr	r0, [pc, #100]	; (800b57c <HAL_ADC_ConfigChannel+0x7a4>)
 800b518:	f7fe ffe1 	bl	800a4de <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800b51c:	e021      	b.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a1c      	ldr	r2, [pc, #112]	; (800b594 <HAL_ADC_ConfigChannel+0x7bc>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d11c      	bne.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800b528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b52c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d116      	bne.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a12      	ldr	r2, [pc, #72]	; (800b584 <HAL_ADC_ConfigChannel+0x7ac>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d111      	bne.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800b53e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b542:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b546:	4619      	mov	r1, r3
 800b548:	480c      	ldr	r0, [pc, #48]	; (800b57c <HAL_ADC_ConfigChannel+0x7a4>)
 800b54a:	f7fe ffc8 	bl	800a4de <LL_ADC_SetCommonPathInternalCh>
 800b54e:	e008      	b.n	800b562 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b554:	f043 0220 	orr.w	r2, r3, #32
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800b55c:	2301      	movs	r3, #1
 800b55e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2200      	movs	r2, #0
 800b566:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800b56a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800b56e:	4618      	mov	r0, r3
 800b570:	37d8      	adds	r7, #216	; 0xd8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	80080000 	.word	0x80080000
 800b57c:	50040300 	.word	0x50040300
 800b580:	c7520000 	.word	0xc7520000
 800b584:	50040000 	.word	0x50040000
 800b588:	20000780 	.word	0x20000780
 800b58c:	053e2d63 	.word	0x053e2d63
 800b590:	cb840000 	.word	0xcb840000
 800b594:	80000001 	.word	0x80000001

0800b598 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b088      	sub	sp, #32
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
 800b5a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f7ff f95e 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800b5b4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7ff f97f 	bl	800a8be <LL_ADC_INJ_IsConversionOngoing>
 800b5c0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d103      	bne.n	800b5d0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	f000 8098 	beq.w	800b700 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68db      	ldr	r3, [r3, #12]
 800b5d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d02a      	beq.n	800b634 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	7e5b      	ldrb	r3, [r3, #25]
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d126      	bne.n	800b634 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7e1b      	ldrb	r3, [r3, #24]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d122      	bne.n	800b634 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b5f2:	e014      	b.n	800b61e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	4a45      	ldr	r2, [pc, #276]	; (800b70c <ADC_ConversionStop+0x174>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d90d      	bls.n	800b618 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b600:	f043 0210 	orr.w	r2, r3, #16
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b60c:	f043 0201 	orr.w	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b614:	2301      	movs	r3, #1
 800b616:	e074      	b.n	800b702 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	3301      	adds	r3, #1
 800b61c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b628:	2b40      	cmp	r3, #64	; 0x40
 800b62a:	d1e3      	bne.n	800b5f4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2240      	movs	r2, #64	; 0x40
 800b632:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	2b02      	cmp	r3, #2
 800b638:	d014      	beq.n	800b664 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f7ff f916 	bl	800a870 <LL_ADC_REG_IsConversionOngoing>
 800b644:	4603      	mov	r3, r0
 800b646:	2b00      	cmp	r3, #0
 800b648:	d00c      	beq.n	800b664 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f7ff f8d3 	bl	800a7fa <LL_ADC_IsDisableOngoing>
 800b654:	4603      	mov	r3, r0
 800b656:	2b00      	cmp	r3, #0
 800b658:	d104      	bne.n	800b664 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4618      	mov	r0, r3
 800b660:	f7ff f8f2 	bl	800a848 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	2b01      	cmp	r3, #1
 800b668:	d014      	beq.n	800b694 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4618      	mov	r0, r3
 800b670:	f7ff f925 	bl	800a8be <LL_ADC_INJ_IsConversionOngoing>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00c      	beq.n	800b694 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff f8bb 	bl	800a7fa <LL_ADC_IsDisableOngoing>
 800b684:	4603      	mov	r3, r0
 800b686:	2b00      	cmp	r3, #0
 800b688:	d104      	bne.n	800b694 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4618      	mov	r0, r3
 800b690:	f7ff f901 	bl	800a896 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	2b02      	cmp	r3, #2
 800b698:	d005      	beq.n	800b6a6 <ADC_ConversionStop+0x10e>
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	2b03      	cmp	r3, #3
 800b69e:	d105      	bne.n	800b6ac <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800b6a0:	230c      	movs	r3, #12
 800b6a2:	617b      	str	r3, [r7, #20]
        break;
 800b6a4:	e005      	b.n	800b6b2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800b6a6:	2308      	movs	r3, #8
 800b6a8:	617b      	str	r3, [r7, #20]
        break;
 800b6aa:	e002      	b.n	800b6b2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800b6ac:	2304      	movs	r3, #4
 800b6ae:	617b      	str	r3, [r7, #20]
        break;
 800b6b0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800b6b2:	f7fe fed1 	bl	800a458 <HAL_GetTick>
 800b6b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b6b8:	e01b      	b.n	800b6f2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800b6ba:	f7fe fecd 	bl	800a458 <HAL_GetTick>
 800b6be:	4602      	mov	r2, r0
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	1ad3      	subs	r3, r2, r3
 800b6c4:	2b05      	cmp	r3, #5
 800b6c6:	d914      	bls.n	800b6f2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	689a      	ldr	r2, [r3, #8]
 800b6ce:	697b      	ldr	r3, [r7, #20]
 800b6d0:	4013      	ands	r3, r2
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00d      	beq.n	800b6f2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6da:	f043 0210 	orr.w	r2, r3, #16
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6e6:	f043 0201 	orr.w	r2, r3, #1
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	e007      	b.n	800b702 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	689a      	ldr	r2, [r3, #8]
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d1dc      	bne.n	800b6ba <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800b700:	2300      	movs	r3, #0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3720      	adds	r7, #32
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	a33fffff 	.word	0xa33fffff

0800b710 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b084      	sub	sp, #16
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7ff f859 	bl	800a7d4 <LL_ADC_IsEnabled>
 800b722:	4603      	mov	r3, r0
 800b724:	2b00      	cmp	r3, #0
 800b726:	d14d      	bne.n	800b7c4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	689a      	ldr	r2, [r3, #8]
 800b72e:	4b28      	ldr	r3, [pc, #160]	; (800b7d0 <ADC_Enable+0xc0>)
 800b730:	4013      	ands	r3, r2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00d      	beq.n	800b752 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73a:	f043 0210 	orr.w	r2, r3, #16
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b746:	f043 0201 	orr.w	r2, r3, #1
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	e039      	b.n	800b7c6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff f814 	bl	800a784 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800b75c:	f7fe fe7c 	bl	800a458 <HAL_GetTick>
 800b760:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b762:	e028      	b.n	800b7b6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4618      	mov	r0, r3
 800b76a:	f7ff f833 	bl	800a7d4 <LL_ADC_IsEnabled>
 800b76e:	4603      	mov	r3, r0
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	4618      	mov	r0, r3
 800b77a:	f7ff f803 	bl	800a784 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800b77e:	f7fe fe6b 	bl	800a458 <HAL_GetTick>
 800b782:	4602      	mov	r2, r0
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	2b02      	cmp	r3, #2
 800b78a:	d914      	bls.n	800b7b6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0301 	and.w	r3, r3, #1
 800b796:	2b01      	cmp	r3, #1
 800b798:	d00d      	beq.n	800b7b6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79e:	f043 0210 	orr.w	r2, r3, #16
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7aa:	f043 0201 	orr.w	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e007      	b.n	800b7c6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	f003 0301 	and.w	r3, r3, #1
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d1cf      	bne.n	800b764 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b7c4:	2300      	movs	r3, #0
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	8000003f 	.word	0x8000003f

0800b7d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f7ff f80a 	bl	800a7fa <LL_ADC_IsDisableOngoing>
 800b7e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	f7fe fff1 	bl	800a7d4 <LL_ADC_IsEnabled>
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d047      	beq.n	800b888 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d144      	bne.n	800b888 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	f003 030d 	and.w	r3, r3, #13
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d10c      	bne.n	800b826 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4618      	mov	r0, r3
 800b812:	f7fe ffcb 	bl	800a7ac <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2203      	movs	r2, #3
 800b81c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800b81e:	f7fe fe1b 	bl	800a458 <HAL_GetTick>
 800b822:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b824:	e029      	b.n	800b87a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b82a:	f043 0210 	orr.w	r2, r3, #16
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b836:	f043 0201 	orr.w	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800b83e:	2301      	movs	r3, #1
 800b840:	e023      	b.n	800b88a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800b842:	f7fe fe09 	bl	800a458 <HAL_GetTick>
 800b846:	4602      	mov	r2, r0
 800b848:	68bb      	ldr	r3, [r7, #8]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	2b02      	cmp	r3, #2
 800b84e:	d914      	bls.n	800b87a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	689b      	ldr	r3, [r3, #8]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00d      	beq.n	800b87a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b862:	f043 0210 	orr.w	r2, r3, #16
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b86e:	f043 0201 	orr.w	r2, r3, #1
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800b876:	2301      	movs	r3, #1
 800b878:	e007      	b.n	800b88a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	689b      	ldr	r3, [r3, #8]
 800b880:	f003 0301 	and.w	r3, r3, #1
 800b884:	2b00      	cmp	r3, #0
 800b886:	d1dc      	bne.n	800b842 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800b888:	2300      	movs	r3, #0
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3710      	adds	r7, #16
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
	...

0800b894 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	f003 0307 	and.w	r3, r3, #7
 800b8a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b8a4:	4b0c      	ldr	r3, [pc, #48]	; (800b8d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b8a6:	68db      	ldr	r3, [r3, #12]
 800b8a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b8b0:	4013      	ands	r3, r2
 800b8b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b8bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b8c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b8c6:	4a04      	ldr	r2, [pc, #16]	; (800b8d8 <__NVIC_SetPriorityGrouping+0x44>)
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	60d3      	str	r3, [r2, #12]
}
 800b8cc:	bf00      	nop
 800b8ce:	3714      	adds	r7, #20
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d6:	4770      	bx	lr
 800b8d8:	e000ed00 	.word	0xe000ed00

0800b8dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b8dc:	b480      	push	{r7}
 800b8de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b8e0:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <__NVIC_GetPriorityGrouping+0x18>)
 800b8e2:	68db      	ldr	r3, [r3, #12]
 800b8e4:	0a1b      	lsrs	r3, r3, #8
 800b8e6:	f003 0307 	and.w	r3, r3, #7
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	e000ed00 	.word	0xe000ed00

0800b8f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b083      	sub	sp, #12
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b906:	2b00      	cmp	r3, #0
 800b908:	db0b      	blt.n	800b922 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	f003 021f 	and.w	r2, r3, #31
 800b910:	4907      	ldr	r1, [pc, #28]	; (800b930 <__NVIC_EnableIRQ+0x38>)
 800b912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b916:	095b      	lsrs	r3, r3, #5
 800b918:	2001      	movs	r0, #1
 800b91a:	fa00 f202 	lsl.w	r2, r0, r2
 800b91e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b922:	bf00      	nop
 800b924:	370c      	adds	r7, #12
 800b926:	46bd      	mov	sp, r7
 800b928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	e000e100 	.word	0xe000e100

0800b934 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	4603      	mov	r3, r0
 800b93c:	6039      	str	r1, [r7, #0]
 800b93e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b944:	2b00      	cmp	r3, #0
 800b946:	db0a      	blt.n	800b95e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b948:	683b      	ldr	r3, [r7, #0]
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	490c      	ldr	r1, [pc, #48]	; (800b980 <__NVIC_SetPriority+0x4c>)
 800b94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b952:	0112      	lsls	r2, r2, #4
 800b954:	b2d2      	uxtb	r2, r2
 800b956:	440b      	add	r3, r1
 800b958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b95c:	e00a      	b.n	800b974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	b2da      	uxtb	r2, r3
 800b962:	4908      	ldr	r1, [pc, #32]	; (800b984 <__NVIC_SetPriority+0x50>)
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	f003 030f 	and.w	r3, r3, #15
 800b96a:	3b04      	subs	r3, #4
 800b96c:	0112      	lsls	r2, r2, #4
 800b96e:	b2d2      	uxtb	r2, r2
 800b970:	440b      	add	r3, r1
 800b972:	761a      	strb	r2, [r3, #24]
}
 800b974:	bf00      	nop
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr
 800b980:	e000e100 	.word	0xe000e100
 800b984:	e000ed00 	.word	0xe000ed00

0800b988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b988:	b480      	push	{r7}
 800b98a:	b089      	sub	sp, #36	; 0x24
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f003 0307 	and.w	r3, r3, #7
 800b99a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	f1c3 0307 	rsb	r3, r3, #7
 800b9a2:	2b04      	cmp	r3, #4
 800b9a4:	bf28      	it	cs
 800b9a6:	2304      	movcs	r3, #4
 800b9a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	3304      	adds	r3, #4
 800b9ae:	2b06      	cmp	r3, #6
 800b9b0:	d902      	bls.n	800b9b8 <NVIC_EncodePriority+0x30>
 800b9b2:	69fb      	ldr	r3, [r7, #28]
 800b9b4:	3b03      	subs	r3, #3
 800b9b6:	e000      	b.n	800b9ba <NVIC_EncodePriority+0x32>
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9c6:	43da      	mvns	r2, r3
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	401a      	ands	r2, r3
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b9d0:	f04f 31ff 	mov.w	r1, #4294967295
 800b9d4:	697b      	ldr	r3, [r7, #20]
 800b9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800b9da:	43d9      	mvns	r1, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b9e0:	4313      	orrs	r3, r2
         );
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3724      	adds	r7, #36	; 0x24
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
	...

0800b9f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b082      	sub	sp, #8
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	3b01      	subs	r3, #1
 800b9fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ba00:	d301      	bcc.n	800ba06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ba02:	2301      	movs	r3, #1
 800ba04:	e00f      	b.n	800ba26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ba06:	4a0a      	ldr	r2, [pc, #40]	; (800ba30 <SysTick_Config+0x40>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ba0e:	210f      	movs	r1, #15
 800ba10:	f04f 30ff 	mov.w	r0, #4294967295
 800ba14:	f7ff ff8e 	bl	800b934 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ba18:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <SysTick_Config+0x40>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ba1e:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <SysTick_Config+0x40>)
 800ba20:	2207      	movs	r2, #7
 800ba22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ba24:	2300      	movs	r3, #0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
 800ba2e:	bf00      	nop
 800ba30:	e000e010 	.word	0xe000e010

0800ba34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7ff ff29 	bl	800b894 <__NVIC_SetPriorityGrouping>
}
 800ba42:	bf00      	nop
 800ba44:	3708      	adds	r7, #8
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b086      	sub	sp, #24
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	4603      	mov	r3, r0
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
 800ba56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800ba5c:	f7ff ff3e 	bl	800b8dc <__NVIC_GetPriorityGrouping>
 800ba60:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800ba62:	687a      	ldr	r2, [r7, #4]
 800ba64:	68b9      	ldr	r1, [r7, #8]
 800ba66:	6978      	ldr	r0, [r7, #20]
 800ba68:	f7ff ff8e 	bl	800b988 <NVIC_EncodePriority>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba72:	4611      	mov	r1, r2
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff ff5d 	bl	800b934 <__NVIC_SetPriority>
}
 800ba7a:	bf00      	nop
 800ba7c:	3718      	adds	r7, #24
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}

0800ba82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ba82:	b580      	push	{r7, lr}
 800ba84:	b082      	sub	sp, #8
 800ba86:	af00      	add	r7, sp, #0
 800ba88:	4603      	mov	r3, r0
 800ba8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800ba8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff ff31 	bl	800b8f8 <__NVIC_EnableIRQ>
}
 800ba96:	bf00      	nop
 800ba98:	3708      	adds	r7, #8
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	bd80      	pop	{r7, pc}

0800ba9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b082      	sub	sp, #8
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f7ff ffa2 	bl	800b9f0 <SysTick_Config>
 800baac:	4603      	mov	r3, r0
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3708      	adds	r7, #8
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
	...

0800bab8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d101      	bne.n	800baca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bac6:	2301      	movs	r3, #1
 800bac8:	e098      	b.n	800bbfc <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	461a      	mov	r2, r3
 800bad0:	4b4d      	ldr	r3, [pc, #308]	; (800bc08 <HAL_DMA_Init+0x150>)
 800bad2:	429a      	cmp	r2, r3
 800bad4:	d80f      	bhi.n	800baf6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	461a      	mov	r2, r3
 800badc:	4b4b      	ldr	r3, [pc, #300]	; (800bc0c <HAL_DMA_Init+0x154>)
 800bade:	4413      	add	r3, r2
 800bae0:	4a4b      	ldr	r2, [pc, #300]	; (800bc10 <HAL_DMA_Init+0x158>)
 800bae2:	fba2 2303 	umull	r2, r3, r2, r3
 800bae6:	091b      	lsrs	r3, r3, #4
 800bae8:	009a      	lsls	r2, r3, #2
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a48      	ldr	r2, [pc, #288]	; (800bc14 <HAL_DMA_Init+0x15c>)
 800baf2:	641a      	str	r2, [r3, #64]	; 0x40
 800baf4:	e00e      	b.n	800bb14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	4b46      	ldr	r3, [pc, #280]	; (800bc18 <HAL_DMA_Init+0x160>)
 800bafe:	4413      	add	r3, r2
 800bb00:	4a43      	ldr	r2, [pc, #268]	; (800bc10 <HAL_DMA_Init+0x158>)
 800bb02:	fba2 2303 	umull	r2, r3, r2, r3
 800bb06:	091b      	lsrs	r3, r3, #4
 800bb08:	009a      	lsls	r2, r3, #2
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a42      	ldr	r2, [pc, #264]	; (800bc1c <HAL_DMA_Init+0x164>)
 800bb12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2202      	movs	r2, #2
 800bb18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bb2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bb38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bb44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bb50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a1b      	ldr	r3, [r3, #32]
 800bb56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb6e:	d039      	beq.n	800bbe4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb74:	4a27      	ldr	r2, [pc, #156]	; (800bc14 <HAL_DMA_Init+0x15c>)
 800bb76:	4293      	cmp	r3, r2
 800bb78:	d11a      	bne.n	800bbb0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bb7a:	4b29      	ldr	r3, [pc, #164]	; (800bc20 <HAL_DMA_Init+0x168>)
 800bb7c:	681a      	ldr	r2, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb82:	f003 031c 	and.w	r3, r3, #28
 800bb86:	210f      	movs	r1, #15
 800bb88:	fa01 f303 	lsl.w	r3, r1, r3
 800bb8c:	43db      	mvns	r3, r3
 800bb8e:	4924      	ldr	r1, [pc, #144]	; (800bc20 <HAL_DMA_Init+0x168>)
 800bb90:	4013      	ands	r3, r2
 800bb92:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bb94:	4b22      	ldr	r3, [pc, #136]	; (800bc20 <HAL_DMA_Init+0x168>)
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6859      	ldr	r1, [r3, #4]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba0:	f003 031c 	and.w	r3, r3, #28
 800bba4:	fa01 f303 	lsl.w	r3, r1, r3
 800bba8:	491d      	ldr	r1, [pc, #116]	; (800bc20 <HAL_DMA_Init+0x168>)
 800bbaa:	4313      	orrs	r3, r2
 800bbac:	600b      	str	r3, [r1, #0]
 800bbae:	e019      	b.n	800bbe4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bbb0:	4b1c      	ldr	r3, [pc, #112]	; (800bc24 <HAL_DMA_Init+0x16c>)
 800bbb2:	681a      	ldr	r2, [r3, #0]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbb8:	f003 031c 	and.w	r3, r3, #28
 800bbbc:	210f      	movs	r1, #15
 800bbbe:	fa01 f303 	lsl.w	r3, r1, r3
 800bbc2:	43db      	mvns	r3, r3
 800bbc4:	4917      	ldr	r1, [pc, #92]	; (800bc24 <HAL_DMA_Init+0x16c>)
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800bbca:	4b16      	ldr	r3, [pc, #88]	; (800bc24 <HAL_DMA_Init+0x16c>)
 800bbcc:	681a      	ldr	r2, [r3, #0]
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6859      	ldr	r1, [r3, #4]
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbd6:	f003 031c 	and.w	r3, r3, #28
 800bbda:	fa01 f303 	lsl.w	r3, r1, r3
 800bbde:	4911      	ldr	r1, [pc, #68]	; (800bc24 <HAL_DMA_Init+0x16c>)
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3714      	adds	r7, #20
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	40020407 	.word	0x40020407
 800bc0c:	bffdfff8 	.word	0xbffdfff8
 800bc10:	cccccccd 	.word	0xcccccccd
 800bc14:	40020000 	.word	0x40020000
 800bc18:	bffdfbf8 	.word	0xbffdfbf8
 800bc1c:	40020400 	.word	0x40020400
 800bc20:	400200a8 	.word	0x400200a8
 800bc24:	400204a8 	.word	0x400204a8

0800bc28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	607a      	str	r2, [r7, #4]
 800bc34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc36:	2300      	movs	r3, #0
 800bc38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d101      	bne.n	800bc48 <HAL_DMA_Start_IT+0x20>
 800bc44:	2302      	movs	r3, #2
 800bc46:	e04b      	b.n	800bce0 <HAL_DMA_Start_IT+0xb8>
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d13a      	bne.n	800bcd2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2202      	movs	r2, #2
 800bc60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	681a      	ldr	r2, [r3, #0]
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f022 0201 	bic.w	r2, r2, #1
 800bc78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	687a      	ldr	r2, [r7, #4]
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	68f8      	ldr	r0, [r7, #12]
 800bc82:	f000 f95f 	bl	800bf44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d008      	beq.n	800bca0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	681a      	ldr	r2, [r3, #0]
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f042 020e 	orr.w	r2, r2, #14
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e00f      	b.n	800bcc0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f022 0204 	bic.w	r2, r2, #4
 800bcae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	681a      	ldr	r2, [r3, #0]
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f042 020a 	orr.w	r2, r2, #10
 800bcbe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	f042 0201 	orr.w	r2, r2, #1
 800bcce:	601a      	str	r2, [r3, #0]
 800bcd0:	e005      	b.n	800bcde <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bcda:	2302      	movs	r3, #2
 800bcdc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bcde:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce0:	4618      	mov	r0, r3
 800bce2:	3718      	adds	r7, #24
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bd80      	pop	{r7, pc}

0800bce8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b02      	cmp	r3, #2
 800bcfe:	d008      	beq.n	800bd12 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2204      	movs	r2, #4
 800bd04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	e022      	b.n	800bd58 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f022 020e 	bic.w	r2, r2, #14
 800bd20:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	681a      	ldr	r2, [r3, #0]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f022 0201 	bic.w	r2, r2, #1
 800bd30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd36:	f003 021c 	and.w	r2, r3, #28
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd3e:	2101      	movs	r1, #1
 800bd40:	fa01 f202 	lsl.w	r2, r1, r2
 800bd44:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800bd56:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr

0800bd64 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b084      	sub	sp, #16
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	2b02      	cmp	r3, #2
 800bd7a:	d005      	beq.n	800bd88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	73fb      	strb	r3, [r7, #15]
 800bd86:	e029      	b.n	800bddc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f022 020e 	bic.w	r2, r2, #14
 800bd96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f022 0201 	bic.w	r2, r2, #1
 800bda6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdac:	f003 021c 	and.w	r2, r3, #28
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb4:	2101      	movs	r1, #1
 800bdb6:	fa01 f202 	lsl.w	r2, r1, r2
 800bdba:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d003      	beq.n	800bddc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	4798      	blx	r3
    }
  }
  return status;
 800bddc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdde:	4618      	mov	r0, r3
 800bde0:	3710      	adds	r7, #16
 800bde2:	46bd      	mov	sp, r7
 800bde4:	bd80      	pop	{r7, pc}

0800bde6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bde6:	b580      	push	{r7, lr}
 800bde8:	b084      	sub	sp, #16
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be02:	f003 031c 	and.w	r3, r3, #28
 800be06:	2204      	movs	r2, #4
 800be08:	409a      	lsls	r2, r3
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	4013      	ands	r3, r2
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d026      	beq.n	800be60 <HAL_DMA_IRQHandler+0x7a>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	f003 0304 	and.w	r3, r3, #4
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d021      	beq.n	800be60 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	681b      	ldr	r3, [r3, #0]
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	2b00      	cmp	r3, #0
 800be28:	d107      	bne.n	800be3a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 0204 	bic.w	r2, r2, #4
 800be38:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be3e:	f003 021c 	and.w	r2, r3, #28
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be46:	2104      	movs	r1, #4
 800be48:	fa01 f202 	lsl.w	r2, r1, r2
 800be4c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be52:	2b00      	cmp	r3, #0
 800be54:	d071      	beq.n	800bf3a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800be5e:	e06c      	b.n	800bf3a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be64:	f003 031c 	and.w	r3, r3, #28
 800be68:	2202      	movs	r2, #2
 800be6a:	409a      	lsls	r2, r3
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4013      	ands	r3, r2
 800be70:	2b00      	cmp	r3, #0
 800be72:	d02e      	beq.n	800bed2 <HAL_DMA_IRQHandler+0xec>
 800be74:	68bb      	ldr	r3, [r7, #8]
 800be76:	f003 0302 	and.w	r3, r3, #2
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d029      	beq.n	800bed2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 0320 	and.w	r3, r3, #32
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d10b      	bne.n	800bea4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	681a      	ldr	r2, [r3, #0]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f022 020a 	bic.w	r2, r2, #10
 800be9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2201      	movs	r2, #1
 800bea0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bea8:	f003 021c 	and.w	r2, r3, #28
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb0:	2102      	movs	r1, #2
 800beb2:	fa01 f202 	lsl.w	r2, r1, r2
 800beb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2200      	movs	r2, #0
 800bebc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d038      	beq.n	800bf3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800bed0:	e033      	b.n	800bf3a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bed6:	f003 031c 	and.w	r3, r3, #28
 800beda:	2208      	movs	r2, #8
 800bedc:	409a      	lsls	r2, r3
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	4013      	ands	r3, r2
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d02a      	beq.n	800bf3c <HAL_DMA_IRQHandler+0x156>
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	f003 0308 	and.w	r3, r3, #8
 800beec:	2b00      	cmp	r3, #0
 800beee:	d025      	beq.n	800bf3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	f022 020e 	bic.w	r2, r2, #14
 800befe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf04:	f003 021c 	and.w	r2, r3, #28
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	fa01 f202 	lsl.w	r2, r1, r2
 800bf12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2201      	movs	r2, #1
 800bf18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	2201      	movs	r2, #1
 800bf1e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d004      	beq.n	800bf3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800bf3a:	bf00      	nop
 800bf3c:	bf00      	nop
}
 800bf3e:	3710      	adds	r7, #16
 800bf40:	46bd      	mov	sp, r7
 800bf42:	bd80      	pop	{r7, pc}

0800bf44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	60f8      	str	r0, [r7, #12]
 800bf4c:	60b9      	str	r1, [r7, #8]
 800bf4e:	607a      	str	r2, [r7, #4]
 800bf50:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf56:	f003 021c 	and.w	r2, r3, #28
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf5e:	2101      	movs	r1, #1
 800bf60:	fa01 f202 	lsl.w	r2, r1, r2
 800bf64:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	683a      	ldr	r2, [r7, #0]
 800bf6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	689b      	ldr	r3, [r3, #8]
 800bf72:	2b10      	cmp	r3, #16
 800bf74:	d108      	bne.n	800bf88 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	687a      	ldr	r2, [r7, #4]
 800bf7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68ba      	ldr	r2, [r7, #8]
 800bf84:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800bf86:	e007      	b.n	800bf98 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	60da      	str	r2, [r3, #12]
}
 800bf98:	bf00      	nop
 800bf9a:	3714      	adds	r7, #20
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b086      	sub	sp, #24
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bfb6:	4b2f      	ldr	r3, [pc, #188]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	2b01      	cmp	r3, #1
 800bfbc:	d101      	bne.n	800bfc2 <HAL_FLASH_Program+0x1e>
 800bfbe:	2302      	movs	r3, #2
 800bfc0:	e053      	b.n	800c06a <HAL_FLASH_Program+0xc6>
 800bfc2:	4b2c      	ldr	r3, [pc, #176]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800bfc8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bfcc:	f000 f888 	bl	800c0e0 <FLASH_WaitForLastOperation>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800bfd4:	7dfb      	ldrb	r3, [r7, #23]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d143      	bne.n	800c062 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bfda:	4b26      	ldr	r3, [pc, #152]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800bfdc:	2200      	movs	r2, #0
 800bfde:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800bfe0:	4b25      	ldr	r3, [pc, #148]	; (800c078 <HAL_FLASH_Program+0xd4>)
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d009      	beq.n	800c000 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800bfec:	4b22      	ldr	r3, [pc, #136]	; (800c078 <HAL_FLASH_Program+0xd4>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a21      	ldr	r2, [pc, #132]	; (800c078 <HAL_FLASH_Program+0xd4>)
 800bff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bff6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800bff8:	4b1e      	ldr	r3, [pc, #120]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800bffa:	2202      	movs	r2, #2
 800bffc:	771a      	strb	r2, [r3, #28]
 800bffe:	e002      	b.n	800c006 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c000:	4b1c      	ldr	r3, [pc, #112]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800c002:	2200      	movs	r2, #0
 800c004:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d107      	bne.n	800c01c <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800c00c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c010:	68b8      	ldr	r0, [r7, #8]
 800c012:	f000 f8bd 	bl	800c190 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800c016:	2301      	movs	r3, #1
 800c018:	613b      	str	r3, [r7, #16]
 800c01a:	e010      	b.n	800c03e <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	d002      	beq.n	800c028 <HAL_FLASH_Program+0x84>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	2b02      	cmp	r3, #2
 800c026:	d10a      	bne.n	800c03e <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	4619      	mov	r1, r3
 800c02c:	68b8      	ldr	r0, [r7, #8]
 800c02e:	f000 f8d5 	bl	800c1dc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b02      	cmp	r3, #2
 800c036:	d102      	bne.n	800c03e <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800c038:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c03c:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c03e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c042:	f000 f84d 	bl	800c0e0 <FLASH_WaitForLastOperation>
 800c046:	4603      	mov	r3, r0
 800c048:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800c04a:	693b      	ldr	r3, [r7, #16]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d006      	beq.n	800c05e <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800c050:	4b09      	ldr	r3, [pc, #36]	; (800c078 <HAL_FLASH_Program+0xd4>)
 800c052:	695a      	ldr	r2, [r3, #20]
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	43db      	mvns	r3, r3
 800c058:	4907      	ldr	r1, [pc, #28]	; (800c078 <HAL_FLASH_Program+0xd4>)
 800c05a:	4013      	ands	r3, r2
 800c05c:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c05e:	f000 f9d5 	bl	800c40c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c062:	4b04      	ldr	r3, [pc, #16]	; (800c074 <HAL_FLASH_Program+0xd0>)
 800c064:	2200      	movs	r2, #0
 800c066:	701a      	strb	r2, [r3, #0]

  return status;
 800c068:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3718      	adds	r7, #24
 800c06e:	46bd      	mov	sp, r7
 800c070:	bd80      	pop	{r7, pc}
 800c072:	bf00      	nop
 800c074:	2000078c 	.word	0x2000078c
 800c078:	40022000 	.word	0x40022000

0800c07c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c07c:	b480      	push	{r7}
 800c07e:	b083      	sub	sp, #12
 800c080:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c082:	2300      	movs	r3, #0
 800c084:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c086:	4b0b      	ldr	r3, [pc, #44]	; (800c0b4 <HAL_FLASH_Unlock+0x38>)
 800c088:	695b      	ldr	r3, [r3, #20]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	da0b      	bge.n	800c0a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c08e:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <HAL_FLASH_Unlock+0x38>)
 800c090:	4a09      	ldr	r2, [pc, #36]	; (800c0b8 <HAL_FLASH_Unlock+0x3c>)
 800c092:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c094:	4b07      	ldr	r3, [pc, #28]	; (800c0b4 <HAL_FLASH_Unlock+0x38>)
 800c096:	4a09      	ldr	r2, [pc, #36]	; (800c0bc <HAL_FLASH_Unlock+0x40>)
 800c098:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <HAL_FLASH_Unlock+0x38>)
 800c09c:	695b      	ldr	r3, [r3, #20]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da01      	bge.n	800c0a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c0a6:	79fb      	ldrb	r3, [r7, #7]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	370c      	adds	r7, #12
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	40022000 	.word	0x40022000
 800c0b8:	45670123 	.word	0x45670123
 800c0bc:	cdef89ab 	.word	0xcdef89ab

0800c0c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c0c4:	4b05      	ldr	r3, [pc, #20]	; (800c0dc <HAL_FLASH_Lock+0x1c>)
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	4a04      	ldr	r2, [pc, #16]	; (800c0dc <HAL_FLASH_Lock+0x1c>)
 800c0ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0ce:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c0d0:	2300      	movs	r3, #0
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	40022000 	.word	0x40022000

0800c0e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b084      	sub	sp, #16
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800c0e8:	f7fe f9b6 	bl	800a458 <HAL_GetTick>
 800c0ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c0ee:	e00d      	b.n	800c10c <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f6:	d009      	beq.n	800c10c <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800c0f8:	f7fe f9ae 	bl	800a458 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	687a      	ldr	r2, [r7, #4]
 800c104:	429a      	cmp	r2, r3
 800c106:	d801      	bhi.n	800c10c <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e036      	b.n	800c17a <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c10c:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c114:	2b00      	cmp	r3, #0
 800c116:	d1eb      	bne.n	800c0f0 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c118:	4b1a      	ldr	r3, [pc, #104]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c11a:	691a      	ldr	r2, [r3, #16]
 800c11c:	4b1a      	ldr	r3, [pc, #104]	; (800c188 <FLASH_WaitForLastOperation+0xa8>)
 800c11e:	4013      	ands	r3, r2
 800c120:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d01e      	beq.n	800c166 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c128:	4b18      	ldr	r3, [pc, #96]	; (800c18c <FLASH_WaitForLastOperation+0xac>)
 800c12a:	685a      	ldr	r2, [r3, #4]
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	4313      	orrs	r3, r2
 800c130:	4a16      	ldr	r2, [pc, #88]	; (800c18c <FLASH_WaitForLastOperation+0xac>)
 800c132:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <FLASH_WaitForLastOperation+0x6e>
 800c13e:	4b11      	ldr	r3, [pc, #68]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c140:	699a      	ldr	r2, [r3, #24]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c148:	490e      	ldr	r1, [pc, #56]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c14a:	4313      	orrs	r3, r2
 800c14c:	618b      	str	r3, [r1, #24]
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c154:	2b00      	cmp	r3, #0
 800c156:	d004      	beq.n	800c162 <FLASH_WaitForLastOperation+0x82>
 800c158:	4a0a      	ldr	r2, [pc, #40]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c160:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800c162:	2301      	movs	r3, #1
 800c164:	e009      	b.n	800c17a <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c166:	4b07      	ldr	r3, [pc, #28]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c172:	4b04      	ldr	r3, [pc, #16]	; (800c184 <FLASH_WaitForLastOperation+0xa4>)
 800c174:	2201      	movs	r2, #1
 800c176:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	40022000 	.word	0x40022000
 800c188:	0002c3fa 	.word	0x0002c3fa
 800c18c:	2000078c 	.word	0x2000078c

0800c190 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c190:	b480      	push	{r7}
 800c192:	b085      	sub	sp, #20
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c19c:	4b0e      	ldr	r3, [pc, #56]	; (800c1d8 <FLASH_Program_DoubleWord+0x48>)
 800c19e:	695b      	ldr	r3, [r3, #20]
 800c1a0:	4a0d      	ldr	r2, [pc, #52]	; (800c1d8 <FLASH_Program_DoubleWord+0x48>)
 800c1a2:	f043 0301 	orr.w	r3, r3, #1
 800c1a6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	683a      	ldr	r2, [r7, #0]
 800c1ac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800c1ae:	f3bf 8f6f 	isb	sy
}
 800c1b2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800c1b4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c1b8:	f04f 0200 	mov.w	r2, #0
 800c1bc:	f04f 0300 	mov.w	r3, #0
 800c1c0:	000a      	movs	r2, r1
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	68f9      	ldr	r1, [r7, #12]
 800c1c6:	3104      	adds	r1, #4
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	600b      	str	r3, [r1, #0]
}
 800c1cc:	bf00      	nop
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr
 800c1d8:	40022000 	.word	0x40022000

0800c1dc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b089      	sub	sp, #36	; 0x24
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c1e6:	2340      	movs	r3, #64	; 0x40
 800c1e8:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c1f2:	4b14      	ldr	r3, [pc, #80]	; (800c244 <FLASH_Program_Fast+0x68>)
 800c1f4:	695b      	ldr	r3, [r3, #20]
 800c1f6:	4a13      	ldr	r2, [pc, #76]	; (800c244 <FLASH_Program_Fast+0x68>)
 800c1f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c1fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1fe:	f3ef 8310 	mrs	r3, PRIMASK
 800c202:	60fb      	str	r3, [r7, #12]
  return(result);
 800c204:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800c206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c208:	b672      	cpsid	i
}
 800c20a:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	681a      	ldr	r2, [r3, #0]
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	3304      	adds	r3, #4
 800c218:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	3304      	adds	r3, #4
 800c21e:	617b      	str	r3, [r7, #20]
    row_index--;
 800c220:	7ffb      	ldrb	r3, [r7, #31]
 800c222:	3b01      	subs	r3, #1
 800c224:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800c226:	7ffb      	ldrb	r3, [r7, #31]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d1ef      	bne.n	800c20c <FLASH_Program_Fast+0x30>
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	f383 8810 	msr	PRIMASK, r3
}
 800c236:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c238:	bf00      	nop
 800c23a:	3724      	adds	r7, #36	; 0x24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	40022000 	.word	0x40022000

0800c248 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c252:	4b4b      	ldr	r3, [pc, #300]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	2b01      	cmp	r3, #1
 800c258:	d101      	bne.n	800c25e <HAL_FLASHEx_Erase+0x16>
 800c25a:	2302      	movs	r3, #2
 800c25c:	e08b      	b.n	800c376 <HAL_FLASHEx_Erase+0x12e>
 800c25e:	4b48      	ldr	r3, [pc, #288]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c260:	2201      	movs	r2, #1
 800c262:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c264:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c268:	f7ff ff3a 	bl	800c0e0 <FLASH_WaitForLastOperation>
 800c26c:	4603      	mov	r3, r0
 800c26e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c270:	7bfb      	ldrb	r3, [r7, #15]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d17b      	bne.n	800c36e <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c276:	4b42      	ldr	r3, [pc, #264]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c278:	2200      	movs	r2, #0
 800c27a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c27c:	4b41      	ldr	r3, [pc, #260]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c284:	2b00      	cmp	r3, #0
 800c286:	d019      	beq.n	800c2bc <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c288:	4b3e      	ldr	r3, [pc, #248]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a3d      	ldr	r2, [pc, #244]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c28e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c292:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c294:	4b3b      	ldr	r3, [pc, #236]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d009      	beq.n	800c2b4 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c2a0:	4b38      	ldr	r3, [pc, #224]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4a37      	ldr	r2, [pc, #220]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c2a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2aa:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c2ac:	4b34      	ldr	r3, [pc, #208]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c2ae:	2203      	movs	r2, #3
 800c2b0:	771a      	strb	r2, [r3, #28]
 800c2b2:	e016      	b.n	800c2e2 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c2b4:	4b32      	ldr	r3, [pc, #200]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	771a      	strb	r2, [r3, #28]
 800c2ba:	e012      	b.n	800c2e2 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c2bc:	4b31      	ldr	r3, [pc, #196]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d009      	beq.n	800c2dc <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c2c8:	4b2e      	ldr	r3, [pc, #184]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	4a2d      	ldr	r2, [pc, #180]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c2ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2d2:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c2d4:	4b2a      	ldr	r3, [pc, #168]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	771a      	strb	r2, [r3, #28]
 800c2da:	e002      	b.n	800c2e2 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c2dc:	4b28      	ldr	r3, [pc, #160]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c2de:	2200      	movs	r2, #0
 800c2e0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d111      	bne.n	800c30e <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f84a 	bl	800c388 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c2f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c2f8:	f7ff fef2 	bl	800c0e0 <FLASH_WaitForLastOperation>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800c300:	4b20      	ldr	r3, [pc, #128]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c302:	695b      	ldr	r3, [r3, #20]
 800c304:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c306:	f023 0304 	bic.w	r3, r3, #4
 800c30a:	6153      	str	r3, [r2, #20]
 800c30c:	e02d      	b.n	800c36a <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	f04f 32ff 	mov.w	r2, #4294967295
 800c314:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	60bb      	str	r3, [r7, #8]
 800c31c:	e01d      	b.n	800c35a <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	4619      	mov	r1, r3
 800c324:	68b8      	ldr	r0, [r7, #8]
 800c326:	f000 f84d 	bl	800c3c4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c32a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c32e:	f7ff fed7 	bl	800c0e0 <FLASH_WaitForLastOperation>
 800c332:	4603      	mov	r3, r0
 800c334:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c336:	4b13      	ldr	r3, [pc, #76]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c338:	695b      	ldr	r3, [r3, #20]
 800c33a:	4a12      	ldr	r2, [pc, #72]	; (800c384 <HAL_FLASHEx_Erase+0x13c>)
 800c33c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800c340:	f023 0302 	bic.w	r3, r3, #2
 800c344:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d003      	beq.n	800c354 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	68ba      	ldr	r2, [r7, #8]
 800c350:	601a      	str	r2, [r3, #0]
          break;
 800c352:	e00a      	b.n	800c36a <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	3301      	adds	r3, #1
 800c358:	60bb      	str	r3, [r7, #8]
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	689a      	ldr	r2, [r3, #8]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	68db      	ldr	r3, [r3, #12]
 800c362:	4413      	add	r3, r2
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	429a      	cmp	r2, r3
 800c368:	d3d9      	bcc.n	800c31e <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c36a:	f000 f84f 	bl	800c40c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c36e:	4b04      	ldr	r3, [pc, #16]	; (800c380 <HAL_FLASHEx_Erase+0x138>)
 800c370:	2200      	movs	r2, #0
 800c372:	701a      	strb	r2, [r3, #0]

  return status;
 800c374:	7bfb      	ldrb	r3, [r7, #15]
}
 800c376:	4618      	mov	r0, r3
 800c378:	3710      	adds	r7, #16
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	2000078c 	.word	0x2000078c
 800c384:	40022000 	.word	0x40022000

0800c388 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800c388:	b480      	push	{r7}
 800c38a:	b083      	sub	sp, #12
 800c38c:	af00      	add	r7, sp, #0
 800c38e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f003 0301 	and.w	r3, r3, #1
 800c396:	2b00      	cmp	r3, #0
 800c398:	d005      	beq.n	800c3a6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800c39a:	4b09      	ldr	r3, [pc, #36]	; (800c3c0 <FLASH_MassErase+0x38>)
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	4a08      	ldr	r2, [pc, #32]	; (800c3c0 <FLASH_MassErase+0x38>)
 800c3a0:	f043 0304 	orr.w	r3, r3, #4
 800c3a4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c3a6:	4b06      	ldr	r3, [pc, #24]	; (800c3c0 <FLASH_MassErase+0x38>)
 800c3a8:	695b      	ldr	r3, [r3, #20]
 800c3aa:	4a05      	ldr	r2, [pc, #20]	; (800c3c0 <FLASH_MassErase+0x38>)
 800c3ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3b0:	6153      	str	r3, [r2, #20]
}
 800c3b2:	bf00      	nop
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr
 800c3be:	bf00      	nop
 800c3c0:	40022000 	.word	0x40022000

0800c3c4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
 800c3cc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800c3ce:	4b0e      	ldr	r3, [pc, #56]	; (800c408 <FLASH_PageErase+0x44>)
 800c3d0:	695b      	ldr	r3, [r3, #20]
 800c3d2:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	00db      	lsls	r3, r3, #3
 800c3da:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800c3de:	490a      	ldr	r1, [pc, #40]	; (800c408 <FLASH_PageErase+0x44>)
 800c3e0:	4313      	orrs	r3, r2
 800c3e2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c3e4:	4b08      	ldr	r3, [pc, #32]	; (800c408 <FLASH_PageErase+0x44>)
 800c3e6:	695b      	ldr	r3, [r3, #20]
 800c3e8:	4a07      	ldr	r2, [pc, #28]	; (800c408 <FLASH_PageErase+0x44>)
 800c3ea:	f043 0302 	orr.w	r3, r3, #2
 800c3ee:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c3f0:	4b05      	ldr	r3, [pc, #20]	; (800c408 <FLASH_PageErase+0x44>)
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	4a04      	ldr	r2, [pc, #16]	; (800c408 <FLASH_PageErase+0x44>)
 800c3f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3fa:	6153      	str	r3, [r2, #20]
}
 800c3fc:	bf00      	nop
 800c3fe:	370c      	adds	r7, #12
 800c400:	46bd      	mov	sp, r7
 800c402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c406:	4770      	bx	lr
 800c408:	40022000 	.word	0x40022000

0800c40c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800c412:	4b1e      	ldr	r3, [pc, #120]	; (800c48c <FLASH_FlushCaches+0x80>)
 800c414:	7f1b      	ldrb	r3, [r3, #28]
 800c416:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800c418:	79fb      	ldrb	r3, [r7, #7]
 800c41a:	2b01      	cmp	r3, #1
 800c41c:	d002      	beq.n	800c424 <FLASH_FlushCaches+0x18>
 800c41e:	79fb      	ldrb	r3, [r7, #7]
 800c420:	2b03      	cmp	r3, #3
 800c422:	d111      	bne.n	800c448 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c424:	4b1a      	ldr	r3, [pc, #104]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a19      	ldr	r2, [pc, #100]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c42a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	4b17      	ldr	r3, [pc, #92]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	4a16      	ldr	r2, [pc, #88]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c43a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c43c:	4b14      	ldr	r3, [pc, #80]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a13      	ldr	r2, [pc, #76]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c446:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d002      	beq.n	800c454 <FLASH_FlushCaches+0x48>
 800c44e:	79fb      	ldrb	r3, [r7, #7]
 800c450:	2b03      	cmp	r3, #3
 800c452:	d111      	bne.n	800c478 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c454:	4b0e      	ldr	r3, [pc, #56]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	4a0d      	ldr	r2, [pc, #52]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c45a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c45e:	6013      	str	r3, [r2, #0]
 800c460:	4b0b      	ldr	r3, [pc, #44]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	4a0a      	ldr	r2, [pc, #40]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c466:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c46a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c46c:	4b08      	ldr	r3, [pc, #32]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4a07      	ldr	r2, [pc, #28]	; (800c490 <FLASH_FlushCaches+0x84>)
 800c472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c476:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c478:	4b04      	ldr	r3, [pc, #16]	; (800c48c <FLASH_FlushCaches+0x80>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	771a      	strb	r2, [r3, #28]
}
 800c47e:	bf00      	nop
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	2000078c 	.word	0x2000078c
 800c490:	40022000 	.word	0x40022000

0800c494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c49e:	2300      	movs	r3, #0
 800c4a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c4a2:	e154      	b.n	800c74e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	681a      	ldr	r2, [r3, #0]
 800c4a8:	2101      	movs	r1, #1
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c4b0:	4013      	ands	r3, r2
 800c4b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	f000 8146 	beq.w	800c748 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	2b01      	cmp	r3, #1
 800c4c2:	d00b      	beq.n	800c4dc <HAL_GPIO_Init+0x48>
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	685b      	ldr	r3, [r3, #4]
 800c4c8:	2b02      	cmp	r3, #2
 800c4ca:	d007      	beq.n	800c4dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c4cc:	683b      	ldr	r3, [r7, #0]
 800c4ce:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c4d0:	2b11      	cmp	r3, #17
 800c4d2:	d003      	beq.n	800c4dc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	2b12      	cmp	r3, #18
 800c4da:	d130      	bne.n	800c53e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	689b      	ldr	r3, [r3, #8]
 800c4e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	005b      	lsls	r3, r3, #1
 800c4e6:	2203      	movs	r2, #3
 800c4e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c4ec:	43db      	mvns	r3, r3
 800c4ee:	693a      	ldr	r2, [r7, #16]
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	68da      	ldr	r2, [r3, #12]
 800c4f8:	697b      	ldr	r3, [r7, #20]
 800c4fa:	005b      	lsls	r3, r3, #1
 800c4fc:	fa02 f303 	lsl.w	r3, r2, r3
 800c500:	693a      	ldr	r2, [r7, #16]
 800c502:	4313      	orrs	r3, r2
 800c504:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	693a      	ldr	r2, [r7, #16]
 800c50a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c512:	2201      	movs	r2, #1
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	fa02 f303 	lsl.w	r3, r2, r3
 800c51a:	43db      	mvns	r3, r3
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	4013      	ands	r3, r2
 800c520:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800c522:	683b      	ldr	r3, [r7, #0]
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	091b      	lsrs	r3, r3, #4
 800c528:	f003 0201 	and.w	r2, r3, #1
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	fa02 f303 	lsl.w	r3, r2, r3
 800c532:	693a      	ldr	r2, [r7, #16]
 800c534:	4313      	orrs	r3, r2
 800c536:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	693a      	ldr	r2, [r7, #16]
 800c53c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	68db      	ldr	r3, [r3, #12]
 800c542:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	2203      	movs	r2, #3
 800c54a:	fa02 f303 	lsl.w	r3, r2, r3
 800c54e:	43db      	mvns	r3, r3
 800c550:	693a      	ldr	r2, [r7, #16]
 800c552:	4013      	ands	r3, r2
 800c554:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	689a      	ldr	r2, [r3, #8]
 800c55a:	697b      	ldr	r3, [r7, #20]
 800c55c:	005b      	lsls	r3, r3, #1
 800c55e:	fa02 f303 	lsl.w	r3, r2, r3
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	4313      	orrs	r3, r2
 800c566:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	693a      	ldr	r2, [r7, #16]
 800c56c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	2b02      	cmp	r3, #2
 800c574:	d003      	beq.n	800c57e <HAL_GPIO_Init+0xea>
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	685b      	ldr	r3, [r3, #4]
 800c57a:	2b12      	cmp	r3, #18
 800c57c:	d123      	bne.n	800c5c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	08da      	lsrs	r2, r3, #3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3208      	adds	r2, #8
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	f003 0307 	and.w	r3, r3, #7
 800c592:	009b      	lsls	r3, r3, #2
 800c594:	220f      	movs	r2, #15
 800c596:	fa02 f303 	lsl.w	r3, r2, r3
 800c59a:	43db      	mvns	r3, r3
 800c59c:	693a      	ldr	r2, [r7, #16]
 800c59e:	4013      	ands	r3, r2
 800c5a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	691a      	ldr	r2, [r3, #16]
 800c5a6:	697b      	ldr	r3, [r7, #20]
 800c5a8:	f003 0307 	and.w	r3, r3, #7
 800c5ac:	009b      	lsls	r3, r3, #2
 800c5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c5b2:	693a      	ldr	r2, [r7, #16]
 800c5b4:	4313      	orrs	r3, r2
 800c5b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800c5b8:	697b      	ldr	r3, [r7, #20]
 800c5ba:	08da      	lsrs	r2, r3, #3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	3208      	adds	r2, #8
 800c5c0:	6939      	ldr	r1, [r7, #16]
 800c5c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800c5cc:	697b      	ldr	r3, [r7, #20]
 800c5ce:	005b      	lsls	r3, r3, #1
 800c5d0:	2203      	movs	r2, #3
 800c5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d6:	43db      	mvns	r3, r3
 800c5d8:	693a      	ldr	r2, [r7, #16]
 800c5da:	4013      	ands	r3, r2
 800c5dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	f003 0203 	and.w	r2, r3, #3
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	005b      	lsls	r3, r3, #1
 800c5ea:	fa02 f303 	lsl.w	r3, r2, r3
 800c5ee:	693a      	ldr	r2, [r7, #16]
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c602:	2b00      	cmp	r3, #0
 800c604:	f000 80a0 	beq.w	800c748 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c608:	4b58      	ldr	r3, [pc, #352]	; (800c76c <HAL_GPIO_Init+0x2d8>)
 800c60a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c60c:	4a57      	ldr	r2, [pc, #348]	; (800c76c <HAL_GPIO_Init+0x2d8>)
 800c60e:	f043 0301 	orr.w	r3, r3, #1
 800c612:	6613      	str	r3, [r2, #96]	; 0x60
 800c614:	4b55      	ldr	r3, [pc, #340]	; (800c76c <HAL_GPIO_Init+0x2d8>)
 800c616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c618:	f003 0301 	and.w	r3, r3, #1
 800c61c:	60bb      	str	r3, [r7, #8]
 800c61e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800c620:	4a53      	ldr	r2, [pc, #332]	; (800c770 <HAL_GPIO_Init+0x2dc>)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	089b      	lsrs	r3, r3, #2
 800c626:	3302      	adds	r3, #2
 800c628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c62c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f003 0303 	and.w	r3, r3, #3
 800c634:	009b      	lsls	r3, r3, #2
 800c636:	220f      	movs	r2, #15
 800c638:	fa02 f303 	lsl.w	r3, r2, r3
 800c63c:	43db      	mvns	r3, r3
 800c63e:	693a      	ldr	r2, [r7, #16]
 800c640:	4013      	ands	r3, r2
 800c642:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c64a:	d019      	beq.n	800c680 <HAL_GPIO_Init+0x1ec>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a49      	ldr	r2, [pc, #292]	; (800c774 <HAL_GPIO_Init+0x2e0>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d013      	beq.n	800c67c <HAL_GPIO_Init+0x1e8>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a48      	ldr	r2, [pc, #288]	; (800c778 <HAL_GPIO_Init+0x2e4>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d00d      	beq.n	800c678 <HAL_GPIO_Init+0x1e4>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a47      	ldr	r2, [pc, #284]	; (800c77c <HAL_GPIO_Init+0x2e8>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d007      	beq.n	800c674 <HAL_GPIO_Init+0x1e0>
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4a46      	ldr	r2, [pc, #280]	; (800c780 <HAL_GPIO_Init+0x2ec>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d101      	bne.n	800c670 <HAL_GPIO_Init+0x1dc>
 800c66c:	2304      	movs	r3, #4
 800c66e:	e008      	b.n	800c682 <HAL_GPIO_Init+0x1ee>
 800c670:	2307      	movs	r3, #7
 800c672:	e006      	b.n	800c682 <HAL_GPIO_Init+0x1ee>
 800c674:	2303      	movs	r3, #3
 800c676:	e004      	b.n	800c682 <HAL_GPIO_Init+0x1ee>
 800c678:	2302      	movs	r3, #2
 800c67a:	e002      	b.n	800c682 <HAL_GPIO_Init+0x1ee>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e000      	b.n	800c682 <HAL_GPIO_Init+0x1ee>
 800c680:	2300      	movs	r3, #0
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	f002 0203 	and.w	r2, r2, #3
 800c688:	0092      	lsls	r2, r2, #2
 800c68a:	4093      	lsls	r3, r2
 800c68c:	693a      	ldr	r2, [r7, #16]
 800c68e:	4313      	orrs	r3, r2
 800c690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800c692:	4937      	ldr	r1, [pc, #220]	; (800c770 <HAL_GPIO_Init+0x2dc>)
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	089b      	lsrs	r3, r3, #2
 800c698:	3302      	adds	r3, #2
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c6a0:	4b38      	ldr	r3, [pc, #224]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	43db      	mvns	r3, r3
 800c6aa:	693a      	ldr	r2, [r7, #16]
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d003      	beq.n	800c6c4 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c6c4:	4a2f      	ldr	r2, [pc, #188]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c6c6:	693b      	ldr	r3, [r7, #16]
 800c6c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c6ca:	4b2e      	ldr	r3, [pc, #184]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c6cc:	685b      	ldr	r3, [r3, #4]
 800c6ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	43db      	mvns	r3, r3
 800c6d4:	693a      	ldr	r2, [r7, #16]
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d003      	beq.n	800c6ee <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800c6e6:	693a      	ldr	r2, [r7, #16]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c6ee:	4a25      	ldr	r2, [pc, #148]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c6f4:	4b23      	ldr	r3, [pc, #140]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c6f6:	689b      	ldr	r3, [r3, #8]
 800c6f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	43db      	mvns	r3, r3
 800c6fe:	693a      	ldr	r2, [r7, #16]
 800c700:	4013      	ands	r3, r2
 800c702:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d003      	beq.n	800c718 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800c710:	693a      	ldr	r2, [r7, #16]
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	4313      	orrs	r3, r2
 800c716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c718:	4a1a      	ldr	r2, [pc, #104]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c71e:	4b19      	ldr	r3, [pc, #100]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	43db      	mvns	r3, r3
 800c728:	693a      	ldr	r2, [r7, #16]
 800c72a:	4013      	ands	r3, r2
 800c72c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c736:	2b00      	cmp	r3, #0
 800c738:	d003      	beq.n	800c742 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4313      	orrs	r3, r2
 800c740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c742:	4a10      	ldr	r2, [pc, #64]	; (800c784 <HAL_GPIO_Init+0x2f0>)
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	3301      	adds	r3, #1
 800c74c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	681a      	ldr	r2, [r3, #0]
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	fa22 f303 	lsr.w	r3, r2, r3
 800c758:	2b00      	cmp	r3, #0
 800c75a:	f47f aea3 	bne.w	800c4a4 <HAL_GPIO_Init+0x10>
  }
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	371c      	adds	r7, #28
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	40021000 	.word	0x40021000
 800c770:	40010000 	.word	0x40010000
 800c774:	48000400 	.word	0x48000400
 800c778:	48000800 	.word	0x48000800
 800c77c:	48000c00 	.word	0x48000c00
 800c780:	48001000 	.word	0x48001000
 800c784:	40010400 	.word	0x40010400

0800c788 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c788:	b480      	push	{r7}
 800c78a:	b087      	sub	sp, #28
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c792:	2300      	movs	r3, #0
 800c794:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800c796:	e0b7      	b.n	800c908 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800c798:	2201      	movs	r2, #1
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a0:	683a      	ldr	r2, [r7, #0]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	f000 80aa 	beq.w	800c902 <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800c7ae:	4a5d      	ldr	r2, [pc, #372]	; (800c924 <HAL_GPIO_DeInit+0x19c>)
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	089b      	lsrs	r3, r3, #2
 800c7b4:	3302      	adds	r3, #2
 800c7b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c7ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	f003 0303 	and.w	r3, r3, #3
 800c7c2:	009b      	lsls	r3, r3, #2
 800c7c4:	220f      	movs	r2, #15
 800c7c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	4013      	ands	r3, r2
 800c7ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c7d6:	d019      	beq.n	800c80c <HAL_GPIO_DeInit+0x84>
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4a53      	ldr	r2, [pc, #332]	; (800c928 <HAL_GPIO_DeInit+0x1a0>)
 800c7dc:	4293      	cmp	r3, r2
 800c7de:	d013      	beq.n	800c808 <HAL_GPIO_DeInit+0x80>
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	4a52      	ldr	r2, [pc, #328]	; (800c92c <HAL_GPIO_DeInit+0x1a4>)
 800c7e4:	4293      	cmp	r3, r2
 800c7e6:	d00d      	beq.n	800c804 <HAL_GPIO_DeInit+0x7c>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	4a51      	ldr	r2, [pc, #324]	; (800c930 <HAL_GPIO_DeInit+0x1a8>)
 800c7ec:	4293      	cmp	r3, r2
 800c7ee:	d007      	beq.n	800c800 <HAL_GPIO_DeInit+0x78>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	4a50      	ldr	r2, [pc, #320]	; (800c934 <HAL_GPIO_DeInit+0x1ac>)
 800c7f4:	4293      	cmp	r3, r2
 800c7f6:	d101      	bne.n	800c7fc <HAL_GPIO_DeInit+0x74>
 800c7f8:	2304      	movs	r3, #4
 800c7fa:	e008      	b.n	800c80e <HAL_GPIO_DeInit+0x86>
 800c7fc:	2307      	movs	r3, #7
 800c7fe:	e006      	b.n	800c80e <HAL_GPIO_DeInit+0x86>
 800c800:	2303      	movs	r3, #3
 800c802:	e004      	b.n	800c80e <HAL_GPIO_DeInit+0x86>
 800c804:	2302      	movs	r3, #2
 800c806:	e002      	b.n	800c80e <HAL_GPIO_DeInit+0x86>
 800c808:	2301      	movs	r3, #1
 800c80a:	e000      	b.n	800c80e <HAL_GPIO_DeInit+0x86>
 800c80c:	2300      	movs	r3, #0
 800c80e:	697a      	ldr	r2, [r7, #20]
 800c810:	f002 0203 	and.w	r2, r2, #3
 800c814:	0092      	lsls	r2, r2, #2
 800c816:	4093      	lsls	r3, r2
 800c818:	68fa      	ldr	r2, [r7, #12]
 800c81a:	429a      	cmp	r2, r3
 800c81c:	d132      	bne.n	800c884 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c81e:	4b46      	ldr	r3, [pc, #280]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c820:	681a      	ldr	r2, [r3, #0]
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	43db      	mvns	r3, r3
 800c826:	4944      	ldr	r1, [pc, #272]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c828:	4013      	ands	r3, r2
 800c82a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c82c:	4b42      	ldr	r3, [pc, #264]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c82e:	685a      	ldr	r2, [r3, #4]
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	43db      	mvns	r3, r3
 800c834:	4940      	ldr	r1, [pc, #256]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c836:	4013      	ands	r3, r2
 800c838:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c83a:	4b3f      	ldr	r3, [pc, #252]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c83c:	689a      	ldr	r2, [r3, #8]
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	43db      	mvns	r3, r3
 800c842:	493d      	ldr	r1, [pc, #244]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c844:	4013      	ands	r3, r2
 800c846:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c848:	4b3b      	ldr	r3, [pc, #236]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c84a:	68da      	ldr	r2, [r3, #12]
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	43db      	mvns	r3, r3
 800c850:	4939      	ldr	r1, [pc, #228]	; (800c938 <HAL_GPIO_DeInit+0x1b0>)
 800c852:	4013      	ands	r3, r2
 800c854:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	f003 0303 	and.w	r3, r3, #3
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	220f      	movs	r2, #15
 800c860:	fa02 f303 	lsl.w	r3, r2, r3
 800c864:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800c866:	4a2f      	ldr	r2, [pc, #188]	; (800c924 <HAL_GPIO_DeInit+0x19c>)
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	089b      	lsrs	r3, r3, #2
 800c86c:	3302      	adds	r3, #2
 800c86e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	43da      	mvns	r2, r3
 800c876:	482b      	ldr	r0, [pc, #172]	; (800c924 <HAL_GPIO_DeInit+0x19c>)
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	089b      	lsrs	r3, r3, #2
 800c87c:	400a      	ands	r2, r1
 800c87e:	3302      	adds	r3, #2
 800c880:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681a      	ldr	r2, [r3, #0]
 800c888:	697b      	ldr	r3, [r7, #20]
 800c88a:	005b      	lsls	r3, r3, #1
 800c88c:	2103      	movs	r1, #3
 800c88e:	fa01 f303 	lsl.w	r3, r1, r3
 800c892:	431a      	orrs	r2, r3
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800c898:	697b      	ldr	r3, [r7, #20]
 800c89a:	08da      	lsrs	r2, r3, #3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3208      	adds	r2, #8
 800c8a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	f003 0307 	and.w	r3, r3, #7
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	220f      	movs	r2, #15
 800c8ae:	fa02 f303 	lsl.w	r3, r2, r3
 800c8b2:	43db      	mvns	r3, r3
 800c8b4:	697a      	ldr	r2, [r7, #20]
 800c8b6:	08d2      	lsrs	r2, r2, #3
 800c8b8:	4019      	ands	r1, r3
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	3208      	adds	r2, #8
 800c8be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	689a      	ldr	r2, [r3, #8]
 800c8c6:	697b      	ldr	r3, [r7, #20]
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	2103      	movs	r1, #3
 800c8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d0:	43db      	mvns	r3, r3
 800c8d2:	401a      	ands	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	2101      	movs	r1, #1
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8e4:	43db      	mvns	r3, r3
 800c8e6:	401a      	ands	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68da      	ldr	r2, [r3, #12]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	005b      	lsls	r3, r3, #1
 800c8f4:	2103      	movs	r1, #3
 800c8f6:	fa01 f303 	lsl.w	r3, r1, r3
 800c8fa:	43db      	mvns	r3, r3
 800c8fc:	401a      	ands	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	3301      	adds	r3, #1
 800c906:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800c908:	683a      	ldr	r2, [r7, #0]
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	fa22 f303 	lsr.w	r3, r2, r3
 800c910:	2b00      	cmp	r3, #0
 800c912:	f47f af41 	bne.w	800c798 <HAL_GPIO_DeInit+0x10>
  }
}
 800c916:	bf00      	nop
 800c918:	bf00      	nop
 800c91a:	371c      	adds	r7, #28
 800c91c:	46bd      	mov	sp, r7
 800c91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c922:	4770      	bx	lr
 800c924:	40010000 	.word	0x40010000
 800c928:	48000400 	.word	0x48000400
 800c92c:	48000800 	.word	0x48000800
 800c930:	48000c00 	.word	0x48000c00
 800c934:	48001000 	.word	0x48001000
 800c938:	40010400 	.word	0x40010400

0800c93c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	691a      	ldr	r2, [r3, #16]
 800c94c:	887b      	ldrh	r3, [r7, #2]
 800c94e:	4013      	ands	r3, r2
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c954:	2301      	movs	r3, #1
 800c956:	73fb      	strb	r3, [r7, #15]
 800c958:	e001      	b.n	800c95e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3714      	adds	r7, #20
 800c964:	46bd      	mov	sp, r7
 800c966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96a:	4770      	bx	lr

0800c96c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c96c:	b480      	push	{r7}
 800c96e:	b083      	sub	sp, #12
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
 800c974:	460b      	mov	r3, r1
 800c976:	807b      	strh	r3, [r7, #2]
 800c978:	4613      	mov	r3, r2
 800c97a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c97c:	787b      	ldrb	r3, [r7, #1]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d003      	beq.n	800c98a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c982:	887a      	ldrh	r2, [r7, #2]
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c988:	e002      	b.n	800c990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c98a:	887a      	ldrh	r2, [r7, #2]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr

0800c99c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d101      	bne.n	800c9ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e081      	b.n	800cab2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d106      	bne.n	800c9c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2200      	movs	r2, #0
 800c9be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	f7fc f946 	bl	8008c54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2224      	movs	r2, #36	; 0x24
 800c9cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	681a      	ldr	r2, [r3, #0]
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f022 0201 	bic.w	r2, r2, #1
 800c9de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c9ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	689a      	ldr	r2, [r3, #8]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c9fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	68db      	ldr	r3, [r3, #12]
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d107      	bne.n	800ca16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	689a      	ldr	r2, [r3, #8]
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ca12:	609a      	str	r2, [r3, #8]
 800ca14:	e006      	b.n	800ca24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	689a      	ldr	r2, [r3, #8]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ca22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	2b02      	cmp	r3, #2
 800ca2a:	d104      	bne.n	800ca36 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca34:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6812      	ldr	r2, [r2, #0]
 800ca40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ca44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ca48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68da      	ldr	r2, [r3, #12]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ca58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	691a      	ldr	r2, [r3, #16]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	695b      	ldr	r3, [r3, #20]
 800ca62:	ea42 0103 	orr.w	r1, r2, r3
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	699b      	ldr	r3, [r3, #24]
 800ca6a:	021a      	lsls	r2, r3, #8
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	430a      	orrs	r2, r1
 800ca72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	69d9      	ldr	r1, [r3, #28]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	6a1a      	ldr	r2, [r3, #32]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	430a      	orrs	r2, r1
 800ca82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681a      	ldr	r2, [r3, #0]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0201 	orr.w	r2, r2, #1
 800ca92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2200      	movs	r2, #0
 800ca98:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2220      	movs	r2, #32
 800ca9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2200      	movs	r2, #0
 800caa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cab0:	2300      	movs	r3, #0
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3708      	adds	r7, #8
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
	...

0800cabc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af02      	add	r7, sp, #8
 800cac2:	60f8      	str	r0, [r7, #12]
 800cac4:	607a      	str	r2, [r7, #4]
 800cac6:	461a      	mov	r2, r3
 800cac8:	460b      	mov	r3, r1
 800caca:	817b      	strh	r3, [r7, #10]
 800cacc:	4613      	mov	r3, r2
 800cace:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b20      	cmp	r3, #32
 800cada:	f040 80da 	bne.w	800cc92 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	d101      	bne.n	800caec <HAL_I2C_Master_Transmit+0x30>
 800cae8:	2302      	movs	r3, #2
 800caea:	e0d3      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2201      	movs	r2, #1
 800caf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800caf4:	f7fd fcb0 	bl	800a458 <HAL_GetTick>
 800caf8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	9300      	str	r3, [sp, #0]
 800cafe:	2319      	movs	r3, #25
 800cb00:	2201      	movs	r2, #1
 800cb02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb06:	68f8      	ldr	r0, [r7, #12]
 800cb08:	f000 fa5e 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d001      	beq.n	800cb16 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cb12:	2301      	movs	r3, #1
 800cb14:	e0be      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2221      	movs	r2, #33	; 0x21
 800cb1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2210      	movs	r2, #16
 800cb22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	2200      	movs	r2, #0
 800cb2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	687a      	ldr	r2, [r7, #4]
 800cb30:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	893a      	ldrh	r2, [r7, #8]
 800cb36:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	2bff      	cmp	r3, #255	; 0xff
 800cb46:	d90e      	bls.n	800cb66 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	22ff      	movs	r2, #255	; 0xff
 800cb4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb52:	b2da      	uxtb	r2, r3
 800cb54:	8979      	ldrh	r1, [r7, #10]
 800cb56:	4b51      	ldr	r3, [pc, #324]	; (800cc9c <HAL_I2C_Master_Transmit+0x1e0>)
 800cb58:	9300      	str	r3, [sp, #0]
 800cb5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cb5e:	68f8      	ldr	r0, [r7, #12]
 800cb60:	f000 fb54 	bl	800d20c <I2C_TransferConfig>
 800cb64:	e06c      	b.n	800cc40 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cb6a:	b29a      	uxth	r2, r3
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb74:	b2da      	uxtb	r2, r3
 800cb76:	8979      	ldrh	r1, [r7, #10]
 800cb78:	4b48      	ldr	r3, [pc, #288]	; (800cc9c <HAL_I2C_Master_Transmit+0x1e0>)
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb80:	68f8      	ldr	r0, [r7, #12]
 800cb82:	f000 fb43 	bl	800d20c <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800cb86:	e05b      	b.n	800cc40 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cb88:	697a      	ldr	r2, [r7, #20]
 800cb8a:	6a39      	ldr	r1, [r7, #32]
 800cb8c:	68f8      	ldr	r0, [r7, #12]
 800cb8e:	f000 fa5b 	bl	800d048 <I2C_WaitOnTXISFlagUntilTimeout>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d001      	beq.n	800cb9c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e07b      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cba0:	781a      	ldrb	r2, [r3, #0]
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbac:	1c5a      	adds	r2, r3, #1
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	b29a      	uxth	r2, r3
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbc4:	3b01      	subs	r3, #1
 800cbc6:	b29a      	uxth	r2, r3
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbd0:	b29b      	uxth	r3, r3
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d034      	beq.n	800cc40 <HAL_I2C_Master_Transmit+0x184>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d130      	bne.n	800cc40 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800cbde:	697b      	ldr	r3, [r7, #20]
 800cbe0:	9300      	str	r3, [sp, #0]
 800cbe2:	6a3b      	ldr	r3, [r7, #32]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2180      	movs	r1, #128	; 0x80
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 f9ed 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d001      	beq.n	800cbf8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e04d      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cbfc:	b29b      	uxth	r3, r3
 800cbfe:	2bff      	cmp	r3, #255	; 0xff
 800cc00:	d90e      	bls.n	800cc20 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	22ff      	movs	r2, #255	; 0xff
 800cc06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc0c:	b2da      	uxtb	r2, r3
 800cc0e:	8979      	ldrh	r1, [r7, #10]
 800cc10:	2300      	movs	r3, #0
 800cc12:	9300      	str	r3, [sp, #0]
 800cc14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 faf7 	bl	800d20c <I2C_TransferConfig>
 800cc1e:	e00f      	b.n	800cc40 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc2e:	b2da      	uxtb	r2, r3
 800cc30:	8979      	ldrh	r1, [r7, #10]
 800cc32:	2300      	movs	r3, #0
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 fae6 	bl	800d20c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d19e      	bne.n	800cb88 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	6a39      	ldr	r1, [r7, #32]
 800cc4e:	68f8      	ldr	r0, [r7, #12]
 800cc50:	f000 fa3a 	bl	800d0c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e01a      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	2220      	movs	r2, #32
 800cc64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6859      	ldr	r1, [r3, #4]
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681a      	ldr	r2, [r3, #0]
 800cc70:	4b0b      	ldr	r3, [pc, #44]	; (800cca0 <HAL_I2C_Master_Transmit+0x1e4>)
 800cc72:	400b      	ands	r3, r1
 800cc74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2220      	movs	r2, #32
 800cc7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	2200      	movs	r2, #0
 800cc82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	e000      	b.n	800cc94 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800cc92:	2302      	movs	r3, #2
  }
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	80002000 	.word	0x80002000
 800cca0:	fe00e800 	.word	0xfe00e800

0800cca4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b088      	sub	sp, #32
 800cca8:	af02      	add	r7, sp, #8
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	4608      	mov	r0, r1
 800ccae:	4611      	mov	r1, r2
 800ccb0:	461a      	mov	r2, r3
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	817b      	strh	r3, [r7, #10]
 800ccb6:	460b      	mov	r3, r1
 800ccb8:	813b      	strh	r3, [r7, #8]
 800ccba:	4613      	mov	r3, r2
 800ccbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccc4:	b2db      	uxtb	r3, r3
 800ccc6:	2b20      	cmp	r3, #32
 800ccc8:	f040 80fd 	bne.w	800cec6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800cccc:	6a3b      	ldr	r3, [r7, #32]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <HAL_I2C_Mem_Read+0x34>
 800ccd2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d105      	bne.n	800cce4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccde:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800cce0:	2301      	movs	r3, #1
 800cce2:	e0f1      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d101      	bne.n	800ccf2 <HAL_I2C_Mem_Read+0x4e>
 800ccee:	2302      	movs	r3, #2
 800ccf0:	e0ea      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2201      	movs	r2, #1
 800ccf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ccfa:	f7fd fbad 	bl	800a458 <HAL_GetTick>
 800ccfe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	9300      	str	r3, [sp, #0]
 800cd04:	2319      	movs	r3, #25
 800cd06:	2201      	movs	r2, #1
 800cd08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cd0c:	68f8      	ldr	r0, [r7, #12]
 800cd0e:	f000 f95b 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	e0d5      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2222      	movs	r2, #34	; 0x22
 800cd20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2240      	movs	r2, #64	; 0x40
 800cd28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6a3a      	ldr	r2, [r7, #32]
 800cd36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800cd3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2200      	movs	r2, #0
 800cd42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800cd44:	88f8      	ldrh	r0, [r7, #6]
 800cd46:	893a      	ldrh	r2, [r7, #8]
 800cd48:	8979      	ldrh	r1, [r7, #10]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	4603      	mov	r3, r0
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f000 f8bf 	bl	800ced8 <I2C_RequestMemoryRead>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d005      	beq.n	800cd6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2200      	movs	r2, #0
 800cd64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e0ad      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd70:	b29b      	uxth	r3, r3
 800cd72:	2bff      	cmp	r3, #255	; 0xff
 800cd74:	d90e      	bls.n	800cd94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	22ff      	movs	r2, #255	; 0xff
 800cd7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	8979      	ldrh	r1, [r7, #10]
 800cd84:	4b52      	ldr	r3, [pc, #328]	; (800ced0 <HAL_I2C_Mem_Read+0x22c>)
 800cd86:	9300      	str	r3, [sp, #0]
 800cd88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f000 fa3d 	bl	800d20c <I2C_TransferConfig>
 800cd92:	e00f      	b.n	800cdb4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cda2:	b2da      	uxtb	r2, r3
 800cda4:	8979      	ldrh	r1, [r7, #10]
 800cda6:	4b4a      	ldr	r3, [pc, #296]	; (800ced0 <HAL_I2C_Mem_Read+0x22c>)
 800cda8:	9300      	str	r3, [sp, #0]
 800cdaa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f000 fa2c 	bl	800d20c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800cdb4:	697b      	ldr	r3, [r7, #20]
 800cdb6:	9300      	str	r3, [sp, #0]
 800cdb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdba:	2200      	movs	r2, #0
 800cdbc:	2104      	movs	r1, #4
 800cdbe:	68f8      	ldr	r0, [r7, #12]
 800cdc0:	f000 f902 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800cdc4:	4603      	mov	r3, r0
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d001      	beq.n	800cdce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	e07c      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	b2d2      	uxtb	r2, r2
 800cdda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	3b01      	subs	r3, #1
 800cdfa:	b29a      	uxth	r2, r3
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d034      	beq.n	800ce74 <HAL_I2C_Mem_Read+0x1d0>
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d130      	bne.n	800ce74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce18:	2200      	movs	r2, #0
 800ce1a:	2180      	movs	r1, #128	; 0x80
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f8d3 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d001      	beq.n	800ce2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e04d      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce30:	b29b      	uxth	r3, r3
 800ce32:	2bff      	cmp	r3, #255	; 0xff
 800ce34:	d90e      	bls.n	800ce54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	22ff      	movs	r2, #255	; 0xff
 800ce3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce40:	b2da      	uxtb	r2, r3
 800ce42:	8979      	ldrh	r1, [r7, #10]
 800ce44:	2300      	movs	r3, #0
 800ce46:	9300      	str	r3, [sp, #0]
 800ce48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ce4c:	68f8      	ldr	r0, [r7, #12]
 800ce4e:	f000 f9dd 	bl	800d20c <I2C_TransferConfig>
 800ce52:	e00f      	b.n	800ce74 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce62:	b2da      	uxtb	r2, r3
 800ce64:	8979      	ldrh	r1, [r7, #10]
 800ce66:	2300      	movs	r3, #0
 800ce68:	9300      	str	r3, [sp, #0]
 800ce6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ce6e:	68f8      	ldr	r0, [r7, #12]
 800ce70:	f000 f9cc 	bl	800d20c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce78:	b29b      	uxth	r3, r3
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d19a      	bne.n	800cdb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ce7e:	697a      	ldr	r2, [r7, #20]
 800ce80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f000 f920 	bl	800d0c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ce88:	4603      	mov	r3, r0
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e01a      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2220      	movs	r2, #32
 800ce98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	6859      	ldr	r1, [r3, #4]
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	681a      	ldr	r2, [r3, #0]
 800cea4:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <HAL_I2C_Mem_Read+0x230>)
 800cea6:	400b      	ands	r3, r1
 800cea8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2220      	movs	r2, #32
 800ceae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2200      	movs	r2, #0
 800cebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800cec2:	2300      	movs	r3, #0
 800cec4:	e000      	b.n	800cec8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800cec6:	2302      	movs	r3, #2
  }
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3718      	adds	r7, #24
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	80002400 	.word	0x80002400
 800ced4:	fe00e800 	.word	0xfe00e800

0800ced8 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b086      	sub	sp, #24
 800cedc:	af02      	add	r7, sp, #8
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	4608      	mov	r0, r1
 800cee2:	4611      	mov	r1, r2
 800cee4:	461a      	mov	r2, r3
 800cee6:	4603      	mov	r3, r0
 800cee8:	817b      	strh	r3, [r7, #10]
 800ceea:	460b      	mov	r3, r1
 800ceec:	813b      	strh	r3, [r7, #8]
 800ceee:	4613      	mov	r3, r2
 800cef0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800cef2:	88fb      	ldrh	r3, [r7, #6]
 800cef4:	b2da      	uxtb	r2, r3
 800cef6:	8979      	ldrh	r1, [r7, #10]
 800cef8:	4b20      	ldr	r3, [pc, #128]	; (800cf7c <I2C_RequestMemoryRead+0xa4>)
 800cefa:	9300      	str	r3, [sp, #0]
 800cefc:	2300      	movs	r3, #0
 800cefe:	68f8      	ldr	r0, [r7, #12]
 800cf00:	f000 f984 	bl	800d20c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf04:	69fa      	ldr	r2, [r7, #28]
 800cf06:	69b9      	ldr	r1, [r7, #24]
 800cf08:	68f8      	ldr	r0, [r7, #12]
 800cf0a:	f000 f89d 	bl	800d048 <I2C_WaitOnTXISFlagUntilTimeout>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d001      	beq.n	800cf18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800cf14:	2301      	movs	r3, #1
 800cf16:	e02c      	b.n	800cf72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800cf18:	88fb      	ldrh	r3, [r7, #6]
 800cf1a:	2b01      	cmp	r3, #1
 800cf1c:	d105      	bne.n	800cf2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cf1e:	893b      	ldrh	r3, [r7, #8]
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	629a      	str	r2, [r3, #40]	; 0x28
 800cf28:	e015      	b.n	800cf56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800cf2a:	893b      	ldrh	r3, [r7, #8]
 800cf2c:	0a1b      	lsrs	r3, r3, #8
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800cf38:	69fa      	ldr	r2, [r7, #28]
 800cf3a:	69b9      	ldr	r1, [r7, #24]
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f000 f883 	bl	800d048 <I2C_WaitOnTXISFlagUntilTimeout>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d001      	beq.n	800cf4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800cf48:	2301      	movs	r3, #1
 800cf4a:	e012      	b.n	800cf72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800cf4c:	893b      	ldrh	r3, [r7, #8]
 800cf4e:	b2da      	uxtb	r2, r3
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	9300      	str	r3, [sp, #0]
 800cf5a:	69bb      	ldr	r3, [r7, #24]
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	2140      	movs	r1, #64	; 0x40
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f000 f831 	bl	800cfc8 <I2C_WaitOnFlagUntilTimeout>
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d001      	beq.n	800cf70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	e000      	b.n	800cf72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800cf70:	2300      	movs	r3, #0
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3710      	adds	r7, #16
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	80002000 	.word	0x80002000

0800cf80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	699b      	ldr	r3, [r3, #24]
 800cf8e:	f003 0302 	and.w	r3, r3, #2
 800cf92:	2b02      	cmp	r3, #2
 800cf94:	d103      	bne.n	800cf9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	699b      	ldr	r3, [r3, #24]
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d007      	beq.n	800cfbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	699a      	ldr	r2, [r3, #24]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f042 0201 	orr.w	r2, r2, #1
 800cfba:	619a      	str	r2, [r3, #24]
  }
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800cfd8:	e022      	b.n	800d020 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfe0:	d01e      	beq.n	800d020 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cfe2:	f7fd fa39 	bl	800a458 <HAL_GetTick>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	69bb      	ldr	r3, [r7, #24]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	683a      	ldr	r2, [r7, #0]
 800cfee:	429a      	cmp	r2, r3
 800cff0:	d302      	bcc.n	800cff8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d113      	bne.n	800d020 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cffc:	f043 0220 	orr.w	r2, r3, #32
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2220      	movs	r2, #32
 800d008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2200      	movs	r2, #0
 800d010:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d01c:	2301      	movs	r3, #1
 800d01e:	e00f      	b.n	800d040 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	699a      	ldr	r2, [r3, #24]
 800d026:	68bb      	ldr	r3, [r7, #8]
 800d028:	4013      	ands	r3, r2
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	bf0c      	ite	eq
 800d030:	2301      	moveq	r3, #1
 800d032:	2300      	movne	r3, #0
 800d034:	b2db      	uxtb	r3, r3
 800d036:	461a      	mov	r2, r3
 800d038:	79fb      	ldrb	r3, [r7, #7]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d0cd      	beq.n	800cfda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	60f8      	str	r0, [r7, #12]
 800d050:	60b9      	str	r1, [r7, #8]
 800d052:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d054:	e02c      	b.n	800d0b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d056:	687a      	ldr	r2, [r7, #4]
 800d058:	68b9      	ldr	r1, [r7, #8]
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f000 f870 	bl	800d140 <I2C_IsAcknowledgeFailed>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d066:	2301      	movs	r3, #1
 800d068:	e02a      	b.n	800d0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d06a:	68bb      	ldr	r3, [r7, #8]
 800d06c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d070:	d01e      	beq.n	800d0b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d072:	f7fd f9f1 	bl	800a458 <HAL_GetTick>
 800d076:	4602      	mov	r2, r0
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	1ad3      	subs	r3, r2, r3
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	429a      	cmp	r2, r3
 800d080:	d302      	bcc.n	800d088 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d082:	68bb      	ldr	r3, [r7, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d113      	bne.n	800d0b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d08c:	f043 0220 	orr.w	r2, r3, #32
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2220      	movs	r2, #32
 800d098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	2200      	movs	r2, #0
 800d0a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d0ac:	2301      	movs	r3, #1
 800d0ae:	e007      	b.n	800d0c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	699b      	ldr	r3, [r3, #24]
 800d0b6:	f003 0302 	and.w	r3, r3, #2
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d1cb      	bne.n	800d056 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d0be:	2300      	movs	r3, #0
}
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	3710      	adds	r7, #16
 800d0c4:	46bd      	mov	sp, r7
 800d0c6:	bd80      	pop	{r7, pc}

0800d0c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d0d4:	e028      	b.n	800d128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d0d6:	687a      	ldr	r2, [r7, #4]
 800d0d8:	68b9      	ldr	r1, [r7, #8]
 800d0da:	68f8      	ldr	r0, [r7, #12]
 800d0dc:	f000 f830 	bl	800d140 <I2C_IsAcknowledgeFailed>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d001      	beq.n	800d0ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d0e6:	2301      	movs	r3, #1
 800d0e8:	e026      	b.n	800d138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d0ea:	f7fd f9b5 	bl	800a458 <HAL_GetTick>
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	1ad3      	subs	r3, r2, r3
 800d0f4:	68ba      	ldr	r2, [r7, #8]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d302      	bcc.n	800d100 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d113      	bne.n	800d128 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d104:	f043 0220 	orr.w	r2, r3, #32
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2220      	movs	r2, #32
 800d110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2200      	movs	r2, #0
 800d118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	2200      	movs	r2, #0
 800d120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d124:	2301      	movs	r3, #1
 800d126:	e007      	b.n	800d138 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	699b      	ldr	r3, [r3, #24]
 800d12e:	f003 0320 	and.w	r3, r3, #32
 800d132:	2b20      	cmp	r3, #32
 800d134:	d1cf      	bne.n	800d0d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d136:	2300      	movs	r3, #0
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	60f8      	str	r0, [r7, #12]
 800d148:	60b9      	str	r1, [r7, #8]
 800d14a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	699b      	ldr	r3, [r3, #24]
 800d152:	f003 0310 	and.w	r3, r3, #16
 800d156:	2b10      	cmp	r3, #16
 800d158:	d151      	bne.n	800d1fe <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d15a:	e022      	b.n	800d1a2 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d15c:	68bb      	ldr	r3, [r7, #8]
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d01e      	beq.n	800d1a2 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d164:	f7fd f978 	bl	800a458 <HAL_GetTick>
 800d168:	4602      	mov	r2, r0
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	68ba      	ldr	r2, [r7, #8]
 800d170:	429a      	cmp	r2, r3
 800d172:	d302      	bcc.n	800d17a <I2C_IsAcknowledgeFailed+0x3a>
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d113      	bne.n	800d1a2 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d17e:	f043 0220 	orr.w	r2, r3, #32
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	2220      	movs	r2, #32
 800d18a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d19e:	2301      	movs	r3, #1
 800d1a0:	e02e      	b.n	800d200 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	f003 0320 	and.w	r3, r3, #32
 800d1ac:	2b20      	cmp	r3, #32
 800d1ae:	d1d5      	bne.n	800d15c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	2210      	movs	r2, #16
 800d1b6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	2220      	movs	r2, #32
 800d1be:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d1c0:	68f8      	ldr	r0, [r7, #12]
 800d1c2:	f7ff fedd 	bl	800cf80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	6859      	ldr	r1, [r3, #4]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	681a      	ldr	r2, [r3, #0]
 800d1d0:	4b0d      	ldr	r3, [pc, #52]	; (800d208 <I2C_IsAcknowledgeFailed+0xc8>)
 800d1d2:	400b      	ands	r3, r1
 800d1d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1da:	f043 0204 	orr.w	r2, r3, #4
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e000      	b.n	800d200 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3710      	adds	r7, #16
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	fe00e800 	.word	0xfe00e800

0800d20c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	60f8      	str	r0, [r7, #12]
 800d214:	607b      	str	r3, [r7, #4]
 800d216:	460b      	mov	r3, r1
 800d218:	817b      	strh	r3, [r7, #10]
 800d21a:	4613      	mov	r3, r2
 800d21c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	685a      	ldr	r2, [r3, #4]
 800d224:	69bb      	ldr	r3, [r7, #24]
 800d226:	0d5b      	lsrs	r3, r3, #21
 800d228:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d22c:	4b0d      	ldr	r3, [pc, #52]	; (800d264 <I2C_TransferConfig+0x58>)
 800d22e:	430b      	orrs	r3, r1
 800d230:	43db      	mvns	r3, r3
 800d232:	ea02 0103 	and.w	r1, r2, r3
 800d236:	897b      	ldrh	r3, [r7, #10]
 800d238:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d23c:	7a7b      	ldrb	r3, [r7, #9]
 800d23e:	041b      	lsls	r3, r3, #16
 800d240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d244:	431a      	orrs	r2, r3
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	431a      	orrs	r2, r3
 800d24a:	69bb      	ldr	r3, [r7, #24]
 800d24c:	431a      	orrs	r2, r3
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	430a      	orrs	r2, r1
 800d254:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d256:	bf00      	nop
 800d258:	3714      	adds	r7, #20
 800d25a:	46bd      	mov	sp, r7
 800d25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d260:	4770      	bx	lr
 800d262:	bf00      	nop
 800d264:	03ff63ff 	.word	0x03ff63ff

0800d268 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d268:	b480      	push	{r7}
 800d26a:	b083      	sub	sp, #12
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d278:	b2db      	uxtb	r3, r3
 800d27a:	2b20      	cmp	r3, #32
 800d27c:	d138      	bne.n	800d2f0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d284:	2b01      	cmp	r3, #1
 800d286:	d101      	bne.n	800d28c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d288:	2302      	movs	r3, #2
 800d28a:	e032      	b.n	800d2f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2224      	movs	r2, #36	; 0x24
 800d298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	f022 0201 	bic.w	r2, r2, #1
 800d2aa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d2ba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	6819      	ldr	r1, [r3, #0]
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	683a      	ldr	r2, [r7, #0]
 800d2c8:	430a      	orrs	r2, r1
 800d2ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	681a      	ldr	r2, [r3, #0]
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	f042 0201 	orr.w	r2, r2, #1
 800d2da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2220      	movs	r2, #32
 800d2e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	e000      	b.n	800d2f2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800d2f0:	2302      	movs	r3, #2
  }
}
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	370c      	adds	r7, #12
 800d2f6:	46bd      	mov	sp, r7
 800d2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fc:	4770      	bx	lr

0800d2fe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800d2fe:	b480      	push	{r7}
 800d300:	b085      	sub	sp, #20
 800d302:	af00      	add	r7, sp, #0
 800d304:	6078      	str	r0, [r7, #4]
 800d306:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d30e:	b2db      	uxtb	r3, r3
 800d310:	2b20      	cmp	r3, #32
 800d312:	d139      	bne.n	800d388 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d31a:	2b01      	cmp	r3, #1
 800d31c:	d101      	bne.n	800d322 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800d31e:	2302      	movs	r3, #2
 800d320:	e033      	b.n	800d38a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	2201      	movs	r2, #1
 800d326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2224      	movs	r2, #36	; 0x24
 800d32e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	681a      	ldr	r2, [r3, #0]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f022 0201 	bic.w	r2, r2, #1
 800d340:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800d350:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	021b      	lsls	r3, r3, #8
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	4313      	orrs	r3, r2
 800d35a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68fa      	ldr	r2, [r7, #12]
 800d362:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681a      	ldr	r2, [r3, #0]
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	f042 0201 	orr.w	r2, r2, #1
 800d372:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2220      	movs	r2, #32
 800d378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2200      	movs	r2, #0
 800d380:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	e000      	b.n	800d38a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800d388:	2302      	movs	r3, #2
  }
}
 800d38a:	4618      	mov	r0, r3
 800d38c:	3714      	adds	r7, #20
 800d38e:	46bd      	mov	sp, r7
 800d390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d394:	4770      	bx	lr

0800d396 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b084      	sub	sp, #16
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d101      	bne.n	800d3a8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800d3a4:	2301      	movs	r3, #1
 800d3a6:	e038      	b.n	800d41a <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800d3b0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	f245 5255 	movw	r2, #21845	; 0x5555
 800d3ba:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	687a      	ldr	r2, [r7, #4]
 800d3c2:	6852      	ldr	r2, [r2, #4]
 800d3c4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	6892      	ldr	r2, [r2, #8]
 800d3ce:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800d3d0:	f7fd f842 	bl	800a458 <HAL_GetTick>
 800d3d4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800d3d6:	e008      	b.n	800d3ea <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800d3d8:	f7fd f83e 	bl	800a458 <HAL_GetTick>
 800d3dc:	4602      	mov	r2, r0
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	1ad3      	subs	r3, r2, r3
 800d3e2:	2b30      	cmp	r3, #48	; 0x30
 800d3e4:	d901      	bls.n	800d3ea <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800d3e6:	2303      	movs	r3, #3
 800d3e8:	e017      	b.n	800d41a <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68db      	ldr	r3, [r3, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d1f1      	bne.n	800d3d8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	691a      	ldr	r2, [r3, #16]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	68db      	ldr	r3, [r3, #12]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d005      	beq.n	800d40e <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	68d2      	ldr	r2, [r2, #12]
 800d40a:	611a      	str	r2, [r3, #16]
 800d40c:	e004      	b.n	800d418 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d416:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d418:	2300      	movs	r3, #0
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}

0800d422 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800d422:	b480      	push	{r7}
 800d424:	b083      	sub	sp, #12
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800d432:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800d442:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d444:	b08b      	sub	sp, #44	; 0x2c
 800d446:	af06      	add	r7, sp, #24
 800d448:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d101      	bne.n	800d454 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800d450:	2301      	movs	r3, #1
 800d452:	e104      	b.n	800d65e <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d106      	bne.n	800d46e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2200      	movs	r2, #0
 800d464:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f009 fe39 	bl	80170e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	2203      	movs	r2, #3
 800d472:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	4618      	mov	r0, r3
 800d47c:	f005 f9a5 	bl	80127ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	603b      	str	r3, [r7, #0]
 800d486:	687e      	ldr	r6, [r7, #4]
 800d488:	466d      	mov	r5, sp
 800d48a:	f106 0410 	add.w	r4, r6, #16
 800d48e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d492:	6823      	ldr	r3, [r4, #0]
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	1d33      	adds	r3, r6, #4
 800d498:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d49a:	6838      	ldr	r0, [r7, #0]
 800d49c:	f005 f96d 	bl	801277a <USB_CoreInit>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d005      	beq.n	800d4b2 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	2202      	movs	r2, #2
 800d4aa:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e0d5      	b.n	800d65e <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	2100      	movs	r1, #0
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	f005 f9a1 	bl	8012800 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]
 800d4c2:	e04c      	b.n	800d55e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	6879      	ldr	r1, [r7, #4]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	4613      	mov	r3, r2
 800d4cc:	009b      	lsls	r3, r3, #2
 800d4ce:	4413      	add	r3, r2
 800d4d0:	00db      	lsls	r3, r3, #3
 800d4d2:	440b      	add	r3, r1
 800d4d4:	3301      	adds	r3, #1
 800d4d6:	2201      	movs	r2, #1
 800d4d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800d4da:	7bfb      	ldrb	r3, [r7, #15]
 800d4dc:	6879      	ldr	r1, [r7, #4]
 800d4de:	1c5a      	adds	r2, r3, #1
 800d4e0:	4613      	mov	r3, r2
 800d4e2:	009b      	lsls	r3, r3, #2
 800d4e4:	4413      	add	r3, r2
 800d4e6:	00db      	lsls	r3, r3, #3
 800d4e8:	440b      	add	r3, r1
 800d4ea:	7bfa      	ldrb	r2, [r7, #15]
 800d4ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800d4ee:	7bfa      	ldrb	r2, [r7, #15]
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
 800d4f2:	b298      	uxth	r0, r3
 800d4f4:	6879      	ldr	r1, [r7, #4]
 800d4f6:	4613      	mov	r3, r2
 800d4f8:	009b      	lsls	r3, r3, #2
 800d4fa:	4413      	add	r3, r2
 800d4fc:	00db      	lsls	r3, r3, #3
 800d4fe:	440b      	add	r3, r1
 800d500:	3336      	adds	r3, #54	; 0x36
 800d502:	4602      	mov	r2, r0
 800d504:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800d506:	7bfb      	ldrb	r3, [r7, #15]
 800d508:	6879      	ldr	r1, [r7, #4]
 800d50a:	1c5a      	adds	r2, r3, #1
 800d50c:	4613      	mov	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	4413      	add	r3, r2
 800d512:	00db      	lsls	r3, r3, #3
 800d514:	440b      	add	r3, r1
 800d516:	3303      	adds	r3, #3
 800d518:	2200      	movs	r2, #0
 800d51a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800d51c:	7bfa      	ldrb	r2, [r7, #15]
 800d51e:	6879      	ldr	r1, [r7, #4]
 800d520:	4613      	mov	r3, r2
 800d522:	009b      	lsls	r3, r3, #2
 800d524:	4413      	add	r3, r2
 800d526:	00db      	lsls	r3, r3, #3
 800d528:	440b      	add	r3, r1
 800d52a:	3338      	adds	r3, #56	; 0x38
 800d52c:	2200      	movs	r2, #0
 800d52e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800d530:	7bfa      	ldrb	r2, [r7, #15]
 800d532:	6879      	ldr	r1, [r7, #4]
 800d534:	4613      	mov	r3, r2
 800d536:	009b      	lsls	r3, r3, #2
 800d538:	4413      	add	r3, r2
 800d53a:	00db      	lsls	r3, r3, #3
 800d53c:	440b      	add	r3, r1
 800d53e:	333c      	adds	r3, #60	; 0x3c
 800d540:	2200      	movs	r2, #0
 800d542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800d544:	7bfa      	ldrb	r2, [r7, #15]
 800d546:	6879      	ldr	r1, [r7, #4]
 800d548:	4613      	mov	r3, r2
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	4413      	add	r3, r2
 800d54e:	00db      	lsls	r3, r3, #3
 800d550:	440b      	add	r3, r1
 800d552:	3340      	adds	r3, #64	; 0x40
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d558:	7bfb      	ldrb	r3, [r7, #15]
 800d55a:	3301      	adds	r3, #1
 800d55c:	73fb      	strb	r3, [r7, #15]
 800d55e:	7bfa      	ldrb	r2, [r7, #15]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	429a      	cmp	r2, r3
 800d566:	d3ad      	bcc.n	800d4c4 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d568:	2300      	movs	r3, #0
 800d56a:	73fb      	strb	r3, [r7, #15]
 800d56c:	e044      	b.n	800d5f8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800d56e:	7bfa      	ldrb	r2, [r7, #15]
 800d570:	6879      	ldr	r1, [r7, #4]
 800d572:	4613      	mov	r3, r2
 800d574:	009b      	lsls	r3, r3, #2
 800d576:	4413      	add	r3, r2
 800d578:	00db      	lsls	r3, r3, #3
 800d57a:	440b      	add	r3, r1
 800d57c:	f203 1369 	addw	r3, r3, #361	; 0x169
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800d584:	7bfa      	ldrb	r2, [r7, #15]
 800d586:	6879      	ldr	r1, [r7, #4]
 800d588:	4613      	mov	r3, r2
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	440b      	add	r3, r1
 800d592:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800d596:	7bfa      	ldrb	r2, [r7, #15]
 800d598:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800d59a:	7bfa      	ldrb	r2, [r7, #15]
 800d59c:	6879      	ldr	r1, [r7, #4]
 800d59e:	4613      	mov	r3, r2
 800d5a0:	009b      	lsls	r3, r3, #2
 800d5a2:	4413      	add	r3, r2
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	440b      	add	r3, r1
 800d5a8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800d5b0:	7bfa      	ldrb	r2, [r7, #15]
 800d5b2:	6879      	ldr	r1, [r7, #4]
 800d5b4:	4613      	mov	r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	4413      	add	r3, r2
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	440b      	add	r3, r1
 800d5be:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800d5c6:	7bfa      	ldrb	r2, [r7, #15]
 800d5c8:	6879      	ldr	r1, [r7, #4]
 800d5ca:	4613      	mov	r3, r2
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	4413      	add	r3, r2
 800d5d0:	00db      	lsls	r3, r3, #3
 800d5d2:	440b      	add	r3, r1
 800d5d4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800d5dc:	7bfa      	ldrb	r2, [r7, #15]
 800d5de:	6879      	ldr	r1, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800d5f2:	7bfb      	ldrb	r3, [r7, #15]
 800d5f4:	3301      	adds	r3, #1
 800d5f6:	73fb      	strb	r3, [r7, #15]
 800d5f8:	7bfa      	ldrb	r2, [r7, #15]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	685b      	ldr	r3, [r3, #4]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d3b5      	bcc.n	800d56e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	603b      	str	r3, [r7, #0]
 800d608:	687e      	ldr	r6, [r7, #4]
 800d60a:	466d      	mov	r5, sp
 800d60c:	f106 0410 	add.w	r4, r6, #16
 800d610:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d612:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d614:	6823      	ldr	r3, [r4, #0]
 800d616:	602b      	str	r3, [r5, #0]
 800d618:	1d33      	adds	r3, r6, #4
 800d61a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d61c:	6838      	ldr	r0, [r7, #0]
 800d61e:	f005 f8fc 	bl	801281a <USB_DevInit>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d005      	beq.n	800d634 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2202      	movs	r2, #2
 800d62c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800d630:	2301      	movs	r3, #1
 800d632:	e014      	b.n	800d65e <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	69db      	ldr	r3, [r3, #28]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d102      	bne.n	800d652 <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f001 fbbf 	bl	800edd0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4618      	mov	r0, r3
 800d658:	f007 fa7c 	bl	8014b54 <USB_DevDisconnect>

  return HAL_OK;
 800d65c:	2300      	movs	r3, #0
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3714      	adds	r7, #20
 800d662:	46bd      	mov	sp, r7
 800d664:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d666 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d674:	2b01      	cmp	r3, #1
 800d676:	d101      	bne.n	800d67c <HAL_PCD_Start+0x16>
 800d678:	2302      	movs	r3, #2
 800d67a:	e012      	b.n	800d6a2 <HAL_PCD_Start+0x3c>
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2201      	movs	r2, #1
 800d680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4618      	mov	r0, r3
 800d68a:	f005 f887 	bl	801279c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	4618      	mov	r0, r3
 800d694:	f007 fa47 	bl	8014b26 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800d6a0:	2300      	movs	r3, #0
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d101      	bne.n	800d6c0 <HAL_PCD_Stop+0x16>
 800d6bc:	2302      	movs	r3, #2
 800d6be:	e012      	b.n	800d6e6 <HAL_PCD_Stop+0x3c>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	2201      	movs	r2, #1
 800d6c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f005 f87c 	bl	80127ca <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f007 fa3c 	bl	8014b54 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b082      	sub	sp, #8
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	f007 fa3f 	bl	8014b7e <USB_ReadInterrupts>
 800d700:	4603      	mov	r3, r0
 800d702:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d70a:	d102      	bne.n	800d712 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fb5b 	bl	800ddc8 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4618      	mov	r0, r3
 800d718:	f007 fa31 	bl	8014b7e <USB_ReadInterrupts>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d726:	d112      	bne.n	800d74e <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d730:	b29a      	uxth	r2, r3
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d73a:	b292      	uxth	r2, r2
 800d73c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f009 fd48 	bl	80171d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800d746:	2100      	movs	r1, #0
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 f91e 	bl	800d98a <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	4618      	mov	r0, r3
 800d754:	f007 fa13 	bl	8014b7e <USB_ReadInterrupts>
 800d758:	4603      	mov	r3, r0
 800d75a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d75e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d762:	d10b      	bne.n	800d77c <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800d776:	b292      	uxth	r2, r2
 800d778:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	4618      	mov	r0, r3
 800d782:	f007 f9fc 	bl	8014b7e <USB_ReadInterrupts>
 800d786:	4603      	mov	r3, r0
 800d788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d78c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d790:	d10b      	bne.n	800d7aa <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d79a:	b29a      	uxth	r2, r3
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d7a4:	b292      	uxth	r2, r2
 800d7a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f007 f9e5 	bl	8014b7e <USB_ReadInterrupts>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d7ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7be:	d133      	bne.n	800d828 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d7c8:	b29a      	uxth	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	f022 0204 	bic.w	r2, r2, #4
 800d7d2:	b292      	uxth	r2, r2
 800d7d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f022 0208 	bic.w	r2, r2, #8
 800d7ea:	b292      	uxth	r2, r2
 800d7ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d107      	bne.n	800d80a <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800d802:	2100      	movs	r1, #0
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f00a f811 	bl	801782c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	f009 fd1c 	bl	8017248 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d818:	b29a      	uxth	r2, r3
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800d822:	b292      	uxth	r2, r2
 800d824:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4618      	mov	r0, r3
 800d82e:	f007 f9a6 	bl	8014b7e <USB_ReadInterrupts>
 800d832:	4603      	mov	r3, r0
 800d834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d83c:	d126      	bne.n	800d88c <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d846:	b29a      	uxth	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f042 0208 	orr.w	r2, r2, #8
 800d850:	b292      	uxth	r2, r2
 800d852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d85e:	b29a      	uxth	r2, r3
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d868:	b292      	uxth	r2, r2
 800d86a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d876:	b29a      	uxth	r2, r3
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	f042 0204 	orr.w	r2, r2, #4
 800d880:	b292      	uxth	r2, r2
 800d882:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f009 fcc4 	bl	8017214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	4618      	mov	r0, r3
 800d892:	f007 f974 	bl	8014b7e <USB_ReadInterrupts>
 800d896:	4603      	mov	r3, r0
 800d898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d89c:	2b80      	cmp	r3, #128	; 0x80
 800d89e:	d13f      	bne.n	800d920 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d8a8:	b29a      	uxth	r2, r3
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d8b2:	b292      	uxth	r2, r2
 800d8b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d12b      	bne.n	800d91a <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d8ca:	b29a      	uxth	r2, r3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0204 	orr.w	r2, r2, #4
 800d8d4:	b292      	uxth	r2, r2
 800d8d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f042 0208 	orr.w	r2, r2, #8
 800d8ec:	b292      	uxth	r2, r2
 800d8ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800d902:	b29b      	uxth	r3, r3
 800d904:	089b      	lsrs	r3, r3, #2
 800d906:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800d910:	2101      	movs	r1, #1
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	f009 ff8a 	bl	801782c <HAL_PCDEx_LPM_Callback>
 800d918:	e002      	b.n	800d920 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f009 fc7a 	bl	8017214 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	4618      	mov	r0, r3
 800d926:	f007 f92a 	bl	8014b7e <USB_ReadInterrupts>
 800d92a:	4603      	mov	r3, r0
 800d92c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d934:	d10e      	bne.n	800d954 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d93e:	b29a      	uxth	r2, r3
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800d948:	b292      	uxth	r2, r2
 800d94a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f009 fc33 	bl	80171ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	4618      	mov	r0, r3
 800d95a:	f007 f910 	bl	8014b7e <USB_ReadInterrupts>
 800d95e:	4603      	mov	r3, r0
 800d960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d968:	d10b      	bne.n	800d982 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d972:	b29a      	uxth	r2, r3
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d97c:	b292      	uxth	r2, r2
 800d97e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800d982:	bf00      	nop
 800d984:	3708      	adds	r7, #8
 800d986:	46bd      	mov	sp, r7
 800d988:	bd80      	pop	{r7, pc}

0800d98a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800d98a:	b580      	push	{r7, lr}
 800d98c:	b082      	sub	sp, #8
 800d98e:	af00      	add	r7, sp, #0
 800d990:	6078      	str	r0, [r7, #4]
 800d992:	460b      	mov	r3, r1
 800d994:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d101      	bne.n	800d9a4 <HAL_PCD_SetAddress+0x1a>
 800d9a0:	2302      	movs	r3, #2
 800d9a2:	e013      	b.n	800d9cc <HAL_PCD_SetAddress+0x42>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	78fa      	ldrb	r2, [r7, #3]
 800d9b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	78fa      	ldrb	r2, [r7, #3]
 800d9ba:	4611      	mov	r1, r2
 800d9bc:	4618      	mov	r0, r3
 800d9be:	f007 f89e 	bl	8014afe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2200      	movs	r2, #0
 800d9c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800d9ca:	2300      	movs	r3, #0
}
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3708      	adds	r7, #8
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	bd80      	pop	{r7, pc}

0800d9d4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	4608      	mov	r0, r1
 800d9de:	4611      	mov	r1, r2
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	70fb      	strb	r3, [r7, #3]
 800d9e6:	460b      	mov	r3, r1
 800d9e8:	803b      	strh	r3, [r7, #0]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d9f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	da0e      	bge.n	800da18 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d9fa:	78fb      	ldrb	r3, [r7, #3]
 800d9fc:	f003 0307 	and.w	r3, r3, #7
 800da00:	1c5a      	adds	r2, r3, #1
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	00db      	lsls	r3, r3, #3
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	4413      	add	r3, r2
 800da0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	2201      	movs	r2, #1
 800da14:	705a      	strb	r2, [r3, #1]
 800da16:	e00e      	b.n	800da36 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800da18:	78fb      	ldrb	r3, [r7, #3]
 800da1a:	f003 0207 	and.w	r2, r3, #7
 800da1e:	4613      	mov	r3, r2
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	4413      	add	r3, r2
 800da24:	00db      	lsls	r3, r3, #3
 800da26:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800da2a:	687a      	ldr	r2, [r7, #4]
 800da2c:	4413      	add	r3, r2
 800da2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2200      	movs	r2, #0
 800da34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800da36:	78fb      	ldrb	r3, [r7, #3]
 800da38:	f003 0307 	and.w	r3, r3, #7
 800da3c:	b2da      	uxtb	r2, r3
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800da42:	883a      	ldrh	r2, [r7, #0]
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	78ba      	ldrb	r2, [r7, #2]
 800da4c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	785b      	ldrb	r3, [r3, #1]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d004      	beq.n	800da60 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	b29a      	uxth	r2, r3
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800da60:	78bb      	ldrb	r3, [r7, #2]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d102      	bne.n	800da6c <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2200      	movs	r2, #0
 800da6a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800da72:	2b01      	cmp	r3, #1
 800da74:	d101      	bne.n	800da7a <HAL_PCD_EP_Open+0xa6>
 800da76:	2302      	movs	r3, #2
 800da78:	e00e      	b.n	800da98 <HAL_PCD_EP_Open+0xc4>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2201      	movs	r2, #1
 800da7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	68f9      	ldr	r1, [r7, #12]
 800da88:	4618      	mov	r0, r3
 800da8a:	f004 fee7 	bl	801285c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800da96:	7afb      	ldrb	r3, [r7, #11]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3710      	adds	r7, #16
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	460b      	mov	r3, r1
 800daaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800daac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	da0e      	bge.n	800dad2 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dab4:	78fb      	ldrb	r3, [r7, #3]
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	1c5a      	adds	r2, r3, #1
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	4413      	add	r3, r2
 800dac8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	2201      	movs	r2, #1
 800dace:	705a      	strb	r2, [r3, #1]
 800dad0:	e00e      	b.n	800daf0 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dad2:	78fb      	ldrb	r3, [r7, #3]
 800dad4:	f003 0207 	and.w	r2, r3, #7
 800dad8:	4613      	mov	r3, r2
 800dada:	009b      	lsls	r3, r3, #2
 800dadc:	4413      	add	r3, r2
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dae4:	687a      	ldr	r2, [r7, #4]
 800dae6:	4413      	add	r3, r2
 800dae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800daf0:	78fb      	ldrb	r3, [r7, #3]
 800daf2:	f003 0307 	and.w	r3, r3, #7
 800daf6:	b2da      	uxtb	r2, r3
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800db02:	2b01      	cmp	r3, #1
 800db04:	d101      	bne.n	800db0a <HAL_PCD_EP_Close+0x6a>
 800db06:	2302      	movs	r3, #2
 800db08:	e00e      	b.n	800db28 <HAL_PCD_EP_Close+0x88>
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2201      	movs	r2, #1
 800db0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68f9      	ldr	r1, [r7, #12]
 800db18:	4618      	mov	r0, r3
 800db1a:	f005 fa0d 	bl	8012f38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	60f8      	str	r0, [r7, #12]
 800db38:	607a      	str	r2, [r7, #4]
 800db3a:	603b      	str	r3, [r7, #0]
 800db3c:	460b      	mov	r3, r1
 800db3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800db40:	7afb      	ldrb	r3, [r7, #11]
 800db42:	f003 0207 	and.w	r2, r3, #7
 800db46:	4613      	mov	r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	4413      	add	r3, r2
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800db52:	68fa      	ldr	r2, [r7, #12]
 800db54:	4413      	add	r3, r2
 800db56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	687a      	ldr	r2, [r7, #4]
 800db5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	683a      	ldr	r2, [r7, #0]
 800db62:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	2200      	movs	r2, #0
 800db68:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800db6a:	697b      	ldr	r3, [r7, #20]
 800db6c:	2200      	movs	r2, #0
 800db6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800db70:	7afb      	ldrb	r3, [r7, #11]
 800db72:	f003 0307 	and.w	r3, r3, #7
 800db76:	b2da      	uxtb	r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800db7c:	7afb      	ldrb	r3, [r7, #11]
 800db7e:	f003 0307 	and.w	r3, r3, #7
 800db82:	2b00      	cmp	r3, #0
 800db84:	d106      	bne.n	800db94 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	6979      	ldr	r1, [r7, #20]
 800db8c:	4618      	mov	r0, r3
 800db8e:	f005 fbc0 	bl	8013312 <USB_EPStartXfer>
 800db92:	e005      	b.n	800dba0 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	6979      	ldr	r1, [r7, #20]
 800db9a:	4618      	mov	r0, r3
 800db9c:	f005 fbb9 	bl	8013312 <USB_EPStartXfer>
  }

  return HAL_OK;
 800dba0:	2300      	movs	r3, #0
}
 800dba2:	4618      	mov	r0, r3
 800dba4:	3718      	adds	r7, #24
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dbaa:	b480      	push	{r7}
 800dbac:	b083      	sub	sp, #12
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
 800dbb2:	460b      	mov	r3, r1
 800dbb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800dbb6:	78fb      	ldrb	r3, [r7, #3]
 800dbb8:	f003 0207 	and.w	r2, r3, #7
 800dbbc:	6879      	ldr	r1, [r7, #4]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	009b      	lsls	r3, r3, #2
 800dbc2:	4413      	add	r3, r2
 800dbc4:	00db      	lsls	r3, r3, #3
 800dbc6:	440b      	add	r3, r1
 800dbc8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800dbcc:	681b      	ldr	r3, [r3, #0]
}
 800dbce:	4618      	mov	r0, r3
 800dbd0:	370c      	adds	r7, #12
 800dbd2:	46bd      	mov	sp, r7
 800dbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd8:	4770      	bx	lr

0800dbda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800dbda:	b580      	push	{r7, lr}
 800dbdc:	b086      	sub	sp, #24
 800dbde:	af00      	add	r7, sp, #0
 800dbe0:	60f8      	str	r0, [r7, #12]
 800dbe2:	607a      	str	r2, [r7, #4]
 800dbe4:	603b      	str	r3, [r7, #0]
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dbea:	7afb      	ldrb	r3, [r7, #11]
 800dbec:	f003 0307 	and.w	r3, r3, #7
 800dbf0:	1c5a      	adds	r2, r3, #1
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	00db      	lsls	r3, r3, #3
 800dbfa:	68fa      	ldr	r2, [r7, #12]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	683a      	ldr	r2, [r7, #0]
 800dc0a:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2201      	movs	r2, #1
 800dc10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	683a      	ldr	r2, [r7, #0]
 800dc18:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	2200      	movs	r2, #0
 800dc1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800dc20:	697b      	ldr	r3, [r7, #20]
 800dc22:	2201      	movs	r2, #1
 800dc24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dc26:	7afb      	ldrb	r3, [r7, #11]
 800dc28:	f003 0307 	and.w	r3, r3, #7
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dc32:	7afb      	ldrb	r3, [r7, #11]
 800dc34:	f003 0307 	and.w	r3, r3, #7
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d106      	bne.n	800dc4a <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	6979      	ldr	r1, [r7, #20]
 800dc42:	4618      	mov	r0, r3
 800dc44:	f005 fb65 	bl	8013312 <USB_EPStartXfer>
 800dc48:	e005      	b.n	800dc56 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	6979      	ldr	r1, [r7, #20]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f005 fb5e 	bl	8013312 <USB_EPStartXfer>
  }

  return HAL_OK;
 800dc56:	2300      	movs	r3, #0
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3718      	adds	r7, #24
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd80      	pop	{r7, pc}

0800dc60 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b084      	sub	sp, #16
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	6078      	str	r0, [r7, #4]
 800dc68:	460b      	mov	r3, r1
 800dc6a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800dc6c:	78fb      	ldrb	r3, [r7, #3]
 800dc6e:	f003 0207 	and.w	r2, r3, #7
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	685b      	ldr	r3, [r3, #4]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d901      	bls.n	800dc7e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800dc7a:	2301      	movs	r3, #1
 800dc7c:	e04c      	b.n	800dd18 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dc7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	da0e      	bge.n	800dca4 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dc86:	78fb      	ldrb	r3, [r7, #3]
 800dc88:	f003 0307 	and.w	r3, r3, #7
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	4613      	mov	r3, r2
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	4413      	add	r3, r2
 800dc94:	00db      	lsls	r3, r3, #3
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	4413      	add	r3, r2
 800dc9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	2201      	movs	r2, #1
 800dca0:	705a      	strb	r2, [r3, #1]
 800dca2:	e00c      	b.n	800dcbe <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800dca4:	78fa      	ldrb	r2, [r7, #3]
 800dca6:	4613      	mov	r3, r2
 800dca8:	009b      	lsls	r3, r3, #2
 800dcaa:	4413      	add	r3, r2
 800dcac:	00db      	lsls	r3, r3, #3
 800dcae:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dcb2:	687a      	ldr	r2, [r7, #4]
 800dcb4:	4413      	add	r3, r2
 800dcb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dcc4:	78fb      	ldrb	r3, [r7, #3]
 800dcc6:	f003 0307 	and.w	r3, r3, #7
 800dcca:	b2da      	uxtb	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d101      	bne.n	800dcde <HAL_PCD_EP_SetStall+0x7e>
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e01c      	b.n	800dd18 <HAL_PCD_EP_SetStall+0xb8>
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	68f9      	ldr	r1, [r7, #12]
 800dcec:	4618      	mov	r0, r3
 800dcee:	f006 fe07 	bl	8014900 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800dcf2:	78fb      	ldrb	r3, [r7, #3]
 800dcf4:	f003 0307 	and.w	r3, r3, #7
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d108      	bne.n	800dd0e <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800dd06:	4619      	mov	r1, r3
 800dd08:	4610      	mov	r0, r2
 800dd0a:	f006 ff48 	bl	8014b9e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2200      	movs	r2, #0
 800dd12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800dd16:	2300      	movs	r3, #0
}
 800dd18:	4618      	mov	r0, r3
 800dd1a:	3710      	adds	r7, #16
 800dd1c:	46bd      	mov	sp, r7
 800dd1e:	bd80      	pop	{r7, pc}

0800dd20 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b084      	sub	sp, #16
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800dd2c:	78fb      	ldrb	r3, [r7, #3]
 800dd2e:	f003 020f 	and.w	r2, r3, #15
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	685b      	ldr	r3, [r3, #4]
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d901      	bls.n	800dd3e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800dd3a:	2301      	movs	r3, #1
 800dd3c:	e040      	b.n	800ddc0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800dd3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	da0e      	bge.n	800dd64 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800dd46:	78fb      	ldrb	r3, [r7, #3]
 800dd48:	f003 0307 	and.w	r3, r3, #7
 800dd4c:	1c5a      	adds	r2, r3, #1
 800dd4e:	4613      	mov	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4413      	add	r3, r2
 800dd54:	00db      	lsls	r3, r3, #3
 800dd56:	687a      	ldr	r2, [r7, #4]
 800dd58:	4413      	add	r3, r2
 800dd5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	2201      	movs	r2, #1
 800dd60:	705a      	strb	r2, [r3, #1]
 800dd62:	e00e      	b.n	800dd82 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800dd64:	78fb      	ldrb	r3, [r7, #3]
 800dd66:	f003 0207 	and.w	r2, r3, #7
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	009b      	lsls	r3, r3, #2
 800dd6e:	4413      	add	r3, r2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	4413      	add	r3, r2
 800dd7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	2200      	movs	r2, #0
 800dd86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800dd88:	78fb      	ldrb	r3, [r7, #3]
 800dd8a:	f003 0307 	and.w	r3, r3, #7
 800dd8e:	b2da      	uxtb	r2, r3
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d101      	bne.n	800dda2 <HAL_PCD_EP_ClrStall+0x82>
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e00e      	b.n	800ddc0 <HAL_PCD_EP_ClrStall+0xa0>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	68f9      	ldr	r1, [r7, #12]
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	f006 fdf6 	bl	80149a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b08e      	sub	sp, #56	; 0x38
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800ddd0:	e2d6      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ddda:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800dddc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	f003 030f 	and.w	r3, r3, #15
 800dde4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800dde8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	f040 815b 	bne.w	800e0a8 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800ddf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ddf4:	f003 0310 	and.w	r3, r3, #16
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d150      	bne.n	800de9e <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	881b      	ldrh	r3, [r3, #0]
 800de02:	b29b      	uxth	r3, r3
 800de04:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800de08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de0c:	81fb      	strh	r3, [r7, #14]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681a      	ldr	r2, [r3, #0]
 800de12:	89fb      	ldrh	r3, [r7, #14]
 800de14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800de18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800de1c:	b29b      	uxth	r3, r3
 800de1e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	3328      	adds	r3, #40	; 0x28
 800de24:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800de2e:	b29b      	uxth	r3, r3
 800de30:	461a      	mov	r2, r3
 800de32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	00db      	lsls	r3, r3, #3
 800de38:	4413      	add	r3, r2
 800de3a:	687a      	ldr	r2, [r7, #4]
 800de3c:	6812      	ldr	r2, [r2, #0]
 800de3e:	4413      	add	r3, r2
 800de40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800de44:	881b      	ldrh	r3, [r3, #0]
 800de46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800de4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de50:	695a      	ldr	r2, [r3, #20]
 800de52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de54:	69db      	ldr	r3, [r3, #28]
 800de56:	441a      	add	r2, r3
 800de58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800de5c:	2100      	movs	r1, #0
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	f009 f991 	bl	8017186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de6a:	b2db      	uxtb	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f000 8287 	beq.w	800e380 <PCD_EP_ISR_Handler+0x5b8>
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	699b      	ldr	r3, [r3, #24]
 800de76:	2b00      	cmp	r3, #0
 800de78:	f040 8282 	bne.w	800e380 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800de82:	b2db      	uxtb	r3, r3
 800de84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de88:	b2da      	uxtb	r2, r3
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	b292      	uxth	r2, r2
 800de90:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800de9c:	e270      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dea4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	881b      	ldrh	r3, [r3, #0]
 800deac:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800deae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800deb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d032      	beq.n	800df1e <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	461a      	mov	r2, r3
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	4413      	add	r3, r2
 800decc:	687a      	ldr	r2, [r7, #4]
 800dece:	6812      	ldr	r2, [r2, #0]
 800ded0:	4413      	add	r3, r2
 800ded2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ded6:	881b      	ldrh	r3, [r3, #0]
 800ded8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800dedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dede:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6818      	ldr	r0, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800deee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def0:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800def2:	b29b      	uxth	r3, r3
 800def4:	f006 fea1 	bl	8014c3a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	b29a      	uxth	r2, r3
 800df00:	f640 738f 	movw	r3, #3983	; 0xf8f
 800df04:	4013      	ands	r3, r2
 800df06:	823b      	strh	r3, [r7, #16]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	8a3a      	ldrh	r2, [r7, #16]
 800df0e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df12:	b292      	uxth	r2, r2
 800df14:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f009 f908 	bl	801712c <HAL_PCD_SetupStageCallback>
 800df1c:	e230      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800df1e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800df22:	2b00      	cmp	r3, #0
 800df24:	f280 822c 	bge.w	800e380 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	881b      	ldrh	r3, [r3, #0]
 800df2e:	b29a      	uxth	r2, r3
 800df30:	f640 738f 	movw	r3, #3983	; 0xf8f
 800df34:	4013      	ands	r3, r2
 800df36:	83bb      	strh	r3, [r7, #28]
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	8bba      	ldrh	r2, [r7, #28]
 800df3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df42:	b292      	uxth	r2, r2
 800df44:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800df4e:	b29b      	uxth	r3, r3
 800df50:	461a      	mov	r2, r3
 800df52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	00db      	lsls	r3, r3, #3
 800df58:	4413      	add	r3, r2
 800df5a:	687a      	ldr	r2, [r7, #4]
 800df5c:	6812      	ldr	r2, [r2, #0]
 800df5e:	4413      	add	r3, r2
 800df60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800df64:	881b      	ldrh	r3, [r3, #0]
 800df66:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800df6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df6c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800df6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df70:	69db      	ldr	r3, [r3, #28]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d019      	beq.n	800dfaa <PCD_EP_ISR_Handler+0x1e2>
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	695b      	ldr	r3, [r3, #20]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d015      	beq.n	800dfaa <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6818      	ldr	r0, [r3, #0]
 800df82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df84:	6959      	ldr	r1, [r3, #20]
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800df8e:	b29b      	uxth	r3, r3
 800df90:	f006 fe53 	bl	8014c3a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800df94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df96:	695a      	ldr	r2, [r3, #20]
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	441a      	add	r2, r3
 800df9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfa0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800dfa2:	2100      	movs	r1, #0
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f009 f8d3 	bl	8017150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f040 81e2 	bne.w	800e380 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	61bb      	str	r3, [r7, #24]
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	461a      	mov	r2, r3
 800dfce:	69bb      	ldr	r3, [r7, #24]
 800dfd0:	4413      	add	r3, r2
 800dfd2:	61bb      	str	r3, [r7, #24]
 800dfd4:	69bb      	ldr	r3, [r7, #24]
 800dfd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800dfda:	617b      	str	r3, [r7, #20]
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfde:	691b      	ldr	r3, [r3, #16]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d112      	bne.n	800e00a <PCD_EP_ISR_Handler+0x242>
 800dfe4:	697b      	ldr	r3, [r7, #20]
 800dfe6:	881b      	ldrh	r3, [r3, #0]
 800dfe8:	b29b      	uxth	r3, r3
 800dfea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800dfee:	b29a      	uxth	r2, r3
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	801a      	strh	r2, [r3, #0]
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	881b      	ldrh	r3, [r3, #0]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dffe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e002:	b29a      	uxth	r2, r3
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	801a      	strh	r2, [r3, #0]
 800e008:	e02f      	b.n	800e06a <PCD_EP_ISR_Handler+0x2a2>
 800e00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	2b3e      	cmp	r3, #62	; 0x3e
 800e010:	d813      	bhi.n	800e03a <PCD_EP_ISR_Handler+0x272>
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	085b      	lsrs	r3, r3, #1
 800e018:	633b      	str	r3, [r7, #48]	; 0x30
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	691b      	ldr	r3, [r3, #16]
 800e01e:	f003 0301 	and.w	r3, r3, #1
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <PCD_EP_ISR_Handler+0x264>
 800e026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e028:	3301      	adds	r3, #1
 800e02a:	633b      	str	r3, [r7, #48]	; 0x30
 800e02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02e:	b29b      	uxth	r3, r3
 800e030:	029b      	lsls	r3, r3, #10
 800e032:	b29a      	uxth	r2, r3
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	801a      	strh	r2, [r3, #0]
 800e038:	e017      	b.n	800e06a <PCD_EP_ISR_Handler+0x2a2>
 800e03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e03c:	691b      	ldr	r3, [r3, #16]
 800e03e:	095b      	lsrs	r3, r3, #5
 800e040:	633b      	str	r3, [r7, #48]	; 0x30
 800e042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	f003 031f 	and.w	r3, r3, #31
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d102      	bne.n	800e054 <PCD_EP_ISR_Handler+0x28c>
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	3b01      	subs	r3, #1
 800e052:	633b      	str	r3, [r7, #48]	; 0x30
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	b29b      	uxth	r3, r3
 800e058:	029b      	lsls	r3, r3, #10
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e060:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e064:	b29a      	uxth	r2, r3
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	881b      	ldrh	r3, [r3, #0]
 800e070:	b29b      	uxth	r3, r3
 800e072:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e07a:	827b      	strh	r3, [r7, #18]
 800e07c:	8a7b      	ldrh	r3, [r7, #18]
 800e07e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e082:	827b      	strh	r3, [r7, #18]
 800e084:	8a7b      	ldrh	r3, [r7, #18]
 800e086:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e08a:	827b      	strh	r3, [r7, #18]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681a      	ldr	r2, [r3, #0]
 800e090:	8a7b      	ldrh	r3, [r7, #18]
 800e092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e09a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e09e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	8013      	strh	r3, [r2, #0]
 800e0a6:	e16b      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	461a      	mov	r2, r3
 800e0ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	4413      	add	r3, r2
 800e0b6:	881b      	ldrh	r3, [r3, #0]
 800e0b8:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e0ba:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	f280 80e4 	bge.w	800e28c <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0ce:	009b      	lsls	r3, r3, #2
 800e0d0:	4413      	add	r3, r2
 800e0d2:	881b      	ldrh	r3, [r3, #0]
 800e0d4:	b29a      	uxth	r2, r3
 800e0d6:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e0da:	4013      	ands	r3, r2
 800e0dc:	853b      	strh	r3, [r7, #40]	; 0x28
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	461a      	mov	r2, r3
 800e0e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e0ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e0f2:	b292      	uxth	r2, r2
 800e0f4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e0f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e0fa:	4613      	mov	r3, r2
 800e0fc:	009b      	lsls	r3, r3, #2
 800e0fe:	4413      	add	r3, r2
 800e100:	00db      	lsls	r3, r3, #3
 800e102:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	4413      	add	r3, r2
 800e10a:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10e:	7b1b      	ldrb	r3, [r3, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d120      	bne.n	800e156 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	461a      	mov	r2, r3
 800e120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	4413      	add	r3, r2
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	6812      	ldr	r2, [r2, #0]
 800e12c:	4413      	add	r3, r2
 800e12e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e132:	881b      	ldrh	r3, [r3, #0]
 800e134:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e138:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800e13a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 8083 	beq.w	800e248 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	6818      	ldr	r0, [r3, #0]
 800e146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e148:	6959      	ldr	r1, [r3, #20]
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	88da      	ldrh	r2, [r3, #6]
 800e14e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e150:	f006 fd73 	bl	8014c3a <USB_ReadPMA>
 800e154:	e078      	b.n	800e248 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	78db      	ldrb	r3, [r3, #3]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d108      	bne.n	800e170 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e15e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e160:	461a      	mov	r2, r3
 800e162:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f919 	bl	800e39c <HAL_PCD_EP_DB_Receive>
 800e16a:	4603      	mov	r3, r0
 800e16c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e16e:	e06b      	b.n	800e248 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	461a      	mov	r2, r3
 800e176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	4413      	add	r3, r2
 800e17e:	881b      	ldrh	r3, [r3, #0]
 800e180:	b29b      	uxth	r3, r3
 800e182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e18a:	847b      	strh	r3, [r7, #34]	; 0x22
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	461a      	mov	r2, r3
 800e192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e194:	781b      	ldrb	r3, [r3, #0]
 800e196:	009b      	lsls	r3, r3, #2
 800e198:	441a      	add	r2, r3
 800e19a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e19c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e1a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e1a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e1a8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e1ac:	b29b      	uxth	r3, r3
 800e1ae:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	009b      	lsls	r3, r3, #2
 800e1bc:	4413      	add	r3, r2
 800e1be:	881b      	ldrh	r3, [r3, #0]
 800e1c0:	b29b      	uxth	r3, r3
 800e1c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d01f      	beq.n	800e20a <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e1d2:	b29b      	uxth	r3, r3
 800e1d4:	461a      	mov	r2, r3
 800e1d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	00db      	lsls	r3, r3, #3
 800e1dc:	4413      	add	r3, r2
 800e1de:	687a      	ldr	r2, [r7, #4]
 800e1e0:	6812      	ldr	r2, [r2, #0]
 800e1e2:	4413      	add	r3, r2
 800e1e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e1e8:	881b      	ldrh	r3, [r3, #0]
 800e1ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e1ee:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800e1f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	d028      	beq.n	800e248 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6818      	ldr	r0, [r3, #0]
 800e1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fc:	6959      	ldr	r1, [r3, #20]
 800e1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e200:	891a      	ldrh	r2, [r3, #8]
 800e202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e204:	f006 fd19 	bl	8014c3a <USB_ReadPMA>
 800e208:	e01e      	b.n	800e248 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e212:	b29b      	uxth	r3, r3
 800e214:	461a      	mov	r2, r3
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	00db      	lsls	r3, r3, #3
 800e21c:	4413      	add	r3, r2
 800e21e:	687a      	ldr	r2, [r7, #4]
 800e220:	6812      	ldr	r2, [r2, #0]
 800e222:	4413      	add	r3, r2
 800e224:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e228:	881b      	ldrh	r3, [r3, #0]
 800e22a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e22e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800e230:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e232:	2b00      	cmp	r3, #0
 800e234:	d008      	beq.n	800e248 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6818      	ldr	r0, [r3, #0]
 800e23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23c:	6959      	ldr	r1, [r3, #20]
 800e23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e240:	895a      	ldrh	r2, [r3, #10]
 800e242:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e244:	f006 fcf9 	bl	8014c3a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24a:	69da      	ldr	r2, [r3, #28]
 800e24c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e24e:	441a      	add	r2, r3
 800e250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e252:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e256:	695a      	ldr	r2, [r3, #20]
 800e258:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e25a:	441a      	add	r2, r3
 800e25c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e25e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	699b      	ldr	r3, [r3, #24]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d004      	beq.n	800e272 <PCD_EP_ISR_Handler+0x4aa>
 800e268:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e26c:	691b      	ldr	r3, [r3, #16]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d206      	bcs.n	800e280 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	4619      	mov	r1, r3
 800e278:	6878      	ldr	r0, [r7, #4]
 800e27a:	f008 ff69 	bl	8017150 <HAL_PCD_DataOutStageCallback>
 800e27e:	e005      	b.n	800e28c <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e286:	4618      	mov	r0, r3
 800e288:	f005 f843 	bl	8013312 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800e28c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e292:	2b00      	cmp	r3, #0
 800e294:	d074      	beq.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800e296:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e29a:	1c5a      	adds	r2, r3, #1
 800e29c:	4613      	mov	r3, r2
 800e29e:	009b      	lsls	r3, r3, #2
 800e2a0:	4413      	add	r3, r2
 800e2a2:	00db      	lsls	r3, r3, #3
 800e2a4:	687a      	ldr	r2, [r7, #4]
 800e2a6:	4413      	add	r3, r2
 800e2a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	881b      	ldrh	r3, [r3, #0]
 800e2ba:	b29b      	uxth	r3, r3
 800e2bc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2c4:	843b      	strh	r3, [r7, #32]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	461a      	mov	r2, r3
 800e2cc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	441a      	add	r2, r3
 800e2d4:	8c3b      	ldrh	r3, [r7, #32]
 800e2d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	78db      	ldrb	r3, [r3, #3]
 800e2e6:	2b02      	cmp	r3, #2
 800e2e8:	d144      	bne.n	800e374 <PCD_EP_ISR_Handler+0x5ac>
 800e2ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d13f      	bne.n	800e374 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	461a      	mov	r2, r3
 800e300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e302:	781b      	ldrb	r3, [r3, #0]
 800e304:	00db      	lsls	r3, r3, #3
 800e306:	4413      	add	r3, r2
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	6812      	ldr	r2, [r2, #0]
 800e30c:	4413      	add	r3, r2
 800e30e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e312:	881b      	ldrh	r3, [r3, #0]
 800e314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e318:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	699a      	ldr	r2, [r3, #24]
 800e31e:	8bfb      	ldrh	r3, [r7, #30]
 800e320:	429a      	cmp	r2, r3
 800e322:	d906      	bls.n	800e332 <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800e324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e326:	699a      	ldr	r2, [r3, #24]
 800e328:	8bfb      	ldrh	r3, [r7, #30]
 800e32a:	1ad2      	subs	r2, r2, r3
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	619a      	str	r2, [r3, #24]
 800e330:	e002      	b.n	800e338 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800e332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e334:	2200      	movs	r2, #0
 800e336:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	699b      	ldr	r3, [r3, #24]
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d106      	bne.n	800e34e <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f008 ff1d 	bl	8017186 <HAL_PCD_DataInStageCallback>
 800e34c:	e018      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800e34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e350:	695a      	ldr	r2, [r3, #20]
 800e352:	8bfb      	ldrh	r3, [r7, #30]
 800e354:	441a      	add	r2, r3
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800e35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35c:	69da      	ldr	r2, [r3, #28]
 800e35e:	8bfb      	ldrh	r3, [r7, #30]
 800e360:	441a      	add	r2, r3
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e36c:	4618      	mov	r0, r3
 800e36e:	f004 ffd0 	bl	8013312 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800e372:	e005      	b.n	800e380 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800e374:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e376:	461a      	mov	r2, r3
 800e378:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f917 	bl	800e5ae <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e388:	b29b      	uxth	r3, r3
 800e38a:	b21b      	sxth	r3, r3
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	f6ff ad20 	blt.w	800ddd2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800e392:	2300      	movs	r3, #0
}
 800e394:	4618      	mov	r0, r3
 800e396:	3738      	adds	r7, #56	; 0x38
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	60f8      	str	r0, [r7, #12]
 800e3a4:	60b9      	str	r1, [r7, #8]
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e3aa:	88fb      	ldrh	r3, [r7, #6]
 800e3ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d07c      	beq.n	800e4ae <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	461a      	mov	r2, r3
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	00db      	lsls	r3, r3, #3
 800e3c6:	4413      	add	r3, r2
 800e3c8:	68fa      	ldr	r2, [r7, #12]
 800e3ca:	6812      	ldr	r2, [r2, #0]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e3d2:	881b      	ldrh	r3, [r3, #0]
 800e3d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e3d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	699a      	ldr	r2, [r3, #24]
 800e3de:	8b7b      	ldrh	r3, [r7, #26]
 800e3e0:	429a      	cmp	r2, r3
 800e3e2:	d306      	bcc.n	800e3f2 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	699a      	ldr	r2, [r3, #24]
 800e3e8:	8b7b      	ldrh	r3, [r7, #26]
 800e3ea:	1ad2      	subs	r2, r2, r3
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	619a      	str	r2, [r3, #24]
 800e3f0:	e002      	b.n	800e3f8 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	699b      	ldr	r3, [r3, #24]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d123      	bne.n	800e448 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	461a      	mov	r2, r3
 800e406:	68bb      	ldr	r3, [r7, #8]
 800e408:	781b      	ldrb	r3, [r3, #0]
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	4413      	add	r3, r2
 800e40e:	881b      	ldrh	r3, [r3, #0]
 800e410:	b29b      	uxth	r3, r3
 800e412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e41a:	833b      	strh	r3, [r7, #24]
 800e41c:	8b3b      	ldrh	r3, [r7, #24]
 800e41e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e422:	833b      	strh	r3, [r7, #24]
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	461a      	mov	r2, r3
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	009b      	lsls	r3, r3, #2
 800e430:	441a      	add	r2, r3
 800e432:	8b3b      	ldrh	r3, [r7, #24]
 800e434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e43c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e440:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e444:	b29b      	uxth	r3, r3
 800e446:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e448:	88fb      	ldrh	r3, [r7, #6]
 800e44a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d01f      	beq.n	800e492 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	461a      	mov	r2, r3
 800e458:	68bb      	ldr	r3, [r7, #8]
 800e45a:	781b      	ldrb	r3, [r3, #0]
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	4413      	add	r3, r2
 800e460:	881b      	ldrh	r3, [r3, #0]
 800e462:	b29b      	uxth	r3, r3
 800e464:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e46c:	82fb      	strh	r3, [r7, #22]
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	461a      	mov	r2, r3
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	441a      	add	r2, r3
 800e47c:	8afb      	ldrh	r3, [r7, #22]
 800e47e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e482:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e48a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e48e:	b29b      	uxth	r3, r3
 800e490:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e492:	8b7b      	ldrh	r3, [r7, #26]
 800e494:	2b00      	cmp	r3, #0
 800e496:	f000 8085 	beq.w	800e5a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	6818      	ldr	r0, [r3, #0]
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	6959      	ldr	r1, [r3, #20]
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	891a      	ldrh	r2, [r3, #8]
 800e4a6:	8b7b      	ldrh	r3, [r7, #26]
 800e4a8:	f006 fbc7 	bl	8014c3a <USB_ReadPMA>
 800e4ac:	e07a      	b.n	800e5a4 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	4413      	add	r3, r2
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	6812      	ldr	r2, [r2, #0]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e4cc:	881b      	ldrh	r3, [r3, #0]
 800e4ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e4d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	699a      	ldr	r2, [r3, #24]
 800e4d8:	8b7b      	ldrh	r3, [r7, #26]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d306      	bcc.n	800e4ec <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800e4de:	68bb      	ldr	r3, [r7, #8]
 800e4e0:	699a      	ldr	r2, [r3, #24]
 800e4e2:	8b7b      	ldrh	r3, [r7, #26]
 800e4e4:	1ad2      	subs	r2, r2, r3
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	619a      	str	r2, [r3, #24]
 800e4ea:	e002      	b.n	800e4f2 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800e4ec:	68bb      	ldr	r3, [r7, #8]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800e4f2:	68bb      	ldr	r3, [r7, #8]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d123      	bne.n	800e542 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	461a      	mov	r2, r3
 800e500:	68bb      	ldr	r3, [r7, #8]
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4413      	add	r3, r2
 800e508:	881b      	ldrh	r3, [r3, #0]
 800e50a:	b29b      	uxth	r3, r3
 800e50c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e514:	83fb      	strh	r3, [r7, #30]
 800e516:	8bfb      	ldrh	r3, [r7, #30]
 800e518:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e51c:	83fb      	strh	r3, [r7, #30]
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	461a      	mov	r2, r3
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	781b      	ldrb	r3, [r3, #0]
 800e528:	009b      	lsls	r3, r3, #2
 800e52a:	441a      	add	r2, r3
 800e52c:	8bfb      	ldrh	r3, [r7, #30]
 800e52e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e532:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e53a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e53e:	b29b      	uxth	r3, r3
 800e540:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800e542:	88fb      	ldrh	r3, [r7, #6]
 800e544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d11f      	bne.n	800e58c <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	461a      	mov	r2, r3
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	781b      	ldrb	r3, [r3, #0]
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	4413      	add	r3, r2
 800e55a:	881b      	ldrh	r3, [r3, #0]
 800e55c:	b29b      	uxth	r3, r3
 800e55e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e566:	83bb      	strh	r3, [r7, #28]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	461a      	mov	r2, r3
 800e56e:	68bb      	ldr	r3, [r7, #8]
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	009b      	lsls	r3, r3, #2
 800e574:	441a      	add	r2, r3
 800e576:	8bbb      	ldrh	r3, [r7, #28]
 800e578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e57c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e588:	b29b      	uxth	r3, r3
 800e58a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800e58c:	8b7b      	ldrh	r3, [r7, #26]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d008      	beq.n	800e5a4 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	6818      	ldr	r0, [r3, #0]
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	6959      	ldr	r1, [r3, #20]
 800e59a:	68bb      	ldr	r3, [r7, #8]
 800e59c:	895a      	ldrh	r2, [r3, #10]
 800e59e:	8b7b      	ldrh	r3, [r7, #26]
 800e5a0:	f006 fb4b 	bl	8014c3a <USB_ReadPMA>
    }
  }

  return count;
 800e5a4:	8b7b      	ldrh	r3, [r7, #26]
}
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	3720      	adds	r7, #32
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	bd80      	pop	{r7, pc}

0800e5ae <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800e5ae:	b580      	push	{r7, lr}
 800e5b0:	b0a2      	sub	sp, #136	; 0x88
 800e5b2:	af00      	add	r7, sp, #0
 800e5b4:	60f8      	str	r0, [r7, #12]
 800e5b6:	60b9      	str	r1, [r7, #8]
 800e5b8:	4613      	mov	r3, r2
 800e5ba:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800e5bc:	88fb      	ldrh	r3, [r7, #6]
 800e5be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 81c5 	beq.w	800e952 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e5d0:	b29b      	uxth	r3, r3
 800e5d2:	461a      	mov	r2, r3
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	781b      	ldrb	r3, [r3, #0]
 800e5d8:	00db      	lsls	r3, r3, #3
 800e5da:	4413      	add	r3, r2
 800e5dc:	68fa      	ldr	r2, [r7, #12]
 800e5de:	6812      	ldr	r2, [r2, #0]
 800e5e0:	4413      	add	r3, r2
 800e5e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e5e6:	881b      	ldrh	r3, [r3, #0]
 800e5e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e5ec:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800e5f0:	68bb      	ldr	r3, [r7, #8]
 800e5f2:	699a      	ldr	r2, [r3, #24]
 800e5f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d907      	bls.n	800e60c <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	699a      	ldr	r2, [r3, #24]
 800e600:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e604:	1ad2      	subs	r2, r2, r3
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	619a      	str	r2, [r3, #24]
 800e60a:	e002      	b.n	800e612 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	2200      	movs	r2, #0
 800e610:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	699b      	ldr	r3, [r3, #24]
 800e616:	2b00      	cmp	r3, #0
 800e618:	f040 80b9 	bne.w	800e78e <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	785b      	ldrb	r3, [r3, #1]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d126      	bne.n	800e672 <HAL_PCD_EP_DB_Transmit+0xc4>
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	62bb      	str	r3, [r7, #40]	; 0x28
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e632:	b29b      	uxth	r3, r3
 800e634:	461a      	mov	r2, r3
 800e636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e638:	4413      	add	r3, r2
 800e63a:	62bb      	str	r3, [r7, #40]	; 0x28
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	00da      	lsls	r2, r3, #3
 800e642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e644:	4413      	add	r3, r2
 800e646:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e64a:	627b      	str	r3, [r7, #36]	; 0x24
 800e64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64e:	881b      	ldrh	r3, [r3, #0]
 800e650:	b29b      	uxth	r3, r3
 800e652:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e656:	b29a      	uxth	r2, r3
 800e658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65a:	801a      	strh	r2, [r3, #0]
 800e65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e65e:	881b      	ldrh	r3, [r3, #0]
 800e660:	b29b      	uxth	r3, r3
 800e662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	801a      	strh	r2, [r3, #0]
 800e670:	e01a      	b.n	800e6a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	785b      	ldrb	r3, [r3, #1]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d116      	bne.n	800e6a8 <HAL_PCD_EP_DB_Transmit+0xfa>
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	633b      	str	r3, [r7, #48]	; 0x30
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e688:	b29b      	uxth	r3, r3
 800e68a:	461a      	mov	r2, r3
 800e68c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e68e:	4413      	add	r3, r2
 800e690:	633b      	str	r3, [r7, #48]	; 0x30
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	781b      	ldrb	r3, [r3, #0]
 800e696:	00da      	lsls	r2, r3, #3
 800e698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e69a:	4413      	add	r3, r2
 800e69c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e6a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	623b      	str	r3, [r7, #32]
 800e6ae:	68bb      	ldr	r3, [r7, #8]
 800e6b0:	785b      	ldrb	r3, [r3, #1]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d126      	bne.n	800e704 <HAL_PCD_EP_DB_Transmit+0x156>
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	61bb      	str	r3, [r7, #24]
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e6c4:	b29b      	uxth	r3, r3
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	69bb      	ldr	r3, [r7, #24]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	61bb      	str	r3, [r7, #24]
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	00da      	lsls	r2, r3, #3
 800e6d4:	69bb      	ldr	r3, [r7, #24]
 800e6d6:	4413      	add	r3, r2
 800e6d8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e6dc:	617b      	str	r3, [r7, #20]
 800e6de:	697b      	ldr	r3, [r7, #20]
 800e6e0:	881b      	ldrh	r3, [r3, #0]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e6e8:	b29a      	uxth	r2, r3
 800e6ea:	697b      	ldr	r3, [r7, #20]
 800e6ec:	801a      	strh	r2, [r3, #0]
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	881b      	ldrh	r3, [r3, #0]
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	801a      	strh	r2, [r3, #0]
 800e702:	e017      	b.n	800e734 <HAL_PCD_EP_DB_Transmit+0x186>
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	785b      	ldrb	r3, [r3, #1]
 800e708:	2b01      	cmp	r3, #1
 800e70a:	d113      	bne.n	800e734 <HAL_PCD_EP_DB_Transmit+0x186>
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e714:	b29b      	uxth	r3, r3
 800e716:	461a      	mov	r2, r3
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	4413      	add	r3, r2
 800e71c:	623b      	str	r3, [r7, #32]
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	00da      	lsls	r2, r3, #3
 800e724:	6a3b      	ldr	r3, [r7, #32]
 800e726:	4413      	add	r3, r2
 800e728:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e72c:	61fb      	str	r3, [r7, #28]
 800e72e:	69fb      	ldr	r3, [r7, #28]
 800e730:	2200      	movs	r2, #0
 800e732:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	4619      	mov	r1, r3
 800e73a:	68f8      	ldr	r0, [r7, #12]
 800e73c:	f008 fd23 	bl	8017186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e740:	88fb      	ldrh	r3, [r7, #6]
 800e742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e746:	2b00      	cmp	r3, #0
 800e748:	f000 82d2 	beq.w	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	461a      	mov	r2, r3
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	781b      	ldrb	r3, [r3, #0]
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	4413      	add	r3, r2
 800e75a:	881b      	ldrh	r3, [r3, #0]
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e766:	827b      	strh	r3, [r7, #18]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	461a      	mov	r2, r3
 800e76e:	68bb      	ldr	r3, [r7, #8]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	009b      	lsls	r3, r3, #2
 800e774:	441a      	add	r2, r3
 800e776:	8a7b      	ldrh	r3, [r7, #18]
 800e778:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e77c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e780:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e788:	b29b      	uxth	r3, r3
 800e78a:	8013      	strh	r3, [r2, #0]
 800e78c:	e2b0      	b.n	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800e78e:	88fb      	ldrh	r3, [r7, #6]
 800e790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e794:	2b00      	cmp	r3, #0
 800e796:	d021      	beq.n	800e7dc <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	461a      	mov	r2, r3
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	781b      	ldrb	r3, [r3, #0]
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e7ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7b2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	461a      	mov	r2, r3
 800e7bc:	68bb      	ldr	r3, [r7, #8]
 800e7be:	781b      	ldrb	r3, [r3, #0]
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	441a      	add	r2, r3
 800e7c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800e7c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800e7d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	f040 8284 	bne.w	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	695a      	ldr	r2, [r3, #20]
 800e7ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7f0:	441a      	add	r2, r3
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800e7f6:	68bb      	ldr	r3, [r7, #8]
 800e7f8:	69da      	ldr	r2, [r3, #28]
 800e7fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e7fe:	441a      	add	r2, r3
 800e800:	68bb      	ldr	r3, [r7, #8]
 800e802:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	6a1a      	ldr	r2, [r3, #32]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	691b      	ldr	r3, [r3, #16]
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d309      	bcc.n	800e824 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6a1a      	ldr	r2, [r3, #32]
 800e81a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e81c:	1ad2      	subs	r2, r2, r3
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	621a      	str	r2, [r3, #32]
 800e822:	e015      	b.n	800e850 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800e824:	68bb      	ldr	r3, [r7, #8]
 800e826:	6a1b      	ldr	r3, [r3, #32]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d107      	bne.n	800e83c <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 800e82c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e830:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800e832:	68bb      	ldr	r3, [r7, #8]
 800e834:	2200      	movs	r2, #0
 800e836:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e83a:	e009      	b.n	800e850 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	2200      	movs	r2, #0
 800e840:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800e844:	68bb      	ldr	r3, [r7, #8]
 800e846:	6a1b      	ldr	r3, [r3, #32]
 800e848:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800e84a:	68bb      	ldr	r3, [r7, #8]
 800e84c:	2200      	movs	r2, #0
 800e84e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	785b      	ldrb	r3, [r3, #1]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d155      	bne.n	800e904 <HAL_PCD_EP_DB_Transmit+0x356>
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	63bb      	str	r3, [r7, #56]	; 0x38
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e866:	b29b      	uxth	r3, r3
 800e868:	461a      	mov	r2, r3
 800e86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e86c:	4413      	add	r3, r2
 800e86e:	63bb      	str	r3, [r7, #56]	; 0x38
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	00da      	lsls	r2, r3, #3
 800e876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e878:	4413      	add	r3, r2
 800e87a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e87e:	637b      	str	r3, [r7, #52]	; 0x34
 800e880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e882:	2b00      	cmp	r3, #0
 800e884:	d112      	bne.n	800e8ac <HAL_PCD_EP_DB_Transmit+0x2fe>
 800e886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e888:	881b      	ldrh	r3, [r3, #0]
 800e88a:	b29b      	uxth	r3, r3
 800e88c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e890:	b29a      	uxth	r2, r3
 800e892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e894:	801a      	strh	r2, [r3, #0]
 800e896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e898:	881b      	ldrh	r3, [r3, #0]
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8a8:	801a      	strh	r2, [r3, #0]
 800e8aa:	e047      	b.n	800e93c <HAL_PCD_EP_DB_Transmit+0x38e>
 800e8ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ae:	2b3e      	cmp	r3, #62	; 0x3e
 800e8b0:	d811      	bhi.n	800e8d6 <HAL_PCD_EP_DB_Transmit+0x328>
 800e8b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8b4:	085b      	lsrs	r3, r3, #1
 800e8b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d002      	beq.n	800e8c8 <HAL_PCD_EP_DB_Transmit+0x31a>
 800e8c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	029b      	lsls	r3, r3, #10
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d2:	801a      	strh	r2, [r3, #0]
 800e8d4:	e032      	b.n	800e93c <HAL_PCD_EP_DB_Transmit+0x38e>
 800e8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8d8:	095b      	lsrs	r3, r3, #5
 800e8da:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e8de:	f003 031f 	and.w	r3, r3, #31
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d102      	bne.n	800e8ec <HAL_PCD_EP_DB_Transmit+0x33e>
 800e8e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8e8:	3b01      	subs	r3, #1
 800e8ea:	64bb      	str	r3, [r7, #72]	; 0x48
 800e8ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8ee:	b29b      	uxth	r3, r3
 800e8f0:	029b      	lsls	r3, r3, #10
 800e8f2:	b29b      	uxth	r3, r3
 800e8f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e8f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e900:	801a      	strh	r2, [r3, #0]
 800e902:	e01b      	b.n	800e93c <HAL_PCD_EP_DB_Transmit+0x38e>
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	785b      	ldrb	r3, [r3, #1]
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d117      	bne.n	800e93c <HAL_PCD_EP_DB_Transmit+0x38e>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	643b      	str	r3, [r7, #64]	; 0x40
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e91a:	b29b      	uxth	r3, r3
 800e91c:	461a      	mov	r2, r3
 800e91e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e920:	4413      	add	r3, r2
 800e922:	643b      	str	r3, [r7, #64]	; 0x40
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	00da      	lsls	r2, r3, #3
 800e92a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e92c:	4413      	add	r3, r2
 800e92e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e932:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e936:	b29a      	uxth	r2, r3
 800e938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6818      	ldr	r0, [r3, #0]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	6959      	ldr	r1, [r3, #20]
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	891a      	ldrh	r2, [r3, #8]
 800e948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e94a:	b29b      	uxth	r3, r3
 800e94c:	f006 f933 	bl	8014bb6 <USB_WritePMA>
 800e950:	e1ce      	b.n	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	461a      	mov	r2, r3
 800e95e:	68bb      	ldr	r3, [r7, #8]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	00db      	lsls	r3, r3, #3
 800e964:	4413      	add	r3, r2
 800e966:	68fa      	ldr	r2, [r7, #12]
 800e968:	6812      	ldr	r2, [r2, #0]
 800e96a:	4413      	add	r3, r2
 800e96c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e970:	881b      	ldrh	r3, [r3, #0]
 800e972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e976:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	699a      	ldr	r2, [r3, #24]
 800e97e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e982:	429a      	cmp	r2, r3
 800e984:	d307      	bcc.n	800e996 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800e986:	68bb      	ldr	r3, [r7, #8]
 800e988:	699a      	ldr	r2, [r3, #24]
 800e98a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e98e:	1ad2      	subs	r2, r2, r3
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	619a      	str	r2, [r3, #24]
 800e994:	e002      	b.n	800e99c <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800e996:	68bb      	ldr	r3, [r7, #8]
 800e998:	2200      	movs	r2, #0
 800e99a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	699b      	ldr	r3, [r3, #24]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f040 80c4 	bne.w	800eb2e <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e9a6:	68bb      	ldr	r3, [r7, #8]
 800e9a8:	785b      	ldrb	r3, [r3, #1]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d126      	bne.n	800e9fc <HAL_PCD_EP_DB_Transmit+0x44e>
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e9bc:	b29b      	uxth	r3, r3
 800e9be:	461a      	mov	r2, r3
 800e9c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9c2:	4413      	add	r3, r2
 800e9c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	781b      	ldrb	r3, [r3, #0]
 800e9ca:	00da      	lsls	r2, r3, #3
 800e9cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e9ce:	4413      	add	r3, r2
 800e9d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e9d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800e9d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9d8:	881b      	ldrh	r3, [r3, #0]
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e9e0:	b29a      	uxth	r2, r3
 800e9e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9e4:	801a      	strh	r2, [r3, #0]
 800e9e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e9f8:	801a      	strh	r2, [r3, #0]
 800e9fa:	e01a      	b.n	800ea32 <HAL_PCD_EP_DB_Transmit+0x484>
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	785b      	ldrb	r3, [r3, #1]
 800ea00:	2b01      	cmp	r3, #1
 800ea02:	d116      	bne.n	800ea32 <HAL_PCD_EP_DB_Transmit+0x484>
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	677b      	str	r3, [r7, #116]	; 0x74
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea12:	b29b      	uxth	r3, r3
 800ea14:	461a      	mov	r2, r3
 800ea16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea18:	4413      	add	r3, r2
 800ea1a:	677b      	str	r3, [r7, #116]	; 0x74
 800ea1c:	68bb      	ldr	r3, [r7, #8]
 800ea1e:	781b      	ldrb	r3, [r3, #0]
 800ea20:	00da      	lsls	r2, r3, #3
 800ea22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ea24:	4413      	add	r3, r2
 800ea26:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea2a:	673b      	str	r3, [r7, #112]	; 0x70
 800ea2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ea2e:	2200      	movs	r2, #0
 800ea30:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	67bb      	str	r3, [r7, #120]	; 0x78
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d12f      	bne.n	800eaa0 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	461a      	mov	r2, r3
 800ea54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea58:	4413      	add	r3, r2
 800ea5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	781b      	ldrb	r3, [r3, #0]
 800ea62:	00da      	lsls	r2, r3, #3
 800ea64:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ea68:	4413      	add	r3, r2
 800ea6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ea6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ea72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea76:	881b      	ldrh	r3, [r3, #0]
 800ea78:	b29b      	uxth	r3, r3
 800ea7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea84:	801a      	strh	r2, [r3, #0]
 800ea86:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea8a:	881b      	ldrh	r3, [r3, #0]
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea96:	b29a      	uxth	r2, r3
 800ea98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ea9c:	801a      	strh	r2, [r3, #0]
 800ea9e:	e017      	b.n	800ead0 <HAL_PCD_EP_DB_Transmit+0x522>
 800eaa0:	68bb      	ldr	r3, [r7, #8]
 800eaa2:	785b      	ldrb	r3, [r3, #1]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	d113      	bne.n	800ead0 <HAL_PCD_EP_DB_Transmit+0x522>
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	681b      	ldr	r3, [r3, #0]
 800eaac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	461a      	mov	r2, r3
 800eab4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eab6:	4413      	add	r3, r2
 800eab8:	67bb      	str	r3, [r7, #120]	; 0x78
 800eaba:	68bb      	ldr	r3, [r7, #8]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	00da      	lsls	r2, r3, #3
 800eac0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800eac2:	4413      	add	r3, r2
 800eac4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800eac8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eaca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800eacc:	2200      	movs	r2, #0
 800eace:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	781b      	ldrb	r3, [r3, #0]
 800ead4:	4619      	mov	r1, r3
 800ead6:	68f8      	ldr	r0, [r7, #12]
 800ead8:	f008 fb55 	bl	8017186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800eadc:	88fb      	ldrh	r3, [r7, #6]
 800eade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	f040 8104 	bne.w	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	461a      	mov	r2, r3
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	781b      	ldrb	r3, [r3, #0]
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	881b      	ldrh	r3, [r3, #0]
 800eaf8:	b29b      	uxth	r3, r3
 800eafa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eafe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb02:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	009b      	lsls	r3, r3, #2
 800eb12:	441a      	add	r2, r3
 800eb14:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800eb18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb28:	b29b      	uxth	r3, r3
 800eb2a:	8013      	strh	r3, [r2, #0]
 800eb2c:	e0e0      	b.n	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800eb2e:	88fb      	ldrh	r3, [r7, #6]
 800eb30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d121      	bne.n	800eb7c <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	461a      	mov	r2, r3
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	781b      	ldrb	r3, [r3, #0]
 800eb42:	009b      	lsls	r3, r3, #2
 800eb44:	4413      	add	r3, r2
 800eb46:	881b      	ldrh	r3, [r3, #0]
 800eb48:	b29b      	uxth	r3, r3
 800eb4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb52:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	461a      	mov	r2, r3
 800eb5c:	68bb      	ldr	r3, [r7, #8]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	441a      	add	r2, r3
 800eb64:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800eb68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eb74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800eb82:	2b01      	cmp	r3, #1
 800eb84:	f040 80b4 	bne.w	800ecf0 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	695a      	ldr	r2, [r3, #20]
 800eb8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eb90:	441a      	add	r2, r3
 800eb92:	68bb      	ldr	r3, [r7, #8]
 800eb94:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800eb96:	68bb      	ldr	r3, [r7, #8]
 800eb98:	69da      	ldr	r2, [r3, #28]
 800eb9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800eb9e:	441a      	add	r2, r3
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	6a1a      	ldr	r2, [r3, #32]
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	691b      	ldr	r3, [r3, #16]
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d309      	bcc.n	800ebc4 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800ebb0:	68bb      	ldr	r3, [r7, #8]
 800ebb2:	691b      	ldr	r3, [r3, #16]
 800ebb4:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	6a1a      	ldr	r2, [r3, #32]
 800ebba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ebbc:	1ad2      	subs	r2, r2, r3
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	621a      	str	r2, [r3, #32]
 800ebc2:	e015      	b.n	800ebf0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	6a1b      	ldr	r3, [r3, #32]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d107      	bne.n	800ebdc <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 800ebcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ebd0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ebda:	e009      	b.n	800ebf0 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	6a1b      	ldr	r3, [r3, #32]
 800ebe0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	667b      	str	r3, [r7, #100]	; 0x64
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	785b      	ldrb	r3, [r3, #1]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d155      	bne.n	800ecaa <HAL_PCD_EP_DB_Transmit+0x6fc>
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec0c:	b29b      	uxth	r3, r3
 800ec0e:	461a      	mov	r2, r3
 800ec10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec12:	4413      	add	r3, r2
 800ec14:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	781b      	ldrb	r3, [r3, #0]
 800ec1a:	00da      	lsls	r2, r3, #3
 800ec1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ec1e:	4413      	add	r3, r2
 800ec20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec24:	65bb      	str	r3, [r7, #88]	; 0x58
 800ec26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d112      	bne.n	800ec52 <HAL_PCD_EP_DB_Transmit+0x6a4>
 800ec2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec2e:	881b      	ldrh	r3, [r3, #0]
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ec36:	b29a      	uxth	r2, r3
 800ec38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec3a:	801a      	strh	r2, [r3, #0]
 800ec3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec3e:	881b      	ldrh	r3, [r3, #0]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec4e:	801a      	strh	r2, [r3, #0]
 800ec50:	e044      	b.n	800ecdc <HAL_PCD_EP_DB_Transmit+0x72e>
 800ec52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec54:	2b3e      	cmp	r3, #62	; 0x3e
 800ec56:	d811      	bhi.n	800ec7c <HAL_PCD_EP_DB_Transmit+0x6ce>
 800ec58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec5a:	085b      	lsrs	r3, r3, #1
 800ec5c:	657b      	str	r3, [r7, #84]	; 0x54
 800ec5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec60:	f003 0301 	and.w	r3, r3, #1
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <HAL_PCD_EP_DB_Transmit+0x6c0>
 800ec68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	657b      	str	r3, [r7, #84]	; 0x54
 800ec6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	029b      	lsls	r3, r3, #10
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec78:	801a      	strh	r2, [r3, #0]
 800ec7a:	e02f      	b.n	800ecdc <HAL_PCD_EP_DB_Transmit+0x72e>
 800ec7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec7e:	095b      	lsrs	r3, r3, #5
 800ec80:	657b      	str	r3, [r7, #84]	; 0x54
 800ec82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec84:	f003 031f 	and.w	r3, r3, #31
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d102      	bne.n	800ec92 <HAL_PCD_EP_DB_Transmit+0x6e4>
 800ec8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	657b      	str	r3, [r7, #84]	; 0x54
 800ec92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	029b      	lsls	r3, r3, #10
 800ec98:	b29b      	uxth	r3, r3
 800ec9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eca2:	b29a      	uxth	r2, r3
 800eca4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eca6:	801a      	strh	r2, [r3, #0]
 800eca8:	e018      	b.n	800ecdc <HAL_PCD_EP_DB_Transmit+0x72e>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	785b      	ldrb	r3, [r3, #1]
 800ecae:	2b01      	cmp	r3, #1
 800ecb0:	d114      	bne.n	800ecdc <HAL_PCD_EP_DB_Transmit+0x72e>
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ecba:	b29b      	uxth	r3, r3
 800ecbc:	461a      	mov	r2, r3
 800ecbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ecc0:	4413      	add	r3, r2
 800ecc2:	667b      	str	r3, [r7, #100]	; 0x64
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	00da      	lsls	r2, r3, #3
 800ecca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800eccc:	4413      	add	r3, r2
 800ecce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ecd2:	663b      	str	r3, [r7, #96]	; 0x60
 800ecd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ecda:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6818      	ldr	r0, [r3, #0]
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	6959      	ldr	r1, [r3, #20]
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	895a      	ldrh	r2, [r3, #10]
 800ece8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	f005 ff63 	bl	8014bb6 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	68bb      	ldr	r3, [r7, #8]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	009b      	lsls	r3, r3, #2
 800ecfc:	4413      	add	r3, r2
 800ecfe:	881b      	ldrh	r3, [r3, #0]
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ed06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ed0a:	823b      	strh	r3, [r7, #16]
 800ed0c:	8a3b      	ldrh	r3, [r7, #16]
 800ed0e:	f083 0310 	eor.w	r3, r3, #16
 800ed12:	823b      	strh	r3, [r7, #16]
 800ed14:	8a3b      	ldrh	r3, [r7, #16]
 800ed16:	f083 0320 	eor.w	r3, r3, #32
 800ed1a:	823b      	strh	r3, [r7, #16]
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	461a      	mov	r2, r3
 800ed22:	68bb      	ldr	r3, [r7, #8]
 800ed24:	781b      	ldrb	r3, [r3, #0]
 800ed26:	009b      	lsls	r3, r3, #2
 800ed28:	441a      	add	r2, r3
 800ed2a:	8a3b      	ldrh	r3, [r7, #16]
 800ed2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ed30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ed34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ed38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3788      	adds	r7, #136	; 0x88
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ed4a:	b480      	push	{r7}
 800ed4c:	b087      	sub	sp, #28
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	60f8      	str	r0, [r7, #12]
 800ed52:	607b      	str	r3, [r7, #4]
 800ed54:	460b      	mov	r3, r1
 800ed56:	817b      	strh	r3, [r7, #10]
 800ed58:	4613      	mov	r3, r2
 800ed5a:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ed5c:	897b      	ldrh	r3, [r7, #10]
 800ed5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed62:	b29b      	uxth	r3, r3
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d00b      	beq.n	800ed80 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ed68:	897b      	ldrh	r3, [r7, #10]
 800ed6a:	f003 0307 	and.w	r3, r3, #7
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	4613      	mov	r3, r2
 800ed72:	009b      	lsls	r3, r3, #2
 800ed74:	4413      	add	r3, r2
 800ed76:	00db      	lsls	r3, r3, #3
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	4413      	add	r3, r2
 800ed7c:	617b      	str	r3, [r7, #20]
 800ed7e:	e009      	b.n	800ed94 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800ed80:	897a      	ldrh	r2, [r7, #10]
 800ed82:	4613      	mov	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ed8e:	68fa      	ldr	r2, [r7, #12]
 800ed90:	4413      	add	r3, r2
 800ed92:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800ed94:	893b      	ldrh	r3, [r7, #8]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d107      	bne.n	800edaa <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800ed9a:	697b      	ldr	r3, [r7, #20]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	697b      	ldr	r3, [r7, #20]
 800eda6:	80da      	strh	r2, [r3, #6]
 800eda8:	e00b      	b.n	800edc2 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	2201      	movs	r2, #1
 800edae:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	697b      	ldr	r3, [r7, #20]
 800edb6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	0c1b      	lsrs	r3, r3, #16
 800edbc:	b29a      	uxth	r2, r3
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800edc2:	2300      	movs	r3, #0
}
 800edc4:	4618      	mov	r0, r3
 800edc6:	371c      	adds	r7, #28
 800edc8:	46bd      	mov	sp, r7
 800edca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edce:	4770      	bx	lr

0800edd0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b085      	sub	sp, #20
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	2201      	movs	r2, #1
 800ede2:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2200      	movs	r2, #0
 800edea:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	f043 0301 	orr.w	r3, r3, #1
 800edfa:	b29a      	uxth	r2, r3
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	f043 0302 	orr.w	r3, r3, #2
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800ee16:	2300      	movs	r3, #0
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3714      	adds	r7, #20
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ee28:	4b05      	ldr	r3, [pc, #20]	; (800ee40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	4a04      	ldr	r2, [pc, #16]	; (800ee40 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800ee2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ee32:	6013      	str	r3, [r2, #0]
}
 800ee34:	bf00      	nop
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr
 800ee3e:	bf00      	nop
 800ee40:	40007000 	.word	0x40007000

0800ee44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800ee44:	b480      	push	{r7}
 800ee46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800ee48:	4b04      	ldr	r3, [pc, #16]	; (800ee5c <HAL_PWREx_GetVoltageRange+0x18>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800ee50:	4618      	mov	r0, r3
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	40007000 	.word	0x40007000

0800ee60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b085      	sub	sp, #20
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee6e:	d130      	bne.n	800eed2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800ee70:	4b23      	ldr	r3, [pc, #140]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ee78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee7c:	d038      	beq.n	800eef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800ee7e:	4b20      	ldr	r3, [pc, #128]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800ee86:	4a1e      	ldr	r2, [pc, #120]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800ee88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ee8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800ee8e:	4b1d      	ldr	r3, [pc, #116]	; (800ef04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2232      	movs	r2, #50	; 0x32
 800ee94:	fb02 f303 	mul.w	r3, r2, r3
 800ee98:	4a1b      	ldr	r2, [pc, #108]	; (800ef08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800ee9a:	fba2 2303 	umull	r2, r3, r2, r3
 800ee9e:	0c9b      	lsrs	r3, r3, #18
 800eea0:	3301      	adds	r3, #1
 800eea2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800eea4:	e002      	b.n	800eeac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	3b01      	subs	r3, #1
 800eeaa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800eeac:	4b14      	ldr	r3, [pc, #80]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eeae:	695b      	ldr	r3, [r3, #20]
 800eeb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eeb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eeb8:	d102      	bne.n	800eec0 <HAL_PWREx_ControlVoltageScaling+0x60>
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d1f2      	bne.n	800eea6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800eec0:	4b0f      	ldr	r3, [pc, #60]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eec2:	695b      	ldr	r3, [r3, #20]
 800eec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800eec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eecc:	d110      	bne.n	800eef0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800eece:	2303      	movs	r3, #3
 800eed0:	e00f      	b.n	800eef2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800eed2:	4b0b      	ldr	r3, [pc, #44]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800eeda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800eede:	d007      	beq.n	800eef0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800eee0:	4b07      	ldr	r3, [pc, #28]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800eee8:	4a05      	ldr	r2, [pc, #20]	; (800ef00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800eeea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800eeee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800eef0:	2300      	movs	r3, #0
}
 800eef2:	4618      	mov	r0, r3
 800eef4:	3714      	adds	r7, #20
 800eef6:	46bd      	mov	sp, r7
 800eef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefc:	4770      	bx	lr
 800eefe:	bf00      	nop
 800ef00:	40007000 	.word	0x40007000
 800ef04:	20000780 	.word	0x20000780
 800ef08:	431bde83 	.word	0x431bde83

0800ef0c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ef10:	4b05      	ldr	r3, [pc, #20]	; (800ef28 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ef12:	685b      	ldr	r3, [r3, #4]
 800ef14:	4a04      	ldr	r2, [pc, #16]	; (800ef28 <HAL_PWREx_EnableVddUSB+0x1c>)
 800ef16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ef1a:	6053      	str	r3, [r2, #4]
}
 800ef1c:	bf00      	nop
 800ef1e:	46bd      	mov	sp, r7
 800ef20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef24:	4770      	bx	lr
 800ef26:	bf00      	nop
 800ef28:	40007000 	.word	0x40007000

0800ef2c <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800ef32:	4b45      	ldr	r3, [pc, #276]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a44      	ldr	r2, [pc, #272]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef38:	f043 0301 	orr.w	r3, r3, #1
 800ef3c:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800ef3e:	f7fb fa8b 	bl	800a458 <HAL_GetTick>
 800ef42:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ef44:	e008      	b.n	800ef58 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ef46:	f7fb fa87 	bl	800a458 <HAL_GetTick>
 800ef4a:	4602      	mov	r2, r0
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	2b02      	cmp	r3, #2
 800ef52:	d901      	bls.n	800ef58 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800ef54:	2303      	movs	r3, #3
 800ef56:	e073      	b.n	800f040 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ef58:	4b3b      	ldr	r3, [pc, #236]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	f003 0302 	and.w	r3, r3, #2
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d0f0      	beq.n	800ef46 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800ef64:	4b38      	ldr	r3, [pc, #224]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ef6c:	4a36      	ldr	r2, [pc, #216]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ef72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 800ef74:	4b34      	ldr	r3, [pc, #208]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800ef76:	2200      	movs	r2, #0
 800ef78:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800ef7a:	4b34      	ldr	r3, [pc, #208]	; (800f04c <HAL_RCC_DeInit+0x120>)
 800ef7c:	4a34      	ldr	r2, [pc, #208]	; (800f050 <HAL_RCC_DeInit+0x124>)
 800ef7e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800ef80:	4b34      	ldr	r3, [pc, #208]	; (800f054 <HAL_RCC_DeInit+0x128>)
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	4618      	mov	r0, r3
 800ef86:	f7fb fa17 	bl	800a3b8 <HAL_InitTick>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d001      	beq.n	800ef94 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 800ef90:	2301      	movs	r3, #1
 800ef92:	e055      	b.n	800f040 <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800ef94:	f7fb fa60 	bl	800a458 <HAL_GetTick>
 800ef98:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800ef9a:	e00a      	b.n	800efb2 <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef9c:	f7fb fa5c 	bl	800a458 <HAL_GetTick>
 800efa0:	4602      	mov	r2, r0
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	1ad3      	subs	r3, r2, r3
 800efa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800efaa:	4293      	cmp	r3, r2
 800efac:	d901      	bls.n	800efb2 <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800efae:	2303      	movs	r3, #3
 800efb0:	e046      	b.n	800f040 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800efb2:	4b25      	ldr	r3, [pc, #148]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	f003 030c 	and.w	r3, r3, #12
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d1ee      	bne.n	800ef9c <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 800efbe:	4b22      	ldr	r3, [pc, #136]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800efc0:	681a      	ldr	r2, [r3, #0]
 800efc2:	4921      	ldr	r1, [pc, #132]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800efc4:	4b24      	ldr	r3, [pc, #144]	; (800f058 <HAL_RCC_DeInit+0x12c>)
 800efc6:	4013      	ands	r3, r2
 800efc8:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800efca:	f7fb fa45 	bl	800a458 <HAL_GetTick>
 800efce:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 800efd0:	e008      	b.n	800efe4 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800efd2:	f7fb fa41 	bl	800a458 <HAL_GetTick>
 800efd6:	4602      	mov	r2, r0
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	1ad3      	subs	r3, r2, r3
 800efdc:	2b02      	cmp	r3, #2
 800efde:	d901      	bls.n	800efe4 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800efe0:	2303      	movs	r3, #3
 800efe2:	e02d      	b.n	800f040 <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 800efe4:	4b18      	ldr	r3, [pc, #96]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800efec:	2b00      	cmp	r3, #0
 800efee:	d1f0      	bne.n	800efd2 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 800eff0:	4b15      	ldr	r3, [pc, #84]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800eff2:	2200      	movs	r2, #0
 800eff4:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	4a13      	ldr	r2, [pc, #76]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800effc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f000:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 800f002:	4b11      	ldr	r3, [pc, #68]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f004:	2200      	movs	r2, #0
 800f006:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800f008:	4b0f      	ldr	r3, [pc, #60]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f00a:	691b      	ldr	r3, [r3, #16]
 800f00c:	4a0e      	ldr	r2, [pc, #56]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f00e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f012:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800f014:	4b0c      	ldr	r3, [pc, #48]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	4a0b      	ldr	r2, [pc, #44]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f01a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f01e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800f020:	4b09      	ldr	r3, [pc, #36]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f022:	2200      	movs	r2, #0
 800f024:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800f026:	4b08      	ldr	r3, [pc, #32]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f028:	f04f 32ff 	mov.w	r2, #4294967295
 800f02c:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800f02e:	4b06      	ldr	r3, [pc, #24]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f034:	4a04      	ldr	r2, [pc, #16]	; (800f048 <HAL_RCC_DeInit+0x11c>)
 800f036:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f03a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800f03e:	2300      	movs	r3, #0
}
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	40021000 	.word	0x40021000
 800f04c:	20000780 	.word	0x20000780
 800f050:	003d0900 	.word	0x003d0900
 800f054:	20000784 	.word	0x20000784
 800f058:	fafef4ff 	.word	0xfafef4ff

0800f05c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b088      	sub	sp, #32
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d102      	bne.n	800f070 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f06a:	2301      	movs	r3, #1
 800f06c:	f000 bc11 	b.w	800f892 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f070:	4ba0      	ldr	r3, [pc, #640]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f072:	689b      	ldr	r3, [r3, #8]
 800f074:	f003 030c 	and.w	r3, r3, #12
 800f078:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f07a:	4b9e      	ldr	r3, [pc, #632]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f07c:	68db      	ldr	r3, [r3, #12]
 800f07e:	f003 0303 	and.w	r3, r3, #3
 800f082:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	f003 0310 	and.w	r3, r3, #16
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f000 80e4 	beq.w	800f25a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f092:	69bb      	ldr	r3, [r7, #24]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d007      	beq.n	800f0a8 <HAL_RCC_OscConfig+0x4c>
 800f098:	69bb      	ldr	r3, [r7, #24]
 800f09a:	2b0c      	cmp	r3, #12
 800f09c:	f040 808b 	bne.w	800f1b6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2b01      	cmp	r3, #1
 800f0a4:	f040 8087 	bne.w	800f1b6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f0a8:	4b92      	ldr	r3, [pc, #584]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f003 0302 	and.w	r3, r3, #2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d005      	beq.n	800f0c0 <HAL_RCC_OscConfig+0x64>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	699b      	ldr	r3, [r3, #24]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d101      	bne.n	800f0c0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f0bc:	2301      	movs	r3, #1
 800f0be:	e3e8      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6a1a      	ldr	r2, [r3, #32]
 800f0c4:	4b8b      	ldr	r3, [pc, #556]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	f003 0308 	and.w	r3, r3, #8
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d004      	beq.n	800f0da <HAL_RCC_OscConfig+0x7e>
 800f0d0:	4b88      	ldr	r3, [pc, #544]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0d8:	e005      	b.n	800f0e6 <HAL_RCC_OscConfig+0x8a>
 800f0da:	4b86      	ldr	r3, [pc, #536]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f0dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f0e0:	091b      	lsrs	r3, r3, #4
 800f0e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f0e6:	4293      	cmp	r3, r2
 800f0e8:	d223      	bcs.n	800f132 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	6a1b      	ldr	r3, [r3, #32]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f000 fd7a 	bl	800fbe8 <RCC_SetFlashLatencyFromMSIRange>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	e3c9      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f0fe:	4b7d      	ldr	r3, [pc, #500]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	4a7c      	ldr	r2, [pc, #496]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f104:	f043 0308 	orr.w	r3, r3, #8
 800f108:	6013      	str	r3, [r2, #0]
 800f10a:	4b7a      	ldr	r3, [pc, #488]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	4977      	ldr	r1, [pc, #476]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f118:	4313      	orrs	r3, r2
 800f11a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f11c:	4b75      	ldr	r3, [pc, #468]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	69db      	ldr	r3, [r3, #28]
 800f128:	021b      	lsls	r3, r3, #8
 800f12a:	4972      	ldr	r1, [pc, #456]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f12c:	4313      	orrs	r3, r2
 800f12e:	604b      	str	r3, [r1, #4]
 800f130:	e025      	b.n	800f17e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f132:	4b70      	ldr	r3, [pc, #448]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	4a6f      	ldr	r2, [pc, #444]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f138:	f043 0308 	orr.w	r3, r3, #8
 800f13c:	6013      	str	r3, [r2, #0]
 800f13e:	4b6d      	ldr	r3, [pc, #436]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	6a1b      	ldr	r3, [r3, #32]
 800f14a:	496a      	ldr	r1, [pc, #424]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f14c:	4313      	orrs	r3, r2
 800f14e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f150:	4b68      	ldr	r3, [pc, #416]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	69db      	ldr	r3, [r3, #28]
 800f15c:	021b      	lsls	r3, r3, #8
 800f15e:	4965      	ldr	r1, [pc, #404]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f160:	4313      	orrs	r3, r2
 800f162:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f164:	69bb      	ldr	r3, [r7, #24]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d109      	bne.n	800f17e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	6a1b      	ldr	r3, [r3, #32]
 800f16e:	4618      	mov	r0, r3
 800f170:	f000 fd3a 	bl	800fbe8 <RCC_SetFlashLatencyFromMSIRange>
 800f174:	4603      	mov	r3, r0
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f17a:	2301      	movs	r3, #1
 800f17c:	e389      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f17e:	f000 fc6f 	bl	800fa60 <HAL_RCC_GetSysClockFreq>
 800f182:	4602      	mov	r2, r0
 800f184:	4b5b      	ldr	r3, [pc, #364]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f186:	689b      	ldr	r3, [r3, #8]
 800f188:	091b      	lsrs	r3, r3, #4
 800f18a:	f003 030f 	and.w	r3, r3, #15
 800f18e:	495a      	ldr	r1, [pc, #360]	; (800f2f8 <HAL_RCC_OscConfig+0x29c>)
 800f190:	5ccb      	ldrb	r3, [r1, r3]
 800f192:	f003 031f 	and.w	r3, r3, #31
 800f196:	fa22 f303 	lsr.w	r3, r2, r3
 800f19a:	4a58      	ldr	r2, [pc, #352]	; (800f2fc <HAL_RCC_OscConfig+0x2a0>)
 800f19c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f19e:	4b58      	ldr	r3, [pc, #352]	; (800f300 <HAL_RCC_OscConfig+0x2a4>)
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fb f908 	bl	800a3b8 <HAL_InitTick>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d052      	beq.n	800f258 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
 800f1b4:	e36d      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	699b      	ldr	r3, [r3, #24]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d032      	beq.n	800f224 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f1be:	4b4d      	ldr	r3, [pc, #308]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	4a4c      	ldr	r2, [pc, #304]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1c4:	f043 0301 	orr.w	r3, r3, #1
 800f1c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f1ca:	f7fb f945 	bl	800a458 <HAL_GetTick>
 800f1ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f1d0:	e008      	b.n	800f1e4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f1d2:	f7fb f941 	bl	800a458 <HAL_GetTick>
 800f1d6:	4602      	mov	r2, r0
 800f1d8:	693b      	ldr	r3, [r7, #16]
 800f1da:	1ad3      	subs	r3, r2, r3
 800f1dc:	2b02      	cmp	r3, #2
 800f1de:	d901      	bls.n	800f1e4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f1e0:	2303      	movs	r3, #3
 800f1e2:	e356      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f1e4:	4b43      	ldr	r3, [pc, #268]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f003 0302 	and.w	r3, r3, #2
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d0f0      	beq.n	800f1d2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f1f0:	4b40      	ldr	r3, [pc, #256]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a3f      	ldr	r2, [pc, #252]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1f6:	f043 0308 	orr.w	r3, r3, #8
 800f1fa:	6013      	str	r3, [r2, #0]
 800f1fc:	4b3d      	ldr	r3, [pc, #244]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6a1b      	ldr	r3, [r3, #32]
 800f208:	493a      	ldr	r1, [pc, #232]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f20a:	4313      	orrs	r3, r2
 800f20c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f20e:	4b39      	ldr	r3, [pc, #228]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f210:	685b      	ldr	r3, [r3, #4]
 800f212:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	69db      	ldr	r3, [r3, #28]
 800f21a:	021b      	lsls	r3, r3, #8
 800f21c:	4935      	ldr	r1, [pc, #212]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f21e:	4313      	orrs	r3, r2
 800f220:	604b      	str	r3, [r1, #4]
 800f222:	e01a      	b.n	800f25a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f224:	4b33      	ldr	r3, [pc, #204]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	4a32      	ldr	r2, [pc, #200]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f22a:	f023 0301 	bic.w	r3, r3, #1
 800f22e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f230:	f7fb f912 	bl	800a458 <HAL_GetTick>
 800f234:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f236:	e008      	b.n	800f24a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f238:	f7fb f90e 	bl	800a458 <HAL_GetTick>
 800f23c:	4602      	mov	r2, r0
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	1ad3      	subs	r3, r2, r3
 800f242:	2b02      	cmp	r3, #2
 800f244:	d901      	bls.n	800f24a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800f246:	2303      	movs	r3, #3
 800f248:	e323      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f24a:	4b2a      	ldr	r3, [pc, #168]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f003 0302 	and.w	r3, r3, #2
 800f252:	2b00      	cmp	r3, #0
 800f254:	d1f0      	bne.n	800f238 <HAL_RCC_OscConfig+0x1dc>
 800f256:	e000      	b.n	800f25a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f258:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f003 0301 	and.w	r3, r3, #1
 800f262:	2b00      	cmp	r3, #0
 800f264:	d073      	beq.n	800f34e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f266:	69bb      	ldr	r3, [r7, #24]
 800f268:	2b08      	cmp	r3, #8
 800f26a:	d005      	beq.n	800f278 <HAL_RCC_OscConfig+0x21c>
 800f26c:	69bb      	ldr	r3, [r7, #24]
 800f26e:	2b0c      	cmp	r3, #12
 800f270:	d10e      	bne.n	800f290 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f272:	697b      	ldr	r3, [r7, #20]
 800f274:	2b03      	cmp	r3, #3
 800f276:	d10b      	bne.n	800f290 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f278:	4b1e      	ldr	r3, [pc, #120]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f280:	2b00      	cmp	r3, #0
 800f282:	d063      	beq.n	800f34c <HAL_RCC_OscConfig+0x2f0>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d15f      	bne.n	800f34c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	e300      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	685b      	ldr	r3, [r3, #4]
 800f294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f298:	d106      	bne.n	800f2a8 <HAL_RCC_OscConfig+0x24c>
 800f29a:	4b16      	ldr	r3, [pc, #88]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	4a15      	ldr	r2, [pc, #84]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f2a4:	6013      	str	r3, [r2, #0]
 800f2a6:	e01d      	b.n	800f2e4 <HAL_RCC_OscConfig+0x288>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f2b0:	d10c      	bne.n	800f2cc <HAL_RCC_OscConfig+0x270>
 800f2b2:	4b10      	ldr	r3, [pc, #64]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	4a0f      	ldr	r2, [pc, #60]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f2bc:	6013      	str	r3, [r2, #0]
 800f2be:	4b0d      	ldr	r3, [pc, #52]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	4a0c      	ldr	r2, [pc, #48]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f2c8:	6013      	str	r3, [r2, #0]
 800f2ca:	e00b      	b.n	800f2e4 <HAL_RCC_OscConfig+0x288>
 800f2cc:	4b09      	ldr	r3, [pc, #36]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	4a08      	ldr	r2, [pc, #32]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f2d6:	6013      	str	r3, [r2, #0]
 800f2d8:	4b06      	ldr	r3, [pc, #24]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	4a05      	ldr	r2, [pc, #20]	; (800f2f4 <HAL_RCC_OscConfig+0x298>)
 800f2de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f2e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	685b      	ldr	r3, [r3, #4]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d01b      	beq.n	800f324 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f2ec:	f7fb f8b4 	bl	800a458 <HAL_GetTick>
 800f2f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f2f2:	e010      	b.n	800f316 <HAL_RCC_OscConfig+0x2ba>
 800f2f4:	40021000 	.word	0x40021000
 800f2f8:	0801c664 	.word	0x0801c664
 800f2fc:	20000780 	.word	0x20000780
 800f300:	20000784 	.word	0x20000784
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f304:	f7fb f8a8 	bl	800a458 <HAL_GetTick>
 800f308:	4602      	mov	r2, r0
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	1ad3      	subs	r3, r2, r3
 800f30e:	2b64      	cmp	r3, #100	; 0x64
 800f310:	d901      	bls.n	800f316 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f312:	2303      	movs	r3, #3
 800f314:	e2bd      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f316:	4baf      	ldr	r3, [pc, #700]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d0f0      	beq.n	800f304 <HAL_RCC_OscConfig+0x2a8>
 800f322:	e014      	b.n	800f34e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f324:	f7fb f898 	bl	800a458 <HAL_GetTick>
 800f328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f32a:	e008      	b.n	800f33e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f32c:	f7fb f894 	bl	800a458 <HAL_GetTick>
 800f330:	4602      	mov	r2, r0
 800f332:	693b      	ldr	r3, [r7, #16]
 800f334:	1ad3      	subs	r3, r2, r3
 800f336:	2b64      	cmp	r3, #100	; 0x64
 800f338:	d901      	bls.n	800f33e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f33a:	2303      	movs	r3, #3
 800f33c:	e2a9      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f33e:	4ba5      	ldr	r3, [pc, #660]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f346:	2b00      	cmp	r3, #0
 800f348:	d1f0      	bne.n	800f32c <HAL_RCC_OscConfig+0x2d0>
 800f34a:	e000      	b.n	800f34e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f34c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	f003 0302 	and.w	r3, r3, #2
 800f356:	2b00      	cmp	r3, #0
 800f358:	d060      	beq.n	800f41c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f35a:	69bb      	ldr	r3, [r7, #24]
 800f35c:	2b04      	cmp	r3, #4
 800f35e:	d005      	beq.n	800f36c <HAL_RCC_OscConfig+0x310>
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	2b0c      	cmp	r3, #12
 800f364:	d119      	bne.n	800f39a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	2b02      	cmp	r3, #2
 800f36a:	d116      	bne.n	800f39a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f36c:	4b99      	ldr	r3, [pc, #612]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f374:	2b00      	cmp	r3, #0
 800f376:	d005      	beq.n	800f384 <HAL_RCC_OscConfig+0x328>
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	e286      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f384:	4b93      	ldr	r3, [pc, #588]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f386:	685b      	ldr	r3, [r3, #4]
 800f388:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	691b      	ldr	r3, [r3, #16]
 800f390:	061b      	lsls	r3, r3, #24
 800f392:	4990      	ldr	r1, [pc, #576]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f394:	4313      	orrs	r3, r2
 800f396:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f398:	e040      	b.n	800f41c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d023      	beq.n	800f3ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f3a2:	4b8c      	ldr	r3, [pc, #560]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a8b      	ldr	r2, [pc, #556]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f3ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3ae:	f7fb f853 	bl	800a458 <HAL_GetTick>
 800f3b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f3b4:	e008      	b.n	800f3c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3b6:	f7fb f84f 	bl	800a458 <HAL_GetTick>
 800f3ba:	4602      	mov	r2, r0
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	2b02      	cmp	r3, #2
 800f3c2:	d901      	bls.n	800f3c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f3c4:	2303      	movs	r3, #3
 800f3c6:	e264      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f3c8:	4b82      	ldr	r3, [pc, #520]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d0f0      	beq.n	800f3b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f3d4:	4b7f      	ldr	r3, [pc, #508]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	691b      	ldr	r3, [r3, #16]
 800f3e0:	061b      	lsls	r3, r3, #24
 800f3e2:	497c      	ldr	r1, [pc, #496]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3e4:	4313      	orrs	r3, r2
 800f3e6:	604b      	str	r3, [r1, #4]
 800f3e8:	e018      	b.n	800f41c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f3ea:	4b7a      	ldr	r3, [pc, #488]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	4a79      	ldr	r2, [pc, #484]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f3f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3f6:	f7fb f82f 	bl	800a458 <HAL_GetTick>
 800f3fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f3fc:	e008      	b.n	800f410 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3fe:	f7fb f82b 	bl	800a458 <HAL_GetTick>
 800f402:	4602      	mov	r2, r0
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	1ad3      	subs	r3, r2, r3
 800f408:	2b02      	cmp	r3, #2
 800f40a:	d901      	bls.n	800f410 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f40c:	2303      	movs	r3, #3
 800f40e:	e240      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f410:	4b70      	ldr	r3, [pc, #448]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f412:	681b      	ldr	r3, [r3, #0]
 800f414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d1f0      	bne.n	800f3fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f003 0308 	and.w	r3, r3, #8
 800f424:	2b00      	cmp	r3, #0
 800f426:	d03c      	beq.n	800f4a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	695b      	ldr	r3, [r3, #20]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d01c      	beq.n	800f46a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f430:	4b68      	ldr	r3, [pc, #416]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f436:	4a67      	ldr	r2, [pc, #412]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f438:	f043 0301 	orr.w	r3, r3, #1
 800f43c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f440:	f7fb f80a 	bl	800a458 <HAL_GetTick>
 800f444:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f446:	e008      	b.n	800f45a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f448:	f7fb f806 	bl	800a458 <HAL_GetTick>
 800f44c:	4602      	mov	r2, r0
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	1ad3      	subs	r3, r2, r3
 800f452:	2b02      	cmp	r3, #2
 800f454:	d901      	bls.n	800f45a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800f456:	2303      	movs	r3, #3
 800f458:	e21b      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800f45a:	4b5e      	ldr	r3, [pc, #376]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f45c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f460:	f003 0302 	and.w	r3, r3, #2
 800f464:	2b00      	cmp	r3, #0
 800f466:	d0ef      	beq.n	800f448 <HAL_RCC_OscConfig+0x3ec>
 800f468:	e01b      	b.n	800f4a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f46a:	4b5a      	ldr	r3, [pc, #360]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f46c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f470:	4a58      	ldr	r2, [pc, #352]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f472:	f023 0301 	bic.w	r3, r3, #1
 800f476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f47a:	f7fa ffed 	bl	800a458 <HAL_GetTick>
 800f47e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f480:	e008      	b.n	800f494 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f482:	f7fa ffe9 	bl	800a458 <HAL_GetTick>
 800f486:	4602      	mov	r2, r0
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	2b02      	cmp	r3, #2
 800f48e:	d901      	bls.n	800f494 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800f490:	2303      	movs	r3, #3
 800f492:	e1fe      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800f494:	4b4f      	ldr	r3, [pc, #316]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f49a:	f003 0302 	and.w	r3, r3, #2
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d1ef      	bne.n	800f482 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f003 0304 	and.w	r3, r3, #4
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	f000 80a6 	beq.w	800f5fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800f4b4:	4b47      	ldr	r3, [pc, #284]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f4b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d10d      	bne.n	800f4dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f4c0:	4b44      	ldr	r3, [pc, #272]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4c4:	4a43      	ldr	r2, [pc, #268]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f4c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f4ca:	6593      	str	r3, [r2, #88]	; 0x58
 800f4cc:	4b41      	ldr	r3, [pc, #260]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f4ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f4d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f4d4:	60bb      	str	r3, [r7, #8]
 800f4d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f4dc:	4b3e      	ldr	r3, [pc, #248]	; (800f5d8 <HAL_RCC_OscConfig+0x57c>)
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d118      	bne.n	800f51a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f4e8:	4b3b      	ldr	r3, [pc, #236]	; (800f5d8 <HAL_RCC_OscConfig+0x57c>)
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	4a3a      	ldr	r2, [pc, #232]	; (800f5d8 <HAL_RCC_OscConfig+0x57c>)
 800f4ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f4f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f4f4:	f7fa ffb0 	bl	800a458 <HAL_GetTick>
 800f4f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f4fa:	e008      	b.n	800f50e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f4fc:	f7fa ffac 	bl	800a458 <HAL_GetTick>
 800f500:	4602      	mov	r2, r0
 800f502:	693b      	ldr	r3, [r7, #16]
 800f504:	1ad3      	subs	r3, r2, r3
 800f506:	2b02      	cmp	r3, #2
 800f508:	d901      	bls.n	800f50e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800f50a:	2303      	movs	r3, #3
 800f50c:	e1c1      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800f50e:	4b32      	ldr	r3, [pc, #200]	; (800f5d8 <HAL_RCC_OscConfig+0x57c>)
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f516:	2b00      	cmp	r3, #0
 800f518:	d0f0      	beq.n	800f4fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	689b      	ldr	r3, [r3, #8]
 800f51e:	2b01      	cmp	r3, #1
 800f520:	d108      	bne.n	800f534 <HAL_RCC_OscConfig+0x4d8>
 800f522:	4b2c      	ldr	r3, [pc, #176]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f528:	4a2a      	ldr	r2, [pc, #168]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f52a:	f043 0301 	orr.w	r3, r3, #1
 800f52e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f532:	e024      	b.n	800f57e <HAL_RCC_OscConfig+0x522>
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	2b05      	cmp	r3, #5
 800f53a:	d110      	bne.n	800f55e <HAL_RCC_OscConfig+0x502>
 800f53c:	4b25      	ldr	r3, [pc, #148]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f542:	4a24      	ldr	r2, [pc, #144]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f544:	f043 0304 	orr.w	r3, r3, #4
 800f548:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f54c:	4b21      	ldr	r3, [pc, #132]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f54e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f552:	4a20      	ldr	r2, [pc, #128]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f554:	f043 0301 	orr.w	r3, r3, #1
 800f558:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f55c:	e00f      	b.n	800f57e <HAL_RCC_OscConfig+0x522>
 800f55e:	4b1d      	ldr	r3, [pc, #116]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f560:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f564:	4a1b      	ldr	r2, [pc, #108]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f566:	f023 0301 	bic.w	r3, r3, #1
 800f56a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800f56e:	4b19      	ldr	r3, [pc, #100]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f574:	4a17      	ldr	r2, [pc, #92]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f576:	f023 0304 	bic.w	r3, r3, #4
 800f57a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	689b      	ldr	r3, [r3, #8]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d016      	beq.n	800f5b4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f586:	f7fa ff67 	bl	800a458 <HAL_GetTick>
 800f58a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f58c:	e00a      	b.n	800f5a4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f58e:	f7fa ff63 	bl	800a458 <HAL_GetTick>
 800f592:	4602      	mov	r2, r0
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	1ad3      	subs	r3, r2, r3
 800f598:	f241 3288 	movw	r2, #5000	; 0x1388
 800f59c:	4293      	cmp	r3, r2
 800f59e:	d901      	bls.n	800f5a4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800f5a0:	2303      	movs	r3, #3
 800f5a2:	e176      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800f5a4:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <HAL_RCC_OscConfig+0x578>)
 800f5a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5aa:	f003 0302 	and.w	r3, r3, #2
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d0ed      	beq.n	800f58e <HAL_RCC_OscConfig+0x532>
 800f5b2:	e01a      	b.n	800f5ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f5b4:	f7fa ff50 	bl	800a458 <HAL_GetTick>
 800f5b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f5ba:	e00f      	b.n	800f5dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f5bc:	f7fa ff4c 	bl	800a458 <HAL_GetTick>
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	1ad3      	subs	r3, r2, r3
 800f5c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5ca:	4293      	cmp	r3, r2
 800f5cc:	d906      	bls.n	800f5dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800f5ce:	2303      	movs	r3, #3
 800f5d0:	e15f      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
 800f5d2:	bf00      	nop
 800f5d4:	40021000 	.word	0x40021000
 800f5d8:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800f5dc:	4baa      	ldr	r3, [pc, #680]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f5e2:	f003 0302 	and.w	r3, r3, #2
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d1e8      	bne.n	800f5bc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800f5ea:	7ffb      	ldrb	r3, [r7, #31]
 800f5ec:	2b01      	cmp	r3, #1
 800f5ee:	d105      	bne.n	800f5fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f5f0:	4ba5      	ldr	r3, [pc, #660]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f5f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f5f4:	4aa4      	ldr	r2, [pc, #656]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f5f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f5fa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	f003 0320 	and.w	r3, r3, #32
 800f604:	2b00      	cmp	r3, #0
 800f606:	d03c      	beq.n	800f682 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d01c      	beq.n	800f64a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f610:	4b9d      	ldr	r3, [pc, #628]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f616:	4a9c      	ldr	r2, [pc, #624]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f618:	f043 0301 	orr.w	r3, r3, #1
 800f61c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f620:	f7fa ff1a 	bl	800a458 <HAL_GetTick>
 800f624:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f626:	e008      	b.n	800f63a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f628:	f7fa ff16 	bl	800a458 <HAL_GetTick>
 800f62c:	4602      	mov	r2, r0
 800f62e:	693b      	ldr	r3, [r7, #16]
 800f630:	1ad3      	subs	r3, r2, r3
 800f632:	2b02      	cmp	r3, #2
 800f634:	d901      	bls.n	800f63a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800f636:	2303      	movs	r3, #3
 800f638:	e12b      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800f63a:	4b93      	ldr	r3, [pc, #588]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f63c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f640:	f003 0302 	and.w	r3, r3, #2
 800f644:	2b00      	cmp	r3, #0
 800f646:	d0ef      	beq.n	800f628 <HAL_RCC_OscConfig+0x5cc>
 800f648:	e01b      	b.n	800f682 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f64a:	4b8f      	ldr	r3, [pc, #572]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f64c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f650:	4a8d      	ldr	r2, [pc, #564]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f652:	f023 0301 	bic.w	r3, r3, #1
 800f656:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f65a:	f7fa fefd 	bl	800a458 <HAL_GetTick>
 800f65e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f660:	e008      	b.n	800f674 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f662:	f7fa fef9 	bl	800a458 <HAL_GetTick>
 800f666:	4602      	mov	r2, r0
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	1ad3      	subs	r3, r2, r3
 800f66c:	2b02      	cmp	r3, #2
 800f66e:	d901      	bls.n	800f674 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800f670:	2303      	movs	r3, #3
 800f672:	e10e      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800f674:	4b84      	ldr	r3, [pc, #528]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f676:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800f67a:	f003 0302 	and.w	r3, r3, #2
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1ef      	bne.n	800f662 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f686:	2b00      	cmp	r3, #0
 800f688:	f000 8102 	beq.w	800f890 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f690:	2b02      	cmp	r3, #2
 800f692:	f040 80c5 	bne.w	800f820 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800f696:	4b7c      	ldr	r3, [pc, #496]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f698:	68db      	ldr	r3, [r3, #12]
 800f69a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	f003 0203 	and.w	r2, r3, #3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	d12c      	bne.n	800f704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f6aa:	697b      	ldr	r3, [r7, #20]
 800f6ac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6b4:	3b01      	subs	r3, #1
 800f6b6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d123      	bne.n	800f704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f6bc:	697b      	ldr	r3, [r7, #20]
 800f6be:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6c6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800f6c8:	429a      	cmp	r2, r3
 800f6ca:	d11b      	bne.n	800f704 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f6cc:	697b      	ldr	r3, [r7, #20]
 800f6ce:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f6d6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	d113      	bne.n	800f704 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f6dc:	697b      	ldr	r3, [r7, #20]
 800f6de:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e6:	085b      	lsrs	r3, r3, #1
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d109      	bne.n	800f704 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6fa:	085b      	lsrs	r3, r3, #1
 800f6fc:	3b01      	subs	r3, #1
 800f6fe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800f700:	429a      	cmp	r2, r3
 800f702:	d067      	beq.n	800f7d4 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	2b0c      	cmp	r3, #12
 800f708:	d062      	beq.n	800f7d0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800f70a:	4b5f      	ldr	r3, [pc, #380]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f712:	2b00      	cmp	r3, #0
 800f714:	d001      	beq.n	800f71a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800f716:	2301      	movs	r3, #1
 800f718:	e0bb      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800f71a:	4b5b      	ldr	r3, [pc, #364]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	4a5a      	ldr	r2, [pc, #360]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f720:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f724:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f726:	f7fa fe97 	bl	800a458 <HAL_GetTick>
 800f72a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f72c:	e008      	b.n	800f740 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f72e:	f7fa fe93 	bl	800a458 <HAL_GetTick>
 800f732:	4602      	mov	r2, r0
 800f734:	693b      	ldr	r3, [r7, #16]
 800f736:	1ad3      	subs	r3, r2, r3
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d901      	bls.n	800f740 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800f73c:	2303      	movs	r3, #3
 800f73e:	e0a8      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f740:	4b51      	ldr	r3, [pc, #324]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d1f0      	bne.n	800f72e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f74c:	4b4e      	ldr	r3, [pc, #312]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f74e:	68da      	ldr	r2, [r3, #12]
 800f750:	4b4e      	ldr	r3, [pc, #312]	; (800f88c <HAL_RCC_OscConfig+0x830>)
 800f752:	4013      	ands	r3, r2
 800f754:	687a      	ldr	r2, [r7, #4]
 800f756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f75c:	3a01      	subs	r2, #1
 800f75e:	0112      	lsls	r2, r2, #4
 800f760:	4311      	orrs	r1, r2
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800f766:	0212      	lsls	r2, r2, #8
 800f768:	4311      	orrs	r1, r2
 800f76a:	687a      	ldr	r2, [r7, #4]
 800f76c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f76e:	0852      	lsrs	r2, r2, #1
 800f770:	3a01      	subs	r2, #1
 800f772:	0552      	lsls	r2, r2, #21
 800f774:	4311      	orrs	r1, r2
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800f77a:	0852      	lsrs	r2, r2, #1
 800f77c:	3a01      	subs	r2, #1
 800f77e:	0652      	lsls	r2, r2, #25
 800f780:	4311      	orrs	r1, r2
 800f782:	687a      	ldr	r2, [r7, #4]
 800f784:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f786:	06d2      	lsls	r2, r2, #27
 800f788:	430a      	orrs	r2, r1
 800f78a:	493f      	ldr	r1, [pc, #252]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f78c:	4313      	orrs	r3, r2
 800f78e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800f790:	4b3d      	ldr	r3, [pc, #244]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a3c      	ldr	r2, [pc, #240]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f79a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f79c:	4b3a      	ldr	r3, [pc, #232]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	4a39      	ldr	r2, [pc, #228]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f7a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800f7a8:	f7fa fe56 	bl	800a458 <HAL_GetTick>
 800f7ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f7ae:	e008      	b.n	800f7c2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f7b0:	f7fa fe52 	bl	800a458 <HAL_GetTick>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	2b02      	cmp	r3, #2
 800f7bc:	d901      	bls.n	800f7c2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800f7be:	2303      	movs	r3, #3
 800f7c0:	e067      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f7c2:	4b31      	ldr	r3, [pc, #196]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d0f0      	beq.n	800f7b0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f7ce:	e05f      	b.n	800f890 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800f7d0:	2301      	movs	r3, #1
 800f7d2:	e05e      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f7d4:	4b2c      	ldr	r3, [pc, #176]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d157      	bne.n	800f890 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800f7e0:	4b29      	ldr	r3, [pc, #164]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a28      	ldr	r2, [pc, #160]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f7ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800f7ec:	4b26      	ldr	r3, [pc, #152]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	4a25      	ldr	r2, [pc, #148]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f7f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f7f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f7f8:	f7fa fe2e 	bl	800a458 <HAL_GetTick>
 800f7fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f7fe:	e008      	b.n	800f812 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f800:	f7fa fe2a 	bl	800a458 <HAL_GetTick>
 800f804:	4602      	mov	r2, r0
 800f806:	693b      	ldr	r3, [r7, #16]
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	2b02      	cmp	r3, #2
 800f80c:	d901      	bls.n	800f812 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800f80e:	2303      	movs	r3, #3
 800f810:	e03f      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f812:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d0f0      	beq.n	800f800 <HAL_RCC_OscConfig+0x7a4>
 800f81e:	e037      	b.n	800f890 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800f820:	69bb      	ldr	r3, [r7, #24]
 800f822:	2b0c      	cmp	r3, #12
 800f824:	d02d      	beq.n	800f882 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f826:	4b18      	ldr	r3, [pc, #96]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	4a17      	ldr	r2, [pc, #92]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f82c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f830:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800f832:	4b15      	ldr	r3, [pc, #84]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d105      	bne.n	800f84a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800f83e:	4b12      	ldr	r3, [pc, #72]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f840:	68db      	ldr	r3, [r3, #12]
 800f842:	4a11      	ldr	r2, [pc, #68]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f844:	f023 0303 	bic.w	r3, r3, #3
 800f848:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800f84a:	4b0f      	ldr	r3, [pc, #60]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	4a0e      	ldr	r2, [pc, #56]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f850:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800f854:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f858:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f85a:	f7fa fdfd 	bl	800a458 <HAL_GetTick>
 800f85e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f860:	e008      	b.n	800f874 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f862:	f7fa fdf9 	bl	800a458 <HAL_GetTick>
 800f866:	4602      	mov	r2, r0
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	1ad3      	subs	r3, r2, r3
 800f86c:	2b02      	cmp	r3, #2
 800f86e:	d901      	bls.n	800f874 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800f870:	2303      	movs	r3, #3
 800f872:	e00e      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800f874:	4b04      	ldr	r3, [pc, #16]	; (800f888 <HAL_RCC_OscConfig+0x82c>)
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1f0      	bne.n	800f862 <HAL_RCC_OscConfig+0x806>
 800f880:	e006      	b.n	800f890 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e005      	b.n	800f892 <HAL_RCC_OscConfig+0x836>
 800f886:	bf00      	nop
 800f888:	40021000 	.word	0x40021000
 800f88c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3720      	adds	r7, #32
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}
 800f89a:	bf00      	nop

0800f89c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f89c:	b580      	push	{r7, lr}
 800f89e:	b084      	sub	sp, #16
 800f8a0:	af00      	add	r7, sp, #0
 800f8a2:	6078      	str	r0, [r7, #4]
 800f8a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d101      	bne.n	800f8b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	e0c8      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800f8b0:	4b66      	ldr	r3, [pc, #408]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	f003 0307 	and.w	r3, r3, #7
 800f8b8:	683a      	ldr	r2, [r7, #0]
 800f8ba:	429a      	cmp	r2, r3
 800f8bc:	d910      	bls.n	800f8e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f8be:	4b63      	ldr	r3, [pc, #396]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	f023 0207 	bic.w	r2, r3, #7
 800f8c6:	4961      	ldr	r1, [pc, #388]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f8c8:	683b      	ldr	r3, [r7, #0]
 800f8ca:	4313      	orrs	r3, r2
 800f8cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f8ce:	4b5f      	ldr	r3, [pc, #380]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f003 0307 	and.w	r3, r3, #7
 800f8d6:	683a      	ldr	r2, [r7, #0]
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d001      	beq.n	800f8e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f8dc:	2301      	movs	r3, #1
 800f8de:	e0b0      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d04c      	beq.n	800f986 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	2b03      	cmp	r3, #3
 800f8f2:	d107      	bne.n	800f904 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800f8f4:	4b56      	ldr	r3, [pc, #344]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d121      	bne.n	800f944 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800f900:	2301      	movs	r3, #1
 800f902:	e09e      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	2b02      	cmp	r3, #2
 800f90a:	d107      	bne.n	800f91c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f90c:	4b50      	ldr	r3, [pc, #320]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f914:	2b00      	cmp	r3, #0
 800f916:	d115      	bne.n	800f944 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f918:	2301      	movs	r3, #1
 800f91a:	e092      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d107      	bne.n	800f934 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f924:	4b4a      	ldr	r3, [pc, #296]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f003 0302 	and.w	r3, r3, #2
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d109      	bne.n	800f944 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f930:	2301      	movs	r3, #1
 800f932:	e086      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f934:	4b46      	ldr	r3, [pc, #280]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d101      	bne.n	800f944 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800f940:	2301      	movs	r3, #1
 800f942:	e07e      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800f944:	4b42      	ldr	r3, [pc, #264]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f946:	689b      	ldr	r3, [r3, #8]
 800f948:	f023 0203 	bic.w	r2, r3, #3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	685b      	ldr	r3, [r3, #4]
 800f950:	493f      	ldr	r1, [pc, #252]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f952:	4313      	orrs	r3, r2
 800f954:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f956:	f7fa fd7f 	bl	800a458 <HAL_GetTick>
 800f95a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f95c:	e00a      	b.n	800f974 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f95e:	f7fa fd7b 	bl	800a458 <HAL_GetTick>
 800f962:	4602      	mov	r2, r0
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	1ad3      	subs	r3, r2, r3
 800f968:	f241 3288 	movw	r2, #5000	; 0x1388
 800f96c:	4293      	cmp	r3, r2
 800f96e:	d901      	bls.n	800f974 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800f970:	2303      	movs	r3, #3
 800f972:	e066      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800f974:	4b36      	ldr	r3, [pc, #216]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f976:	689b      	ldr	r3, [r3, #8]
 800f978:	f003 020c 	and.w	r2, r3, #12
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	685b      	ldr	r3, [r3, #4]
 800f980:	009b      	lsls	r3, r3, #2
 800f982:	429a      	cmp	r2, r3
 800f984:	d1eb      	bne.n	800f95e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	f003 0302 	and.w	r3, r3, #2
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d008      	beq.n	800f9a4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800f992:	4b2f      	ldr	r3, [pc, #188]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f994:	689b      	ldr	r3, [r3, #8]
 800f996:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	689b      	ldr	r3, [r3, #8]
 800f99e:	492c      	ldr	r1, [pc, #176]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f9a4:	4b29      	ldr	r3, [pc, #164]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	f003 0307 	and.w	r3, r3, #7
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	429a      	cmp	r2, r3
 800f9b0:	d210      	bcs.n	800f9d4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f9b2:	4b26      	ldr	r3, [pc, #152]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	f023 0207 	bic.w	r2, r3, #7
 800f9ba:	4924      	ldr	r1, [pc, #144]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f9bc:	683b      	ldr	r3, [r7, #0]
 800f9be:	4313      	orrs	r3, r2
 800f9c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800f9c2:	4b22      	ldr	r3, [pc, #136]	; (800fa4c <HAL_RCC_ClockConfig+0x1b0>)
 800f9c4:	681b      	ldr	r3, [r3, #0]
 800f9c6:	f003 0307 	and.w	r3, r3, #7
 800f9ca:	683a      	ldr	r2, [r7, #0]
 800f9cc:	429a      	cmp	r2, r3
 800f9ce:	d001      	beq.n	800f9d4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	e036      	b.n	800fa42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f003 0304 	and.w	r3, r3, #4
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d008      	beq.n	800f9f2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f9e0:	4b1b      	ldr	r3, [pc, #108]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f9e2:	689b      	ldr	r3, [r3, #8]
 800f9e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	4918      	ldr	r1, [pc, #96]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	f003 0308 	and.w	r3, r3, #8
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d009      	beq.n	800fa12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800f9fe:	4b14      	ldr	r3, [pc, #80]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800fa00:	689b      	ldr	r3, [r3, #8]
 800fa02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	691b      	ldr	r3, [r3, #16]
 800fa0a:	00db      	lsls	r3, r3, #3
 800fa0c:	4910      	ldr	r1, [pc, #64]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800fa0e:	4313      	orrs	r3, r2
 800fa10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800fa12:	f000 f825 	bl	800fa60 <HAL_RCC_GetSysClockFreq>
 800fa16:	4602      	mov	r2, r0
 800fa18:	4b0d      	ldr	r3, [pc, #52]	; (800fa50 <HAL_RCC_ClockConfig+0x1b4>)
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	091b      	lsrs	r3, r3, #4
 800fa1e:	f003 030f 	and.w	r3, r3, #15
 800fa22:	490c      	ldr	r1, [pc, #48]	; (800fa54 <HAL_RCC_ClockConfig+0x1b8>)
 800fa24:	5ccb      	ldrb	r3, [r1, r3]
 800fa26:	f003 031f 	and.w	r3, r3, #31
 800fa2a:	fa22 f303 	lsr.w	r3, r2, r3
 800fa2e:	4a0a      	ldr	r2, [pc, #40]	; (800fa58 <HAL_RCC_ClockConfig+0x1bc>)
 800fa30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800fa32:	4b0a      	ldr	r3, [pc, #40]	; (800fa5c <HAL_RCC_ClockConfig+0x1c0>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	4618      	mov	r0, r3
 800fa38:	f7fa fcbe 	bl	800a3b8 <HAL_InitTick>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	72fb      	strb	r3, [r7, #11]

  return status;
 800fa40:	7afb      	ldrb	r3, [r7, #11]
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3710      	adds	r7, #16
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	40022000 	.word	0x40022000
 800fa50:	40021000 	.word	0x40021000
 800fa54:	0801c664 	.word	0x0801c664
 800fa58:	20000780 	.word	0x20000780
 800fa5c:	20000784 	.word	0x20000784

0800fa60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b089      	sub	sp, #36	; 0x24
 800fa64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800fa66:	2300      	movs	r3, #0
 800fa68:	61fb      	str	r3, [r7, #28]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fa6e:	4b3e      	ldr	r3, [pc, #248]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fa70:	689b      	ldr	r3, [r3, #8]
 800fa72:	f003 030c 	and.w	r3, r3, #12
 800fa76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fa78:	4b3b      	ldr	r3, [pc, #236]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	f003 0303 	and.w	r3, r3, #3
 800fa80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800fa82:	693b      	ldr	r3, [r7, #16]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d005      	beq.n	800fa94 <HAL_RCC_GetSysClockFreq+0x34>
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	2b0c      	cmp	r3, #12
 800fa8c:	d121      	bne.n	800fad2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d11e      	bne.n	800fad2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800fa94:	4b34      	ldr	r3, [pc, #208]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	f003 0308 	and.w	r3, r3, #8
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d107      	bne.n	800fab0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800faa0:	4b31      	ldr	r3, [pc, #196]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800faa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800faa6:	0a1b      	lsrs	r3, r3, #8
 800faa8:	f003 030f 	and.w	r3, r3, #15
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	e005      	b.n	800fabc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800fab0:	4b2d      	ldr	r3, [pc, #180]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	091b      	lsrs	r3, r3, #4
 800fab6:	f003 030f 	and.w	r3, r3, #15
 800faba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800fabc:	4a2b      	ldr	r2, [pc, #172]	; (800fb6c <HAL_RCC_GetSysClockFreq+0x10c>)
 800fabe:	69fb      	ldr	r3, [r7, #28]
 800fac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fac4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fac6:	693b      	ldr	r3, [r7, #16]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10d      	bne.n	800fae8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800facc:	69fb      	ldr	r3, [r7, #28]
 800face:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800fad0:	e00a      	b.n	800fae8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	2b04      	cmp	r3, #4
 800fad6:	d102      	bne.n	800fade <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800fad8:	4b25      	ldr	r3, [pc, #148]	; (800fb70 <HAL_RCC_GetSysClockFreq+0x110>)
 800fada:	61bb      	str	r3, [r7, #24]
 800fadc:	e004      	b.n	800fae8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800fade:	693b      	ldr	r3, [r7, #16]
 800fae0:	2b08      	cmp	r3, #8
 800fae2:	d101      	bne.n	800fae8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800fae4:	4b23      	ldr	r3, [pc, #140]	; (800fb74 <HAL_RCC_GetSysClockFreq+0x114>)
 800fae6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	2b0c      	cmp	r3, #12
 800faec:	d134      	bne.n	800fb58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800faee:	4b1e      	ldr	r3, [pc, #120]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	f003 0303 	and.w	r3, r3, #3
 800faf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800faf8:	68bb      	ldr	r3, [r7, #8]
 800fafa:	2b02      	cmp	r3, #2
 800fafc:	d003      	beq.n	800fb06 <HAL_RCC_GetSysClockFreq+0xa6>
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	2b03      	cmp	r3, #3
 800fb02:	d003      	beq.n	800fb0c <HAL_RCC_GetSysClockFreq+0xac>
 800fb04:	e005      	b.n	800fb12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800fb06:	4b1a      	ldr	r3, [pc, #104]	; (800fb70 <HAL_RCC_GetSysClockFreq+0x110>)
 800fb08:	617b      	str	r3, [r7, #20]
      break;
 800fb0a:	e005      	b.n	800fb18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800fb0c:	4b19      	ldr	r3, [pc, #100]	; (800fb74 <HAL_RCC_GetSysClockFreq+0x114>)
 800fb0e:	617b      	str	r3, [r7, #20]
      break;
 800fb10:	e002      	b.n	800fb18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800fb12:	69fb      	ldr	r3, [r7, #28]
 800fb14:	617b      	str	r3, [r7, #20]
      break;
 800fb16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800fb18:	4b13      	ldr	r3, [pc, #76]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	091b      	lsrs	r3, r3, #4
 800fb1e:	f003 0307 	and.w	r3, r3, #7
 800fb22:	3301      	adds	r3, #1
 800fb24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800fb26:	4b10      	ldr	r3, [pc, #64]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fb28:	68db      	ldr	r3, [r3, #12]
 800fb2a:	0a1b      	lsrs	r3, r3, #8
 800fb2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	fb02 f203 	mul.w	r2, r2, r3
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800fb3e:	4b0a      	ldr	r3, [pc, #40]	; (800fb68 <HAL_RCC_GetSysClockFreq+0x108>)
 800fb40:	68db      	ldr	r3, [r3, #12]
 800fb42:	0e5b      	lsrs	r3, r3, #25
 800fb44:	f003 0303 	and.w	r3, r3, #3
 800fb48:	3301      	adds	r3, #1
 800fb4a:	005b      	lsls	r3, r3, #1
 800fb4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800fb4e:	697a      	ldr	r2, [r7, #20]
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	fbb2 f3f3 	udiv	r3, r2, r3
 800fb56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800fb58:	69bb      	ldr	r3, [r7, #24]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	3724      	adds	r7, #36	; 0x24
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb64:	4770      	bx	lr
 800fb66:	bf00      	nop
 800fb68:	40021000 	.word	0x40021000
 800fb6c:	0801c67c 	.word	0x0801c67c
 800fb70:	00f42400 	.word	0x00f42400
 800fb74:	007a1200 	.word	0x007a1200

0800fb78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800fb78:	b480      	push	{r7}
 800fb7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800fb7c:	4b03      	ldr	r3, [pc, #12]	; (800fb8c <HAL_RCC_GetHCLKFreq+0x14>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr
 800fb8a:	bf00      	nop
 800fb8c:	20000780 	.word	0x20000780

0800fb90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800fb94:	f7ff fff0 	bl	800fb78 <HAL_RCC_GetHCLKFreq>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	4b06      	ldr	r3, [pc, #24]	; (800fbb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	0a1b      	lsrs	r3, r3, #8
 800fba0:	f003 0307 	and.w	r3, r3, #7
 800fba4:	4904      	ldr	r1, [pc, #16]	; (800fbb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800fba6:	5ccb      	ldrb	r3, [r1, r3]
 800fba8:	f003 031f 	and.w	r3, r3, #31
 800fbac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	40021000 	.word	0x40021000
 800fbb8:	0801c674 	.word	0x0801c674

0800fbbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800fbc0:	f7ff ffda 	bl	800fb78 <HAL_RCC_GetHCLKFreq>
 800fbc4:	4602      	mov	r2, r0
 800fbc6:	4b06      	ldr	r3, [pc, #24]	; (800fbe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800fbc8:	689b      	ldr	r3, [r3, #8]
 800fbca:	0adb      	lsrs	r3, r3, #11
 800fbcc:	f003 0307 	and.w	r3, r3, #7
 800fbd0:	4904      	ldr	r1, [pc, #16]	; (800fbe4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800fbd2:	5ccb      	ldrb	r3, [r1, r3]
 800fbd4:	f003 031f 	and.w	r3, r3, #31
 800fbd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800fbdc:	4618      	mov	r0, r3
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	40021000 	.word	0x40021000
 800fbe4:	0801c674 	.word	0x0801c674

0800fbe8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b086      	sub	sp, #24
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800fbf0:	2300      	movs	r3, #0
 800fbf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800fbf4:	4b2a      	ldr	r3, [pc, #168]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fbf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d003      	beq.n	800fc08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800fc00:	f7ff f920 	bl	800ee44 <HAL_PWREx_GetVoltageRange>
 800fc04:	6178      	str	r0, [r7, #20]
 800fc06:	e014      	b.n	800fc32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800fc08:	4b25      	ldr	r3, [pc, #148]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fc0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc0c:	4a24      	ldr	r2, [pc, #144]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fc0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc12:	6593      	str	r3, [r2, #88]	; 0x58
 800fc14:	4b22      	ldr	r3, [pc, #136]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fc16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc1c:	60fb      	str	r3, [r7, #12]
 800fc1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800fc20:	f7ff f910 	bl	800ee44 <HAL_PWREx_GetVoltageRange>
 800fc24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800fc26:	4b1e      	ldr	r3, [pc, #120]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc2a:	4a1d      	ldr	r2, [pc, #116]	; (800fca0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800fc2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fc30:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc38:	d10b      	bne.n	800fc52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	2b80      	cmp	r3, #128	; 0x80
 800fc3e:	d919      	bls.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2ba0      	cmp	r3, #160	; 0xa0
 800fc44:	d902      	bls.n	800fc4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fc46:	2302      	movs	r3, #2
 800fc48:	613b      	str	r3, [r7, #16]
 800fc4a:	e013      	b.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	613b      	str	r3, [r7, #16]
 800fc50:	e010      	b.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	2b80      	cmp	r3, #128	; 0x80
 800fc56:	d902      	bls.n	800fc5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800fc58:	2303      	movs	r3, #3
 800fc5a:	613b      	str	r3, [r7, #16]
 800fc5c:	e00a      	b.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2b80      	cmp	r3, #128	; 0x80
 800fc62:	d102      	bne.n	800fc6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800fc64:	2302      	movs	r3, #2
 800fc66:	613b      	str	r3, [r7, #16]
 800fc68:	e004      	b.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2b70      	cmp	r3, #112	; 0x70
 800fc6e:	d101      	bne.n	800fc74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800fc70:	2301      	movs	r3, #1
 800fc72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800fc74:	4b0b      	ldr	r3, [pc, #44]	; (800fca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f023 0207 	bic.w	r2, r3, #7
 800fc7c:	4909      	ldr	r1, [pc, #36]	; (800fca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	4313      	orrs	r3, r2
 800fc82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800fc84:	4b07      	ldr	r3, [pc, #28]	; (800fca4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	f003 0307 	and.w	r3, r3, #7
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d001      	beq.n	800fc96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3718      	adds	r7, #24
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}
 800fca0:	40021000 	.word	0x40021000
 800fca4:	40022000 	.word	0x40022000

0800fca8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800fca8:	b580      	push	{r7, lr}
 800fcaa:	b086      	sub	sp, #24
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d031      	beq.n	800fd28 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcc8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fccc:	d01a      	beq.n	800fd04 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800fcce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800fcd2:	d814      	bhi.n	800fcfe <HAL_RCCEx_PeriphCLKConfig+0x56>
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d009      	beq.n	800fcec <HAL_RCCEx_PeriphCLKConfig+0x44>
 800fcd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fcdc:	d10f      	bne.n	800fcfe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800fcde:	4b5d      	ldr	r3, [pc, #372]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fce0:	68db      	ldr	r3, [r3, #12]
 800fce2:	4a5c      	ldr	r2, [pc, #368]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fce8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fcea:	e00c      	b.n	800fd06 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	3304      	adds	r3, #4
 800fcf0:	2100      	movs	r1, #0
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 fa2e 	bl	8010154 <RCCEx_PLLSAI1_Config>
 800fcf8:	4603      	mov	r3, r0
 800fcfa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800fcfc:	e003      	b.n	800fd06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	74fb      	strb	r3, [r7, #19]
      break;
 800fd02:	e000      	b.n	800fd06 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800fd04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800fd06:	7cfb      	ldrb	r3, [r7, #19]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d10b      	bne.n	800fd24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800fd0c:	4b51      	ldr	r3, [pc, #324]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd1a:	494e      	ldr	r1, [pc, #312]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd1c:	4313      	orrs	r3, r2
 800fd1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800fd22:	e001      	b.n	800fd28 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fd24:	7cfb      	ldrb	r3, [r7, #19]
 800fd26:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	f000 809e 	beq.w	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fd36:	2300      	movs	r3, #0
 800fd38:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800fd3a:	4b46      	ldr	r3, [pc, #280]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d101      	bne.n	800fd4a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d00d      	beq.n	800fd6c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fd50:	4b40      	ldr	r3, [pc, #256]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd54:	4a3f      	ldr	r2, [pc, #252]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fd5a:	6593      	str	r3, [r2, #88]	; 0x58
 800fd5c:	4b3d      	ldr	r3, [pc, #244]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fd5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fd64:	60bb      	str	r3, [r7, #8]
 800fd66:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fd68:	2301      	movs	r3, #1
 800fd6a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fd6c:	4b3a      	ldr	r3, [pc, #232]	; (800fe58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	4a39      	ldr	r2, [pc, #228]	; (800fe58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fd72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fd76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fd78:	f7fa fb6e 	bl	800a458 <HAL_GetTick>
 800fd7c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fd7e:	e009      	b.n	800fd94 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fd80:	f7fa fb6a 	bl	800a458 <HAL_GetTick>
 800fd84:	4602      	mov	r2, r0
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	1ad3      	subs	r3, r2, r3
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d902      	bls.n	800fd94 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800fd8e:	2303      	movs	r3, #3
 800fd90:	74fb      	strb	r3, [r7, #19]
        break;
 800fd92:	e005      	b.n	800fda0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800fd94:	4b30      	ldr	r3, [pc, #192]	; (800fe58 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d0ef      	beq.n	800fd80 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800fda0:	7cfb      	ldrb	r3, [r7, #19]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d15a      	bne.n	800fe5c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800fda6:	4b2b      	ldr	r3, [pc, #172]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fda8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fdb0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800fdb2:	697b      	ldr	r3, [r7, #20]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d01e      	beq.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdbc:	697a      	ldr	r2, [r7, #20]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d019      	beq.n	800fdf6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800fdc2:	4b24      	ldr	r3, [pc, #144]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fdcc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800fdce:	4b21      	ldr	r3, [pc, #132]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fdd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fdd4:	4a1f      	ldr	r2, [pc, #124]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fdd6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fdda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800fdde:	4b1d      	ldr	r3, [pc, #116]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fde0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fde4:	4a1b      	ldr	r2, [pc, #108]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fde6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fdea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800fdee:	4a19      	ldr	r2, [pc, #100]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	f003 0301 	and.w	r3, r3, #1
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d016      	beq.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe00:	f7fa fb2a 	bl	800a458 <HAL_GetTick>
 800fe04:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fe06:	e00b      	b.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fe08:	f7fa fb26 	bl	800a458 <HAL_GetTick>
 800fe0c:	4602      	mov	r2, r0
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	1ad3      	subs	r3, r2, r3
 800fe12:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe16:	4293      	cmp	r3, r2
 800fe18:	d902      	bls.n	800fe20 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800fe1a:	2303      	movs	r3, #3
 800fe1c:	74fb      	strb	r3, [r7, #19]
            break;
 800fe1e:	e006      	b.n	800fe2e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fe20:	4b0c      	ldr	r3, [pc, #48]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fe22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe26:	f003 0302 	and.w	r3, r3, #2
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d0ec      	beq.n	800fe08 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800fe2e:	7cfb      	ldrb	r3, [r7, #19]
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d10b      	bne.n	800fe4c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800fe34:	4b07      	ldr	r3, [pc, #28]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fe36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fe3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe42:	4904      	ldr	r1, [pc, #16]	; (800fe54 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800fe44:	4313      	orrs	r3, r2
 800fe46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800fe4a:	e009      	b.n	800fe60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800fe4c:	7cfb      	ldrb	r3, [r7, #19]
 800fe4e:	74bb      	strb	r3, [r7, #18]
 800fe50:	e006      	b.n	800fe60 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800fe52:	bf00      	nop
 800fe54:	40021000 	.word	0x40021000
 800fe58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800fe5c:	7cfb      	ldrb	r3, [r7, #19]
 800fe5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fe60:	7c7b      	ldrb	r3, [r7, #17]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d105      	bne.n	800fe72 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fe66:	4bb2      	ldr	r3, [pc, #712]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fe68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fe6a:	4ab1      	ldr	r2, [pc, #708]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fe6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fe70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	f003 0301 	and.w	r3, r3, #1
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d00a      	beq.n	800fe94 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800fe7e:	4bac      	ldr	r3, [pc, #688]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fe80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe84:	f023 0203 	bic.w	r2, r3, #3
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	6a1b      	ldr	r3, [r3, #32]
 800fe8c:	49a8      	ldr	r1, [pc, #672]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fe8e:	4313      	orrs	r3, r2
 800fe90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	f003 0302 	and.w	r3, r3, #2
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00a      	beq.n	800feb6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800fea0:	4ba3      	ldr	r3, [pc, #652]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fea6:	f023 020c 	bic.w	r2, r3, #12
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feae:	49a0      	ldr	r1, [pc, #640]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800feb0:	4313      	orrs	r3, r2
 800feb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	f003 0304 	and.w	r3, r3, #4
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d00a      	beq.n	800fed8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800fec2:	4b9b      	ldr	r3, [pc, #620]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fec8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fed0:	4997      	ldr	r1, [pc, #604]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fed2:	4313      	orrs	r3, r2
 800fed4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f003 0320 	and.w	r3, r3, #32
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d00a      	beq.n	800fefa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800fee4:	4b92      	ldr	r3, [pc, #584]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800feea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef2:	498f      	ldr	r1, [pc, #572]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800fef4:	4313      	orrs	r3, r2
 800fef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00a      	beq.n	800ff1c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ff06:	4b8a      	ldr	r3, [pc, #552]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff14:	4986      	ldr	r1, [pc, #536]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff16:	4313      	orrs	r3, r2
 800ff18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d00a      	beq.n	800ff3e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ff28:	4b81      	ldr	r3, [pc, #516]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff36:	497e      	ldr	r1, [pc, #504]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff38:	4313      	orrs	r3, r2
 800ff3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d00a      	beq.n	800ff60 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ff4a:	4b79      	ldr	r3, [pc, #484]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff50:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff58:	4975      	ldr	r1, [pc, #468]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff5a:	4313      	orrs	r3, r2
 800ff5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d00a      	beq.n	800ff82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ff6c:	4b70      	ldr	r3, [pc, #448]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff72:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff7a:	496d      	ldr	r1, [pc, #436]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff7c:	4313      	orrs	r3, r2
 800ff7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d00a      	beq.n	800ffa4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ff8e:	4b68      	ldr	r3, [pc, #416]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ff94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ff98:	687b      	ldr	r3, [r7, #4]
 800ff9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff9c:	4964      	ldr	r1, [pc, #400]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ff9e:	4313      	orrs	r3, r2
 800ffa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	681b      	ldr	r3, [r3, #0]
 800ffa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d028      	beq.n	8010002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ffb0:	4b5f      	ldr	r3, [pc, #380]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ffb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ffb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffbe:	495c      	ldr	r1, [pc, #368]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ffc0:	4313      	orrs	r3, r2
 800ffc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ffce:	d106      	bne.n	800ffde <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ffd0:	4b57      	ldr	r3, [pc, #348]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ffd2:	68db      	ldr	r3, [r3, #12]
 800ffd4:	4a56      	ldr	r2, [pc, #344]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ffd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ffda:	60d3      	str	r3, [r2, #12]
 800ffdc:	e011      	b.n	8010002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ffe2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ffe6:	d10c      	bne.n	8010002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	3304      	adds	r3, #4
 800ffec:	2101      	movs	r1, #1
 800ffee:	4618      	mov	r0, r3
 800fff0:	f000 f8b0 	bl	8010154 <RCCEx_PLLSAI1_Config>
 800fff4:	4603      	mov	r3, r0
 800fff6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800fff8:	7cfb      	ldrb	r3, [r7, #19]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d001      	beq.n	8010002 <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 800fffe:	7cfb      	ldrb	r3, [r7, #19]
 8010000:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801000a:	2b00      	cmp	r3, #0
 801000c:	d028      	beq.n	8010060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801000e:	4b48      	ldr	r3, [pc, #288]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010014:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801001c:	4944      	ldr	r1, [pc, #272]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801001e:	4313      	orrs	r3, r2
 8010020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010028:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801002c:	d106      	bne.n	801003c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801002e:	4b40      	ldr	r3, [pc, #256]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010030:	68db      	ldr	r3, [r3, #12]
 8010032:	4a3f      	ldr	r2, [pc, #252]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010034:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010038:	60d3      	str	r3, [r2, #12]
 801003a:	e011      	b.n	8010060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010044:	d10c      	bne.n	8010060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	3304      	adds	r3, #4
 801004a:	2101      	movs	r1, #1
 801004c:	4618      	mov	r0, r3
 801004e:	f000 f881 	bl	8010154 <RCCEx_PLLSAI1_Config>
 8010052:	4603      	mov	r3, r0
 8010054:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010056:	7cfb      	ldrb	r3, [r7, #19]
 8010058:	2b00      	cmp	r3, #0
 801005a:	d001      	beq.n	8010060 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 801005c:	7cfb      	ldrb	r3, [r7, #19]
 801005e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010068:	2b00      	cmp	r3, #0
 801006a:	d028      	beq.n	80100be <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801006c:	4b30      	ldr	r3, [pc, #192]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801006e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010072:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801007a:	492d      	ldr	r1, [pc, #180]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801007c:	4313      	orrs	r3, r2
 801007e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010086:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801008a:	d106      	bne.n	801009a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801008c:	4b28      	ldr	r3, [pc, #160]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	4a27      	ldr	r2, [pc, #156]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010096:	60d3      	str	r3, [r2, #12]
 8010098:	e011      	b.n	80100be <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801009e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80100a2:	d10c      	bne.n	80100be <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	3304      	adds	r3, #4
 80100a8:	2101      	movs	r1, #1
 80100aa:	4618      	mov	r0, r3
 80100ac:	f000 f852 	bl	8010154 <RCCEx_PLLSAI1_Config>
 80100b0:	4603      	mov	r3, r0
 80100b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80100b4:	7cfb      	ldrb	r3, [r7, #19]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d001      	beq.n	80100be <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 80100ba:	7cfb      	ldrb	r3, [r7, #19]
 80100bc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d01c      	beq.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80100ca:	4b19      	ldr	r3, [pc, #100]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80100cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100d0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100d8:	4915      	ldr	r1, [pc, #84]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80100da:	4313      	orrs	r3, r2
 80100dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80100e8:	d10c      	bne.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	3304      	adds	r3, #4
 80100ee:	2102      	movs	r1, #2
 80100f0:	4618      	mov	r0, r3
 80100f2:	f000 f82f 	bl	8010154 <RCCEx_PLLSAI1_Config>
 80100f6:	4603      	mov	r3, r0
 80100f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80100fa:	7cfb      	ldrb	r3, [r7, #19]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d001      	beq.n	8010104 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 8010100:	7cfb      	ldrb	r3, [r7, #19]
 8010102:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
 8010108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00a      	beq.n	8010126 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8010110:	4b07      	ldr	r3, [pc, #28]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010116:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801011e:	4904      	ldr	r1, [pc, #16]	; (8010130 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010120:	4313      	orrs	r3, r2
 8010122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010126:	7cbb      	ldrb	r3, [r7, #18]
}
 8010128:	4618      	mov	r0, r3
 801012a:	3718      	adds	r7, #24
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	40021000 	.word	0x40021000

08010134 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8010134:	b480      	push	{r7}
 8010136:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	4a04      	ldr	r2, [pc, #16]	; (8010150 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801013e:	f043 0304 	orr.w	r3, r3, #4
 8010142:	6013      	str	r3, [r2, #0]
}
 8010144:	bf00      	nop
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	40021000 	.word	0x40021000

08010154 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b084      	sub	sp, #16
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
 801015c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801015e:	2300      	movs	r3, #0
 8010160:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8010162:	4b74      	ldr	r3, [pc, #464]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	f003 0303 	and.w	r3, r3, #3
 801016a:	2b00      	cmp	r3, #0
 801016c:	d018      	beq.n	80101a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801016e:	4b71      	ldr	r3, [pc, #452]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010170:	68db      	ldr	r3, [r3, #12]
 8010172:	f003 0203 	and.w	r2, r3, #3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d10d      	bne.n	801019a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	681b      	ldr	r3, [r3, #0]
       ||
 8010182:	2b00      	cmp	r3, #0
 8010184:	d009      	beq.n	801019a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010186:	4b6b      	ldr	r3, [pc, #428]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	091b      	lsrs	r3, r3, #4
 801018c:	f003 0307 	and.w	r3, r3, #7
 8010190:	1c5a      	adds	r2, r3, #1
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
       ||
 8010196:	429a      	cmp	r2, r3
 8010198:	d047      	beq.n	801022a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 801019a:	2301      	movs	r3, #1
 801019c:	73fb      	strb	r3, [r7, #15]
 801019e:	e044      	b.n	801022a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	2b03      	cmp	r3, #3
 80101a6:	d018      	beq.n	80101da <RCCEx_PLLSAI1_Config+0x86>
 80101a8:	2b03      	cmp	r3, #3
 80101aa:	d825      	bhi.n	80101f8 <RCCEx_PLLSAI1_Config+0xa4>
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d002      	beq.n	80101b6 <RCCEx_PLLSAI1_Config+0x62>
 80101b0:	2b02      	cmp	r3, #2
 80101b2:	d009      	beq.n	80101c8 <RCCEx_PLLSAI1_Config+0x74>
 80101b4:	e020      	b.n	80101f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80101b6:	4b5f      	ldr	r3, [pc, #380]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	f003 0302 	and.w	r3, r3, #2
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d11d      	bne.n	80101fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80101c2:	2301      	movs	r3, #1
 80101c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80101c6:	e01a      	b.n	80101fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80101c8:	4b5a      	ldr	r3, [pc, #360]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d116      	bne.n	8010202 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80101d8:	e013      	b.n	8010202 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80101da:	4b56      	ldr	r3, [pc, #344]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10f      	bne.n	8010206 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80101e6:	4b53      	ldr	r3, [pc, #332]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d109      	bne.n	8010206 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80101f2:	2301      	movs	r3, #1
 80101f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80101f6:	e006      	b.n	8010206 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80101f8:	2301      	movs	r3, #1
 80101fa:	73fb      	strb	r3, [r7, #15]
      break;
 80101fc:	e004      	b.n	8010208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80101fe:	bf00      	nop
 8010200:	e002      	b.n	8010208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010202:	bf00      	nop
 8010204:	e000      	b.n	8010208 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010206:	bf00      	nop
    }

    if(status == HAL_OK)
 8010208:	7bfb      	ldrb	r3, [r7, #15]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d10d      	bne.n	801022a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801020e:	4b49      	ldr	r3, [pc, #292]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	6819      	ldr	r1, [r3, #0]
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	685b      	ldr	r3, [r3, #4]
 801021e:	3b01      	subs	r3, #1
 8010220:	011b      	lsls	r3, r3, #4
 8010222:	430b      	orrs	r3, r1
 8010224:	4943      	ldr	r1, [pc, #268]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010226:	4313      	orrs	r3, r2
 8010228:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 801022a:	7bfb      	ldrb	r3, [r7, #15]
 801022c:	2b00      	cmp	r3, #0
 801022e:	d17c      	bne.n	801032a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8010230:	4b40      	ldr	r3, [pc, #256]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010232:	681b      	ldr	r3, [r3, #0]
 8010234:	4a3f      	ldr	r2, [pc, #252]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010236:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801023a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801023c:	f7fa f90c 	bl	800a458 <HAL_GetTick>
 8010240:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010242:	e009      	b.n	8010258 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010244:	f7fa f908 	bl	800a458 <HAL_GetTick>
 8010248:	4602      	mov	r2, r0
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	2b02      	cmp	r3, #2
 8010250:	d902      	bls.n	8010258 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010252:	2303      	movs	r3, #3
 8010254:	73fb      	strb	r3, [r7, #15]
        break;
 8010256:	e005      	b.n	8010264 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010258:	4b36      	ldr	r3, [pc, #216]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010260:	2b00      	cmp	r3, #0
 8010262:	d1ef      	bne.n	8010244 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010264:	7bfb      	ldrb	r3, [r7, #15]
 8010266:	2b00      	cmp	r3, #0
 8010268:	d15f      	bne.n	801032a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 801026a:	683b      	ldr	r3, [r7, #0]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d110      	bne.n	8010292 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010270:	4b30      	ldr	r3, [pc, #192]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010272:	691b      	ldr	r3, [r3, #16]
 8010274:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8010278:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	6892      	ldr	r2, [r2, #8]
 8010280:	0211      	lsls	r1, r2, #8
 8010282:	687a      	ldr	r2, [r7, #4]
 8010284:	68d2      	ldr	r2, [r2, #12]
 8010286:	06d2      	lsls	r2, r2, #27
 8010288:	430a      	orrs	r2, r1
 801028a:	492a      	ldr	r1, [pc, #168]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 801028c:	4313      	orrs	r3, r2
 801028e:	610b      	str	r3, [r1, #16]
 8010290:	e027      	b.n	80102e2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010292:	683b      	ldr	r3, [r7, #0]
 8010294:	2b01      	cmp	r3, #1
 8010296:	d112      	bne.n	80102be <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010298:	4b26      	ldr	r3, [pc, #152]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 801029a:	691b      	ldr	r3, [r3, #16]
 801029c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80102a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	6892      	ldr	r2, [r2, #8]
 80102a8:	0211      	lsls	r1, r2, #8
 80102aa:	687a      	ldr	r2, [r7, #4]
 80102ac:	6912      	ldr	r2, [r2, #16]
 80102ae:	0852      	lsrs	r2, r2, #1
 80102b0:	3a01      	subs	r2, #1
 80102b2:	0552      	lsls	r2, r2, #21
 80102b4:	430a      	orrs	r2, r1
 80102b6:	491f      	ldr	r1, [pc, #124]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80102b8:	4313      	orrs	r3, r2
 80102ba:	610b      	str	r3, [r1, #16]
 80102bc:	e011      	b.n	80102e2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80102be:	4b1d      	ldr	r3, [pc, #116]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80102c0:	691b      	ldr	r3, [r3, #16]
 80102c2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80102c6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80102ca:	687a      	ldr	r2, [r7, #4]
 80102cc:	6892      	ldr	r2, [r2, #8]
 80102ce:	0211      	lsls	r1, r2, #8
 80102d0:	687a      	ldr	r2, [r7, #4]
 80102d2:	6952      	ldr	r2, [r2, #20]
 80102d4:	0852      	lsrs	r2, r2, #1
 80102d6:	3a01      	subs	r2, #1
 80102d8:	0652      	lsls	r2, r2, #25
 80102da:	430a      	orrs	r2, r1
 80102dc:	4915      	ldr	r1, [pc, #84]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80102de:	4313      	orrs	r3, r2
 80102e0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a13      	ldr	r2, [pc, #76]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 80102e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80102ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80102ee:	f7fa f8b3 	bl	800a458 <HAL_GetTick>
 80102f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80102f4:	e009      	b.n	801030a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80102f6:	f7fa f8af 	bl	800a458 <HAL_GetTick>
 80102fa:	4602      	mov	r2, r0
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	2b02      	cmp	r3, #2
 8010302:	d902      	bls.n	801030a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8010304:	2303      	movs	r3, #3
 8010306:	73fb      	strb	r3, [r7, #15]
          break;
 8010308:	e005      	b.n	8010316 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 801030a:	4b0a      	ldr	r3, [pc, #40]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010312:	2b00      	cmp	r3, #0
 8010314:	d0ef      	beq.n	80102f6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8010316:	7bfb      	ldrb	r3, [r7, #15]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d106      	bne.n	801032a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 801031c:	4b05      	ldr	r3, [pc, #20]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 801031e:	691a      	ldr	r2, [r3, #16]
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	699b      	ldr	r3, [r3, #24]
 8010324:	4903      	ldr	r1, [pc, #12]	; (8010334 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010326:	4313      	orrs	r3, r2
 8010328:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 801032a:	7bfb      	ldrb	r3, [r7, #15]
}
 801032c:	4618      	mov	r0, r3
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	40021000 	.word	0x40021000

08010338 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b082      	sub	sp, #8
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d101      	bne.n	801034a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010346:	2301      	movs	r3, #1
 8010348:	e049      	b.n	80103de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	2200      	movs	r2, #0
 801035a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801035e:	6878      	ldr	r0, [r7, #4]
 8010360:	f7f9 fde6 	bl	8009f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2202      	movs	r2, #2
 8010368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	681a      	ldr	r2, [r3, #0]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	3304      	adds	r3, #4
 8010374:	4619      	mov	r1, r3
 8010376:	4610      	mov	r0, r2
 8010378:	f000 fcaa 	bl	8010cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2201      	movs	r2, #1
 8010380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2201      	movs	r2, #1
 8010388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2201      	movs	r2, #1
 8010390:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	2201      	movs	r2, #1
 8010398:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2201      	movs	r2, #1
 80103a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	2201      	movs	r2, #1
 80103a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2201      	movs	r2, #1
 80103b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2201      	movs	r2, #1
 80103b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	2201      	movs	r2, #1
 80103c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80103c4:	687b      	ldr	r3, [r7, #4]
 80103c6:	2201      	movs	r2, #1
 80103c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2201      	movs	r2, #1
 80103d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80103dc:	2300      	movs	r3, #0
}
 80103de:	4618      	mov	r0, r3
 80103e0:	3708      	adds	r7, #8
 80103e2:	46bd      	mov	sp, r7
 80103e4:	bd80      	pop	{r7, pc}
	...

080103e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80103e8:	b480      	push	{r7}
 80103ea:	b085      	sub	sp, #20
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d001      	beq.n	8010400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80103fc:	2301      	movs	r3, #1
 80103fe:	e03b      	b.n	8010478 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	2202      	movs	r2, #2
 8010404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	68da      	ldr	r2, [r3, #12]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f042 0201 	orr.w	r2, r2, #1
 8010416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	4a19      	ldr	r2, [pc, #100]	; (8010484 <HAL_TIM_Base_Start_IT+0x9c>)
 801041e:	4293      	cmp	r3, r2
 8010420:	d009      	beq.n	8010436 <HAL_TIM_Base_Start_IT+0x4e>
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801042a:	d004      	beq.n	8010436 <HAL_TIM_Base_Start_IT+0x4e>
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4a15      	ldr	r2, [pc, #84]	; (8010488 <HAL_TIM_Base_Start_IT+0xa0>)
 8010432:	4293      	cmp	r3, r2
 8010434:	d115      	bne.n	8010462 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	689a      	ldr	r2, [r3, #8]
 801043c:	4b13      	ldr	r3, [pc, #76]	; (801048c <HAL_TIM_Base_Start_IT+0xa4>)
 801043e:	4013      	ands	r3, r2
 8010440:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	2b06      	cmp	r3, #6
 8010446:	d015      	beq.n	8010474 <HAL_TIM_Base_Start_IT+0x8c>
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801044e:	d011      	beq.n	8010474 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	681a      	ldr	r2, [r3, #0]
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f042 0201 	orr.w	r2, r2, #1
 801045e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010460:	e008      	b.n	8010474 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	681a      	ldr	r2, [r3, #0]
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	f042 0201 	orr.w	r2, r2, #1
 8010470:	601a      	str	r2, [r3, #0]
 8010472:	e000      	b.n	8010476 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010474:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010476:	2300      	movs	r3, #0
}
 8010478:	4618      	mov	r0, r3
 801047a:	3714      	adds	r7, #20
 801047c:	46bd      	mov	sp, r7
 801047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010482:	4770      	bx	lr
 8010484:	40012c00 	.word	0x40012c00
 8010488:	40014000 	.word	0x40014000
 801048c:	00010007 	.word	0x00010007

08010490 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b082      	sub	sp, #8
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d101      	bne.n	80104a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801049e:	2301      	movs	r3, #1
 80104a0:	e049      	b.n	8010536 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d106      	bne.n	80104bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2200      	movs	r2, #0
 80104b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f000 f841 	bl	801053e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2202      	movs	r2, #2
 80104c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	3304      	adds	r3, #4
 80104cc:	4619      	mov	r1, r3
 80104ce:	4610      	mov	r0, r2
 80104d0:	f000 fbfe 	bl	8010cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	2201      	movs	r2, #1
 80104d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	2201      	movs	r2, #1
 80104e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2201      	movs	r2, #1
 80104e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2201      	movs	r2, #1
 80104f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	2201      	movs	r2, #1
 80104f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	2201      	movs	r2, #1
 8010500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	2201      	movs	r2, #1
 8010510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2201      	movs	r2, #1
 8010518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2201      	movs	r2, #1
 8010528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2201      	movs	r2, #1
 8010530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010534:	2300      	movs	r3, #0
}
 8010536:	4618      	mov	r0, r3
 8010538:	3708      	adds	r7, #8
 801053a:	46bd      	mov	sp, r7
 801053c:	bd80      	pop	{r7, pc}

0801053e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801053e:	b480      	push	{r7}
 8010540:	b083      	sub	sp, #12
 8010542:	af00      	add	r7, sp, #0
 8010544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010546:	bf00      	nop
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
	...

08010554 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
 801055c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801055e:	683b      	ldr	r3, [r7, #0]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d109      	bne.n	8010578 <HAL_TIM_PWM_Start+0x24>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801056a:	b2db      	uxtb	r3, r3
 801056c:	2b01      	cmp	r3, #1
 801056e:	bf14      	ite	ne
 8010570:	2301      	movne	r3, #1
 8010572:	2300      	moveq	r3, #0
 8010574:	b2db      	uxtb	r3, r3
 8010576:	e03c      	b.n	80105f2 <HAL_TIM_PWM_Start+0x9e>
 8010578:	683b      	ldr	r3, [r7, #0]
 801057a:	2b04      	cmp	r3, #4
 801057c:	d109      	bne.n	8010592 <HAL_TIM_PWM_Start+0x3e>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b01      	cmp	r3, #1
 8010588:	bf14      	ite	ne
 801058a:	2301      	movne	r3, #1
 801058c:	2300      	moveq	r3, #0
 801058e:	b2db      	uxtb	r3, r3
 8010590:	e02f      	b.n	80105f2 <HAL_TIM_PWM_Start+0x9e>
 8010592:	683b      	ldr	r3, [r7, #0]
 8010594:	2b08      	cmp	r3, #8
 8010596:	d109      	bne.n	80105ac <HAL_TIM_PWM_Start+0x58>
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801059e:	b2db      	uxtb	r3, r3
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	bf14      	ite	ne
 80105a4:	2301      	movne	r3, #1
 80105a6:	2300      	moveq	r3, #0
 80105a8:	b2db      	uxtb	r3, r3
 80105aa:	e022      	b.n	80105f2 <HAL_TIM_PWM_Start+0x9e>
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	2b0c      	cmp	r3, #12
 80105b0:	d109      	bne.n	80105c6 <HAL_TIM_PWM_Start+0x72>
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105b8:	b2db      	uxtb	r3, r3
 80105ba:	2b01      	cmp	r3, #1
 80105bc:	bf14      	ite	ne
 80105be:	2301      	movne	r3, #1
 80105c0:	2300      	moveq	r3, #0
 80105c2:	b2db      	uxtb	r3, r3
 80105c4:	e015      	b.n	80105f2 <HAL_TIM_PWM_Start+0x9e>
 80105c6:	683b      	ldr	r3, [r7, #0]
 80105c8:	2b10      	cmp	r3, #16
 80105ca:	d109      	bne.n	80105e0 <HAL_TIM_PWM_Start+0x8c>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	2b01      	cmp	r3, #1
 80105d6:	bf14      	ite	ne
 80105d8:	2301      	movne	r3, #1
 80105da:	2300      	moveq	r3, #0
 80105dc:	b2db      	uxtb	r3, r3
 80105de:	e008      	b.n	80105f2 <HAL_TIM_PWM_Start+0x9e>
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105e6:	b2db      	uxtb	r3, r3
 80105e8:	2b01      	cmp	r3, #1
 80105ea:	bf14      	ite	ne
 80105ec:	2301      	movne	r3, #1
 80105ee:	2300      	moveq	r3, #0
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d001      	beq.n	80105fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80105f6:	2301      	movs	r3, #1
 80105f8:	e07e      	b.n	80106f8 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d104      	bne.n	801060a <HAL_TIM_PWM_Start+0xb6>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	2202      	movs	r2, #2
 8010604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010608:	e023      	b.n	8010652 <HAL_TIM_PWM_Start+0xfe>
 801060a:	683b      	ldr	r3, [r7, #0]
 801060c:	2b04      	cmp	r3, #4
 801060e:	d104      	bne.n	801061a <HAL_TIM_PWM_Start+0xc6>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2202      	movs	r2, #2
 8010614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010618:	e01b      	b.n	8010652 <HAL_TIM_PWM_Start+0xfe>
 801061a:	683b      	ldr	r3, [r7, #0]
 801061c:	2b08      	cmp	r3, #8
 801061e:	d104      	bne.n	801062a <HAL_TIM_PWM_Start+0xd6>
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2202      	movs	r2, #2
 8010624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010628:	e013      	b.n	8010652 <HAL_TIM_PWM_Start+0xfe>
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b0c      	cmp	r3, #12
 801062e:	d104      	bne.n	801063a <HAL_TIM_PWM_Start+0xe6>
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	2202      	movs	r2, #2
 8010634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010638:	e00b      	b.n	8010652 <HAL_TIM_PWM_Start+0xfe>
 801063a:	683b      	ldr	r3, [r7, #0]
 801063c:	2b10      	cmp	r3, #16
 801063e:	d104      	bne.n	801064a <HAL_TIM_PWM_Start+0xf6>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	2202      	movs	r2, #2
 8010644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010648:	e003      	b.n	8010652 <HAL_TIM_PWM_Start+0xfe>
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2202      	movs	r2, #2
 801064e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	2201      	movs	r2, #1
 8010658:	6839      	ldr	r1, [r7, #0]
 801065a:	4618      	mov	r0, r3
 801065c:	f000 fe1a 	bl	8011294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	4a26      	ldr	r2, [pc, #152]	; (8010700 <HAL_TIM_PWM_Start+0x1ac>)
 8010666:	4293      	cmp	r3, r2
 8010668:	d009      	beq.n	801067e <HAL_TIM_PWM_Start+0x12a>
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4a25      	ldr	r2, [pc, #148]	; (8010704 <HAL_TIM_PWM_Start+0x1b0>)
 8010670:	4293      	cmp	r3, r2
 8010672:	d004      	beq.n	801067e <HAL_TIM_PWM_Start+0x12a>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	4a23      	ldr	r2, [pc, #140]	; (8010708 <HAL_TIM_PWM_Start+0x1b4>)
 801067a:	4293      	cmp	r3, r2
 801067c:	d101      	bne.n	8010682 <HAL_TIM_PWM_Start+0x12e>
 801067e:	2301      	movs	r3, #1
 8010680:	e000      	b.n	8010684 <HAL_TIM_PWM_Start+0x130>
 8010682:	2300      	movs	r3, #0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d007      	beq.n	8010698 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010696:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a18      	ldr	r2, [pc, #96]	; (8010700 <HAL_TIM_PWM_Start+0x1ac>)
 801069e:	4293      	cmp	r3, r2
 80106a0:	d009      	beq.n	80106b6 <HAL_TIM_PWM_Start+0x162>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80106aa:	d004      	beq.n	80106b6 <HAL_TIM_PWM_Start+0x162>
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	4a14      	ldr	r2, [pc, #80]	; (8010704 <HAL_TIM_PWM_Start+0x1b0>)
 80106b2:	4293      	cmp	r3, r2
 80106b4:	d115      	bne.n	80106e2 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	681b      	ldr	r3, [r3, #0]
 80106ba:	689a      	ldr	r2, [r3, #8]
 80106bc:	4b13      	ldr	r3, [pc, #76]	; (801070c <HAL_TIM_PWM_Start+0x1b8>)
 80106be:	4013      	ands	r3, r2
 80106c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	2b06      	cmp	r3, #6
 80106c6:	d015      	beq.n	80106f4 <HAL_TIM_PWM_Start+0x1a0>
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106ce:	d011      	beq.n	80106f4 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	f042 0201 	orr.w	r2, r2, #1
 80106de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106e0:	e008      	b.n	80106f4 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	681a      	ldr	r2, [r3, #0]
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	f042 0201 	orr.w	r2, r2, #1
 80106f0:	601a      	str	r2, [r3, #0]
 80106f2:	e000      	b.n	80106f6 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80106f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}
 8010700:	40012c00 	.word	0x40012c00
 8010704:	40014000 	.word	0x40014000
 8010708:	40014400 	.word	0x40014400
 801070c:	00010007 	.word	0x00010007

08010710 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b082      	sub	sp, #8
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
 8010718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	2200      	movs	r2, #0
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	4618      	mov	r0, r3
 8010724:	f000 fdb6 	bl	8011294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	4a39      	ldr	r2, [pc, #228]	; (8010814 <HAL_TIM_PWM_Stop+0x104>)
 801072e:	4293      	cmp	r3, r2
 8010730:	d009      	beq.n	8010746 <HAL_TIM_PWM_Stop+0x36>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4a38      	ldr	r2, [pc, #224]	; (8010818 <HAL_TIM_PWM_Stop+0x108>)
 8010738:	4293      	cmp	r3, r2
 801073a:	d004      	beq.n	8010746 <HAL_TIM_PWM_Stop+0x36>
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	681b      	ldr	r3, [r3, #0]
 8010740:	4a36      	ldr	r2, [pc, #216]	; (801081c <HAL_TIM_PWM_Stop+0x10c>)
 8010742:	4293      	cmp	r3, r2
 8010744:	d101      	bne.n	801074a <HAL_TIM_PWM_Stop+0x3a>
 8010746:	2301      	movs	r3, #1
 8010748:	e000      	b.n	801074c <HAL_TIM_PWM_Stop+0x3c>
 801074a:	2300      	movs	r3, #0
 801074c:	2b00      	cmp	r3, #0
 801074e:	d017      	beq.n	8010780 <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	6a1a      	ldr	r2, [r3, #32]
 8010756:	f241 1311 	movw	r3, #4369	; 0x1111
 801075a:	4013      	ands	r3, r2
 801075c:	2b00      	cmp	r3, #0
 801075e:	d10f      	bne.n	8010780 <HAL_TIM_PWM_Stop+0x70>
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	6a1a      	ldr	r2, [r3, #32]
 8010766:	f240 4344 	movw	r3, #1092	; 0x444
 801076a:	4013      	ands	r3, r2
 801076c:	2b00      	cmp	r3, #0
 801076e:	d107      	bne.n	8010780 <HAL_TIM_PWM_Stop+0x70>
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	681b      	ldr	r3, [r3, #0]
 801077a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801077e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	6a1a      	ldr	r2, [r3, #32]
 8010786:	f241 1311 	movw	r3, #4369	; 0x1111
 801078a:	4013      	ands	r3, r2
 801078c:	2b00      	cmp	r3, #0
 801078e:	d10f      	bne.n	80107b0 <HAL_TIM_PWM_Stop+0xa0>
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	6a1a      	ldr	r2, [r3, #32]
 8010796:	f240 4344 	movw	r3, #1092	; 0x444
 801079a:	4013      	ands	r3, r2
 801079c:	2b00      	cmp	r3, #0
 801079e:	d107      	bne.n	80107b0 <HAL_TIM_PWM_Stop+0xa0>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f022 0201 	bic.w	r2, r2, #1
 80107ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d104      	bne.n	80107c0 <HAL_TIM_PWM_Stop+0xb0>
 80107b6:	687b      	ldr	r3, [r7, #4]
 80107b8:	2201      	movs	r2, #1
 80107ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107be:	e023      	b.n	8010808 <HAL_TIM_PWM_Stop+0xf8>
 80107c0:	683b      	ldr	r3, [r7, #0]
 80107c2:	2b04      	cmp	r3, #4
 80107c4:	d104      	bne.n	80107d0 <HAL_TIM_PWM_Stop+0xc0>
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2201      	movs	r2, #1
 80107ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107ce:	e01b      	b.n	8010808 <HAL_TIM_PWM_Stop+0xf8>
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	2b08      	cmp	r3, #8
 80107d4:	d104      	bne.n	80107e0 <HAL_TIM_PWM_Stop+0xd0>
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	2201      	movs	r2, #1
 80107da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80107de:	e013      	b.n	8010808 <HAL_TIM_PWM_Stop+0xf8>
 80107e0:	683b      	ldr	r3, [r7, #0]
 80107e2:	2b0c      	cmp	r3, #12
 80107e4:	d104      	bne.n	80107f0 <HAL_TIM_PWM_Stop+0xe0>
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	2201      	movs	r2, #1
 80107ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80107ee:	e00b      	b.n	8010808 <HAL_TIM_PWM_Stop+0xf8>
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	2b10      	cmp	r3, #16
 80107f4:	d104      	bne.n	8010800 <HAL_TIM_PWM_Stop+0xf0>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2201      	movs	r2, #1
 80107fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80107fe:	e003      	b.n	8010808 <HAL_TIM_PWM_Stop+0xf8>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	2201      	movs	r2, #1
 8010804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3708      	adds	r7, #8
 801080e:	46bd      	mov	sp, r7
 8010810:	bd80      	pop	{r7, pc}
 8010812:	bf00      	nop
 8010814:	40012c00 	.word	0x40012c00
 8010818:	40014000 	.word	0x40014000
 801081c:	40014400 	.word	0x40014400

08010820 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010820:	b580      	push	{r7, lr}
 8010822:	b082      	sub	sp, #8
 8010824:	af00      	add	r7, sp, #0
 8010826:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	f003 0302 	and.w	r3, r3, #2
 8010832:	2b02      	cmp	r3, #2
 8010834:	d122      	bne.n	801087c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	68db      	ldr	r3, [r3, #12]
 801083c:	f003 0302 	and.w	r3, r3, #2
 8010840:	2b02      	cmp	r3, #2
 8010842:	d11b      	bne.n	801087c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	681b      	ldr	r3, [r3, #0]
 8010848:	f06f 0202 	mvn.w	r2, #2
 801084c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	2201      	movs	r2, #1
 8010852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	699b      	ldr	r3, [r3, #24]
 801085a:	f003 0303 	and.w	r3, r3, #3
 801085e:	2b00      	cmp	r3, #0
 8010860:	d003      	beq.n	801086a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010862:	6878      	ldr	r0, [r7, #4]
 8010864:	f000 fa16 	bl	8010c94 <HAL_TIM_IC_CaptureCallback>
 8010868:	e005      	b.n	8010876 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fa08 	bl	8010c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010870:	6878      	ldr	r0, [r7, #4]
 8010872:	f000 fa19 	bl	8010ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	2200      	movs	r2, #0
 801087a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	691b      	ldr	r3, [r3, #16]
 8010882:	f003 0304 	and.w	r3, r3, #4
 8010886:	2b04      	cmp	r3, #4
 8010888:	d122      	bne.n	80108d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	68db      	ldr	r3, [r3, #12]
 8010890:	f003 0304 	and.w	r3, r3, #4
 8010894:	2b04      	cmp	r3, #4
 8010896:	d11b      	bne.n	80108d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	f06f 0204 	mvn.w	r2, #4
 80108a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	2202      	movs	r2, #2
 80108a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	699b      	ldr	r3, [r3, #24]
 80108ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d003      	beq.n	80108be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f9ec 	bl	8010c94 <HAL_TIM_IC_CaptureCallback>
 80108bc:	e005      	b.n	80108ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 f9de 	bl	8010c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80108c4:	6878      	ldr	r0, [r7, #4]
 80108c6:	f000 f9ef 	bl	8010ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	691b      	ldr	r3, [r3, #16]
 80108d6:	f003 0308 	and.w	r3, r3, #8
 80108da:	2b08      	cmp	r3, #8
 80108dc:	d122      	bne.n	8010924 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	68db      	ldr	r3, [r3, #12]
 80108e4:	f003 0308 	and.w	r3, r3, #8
 80108e8:	2b08      	cmp	r3, #8
 80108ea:	d11b      	bne.n	8010924 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f06f 0208 	mvn.w	r2, #8
 80108f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	2204      	movs	r2, #4
 80108fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	681b      	ldr	r3, [r3, #0]
 8010900:	69db      	ldr	r3, [r3, #28]
 8010902:	f003 0303 	and.w	r3, r3, #3
 8010906:	2b00      	cmp	r3, #0
 8010908:	d003      	beq.n	8010912 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801090a:	6878      	ldr	r0, [r7, #4]
 801090c:	f000 f9c2 	bl	8010c94 <HAL_TIM_IC_CaptureCallback>
 8010910:	e005      	b.n	801091e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f000 f9b4 	bl	8010c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010918:	6878      	ldr	r0, [r7, #4]
 801091a:	f000 f9c5 	bl	8010ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	2200      	movs	r2, #0
 8010922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	681b      	ldr	r3, [r3, #0]
 8010928:	691b      	ldr	r3, [r3, #16]
 801092a:	f003 0310 	and.w	r3, r3, #16
 801092e:	2b10      	cmp	r3, #16
 8010930:	d122      	bne.n	8010978 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	f003 0310 	and.w	r3, r3, #16
 801093c:	2b10      	cmp	r3, #16
 801093e:	d11b      	bne.n	8010978 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	f06f 0210 	mvn.w	r2, #16
 8010948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2208      	movs	r2, #8
 801094e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	69db      	ldr	r3, [r3, #28]
 8010956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801095a:	2b00      	cmp	r3, #0
 801095c:	d003      	beq.n	8010966 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 f998 	bl	8010c94 <HAL_TIM_IC_CaptureCallback>
 8010964:	e005      	b.n	8010972 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f000 f98a 	bl	8010c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801096c:	6878      	ldr	r0, [r7, #4]
 801096e:	f000 f99b 	bl	8010ca8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	691b      	ldr	r3, [r3, #16]
 801097e:	f003 0301 	and.w	r3, r3, #1
 8010982:	2b01      	cmp	r3, #1
 8010984:	d10e      	bne.n	80109a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	f003 0301 	and.w	r3, r3, #1
 8010990:	2b01      	cmp	r3, #1
 8010992:	d107      	bne.n	80109a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	f06f 0201 	mvn.w	r2, #1
 801099c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801099e:	6878      	ldr	r0, [r7, #4]
 80109a0:	f7f8 ffa2 	bl	80098e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109ae:	2b80      	cmp	r3, #128	; 0x80
 80109b0:	d10e      	bne.n	80109d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	681b      	ldr	r3, [r3, #0]
 80109b6:	68db      	ldr	r3, [r3, #12]
 80109b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109bc:	2b80      	cmp	r3, #128	; 0x80
 80109be:	d107      	bne.n	80109d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80109c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80109ca:	6878      	ldr	r0, [r7, #4]
 80109cc:	f000 fd70 	bl	80114b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	691b      	ldr	r3, [r3, #16]
 80109d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80109da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109de:	d10e      	bne.n	80109fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	68db      	ldr	r3, [r3, #12]
 80109e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109ea:	2b80      	cmp	r3, #128	; 0x80
 80109ec:	d107      	bne.n	80109fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	681b      	ldr	r3, [r3, #0]
 80109f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80109f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80109f8:	6878      	ldr	r0, [r7, #4]
 80109fa:	f000 fd63 	bl	80114c4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	691b      	ldr	r3, [r3, #16]
 8010a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a08:	2b40      	cmp	r3, #64	; 0x40
 8010a0a:	d10e      	bne.n	8010a2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	68db      	ldr	r3, [r3, #12]
 8010a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a16:	2b40      	cmp	r3, #64	; 0x40
 8010a18:	d107      	bne.n	8010a2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8010a22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8010a24:	6878      	ldr	r0, [r7, #4]
 8010a26:	f000 f949 	bl	8010cbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	691b      	ldr	r3, [r3, #16]
 8010a30:	f003 0320 	and.w	r3, r3, #32
 8010a34:	2b20      	cmp	r3, #32
 8010a36:	d10e      	bne.n	8010a56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	f003 0320 	and.w	r3, r3, #32
 8010a42:	2b20      	cmp	r3, #32
 8010a44:	d107      	bne.n	8010a56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	f06f 0220 	mvn.w	r2, #32
 8010a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fd23 	bl	801149c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8010a56:	bf00      	nop
 8010a58:	3708      	adds	r7, #8
 8010a5a:	46bd      	mov	sp, r7
 8010a5c:	bd80      	pop	{r7, pc}
	...

08010a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010a72:	2b01      	cmp	r3, #1
 8010a74:	d101      	bne.n	8010a7a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8010a76:	2302      	movs	r3, #2
 8010a78:	e0fd      	b.n	8010c76 <HAL_TIM_PWM_ConfigChannel+0x216>
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b14      	cmp	r3, #20
 8010a86:	f200 80f0 	bhi.w	8010c6a <HAL_TIM_PWM_ConfigChannel+0x20a>
 8010a8a:	a201      	add	r2, pc, #4	; (adr r2, 8010a90 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8010a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a90:	08010ae5 	.word	0x08010ae5
 8010a94:	08010c6b 	.word	0x08010c6b
 8010a98:	08010c6b 	.word	0x08010c6b
 8010a9c:	08010c6b 	.word	0x08010c6b
 8010aa0:	08010b25 	.word	0x08010b25
 8010aa4:	08010c6b 	.word	0x08010c6b
 8010aa8:	08010c6b 	.word	0x08010c6b
 8010aac:	08010c6b 	.word	0x08010c6b
 8010ab0:	08010b67 	.word	0x08010b67
 8010ab4:	08010c6b 	.word	0x08010c6b
 8010ab8:	08010c6b 	.word	0x08010c6b
 8010abc:	08010c6b 	.word	0x08010c6b
 8010ac0:	08010ba7 	.word	0x08010ba7
 8010ac4:	08010c6b 	.word	0x08010c6b
 8010ac8:	08010c6b 	.word	0x08010c6b
 8010acc:	08010c6b 	.word	0x08010c6b
 8010ad0:	08010be9 	.word	0x08010be9
 8010ad4:	08010c6b 	.word	0x08010c6b
 8010ad8:	08010c6b 	.word	0x08010c6b
 8010adc:	08010c6b 	.word	0x08010c6b
 8010ae0:	08010c29 	.word	0x08010c29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681b      	ldr	r3, [r3, #0]
 8010ae8:	68b9      	ldr	r1, [r7, #8]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 f954 	bl	8010d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	699a      	ldr	r2, [r3, #24]
 8010af6:	68fb      	ldr	r3, [r7, #12]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	f042 0208 	orr.w	r2, r2, #8
 8010afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	699a      	ldr	r2, [r3, #24]
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	f022 0204 	bic.w	r2, r2, #4
 8010b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	6999      	ldr	r1, [r3, #24]
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	691a      	ldr	r2, [r3, #16]
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	430a      	orrs	r2, r1
 8010b20:	619a      	str	r2, [r3, #24]
      break;
 8010b22:	e0a3      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	68b9      	ldr	r1, [r7, #8]
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f000 f9b0 	bl	8010e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	681b      	ldr	r3, [r3, #0]
 8010b34:	699a      	ldr	r2, [r3, #24]
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	681b      	ldr	r3, [r3, #0]
 8010b3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010b3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	699a      	ldr	r2, [r3, #24]
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010b4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6999      	ldr	r1, [r3, #24]
 8010b56:	68bb      	ldr	r3, [r7, #8]
 8010b58:	691b      	ldr	r3, [r3, #16]
 8010b5a:	021a      	lsls	r2, r3, #8
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	430a      	orrs	r2, r1
 8010b62:	619a      	str	r2, [r3, #24]
      break;
 8010b64:	e082      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	68b9      	ldr	r1, [r7, #8]
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f000 fa09 	bl	8010f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	69da      	ldr	r2, [r3, #28]
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	f042 0208 	orr.w	r2, r2, #8
 8010b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	69da      	ldr	r2, [r3, #28]
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	f022 0204 	bic.w	r2, r2, #4
 8010b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	69d9      	ldr	r1, [r3, #28]
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	691a      	ldr	r2, [r3, #16]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	430a      	orrs	r2, r1
 8010ba2:	61da      	str	r2, [r3, #28]
      break;
 8010ba4:	e062      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	681b      	ldr	r3, [r3, #0]
 8010baa:	68b9      	ldr	r1, [r7, #8]
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 fa61 	bl	8011074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	69da      	ldr	r2, [r3, #28]
 8010bb8:	68fb      	ldr	r3, [r7, #12]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010bc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8010bc2:	68fb      	ldr	r3, [r7, #12]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	69da      	ldr	r2, [r3, #28]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010bd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	69d9      	ldr	r1, [r3, #28]
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	691b      	ldr	r3, [r3, #16]
 8010bdc:	021a      	lsls	r2, r3, #8
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	430a      	orrs	r2, r1
 8010be4:	61da      	str	r2, [r3, #28]
      break;
 8010be6:	e041      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68b9      	ldr	r1, [r7, #8]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 fa9e 	bl	8011130 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f042 0208 	orr.w	r2, r2, #8
 8010c02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	f022 0204 	bic.w	r2, r2, #4
 8010c12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c1a:	68bb      	ldr	r3, [r7, #8]
 8010c1c:	691a      	ldr	r2, [r3, #16]
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	430a      	orrs	r2, r1
 8010c24:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010c26:	e021      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	68b9      	ldr	r1, [r7, #8]
 8010c2e:	4618      	mov	r0, r3
 8010c30:	f000 fad6 	bl	80111e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8010c42:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010c44:	68fb      	ldr	r3, [r7, #12]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8010c52:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010c5a:	68bb      	ldr	r3, [r7, #8]
 8010c5c:	691b      	ldr	r3, [r3, #16]
 8010c5e:	021a      	lsls	r2, r3, #8
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	430a      	orrs	r2, r1
 8010c66:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010c68:	e000      	b.n	8010c6c <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8010c6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010c74:	2300      	movs	r3, #0
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}
 8010c7e:	bf00      	nop

08010c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8010c88:	bf00      	nop
 8010c8a:	370c      	adds	r7, #12
 8010c8c:	46bd      	mov	sp, r7
 8010c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c92:	4770      	bx	lr

08010c94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b083      	sub	sp, #12
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8010c9c:	bf00      	nop
 8010c9e:	370c      	adds	r7, #12
 8010ca0:	46bd      	mov	sp, r7
 8010ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca6:	4770      	bx	lr

08010ca8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8010cb0:	bf00      	nop
 8010cb2:	370c      	adds	r7, #12
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cba:	4770      	bx	lr

08010cbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8010cc4:	bf00      	nop
 8010cc6:	370c      	adds	r7, #12
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cce:	4770      	bx	lr

08010cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010cd0:	b480      	push	{r7}
 8010cd2:	b085      	sub	sp, #20
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	4a2a      	ldr	r2, [pc, #168]	; (8010d8c <TIM_Base_SetConfig+0xbc>)
 8010ce4:	4293      	cmp	r3, r2
 8010ce6:	d003      	beq.n	8010cf0 <TIM_Base_SetConfig+0x20>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cee:	d108      	bne.n	8010d02 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	685b      	ldr	r3, [r3, #4]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	4313      	orrs	r3, r2
 8010d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	4a21      	ldr	r2, [pc, #132]	; (8010d8c <TIM_Base_SetConfig+0xbc>)
 8010d06:	4293      	cmp	r3, r2
 8010d08:	d00b      	beq.n	8010d22 <TIM_Base_SetConfig+0x52>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d10:	d007      	beq.n	8010d22 <TIM_Base_SetConfig+0x52>
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	4a1e      	ldr	r2, [pc, #120]	; (8010d90 <TIM_Base_SetConfig+0xc0>)
 8010d16:	4293      	cmp	r3, r2
 8010d18:	d003      	beq.n	8010d22 <TIM_Base_SetConfig+0x52>
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	4a1d      	ldr	r2, [pc, #116]	; (8010d94 <TIM_Base_SetConfig+0xc4>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d108      	bne.n	8010d34 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	68db      	ldr	r3, [r3, #12]
 8010d2e:	68fa      	ldr	r2, [r7, #12]
 8010d30:	4313      	orrs	r3, r2
 8010d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010d3a:	683b      	ldr	r3, [r7, #0]
 8010d3c:	695b      	ldr	r3, [r3, #20]
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	68fa      	ldr	r2, [r7, #12]
 8010d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	689a      	ldr	r2, [r3, #8]
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	4a0c      	ldr	r2, [pc, #48]	; (8010d8c <TIM_Base_SetConfig+0xbc>)
 8010d5c:	4293      	cmp	r3, r2
 8010d5e:	d007      	beq.n	8010d70 <TIM_Base_SetConfig+0xa0>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	4a0b      	ldr	r2, [pc, #44]	; (8010d90 <TIM_Base_SetConfig+0xc0>)
 8010d64:	4293      	cmp	r3, r2
 8010d66:	d003      	beq.n	8010d70 <TIM_Base_SetConfig+0xa0>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	4a0a      	ldr	r2, [pc, #40]	; (8010d94 <TIM_Base_SetConfig+0xc4>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d103      	bne.n	8010d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010d70:	683b      	ldr	r3, [r7, #0]
 8010d72:	691a      	ldr	r2, [r3, #16]
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	2201      	movs	r2, #1
 8010d7c:	615a      	str	r2, [r3, #20]
}
 8010d7e:	bf00      	nop
 8010d80:	3714      	adds	r7, #20
 8010d82:	46bd      	mov	sp, r7
 8010d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d88:	4770      	bx	lr
 8010d8a:	bf00      	nop
 8010d8c:	40012c00 	.word	0x40012c00
 8010d90:	40014000 	.word	0x40014000
 8010d94:	40014400 	.word	0x40014400

08010d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010d98:	b480      	push	{r7}
 8010d9a:	b087      	sub	sp, #28
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	6078      	str	r0, [r7, #4]
 8010da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6a1b      	ldr	r3, [r3, #32]
 8010da6:	f023 0201 	bic.w	r2, r3, #1
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6a1b      	ldr	r3, [r3, #32]
 8010db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	685b      	ldr	r3, [r3, #4]
 8010db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	699b      	ldr	r3, [r3, #24]
 8010dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f023 0303 	bic.w	r3, r3, #3
 8010dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	68fa      	ldr	r2, [r7, #12]
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010dde:	697b      	ldr	r3, [r7, #20]
 8010de0:	f023 0302 	bic.w	r3, r3, #2
 8010de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	697a      	ldr	r2, [r7, #20]
 8010dec:	4313      	orrs	r3, r2
 8010dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	4a24      	ldr	r2, [pc, #144]	; (8010e84 <TIM_OC1_SetConfig+0xec>)
 8010df4:	4293      	cmp	r3, r2
 8010df6:	d007      	beq.n	8010e08 <TIM_OC1_SetConfig+0x70>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4a23      	ldr	r2, [pc, #140]	; (8010e88 <TIM_OC1_SetConfig+0xf0>)
 8010dfc:	4293      	cmp	r3, r2
 8010dfe:	d003      	beq.n	8010e08 <TIM_OC1_SetConfig+0x70>
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	4a22      	ldr	r2, [pc, #136]	; (8010e8c <TIM_OC1_SetConfig+0xf4>)
 8010e04:	4293      	cmp	r3, r2
 8010e06:	d10c      	bne.n	8010e22 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010e08:	697b      	ldr	r3, [r7, #20]
 8010e0a:	f023 0308 	bic.w	r3, r3, #8
 8010e0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	68db      	ldr	r3, [r3, #12]
 8010e14:	697a      	ldr	r2, [r7, #20]
 8010e16:	4313      	orrs	r3, r2
 8010e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010e1a:	697b      	ldr	r3, [r7, #20]
 8010e1c:	f023 0304 	bic.w	r3, r3, #4
 8010e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	4a17      	ldr	r2, [pc, #92]	; (8010e84 <TIM_OC1_SetConfig+0xec>)
 8010e26:	4293      	cmp	r3, r2
 8010e28:	d007      	beq.n	8010e3a <TIM_OC1_SetConfig+0xa2>
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	4a16      	ldr	r2, [pc, #88]	; (8010e88 <TIM_OC1_SetConfig+0xf0>)
 8010e2e:	4293      	cmp	r3, r2
 8010e30:	d003      	beq.n	8010e3a <TIM_OC1_SetConfig+0xa2>
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	4a15      	ldr	r2, [pc, #84]	; (8010e8c <TIM_OC1_SetConfig+0xf4>)
 8010e36:	4293      	cmp	r3, r2
 8010e38:	d111      	bne.n	8010e5e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010e3a:	693b      	ldr	r3, [r7, #16]
 8010e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010e42:	693b      	ldr	r3, [r7, #16]
 8010e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010e4a:	683b      	ldr	r3, [r7, #0]
 8010e4c:	695b      	ldr	r3, [r3, #20]
 8010e4e:	693a      	ldr	r2, [r7, #16]
 8010e50:	4313      	orrs	r3, r2
 8010e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	699b      	ldr	r3, [r3, #24]
 8010e58:	693a      	ldr	r2, [r7, #16]
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	693a      	ldr	r2, [r7, #16]
 8010e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	68fa      	ldr	r2, [r7, #12]
 8010e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	685a      	ldr	r2, [r3, #4]
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	697a      	ldr	r2, [r7, #20]
 8010e76:	621a      	str	r2, [r3, #32]
}
 8010e78:	bf00      	nop
 8010e7a:	371c      	adds	r7, #28
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr
 8010e84:	40012c00 	.word	0x40012c00
 8010e88:	40014000 	.word	0x40014000
 8010e8c:	40014400 	.word	0x40014400

08010e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010e90:	b480      	push	{r7}
 8010e92:	b087      	sub	sp, #28
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
 8010e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	6a1b      	ldr	r3, [r3, #32]
 8010e9e:	f023 0210 	bic.w	r2, r3, #16
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6a1b      	ldr	r3, [r3, #32]
 8010eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	699b      	ldr	r3, [r3, #24]
 8010eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	021b      	lsls	r3, r3, #8
 8010ed2:	68fa      	ldr	r2, [r7, #12]
 8010ed4:	4313      	orrs	r3, r2
 8010ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	f023 0320 	bic.w	r3, r3, #32
 8010ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010ee0:	683b      	ldr	r3, [r7, #0]
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	011b      	lsls	r3, r3, #4
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	4a22      	ldr	r2, [pc, #136]	; (8010f78 <TIM_OC2_SetConfig+0xe8>)
 8010ef0:	4293      	cmp	r3, r2
 8010ef2:	d10d      	bne.n	8010f10 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010efa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	68db      	ldr	r3, [r3, #12]
 8010f00:	011b      	lsls	r3, r3, #4
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	4313      	orrs	r3, r2
 8010f06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010f0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	4a19      	ldr	r2, [pc, #100]	; (8010f78 <TIM_OC2_SetConfig+0xe8>)
 8010f14:	4293      	cmp	r3, r2
 8010f16:	d007      	beq.n	8010f28 <TIM_OC2_SetConfig+0x98>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	4a18      	ldr	r2, [pc, #96]	; (8010f7c <TIM_OC2_SetConfig+0xec>)
 8010f1c:	4293      	cmp	r3, r2
 8010f1e:	d003      	beq.n	8010f28 <TIM_OC2_SetConfig+0x98>
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	4a17      	ldr	r2, [pc, #92]	; (8010f80 <TIM_OC2_SetConfig+0xf0>)
 8010f24:	4293      	cmp	r3, r2
 8010f26:	d113      	bne.n	8010f50 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010f28:	693b      	ldr	r3, [r7, #16]
 8010f2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010f30:	693b      	ldr	r3, [r7, #16]
 8010f32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	695b      	ldr	r3, [r3, #20]
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	693a      	ldr	r2, [r7, #16]
 8010f40:	4313      	orrs	r3, r2
 8010f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	699b      	ldr	r3, [r3, #24]
 8010f48:	009b      	lsls	r3, r3, #2
 8010f4a:	693a      	ldr	r2, [r7, #16]
 8010f4c:	4313      	orrs	r3, r2
 8010f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	693a      	ldr	r2, [r7, #16]
 8010f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	68fa      	ldr	r2, [r7, #12]
 8010f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	685a      	ldr	r2, [r3, #4]
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	697a      	ldr	r2, [r7, #20]
 8010f68:	621a      	str	r2, [r3, #32]
}
 8010f6a:	bf00      	nop
 8010f6c:	371c      	adds	r7, #28
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	40012c00 	.word	0x40012c00
 8010f7c:	40014000 	.word	0x40014000
 8010f80:	40014400 	.word	0x40014400

08010f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010f84:	b480      	push	{r7}
 8010f86:	b087      	sub	sp, #28
 8010f88:	af00      	add	r7, sp, #0
 8010f8a:	6078      	str	r0, [r7, #4]
 8010f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	6a1b      	ldr	r3, [r3, #32]
 8010f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a1b      	ldr	r3, [r3, #32]
 8010f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	69db      	ldr	r3, [r3, #28]
 8010faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	f023 0303 	bic.w	r3, r3, #3
 8010fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	68fa      	ldr	r2, [r7, #12]
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010fca:	697b      	ldr	r3, [r7, #20]
 8010fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	689b      	ldr	r3, [r3, #8]
 8010fd6:	021b      	lsls	r3, r3, #8
 8010fd8:	697a      	ldr	r2, [r7, #20]
 8010fda:	4313      	orrs	r3, r2
 8010fdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	4a21      	ldr	r2, [pc, #132]	; (8011068 <TIM_OC3_SetConfig+0xe4>)
 8010fe2:	4293      	cmp	r3, r2
 8010fe4:	d10d      	bne.n	8011002 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	021b      	lsls	r3, r3, #8
 8010ff4:	697a      	ldr	r2, [r7, #20]
 8010ff6:	4313      	orrs	r3, r2
 8010ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	4a18      	ldr	r2, [pc, #96]	; (8011068 <TIM_OC3_SetConfig+0xe4>)
 8011006:	4293      	cmp	r3, r2
 8011008:	d007      	beq.n	801101a <TIM_OC3_SetConfig+0x96>
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	4a17      	ldr	r2, [pc, #92]	; (801106c <TIM_OC3_SetConfig+0xe8>)
 801100e:	4293      	cmp	r3, r2
 8011010:	d003      	beq.n	801101a <TIM_OC3_SetConfig+0x96>
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	4a16      	ldr	r2, [pc, #88]	; (8011070 <TIM_OC3_SetConfig+0xec>)
 8011016:	4293      	cmp	r3, r2
 8011018:	d113      	bne.n	8011042 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011020:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8011022:	693b      	ldr	r3, [r7, #16]
 8011024:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011028:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801102a:	683b      	ldr	r3, [r7, #0]
 801102c:	695b      	ldr	r3, [r3, #20]
 801102e:	011b      	lsls	r3, r3, #4
 8011030:	693a      	ldr	r2, [r7, #16]
 8011032:	4313      	orrs	r3, r2
 8011034:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	699b      	ldr	r3, [r3, #24]
 801103a:	011b      	lsls	r3, r3, #4
 801103c:	693a      	ldr	r2, [r7, #16]
 801103e:	4313      	orrs	r3, r2
 8011040:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	693a      	ldr	r2, [r7, #16]
 8011046:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	68fa      	ldr	r2, [r7, #12]
 801104c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801104e:	683b      	ldr	r3, [r7, #0]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	697a      	ldr	r2, [r7, #20]
 801105a:	621a      	str	r2, [r3, #32]
}
 801105c:	bf00      	nop
 801105e:	371c      	adds	r7, #28
 8011060:	46bd      	mov	sp, r7
 8011062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011066:	4770      	bx	lr
 8011068:	40012c00 	.word	0x40012c00
 801106c:	40014000 	.word	0x40014000
 8011070:	40014400 	.word	0x40014400

08011074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8011074:	b480      	push	{r7}
 8011076:	b087      	sub	sp, #28
 8011078:	af00      	add	r7, sp, #0
 801107a:	6078      	str	r0, [r7, #4]
 801107c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	6a1b      	ldr	r3, [r3, #32]
 8011082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6a1b      	ldr	r3, [r3, #32]
 801108e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	69db      	ldr	r3, [r3, #28]
 801109a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80110a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80110a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80110ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	021b      	lsls	r3, r3, #8
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	4313      	orrs	r3, r2
 80110ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80110c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80110c4:	683b      	ldr	r3, [r7, #0]
 80110c6:	689b      	ldr	r3, [r3, #8]
 80110c8:	031b      	lsls	r3, r3, #12
 80110ca:	693a      	ldr	r2, [r7, #16]
 80110cc:	4313      	orrs	r3, r2
 80110ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	4a14      	ldr	r2, [pc, #80]	; (8011124 <TIM_OC4_SetConfig+0xb0>)
 80110d4:	4293      	cmp	r3, r2
 80110d6:	d007      	beq.n	80110e8 <TIM_OC4_SetConfig+0x74>
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	4a13      	ldr	r2, [pc, #76]	; (8011128 <TIM_OC4_SetConfig+0xb4>)
 80110dc:	4293      	cmp	r3, r2
 80110de:	d003      	beq.n	80110e8 <TIM_OC4_SetConfig+0x74>
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	4a12      	ldr	r2, [pc, #72]	; (801112c <TIM_OC4_SetConfig+0xb8>)
 80110e4:	4293      	cmp	r3, r2
 80110e6:	d109      	bne.n	80110fc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80110ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	695b      	ldr	r3, [r3, #20]
 80110f4:	019b      	lsls	r3, r3, #6
 80110f6:	697a      	ldr	r2, [r7, #20]
 80110f8:	4313      	orrs	r3, r2
 80110fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	697a      	ldr	r2, [r7, #20]
 8011100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	68fa      	ldr	r2, [r7, #12]
 8011106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	685a      	ldr	r2, [r3, #4]
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	693a      	ldr	r2, [r7, #16]
 8011114:	621a      	str	r2, [r3, #32]
}
 8011116:	bf00      	nop
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr
 8011122:	bf00      	nop
 8011124:	40012c00 	.word	0x40012c00
 8011128:	40014000 	.word	0x40014000
 801112c:	40014400 	.word	0x40014400

08011130 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8011130:	b480      	push	{r7}
 8011132:	b087      	sub	sp, #28
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6a1b      	ldr	r3, [r3, #32]
 801113e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801115e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	68fa      	ldr	r2, [r7, #12]
 801116a:	4313      	orrs	r3, r2
 801116c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801116e:	693b      	ldr	r3, [r7, #16]
 8011170:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8011174:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	689b      	ldr	r3, [r3, #8]
 801117a:	041b      	lsls	r3, r3, #16
 801117c:	693a      	ldr	r2, [r7, #16]
 801117e:	4313      	orrs	r3, r2
 8011180:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	4a13      	ldr	r2, [pc, #76]	; (80111d4 <TIM_OC5_SetConfig+0xa4>)
 8011186:	4293      	cmp	r3, r2
 8011188:	d007      	beq.n	801119a <TIM_OC5_SetConfig+0x6a>
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	4a12      	ldr	r2, [pc, #72]	; (80111d8 <TIM_OC5_SetConfig+0xa8>)
 801118e:	4293      	cmp	r3, r2
 8011190:	d003      	beq.n	801119a <TIM_OC5_SetConfig+0x6a>
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	4a11      	ldr	r2, [pc, #68]	; (80111dc <TIM_OC5_SetConfig+0xac>)
 8011196:	4293      	cmp	r3, r2
 8011198:	d109      	bne.n	80111ae <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801119a:	697b      	ldr	r3, [r7, #20]
 801119c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80111a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	695b      	ldr	r3, [r3, #20]
 80111a6:	021b      	lsls	r3, r3, #8
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	4313      	orrs	r3, r2
 80111ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	697a      	ldr	r2, [r7, #20]
 80111b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	68fa      	ldr	r2, [r7, #12]
 80111b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	693a      	ldr	r2, [r7, #16]
 80111c6:	621a      	str	r2, [r3, #32]
}
 80111c8:	bf00      	nop
 80111ca:	371c      	adds	r7, #28
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr
 80111d4:	40012c00 	.word	0x40012c00
 80111d8:	40014000 	.word	0x40014000
 80111dc:	40014400 	.word	0x40014400

080111e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80111e0:	b480      	push	{r7}
 80111e2:	b087      	sub	sp, #28
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	6a1b      	ldr	r3, [r3, #32]
 80111ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	6a1b      	ldr	r3, [r3, #32]
 80111fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	685b      	ldr	r3, [r3, #4]
 8011200:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801120e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	021b      	lsls	r3, r3, #8
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	4313      	orrs	r3, r2
 801121e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8011220:	693b      	ldr	r3, [r7, #16]
 8011222:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011226:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011228:	683b      	ldr	r3, [r7, #0]
 801122a:	689b      	ldr	r3, [r3, #8]
 801122c:	051b      	lsls	r3, r3, #20
 801122e:	693a      	ldr	r2, [r7, #16]
 8011230:	4313      	orrs	r3, r2
 8011232:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	4a14      	ldr	r2, [pc, #80]	; (8011288 <TIM_OC6_SetConfig+0xa8>)
 8011238:	4293      	cmp	r3, r2
 801123a:	d007      	beq.n	801124c <TIM_OC6_SetConfig+0x6c>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4a13      	ldr	r2, [pc, #76]	; (801128c <TIM_OC6_SetConfig+0xac>)
 8011240:	4293      	cmp	r3, r2
 8011242:	d003      	beq.n	801124c <TIM_OC6_SetConfig+0x6c>
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	4a12      	ldr	r2, [pc, #72]	; (8011290 <TIM_OC6_SetConfig+0xb0>)
 8011248:	4293      	cmp	r3, r2
 801124a:	d109      	bne.n	8011260 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801124c:	697b      	ldr	r3, [r7, #20]
 801124e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011252:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8011254:	683b      	ldr	r3, [r7, #0]
 8011256:	695b      	ldr	r3, [r3, #20]
 8011258:	029b      	lsls	r3, r3, #10
 801125a:	697a      	ldr	r2, [r7, #20]
 801125c:	4313      	orrs	r3, r2
 801125e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	697a      	ldr	r2, [r7, #20]
 8011264:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801126c:	683b      	ldr	r3, [r7, #0]
 801126e:	685a      	ldr	r2, [r3, #4]
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	693a      	ldr	r2, [r7, #16]
 8011278:	621a      	str	r2, [r3, #32]
}
 801127a:	bf00      	nop
 801127c:	371c      	adds	r7, #28
 801127e:	46bd      	mov	sp, r7
 8011280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011284:	4770      	bx	lr
 8011286:	bf00      	nop
 8011288:	40012c00 	.word	0x40012c00
 801128c:	40014000 	.word	0x40014000
 8011290:	40014400 	.word	0x40014400

08011294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8011294:	b480      	push	{r7}
 8011296:	b087      	sub	sp, #28
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80112a0:	68bb      	ldr	r3, [r7, #8]
 80112a2:	f003 031f 	and.w	r3, r3, #31
 80112a6:	2201      	movs	r2, #1
 80112a8:	fa02 f303 	lsl.w	r3, r2, r3
 80112ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80112ae:	68fb      	ldr	r3, [r7, #12]
 80112b0:	6a1a      	ldr	r2, [r3, #32]
 80112b2:	697b      	ldr	r3, [r7, #20]
 80112b4:	43db      	mvns	r3, r3
 80112b6:	401a      	ands	r2, r3
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6a1a      	ldr	r2, [r3, #32]
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	f003 031f 	and.w	r3, r3, #31
 80112c6:	6879      	ldr	r1, [r7, #4]
 80112c8:	fa01 f303 	lsl.w	r3, r1, r3
 80112cc:	431a      	orrs	r2, r3
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	621a      	str	r2, [r3, #32]
}
 80112d2:	bf00      	nop
 80112d4:	371c      	adds	r7, #28
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
	...

080112e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80112e0:	b480      	push	{r7}
 80112e2:	b085      	sub	sp, #20
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
 80112e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d101      	bne.n	80112f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80112f4:	2302      	movs	r3, #2
 80112f6:	e04f      	b.n	8011398 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2201      	movs	r2, #1
 80112fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	2202      	movs	r2, #2
 8011304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	685b      	ldr	r3, [r3, #4]
 801130e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	689b      	ldr	r3, [r3, #8]
 8011316:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	4a21      	ldr	r2, [pc, #132]	; (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 801131e:	4293      	cmp	r3, r2
 8011320:	d108      	bne.n	8011334 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011328:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801132a:	683b      	ldr	r3, [r7, #0]
 801132c:	685b      	ldr	r3, [r3, #4]
 801132e:	68fa      	ldr	r2, [r7, #12]
 8011330:	4313      	orrs	r3, r2
 8011332:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801133a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	68fa      	ldr	r2, [r7, #12]
 8011342:	4313      	orrs	r3, r2
 8011344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	68fa      	ldr	r2, [r7, #12]
 801134c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	4a14      	ldr	r2, [pc, #80]	; (80113a4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8011354:	4293      	cmp	r3, r2
 8011356:	d009      	beq.n	801136c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011360:	d004      	beq.n	801136c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	4a10      	ldr	r2, [pc, #64]	; (80113a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011368:	4293      	cmp	r3, r2
 801136a:	d10c      	bne.n	8011386 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011374:	683b      	ldr	r3, [r7, #0]
 8011376:	689b      	ldr	r3, [r3, #8]
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	4313      	orrs	r3, r2
 801137c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	68ba      	ldr	r2, [r7, #8]
 8011384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2201      	movs	r2, #1
 801138a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011396:	2300      	movs	r3, #0
}
 8011398:	4618      	mov	r0, r3
 801139a:	3714      	adds	r7, #20
 801139c:	46bd      	mov	sp, r7
 801139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113a2:	4770      	bx	lr
 80113a4:	40012c00 	.word	0x40012c00
 80113a8:	40014000 	.word	0x40014000

080113ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b085      	sub	sp, #20
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
 80113b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80113b6:	2300      	movs	r3, #0
 80113b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80113c0:	2b01      	cmp	r3, #1
 80113c2:	d101      	bne.n	80113c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80113c4:	2302      	movs	r3, #2
 80113c6:	e060      	b.n	801148a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2201      	movs	r2, #1
 80113cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	68db      	ldr	r3, [r3, #12]
 80113da:	4313      	orrs	r3, r2
 80113dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80113e4:	683b      	ldr	r3, [r7, #0]
 80113e6:	689b      	ldr	r3, [r3, #8]
 80113e8:	4313      	orrs	r3, r2
 80113ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	685b      	ldr	r3, [r3, #4]
 80113f6:	4313      	orrs	r3, r2
 80113f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	4313      	orrs	r3, r2
 8011406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	691b      	ldr	r3, [r3, #16]
 8011412:	4313      	orrs	r3, r2
 8011414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801141c:	683b      	ldr	r3, [r7, #0]
 801141e:	695b      	ldr	r3, [r3, #20]
 8011420:	4313      	orrs	r3, r2
 8011422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801142a:	683b      	ldr	r3, [r7, #0]
 801142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142e:	4313      	orrs	r3, r2
 8011430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	699b      	ldr	r3, [r3, #24]
 801143c:	041b      	lsls	r3, r3, #16
 801143e:	4313      	orrs	r3, r2
 8011440:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	4a14      	ldr	r2, [pc, #80]	; (8011498 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8011448:	4293      	cmp	r3, r2
 801144a:	d115      	bne.n	8011478 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011452:	683b      	ldr	r3, [r7, #0]
 8011454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011456:	051b      	lsls	r3, r3, #20
 8011458:	4313      	orrs	r3, r2
 801145a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	69db      	ldr	r3, [r3, #28]
 8011466:	4313      	orrs	r3, r2
 8011468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011470:	683b      	ldr	r3, [r7, #0]
 8011472:	6a1b      	ldr	r3, [r3, #32]
 8011474:	4313      	orrs	r3, r2
 8011476:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	68fa      	ldr	r2, [r7, #12]
 801147e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011488:	2300      	movs	r3, #0
}
 801148a:	4618      	mov	r0, r3
 801148c:	3714      	adds	r7, #20
 801148e:	46bd      	mov	sp, r7
 8011490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011494:	4770      	bx	lr
 8011496:	bf00      	nop
 8011498:	40012c00 	.word	0x40012c00

0801149c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80114b8:	bf00      	nop
 80114ba:	370c      	adds	r7, #12
 80114bc:	46bd      	mov	sp, r7
 80114be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c2:	4770      	bx	lr

080114c4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80114c4:	b480      	push	{r7}
 80114c6:	b083      	sub	sp, #12
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80114cc:	bf00      	nop
 80114ce:	370c      	adds	r7, #12
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b082      	sub	sp, #8
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d101      	bne.n	80114ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80114e6:	2301      	movs	r3, #1
 80114e8:	e040      	b.n	801156c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d106      	bne.n	8011500 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2200      	movs	r2, #0
 80114f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f7f8 fdc0 	bl	800a080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	2224      	movs	r2, #36	; 0x24
 8011504:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	f022 0201 	bic.w	r2, r2, #1
 8011514:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fb8c 	bl	8011c34 <UART_SetConfig>
 801151c:	4603      	mov	r3, r0
 801151e:	2b01      	cmp	r3, #1
 8011520:	d101      	bne.n	8011526 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011522:	2301      	movs	r3, #1
 8011524:	e022      	b.n	801156c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152a:	2b00      	cmp	r3, #0
 801152c:	d002      	beq.n	8011534 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f000 fdb4 	bl	801209c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	685a      	ldr	r2, [r3, #4]
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	689a      	ldr	r2, [r3, #8]
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	681a      	ldr	r2, [r3, #0]
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f042 0201 	orr.w	r2, r2, #1
 8011562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f000 fe3b 	bl	80121e0 <UART_CheckIdleState>
 801156a:	4603      	mov	r3, r0
}
 801156c:	4618      	mov	r0, r3
 801156e:	3708      	adds	r7, #8
 8011570:	46bd      	mov	sp, r7
 8011572:	bd80      	pop	{r7, pc}

08011574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b08a      	sub	sp, #40	; 0x28
 8011578:	af02      	add	r7, sp, #8
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	603b      	str	r3, [r7, #0]
 8011580:	4613      	mov	r3, r2
 8011582:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011588:	2b20      	cmp	r3, #32
 801158a:	f040 8082 	bne.w	8011692 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 801158e:	68bb      	ldr	r3, [r7, #8]
 8011590:	2b00      	cmp	r3, #0
 8011592:	d002      	beq.n	801159a <HAL_UART_Transmit+0x26>
 8011594:	88fb      	ldrh	r3, [r7, #6]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d101      	bne.n	801159e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801159a:	2301      	movs	r3, #1
 801159c:	e07a      	b.n	8011694 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80115a4:	2b01      	cmp	r3, #1
 80115a6:	d101      	bne.n	80115ac <HAL_UART_Transmit+0x38>
 80115a8:	2302      	movs	r3, #2
 80115aa:	e073      	b.n	8011694 <HAL_UART_Transmit+0x120>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	2201      	movs	r2, #1
 80115b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	2200      	movs	r2, #0
 80115b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	2221      	movs	r2, #33	; 0x21
 80115c0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80115c2:	f7f8 ff49 	bl	800a458 <HAL_GetTick>
 80115c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	88fa      	ldrh	r2, [r7, #6]
 80115cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	88fa      	ldrh	r2, [r7, #6]
 80115d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	689b      	ldr	r3, [r3, #8]
 80115dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115e0:	d108      	bne.n	80115f4 <HAL_UART_Transmit+0x80>
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	691b      	ldr	r3, [r3, #16]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d104      	bne.n	80115f4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80115ea:	2300      	movs	r3, #0
 80115ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	61bb      	str	r3, [r7, #24]
 80115f2:	e003      	b.n	80115fc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80115f4:	68bb      	ldr	r3, [r7, #8]
 80115f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80115f8:	2300      	movs	r3, #0
 80115fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	2200      	movs	r2, #0
 8011600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8011604:	e02d      	b.n	8011662 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	9300      	str	r3, [sp, #0]
 801160a:	697b      	ldr	r3, [r7, #20]
 801160c:	2200      	movs	r2, #0
 801160e:	2180      	movs	r1, #128	; 0x80
 8011610:	68f8      	ldr	r0, [r7, #12]
 8011612:	f000 fe2e 	bl	8012272 <UART_WaitOnFlagUntilTimeout>
 8011616:	4603      	mov	r3, r0
 8011618:	2b00      	cmp	r3, #0
 801161a:	d001      	beq.n	8011620 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 801161c:	2303      	movs	r3, #3
 801161e:	e039      	b.n	8011694 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d10b      	bne.n	801163e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011626:	69bb      	ldr	r3, [r7, #24]
 8011628:	881a      	ldrh	r2, [r3, #0]
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011632:	b292      	uxth	r2, r2
 8011634:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011636:	69bb      	ldr	r3, [r7, #24]
 8011638:	3302      	adds	r3, #2
 801163a:	61bb      	str	r3, [r7, #24]
 801163c:	e008      	b.n	8011650 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	781a      	ldrb	r2, [r3, #0]
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	b292      	uxth	r2, r2
 8011648:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801164a:	69fb      	ldr	r3, [r7, #28]
 801164c:	3301      	adds	r3, #1
 801164e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011656:	b29b      	uxth	r3, r3
 8011658:	3b01      	subs	r3, #1
 801165a:	b29a      	uxth	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011668:	b29b      	uxth	r3, r3
 801166a:	2b00      	cmp	r3, #0
 801166c:	d1cb      	bne.n	8011606 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801166e:	683b      	ldr	r3, [r7, #0]
 8011670:	9300      	str	r3, [sp, #0]
 8011672:	697b      	ldr	r3, [r7, #20]
 8011674:	2200      	movs	r2, #0
 8011676:	2140      	movs	r1, #64	; 0x40
 8011678:	68f8      	ldr	r0, [r7, #12]
 801167a:	f000 fdfa 	bl	8012272 <UART_WaitOnFlagUntilTimeout>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	d001      	beq.n	8011688 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8011684:	2303      	movs	r3, #3
 8011686:	e005      	b.n	8011694 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	2220      	movs	r2, #32
 801168c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 801168e:	2300      	movs	r3, #0
 8011690:	e000      	b.n	8011694 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8011692:	2302      	movs	r3, #2
  }
}
 8011694:	4618      	mov	r0, r3
 8011696:	3720      	adds	r7, #32
 8011698:	46bd      	mov	sp, r7
 801169a:	bd80      	pop	{r7, pc}

0801169c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801169c:	b480      	push	{r7}
 801169e:	b085      	sub	sp, #20
 80116a0:	af00      	add	r7, sp, #0
 80116a2:	60f8      	str	r0, [r7, #12]
 80116a4:	60b9      	str	r1, [r7, #8]
 80116a6:	4613      	mov	r3, r2
 80116a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116ae:	2b20      	cmp	r3, #32
 80116b0:	d145      	bne.n	801173e <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d002      	beq.n	80116be <HAL_UART_Transmit_IT+0x22>
 80116b8:	88fb      	ldrh	r3, [r7, #6]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d101      	bne.n	80116c2 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80116be:	2301      	movs	r3, #1
 80116c0:	e03e      	b.n	8011740 <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80116c8:	2b01      	cmp	r3, #1
 80116ca:	d101      	bne.n	80116d0 <HAL_UART_Transmit_IT+0x34>
 80116cc:	2302      	movs	r3, #2
 80116ce:	e037      	b.n	8011740 <HAL_UART_Transmit_IT+0xa4>
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	2201      	movs	r2, #1
 80116d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	68ba      	ldr	r2, [r7, #8]
 80116dc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	88fa      	ldrh	r2, [r7, #6]
 80116e2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	88fa      	ldrh	r2, [r7, #6]
 80116ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	2200      	movs	r2, #0
 80116f2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80116f4:	68fb      	ldr	r3, [r7, #12]
 80116f6:	2200      	movs	r2, #0
 80116f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2221      	movs	r2, #33	; 0x21
 8011700:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801170a:	d107      	bne.n	801171c <HAL_UART_Transmit_IT+0x80>
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	691b      	ldr	r3, [r3, #16]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d103      	bne.n	801171c <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	4a0d      	ldr	r2, [pc, #52]	; (801174c <HAL_UART_Transmit_IT+0xb0>)
 8011718:	669a      	str	r2, [r3, #104]	; 0x68
 801171a:	e002      	b.n	8011722 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	4a0c      	ldr	r2, [pc, #48]	; (8011750 <HAL_UART_Transmit_IT+0xb4>)
 8011720:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2200      	movs	r2, #0
 8011726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	681a      	ldr	r2, [r3, #0]
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011738:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 801173a:	2300      	movs	r3, #0
 801173c:	e000      	b.n	8011740 <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 801173e:	2302      	movs	r3, #2
  }
}
 8011740:	4618      	mov	r0, r3
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr
 801174c:	080126b9 	.word	0x080126b9
 8011750:	08012645 	.word	0x08012645

08011754 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b084      	sub	sp, #16
 8011758:	af00      	add	r7, sp, #0
 801175a:	60f8      	str	r0, [r7, #12]
 801175c:	60b9      	str	r1, [r7, #8]
 801175e:	4613      	mov	r3, r2
 8011760:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011766:	2b20      	cmp	r3, #32
 8011768:	d131      	bne.n	80117ce <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 801176a:	68bb      	ldr	r3, [r7, #8]
 801176c:	2b00      	cmp	r3, #0
 801176e:	d002      	beq.n	8011776 <HAL_UART_Receive_DMA+0x22>
 8011770:	88fb      	ldrh	r3, [r7, #6]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8011776:	2301      	movs	r3, #1
 8011778:	e02a      	b.n	80117d0 <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011780:	2b01      	cmp	r3, #1
 8011782:	d101      	bne.n	8011788 <HAL_UART_Receive_DMA+0x34>
 8011784:	2302      	movs	r3, #2
 8011786:	e023      	b.n	80117d0 <HAL_UART_Receive_DMA+0x7c>
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	2201      	movs	r2, #1
 801178c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	2200      	movs	r2, #0
 8011794:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	4a0f      	ldr	r2, [pc, #60]	; (80117d8 <HAL_UART_Receive_DMA+0x84>)
 801179c:	4293      	cmp	r3, r2
 801179e:	d00e      	beq.n	80117be <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	685b      	ldr	r3, [r3, #4]
 80117a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80117bc:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80117be:	88fb      	ldrh	r3, [r7, #6]
 80117c0:	461a      	mov	r2, r3
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 fdd1 	bl	801236c <UART_Start_Receive_DMA>
 80117ca:	4603      	mov	r3, r0
 80117cc:	e000      	b.n	80117d0 <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 80117ce:	2302      	movs	r3, #2
  }
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	40008000 	.word	0x40008000

080117dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b088      	sub	sp, #32
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	69db      	ldr	r3, [r3, #28]
 80117ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	681b      	ldr	r3, [r3, #0]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	689b      	ldr	r3, [r3, #8]
 80117fa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80117fc:	69fa      	ldr	r2, [r7, #28]
 80117fe:	f640 030f 	movw	r3, #2063	; 0x80f
 8011802:	4013      	ands	r3, r2
 8011804:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d113      	bne.n	8011834 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801180c:	69fb      	ldr	r3, [r7, #28]
 801180e:	f003 0320 	and.w	r3, r3, #32
 8011812:	2b00      	cmp	r3, #0
 8011814:	d00e      	beq.n	8011834 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	f003 0320 	and.w	r3, r3, #32
 801181c:	2b00      	cmp	r3, #0
 801181e:	d009      	beq.n	8011834 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011824:	2b00      	cmp	r3, #0
 8011826:	f000 81ce 	beq.w	8011bc6 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	4798      	blx	r3
      }
      return;
 8011832:	e1c8      	b.n	8011bc6 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	2b00      	cmp	r3, #0
 8011838:	f000 80e3 	beq.w	8011a02 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	f003 0301 	and.w	r3, r3, #1
 8011842:	2b00      	cmp	r3, #0
 8011844:	d105      	bne.n	8011852 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011846:	69ba      	ldr	r2, [r7, #24]
 8011848:	4ba6      	ldr	r3, [pc, #664]	; (8011ae4 <HAL_UART_IRQHandler+0x308>)
 801184a:	4013      	ands	r3, r2
 801184c:	2b00      	cmp	r3, #0
 801184e:	f000 80d8 	beq.w	8011a02 <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011852:	69fb      	ldr	r3, [r7, #28]
 8011854:	f003 0301 	and.w	r3, r3, #1
 8011858:	2b00      	cmp	r3, #0
 801185a:	d010      	beq.n	801187e <HAL_UART_IRQHandler+0xa2>
 801185c:	69bb      	ldr	r3, [r7, #24]
 801185e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011862:	2b00      	cmp	r3, #0
 8011864:	d00b      	beq.n	801187e <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2201      	movs	r2, #1
 801186c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011874:	f043 0201 	orr.w	r2, r3, #1
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801187e:	69fb      	ldr	r3, [r7, #28]
 8011880:	f003 0302 	and.w	r3, r3, #2
 8011884:	2b00      	cmp	r3, #0
 8011886:	d010      	beq.n	80118aa <HAL_UART_IRQHandler+0xce>
 8011888:	697b      	ldr	r3, [r7, #20]
 801188a:	f003 0301 	and.w	r3, r3, #1
 801188e:	2b00      	cmp	r3, #0
 8011890:	d00b      	beq.n	80118aa <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	2202      	movs	r2, #2
 8011898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118a0:	f043 0204 	orr.w	r2, r3, #4
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	f003 0304 	and.w	r3, r3, #4
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d010      	beq.n	80118d6 <HAL_UART_IRQHandler+0xfa>
 80118b4:	697b      	ldr	r3, [r7, #20]
 80118b6:	f003 0301 	and.w	r3, r3, #1
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2204      	movs	r2, #4
 80118c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118cc:	f043 0202 	orr.w	r2, r3, #2
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	f003 0308 	and.w	r3, r3, #8
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d015      	beq.n	801190c <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	f003 0320 	and.w	r3, r3, #32
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d104      	bne.n	80118f4 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80118ea:	697b      	ldr	r3, [r7, #20]
 80118ec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00b      	beq.n	801190c <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	2208      	movs	r2, #8
 80118fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011902:	f043 0208 	orr.w	r2, r3, #8
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801190c:	69fb      	ldr	r3, [r7, #28]
 801190e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011912:	2b00      	cmp	r3, #0
 8011914:	d011      	beq.n	801193a <HAL_UART_IRQHandler+0x15e>
 8011916:	69bb      	ldr	r3, [r7, #24]
 8011918:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801191c:	2b00      	cmp	r3, #0
 801191e:	d00c      	beq.n	801193a <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	681b      	ldr	r3, [r3, #0]
 8011924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011930:	f043 0220 	orr.w	r2, r3, #32
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 8142 	beq.w	8011bca <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8011946:	69fb      	ldr	r3, [r7, #28]
 8011948:	f003 0320 	and.w	r3, r3, #32
 801194c:	2b00      	cmp	r3, #0
 801194e:	d00c      	beq.n	801196a <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011950:	69bb      	ldr	r3, [r7, #24]
 8011952:	f003 0320 	and.w	r3, r3, #32
 8011956:	2b00      	cmp	r3, #0
 8011958:	d007      	beq.n	801196a <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801195e:	2b00      	cmp	r3, #0
 8011960:	d003      	beq.n	801196a <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011970:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801197c:	2b40      	cmp	r3, #64	; 0x40
 801197e:	d004      	beq.n	801198a <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011986:	2b00      	cmp	r3, #0
 8011988:	d031      	beq.n	80119ee <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f000 fd6f 	bl	801246e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	689b      	ldr	r3, [r3, #8]
 8011996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801199a:	2b40      	cmp	r3, #64	; 0x40
 801199c:	d123      	bne.n	80119e6 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	689a      	ldr	r2, [r3, #8]
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80119ac:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d013      	beq.n	80119de <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119ba:	4a4b      	ldr	r2, [pc, #300]	; (8011ae8 <HAL_UART_IRQHandler+0x30c>)
 80119bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119c2:	4618      	mov	r0, r3
 80119c4:	f7fa f9ce 	bl	800bd64 <HAL_DMA_Abort_IT>
 80119c8:	4603      	mov	r3, r0
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d017      	beq.n	80119fe <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80119d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80119d8:	4610      	mov	r0, r2
 80119da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119dc:	e00f      	b.n	80119fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80119de:	6878      	ldr	r0, [r7, #4]
 80119e0:	f000 f912 	bl	8011c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119e4:	e00b      	b.n	80119fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f000 f90e 	bl	8011c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119ec:	e007      	b.n	80119fe <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80119ee:	6878      	ldr	r0, [r7, #4]
 80119f0:	f000 f90a 	bl	8011c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	2200      	movs	r2, #0
 80119f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80119fc:	e0e5      	b.n	8011bca <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80119fe:	bf00      	nop
    return;
 8011a00:	e0e3      	b.n	8011bca <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011a06:	2b01      	cmp	r3, #1
 8011a08:	f040 80a9 	bne.w	8011b5e <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	f003 0310 	and.w	r3, r3, #16
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	f000 80a3 	beq.w	8011b5e <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8011a18:	69bb      	ldr	r3, [r7, #24]
 8011a1a:	f003 0310 	and.w	r3, r3, #16
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f000 809d 	beq.w	8011b5e <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681b      	ldr	r3, [r3, #0]
 8011a28:	2210      	movs	r2, #16
 8011a2a:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	689b      	ldr	r3, [r3, #8]
 8011a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a36:	2b40      	cmp	r3, #64	; 0x40
 8011a38:	d158      	bne.n	8011aec <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	685b      	ldr	r3, [r3, #4]
 8011a42:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8011a44:	893b      	ldrh	r3, [r7, #8]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	f000 80c1 	beq.w	8011bce <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011a52:	893a      	ldrh	r2, [r7, #8]
 8011a54:	429a      	cmp	r2, r3
 8011a56:	f080 80ba 	bcs.w	8011bce <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	893a      	ldrh	r2, [r7, #8]
 8011a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	f003 0320 	and.w	r3, r3, #32
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d12a      	bne.n	8011ac8 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	681a      	ldr	r2, [r3, #0]
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	681b      	ldr	r3, [r3, #0]
 8011a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011a80:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	689a      	ldr	r2, [r3, #8]
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	f022 0201 	bic.w	r2, r2, #1
 8011a90:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	689a      	ldr	r2, [r3, #8]
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011aa0:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2220      	movs	r2, #32
 8011aa6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2200      	movs	r2, #0
 8011aac:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	681a      	ldr	r2, [r3, #0]
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	f022 0210 	bic.w	r2, r2, #16
 8011abc:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7fa f910 	bl	800bce8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	1ad3      	subs	r3, r2, r3
 8011ad8:	b29b      	uxth	r3, r3
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f000 f89d 	bl	8011c1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8011ae2:	e074      	b.n	8011bce <HAL_UART_IRQHandler+0x3f2>
 8011ae4:	04000120 	.word	0x04000120
 8011ae8:	08012619 	.word	0x08012619
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011af8:	b29b      	uxth	r3, r3
 8011afa:	1ad3      	subs	r3, r2, r3
 8011afc:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011b04:	b29b      	uxth	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d063      	beq.n	8011bd2 <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8011b0a:	897b      	ldrh	r3, [r7, #10]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d060      	beq.n	8011bd2 <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	681a      	ldr	r2, [r3, #0]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8011b1e:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	689a      	ldr	r2, [r3, #8]
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	f022 0201 	bic.w	r2, r2, #1
 8011b2e:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2220      	movs	r2, #32
 8011b34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	2200      	movs	r2, #0
 8011b3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	2200      	movs	r2, #0
 8011b40:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f022 0210 	bic.w	r2, r2, #16
 8011b50:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011b52:	897b      	ldrh	r3, [r7, #10]
 8011b54:	4619      	mov	r1, r3
 8011b56:	6878      	ldr	r0, [r7, #4]
 8011b58:	f000 f860 	bl	8011c1c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8011b5c:	e039      	b.n	8011bd2 <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00d      	beq.n	8011b84 <HAL_UART_IRQHandler+0x3a8>
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d008      	beq.n	8011b84 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011b7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011b7c:	6878      	ldr	r0, [r7, #4]
 8011b7e:	f000 fdf2 	bl	8012766 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011b82:	e029      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d00d      	beq.n	8011baa <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d008      	beq.n	8011baa <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d01a      	beq.n	8011bd6 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	4798      	blx	r3
    }
    return;
 8011ba8:	e015      	b.n	8011bd6 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d011      	beq.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
 8011bb4:	69bb      	ldr	r3, [r7, #24]
 8011bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d00c      	beq.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fdb8 	bl	8012734 <UART_EndTransmit_IT>
    return;
 8011bc4:	e008      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8011bc6:	bf00      	nop
 8011bc8:	e006      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8011bca:	bf00      	nop
 8011bcc:	e004      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8011bce:	bf00      	nop
 8011bd0:	e002      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
      return;
 8011bd2:	bf00      	nop
 8011bd4:	e000      	b.n	8011bd8 <HAL_UART_IRQHandler+0x3fc>
    return;
 8011bd6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8011bd8:	3720      	adds	r7, #32
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}
 8011bde:	bf00      	nop

08011be0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011be0:	b480      	push	{r7}
 8011be2:	b083      	sub	sp, #12
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011be8:	bf00      	nop
 8011bea:	370c      	adds	r7, #12
 8011bec:	46bd      	mov	sp, r7
 8011bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf2:	4770      	bx	lr

08011bf4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8011bf4:	b480      	push	{r7}
 8011bf6:	b083      	sub	sp, #12
 8011bf8:	af00      	add	r7, sp, #0
 8011bfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8011bfc:	bf00      	nop
 8011bfe:	370c      	adds	r7, #12
 8011c00:	46bd      	mov	sp, r7
 8011c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c06:	4770      	bx	lr

08011c08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011c08:	b480      	push	{r7}
 8011c0a:	b083      	sub	sp, #12
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011c10:	bf00      	nop
 8011c12:	370c      	adds	r7, #12
 8011c14:	46bd      	mov	sp, r7
 8011c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c1a:	4770      	bx	lr

08011c1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011c1c:	b480      	push	{r7}
 8011c1e:	b083      	sub	sp, #12
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
 8011c24:	460b      	mov	r3, r1
 8011c26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011c28:	bf00      	nop
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011c34:	b5b0      	push	{r4, r5, r7, lr}
 8011c36:	b088      	sub	sp, #32
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	689a      	ldr	r2, [r3, #8]
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	691b      	ldr	r3, [r3, #16]
 8011c48:	431a      	orrs	r2, r3
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	695b      	ldr	r3, [r3, #20]
 8011c4e:	431a      	orrs	r2, r3
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	69db      	ldr	r3, [r3, #28]
 8011c54:	4313      	orrs	r3, r2
 8011c56:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	681a      	ldr	r2, [r3, #0]
 8011c5e:	4baa      	ldr	r3, [pc, #680]	; (8011f08 <UART_SetConfig+0x2d4>)
 8011c60:	4013      	ands	r3, r2
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	6812      	ldr	r2, [r2, #0]
 8011c66:	69f9      	ldr	r1, [r7, #28]
 8011c68:	430b      	orrs	r3, r1
 8011c6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	685b      	ldr	r3, [r3, #4]
 8011c72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	68da      	ldr	r2, [r3, #12]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	430a      	orrs	r2, r1
 8011c80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	699b      	ldr	r3, [r3, #24]
 8011c86:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	4a9f      	ldr	r2, [pc, #636]	; (8011f0c <UART_SetConfig+0x2d8>)
 8011c8e:	4293      	cmp	r3, r2
 8011c90:	d004      	beq.n	8011c9c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	6a1b      	ldr	r3, [r3, #32]
 8011c96:	69fa      	ldr	r2, [r7, #28]
 8011c98:	4313      	orrs	r3, r2
 8011c9a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	689b      	ldr	r3, [r3, #8]
 8011ca2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	69fa      	ldr	r2, [r7, #28]
 8011cac:	430a      	orrs	r2, r1
 8011cae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	4a96      	ldr	r2, [pc, #600]	; (8011f10 <UART_SetConfig+0x2dc>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d121      	bne.n	8011cfe <UART_SetConfig+0xca>
 8011cba:	4b96      	ldr	r3, [pc, #600]	; (8011f14 <UART_SetConfig+0x2e0>)
 8011cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cc0:	f003 0303 	and.w	r3, r3, #3
 8011cc4:	2b03      	cmp	r3, #3
 8011cc6:	d817      	bhi.n	8011cf8 <UART_SetConfig+0xc4>
 8011cc8:	a201      	add	r2, pc, #4	; (adr r2, 8011cd0 <UART_SetConfig+0x9c>)
 8011cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cce:	bf00      	nop
 8011cd0:	08011ce1 	.word	0x08011ce1
 8011cd4:	08011ced 	.word	0x08011ced
 8011cd8:	08011ce7 	.word	0x08011ce7
 8011cdc:	08011cf3 	.word	0x08011cf3
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	76fb      	strb	r3, [r7, #27]
 8011ce4:	e096      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011ce6:	2302      	movs	r3, #2
 8011ce8:	76fb      	strb	r3, [r7, #27]
 8011cea:	e093      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011cec:	2304      	movs	r3, #4
 8011cee:	76fb      	strb	r3, [r7, #27]
 8011cf0:	e090      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011cf2:	2308      	movs	r3, #8
 8011cf4:	76fb      	strb	r3, [r7, #27]
 8011cf6:	e08d      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011cf8:	2310      	movs	r3, #16
 8011cfa:	76fb      	strb	r3, [r7, #27]
 8011cfc:	e08a      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	4a85      	ldr	r2, [pc, #532]	; (8011f18 <UART_SetConfig+0x2e4>)
 8011d04:	4293      	cmp	r3, r2
 8011d06:	d132      	bne.n	8011d6e <UART_SetConfig+0x13a>
 8011d08:	4b82      	ldr	r3, [pc, #520]	; (8011f14 <UART_SetConfig+0x2e0>)
 8011d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d0e:	f003 030c 	and.w	r3, r3, #12
 8011d12:	2b0c      	cmp	r3, #12
 8011d14:	d828      	bhi.n	8011d68 <UART_SetConfig+0x134>
 8011d16:	a201      	add	r2, pc, #4	; (adr r2, 8011d1c <UART_SetConfig+0xe8>)
 8011d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d1c:	08011d51 	.word	0x08011d51
 8011d20:	08011d69 	.word	0x08011d69
 8011d24:	08011d69 	.word	0x08011d69
 8011d28:	08011d69 	.word	0x08011d69
 8011d2c:	08011d5d 	.word	0x08011d5d
 8011d30:	08011d69 	.word	0x08011d69
 8011d34:	08011d69 	.word	0x08011d69
 8011d38:	08011d69 	.word	0x08011d69
 8011d3c:	08011d57 	.word	0x08011d57
 8011d40:	08011d69 	.word	0x08011d69
 8011d44:	08011d69 	.word	0x08011d69
 8011d48:	08011d69 	.word	0x08011d69
 8011d4c:	08011d63 	.word	0x08011d63
 8011d50:	2300      	movs	r3, #0
 8011d52:	76fb      	strb	r3, [r7, #27]
 8011d54:	e05e      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011d56:	2302      	movs	r3, #2
 8011d58:	76fb      	strb	r3, [r7, #27]
 8011d5a:	e05b      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011d5c:	2304      	movs	r3, #4
 8011d5e:	76fb      	strb	r3, [r7, #27]
 8011d60:	e058      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011d62:	2308      	movs	r3, #8
 8011d64:	76fb      	strb	r3, [r7, #27]
 8011d66:	e055      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011d68:	2310      	movs	r3, #16
 8011d6a:	76fb      	strb	r3, [r7, #27]
 8011d6c:	e052      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	4a6a      	ldr	r2, [pc, #424]	; (8011f1c <UART_SetConfig+0x2e8>)
 8011d74:	4293      	cmp	r3, r2
 8011d76:	d120      	bne.n	8011dba <UART_SetConfig+0x186>
 8011d78:	4b66      	ldr	r3, [pc, #408]	; (8011f14 <UART_SetConfig+0x2e0>)
 8011d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011d82:	2b30      	cmp	r3, #48	; 0x30
 8011d84:	d013      	beq.n	8011dae <UART_SetConfig+0x17a>
 8011d86:	2b30      	cmp	r3, #48	; 0x30
 8011d88:	d814      	bhi.n	8011db4 <UART_SetConfig+0x180>
 8011d8a:	2b20      	cmp	r3, #32
 8011d8c:	d009      	beq.n	8011da2 <UART_SetConfig+0x16e>
 8011d8e:	2b20      	cmp	r3, #32
 8011d90:	d810      	bhi.n	8011db4 <UART_SetConfig+0x180>
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d002      	beq.n	8011d9c <UART_SetConfig+0x168>
 8011d96:	2b10      	cmp	r3, #16
 8011d98:	d006      	beq.n	8011da8 <UART_SetConfig+0x174>
 8011d9a:	e00b      	b.n	8011db4 <UART_SetConfig+0x180>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	76fb      	strb	r3, [r7, #27]
 8011da0:	e038      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011da2:	2302      	movs	r3, #2
 8011da4:	76fb      	strb	r3, [r7, #27]
 8011da6:	e035      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011da8:	2304      	movs	r3, #4
 8011daa:	76fb      	strb	r3, [r7, #27]
 8011dac:	e032      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011dae:	2308      	movs	r3, #8
 8011db0:	76fb      	strb	r3, [r7, #27]
 8011db2:	e02f      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011db4:	2310      	movs	r3, #16
 8011db6:	76fb      	strb	r3, [r7, #27]
 8011db8:	e02c      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	4a53      	ldr	r2, [pc, #332]	; (8011f0c <UART_SetConfig+0x2d8>)
 8011dc0:	4293      	cmp	r3, r2
 8011dc2:	d125      	bne.n	8011e10 <UART_SetConfig+0x1dc>
 8011dc4:	4b53      	ldr	r3, [pc, #332]	; (8011f14 <UART_SetConfig+0x2e0>)
 8011dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011dca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011dce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011dd2:	d017      	beq.n	8011e04 <UART_SetConfig+0x1d0>
 8011dd4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011dd8:	d817      	bhi.n	8011e0a <UART_SetConfig+0x1d6>
 8011dda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011dde:	d00b      	beq.n	8011df8 <UART_SetConfig+0x1c4>
 8011de0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011de4:	d811      	bhi.n	8011e0a <UART_SetConfig+0x1d6>
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d003      	beq.n	8011df2 <UART_SetConfig+0x1be>
 8011dea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011dee:	d006      	beq.n	8011dfe <UART_SetConfig+0x1ca>
 8011df0:	e00b      	b.n	8011e0a <UART_SetConfig+0x1d6>
 8011df2:	2300      	movs	r3, #0
 8011df4:	76fb      	strb	r3, [r7, #27]
 8011df6:	e00d      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011df8:	2302      	movs	r3, #2
 8011dfa:	76fb      	strb	r3, [r7, #27]
 8011dfc:	e00a      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011dfe:	2304      	movs	r3, #4
 8011e00:	76fb      	strb	r3, [r7, #27]
 8011e02:	e007      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011e04:	2308      	movs	r3, #8
 8011e06:	76fb      	strb	r3, [r7, #27]
 8011e08:	e004      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011e0a:	2310      	movs	r3, #16
 8011e0c:	76fb      	strb	r3, [r7, #27]
 8011e0e:	e001      	b.n	8011e14 <UART_SetConfig+0x1e0>
 8011e10:	2310      	movs	r3, #16
 8011e12:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	4a3c      	ldr	r2, [pc, #240]	; (8011f0c <UART_SetConfig+0x2d8>)
 8011e1a:	4293      	cmp	r3, r2
 8011e1c:	f040 8082 	bne.w	8011f24 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011e20:	7efb      	ldrb	r3, [r7, #27]
 8011e22:	2b08      	cmp	r3, #8
 8011e24:	d823      	bhi.n	8011e6e <UART_SetConfig+0x23a>
 8011e26:	a201      	add	r2, pc, #4	; (adr r2, 8011e2c <UART_SetConfig+0x1f8>)
 8011e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e2c:	08011e51 	.word	0x08011e51
 8011e30:	08011e6f 	.word	0x08011e6f
 8011e34:	08011e59 	.word	0x08011e59
 8011e38:	08011e6f 	.word	0x08011e6f
 8011e3c:	08011e5f 	.word	0x08011e5f
 8011e40:	08011e6f 	.word	0x08011e6f
 8011e44:	08011e6f 	.word	0x08011e6f
 8011e48:	08011e6f 	.word	0x08011e6f
 8011e4c:	08011e67 	.word	0x08011e67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e50:	f7fd fe9e 	bl	800fb90 <HAL_RCC_GetPCLK1Freq>
 8011e54:	6178      	str	r0, [r7, #20]
        break;
 8011e56:	e00f      	b.n	8011e78 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011e58:	4b31      	ldr	r3, [pc, #196]	; (8011f20 <UART_SetConfig+0x2ec>)
 8011e5a:	617b      	str	r3, [r7, #20]
        break;
 8011e5c:	e00c      	b.n	8011e78 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011e5e:	f7fd fdff 	bl	800fa60 <HAL_RCC_GetSysClockFreq>
 8011e62:	6178      	str	r0, [r7, #20]
        break;
 8011e64:	e008      	b.n	8011e78 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e6a:	617b      	str	r3, [r7, #20]
        break;
 8011e6c:	e004      	b.n	8011e78 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011e72:	2301      	movs	r3, #1
 8011e74:	76bb      	strb	r3, [r7, #26]
        break;
 8011e76:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	f000 8100 	beq.w	8012080 <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	685a      	ldr	r2, [r3, #4]
 8011e84:	4613      	mov	r3, r2
 8011e86:	005b      	lsls	r3, r3, #1
 8011e88:	4413      	add	r3, r2
 8011e8a:	697a      	ldr	r2, [r7, #20]
 8011e8c:	429a      	cmp	r2, r3
 8011e8e:	d305      	bcc.n	8011e9c <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	685b      	ldr	r3, [r3, #4]
 8011e94:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011e96:	697a      	ldr	r2, [r7, #20]
 8011e98:	429a      	cmp	r2, r3
 8011e9a:	d902      	bls.n	8011ea2 <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	76bb      	strb	r3, [r7, #26]
 8011ea0:	e0ee      	b.n	8012080 <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f04f 0100 	mov.w	r1, #0
 8011eaa:	f04f 0200 	mov.w	r2, #0
 8011eae:	f04f 0300 	mov.w	r3, #0
 8011eb2:	020b      	lsls	r3, r1, #8
 8011eb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011eb8:	0202      	lsls	r2, r0, #8
 8011eba:	6879      	ldr	r1, [r7, #4]
 8011ebc:	6849      	ldr	r1, [r1, #4]
 8011ebe:	0849      	lsrs	r1, r1, #1
 8011ec0:	4608      	mov	r0, r1
 8011ec2:	f04f 0100 	mov.w	r1, #0
 8011ec6:	1814      	adds	r4, r2, r0
 8011ec8:	eb43 0501 	adc.w	r5, r3, r1
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	461a      	mov	r2, r3
 8011ed2:	f04f 0300 	mov.w	r3, #0
 8011ed6:	4620      	mov	r0, r4
 8011ed8:	4629      	mov	r1, r5
 8011eda:	f7ee fed5 	bl	8000c88 <__aeabi_uldivmod>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	4613      	mov	r3, r2
 8011ee4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ee6:	693b      	ldr	r3, [r7, #16]
 8011ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011eec:	d308      	bcc.n	8011f00 <UART_SetConfig+0x2cc>
 8011eee:	693b      	ldr	r3, [r7, #16]
 8011ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ef4:	d204      	bcs.n	8011f00 <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	693a      	ldr	r2, [r7, #16]
 8011efc:	60da      	str	r2, [r3, #12]
 8011efe:	e0bf      	b.n	8012080 <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8011f00:	2301      	movs	r3, #1
 8011f02:	76bb      	strb	r3, [r7, #26]
 8011f04:	e0bc      	b.n	8012080 <UART_SetConfig+0x44c>
 8011f06:	bf00      	nop
 8011f08:	efff69f3 	.word	0xefff69f3
 8011f0c:	40008000 	.word	0x40008000
 8011f10:	40013800 	.word	0x40013800
 8011f14:	40021000 	.word	0x40021000
 8011f18:	40004400 	.word	0x40004400
 8011f1c:	40004800 	.word	0x40004800
 8011f20:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	69db      	ldr	r3, [r3, #28]
 8011f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f2c:	d15c      	bne.n	8011fe8 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 8011f2e:	7efb      	ldrb	r3, [r7, #27]
 8011f30:	2b08      	cmp	r3, #8
 8011f32:	d828      	bhi.n	8011f86 <UART_SetConfig+0x352>
 8011f34:	a201      	add	r2, pc, #4	; (adr r2, 8011f3c <UART_SetConfig+0x308>)
 8011f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f3a:	bf00      	nop
 8011f3c:	08011f61 	.word	0x08011f61
 8011f40:	08011f69 	.word	0x08011f69
 8011f44:	08011f71 	.word	0x08011f71
 8011f48:	08011f87 	.word	0x08011f87
 8011f4c:	08011f77 	.word	0x08011f77
 8011f50:	08011f87 	.word	0x08011f87
 8011f54:	08011f87 	.word	0x08011f87
 8011f58:	08011f87 	.word	0x08011f87
 8011f5c:	08011f7f 	.word	0x08011f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f60:	f7fd fe16 	bl	800fb90 <HAL_RCC_GetPCLK1Freq>
 8011f64:	6178      	str	r0, [r7, #20]
        break;
 8011f66:	e013      	b.n	8011f90 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f68:	f7fd fe28 	bl	800fbbc <HAL_RCC_GetPCLK2Freq>
 8011f6c:	6178      	str	r0, [r7, #20]
        break;
 8011f6e:	e00f      	b.n	8011f90 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f70:	4b49      	ldr	r3, [pc, #292]	; (8012098 <UART_SetConfig+0x464>)
 8011f72:	617b      	str	r3, [r7, #20]
        break;
 8011f74:	e00c      	b.n	8011f90 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f76:	f7fd fd73 	bl	800fa60 <HAL_RCC_GetSysClockFreq>
 8011f7a:	6178      	str	r0, [r7, #20]
        break;
 8011f7c:	e008      	b.n	8011f90 <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f82:	617b      	str	r3, [r7, #20]
        break;
 8011f84:	e004      	b.n	8011f90 <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8011f86:	2300      	movs	r3, #0
 8011f88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	76bb      	strb	r3, [r7, #26]
        break;
 8011f8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011f90:	697b      	ldr	r3, [r7, #20]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d074      	beq.n	8012080 <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011f96:	697b      	ldr	r3, [r7, #20]
 8011f98:	005a      	lsls	r2, r3, #1
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	685b      	ldr	r3, [r3, #4]
 8011f9e:	085b      	lsrs	r3, r3, #1
 8011fa0:	441a      	add	r2, r3
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	685b      	ldr	r3, [r3, #4]
 8011fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011fae:	693b      	ldr	r3, [r7, #16]
 8011fb0:	2b0f      	cmp	r3, #15
 8011fb2:	d916      	bls.n	8011fe2 <UART_SetConfig+0x3ae>
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011fba:	d212      	bcs.n	8011fe2 <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011fbc:	693b      	ldr	r3, [r7, #16]
 8011fbe:	b29b      	uxth	r3, r3
 8011fc0:	f023 030f 	bic.w	r3, r3, #15
 8011fc4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011fc6:	693b      	ldr	r3, [r7, #16]
 8011fc8:	085b      	lsrs	r3, r3, #1
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	f003 0307 	and.w	r3, r3, #7
 8011fd0:	b29a      	uxth	r2, r3
 8011fd2:	89fb      	ldrh	r3, [r7, #14]
 8011fd4:	4313      	orrs	r3, r2
 8011fd6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	89fa      	ldrh	r2, [r7, #14]
 8011fde:	60da      	str	r2, [r3, #12]
 8011fe0:	e04e      	b.n	8012080 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	76bb      	strb	r3, [r7, #26]
 8011fe6:	e04b      	b.n	8012080 <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011fe8:	7efb      	ldrb	r3, [r7, #27]
 8011fea:	2b08      	cmp	r3, #8
 8011fec:	d827      	bhi.n	801203e <UART_SetConfig+0x40a>
 8011fee:	a201      	add	r2, pc, #4	; (adr r2, 8011ff4 <UART_SetConfig+0x3c0>)
 8011ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ff4:	08012019 	.word	0x08012019
 8011ff8:	08012021 	.word	0x08012021
 8011ffc:	08012029 	.word	0x08012029
 8012000:	0801203f 	.word	0x0801203f
 8012004:	0801202f 	.word	0x0801202f
 8012008:	0801203f 	.word	0x0801203f
 801200c:	0801203f 	.word	0x0801203f
 8012010:	0801203f 	.word	0x0801203f
 8012014:	08012037 	.word	0x08012037
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012018:	f7fd fdba 	bl	800fb90 <HAL_RCC_GetPCLK1Freq>
 801201c:	6178      	str	r0, [r7, #20]
        break;
 801201e:	e013      	b.n	8012048 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8012020:	f7fd fdcc 	bl	800fbbc <HAL_RCC_GetPCLK2Freq>
 8012024:	6178      	str	r0, [r7, #20]
        break;
 8012026:	e00f      	b.n	8012048 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012028:	4b1b      	ldr	r3, [pc, #108]	; (8012098 <UART_SetConfig+0x464>)
 801202a:	617b      	str	r3, [r7, #20]
        break;
 801202c:	e00c      	b.n	8012048 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801202e:	f7fd fd17 	bl	800fa60 <HAL_RCC_GetSysClockFreq>
 8012032:	6178      	str	r0, [r7, #20]
        break;
 8012034:	e008      	b.n	8012048 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801203a:	617b      	str	r3, [r7, #20]
        break;
 801203c:	e004      	b.n	8012048 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 801203e:	2300      	movs	r3, #0
 8012040:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8012042:	2301      	movs	r3, #1
 8012044:	76bb      	strb	r3, [r7, #26]
        break;
 8012046:	bf00      	nop
    }

    if (pclk != 0U)
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d018      	beq.n	8012080 <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	685b      	ldr	r3, [r3, #4]
 8012052:	085a      	lsrs	r2, r3, #1
 8012054:	697b      	ldr	r3, [r7, #20]
 8012056:	441a      	add	r2, r3
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	685b      	ldr	r3, [r3, #4]
 801205c:	fbb2 f3f3 	udiv	r3, r2, r3
 8012060:	b29b      	uxth	r3, r3
 8012062:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	2b0f      	cmp	r3, #15
 8012068:	d908      	bls.n	801207c <UART_SetConfig+0x448>
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012070:	d204      	bcs.n	801207c <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	693a      	ldr	r2, [r7, #16]
 8012078:	60da      	str	r2, [r3, #12]
 801207a:	e001      	b.n	8012080 <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 801207c:	2301      	movs	r3, #1
 801207e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	2200      	movs	r2, #0
 8012084:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2200      	movs	r2, #0
 801208a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 801208c:	7ebb      	ldrb	r3, [r7, #26]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3720      	adds	r7, #32
 8012092:	46bd      	mov	sp, r7
 8012094:	bdb0      	pop	{r4, r5, r7, pc}
 8012096:	bf00      	nop
 8012098:	00f42400 	.word	0x00f42400

0801209c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801209c:	b480      	push	{r7}
 801209e:	b083      	sub	sp, #12
 80120a0:	af00      	add	r7, sp, #0
 80120a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120a8:	f003 0301 	and.w	r3, r3, #1
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00a      	beq.n	80120c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	681b      	ldr	r3, [r3, #0]
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	430a      	orrs	r2, r1
 80120c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ca:	f003 0302 	and.w	r3, r3, #2
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d00a      	beq.n	80120e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	430a      	orrs	r2, r1
 80120e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	f003 0304 	and.w	r3, r3, #4
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d00a      	beq.n	801210a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	685b      	ldr	r3, [r3, #4]
 80120fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	430a      	orrs	r2, r1
 8012108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801210e:	f003 0308 	and.w	r3, r3, #8
 8012112:	2b00      	cmp	r3, #0
 8012114:	d00a      	beq.n	801212c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	685b      	ldr	r3, [r3, #4]
 801211c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	430a      	orrs	r2, r1
 801212a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012130:	f003 0310 	and.w	r3, r3, #16
 8012134:	2b00      	cmp	r3, #0
 8012136:	d00a      	beq.n	801214e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	689b      	ldr	r3, [r3, #8]
 801213e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	430a      	orrs	r2, r1
 801214c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012152:	f003 0320 	and.w	r3, r3, #32
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00a      	beq.n	8012170 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	430a      	orrs	r2, r1
 801216e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012178:	2b00      	cmp	r3, #0
 801217a:	d01a      	beq.n	80121b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	685b      	ldr	r3, [r3, #4]
 8012182:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	430a      	orrs	r2, r1
 8012190:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801219a:	d10a      	bne.n	80121b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	685b      	ldr	r3, [r3, #4]
 80121a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	430a      	orrs	r2, r1
 80121b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d00a      	beq.n	80121d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	685b      	ldr	r3, [r3, #4]
 80121c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	430a      	orrs	r2, r1
 80121d2:	605a      	str	r2, [r3, #4]
  }
}
 80121d4:	bf00      	nop
 80121d6:	370c      	adds	r7, #12
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	b086      	sub	sp, #24
 80121e4:	af02      	add	r7, sp, #8
 80121e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	2200      	movs	r2, #0
 80121ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80121f0:	f7f8 f932 	bl	800a458 <HAL_GetTick>
 80121f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	f003 0308 	and.w	r3, r3, #8
 8012200:	2b08      	cmp	r3, #8
 8012202:	d10e      	bne.n	8012222 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012204:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012208:	9300      	str	r3, [sp, #0]
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2200      	movs	r2, #0
 801220e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f000 f82d 	bl	8012272 <UART_WaitOnFlagUntilTimeout>
 8012218:	4603      	mov	r3, r0
 801221a:	2b00      	cmp	r3, #0
 801221c:	d001      	beq.n	8012222 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801221e:	2303      	movs	r3, #3
 8012220:	e023      	b.n	801226a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	681b      	ldr	r3, [r3, #0]
 8012226:	681b      	ldr	r3, [r3, #0]
 8012228:	f003 0304 	and.w	r3, r3, #4
 801222c:	2b04      	cmp	r3, #4
 801222e:	d10e      	bne.n	801224e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012230:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012234:	9300      	str	r3, [sp, #0]
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	2200      	movs	r2, #0
 801223a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801223e:	6878      	ldr	r0, [r7, #4]
 8012240:	f000 f817 	bl	8012272 <UART_WaitOnFlagUntilTimeout>
 8012244:	4603      	mov	r3, r0
 8012246:	2b00      	cmp	r3, #0
 8012248:	d001      	beq.n	801224e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801224a:	2303      	movs	r3, #3
 801224c:	e00d      	b.n	801226a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2220      	movs	r2, #32
 8012252:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	2220      	movs	r2, #32
 8012258:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	2200      	movs	r2, #0
 8012264:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012268:	2300      	movs	r3, #0
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b084      	sub	sp, #16
 8012276:	af00      	add	r7, sp, #0
 8012278:	60f8      	str	r0, [r7, #12]
 801227a:	60b9      	str	r1, [r7, #8]
 801227c:	603b      	str	r3, [r7, #0]
 801227e:	4613      	mov	r3, r2
 8012280:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012282:	e05e      	b.n	8012342 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012284:	69bb      	ldr	r3, [r7, #24]
 8012286:	f1b3 3fff 	cmp.w	r3, #4294967295
 801228a:	d05a      	beq.n	8012342 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801228c:	f7f8 f8e4 	bl	800a458 <HAL_GetTick>
 8012290:	4602      	mov	r2, r0
 8012292:	683b      	ldr	r3, [r7, #0]
 8012294:	1ad3      	subs	r3, r2, r3
 8012296:	69ba      	ldr	r2, [r7, #24]
 8012298:	429a      	cmp	r2, r3
 801229a:	d302      	bcc.n	80122a2 <UART_WaitOnFlagUntilTimeout+0x30>
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d11b      	bne.n	80122da <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	681a      	ldr	r2, [r3, #0]
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80122b0:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	689a      	ldr	r2, [r3, #8]
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	f022 0201 	bic.w	r2, r2, #1
 80122c0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	2220      	movs	r2, #32
 80122c6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2220      	movs	r2, #32
 80122cc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	2200      	movs	r2, #0
 80122d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80122d6:	2303      	movs	r3, #3
 80122d8:	e043      	b.n	8012362 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	f003 0304 	and.w	r3, r3, #4
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d02c      	beq.n	8012342 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	69db      	ldr	r3, [r3, #28]
 80122ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80122f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80122f6:	d124      	bne.n	8012342 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012300:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	681a      	ldr	r2, [r3, #0]
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	681b      	ldr	r3, [r3, #0]
 801230c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012310:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012312:	68fb      	ldr	r3, [r7, #12]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	689a      	ldr	r2, [r3, #8]
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	f022 0201 	bic.w	r2, r2, #1
 8012320:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	2220      	movs	r2, #32
 8012326:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	2220      	movs	r2, #32
 801232c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2220      	movs	r2, #32
 8012332:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2200      	movs	r2, #0
 801233a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 801233e:	2303      	movs	r3, #3
 8012340:	e00f      	b.n	8012362 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	69da      	ldr	r2, [r3, #28]
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	4013      	ands	r3, r2
 801234c:	68ba      	ldr	r2, [r7, #8]
 801234e:	429a      	cmp	r2, r3
 8012350:	bf0c      	ite	eq
 8012352:	2301      	moveq	r3, #1
 8012354:	2300      	movne	r3, #0
 8012356:	b2db      	uxtb	r3, r3
 8012358:	461a      	mov	r2, r3
 801235a:	79fb      	ldrb	r3, [r7, #7]
 801235c:	429a      	cmp	r2, r3
 801235e:	d091      	beq.n	8012284 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012360:	2300      	movs	r3, #0
}
 8012362:	4618      	mov	r0, r3
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
	...

0801236c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801236c:	b580      	push	{r7, lr}
 801236e:	b084      	sub	sp, #16
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	4613      	mov	r3, r2
 8012378:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	68ba      	ldr	r2, [r7, #8]
 801237e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	88fa      	ldrh	r2, [r7, #6]
 8012384:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2200      	movs	r2, #0
 801238c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2222      	movs	r2, #34	; 0x22
 8012394:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801239a:	2b00      	cmp	r3, #0
 801239c:	d02b      	beq.n	80123f6 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123a2:	4a25      	ldr	r2, [pc, #148]	; (8012438 <UART_Start_Receive_DMA+0xcc>)
 80123a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123aa:	4a24      	ldr	r2, [pc, #144]	; (801243c <UART_Start_Receive_DMA+0xd0>)
 80123ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123b2:	4a23      	ldr	r2, [pc, #140]	; (8012440 <UART_Start_Receive_DMA+0xd4>)
 80123b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123ba:	2200      	movs	r2, #0
 80123bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	3324      	adds	r3, #36	; 0x24
 80123c8:	4619      	mov	r1, r3
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80123ce:	461a      	mov	r2, r3
 80123d0:	88fb      	ldrh	r3, [r7, #6]
 80123d2:	f7f9 fc29 	bl	800bc28 <HAL_DMA_Start_IT>
 80123d6:	4603      	mov	r3, r0
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d00c      	beq.n	80123f6 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	2210      	movs	r2, #16
 80123e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	2200      	movs	r2, #0
 80123e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2220      	movs	r2, #32
 80123f0:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 80123f2:	2301      	movs	r3, #1
 80123f4:	e01c      	b.n	8012430 <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	681a      	ldr	r2, [r3, #0]
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801240c:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	689a      	ldr	r2, [r3, #8]
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	f042 0201 	orr.w	r2, r2, #1
 801241c:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	681b      	ldr	r3, [r3, #0]
 8012422:	689a      	ldr	r2, [r3, #8]
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801242c:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 801242e:	2300      	movs	r3, #0
}
 8012430:	4618      	mov	r0, r3
 8012432:	3710      	adds	r7, #16
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}
 8012438:	080124cd 	.word	0x080124cd
 801243c:	08012565 	.word	0x08012565
 8012440:	0801259d 	.word	0x0801259d

08012444 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012444:	b480      	push	{r7}
 8012446:	b083      	sub	sp, #12
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	681a      	ldr	r2, [r3, #0]
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 801245a:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2220      	movs	r2, #32
 8012460:	679a      	str	r2, [r3, #120]	; 0x78
}
 8012462:	bf00      	nop
 8012464:	370c      	adds	r7, #12
 8012466:	46bd      	mov	sp, r7
 8012468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801246c:	4770      	bx	lr

0801246e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801246e:	b480      	push	{r7}
 8012470:	b083      	sub	sp, #12
 8012472:	af00      	add	r7, sp, #0
 8012474:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012484:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	689a      	ldr	r2, [r3, #8]
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	f022 0201 	bic.w	r2, r2, #1
 8012494:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801249a:	2b01      	cmp	r3, #1
 801249c:	d107      	bne.n	80124ae <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	681a      	ldr	r2, [r3, #0]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	f022 0210 	bic.w	r2, r2, #16
 80124ac:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	2220      	movs	r2, #32
 80124b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2200      	movs	r2, #0
 80124b8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	2200      	movs	r2, #0
 80124be:	665a      	str	r2, [r3, #100]	; 0x64
}
 80124c0:	bf00      	nop
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b084      	sub	sp, #16
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d8:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	f003 0320 	and.w	r3, r3, #32
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d12a      	bne.n	801253e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2200      	movs	r2, #0
 80124ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80124fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	689a      	ldr	r2, [r3, #8]
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	f022 0201 	bic.w	r2, r2, #1
 801250e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	689a      	ldr	r2, [r3, #8]
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	681b      	ldr	r3, [r3, #0]
 801251a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801251e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	2220      	movs	r2, #32
 8012524:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801252a:	2b01      	cmp	r3, #1
 801252c:	d107      	bne.n	801253e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	681a      	ldr	r2, [r3, #0]
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f022 0210 	bic.w	r2, r2, #16
 801253c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012542:	2b01      	cmp	r3, #1
 8012544:	d107      	bne.n	8012556 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801254c:	4619      	mov	r1, r3
 801254e:	68f8      	ldr	r0, [r7, #12]
 8012550:	f7ff fb64 	bl	8011c1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012554:	e002      	b.n	801255c <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8012556:	68f8      	ldr	r0, [r7, #12]
 8012558:	f7f7 fa2c 	bl	80099b4 <HAL_UART_RxCpltCallback>
}
 801255c:	bf00      	nop
 801255e:	3710      	adds	r7, #16
 8012560:	46bd      	mov	sp, r7
 8012562:	bd80      	pop	{r7, pc}

08012564 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012564:	b580      	push	{r7, lr}
 8012566:	b084      	sub	sp, #16
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012570:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012576:	2b01      	cmp	r3, #1
 8012578:	d109      	bne.n	801258e <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012580:	085b      	lsrs	r3, r3, #1
 8012582:	b29b      	uxth	r3, r3
 8012584:	4619      	mov	r1, r3
 8012586:	68f8      	ldr	r0, [r7, #12]
 8012588:	f7ff fb48 	bl	8011c1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801258c:	e002      	b.n	8012594 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 801258e:	68f8      	ldr	r0, [r7, #12]
 8012590:	f7ff fb30 	bl	8011bf4 <HAL_UART_RxHalfCpltCallback>
}
 8012594:	bf00      	nop
 8012596:	3710      	adds	r7, #16
 8012598:	46bd      	mov	sp, r7
 801259a:	bd80      	pop	{r7, pc}

0801259c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b086      	sub	sp, #24
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125a8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80125aa:	697b      	ldr	r3, [r7, #20]
 80125ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125ae:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80125b0:	697b      	ldr	r3, [r7, #20]
 80125b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80125b4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	689b      	ldr	r3, [r3, #8]
 80125bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80125c0:	2b80      	cmp	r3, #128	; 0x80
 80125c2:	d109      	bne.n	80125d8 <UART_DMAError+0x3c>
 80125c4:	693b      	ldr	r3, [r7, #16]
 80125c6:	2b21      	cmp	r3, #33	; 0x21
 80125c8:	d106      	bne.n	80125d8 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80125ca:	697b      	ldr	r3, [r7, #20]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80125d2:	6978      	ldr	r0, [r7, #20]
 80125d4:	f7ff ff36 	bl	8012444 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80125d8:	697b      	ldr	r3, [r7, #20]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125e2:	2b40      	cmp	r3, #64	; 0x40
 80125e4:	d109      	bne.n	80125fa <UART_DMAError+0x5e>
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	2b22      	cmp	r3, #34	; 0x22
 80125ea:	d106      	bne.n	80125fa <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80125ec:	697b      	ldr	r3, [r7, #20]
 80125ee:	2200      	movs	r2, #0
 80125f0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80125f4:	6978      	ldr	r0, [r7, #20]
 80125f6:	f7ff ff3a 	bl	801246e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012600:	f043 0210 	orr.w	r2, r3, #16
 8012604:	697b      	ldr	r3, [r7, #20]
 8012606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801260a:	6978      	ldr	r0, [r7, #20]
 801260c:	f7ff fafc 	bl	8011c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012610:	bf00      	nop
 8012612:	3718      	adds	r7, #24
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}

08012618 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012618:	b580      	push	{r7, lr}
 801261a:	b084      	sub	sp, #16
 801261c:	af00      	add	r7, sp, #0
 801261e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012624:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	2200      	movs	r2, #0
 801262a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	2200      	movs	r2, #0
 8012632:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012636:	68f8      	ldr	r0, [r7, #12]
 8012638:	f7ff fae6 	bl	8011c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801263c:	bf00      	nop
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012650:	2b21      	cmp	r3, #33	; 0x21
 8012652:	d12b      	bne.n	80126ac <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801265a:	b29b      	uxth	r3, r3
 801265c:	2b00      	cmp	r3, #0
 801265e:	d110      	bne.n	8012682 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801266e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	681b      	ldr	r3, [r3, #0]
 8012674:	681a      	ldr	r2, [r3, #0]
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801267e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012680:	e014      	b.n	80126ac <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012686:	781a      	ldrb	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	b292      	uxth	r2, r2
 801268e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012694:	1c5a      	adds	r2, r3, #1
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	3b01      	subs	r3, #1
 80126a4:	b29a      	uxth	r2, r3
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80126ac:	bf00      	nop
 80126ae:	370c      	adds	r7, #12
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80126b8:	b480      	push	{r7}
 80126ba:	b085      	sub	sp, #20
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80126c4:	2b21      	cmp	r3, #33	; 0x21
 80126c6:	d12f      	bne.n	8012728 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80126ce:	b29b      	uxth	r3, r3
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d110      	bne.n	80126f6 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	681a      	ldr	r2, [r3, #0]
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80126e2:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	681a      	ldr	r2, [r3, #0]
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80126f2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80126f4:	e018      	b.n	8012728 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126fa:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	881a      	ldrh	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012708:	b292      	uxth	r2, r2
 801270a:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012710:	1c9a      	adds	r2, r3, #2
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801271c:	b29b      	uxth	r3, r3
 801271e:	3b01      	subs	r3, #1
 8012720:	b29a      	uxth	r2, r3
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012728:	bf00      	nop
 801272a:	3714      	adds	r7, #20
 801272c:	46bd      	mov	sp, r7
 801272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012732:	4770      	bx	lr

08012734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	b082      	sub	sp, #8
 8012738:	af00      	add	r7, sp, #0
 801273a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	681a      	ldr	r2, [r3, #0]
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801274a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2220      	movs	r2, #32
 8012750:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	2200      	movs	r2, #0
 8012756:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012758:	6878      	ldr	r0, [r7, #4]
 801275a:	f7ff fa41 	bl	8011be0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801275e:	bf00      	nop
 8012760:	3708      	adds	r7, #8
 8012762:	46bd      	mov	sp, r7
 8012764:	bd80      	pop	{r7, pc}

08012766 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012766:	b480      	push	{r7}
 8012768:	b083      	sub	sp, #12
 801276a:	af00      	add	r7, sp, #0
 801276c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801276e:	bf00      	nop
 8012770:	370c      	adds	r7, #12
 8012772:	46bd      	mov	sp, r7
 8012774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012778:	4770      	bx	lr

0801277a <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801277a:	b084      	sub	sp, #16
 801277c:	b480      	push	{r7}
 801277e:	b083      	sub	sp, #12
 8012780:	af00      	add	r7, sp, #0
 8012782:	6078      	str	r0, [r7, #4]
 8012784:	f107 0014 	add.w	r0, r7, #20
 8012788:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 801278c:	2300      	movs	r3, #0
}
 801278e:	4618      	mov	r0, r3
 8012790:	370c      	adds	r7, #12
 8012792:	46bd      	mov	sp, r7
 8012794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012798:	b004      	add	sp, #16
 801279a:	4770      	bx	lr

0801279c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 801279c:	b480      	push	{r7}
 801279e:	b085      	sub	sp, #20
 80127a0:	af00      	add	r7, sp, #0
 80127a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2200      	movs	r2, #0
 80127a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80127ac:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80127b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	b29a      	uxth	r2, r3
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80127bc:	2300      	movs	r3, #0
}
 80127be:	4618      	mov	r0, r3
 80127c0:	3714      	adds	r7, #20
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr

080127ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80127ca:	b480      	push	{r7}
 80127cc:	b085      	sub	sp, #20
 80127ce:	af00      	add	r7, sp, #0
 80127d0:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80127d2:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80127d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80127de:	b29a      	uxth	r2, r3
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	b29b      	uxth	r3, r3
 80127e4:	43db      	mvns	r3, r3
 80127e6:	b29b      	uxth	r3, r3
 80127e8:	4013      	ands	r3, r2
 80127ea:	b29a      	uxth	r2, r3
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	460b      	mov	r3, r1
 801280a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 801280c:	2300      	movs	r3, #0
}
 801280e:	4618      	mov	r0, r3
 8012810:	370c      	adds	r7, #12
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr

0801281a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 801281a:	b084      	sub	sp, #16
 801281c:	b480      	push	{r7}
 801281e:	b083      	sub	sp, #12
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
 8012824:	f107 0014 	add.w	r0, r7, #20
 8012828:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2201      	movs	r2, #1
 8012830:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2200      	movs	r2, #0
 8012838:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	2200      	movs	r2, #0
 8012840:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	2200      	movs	r2, #0
 8012848:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 801284c:	2300      	movs	r3, #0
}
 801284e:	4618      	mov	r0, r3
 8012850:	370c      	adds	r7, #12
 8012852:	46bd      	mov	sp, r7
 8012854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012858:	b004      	add	sp, #16
 801285a:	4770      	bx	lr

0801285c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801285c:	b480      	push	{r7}
 801285e:	b09b      	sub	sp, #108	; 0x6c
 8012860:	af00      	add	r7, sp, #0
 8012862:	6078      	str	r0, [r7, #4]
 8012864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012866:	2300      	movs	r3, #0
 8012868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	683b      	ldr	r3, [r7, #0]
 8012870:	781b      	ldrb	r3, [r3, #0]
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	881b      	ldrh	r3, [r3, #0]
 8012878:	b29b      	uxth	r3, r3
 801287a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 801287e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012882:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	78db      	ldrb	r3, [r3, #3]
 801288a:	2b03      	cmp	r3, #3
 801288c:	d81f      	bhi.n	80128ce <USB_ActivateEndpoint+0x72>
 801288e:	a201      	add	r2, pc, #4	; (adr r2, 8012894 <USB_ActivateEndpoint+0x38>)
 8012890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012894:	080128a5 	.word	0x080128a5
 8012898:	080128c1 	.word	0x080128c1
 801289c:	080128d7 	.word	0x080128d7
 80128a0:	080128b3 	.word	0x080128b3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80128a4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80128a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80128ac:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80128b0:	e012      	b.n	80128d8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80128b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80128b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80128ba:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80128be:	e00b      	b.n	80128d8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80128c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80128c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80128c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80128cc:	e004      	b.n	80128d8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80128ce:	2301      	movs	r3, #1
 80128d0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80128d4:	e000      	b.n	80128d8 <USB_ActivateEndpoint+0x7c>
      break;
 80128d6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80128d8:	687a      	ldr	r2, [r7, #4]
 80128da:	683b      	ldr	r3, [r7, #0]
 80128dc:	781b      	ldrb	r3, [r3, #0]
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	441a      	add	r2, r3
 80128e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80128e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80128fa:	687a      	ldr	r2, [r7, #4]
 80128fc:	683b      	ldr	r3, [r7, #0]
 80128fe:	781b      	ldrb	r3, [r3, #0]
 8012900:	009b      	lsls	r3, r3, #2
 8012902:	4413      	add	r3, r2
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	b29b      	uxth	r3, r3
 8012908:	b21b      	sxth	r3, r3
 801290a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801290e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012912:	b21a      	sxth	r2, r3
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	781b      	ldrb	r3, [r3, #0]
 8012918:	b21b      	sxth	r3, r3
 801291a:	4313      	orrs	r3, r2
 801291c:	b21b      	sxth	r3, r3
 801291e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8012922:	687a      	ldr	r2, [r7, #4]
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	781b      	ldrb	r3, [r3, #0]
 8012928:	009b      	lsls	r3, r3, #2
 801292a:	441a      	add	r2, r3
 801292c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8012930:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012934:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801293c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012940:	b29b      	uxth	r3, r3
 8012942:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	7b1b      	ldrb	r3, [r3, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	f040 8149 	bne.w	8012be0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	785b      	ldrb	r3, [r3, #1]
 8012952:	2b00      	cmp	r3, #0
 8012954:	f000 8084 	beq.w	8012a60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	617b      	str	r3, [r7, #20]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012962:	b29b      	uxth	r3, r3
 8012964:	461a      	mov	r2, r3
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	4413      	add	r3, r2
 801296a:	617b      	str	r3, [r7, #20]
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	781b      	ldrb	r3, [r3, #0]
 8012970:	00da      	lsls	r2, r3, #3
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	4413      	add	r3, r2
 8012976:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801297a:	613b      	str	r3, [r7, #16]
 801297c:	683b      	ldr	r3, [r7, #0]
 801297e:	88db      	ldrh	r3, [r3, #6]
 8012980:	085b      	lsrs	r3, r3, #1
 8012982:	b29b      	uxth	r3, r3
 8012984:	005b      	lsls	r3, r3, #1
 8012986:	b29a      	uxth	r2, r3
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	781b      	ldrb	r3, [r3, #0]
 8012992:	009b      	lsls	r3, r3, #2
 8012994:	4413      	add	r3, r2
 8012996:	881b      	ldrh	r3, [r3, #0]
 8012998:	81fb      	strh	r3, [r7, #14]
 801299a:	89fb      	ldrh	r3, [r7, #14]
 801299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d01b      	beq.n	80129dc <USB_ActivateEndpoint+0x180>
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	683b      	ldr	r3, [r7, #0]
 80129a8:	781b      	ldrb	r3, [r3, #0]
 80129aa:	009b      	lsls	r3, r3, #2
 80129ac:	4413      	add	r3, r2
 80129ae:	881b      	ldrh	r3, [r3, #0]
 80129b0:	b29b      	uxth	r3, r3
 80129b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80129ba:	81bb      	strh	r3, [r7, #12]
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	781b      	ldrb	r3, [r3, #0]
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	441a      	add	r2, r3
 80129c6:	89bb      	ldrh	r3, [r7, #12]
 80129c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80129cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80129d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80129d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80129d8:	b29b      	uxth	r3, r3
 80129da:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	78db      	ldrb	r3, [r3, #3]
 80129e0:	2b01      	cmp	r3, #1
 80129e2:	d020      	beq.n	8012a26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80129e4:	687a      	ldr	r2, [r7, #4]
 80129e6:	683b      	ldr	r3, [r7, #0]
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	009b      	lsls	r3, r3, #2
 80129ec:	4413      	add	r3, r2
 80129ee:	881b      	ldrh	r3, [r3, #0]
 80129f0:	b29b      	uxth	r3, r3
 80129f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80129f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80129fa:	813b      	strh	r3, [r7, #8]
 80129fc:	893b      	ldrh	r3, [r7, #8]
 80129fe:	f083 0320 	eor.w	r3, r3, #32
 8012a02:	813b      	strh	r3, [r7, #8]
 8012a04:	687a      	ldr	r2, [r7, #4]
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	781b      	ldrb	r3, [r3, #0]
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	441a      	add	r2, r3
 8012a0e:	893b      	ldrh	r3, [r7, #8]
 8012a10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	8013      	strh	r3, [r2, #0]
 8012a24:	e27f      	b.n	8012f26 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012a26:	687a      	ldr	r2, [r7, #4]
 8012a28:	683b      	ldr	r3, [r7, #0]
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	4413      	add	r3, r2
 8012a30:	881b      	ldrh	r3, [r3, #0]
 8012a32:	b29b      	uxth	r3, r3
 8012a34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012a3c:	817b      	strh	r3, [r7, #10]
 8012a3e:	687a      	ldr	r2, [r7, #4]
 8012a40:	683b      	ldr	r3, [r7, #0]
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	441a      	add	r2, r3
 8012a48:	897b      	ldrh	r3, [r7, #10]
 8012a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a5a:	b29b      	uxth	r3, r3
 8012a5c:	8013      	strh	r3, [r2, #0]
 8012a5e:	e262      	b.n	8012f26 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	461a      	mov	r2, r3
 8012a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a70:	4413      	add	r3, r2
 8012a72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a74:	683b      	ldr	r3, [r7, #0]
 8012a76:	781b      	ldrb	r3, [r3, #0]
 8012a78:	00da      	lsls	r2, r3, #3
 8012a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a7c:	4413      	add	r3, r2
 8012a7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012a82:	62bb      	str	r3, [r7, #40]	; 0x28
 8012a84:	683b      	ldr	r3, [r7, #0]
 8012a86:	88db      	ldrh	r3, [r3, #6]
 8012a88:	085b      	lsrs	r3, r3, #1
 8012a8a:	b29b      	uxth	r3, r3
 8012a8c:	005b      	lsls	r3, r3, #1
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a92:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	627b      	str	r3, [r7, #36]	; 0x24
 8012a98:	687b      	ldr	r3, [r7, #4]
 8012a9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa4:	4413      	add	r3, r2
 8012aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8012aa8:	683b      	ldr	r3, [r7, #0]
 8012aaa:	781b      	ldrb	r3, [r3, #0]
 8012aac:	00da      	lsls	r2, r3, #3
 8012aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ab0:	4413      	add	r3, r2
 8012ab2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012ab6:	623b      	str	r3, [r7, #32]
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	691b      	ldr	r3, [r3, #16]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d112      	bne.n	8012ae6 <USB_ActivateEndpoint+0x28a>
 8012ac0:	6a3b      	ldr	r3, [r7, #32]
 8012ac2:	881b      	ldrh	r3, [r3, #0]
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012aca:	b29a      	uxth	r2, r3
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	801a      	strh	r2, [r3, #0]
 8012ad0:	6a3b      	ldr	r3, [r7, #32]
 8012ad2:	881b      	ldrh	r3, [r3, #0]
 8012ad4:	b29b      	uxth	r3, r3
 8012ad6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012ada:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ade:	b29a      	uxth	r2, r3
 8012ae0:	6a3b      	ldr	r3, [r7, #32]
 8012ae2:	801a      	strh	r2, [r3, #0]
 8012ae4:	e02f      	b.n	8012b46 <USB_ActivateEndpoint+0x2ea>
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	691b      	ldr	r3, [r3, #16]
 8012aea:	2b3e      	cmp	r3, #62	; 0x3e
 8012aec:	d813      	bhi.n	8012b16 <USB_ActivateEndpoint+0x2ba>
 8012aee:	683b      	ldr	r3, [r7, #0]
 8012af0:	691b      	ldr	r3, [r3, #16]
 8012af2:	085b      	lsrs	r3, r3, #1
 8012af4:	663b      	str	r3, [r7, #96]	; 0x60
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	691b      	ldr	r3, [r3, #16]
 8012afa:	f003 0301 	and.w	r3, r3, #1
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d002      	beq.n	8012b08 <USB_ActivateEndpoint+0x2ac>
 8012b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b04:	3301      	adds	r3, #1
 8012b06:	663b      	str	r3, [r7, #96]	; 0x60
 8012b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b0a:	b29b      	uxth	r3, r3
 8012b0c:	029b      	lsls	r3, r3, #10
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	6a3b      	ldr	r3, [r7, #32]
 8012b12:	801a      	strh	r2, [r3, #0]
 8012b14:	e017      	b.n	8012b46 <USB_ActivateEndpoint+0x2ea>
 8012b16:	683b      	ldr	r3, [r7, #0]
 8012b18:	691b      	ldr	r3, [r3, #16]
 8012b1a:	095b      	lsrs	r3, r3, #5
 8012b1c:	663b      	str	r3, [r7, #96]	; 0x60
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	691b      	ldr	r3, [r3, #16]
 8012b22:	f003 031f 	and.w	r3, r3, #31
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d102      	bne.n	8012b30 <USB_ActivateEndpoint+0x2d4>
 8012b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8012b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012b32:	b29b      	uxth	r3, r3
 8012b34:	029b      	lsls	r3, r3, #10
 8012b36:	b29b      	uxth	r3, r3
 8012b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b40:	b29a      	uxth	r2, r3
 8012b42:	6a3b      	ldr	r3, [r7, #32]
 8012b44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012b46:	687a      	ldr	r2, [r7, #4]
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	781b      	ldrb	r3, [r3, #0]
 8012b4c:	009b      	lsls	r3, r3, #2
 8012b4e:	4413      	add	r3, r2
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	83fb      	strh	r3, [r7, #30]
 8012b54:	8bfb      	ldrh	r3, [r7, #30]
 8012b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d01b      	beq.n	8012b96 <USB_ActivateEndpoint+0x33a>
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	781b      	ldrb	r3, [r3, #0]
 8012b64:	009b      	lsls	r3, r3, #2
 8012b66:	4413      	add	r3, r2
 8012b68:	881b      	ldrh	r3, [r3, #0]
 8012b6a:	b29b      	uxth	r3, r3
 8012b6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012b74:	83bb      	strh	r3, [r7, #28]
 8012b76:	687a      	ldr	r2, [r7, #4]
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	781b      	ldrb	r3, [r3, #0]
 8012b7c:	009b      	lsls	r3, r3, #2
 8012b7e:	441a      	add	r2, r3
 8012b80:	8bbb      	ldrh	r3, [r7, #28]
 8012b82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012b86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012b8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012b96:	687a      	ldr	r2, [r7, #4]
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	781b      	ldrb	r3, [r3, #0]
 8012b9c:	009b      	lsls	r3, r3, #2
 8012b9e:	4413      	add	r3, r2
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bac:	837b      	strh	r3, [r7, #26]
 8012bae:	8b7b      	ldrh	r3, [r7, #26]
 8012bb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012bb4:	837b      	strh	r3, [r7, #26]
 8012bb6:	8b7b      	ldrh	r3, [r7, #26]
 8012bb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012bbc:	837b      	strh	r3, [r7, #26]
 8012bbe:	687a      	ldr	r2, [r7, #4]
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	781b      	ldrb	r3, [r3, #0]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	441a      	add	r2, r3
 8012bc8:	8b7b      	ldrh	r3, [r7, #26]
 8012bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012bda:	b29b      	uxth	r3, r3
 8012bdc:	8013      	strh	r3, [r2, #0]
 8012bde:	e1a2      	b.n	8012f26 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8012be0:	687a      	ldr	r2, [r7, #4]
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	009b      	lsls	r3, r3, #2
 8012be8:	4413      	add	r3, r2
 8012bea:	881b      	ldrh	r3, [r3, #0]
 8012bec:	b29b      	uxth	r3, r3
 8012bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012bf6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8012bfa:	687a      	ldr	r2, [r7, #4]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	009b      	lsls	r3, r3, #2
 8012c02:	441a      	add	r2, r3
 8012c04:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8012c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012c10:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c26:	b29b      	uxth	r3, r3
 8012c28:	461a      	mov	r2, r3
 8012c2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c2c:	4413      	add	r3, r2
 8012c2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c30:	683b      	ldr	r3, [r7, #0]
 8012c32:	781b      	ldrb	r3, [r3, #0]
 8012c34:	00da      	lsls	r2, r3, #3
 8012c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c38:	4413      	add	r3, r2
 8012c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8012c40:	683b      	ldr	r3, [r7, #0]
 8012c42:	891b      	ldrh	r3, [r3, #8]
 8012c44:	085b      	lsrs	r3, r3, #1
 8012c46:	b29b      	uxth	r3, r3
 8012c48:	005b      	lsls	r3, r3, #1
 8012c4a:	b29a      	uxth	r2, r3
 8012c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012c4e:	801a      	strh	r2, [r3, #0]
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	653b      	str	r3, [r7, #80]	; 0x50
 8012c54:	687b      	ldr	r3, [r7, #4]
 8012c56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	461a      	mov	r2, r3
 8012c5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c60:	4413      	add	r3, r2
 8012c62:	653b      	str	r3, [r7, #80]	; 0x50
 8012c64:	683b      	ldr	r3, [r7, #0]
 8012c66:	781b      	ldrb	r3, [r3, #0]
 8012c68:	00da      	lsls	r2, r3, #3
 8012c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012c6c:	4413      	add	r3, r2
 8012c6e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	895b      	ldrh	r3, [r3, #10]
 8012c78:	085b      	lsrs	r3, r3, #1
 8012c7a:	b29b      	uxth	r3, r3
 8012c7c:	005b      	lsls	r3, r3, #1
 8012c7e:	b29a      	uxth	r2, r3
 8012c80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c82:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8012c84:	683b      	ldr	r3, [r7, #0]
 8012c86:	785b      	ldrb	r3, [r3, #1]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	f040 8091 	bne.w	8012db0 <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012c8e:	687a      	ldr	r2, [r7, #4]
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	781b      	ldrb	r3, [r3, #0]
 8012c94:	009b      	lsls	r3, r3, #2
 8012c96:	4413      	add	r3, r2
 8012c98:	881b      	ldrh	r3, [r3, #0]
 8012c9a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012c9c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8012c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d01b      	beq.n	8012cde <USB_ActivateEndpoint+0x482>
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	683b      	ldr	r3, [r7, #0]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	009b      	lsls	r3, r3, #2
 8012cae:	4413      	add	r3, r2
 8012cb0:	881b      	ldrh	r3, [r3, #0]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012cbc:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012cbe:	687a      	ldr	r2, [r7, #4]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	441a      	add	r2, r3
 8012cc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012cd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cda:	b29b      	uxth	r3, r3
 8012cdc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	683b      	ldr	r3, [r7, #0]
 8012ce2:	781b      	ldrb	r3, [r3, #0]
 8012ce4:	009b      	lsls	r3, r3, #2
 8012ce6:	4413      	add	r3, r2
 8012ce8:	881b      	ldrh	r3, [r3, #0]
 8012cea:	873b      	strh	r3, [r7, #56]	; 0x38
 8012cec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8012cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d01b      	beq.n	8012d2e <USB_ActivateEndpoint+0x4d2>
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	009b      	lsls	r3, r3, #2
 8012cfe:	4413      	add	r3, r2
 8012d00:	881b      	ldrh	r3, [r3, #0]
 8012d02:	b29b      	uxth	r3, r3
 8012d04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	009b      	lsls	r3, r3, #2
 8012d16:	441a      	add	r2, r3
 8012d18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8012d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012d2a:	b29b      	uxth	r3, r3
 8012d2c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8012d2e:	687a      	ldr	r2, [r7, #4]
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	781b      	ldrb	r3, [r3, #0]
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	4413      	add	r3, r2
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	b29b      	uxth	r3, r3
 8012d3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012d44:	86bb      	strh	r3, [r7, #52]	; 0x34
 8012d46:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012d48:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8012d4c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8012d4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012d50:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8012d54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8012d56:	687a      	ldr	r2, [r7, #4]
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	009b      	lsls	r3, r3, #2
 8012d5e:	441a      	add	r2, r3
 8012d60:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8012d62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012d6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012d6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d72:	b29b      	uxth	r3, r3
 8012d74:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012d76:	687a      	ldr	r2, [r7, #4]
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	781b      	ldrb	r3, [r3, #0]
 8012d7c:	009b      	lsls	r3, r3, #2
 8012d7e:	4413      	add	r3, r2
 8012d80:	881b      	ldrh	r3, [r3, #0]
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012d8c:	867b      	strh	r3, [r7, #50]	; 0x32
 8012d8e:	687a      	ldr	r2, [r7, #4]
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	009b      	lsls	r3, r3, #2
 8012d96:	441a      	add	r2, r3
 8012d98:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8012d9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012d9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012da6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012daa:	b29b      	uxth	r3, r3
 8012dac:	8013      	strh	r3, [r2, #0]
 8012dae:	e0ba      	b.n	8012f26 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012db0:	687a      	ldr	r2, [r7, #4]
 8012db2:	683b      	ldr	r3, [r7, #0]
 8012db4:	781b      	ldrb	r3, [r3, #0]
 8012db6:	009b      	lsls	r3, r3, #2
 8012db8:	4413      	add	r3, r2
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8012dc0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8012dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d01d      	beq.n	8012e08 <USB_ActivateEndpoint+0x5ac>
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	683b      	ldr	r3, [r7, #0]
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	009b      	lsls	r3, r3, #2
 8012dd4:	4413      	add	r3, r2
 8012dd6:	881b      	ldrh	r3, [r3, #0]
 8012dd8:	b29b      	uxth	r3, r3
 8012dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012de2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8012de6:	687a      	ldr	r2, [r7, #4]
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	781b      	ldrb	r3, [r3, #0]
 8012dec:	009b      	lsls	r3, r3, #2
 8012dee:	441a      	add	r2, r3
 8012df0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8012df4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012df8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8012e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e04:	b29b      	uxth	r3, r3
 8012e06:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012e08:	687a      	ldr	r2, [r7, #4]
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	781b      	ldrb	r3, [r3, #0]
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	4413      	add	r3, r2
 8012e12:	881b      	ldrh	r3, [r3, #0]
 8012e14:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8012e18:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8012e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d01d      	beq.n	8012e60 <USB_ActivateEndpoint+0x604>
 8012e24:	687a      	ldr	r2, [r7, #4]
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	781b      	ldrb	r3, [r3, #0]
 8012e2a:	009b      	lsls	r3, r3, #2
 8012e2c:	4413      	add	r3, r2
 8012e2e:	881b      	ldrh	r3, [r3, #0]
 8012e30:	b29b      	uxth	r3, r3
 8012e32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012e3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8012e3e:	687a      	ldr	r2, [r7, #4]
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	781b      	ldrb	r3, [r3, #0]
 8012e44:	009b      	lsls	r3, r3, #2
 8012e46:	441a      	add	r2, r3
 8012e48:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8012e4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012e50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012e54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012e58:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012e5c:	b29b      	uxth	r3, r3
 8012e5e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012e60:	683b      	ldr	r3, [r7, #0]
 8012e62:	78db      	ldrb	r3, [r3, #3]
 8012e64:	2b01      	cmp	r3, #1
 8012e66:	d024      	beq.n	8012eb2 <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8012e68:	687a      	ldr	r2, [r7, #4]
 8012e6a:	683b      	ldr	r3, [r7, #0]
 8012e6c:	781b      	ldrb	r3, [r3, #0]
 8012e6e:	009b      	lsls	r3, r3, #2
 8012e70:	4413      	add	r3, r2
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012e7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012e82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e86:	f083 0320 	eor.w	r3, r3, #32
 8012e8a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	683b      	ldr	r3, [r7, #0]
 8012e92:	781b      	ldrb	r3, [r3, #0]
 8012e94:	009b      	lsls	r3, r3, #2
 8012e96:	441a      	add	r2, r3
 8012e98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012e9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ea0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ea4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ea8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eac:	b29b      	uxth	r3, r3
 8012eae:	8013      	strh	r3, [r2, #0]
 8012eb0:	e01d      	b.n	8012eee <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012eb2:	687a      	ldr	r2, [r7, #4]
 8012eb4:	683b      	ldr	r3, [r7, #0]
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	009b      	lsls	r3, r3, #2
 8012eba:	4413      	add	r3, r2
 8012ebc:	881b      	ldrh	r3, [r3, #0]
 8012ebe:	b29b      	uxth	r3, r3
 8012ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8012ecc:	687a      	ldr	r2, [r7, #4]
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	781b      	ldrb	r3, [r3, #0]
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	441a      	add	r2, r3
 8012ed6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012ee2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	683b      	ldr	r3, [r7, #0]
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	009b      	lsls	r3, r3, #2
 8012ef6:	4413      	add	r3, r2
 8012ef8:	881b      	ldrh	r3, [r3, #0]
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f04:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8012f06:	687a      	ldr	r2, [r7, #4]
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	781b      	ldrb	r3, [r3, #0]
 8012f0c:	009b      	lsls	r3, r3, #2
 8012f0e:	441a      	add	r2, r3
 8012f10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012f22:	b29b      	uxth	r3, r3
 8012f24:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8012f26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	376c      	adds	r7, #108	; 0x6c
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr
 8012f36:	bf00      	nop

08012f38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b08d      	sub	sp, #52	; 0x34
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
 8012f40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8012f42:	683b      	ldr	r3, [r7, #0]
 8012f44:	7b1b      	ldrb	r3, [r3, #12]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f040 808e 	bne.w	8013068 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	785b      	ldrb	r3, [r3, #1]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d044      	beq.n	8012fde <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8012f54:	687a      	ldr	r2, [r7, #4]
 8012f56:	683b      	ldr	r3, [r7, #0]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	009b      	lsls	r3, r3, #2
 8012f5c:	4413      	add	r3, r2
 8012f5e:	881b      	ldrh	r3, [r3, #0]
 8012f60:	81bb      	strh	r3, [r7, #12]
 8012f62:	89bb      	ldrh	r3, [r7, #12]
 8012f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d01b      	beq.n	8012fa4 <USB_DeactivateEndpoint+0x6c>
 8012f6c:	687a      	ldr	r2, [r7, #4]
 8012f6e:	683b      	ldr	r3, [r7, #0]
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4413      	add	r3, r2
 8012f76:	881b      	ldrh	r3, [r3, #0]
 8012f78:	b29b      	uxth	r3, r3
 8012f7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012f82:	817b      	strh	r3, [r7, #10]
 8012f84:	687a      	ldr	r2, [r7, #4]
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	009b      	lsls	r3, r3, #2
 8012f8c:	441a      	add	r2, r3
 8012f8e:	897b      	ldrh	r3, [r7, #10]
 8012f90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012f94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012f98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012f9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8012fa0:	b29b      	uxth	r3, r3
 8012fa2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	781b      	ldrb	r3, [r3, #0]
 8012faa:	009b      	lsls	r3, r3, #2
 8012fac:	4413      	add	r3, r2
 8012fae:	881b      	ldrh	r3, [r3, #0]
 8012fb0:	b29b      	uxth	r3, r3
 8012fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012fba:	813b      	strh	r3, [r7, #8]
 8012fbc:	687a      	ldr	r2, [r7, #4]
 8012fbe:	683b      	ldr	r3, [r7, #0]
 8012fc0:	781b      	ldrb	r3, [r3, #0]
 8012fc2:	009b      	lsls	r3, r3, #2
 8012fc4:	441a      	add	r2, r3
 8012fc6:	893b      	ldrh	r3, [r7, #8]
 8012fc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fd8:	b29b      	uxth	r3, r3
 8012fda:	8013      	strh	r3, [r2, #0]
 8012fdc:	e192      	b.n	8013304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012fde:	687a      	ldr	r2, [r7, #4]
 8012fe0:	683b      	ldr	r3, [r7, #0]
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	009b      	lsls	r3, r3, #2
 8012fe6:	4413      	add	r3, r2
 8012fe8:	881b      	ldrh	r3, [r3, #0]
 8012fea:	827b      	strh	r3, [r7, #18]
 8012fec:	8a7b      	ldrh	r3, [r7, #18]
 8012fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d01b      	beq.n	801302e <USB_DeactivateEndpoint+0xf6>
 8012ff6:	687a      	ldr	r2, [r7, #4]
 8012ff8:	683b      	ldr	r3, [r7, #0]
 8012ffa:	781b      	ldrb	r3, [r3, #0]
 8012ffc:	009b      	lsls	r3, r3, #2
 8012ffe:	4413      	add	r3, r2
 8013000:	881b      	ldrh	r3, [r3, #0]
 8013002:	b29b      	uxth	r3, r3
 8013004:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013008:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801300c:	823b      	strh	r3, [r7, #16]
 801300e:	687a      	ldr	r2, [r7, #4]
 8013010:	683b      	ldr	r3, [r7, #0]
 8013012:	781b      	ldrb	r3, [r3, #0]
 8013014:	009b      	lsls	r3, r3, #2
 8013016:	441a      	add	r2, r3
 8013018:	8a3b      	ldrh	r3, [r7, #16]
 801301a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801301e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013022:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801302a:	b29b      	uxth	r3, r3
 801302c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	009b      	lsls	r3, r3, #2
 8013036:	4413      	add	r3, r2
 8013038:	881b      	ldrh	r3, [r3, #0]
 801303a:	b29b      	uxth	r3, r3
 801303c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013040:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013044:	81fb      	strh	r3, [r7, #14]
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	441a      	add	r2, r3
 8013050:	89fb      	ldrh	r3, [r7, #14]
 8013052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801305e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013062:	b29b      	uxth	r3, r3
 8013064:	8013      	strh	r3, [r2, #0]
 8013066:	e14d      	b.n	8013304 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	785b      	ldrb	r3, [r3, #1]
 801306c:	2b00      	cmp	r3, #0
 801306e:	f040 80a5 	bne.w	80131bc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013072:	687a      	ldr	r2, [r7, #4]
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	781b      	ldrb	r3, [r3, #0]
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	4413      	add	r3, r2
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	843b      	strh	r3, [r7, #32]
 8013080:	8c3b      	ldrh	r3, [r7, #32]
 8013082:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013086:	2b00      	cmp	r3, #0
 8013088:	d01b      	beq.n	80130c2 <USB_DeactivateEndpoint+0x18a>
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	683b      	ldr	r3, [r7, #0]
 801308e:	781b      	ldrb	r3, [r3, #0]
 8013090:	009b      	lsls	r3, r3, #2
 8013092:	4413      	add	r3, r2
 8013094:	881b      	ldrh	r3, [r3, #0]
 8013096:	b29b      	uxth	r3, r3
 8013098:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130a0:	83fb      	strh	r3, [r7, #30]
 80130a2:	687a      	ldr	r2, [r7, #4]
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	009b      	lsls	r3, r3, #2
 80130aa:	441a      	add	r2, r3
 80130ac:	8bfb      	ldrh	r3, [r7, #30]
 80130ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80130b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80130b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80130ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80130be:	b29b      	uxth	r3, r3
 80130c0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80130c2:	687a      	ldr	r2, [r7, #4]
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	781b      	ldrb	r3, [r3, #0]
 80130c8:	009b      	lsls	r3, r3, #2
 80130ca:	4413      	add	r3, r2
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	83bb      	strh	r3, [r7, #28]
 80130d0:	8bbb      	ldrh	r3, [r7, #28]
 80130d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d01b      	beq.n	8013112 <USB_DeactivateEndpoint+0x1da>
 80130da:	687a      	ldr	r2, [r7, #4]
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	009b      	lsls	r3, r3, #2
 80130e2:	4413      	add	r3, r2
 80130e4:	881b      	ldrh	r3, [r3, #0]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80130ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80130f0:	837b      	strh	r3, [r7, #26]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	683b      	ldr	r3, [r7, #0]
 80130f6:	781b      	ldrb	r3, [r3, #0]
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	441a      	add	r2, r3
 80130fc:	8b7b      	ldrh	r3, [r7, #26]
 80130fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013102:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013106:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801310a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801310e:	b29b      	uxth	r3, r3
 8013110:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8013112:	687a      	ldr	r2, [r7, #4]
 8013114:	683b      	ldr	r3, [r7, #0]
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	009b      	lsls	r3, r3, #2
 801311a:	4413      	add	r3, r2
 801311c:	881b      	ldrh	r3, [r3, #0]
 801311e:	b29b      	uxth	r3, r3
 8013120:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013124:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013128:	833b      	strh	r3, [r7, #24]
 801312a:	687a      	ldr	r2, [r7, #4]
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	781b      	ldrb	r3, [r3, #0]
 8013130:	009b      	lsls	r3, r3, #2
 8013132:	441a      	add	r2, r3
 8013134:	8b3b      	ldrh	r3, [r7, #24]
 8013136:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801313a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801313e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013142:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013146:	b29b      	uxth	r3, r3
 8013148:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801314a:	687a      	ldr	r2, [r7, #4]
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	781b      	ldrb	r3, [r3, #0]
 8013150:	009b      	lsls	r3, r3, #2
 8013152:	4413      	add	r3, r2
 8013154:	881b      	ldrh	r3, [r3, #0]
 8013156:	b29b      	uxth	r3, r3
 8013158:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013160:	82fb      	strh	r3, [r7, #22]
 8013162:	687a      	ldr	r2, [r7, #4]
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	781b      	ldrb	r3, [r3, #0]
 8013168:	009b      	lsls	r3, r3, #2
 801316a:	441a      	add	r2, r3
 801316c:	8afb      	ldrh	r3, [r7, #22]
 801316e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013172:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013176:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801317a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801317e:	b29b      	uxth	r3, r3
 8013180:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013182:	687a      	ldr	r2, [r7, #4]
 8013184:	683b      	ldr	r3, [r7, #0]
 8013186:	781b      	ldrb	r3, [r3, #0]
 8013188:	009b      	lsls	r3, r3, #2
 801318a:	4413      	add	r3, r2
 801318c:	881b      	ldrh	r3, [r3, #0]
 801318e:	b29b      	uxth	r3, r3
 8013190:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013198:	82bb      	strh	r3, [r7, #20]
 801319a:	687a      	ldr	r2, [r7, #4]
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	781b      	ldrb	r3, [r3, #0]
 80131a0:	009b      	lsls	r3, r3, #2
 80131a2:	441a      	add	r2, r3
 80131a4:	8abb      	ldrh	r3, [r7, #20]
 80131a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80131ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	8013      	strh	r3, [r2, #0]
 80131ba:	e0a3      	b.n	8013304 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80131bc:	687a      	ldr	r2, [r7, #4]
 80131be:	683b      	ldr	r3, [r7, #0]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	009b      	lsls	r3, r3, #2
 80131c4:	4413      	add	r3, r2
 80131c6:	881b      	ldrh	r3, [r3, #0]
 80131c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80131ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80131cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d01b      	beq.n	801320c <USB_DeactivateEndpoint+0x2d4>
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	683b      	ldr	r3, [r7, #0]
 80131d8:	781b      	ldrb	r3, [r3, #0]
 80131da:	009b      	lsls	r3, r3, #2
 80131dc:	4413      	add	r3, r2
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	b29b      	uxth	r3, r3
 80131e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80131e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80131ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80131ec:	687a      	ldr	r2, [r7, #4]
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	781b      	ldrb	r3, [r3, #0]
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	441a      	add	r2, r3
 80131f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80131f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80131fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013200:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013208:	b29b      	uxth	r3, r3
 801320a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801320c:	687a      	ldr	r2, [r7, #4]
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	781b      	ldrb	r3, [r3, #0]
 8013212:	009b      	lsls	r3, r3, #2
 8013214:	4413      	add	r3, r2
 8013216:	881b      	ldrh	r3, [r3, #0]
 8013218:	857b      	strh	r3, [r7, #42]	; 0x2a
 801321a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801321c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013220:	2b00      	cmp	r3, #0
 8013222:	d01b      	beq.n	801325c <USB_DeactivateEndpoint+0x324>
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	781b      	ldrb	r3, [r3, #0]
 801322a:	009b      	lsls	r3, r3, #2
 801322c:	4413      	add	r3, r2
 801322e:	881b      	ldrh	r3, [r3, #0]
 8013230:	b29b      	uxth	r3, r3
 8013232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801323a:	853b      	strh	r3, [r7, #40]	; 0x28
 801323c:	687a      	ldr	r2, [r7, #4]
 801323e:	683b      	ldr	r3, [r7, #0]
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	009b      	lsls	r3, r3, #2
 8013244:	441a      	add	r2, r3
 8013246:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013248:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801324c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013250:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013254:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013258:	b29b      	uxth	r3, r3
 801325a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801325c:	687a      	ldr	r2, [r7, #4]
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	781b      	ldrb	r3, [r3, #0]
 8013262:	009b      	lsls	r3, r3, #2
 8013264:	4413      	add	r3, r2
 8013266:	881b      	ldrh	r3, [r3, #0]
 8013268:	b29b      	uxth	r3, r3
 801326a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801326e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013272:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013274:	687a      	ldr	r2, [r7, #4]
 8013276:	683b      	ldr	r3, [r7, #0]
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	009b      	lsls	r3, r3, #2
 801327c:	441a      	add	r2, r3
 801327e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013280:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013284:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801328c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013290:	b29b      	uxth	r3, r3
 8013292:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	781b      	ldrb	r3, [r3, #0]
 801329a:	009b      	lsls	r3, r3, #2
 801329c:	4413      	add	r3, r2
 801329e:	881b      	ldrh	r3, [r3, #0]
 80132a0:	b29b      	uxth	r3, r3
 80132a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80132aa:	84bb      	strh	r3, [r7, #36]	; 0x24
 80132ac:	687a      	ldr	r2, [r7, #4]
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	781b      	ldrb	r3, [r3, #0]
 80132b2:	009b      	lsls	r3, r3, #2
 80132b4:	441a      	add	r2, r3
 80132b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132c8:	b29b      	uxth	r3, r3
 80132ca:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	683b      	ldr	r3, [r7, #0]
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	4413      	add	r3, r2
 80132d6:	881b      	ldrh	r3, [r3, #0]
 80132d8:	b29b      	uxth	r3, r3
 80132da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132e2:	847b      	strh	r3, [r7, #34]	; 0x22
 80132e4:	687a      	ldr	r2, [r7, #4]
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	009b      	lsls	r3, r3, #2
 80132ec:	441a      	add	r2, r3
 80132ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80132f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80132fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013300:	b29b      	uxth	r3, r3
 8013302:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013304:	2300      	movs	r3, #0
}
 8013306:	4618      	mov	r0, r3
 8013308:	3734      	adds	r7, #52	; 0x34
 801330a:	46bd      	mov	sp, r7
 801330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013310:	4770      	bx	lr

08013312 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013312:	b580      	push	{r7, lr}
 8013314:	b0cc      	sub	sp, #304	; 0x130
 8013316:	af00      	add	r7, sp, #0
 8013318:	1d3b      	adds	r3, r7, #4
 801331a:	6018      	str	r0, [r3, #0]
 801331c:	463b      	mov	r3, r7
 801331e:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013320:	463b      	mov	r3, r7
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	785b      	ldrb	r3, [r3, #1]
 8013326:	2b01      	cmp	r3, #1
 8013328:	f040 872e 	bne.w	8014188 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801332c:	463b      	mov	r3, r7
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	699a      	ldr	r2, [r3, #24]
 8013332:	463b      	mov	r3, r7
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	691b      	ldr	r3, [r3, #16]
 8013338:	429a      	cmp	r2, r3
 801333a:	d905      	bls.n	8013348 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 801333c:	463b      	mov	r3, r7
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	691b      	ldr	r3, [r3, #16]
 8013342:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013346:	e004      	b.n	8013352 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8013348:	463b      	mov	r3, r7
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	699b      	ldr	r3, [r3, #24]
 801334e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013352:	463b      	mov	r3, r7
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	7b1b      	ldrb	r3, [r3, #12]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d134      	bne.n	80133c6 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 801335c:	463b      	mov	r3, r7
 801335e:	681b      	ldr	r3, [r3, #0]
 8013360:	6959      	ldr	r1, [r3, #20]
 8013362:	463b      	mov	r3, r7
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	88da      	ldrh	r2, [r3, #6]
 8013368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801336c:	b29b      	uxth	r3, r3
 801336e:	1d38      	adds	r0, r7, #4
 8013370:	6800      	ldr	r0, [r0, #0]
 8013372:	f001 fc20 	bl	8014bb6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013376:	f107 0310 	add.w	r3, r7, #16
 801337a:	1d3a      	adds	r2, r7, #4
 801337c:	6812      	ldr	r2, [r2, #0]
 801337e:	601a      	str	r2, [r3, #0]
 8013380:	1d3b      	adds	r3, r7, #4
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013388:	b29b      	uxth	r3, r3
 801338a:	4619      	mov	r1, r3
 801338c:	f107 0310 	add.w	r3, r7, #16
 8013390:	f107 0210 	add.w	r2, r7, #16
 8013394:	6812      	ldr	r2, [r2, #0]
 8013396:	440a      	add	r2, r1
 8013398:	601a      	str	r2, [r3, #0]
 801339a:	463b      	mov	r3, r7
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	00da      	lsls	r2, r3, #3
 80133a2:	f107 0310 	add.w	r3, r7, #16
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4413      	add	r3, r2
 80133aa:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80133ae:	f107 030c 	add.w	r3, r7, #12
 80133b2:	601a      	str	r2, [r3, #0]
 80133b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	f107 030c 	add.w	r3, r7, #12
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	801a      	strh	r2, [r3, #0]
 80133c2:	f000 beac 	b.w	801411e <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80133c6:	463b      	mov	r3, r7
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	78db      	ldrb	r3, [r3, #3]
 80133cc:	2b02      	cmp	r3, #2
 80133ce:	f040 838c 	bne.w	8013aea <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80133d2:	463b      	mov	r3, r7
 80133d4:	681b      	ldr	r3, [r3, #0]
 80133d6:	6a1a      	ldr	r2, [r3, #32]
 80133d8:	463b      	mov	r3, r7
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	691b      	ldr	r3, [r3, #16]
 80133de:	429a      	cmp	r2, r3
 80133e0:	f240 8330 	bls.w	8013a44 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80133e4:	1d3b      	adds	r3, r7, #4
 80133e6:	681a      	ldr	r2, [r3, #0]
 80133e8:	463b      	mov	r3, r7
 80133ea:	681b      	ldr	r3, [r3, #0]
 80133ec:	781b      	ldrb	r3, [r3, #0]
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	4413      	add	r3, r2
 80133f2:	881b      	ldrh	r3, [r3, #0]
 80133f4:	b29b      	uxth	r3, r3
 80133f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80133fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80133fe:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013402:	1d3b      	adds	r3, r7, #4
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	463b      	mov	r3, r7
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	441a      	add	r2, r3
 8013410:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013414:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013418:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801341c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013424:	b29b      	uxth	r3, r3
 8013426:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013428:	463b      	mov	r3, r7
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	6a1a      	ldr	r2, [r3, #32]
 801342e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013432:	1ad2      	subs	r2, r2, r3
 8013434:	463b      	mov	r3, r7
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801343a:	1d3b      	adds	r3, r7, #4
 801343c:	681a      	ldr	r2, [r3, #0]
 801343e:	463b      	mov	r3, r7
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	781b      	ldrb	r3, [r3, #0]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4413      	add	r3, r2
 8013448:	881b      	ldrh	r3, [r3, #0]
 801344a:	b29b      	uxth	r3, r3
 801344c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013450:	2b00      	cmp	r3, #0
 8013452:	f000 819e 	beq.w	8013792 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013456:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801345a:	1d3a      	adds	r2, r7, #4
 801345c:	6812      	ldr	r2, [r2, #0]
 801345e:	601a      	str	r2, [r3, #0]
 8013460:	463b      	mov	r3, r7
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	785b      	ldrb	r3, [r3, #1]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d17a      	bne.n	8013560 <USB_EPStartXfer+0x24e>
 801346a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801346e:	1d3a      	adds	r2, r7, #4
 8013470:	6812      	ldr	r2, [r2, #0]
 8013472:	601a      	str	r2, [r3, #0]
 8013474:	1d3b      	adds	r3, r7, #4
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801347c:	b29b      	uxth	r3, r3
 801347e:	4619      	mov	r1, r3
 8013480:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013484:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013488:	6812      	ldr	r2, [r2, #0]
 801348a:	440a      	add	r2, r1
 801348c:	601a      	str	r2, [r3, #0]
 801348e:	463b      	mov	r3, r7
 8013490:	681b      	ldr	r3, [r3, #0]
 8013492:	781b      	ldrb	r3, [r3, #0]
 8013494:	00da      	lsls	r2, r3, #3
 8013496:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	4413      	add	r3, r2
 801349e:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80134a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134a6:	601a      	str	r2, [r3, #0]
 80134a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d11a      	bne.n	80134e6 <USB_EPStartXfer+0x1d4>
 80134b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	881b      	ldrh	r3, [r3, #0]
 80134b8:	b29b      	uxth	r3, r3
 80134ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80134be:	b29a      	uxth	r2, r3
 80134c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	801a      	strh	r2, [r3, #0]
 80134c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134cc:	681b      	ldr	r3, [r3, #0]
 80134ce:	881b      	ldrh	r3, [r3, #0]
 80134d0:	b29b      	uxth	r3, r3
 80134d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80134d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80134da:	b29a      	uxth	r2, r3
 80134dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	801a      	strh	r2, [r3, #0]
 80134e4:	e062      	b.n	80135ac <USB_EPStartXfer+0x29a>
 80134e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134ea:	2b3e      	cmp	r3, #62	; 0x3e
 80134ec:	d819      	bhi.n	8013522 <USB_EPStartXfer+0x210>
 80134ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134f2:	085b      	lsrs	r3, r3, #1
 80134f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80134f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134fc:	f003 0301 	and.w	r3, r3, #1
 8013500:	2b00      	cmp	r3, #0
 8013502:	d004      	beq.n	801350e <USB_EPStartXfer+0x1fc>
 8013504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013508:	3301      	adds	r3, #1
 801350a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801350e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013512:	b29b      	uxth	r3, r3
 8013514:	029b      	lsls	r3, r3, #10
 8013516:	b29a      	uxth	r2, r3
 8013518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	801a      	strh	r2, [r3, #0]
 8013520:	e044      	b.n	80135ac <USB_EPStartXfer+0x29a>
 8013522:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013526:	095b      	lsrs	r3, r3, #5
 8013528:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801352c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013530:	f003 031f 	and.w	r3, r3, #31
 8013534:	2b00      	cmp	r3, #0
 8013536:	d104      	bne.n	8013542 <USB_EPStartXfer+0x230>
 8013538:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801353c:	3b01      	subs	r3, #1
 801353e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013546:	b29b      	uxth	r3, r3
 8013548:	029b      	lsls	r3, r3, #10
 801354a:	b29b      	uxth	r3, r3
 801354c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013554:	b29a      	uxth	r2, r3
 8013556:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	801a      	strh	r2, [r3, #0]
 801355e:	e025      	b.n	80135ac <USB_EPStartXfer+0x29a>
 8013560:	463b      	mov	r3, r7
 8013562:	681b      	ldr	r3, [r3, #0]
 8013564:	785b      	ldrb	r3, [r3, #1]
 8013566:	2b01      	cmp	r3, #1
 8013568:	d120      	bne.n	80135ac <USB_EPStartXfer+0x29a>
 801356a:	1d3b      	adds	r3, r7, #4
 801356c:	681b      	ldr	r3, [r3, #0]
 801356e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013572:	b29b      	uxth	r3, r3
 8013574:	4619      	mov	r1, r3
 8013576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801357a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 801357e:	6812      	ldr	r2, [r2, #0]
 8013580:	440a      	add	r2, r1
 8013582:	601a      	str	r2, [r3, #0]
 8013584:	463b      	mov	r3, r7
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	781b      	ldrb	r3, [r3, #0]
 801358a:	00da      	lsls	r2, r3, #3
 801358c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	4413      	add	r3, r2
 8013594:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8013598:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801359c:	601a      	str	r2, [r3, #0]
 801359e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80135a2:	b29a      	uxth	r2, r3
 80135a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80135ac:	463b      	mov	r3, r7
 80135ae:	681b      	ldr	r3, [r3, #0]
 80135b0:	895b      	ldrh	r3, [r3, #10]
 80135b2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80135b6:	463b      	mov	r3, r7
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	6959      	ldr	r1, [r3, #20]
 80135bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80135c6:	1d38      	adds	r0, r7, #4
 80135c8:	6800      	ldr	r0, [r0, #0]
 80135ca:	f001 faf4 	bl	8014bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 80135ce:	463b      	mov	r3, r7
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	695a      	ldr	r2, [r3, #20]
 80135d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80135d8:	441a      	add	r2, r3
 80135da:	463b      	mov	r3, r7
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80135e0:	463b      	mov	r3, r7
 80135e2:	681b      	ldr	r3, [r3, #0]
 80135e4:	6a1a      	ldr	r2, [r3, #32]
 80135e6:	463b      	mov	r3, r7
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	429a      	cmp	r2, r3
 80135ee:	d909      	bls.n	8013604 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 80135f0:	463b      	mov	r3, r7
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	6a1a      	ldr	r2, [r3, #32]
 80135f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80135fa:	1ad2      	subs	r2, r2, r3
 80135fc:	463b      	mov	r3, r7
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	621a      	str	r2, [r3, #32]
 8013602:	e008      	b.n	8013616 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8013604:	463b      	mov	r3, r7
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	6a1b      	ldr	r3, [r3, #32]
 801360a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 801360e:	463b      	mov	r3, r7
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2200      	movs	r2, #0
 8013614:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013616:	463b      	mov	r3, r7
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	785b      	ldrb	r3, [r3, #1]
 801361c:	2b00      	cmp	r3, #0
 801361e:	d17a      	bne.n	8013716 <USB_EPStartXfer+0x404>
 8013620:	f107 0318 	add.w	r3, r7, #24
 8013624:	1d3a      	adds	r2, r7, #4
 8013626:	6812      	ldr	r2, [r2, #0]
 8013628:	601a      	str	r2, [r3, #0]
 801362a:	1d3b      	adds	r3, r7, #4
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013632:	b29b      	uxth	r3, r3
 8013634:	4619      	mov	r1, r3
 8013636:	f107 0318 	add.w	r3, r7, #24
 801363a:	f107 0218 	add.w	r2, r7, #24
 801363e:	6812      	ldr	r2, [r2, #0]
 8013640:	440a      	add	r2, r1
 8013642:	601a      	str	r2, [r3, #0]
 8013644:	463b      	mov	r3, r7
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	781b      	ldrb	r3, [r3, #0]
 801364a:	00da      	lsls	r2, r3, #3
 801364c:	f107 0318 	add.w	r3, r7, #24
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	4413      	add	r3, r2
 8013654:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8013658:	f107 0314 	add.w	r3, r7, #20
 801365c:	601a      	str	r2, [r3, #0]
 801365e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013662:	2b00      	cmp	r3, #0
 8013664:	d11a      	bne.n	801369c <USB_EPStartXfer+0x38a>
 8013666:	f107 0314 	add.w	r3, r7, #20
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	881b      	ldrh	r3, [r3, #0]
 801366e:	b29b      	uxth	r3, r3
 8013670:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013674:	b29a      	uxth	r2, r3
 8013676:	f107 0314 	add.w	r3, r7, #20
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	801a      	strh	r2, [r3, #0]
 801367e:	f107 0314 	add.w	r3, r7, #20
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	881b      	ldrh	r3, [r3, #0]
 8013686:	b29b      	uxth	r3, r3
 8013688:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801368c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013690:	b29a      	uxth	r2, r3
 8013692:	f107 0314 	add.w	r3, r7, #20
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	801a      	strh	r2, [r3, #0]
 801369a:	e067      	b.n	801376c <USB_EPStartXfer+0x45a>
 801369c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136a0:	2b3e      	cmp	r3, #62	; 0x3e
 80136a2:	d819      	bhi.n	80136d8 <USB_EPStartXfer+0x3c6>
 80136a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136a8:	085b      	lsrs	r3, r3, #1
 80136aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80136ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136b2:	f003 0301 	and.w	r3, r3, #1
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d004      	beq.n	80136c4 <USB_EPStartXfer+0x3b2>
 80136ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80136be:	3301      	adds	r3, #1
 80136c0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80136c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80136c8:	b29b      	uxth	r3, r3
 80136ca:	029b      	lsls	r3, r3, #10
 80136cc:	b29a      	uxth	r2, r3
 80136ce:	f107 0314 	add.w	r3, r7, #20
 80136d2:	681b      	ldr	r3, [r3, #0]
 80136d4:	801a      	strh	r2, [r3, #0]
 80136d6:	e049      	b.n	801376c <USB_EPStartXfer+0x45a>
 80136d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136dc:	095b      	lsrs	r3, r3, #5
 80136de:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80136e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136e6:	f003 031f 	and.w	r3, r3, #31
 80136ea:	2b00      	cmp	r3, #0
 80136ec:	d104      	bne.n	80136f8 <USB_EPStartXfer+0x3e6>
 80136ee:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80136f2:	3b01      	subs	r3, #1
 80136f4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80136f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	029b      	lsls	r3, r3, #10
 8013700:	b29b      	uxth	r3, r3
 8013702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801370a:	b29a      	uxth	r2, r3
 801370c:	f107 0314 	add.w	r3, r7, #20
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	801a      	strh	r2, [r3, #0]
 8013714:	e02a      	b.n	801376c <USB_EPStartXfer+0x45a>
 8013716:	463b      	mov	r3, r7
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	785b      	ldrb	r3, [r3, #1]
 801371c:	2b01      	cmp	r3, #1
 801371e:	d125      	bne.n	801376c <USB_EPStartXfer+0x45a>
 8013720:	f107 0320 	add.w	r3, r7, #32
 8013724:	1d3a      	adds	r2, r7, #4
 8013726:	6812      	ldr	r2, [r2, #0]
 8013728:	601a      	str	r2, [r3, #0]
 801372a:	1d3b      	adds	r3, r7, #4
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013732:	b29b      	uxth	r3, r3
 8013734:	4619      	mov	r1, r3
 8013736:	f107 0320 	add.w	r3, r7, #32
 801373a:	f107 0220 	add.w	r2, r7, #32
 801373e:	6812      	ldr	r2, [r2, #0]
 8013740:	440a      	add	r2, r1
 8013742:	601a      	str	r2, [r3, #0]
 8013744:	463b      	mov	r3, r7
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	781b      	ldrb	r3, [r3, #0]
 801374a:	00da      	lsls	r2, r3, #3
 801374c:	f107 0320 	add.w	r3, r7, #32
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	4413      	add	r3, r2
 8013754:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8013758:	f107 031c 	add.w	r3, r7, #28
 801375c:	601a      	str	r2, [r3, #0]
 801375e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013762:	b29a      	uxth	r2, r3
 8013764:	f107 031c 	add.w	r3, r7, #28
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 801376c:	463b      	mov	r3, r7
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	891b      	ldrh	r3, [r3, #8]
 8013772:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013776:	463b      	mov	r3, r7
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	6959      	ldr	r1, [r3, #20]
 801377c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013780:	b29b      	uxth	r3, r3
 8013782:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013786:	1d38      	adds	r0, r7, #4
 8013788:	6800      	ldr	r0, [r0, #0]
 801378a:	f001 fa14 	bl	8014bb6 <USB_WritePMA>
 801378e:	f000 bcc6 	b.w	801411e <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013792:	463b      	mov	r3, r7
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	785b      	ldrb	r3, [r3, #1]
 8013798:	2b00      	cmp	r3, #0
 801379a:	d164      	bne.n	8013866 <USB_EPStartXfer+0x554>
 801379c:	1d3b      	adds	r3, r7, #4
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80137a2:	1d3b      	adds	r3, r7, #4
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	461a      	mov	r2, r3
 80137ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137b0:	4413      	add	r3, r2
 80137b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80137b4:	463b      	mov	r3, r7
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	781b      	ldrb	r3, [r3, #0]
 80137ba:	00da      	lsls	r2, r3, #3
 80137bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80137be:	4413      	add	r3, r2
 80137c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80137c4:	647b      	str	r3, [r7, #68]	; 0x44
 80137c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d112      	bne.n	80137f4 <USB_EPStartXfer+0x4e2>
 80137ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137d0:	881b      	ldrh	r3, [r3, #0]
 80137d2:	b29b      	uxth	r3, r3
 80137d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80137d8:	b29a      	uxth	r2, r3
 80137da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137dc:	801a      	strh	r2, [r3, #0]
 80137de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80137e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80137f0:	801a      	strh	r2, [r3, #0]
 80137f2:	e057      	b.n	80138a4 <USB_EPStartXfer+0x592>
 80137f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80137f8:	2b3e      	cmp	r3, #62	; 0x3e
 80137fa:	d817      	bhi.n	801382c <USB_EPStartXfer+0x51a>
 80137fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013800:	085b      	lsrs	r3, r3, #1
 8013802:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801380a:	f003 0301 	and.w	r3, r3, #1
 801380e:	2b00      	cmp	r3, #0
 8013810:	d004      	beq.n	801381c <USB_EPStartXfer+0x50a>
 8013812:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013816:	3301      	adds	r3, #1
 8013818:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801381c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013820:	b29b      	uxth	r3, r3
 8013822:	029b      	lsls	r3, r3, #10
 8013824:	b29a      	uxth	r2, r3
 8013826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013828:	801a      	strh	r2, [r3, #0]
 801382a:	e03b      	b.n	80138a4 <USB_EPStartXfer+0x592>
 801382c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013830:	095b      	lsrs	r3, r3, #5
 8013832:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013836:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801383a:	f003 031f 	and.w	r3, r3, #31
 801383e:	2b00      	cmp	r3, #0
 8013840:	d104      	bne.n	801384c <USB_EPStartXfer+0x53a>
 8013842:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013846:	3b01      	subs	r3, #1
 8013848:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801384c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013850:	b29b      	uxth	r3, r3
 8013852:	029b      	lsls	r3, r3, #10
 8013854:	b29b      	uxth	r3, r3
 8013856:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801385a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801385e:	b29a      	uxth	r2, r3
 8013860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013862:	801a      	strh	r2, [r3, #0]
 8013864:	e01e      	b.n	80138a4 <USB_EPStartXfer+0x592>
 8013866:	463b      	mov	r3, r7
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	785b      	ldrb	r3, [r3, #1]
 801386c:	2b01      	cmp	r3, #1
 801386e:	d119      	bne.n	80138a4 <USB_EPStartXfer+0x592>
 8013870:	1d3b      	adds	r3, r7, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	653b      	str	r3, [r7, #80]	; 0x50
 8013876:	1d3b      	adds	r3, r7, #4
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801387e:	b29b      	uxth	r3, r3
 8013880:	461a      	mov	r2, r3
 8013882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013884:	4413      	add	r3, r2
 8013886:	653b      	str	r3, [r7, #80]	; 0x50
 8013888:	463b      	mov	r3, r7
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	781b      	ldrb	r3, [r3, #0]
 801388e:	00da      	lsls	r2, r3, #3
 8013890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013892:	4413      	add	r3, r2
 8013894:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013898:	64fb      	str	r3, [r7, #76]	; 0x4c
 801389a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801389e:	b29a      	uxth	r2, r3
 80138a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138a2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80138a4:	463b      	mov	r3, r7
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	891b      	ldrh	r3, [r3, #8]
 80138aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80138ae:	463b      	mov	r3, r7
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	6959      	ldr	r1, [r3, #20]
 80138b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138b8:	b29b      	uxth	r3, r3
 80138ba:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80138be:	1d38      	adds	r0, r7, #4
 80138c0:	6800      	ldr	r0, [r0, #0]
 80138c2:	f001 f978 	bl	8014bb6 <USB_WritePMA>
            ep->xfer_buff += len;
 80138c6:	463b      	mov	r3, r7
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	695a      	ldr	r2, [r3, #20]
 80138cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138d0:	441a      	add	r2, r3
 80138d2:	463b      	mov	r3, r7
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80138d8:	463b      	mov	r3, r7
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	6a1a      	ldr	r2, [r3, #32]
 80138de:	463b      	mov	r3, r7
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	691b      	ldr	r3, [r3, #16]
 80138e4:	429a      	cmp	r2, r3
 80138e6:	d909      	bls.n	80138fc <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80138e8:	463b      	mov	r3, r7
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	6a1a      	ldr	r2, [r3, #32]
 80138ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80138f2:	1ad2      	subs	r2, r2, r3
 80138f4:	463b      	mov	r3, r7
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	621a      	str	r2, [r3, #32]
 80138fa:	e008      	b.n	801390e <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 80138fc:	463b      	mov	r3, r7
 80138fe:	681b      	ldr	r3, [r3, #0]
 8013900:	6a1b      	ldr	r3, [r3, #32]
 8013902:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8013906:	463b      	mov	r3, r7
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	2200      	movs	r2, #0
 801390c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801390e:	1d3b      	adds	r3, r7, #4
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	643b      	str	r3, [r7, #64]	; 0x40
 8013914:	463b      	mov	r3, r7
 8013916:	681b      	ldr	r3, [r3, #0]
 8013918:	785b      	ldrb	r3, [r3, #1]
 801391a:	2b00      	cmp	r3, #0
 801391c:	d164      	bne.n	80139e8 <USB_EPStartXfer+0x6d6>
 801391e:	1d3b      	adds	r3, r7, #4
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	63bb      	str	r3, [r7, #56]	; 0x38
 8013924:	1d3b      	adds	r3, r7, #4
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801392c:	b29b      	uxth	r3, r3
 801392e:	461a      	mov	r2, r3
 8013930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013932:	4413      	add	r3, r2
 8013934:	63bb      	str	r3, [r7, #56]	; 0x38
 8013936:	463b      	mov	r3, r7
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	781b      	ldrb	r3, [r3, #0]
 801393c:	00da      	lsls	r2, r3, #3
 801393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013940:	4413      	add	r3, r2
 8013942:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013946:	637b      	str	r3, [r7, #52]	; 0x34
 8013948:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801394c:	2b00      	cmp	r3, #0
 801394e:	d112      	bne.n	8013976 <USB_EPStartXfer+0x664>
 8013950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013952:	881b      	ldrh	r3, [r3, #0]
 8013954:	b29b      	uxth	r3, r3
 8013956:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801395a:	b29a      	uxth	r2, r3
 801395c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801395e:	801a      	strh	r2, [r3, #0]
 8013960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	b29b      	uxth	r3, r3
 8013966:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801396a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801396e:	b29a      	uxth	r2, r3
 8013970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013972:	801a      	strh	r2, [r3, #0]
 8013974:	e054      	b.n	8013a20 <USB_EPStartXfer+0x70e>
 8013976:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801397a:	2b3e      	cmp	r3, #62	; 0x3e
 801397c:	d817      	bhi.n	80139ae <USB_EPStartXfer+0x69c>
 801397e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013982:	085b      	lsrs	r3, r3, #1
 8013984:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8013988:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801398c:	f003 0301 	and.w	r3, r3, #1
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <USB_EPStartXfer+0x68c>
 8013994:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8013998:	3301      	adds	r3, #1
 801399a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80139a2:	b29b      	uxth	r3, r3
 80139a4:	029b      	lsls	r3, r3, #10
 80139a6:	b29a      	uxth	r2, r3
 80139a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139aa:	801a      	strh	r2, [r3, #0]
 80139ac:	e038      	b.n	8013a20 <USB_EPStartXfer+0x70e>
 80139ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80139b2:	095b      	lsrs	r3, r3, #5
 80139b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80139b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80139bc:	f003 031f 	and.w	r3, r3, #31
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d104      	bne.n	80139ce <USB_EPStartXfer+0x6bc>
 80139c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80139c8:	3b01      	subs	r3, #1
 80139ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80139ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	029b      	lsls	r3, r3, #10
 80139d6:	b29b      	uxth	r3, r3
 80139d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80139dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80139e0:	b29a      	uxth	r2, r3
 80139e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e4:	801a      	strh	r2, [r3, #0]
 80139e6:	e01b      	b.n	8013a20 <USB_EPStartXfer+0x70e>
 80139e8:	463b      	mov	r3, r7
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	785b      	ldrb	r3, [r3, #1]
 80139ee:	2b01      	cmp	r3, #1
 80139f0:	d116      	bne.n	8013a20 <USB_EPStartXfer+0x70e>
 80139f2:	1d3b      	adds	r3, r7, #4
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80139fa:	b29b      	uxth	r3, r3
 80139fc:	461a      	mov	r2, r3
 80139fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a00:	4413      	add	r3, r2
 8013a02:	643b      	str	r3, [r7, #64]	; 0x40
 8013a04:	463b      	mov	r3, r7
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	781b      	ldrb	r3, [r3, #0]
 8013a0a:	00da      	lsls	r2, r3, #3
 8013a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013a0e:	4413      	add	r3, r2
 8013a10:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013a14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013a16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013a1a:	b29a      	uxth	r2, r3
 8013a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013a20:	463b      	mov	r3, r7
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	895b      	ldrh	r3, [r3, #10]
 8013a26:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013a2a:	463b      	mov	r3, r7
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	6959      	ldr	r1, [r3, #20]
 8013a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013a34:	b29b      	uxth	r3, r3
 8013a36:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013a3a:	1d38      	adds	r0, r7, #4
 8013a3c:	6800      	ldr	r0, [r0, #0]
 8013a3e:	f001 f8ba 	bl	8014bb6 <USB_WritePMA>
 8013a42:	e36c      	b.n	801411e <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8013a44:	463b      	mov	r3, r7
 8013a46:	681b      	ldr	r3, [r3, #0]
 8013a48:	6a1b      	ldr	r3, [r3, #32]
 8013a4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8013a4e:	1d3b      	adds	r3, r7, #4
 8013a50:	681a      	ldr	r2, [r3, #0]
 8013a52:	463b      	mov	r3, r7
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	009b      	lsls	r3, r3, #2
 8013a5a:	4413      	add	r3, r2
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8013a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a68:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8013a6c:	1d3b      	adds	r3, r7, #4
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	463b      	mov	r3, r7
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	781b      	ldrb	r3, [r3, #0]
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	441a      	add	r2, r3
 8013a7a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8013a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a8e:	b29b      	uxth	r3, r3
 8013a90:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013a92:	1d3b      	adds	r3, r7, #4
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013a98:	1d3b      	adds	r3, r7, #4
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	461a      	mov	r2, r3
 8013aa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013aa6:	4413      	add	r3, r2
 8013aa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8013aaa:	463b      	mov	r3, r7
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	781b      	ldrb	r3, [r3, #0]
 8013ab0:	00da      	lsls	r2, r3, #3
 8013ab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013ab4:	4413      	add	r3, r2
 8013ab6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013aba:	65bb      	str	r3, [r7, #88]	; 0x58
 8013abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ac0:	b29a      	uxth	r2, r3
 8013ac2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013ac4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	891b      	ldrh	r3, [r3, #8]
 8013acc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ad0:	463b      	mov	r3, r7
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	6959      	ldr	r1, [r3, #20]
 8013ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ada:	b29b      	uxth	r3, r3
 8013adc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013ae0:	1d38      	adds	r0, r7, #4
 8013ae2:	6800      	ldr	r0, [r0, #0]
 8013ae4:	f001 f867 	bl	8014bb6 <USB_WritePMA>
 8013ae8:	e319      	b.n	801411e <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8013aea:	1d3b      	adds	r3, r7, #4
 8013aec:	681a      	ldr	r2, [r3, #0]
 8013aee:	463b      	mov	r3, r7
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	781b      	ldrb	r3, [r3, #0]
 8013af4:	009b      	lsls	r3, r3, #2
 8013af6:	4413      	add	r3, r2
 8013af8:	881b      	ldrh	r3, [r3, #0]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013b00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b04:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8013b08:	1d3b      	adds	r3, r7, #4
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	463b      	mov	r3, r7
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	781b      	ldrb	r3, [r3, #0]
 8013b12:	009b      	lsls	r3, r3, #2
 8013b14:	441a      	add	r2, r3
 8013b16:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8013b1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013b1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013b22:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013b26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b2a:	b29b      	uxth	r3, r3
 8013b2c:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8013b2e:	463b      	mov	r3, r7
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	6a1a      	ldr	r2, [r3, #32]
 8013b34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013b38:	1ad2      	subs	r2, r2, r3
 8013b3a:	463b      	mov	r3, r7
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013b40:	1d3b      	adds	r3, r7, #4
 8013b42:	681a      	ldr	r2, [r3, #0]
 8013b44:	463b      	mov	r3, r7
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	781b      	ldrb	r3, [r3, #0]
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	4413      	add	r3, r2
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	f000 8162 	beq.w	8013e20 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013b5c:	1d3b      	adds	r3, r7, #4
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013b64:	463b      	mov	r3, r7
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	785b      	ldrb	r3, [r3, #1]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d164      	bne.n	8013c38 <USB_EPStartXfer+0x926>
 8013b6e:	1d3b      	adds	r3, r7, #4
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	67bb      	str	r3, [r7, #120]	; 0x78
 8013b74:	1d3b      	adds	r3, r7, #4
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	461a      	mov	r2, r3
 8013b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b82:	4413      	add	r3, r2
 8013b84:	67bb      	str	r3, [r7, #120]	; 0x78
 8013b86:	463b      	mov	r3, r7
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	781b      	ldrb	r3, [r3, #0]
 8013b8c:	00da      	lsls	r2, r3, #3
 8013b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013b90:	4413      	add	r3, r2
 8013b92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013b96:	677b      	str	r3, [r7, #116]	; 0x74
 8013b98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d112      	bne.n	8013bc6 <USB_EPStartXfer+0x8b4>
 8013ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013ba2:	881b      	ldrh	r3, [r3, #0]
 8013ba4:	b29b      	uxth	r3, r3
 8013ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013baa:	b29a      	uxth	r2, r3
 8013bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bae:	801a      	strh	r2, [r3, #0]
 8013bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bb2:	881b      	ldrh	r3, [r3, #0]
 8013bb4:	b29b      	uxth	r3, r3
 8013bb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013bba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bc2:	801a      	strh	r2, [r3, #0]
 8013bc4:	e057      	b.n	8013c76 <USB_EPStartXfer+0x964>
 8013bc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013bca:	2b3e      	cmp	r3, #62	; 0x3e
 8013bcc:	d817      	bhi.n	8013bfe <USB_EPStartXfer+0x8ec>
 8013bce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013bd2:	085b      	lsrs	r3, r3, #1
 8013bd4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013bdc:	f003 0301 	and.w	r3, r3, #1
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d004      	beq.n	8013bee <USB_EPStartXfer+0x8dc>
 8013be4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013be8:	3301      	adds	r3, #1
 8013bea:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013bee:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013bf2:	b29b      	uxth	r3, r3
 8013bf4:	029b      	lsls	r3, r3, #10
 8013bf6:	b29a      	uxth	r2, r3
 8013bf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013bfa:	801a      	strh	r2, [r3, #0]
 8013bfc:	e03b      	b.n	8013c76 <USB_EPStartXfer+0x964>
 8013bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c02:	095b      	lsrs	r3, r3, #5
 8013c04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013c08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c0c:	f003 031f 	and.w	r3, r3, #31
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d104      	bne.n	8013c1e <USB_EPStartXfer+0x90c>
 8013c14:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c18:	3b01      	subs	r3, #1
 8013c1a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8013c1e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8013c22:	b29b      	uxth	r3, r3
 8013c24:	029b      	lsls	r3, r3, #10
 8013c26:	b29b      	uxth	r3, r3
 8013c28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c30:	b29a      	uxth	r2, r3
 8013c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013c34:	801a      	strh	r2, [r3, #0]
 8013c36:	e01e      	b.n	8013c76 <USB_EPStartXfer+0x964>
 8013c38:	463b      	mov	r3, r7
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	785b      	ldrb	r3, [r3, #1]
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d119      	bne.n	8013c76 <USB_EPStartXfer+0x964>
 8013c42:	1d3b      	adds	r3, r7, #4
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	461a      	mov	r2, r3
 8013c4e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c52:	4413      	add	r3, r2
 8013c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013c58:	463b      	mov	r3, r7
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	00da      	lsls	r2, r3, #3
 8013c60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013c64:	4413      	add	r3, r2
 8013c66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013c6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013c6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013c74:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8013c76:	463b      	mov	r3, r7
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	895b      	ldrh	r3, [r3, #10]
 8013c7c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013c80:	463b      	mov	r3, r7
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	6959      	ldr	r1, [r3, #20]
 8013c86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013c90:	1d38      	adds	r0, r7, #4
 8013c92:	6800      	ldr	r0, [r0, #0]
 8013c94:	f000 ff8f 	bl	8014bb6 <USB_WritePMA>
          ep->xfer_buff += len;
 8013c98:	463b      	mov	r3, r7
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	695a      	ldr	r2, [r3, #20]
 8013c9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ca2:	441a      	add	r2, r3
 8013ca4:	463b      	mov	r3, r7
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8013caa:	463b      	mov	r3, r7
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	6a1a      	ldr	r2, [r3, #32]
 8013cb0:	463b      	mov	r3, r7
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	691b      	ldr	r3, [r3, #16]
 8013cb6:	429a      	cmp	r2, r3
 8013cb8:	d909      	bls.n	8013cce <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8013cba:	463b      	mov	r3, r7
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	6a1a      	ldr	r2, [r3, #32]
 8013cc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013cc4:	1ad2      	subs	r2, r2, r3
 8013cc6:	463b      	mov	r3, r7
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	621a      	str	r2, [r3, #32]
 8013ccc:	e008      	b.n	8013ce0 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8013cce:	463b      	mov	r3, r7
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	6a1b      	ldr	r3, [r3, #32]
 8013cd4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8013cd8:	463b      	mov	r3, r7
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8013ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f000 821a 	beq.w	801411e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013cea:	463b      	mov	r3, r7
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	785b      	ldrb	r3, [r3, #1]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d164      	bne.n	8013dbe <USB_EPStartXfer+0xaac>
 8013cf4:	1d3b      	adds	r3, r7, #4
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	66bb      	str	r3, [r7, #104]	; 0x68
 8013cfa:	1d3b      	adds	r3, r7, #4
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	461a      	mov	r2, r3
 8013d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d08:	4413      	add	r3, r2
 8013d0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8013d0c:	463b      	mov	r3, r7
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	00da      	lsls	r2, r3, #3
 8013d14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013d16:	4413      	add	r3, r2
 8013d18:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013d1c:	667b      	str	r3, [r7, #100]	; 0x64
 8013d1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d112      	bne.n	8013d4c <USB_EPStartXfer+0xa3a>
 8013d26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	b29b      	uxth	r3, r3
 8013d2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013d30:	b29a      	uxth	r2, r3
 8013d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d34:	801a      	strh	r2, [r3, #0]
 8013d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d38:	881b      	ldrh	r3, [r3, #0]
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013d44:	b29a      	uxth	r2, r3
 8013d46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d48:	801a      	strh	r2, [r3, #0]
 8013d4a:	e057      	b.n	8013dfc <USB_EPStartXfer+0xaea>
 8013d4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d50:	2b3e      	cmp	r3, #62	; 0x3e
 8013d52:	d817      	bhi.n	8013d84 <USB_EPStartXfer+0xa72>
 8013d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d58:	085b      	lsrs	r3, r3, #1
 8013d5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013d5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d62:	f003 0301 	and.w	r3, r3, #1
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d004      	beq.n	8013d74 <USB_EPStartXfer+0xa62>
 8013d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d6e:	3301      	adds	r3, #1
 8013d70:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	029b      	lsls	r3, r3, #10
 8013d7c:	b29a      	uxth	r2, r3
 8013d7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013d80:	801a      	strh	r2, [r3, #0]
 8013d82:	e03b      	b.n	8013dfc <USB_EPStartXfer+0xaea>
 8013d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d88:	095b      	lsrs	r3, r3, #5
 8013d8a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d92:	f003 031f 	and.w	r3, r3, #31
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d104      	bne.n	8013da4 <USB_EPStartXfer+0xa92>
 8013d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013d9e:	3b01      	subs	r3, #1
 8013da0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8013da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8013da8:	b29b      	uxth	r3, r3
 8013daa:	029b      	lsls	r3, r3, #10
 8013dac:	b29b      	uxth	r3, r3
 8013dae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013db2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013db6:	b29a      	uxth	r2, r3
 8013db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8013dba:	801a      	strh	r2, [r3, #0]
 8013dbc:	e01e      	b.n	8013dfc <USB_EPStartXfer+0xaea>
 8013dbe:	463b      	mov	r3, r7
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	785b      	ldrb	r3, [r3, #1]
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d119      	bne.n	8013dfc <USB_EPStartXfer+0xaea>
 8013dc8:	1d3b      	adds	r3, r7, #4
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	673b      	str	r3, [r7, #112]	; 0x70
 8013dce:	1d3b      	adds	r3, r7, #4
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013dd6:	b29b      	uxth	r3, r3
 8013dd8:	461a      	mov	r2, r3
 8013dda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013ddc:	4413      	add	r3, r2
 8013dde:	673b      	str	r3, [r7, #112]	; 0x70
 8013de0:	463b      	mov	r3, r7
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	781b      	ldrb	r3, [r3, #0]
 8013de6:	00da      	lsls	r2, r3, #3
 8013de8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013dea:	4413      	add	r3, r2
 8013dec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013df0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013df6:	b29a      	uxth	r2, r3
 8013df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013dfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013dfc:	463b      	mov	r3, r7
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	891b      	ldrh	r3, [r3, #8]
 8013e02:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013e06:	463b      	mov	r3, r7
 8013e08:	681b      	ldr	r3, [r3, #0]
 8013e0a:	6959      	ldr	r1, [r3, #20]
 8013e0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013e16:	1d38      	adds	r0, r7, #4
 8013e18:	6800      	ldr	r0, [r0, #0]
 8013e1a:	f000 fecc 	bl	8014bb6 <USB_WritePMA>
 8013e1e:	e17e      	b.n	801411e <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013e20:	463b      	mov	r3, r7
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	785b      	ldrb	r3, [r3, #1]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d16f      	bne.n	8013f0a <USB_EPStartXfer+0xbf8>
 8013e2a:	1d3b      	adds	r3, r7, #4
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013e32:	1d3b      	adds	r3, r7, #4
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e3a:	b29b      	uxth	r3, r3
 8013e3c:	461a      	mov	r2, r3
 8013e3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e42:	4413      	add	r3, r2
 8013e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013e48:	463b      	mov	r3, r7
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	781b      	ldrb	r3, [r3, #0]
 8013e4e:	00da      	lsls	r2, r3, #3
 8013e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8013e54:	4413      	add	r3, r2
 8013e56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013e5a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8013e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d116      	bne.n	8013e94 <USB_EPStartXfer+0xb82>
 8013e66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e6a:	881b      	ldrh	r3, [r3, #0]
 8013e6c:	b29b      	uxth	r3, r3
 8013e6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e78:	801a      	strh	r2, [r3, #0]
 8013e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	b29b      	uxth	r3, r3
 8013e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e8a:	b29a      	uxth	r2, r3
 8013e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013e90:	801a      	strh	r2, [r3, #0]
 8013e92:	e05f      	b.n	8013f54 <USB_EPStartXfer+0xc42>
 8013e94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013e98:	2b3e      	cmp	r3, #62	; 0x3e
 8013e9a:	d818      	bhi.n	8013ece <USB_EPStartXfer+0xbbc>
 8013e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ea0:	085b      	lsrs	r3, r3, #1
 8013ea2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013ea6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013eaa:	f003 0301 	and.w	r3, r3, #1
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d004      	beq.n	8013ebc <USB_EPStartXfer+0xbaa>
 8013eb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013eb6:	3301      	adds	r3, #1
 8013eb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013ebc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013ec0:	b29b      	uxth	r3, r3
 8013ec2:	029b      	lsls	r3, r3, #10
 8013ec4:	b29a      	uxth	r2, r3
 8013ec6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013eca:	801a      	strh	r2, [r3, #0]
 8013ecc:	e042      	b.n	8013f54 <USB_EPStartXfer+0xc42>
 8013ece:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ed2:	095b      	lsrs	r3, r3, #5
 8013ed4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013ed8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013edc:	f003 031f 	and.w	r3, r3, #31
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d104      	bne.n	8013eee <USB_EPStartXfer+0xbdc>
 8013ee4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013ee8:	3b01      	subs	r3, #1
 8013eea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8013eee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8013ef2:	b29b      	uxth	r3, r3
 8013ef4:	029b      	lsls	r3, r3, #10
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013efc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013f00:	b29a      	uxth	r2, r3
 8013f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8013f06:	801a      	strh	r2, [r3, #0]
 8013f08:	e024      	b.n	8013f54 <USB_EPStartXfer+0xc42>
 8013f0a:	463b      	mov	r3, r7
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	785b      	ldrb	r3, [r3, #1]
 8013f10:	2b01      	cmp	r3, #1
 8013f12:	d11f      	bne.n	8013f54 <USB_EPStartXfer+0xc42>
 8013f14:	1d3b      	adds	r3, r7, #4
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013f1c:	1d3b      	adds	r3, r7, #4
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013f24:	b29b      	uxth	r3, r3
 8013f26:	461a      	mov	r2, r3
 8013f28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f2c:	4413      	add	r3, r2
 8013f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8013f32:	463b      	mov	r3, r7
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	00da      	lsls	r2, r3, #3
 8013f3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8013f3e:	4413      	add	r3, r2
 8013f40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013f44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8013f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8013f52:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8013f54:	463b      	mov	r3, r7
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	891b      	ldrh	r3, [r3, #8]
 8013f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013f5e:	463b      	mov	r3, r7
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	6959      	ldr	r1, [r3, #20]
 8013f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f68:	b29b      	uxth	r3, r3
 8013f6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013f6e:	1d38      	adds	r0, r7, #4
 8013f70:	6800      	ldr	r0, [r0, #0]
 8013f72:	f000 fe20 	bl	8014bb6 <USB_WritePMA>
          ep->xfer_buff += len;
 8013f76:	463b      	mov	r3, r7
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	695a      	ldr	r2, [r3, #20]
 8013f7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f80:	441a      	add	r2, r3
 8013f82:	463b      	mov	r3, r7
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8013f88:	463b      	mov	r3, r7
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	6a1a      	ldr	r2, [r3, #32]
 8013f8e:	463b      	mov	r3, r7
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	691b      	ldr	r3, [r3, #16]
 8013f94:	429a      	cmp	r2, r3
 8013f96:	d909      	bls.n	8013fac <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8013f98:	463b      	mov	r3, r7
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	6a1a      	ldr	r2, [r3, #32]
 8013f9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013fa2:	1ad2      	subs	r2, r2, r3
 8013fa4:	463b      	mov	r3, r7
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	621a      	str	r2, [r3, #32]
 8013faa:	e008      	b.n	8013fbe <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8013fac:	463b      	mov	r3, r7
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	6a1b      	ldr	r3, [r3, #32]
 8013fb2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8013fb6:	463b      	mov	r3, r7
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2200      	movs	r2, #0
 8013fbc:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8013fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	f000 80ab 	beq.w	801411e <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013fc8:	1d3b      	adds	r3, r7, #4
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013fd0:	463b      	mov	r3, r7
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	785b      	ldrb	r3, [r3, #1]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d16f      	bne.n	80140ba <USB_EPStartXfer+0xda8>
 8013fda:	1d3b      	adds	r3, r7, #4
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013fe2:	1d3b      	adds	r3, r7, #4
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	461a      	mov	r2, r3
 8013fee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8013ff2:	4413      	add	r3, r2
 8013ff4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013ff8:	463b      	mov	r3, r7
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	00da      	lsls	r2, r3, #3
 8014000:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014004:	4413      	add	r3, r2
 8014006:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801400a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801400e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014012:	2b00      	cmp	r3, #0
 8014014:	d116      	bne.n	8014044 <USB_EPStartXfer+0xd32>
 8014016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	b29b      	uxth	r3, r3
 801401e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014022:	b29a      	uxth	r2, r3
 8014024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014028:	801a      	strh	r2, [r3, #0]
 801402a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	b29b      	uxth	r3, r3
 8014032:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014036:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801403a:	b29a      	uxth	r2, r3
 801403c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014040:	801a      	strh	r2, [r3, #0]
 8014042:	e05b      	b.n	80140fc <USB_EPStartXfer+0xdea>
 8014044:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014048:	2b3e      	cmp	r3, #62	; 0x3e
 801404a:	d818      	bhi.n	801407e <USB_EPStartXfer+0xd6c>
 801404c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014050:	085b      	lsrs	r3, r3, #1
 8014052:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014056:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801405a:	f003 0301 	and.w	r3, r3, #1
 801405e:	2b00      	cmp	r3, #0
 8014060:	d004      	beq.n	801406c <USB_EPStartXfer+0xd5a>
 8014062:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014066:	3301      	adds	r3, #1
 8014068:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801406c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014070:	b29b      	uxth	r3, r3
 8014072:	029b      	lsls	r3, r3, #10
 8014074:	b29a      	uxth	r2, r3
 8014076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801407a:	801a      	strh	r2, [r3, #0]
 801407c:	e03e      	b.n	80140fc <USB_EPStartXfer+0xdea>
 801407e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014082:	095b      	lsrs	r3, r3, #5
 8014084:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8014088:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801408c:	f003 031f 	and.w	r3, r3, #31
 8014090:	2b00      	cmp	r3, #0
 8014092:	d104      	bne.n	801409e <USB_EPStartXfer+0xd8c>
 8014094:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8014098:	3b01      	subs	r3, #1
 801409a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 801409e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	029b      	lsls	r3, r3, #10
 80140a6:	b29b      	uxth	r3, r3
 80140a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80140ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80140b0:	b29a      	uxth	r2, r3
 80140b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80140b6:	801a      	strh	r2, [r3, #0]
 80140b8:	e020      	b.n	80140fc <USB_EPStartXfer+0xdea>
 80140ba:	463b      	mov	r3, r7
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	785b      	ldrb	r3, [r3, #1]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d11b      	bne.n	80140fc <USB_EPStartXfer+0xdea>
 80140c4:	1d3b      	adds	r3, r7, #4
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80140cc:	b29b      	uxth	r3, r3
 80140ce:	461a      	mov	r2, r3
 80140d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140d4:	4413      	add	r3, r2
 80140d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80140da:	463b      	mov	r3, r7
 80140dc:	681b      	ldr	r3, [r3, #0]
 80140de:	781b      	ldrb	r3, [r3, #0]
 80140e0:	00da      	lsls	r2, r3, #3
 80140e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80140e6:	4413      	add	r3, r2
 80140e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80140ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80140f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140f4:	b29a      	uxth	r2, r3
 80140f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80140fa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80140fc:	463b      	mov	r3, r7
 80140fe:	681b      	ldr	r3, [r3, #0]
 8014100:	895b      	ldrh	r3, [r3, #10]
 8014102:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014106:	463b      	mov	r3, r7
 8014108:	681b      	ldr	r3, [r3, #0]
 801410a:	6959      	ldr	r1, [r3, #20]
 801410c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014110:	b29b      	uxth	r3, r3
 8014112:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8014116:	1d38      	adds	r0, r7, #4
 8014118:	6800      	ldr	r0, [r0, #0]
 801411a:	f000 fd4c 	bl	8014bb6 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801411e:	1d3b      	adds	r3, r7, #4
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	463b      	mov	r3, r7
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	781b      	ldrb	r3, [r3, #0]
 8014128:	009b      	lsls	r3, r3, #2
 801412a:	4413      	add	r3, r2
 801412c:	881b      	ldrh	r3, [r3, #0]
 801412e:	b29b      	uxth	r3, r3
 8014130:	f107 020a 	add.w	r2, r7, #10
 8014134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014138:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801413c:	8013      	strh	r3, [r2, #0]
 801413e:	f107 030a 	add.w	r3, r7, #10
 8014142:	f107 020a 	add.w	r2, r7, #10
 8014146:	8812      	ldrh	r2, [r2, #0]
 8014148:	f082 0210 	eor.w	r2, r2, #16
 801414c:	801a      	strh	r2, [r3, #0]
 801414e:	f107 030a 	add.w	r3, r7, #10
 8014152:	f107 020a 	add.w	r2, r7, #10
 8014156:	8812      	ldrh	r2, [r2, #0]
 8014158:	f082 0220 	eor.w	r2, r2, #32
 801415c:	801a      	strh	r2, [r3, #0]
 801415e:	1d3b      	adds	r3, r7, #4
 8014160:	681a      	ldr	r2, [r3, #0]
 8014162:	463b      	mov	r3, r7
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	009b      	lsls	r3, r3, #2
 801416a:	441a      	add	r2, r3
 801416c:	f107 030a 	add.w	r3, r7, #10
 8014170:	881b      	ldrh	r3, [r3, #0]
 8014172:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014176:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801417a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801417e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014182:	b29b      	uxth	r3, r3
 8014184:	8013      	strh	r3, [r2, #0]
 8014186:	e3b5      	b.n	80148f4 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8014188:	463b      	mov	r3, r7
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	7b1b      	ldrb	r3, [r3, #12]
 801418e:	2b00      	cmp	r3, #0
 8014190:	f040 8090 	bne.w	80142b4 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8014194:	463b      	mov	r3, r7
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	699a      	ldr	r2, [r3, #24]
 801419a:	463b      	mov	r3, r7
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	691b      	ldr	r3, [r3, #16]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d90e      	bls.n	80141c2 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80141a4:	463b      	mov	r3, r7
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	691b      	ldr	r3, [r3, #16]
 80141aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80141ae:	463b      	mov	r3, r7
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	699a      	ldr	r2, [r3, #24]
 80141b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80141b8:	1ad2      	subs	r2, r2, r3
 80141ba:	463b      	mov	r3, r7
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	619a      	str	r2, [r3, #24]
 80141c0:	e008      	b.n	80141d4 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 80141c2:	463b      	mov	r3, r7
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	699b      	ldr	r3, [r3, #24]
 80141c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80141cc:	463b      	mov	r3, r7
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	2200      	movs	r2, #0
 80141d2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80141d4:	1d3b      	adds	r3, r7, #4
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80141dc:	1d3b      	adds	r3, r7, #4
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	461a      	mov	r2, r3
 80141e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80141ec:	4413      	add	r3, r2
 80141ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80141f2:	463b      	mov	r3, r7
 80141f4:	681b      	ldr	r3, [r3, #0]
 80141f6:	781b      	ldrb	r3, [r3, #0]
 80141f8:	00da      	lsls	r2, r3, #3
 80141fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80141fe:	4413      	add	r3, r2
 8014200:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801420c:	2b00      	cmp	r3, #0
 801420e:	d116      	bne.n	801423e <USB_EPStartXfer+0xf2c>
 8014210:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014214:	881b      	ldrh	r3, [r3, #0]
 8014216:	b29b      	uxth	r3, r3
 8014218:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801421c:	b29a      	uxth	r2, r3
 801421e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014222:	801a      	strh	r2, [r3, #0]
 8014224:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014228:	881b      	ldrh	r3, [r3, #0]
 801422a:	b29b      	uxth	r3, r3
 801422c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014234:	b29a      	uxth	r2, r3
 8014236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801423a:	801a      	strh	r2, [r3, #0]
 801423c:	e32c      	b.n	8014898 <USB_EPStartXfer+0x1586>
 801423e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014242:	2b3e      	cmp	r3, #62	; 0x3e
 8014244:	d818      	bhi.n	8014278 <USB_EPStartXfer+0xf66>
 8014246:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801424a:	085b      	lsrs	r3, r3, #1
 801424c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014250:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014254:	f003 0301 	and.w	r3, r3, #1
 8014258:	2b00      	cmp	r3, #0
 801425a:	d004      	beq.n	8014266 <USB_EPStartXfer+0xf54>
 801425c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8014260:	3301      	adds	r3, #1
 8014262:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014266:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801426a:	b29b      	uxth	r3, r3
 801426c:	029b      	lsls	r3, r3, #10
 801426e:	b29a      	uxth	r2, r3
 8014270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014274:	801a      	strh	r2, [r3, #0]
 8014276:	e30f      	b.n	8014898 <USB_EPStartXfer+0x1586>
 8014278:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801427c:	095b      	lsrs	r3, r3, #5
 801427e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014286:	f003 031f 	and.w	r3, r3, #31
 801428a:	2b00      	cmp	r3, #0
 801428c:	d104      	bne.n	8014298 <USB_EPStartXfer+0xf86>
 801428e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8014292:	3b01      	subs	r3, #1
 8014294:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8014298:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801429c:	b29b      	uxth	r3, r3
 801429e:	029b      	lsls	r3, r3, #10
 80142a0:	b29b      	uxth	r3, r3
 80142a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80142a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80142aa:	b29a      	uxth	r2, r3
 80142ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80142b0:	801a      	strh	r2, [r3, #0]
 80142b2:	e2f1      	b.n	8014898 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80142b4:	463b      	mov	r3, r7
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	78db      	ldrb	r3, [r3, #3]
 80142ba:	2b02      	cmp	r3, #2
 80142bc:	f040 818f 	bne.w	80145de <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80142c0:	463b      	mov	r3, r7
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	785b      	ldrb	r3, [r3, #1]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d175      	bne.n	80143b6 <USB_EPStartXfer+0x10a4>
 80142ca:	1d3b      	adds	r3, r7, #4
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80142d2:	1d3b      	adds	r3, r7, #4
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142da:	b29b      	uxth	r3, r3
 80142dc:	461a      	mov	r2, r3
 80142de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80142e2:	4413      	add	r3, r2
 80142e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80142e8:	463b      	mov	r3, r7
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	00da      	lsls	r2, r3, #3
 80142f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80142f4:	4413      	add	r3, r2
 80142f6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80142fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80142fe:	463b      	mov	r3, r7
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	691b      	ldr	r3, [r3, #16]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d116      	bne.n	8014336 <USB_EPStartXfer+0x1024>
 8014308:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801430c:	881b      	ldrh	r3, [r3, #0]
 801430e:	b29b      	uxth	r3, r3
 8014310:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014314:	b29a      	uxth	r2, r3
 8014316:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801431a:	801a      	strh	r2, [r3, #0]
 801431c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014320:	881b      	ldrh	r3, [r3, #0]
 8014322:	b29b      	uxth	r3, r3
 8014324:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014328:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801432c:	b29a      	uxth	r2, r3
 801432e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014332:	801a      	strh	r2, [r3, #0]
 8014334:	e065      	b.n	8014402 <USB_EPStartXfer+0x10f0>
 8014336:	463b      	mov	r3, r7
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	691b      	ldr	r3, [r3, #16]
 801433c:	2b3e      	cmp	r3, #62	; 0x3e
 801433e:	d81a      	bhi.n	8014376 <USB_EPStartXfer+0x1064>
 8014340:	463b      	mov	r3, r7
 8014342:	681b      	ldr	r3, [r3, #0]
 8014344:	691b      	ldr	r3, [r3, #16]
 8014346:	085b      	lsrs	r3, r3, #1
 8014348:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801434c:	463b      	mov	r3, r7
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	691b      	ldr	r3, [r3, #16]
 8014352:	f003 0301 	and.w	r3, r3, #1
 8014356:	2b00      	cmp	r3, #0
 8014358:	d004      	beq.n	8014364 <USB_EPStartXfer+0x1052>
 801435a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801435e:	3301      	adds	r3, #1
 8014360:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014368:	b29b      	uxth	r3, r3
 801436a:	029b      	lsls	r3, r3, #10
 801436c:	b29a      	uxth	r2, r3
 801436e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014372:	801a      	strh	r2, [r3, #0]
 8014374:	e045      	b.n	8014402 <USB_EPStartXfer+0x10f0>
 8014376:	463b      	mov	r3, r7
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	691b      	ldr	r3, [r3, #16]
 801437c:	095b      	lsrs	r3, r3, #5
 801437e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014382:	463b      	mov	r3, r7
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	691b      	ldr	r3, [r3, #16]
 8014388:	f003 031f 	and.w	r3, r3, #31
 801438c:	2b00      	cmp	r3, #0
 801438e:	d104      	bne.n	801439a <USB_EPStartXfer+0x1088>
 8014390:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014394:	3b01      	subs	r3, #1
 8014396:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 801439a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801439e:	b29b      	uxth	r3, r3
 80143a0:	029b      	lsls	r3, r3, #10
 80143a2:	b29b      	uxth	r3, r3
 80143a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80143a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80143ac:	b29a      	uxth	r2, r3
 80143ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80143b2:	801a      	strh	r2, [r3, #0]
 80143b4:	e025      	b.n	8014402 <USB_EPStartXfer+0x10f0>
 80143b6:	463b      	mov	r3, r7
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	785b      	ldrb	r3, [r3, #1]
 80143bc:	2b01      	cmp	r3, #1
 80143be:	d120      	bne.n	8014402 <USB_EPStartXfer+0x10f0>
 80143c0:	1d3b      	adds	r3, r7, #4
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80143c8:	1d3b      	adds	r3, r7, #4
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80143d0:	b29b      	uxth	r3, r3
 80143d2:	461a      	mov	r2, r3
 80143d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80143d8:	4413      	add	r3, r2
 80143da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80143de:	463b      	mov	r3, r7
 80143e0:	681b      	ldr	r3, [r3, #0]
 80143e2:	781b      	ldrb	r3, [r3, #0]
 80143e4:	00da      	lsls	r2, r3, #3
 80143e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80143ea:	4413      	add	r3, r2
 80143ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80143f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80143f4:	463b      	mov	r3, r7
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	b29a      	uxth	r2, r3
 80143fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014400:	801a      	strh	r2, [r3, #0]
 8014402:	1d3b      	adds	r3, r7, #4
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801440a:	463b      	mov	r3, r7
 801440c:	681b      	ldr	r3, [r3, #0]
 801440e:	785b      	ldrb	r3, [r3, #1]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d175      	bne.n	8014500 <USB_EPStartXfer+0x11ee>
 8014414:	1d3b      	adds	r3, r7, #4
 8014416:	681b      	ldr	r3, [r3, #0]
 8014418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801441c:	1d3b      	adds	r3, r7, #4
 801441e:	681b      	ldr	r3, [r3, #0]
 8014420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014424:	b29b      	uxth	r3, r3
 8014426:	461a      	mov	r2, r3
 8014428:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801442c:	4413      	add	r3, r2
 801442e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014432:	463b      	mov	r3, r7
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	00da      	lsls	r2, r3, #3
 801443a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801443e:	4413      	add	r3, r2
 8014440:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014448:	463b      	mov	r3, r7
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	691b      	ldr	r3, [r3, #16]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d116      	bne.n	8014480 <USB_EPStartXfer+0x116e>
 8014452:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014456:	881b      	ldrh	r3, [r3, #0]
 8014458:	b29b      	uxth	r3, r3
 801445a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801445e:	b29a      	uxth	r2, r3
 8014460:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014464:	801a      	strh	r2, [r3, #0]
 8014466:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801446a:	881b      	ldrh	r3, [r3, #0]
 801446c:	b29b      	uxth	r3, r3
 801446e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014476:	b29a      	uxth	r2, r3
 8014478:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801447c:	801a      	strh	r2, [r3, #0]
 801447e:	e061      	b.n	8014544 <USB_EPStartXfer+0x1232>
 8014480:	463b      	mov	r3, r7
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	691b      	ldr	r3, [r3, #16]
 8014486:	2b3e      	cmp	r3, #62	; 0x3e
 8014488:	d81a      	bhi.n	80144c0 <USB_EPStartXfer+0x11ae>
 801448a:	463b      	mov	r3, r7
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	691b      	ldr	r3, [r3, #16]
 8014490:	085b      	lsrs	r3, r3, #1
 8014492:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014496:	463b      	mov	r3, r7
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	691b      	ldr	r3, [r3, #16]
 801449c:	f003 0301 	and.w	r3, r3, #1
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d004      	beq.n	80144ae <USB_EPStartXfer+0x119c>
 80144a4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80144a8:	3301      	adds	r3, #1
 80144aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80144ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80144b2:	b29b      	uxth	r3, r3
 80144b4:	029b      	lsls	r3, r3, #10
 80144b6:	b29a      	uxth	r2, r3
 80144b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80144bc:	801a      	strh	r2, [r3, #0]
 80144be:	e041      	b.n	8014544 <USB_EPStartXfer+0x1232>
 80144c0:	463b      	mov	r3, r7
 80144c2:	681b      	ldr	r3, [r3, #0]
 80144c4:	691b      	ldr	r3, [r3, #16]
 80144c6:	095b      	lsrs	r3, r3, #5
 80144c8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80144cc:	463b      	mov	r3, r7
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	691b      	ldr	r3, [r3, #16]
 80144d2:	f003 031f 	and.w	r3, r3, #31
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d104      	bne.n	80144e4 <USB_EPStartXfer+0x11d2>
 80144da:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80144de:	3b01      	subs	r3, #1
 80144e0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80144e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80144e8:	b29b      	uxth	r3, r3
 80144ea:	029b      	lsls	r3, r3, #10
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80144f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80144fc:	801a      	strh	r2, [r3, #0]
 80144fe:	e021      	b.n	8014544 <USB_EPStartXfer+0x1232>
 8014500:	463b      	mov	r3, r7
 8014502:	681b      	ldr	r3, [r3, #0]
 8014504:	785b      	ldrb	r3, [r3, #1]
 8014506:	2b01      	cmp	r3, #1
 8014508:	d11c      	bne.n	8014544 <USB_EPStartXfer+0x1232>
 801450a:	1d3b      	adds	r3, r7, #4
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014512:	b29b      	uxth	r3, r3
 8014514:	461a      	mov	r2, r3
 8014516:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801451a:	4413      	add	r3, r2
 801451c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014520:	463b      	mov	r3, r7
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	00da      	lsls	r2, r3, #3
 8014528:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801452c:	4413      	add	r3, r2
 801452e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014532:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014536:	463b      	mov	r3, r7
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	691b      	ldr	r3, [r3, #16]
 801453c:	b29a      	uxth	r2, r3
 801453e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014542:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014544:	463b      	mov	r3, r7
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	69db      	ldr	r3, [r3, #28]
 801454a:	2b00      	cmp	r3, #0
 801454c:	f000 81a4 	beq.w	8014898 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014550:	1d3b      	adds	r3, r7, #4
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	463b      	mov	r3, r7
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	009b      	lsls	r3, r3, #2
 801455c:	4413      	add	r3, r2
 801455e:	881b      	ldrh	r3, [r3, #0]
 8014560:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014564:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801456c:	2b00      	cmp	r3, #0
 801456e:	d005      	beq.n	801457c <USB_EPStartXfer+0x126a>
 8014570:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014578:	2b00      	cmp	r3, #0
 801457a:	d10d      	bne.n	8014598 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801457c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014584:	2b00      	cmp	r3, #0
 8014586:	f040 8187 	bne.w	8014898 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801458a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 801458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014592:	2b00      	cmp	r3, #0
 8014594:	f040 8180 	bne.w	8014898 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8014598:	1d3b      	adds	r3, r7, #4
 801459a:	681a      	ldr	r2, [r3, #0]
 801459c:	463b      	mov	r3, r7
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	781b      	ldrb	r3, [r3, #0]
 80145a2:	009b      	lsls	r3, r3, #2
 80145a4:	4413      	add	r3, r2
 80145a6:	881b      	ldrh	r3, [r3, #0]
 80145a8:	b29b      	uxth	r3, r3
 80145aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80145ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80145b2:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80145b6:	1d3b      	adds	r3, r7, #4
 80145b8:	681a      	ldr	r2, [r3, #0]
 80145ba:	463b      	mov	r3, r7
 80145bc:	681b      	ldr	r3, [r3, #0]
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	009b      	lsls	r3, r3, #2
 80145c2:	441a      	add	r2, r3
 80145c4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80145c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80145cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80145d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80145d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80145d8:	b29b      	uxth	r3, r3
 80145da:	8013      	strh	r3, [r2, #0]
 80145dc:	e15c      	b.n	8014898 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80145de:	463b      	mov	r3, r7
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	78db      	ldrb	r3, [r3, #3]
 80145e4:	2b01      	cmp	r3, #1
 80145e6:	f040 8155 	bne.w	8014894 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80145ea:	463b      	mov	r3, r7
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	699a      	ldr	r2, [r3, #24]
 80145f0:	463b      	mov	r3, r7
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	691b      	ldr	r3, [r3, #16]
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d90e      	bls.n	8014618 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 80145fa:	463b      	mov	r3, r7
 80145fc:	681b      	ldr	r3, [r3, #0]
 80145fe:	691b      	ldr	r3, [r3, #16]
 8014600:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8014604:	463b      	mov	r3, r7
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	699a      	ldr	r2, [r3, #24]
 801460a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801460e:	1ad2      	subs	r2, r2, r3
 8014610:	463b      	mov	r3, r7
 8014612:	681b      	ldr	r3, [r3, #0]
 8014614:	619a      	str	r2, [r3, #24]
 8014616:	e008      	b.n	801462a <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8014618:	463b      	mov	r3, r7
 801461a:	681b      	ldr	r3, [r3, #0]
 801461c:	699b      	ldr	r3, [r3, #24]
 801461e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8014622:	463b      	mov	r3, r7
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	2200      	movs	r2, #0
 8014628:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 801462a:	463b      	mov	r3, r7
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	785b      	ldrb	r3, [r3, #1]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d16f      	bne.n	8014714 <USB_EPStartXfer+0x1402>
 8014634:	1d3b      	adds	r3, r7, #4
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801463c:	1d3b      	adds	r3, r7, #4
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014644:	b29b      	uxth	r3, r3
 8014646:	461a      	mov	r2, r3
 8014648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801464c:	4413      	add	r3, r2
 801464e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014652:	463b      	mov	r3, r7
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	00da      	lsls	r2, r3, #3
 801465a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801465e:	4413      	add	r3, r2
 8014660:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014664:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014668:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801466c:	2b00      	cmp	r3, #0
 801466e:	d116      	bne.n	801469e <USB_EPStartXfer+0x138c>
 8014670:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014674:	881b      	ldrh	r3, [r3, #0]
 8014676:	b29b      	uxth	r3, r3
 8014678:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801467c:	b29a      	uxth	r2, r3
 801467e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014682:	801a      	strh	r2, [r3, #0]
 8014684:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014688:	881b      	ldrh	r3, [r3, #0]
 801468a:	b29b      	uxth	r3, r3
 801468c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014690:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014694:	b29a      	uxth	r2, r3
 8014696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801469a:	801a      	strh	r2, [r3, #0]
 801469c:	e05f      	b.n	801475e <USB_EPStartXfer+0x144c>
 801469e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146a2:	2b3e      	cmp	r3, #62	; 0x3e
 80146a4:	d818      	bhi.n	80146d8 <USB_EPStartXfer+0x13c6>
 80146a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146aa:	085b      	lsrs	r3, r3, #1
 80146ac:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80146b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146b4:	f003 0301 	and.w	r3, r3, #1
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d004      	beq.n	80146c6 <USB_EPStartXfer+0x13b4>
 80146bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80146c0:	3301      	adds	r3, #1
 80146c2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80146c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80146ca:	b29b      	uxth	r3, r3
 80146cc:	029b      	lsls	r3, r3, #10
 80146ce:	b29a      	uxth	r2, r3
 80146d0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80146d4:	801a      	strh	r2, [r3, #0]
 80146d6:	e042      	b.n	801475e <USB_EPStartXfer+0x144c>
 80146d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146dc:	095b      	lsrs	r3, r3, #5
 80146de:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80146e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146e6:	f003 031f 	and.w	r3, r3, #31
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d104      	bne.n	80146f8 <USB_EPStartXfer+0x13e6>
 80146ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80146f2:	3b01      	subs	r3, #1
 80146f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80146f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	029b      	lsls	r3, r3, #10
 8014700:	b29b      	uxth	r3, r3
 8014702:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014706:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801470a:	b29a      	uxth	r2, r3
 801470c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014710:	801a      	strh	r2, [r3, #0]
 8014712:	e024      	b.n	801475e <USB_EPStartXfer+0x144c>
 8014714:	463b      	mov	r3, r7
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	785b      	ldrb	r3, [r3, #1]
 801471a:	2b01      	cmp	r3, #1
 801471c:	d11f      	bne.n	801475e <USB_EPStartXfer+0x144c>
 801471e:	1d3b      	adds	r3, r7, #4
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014726:	1d3b      	adds	r3, r7, #4
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801472e:	b29b      	uxth	r3, r3
 8014730:	461a      	mov	r2, r3
 8014732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014736:	4413      	add	r3, r2
 8014738:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801473c:	463b      	mov	r3, r7
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	00da      	lsls	r2, r3, #3
 8014744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014748:	4413      	add	r3, r2
 801474a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801474e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014756:	b29a      	uxth	r2, r3
 8014758:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801475c:	801a      	strh	r2, [r3, #0]
 801475e:	1d3b      	adds	r3, r7, #4
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014766:	463b      	mov	r3, r7
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	785b      	ldrb	r3, [r3, #1]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d16f      	bne.n	8014850 <USB_EPStartXfer+0x153e>
 8014770:	1d3b      	adds	r3, r7, #4
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014778:	1d3b      	adds	r3, r7, #4
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014780:	b29b      	uxth	r3, r3
 8014782:	461a      	mov	r2, r3
 8014784:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014788:	4413      	add	r3, r2
 801478a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801478e:	463b      	mov	r3, r7
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	00da      	lsls	r2, r3, #3
 8014796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801479a:	4413      	add	r3, r2
 801479c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80147a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80147a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d116      	bne.n	80147da <USB_EPStartXfer+0x14c8>
 80147ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	b29b      	uxth	r3, r3
 80147b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80147b8:	b29a      	uxth	r2, r3
 80147ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147be:	801a      	strh	r2, [r3, #0]
 80147c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147c4:	881b      	ldrh	r3, [r3, #0]
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80147cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80147d0:	b29a      	uxth	r2, r3
 80147d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80147d6:	801a      	strh	r2, [r3, #0]
 80147d8:	e05e      	b.n	8014898 <USB_EPStartXfer+0x1586>
 80147da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147de:	2b3e      	cmp	r3, #62	; 0x3e
 80147e0:	d818      	bhi.n	8014814 <USB_EPStartXfer+0x1502>
 80147e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147e6:	085b      	lsrs	r3, r3, #1
 80147e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80147ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147f0:	f003 0301 	and.w	r3, r3, #1
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d004      	beq.n	8014802 <USB_EPStartXfer+0x14f0>
 80147f8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80147fc:	3301      	adds	r3, #1
 80147fe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014802:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014806:	b29b      	uxth	r3, r3
 8014808:	029b      	lsls	r3, r3, #10
 801480a:	b29a      	uxth	r2, r3
 801480c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014810:	801a      	strh	r2, [r3, #0]
 8014812:	e041      	b.n	8014898 <USB_EPStartXfer+0x1586>
 8014814:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014818:	095b      	lsrs	r3, r3, #5
 801481a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801481e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014822:	f003 031f 	and.w	r3, r3, #31
 8014826:	2b00      	cmp	r3, #0
 8014828:	d104      	bne.n	8014834 <USB_EPStartXfer+0x1522>
 801482a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801482e:	3b01      	subs	r3, #1
 8014830:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014834:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014838:	b29b      	uxth	r3, r3
 801483a:	029b      	lsls	r3, r3, #10
 801483c:	b29b      	uxth	r3, r3
 801483e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014842:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014846:	b29a      	uxth	r2, r3
 8014848:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801484c:	801a      	strh	r2, [r3, #0]
 801484e:	e023      	b.n	8014898 <USB_EPStartXfer+0x1586>
 8014850:	463b      	mov	r3, r7
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	785b      	ldrb	r3, [r3, #1]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d11e      	bne.n	8014898 <USB_EPStartXfer+0x1586>
 801485a:	1d3b      	adds	r3, r7, #4
 801485c:	681b      	ldr	r3, [r3, #0]
 801485e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014862:	b29b      	uxth	r3, r3
 8014864:	461a      	mov	r2, r3
 8014866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801486a:	4413      	add	r3, r2
 801486c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014870:	463b      	mov	r3, r7
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	781b      	ldrb	r3, [r3, #0]
 8014876:	00da      	lsls	r2, r3, #3
 8014878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801487c:	4413      	add	r3, r2
 801487e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014882:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014886:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801488a:	b29a      	uxth	r2, r3
 801488c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014890:	801a      	strh	r2, [r3, #0]
 8014892:	e001      	b.n	8014898 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8014894:	2301      	movs	r3, #1
 8014896:	e02e      	b.n	80148f6 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014898:	1d3b      	adds	r3, r7, #4
 801489a:	681a      	ldr	r2, [r3, #0]
 801489c:	463b      	mov	r3, r7
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	781b      	ldrb	r3, [r3, #0]
 80148a2:	009b      	lsls	r3, r3, #2
 80148a4:	4413      	add	r3, r2
 80148a6:	881b      	ldrh	r3, [r3, #0]
 80148a8:	b29b      	uxth	r3, r3
 80148aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80148ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80148b2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80148b6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80148ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80148be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80148c2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80148c6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80148ca:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80148ce:	1d3b      	adds	r3, r7, #4
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	463b      	mov	r3, r7
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	781b      	ldrb	r3, [r3, #0]
 80148d8:	009b      	lsls	r3, r3, #2
 80148da:	441a      	add	r2, r3
 80148dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80148e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80148e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80148e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80148ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148f0:	b29b      	uxth	r3, r3
 80148f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80148f4:	2300      	movs	r3, #0
}
 80148f6:	4618      	mov	r0, r3
 80148f8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80148fc:	46bd      	mov	sp, r7
 80148fe:	bd80      	pop	{r7, pc}

08014900 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8014900:	b480      	push	{r7}
 8014902:	b085      	sub	sp, #20
 8014904:	af00      	add	r7, sp, #0
 8014906:	6078      	str	r0, [r7, #4]
 8014908:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 801490a:	683b      	ldr	r3, [r7, #0]
 801490c:	785b      	ldrb	r3, [r3, #1]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d020      	beq.n	8014954 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	009b      	lsls	r3, r3, #2
 801491a:	4413      	add	r3, r2
 801491c:	881b      	ldrh	r3, [r3, #0]
 801491e:	b29b      	uxth	r3, r3
 8014920:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014928:	81bb      	strh	r3, [r7, #12]
 801492a:	89bb      	ldrh	r3, [r7, #12]
 801492c:	f083 0310 	eor.w	r3, r3, #16
 8014930:	81bb      	strh	r3, [r7, #12]
 8014932:	687a      	ldr	r2, [r7, #4]
 8014934:	683b      	ldr	r3, [r7, #0]
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	441a      	add	r2, r3
 801493c:	89bb      	ldrh	r3, [r7, #12]
 801493e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014942:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014946:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801494a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801494e:	b29b      	uxth	r3, r3
 8014950:	8013      	strh	r3, [r2, #0]
 8014952:	e01f      	b.n	8014994 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8014954:	687a      	ldr	r2, [r7, #4]
 8014956:	683b      	ldr	r3, [r7, #0]
 8014958:	781b      	ldrb	r3, [r3, #0]
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	4413      	add	r3, r2
 801495e:	881b      	ldrh	r3, [r3, #0]
 8014960:	b29b      	uxth	r3, r3
 8014962:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801496a:	81fb      	strh	r3, [r7, #14]
 801496c:	89fb      	ldrh	r3, [r7, #14]
 801496e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014972:	81fb      	strh	r3, [r7, #14]
 8014974:	687a      	ldr	r2, [r7, #4]
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	009b      	lsls	r3, r3, #2
 801497c:	441a      	add	r2, r3
 801497e:	89fb      	ldrh	r3, [r7, #14]
 8014980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801498c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014990:	b29b      	uxth	r3, r3
 8014992:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8014994:	2300      	movs	r3, #0
}
 8014996:	4618      	mov	r0, r3
 8014998:	3714      	adds	r7, #20
 801499a:	46bd      	mov	sp, r7
 801499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a0:	4770      	bx	lr

080149a2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80149a2:	b480      	push	{r7}
 80149a4:	b087      	sub	sp, #28
 80149a6:	af00      	add	r7, sp, #0
 80149a8:	6078      	str	r0, [r7, #4]
 80149aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80149ac:	683b      	ldr	r3, [r7, #0]
 80149ae:	7b1b      	ldrb	r3, [r3, #12]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	f040 809d 	bne.w	8014af0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80149b6:	683b      	ldr	r3, [r7, #0]
 80149b8:	785b      	ldrb	r3, [r3, #1]
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d04c      	beq.n	8014a58 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80149be:	687a      	ldr	r2, [r7, #4]
 80149c0:	683b      	ldr	r3, [r7, #0]
 80149c2:	781b      	ldrb	r3, [r3, #0]
 80149c4:	009b      	lsls	r3, r3, #2
 80149c6:	4413      	add	r3, r2
 80149c8:	881b      	ldrh	r3, [r3, #0]
 80149ca:	823b      	strh	r3, [r7, #16]
 80149cc:	8a3b      	ldrh	r3, [r7, #16]
 80149ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d01b      	beq.n	8014a0e <USB_EPClearStall+0x6c>
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	683b      	ldr	r3, [r7, #0]
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	009b      	lsls	r3, r3, #2
 80149de:	4413      	add	r3, r2
 80149e0:	881b      	ldrh	r3, [r3, #0]
 80149e2:	b29b      	uxth	r3, r3
 80149e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80149e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80149ec:	81fb      	strh	r3, [r7, #14]
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	009b      	lsls	r3, r3, #2
 80149f6:	441a      	add	r2, r3
 80149f8:	89fb      	ldrh	r3, [r7, #14]
 80149fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80149fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014a06:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014a0a:	b29b      	uxth	r3, r3
 8014a0c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	78db      	ldrb	r3, [r3, #3]
 8014a12:	2b01      	cmp	r3, #1
 8014a14:	d06c      	beq.n	8014af0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8014a16:	687a      	ldr	r2, [r7, #4]
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	781b      	ldrb	r3, [r3, #0]
 8014a1c:	009b      	lsls	r3, r3, #2
 8014a1e:	4413      	add	r3, r2
 8014a20:	881b      	ldrh	r3, [r3, #0]
 8014a22:	b29b      	uxth	r3, r3
 8014a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a2c:	81bb      	strh	r3, [r7, #12]
 8014a2e:	89bb      	ldrh	r3, [r7, #12]
 8014a30:	f083 0320 	eor.w	r3, r3, #32
 8014a34:	81bb      	strh	r3, [r7, #12]
 8014a36:	687a      	ldr	r2, [r7, #4]
 8014a38:	683b      	ldr	r3, [r7, #0]
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	009b      	lsls	r3, r3, #2
 8014a3e:	441a      	add	r2, r3
 8014a40:	89bb      	ldrh	r3, [r7, #12]
 8014a42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014a46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014a4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a52:	b29b      	uxth	r3, r3
 8014a54:	8013      	strh	r3, [r2, #0]
 8014a56:	e04b      	b.n	8014af0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8014a58:	687a      	ldr	r2, [r7, #4]
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	009b      	lsls	r3, r3, #2
 8014a60:	4413      	add	r3, r2
 8014a62:	881b      	ldrh	r3, [r3, #0]
 8014a64:	82fb      	strh	r3, [r7, #22]
 8014a66:	8afb      	ldrh	r3, [r7, #22]
 8014a68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d01b      	beq.n	8014aa8 <USB_EPClearStall+0x106>
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	781b      	ldrb	r3, [r3, #0]
 8014a76:	009b      	lsls	r3, r3, #2
 8014a78:	4413      	add	r3, r2
 8014a7a:	881b      	ldrh	r3, [r3, #0]
 8014a7c:	b29b      	uxth	r3, r3
 8014a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a86:	82bb      	strh	r3, [r7, #20]
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	781b      	ldrb	r3, [r3, #0]
 8014a8e:	009b      	lsls	r3, r3, #2
 8014a90:	441a      	add	r2, r3
 8014a92:	8abb      	ldrh	r3, [r7, #20]
 8014a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8014aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aa4:	b29b      	uxth	r3, r3
 8014aa6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014aa8:	687a      	ldr	r2, [r7, #4]
 8014aaa:	683b      	ldr	r3, [r7, #0]
 8014aac:	781b      	ldrb	r3, [r3, #0]
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	4413      	add	r3, r2
 8014ab2:	881b      	ldrh	r3, [r3, #0]
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014abe:	827b      	strh	r3, [r7, #18]
 8014ac0:	8a7b      	ldrh	r3, [r7, #18]
 8014ac2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8014ac6:	827b      	strh	r3, [r7, #18]
 8014ac8:	8a7b      	ldrh	r3, [r7, #18]
 8014aca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8014ace:	827b      	strh	r3, [r7, #18]
 8014ad0:	687a      	ldr	r2, [r7, #4]
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	781b      	ldrb	r3, [r3, #0]
 8014ad6:	009b      	lsls	r3, r3, #2
 8014ad8:	441a      	add	r2, r3
 8014ada:	8a7b      	ldrh	r3, [r7, #18]
 8014adc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014ae0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014ae4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014aec:	b29b      	uxth	r3, r3
 8014aee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8014af0:	2300      	movs	r3, #0
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	371c      	adds	r7, #28
 8014af6:	46bd      	mov	sp, r7
 8014af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afc:	4770      	bx	lr

08014afe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8014afe:	b480      	push	{r7}
 8014b00:	b083      	sub	sp, #12
 8014b02:	af00      	add	r7, sp, #0
 8014b04:	6078      	str	r0, [r7, #4]
 8014b06:	460b      	mov	r3, r1
 8014b08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8014b0a:	78fb      	ldrb	r3, [r7, #3]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d103      	bne.n	8014b18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2280      	movs	r2, #128	; 0x80
 8014b14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8014b18:	2300      	movs	r3, #0
}
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	370c      	adds	r7, #12
 8014b1e:	46bd      	mov	sp, r7
 8014b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b24:	4770      	bx	lr

08014b26 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8014b26:	b480      	push	{r7}
 8014b28:	b083      	sub	sp, #12
 8014b2a:	af00      	add	r7, sp, #0
 8014b2c:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8014b34:	b29b      	uxth	r3, r3
 8014b36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014b3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8014b46:	2300      	movs	r3, #0
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	370c      	adds	r7, #12
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b52:	4770      	bx	lr

08014b54 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8014b54:	b480      	push	{r7}
 8014b56:	b083      	sub	sp, #12
 8014b58:	af00      	add	r7, sp, #0
 8014b5a:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8014b62:	b29b      	uxth	r3, r3
 8014b64:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014b68:	b29a      	uxth	r2, r3
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8014b70:	2300      	movs	r3, #0
}
 8014b72:	4618      	mov	r0, r3
 8014b74:	370c      	adds	r7, #12
 8014b76:	46bd      	mov	sp, r7
 8014b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7c:	4770      	bx	lr

08014b7e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8014b7e:	b480      	push	{r7}
 8014b80:	b085      	sub	sp, #20
 8014b82:	af00      	add	r7, sp, #0
 8014b84:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8014b8c:	b29b      	uxth	r3, r3
 8014b8e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8014b90:	68fb      	ldr	r3, [r7, #12]
}
 8014b92:	4618      	mov	r0, r3
 8014b94:	3714      	adds	r7, #20
 8014b96:	46bd      	mov	sp, r7
 8014b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9c:	4770      	bx	lr

08014b9e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8014b9e:	b480      	push	{r7}
 8014ba0:	b083      	sub	sp, #12
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	6078      	str	r0, [r7, #4]
 8014ba6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8014ba8:	2300      	movs	r3, #0
}
 8014baa:	4618      	mov	r0, r3
 8014bac:	370c      	adds	r7, #12
 8014bae:	46bd      	mov	sp, r7
 8014bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb4:	4770      	bx	lr

08014bb6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014bb6:	b480      	push	{r7}
 8014bb8:	b08d      	sub	sp, #52	; 0x34
 8014bba:	af00      	add	r7, sp, #0
 8014bbc:	60f8      	str	r0, [r7, #12]
 8014bbe:	60b9      	str	r1, [r7, #8]
 8014bc0:	4611      	mov	r1, r2
 8014bc2:	461a      	mov	r2, r3
 8014bc4:	460b      	mov	r3, r1
 8014bc6:	80fb      	strh	r3, [r7, #6]
 8014bc8:	4613      	mov	r3, r2
 8014bca:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8014bcc:	88bb      	ldrh	r3, [r7, #4]
 8014bce:	3301      	adds	r3, #1
 8014bd0:	085b      	lsrs	r3, r3, #1
 8014bd2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014bd4:	68fb      	ldr	r3, [r7, #12]
 8014bd6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014bdc:	88fa      	ldrh	r2, [r7, #6]
 8014bde:	69fb      	ldr	r3, [r7, #28]
 8014be0:	4413      	add	r3, r2
 8014be2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014be6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8014be8:	6a3b      	ldr	r3, [r7, #32]
 8014bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014bec:	e01b      	b.n	8014c26 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8014bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf0:	781b      	ldrb	r3, [r3, #0]
 8014bf2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf6:	3301      	adds	r3, #1
 8014bf8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8014bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	021b      	lsls	r3, r3, #8
 8014c02:	b29b      	uxth	r3, r3
 8014c04:	461a      	mov	r2, r3
 8014c06:	69bb      	ldr	r3, [r7, #24]
 8014c08:	4313      	orrs	r3, r2
 8014c0a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c12:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8014c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014c16:	3302      	adds	r3, #2
 8014c18:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8014c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1c:	3301      	adds	r3, #1
 8014c1e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8014c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c22:	3b01      	subs	r3, #1
 8014c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d1e0      	bne.n	8014bee <USB_WritePMA+0x38>
  }
}
 8014c2c:	bf00      	nop
 8014c2e:	bf00      	nop
 8014c30:	3734      	adds	r7, #52	; 0x34
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr

08014c3a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8014c3a:	b480      	push	{r7}
 8014c3c:	b08b      	sub	sp, #44	; 0x2c
 8014c3e:	af00      	add	r7, sp, #0
 8014c40:	60f8      	str	r0, [r7, #12]
 8014c42:	60b9      	str	r1, [r7, #8]
 8014c44:	4611      	mov	r1, r2
 8014c46:	461a      	mov	r2, r3
 8014c48:	460b      	mov	r3, r1
 8014c4a:	80fb      	strh	r3, [r7, #6]
 8014c4c:	4613      	mov	r3, r2
 8014c4e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8014c50:	88bb      	ldrh	r3, [r7, #4]
 8014c52:	085b      	lsrs	r3, r3, #1
 8014c54:	b29b      	uxth	r3, r3
 8014c56:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8014c58:	68fb      	ldr	r3, [r7, #12]
 8014c5a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8014c60:	88fa      	ldrh	r2, [r7, #6]
 8014c62:	697b      	ldr	r3, [r7, #20]
 8014c64:	4413      	add	r3, r2
 8014c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014c6a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8014c6c:	69bb      	ldr	r3, [r7, #24]
 8014c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8014c70:	e018      	b.n	8014ca4 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8014c72:	6a3b      	ldr	r3, [r7, #32]
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	b29b      	uxth	r3, r3
 8014c78:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8014c7a:	6a3b      	ldr	r3, [r7, #32]
 8014c7c:	3302      	adds	r3, #2
 8014c7e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8014c80:	693b      	ldr	r3, [r7, #16]
 8014c82:	b2da      	uxtb	r2, r3
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c88:	69fb      	ldr	r3, [r7, #28]
 8014c8a:	3301      	adds	r3, #1
 8014c8c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8014c8e:	693b      	ldr	r3, [r7, #16]
 8014c90:	0a1b      	lsrs	r3, r3, #8
 8014c92:	b2da      	uxtb	r2, r3
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	3301      	adds	r3, #1
 8014c9c:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8014c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca0:	3b01      	subs	r3, #1
 8014ca2:	627b      	str	r3, [r7, #36]	; 0x24
 8014ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d1e3      	bne.n	8014c72 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8014caa:	88bb      	ldrh	r3, [r7, #4]
 8014cac:	f003 0301 	and.w	r3, r3, #1
 8014cb0:	b29b      	uxth	r3, r3
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d007      	beq.n	8014cc6 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8014cb6:	6a3b      	ldr	r3, [r7, #32]
 8014cb8:	881b      	ldrh	r3, [r3, #0]
 8014cba:	b29b      	uxth	r3, r3
 8014cbc:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8014cbe:	693b      	ldr	r3, [r7, #16]
 8014cc0:	b2da      	uxtb	r2, r3
 8014cc2:	69fb      	ldr	r3, [r7, #28]
 8014cc4:	701a      	strb	r2, [r3, #0]
  }
}
 8014cc6:	bf00      	nop
 8014cc8:	372c      	adds	r7, #44	; 0x2c
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
	...

08014cd4 <__NVIC_SystemReset>:
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014cd8:	f3bf 8f4f 	dsb	sy
}
 8014cdc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014cde:	4b06      	ldr	r3, [pc, #24]	; (8014cf8 <__NVIC_SystemReset+0x24>)
 8014ce0:	68db      	ldr	r3, [r3, #12]
 8014ce2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014ce6:	4904      	ldr	r1, [pc, #16]	; (8014cf8 <__NVIC_SystemReset+0x24>)
 8014ce8:	4b04      	ldr	r3, [pc, #16]	; (8014cfc <__NVIC_SystemReset+0x28>)
 8014cea:	4313      	orrs	r3, r2
 8014cec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014cee:	f3bf 8f4f 	dsb	sy
}
 8014cf2:	bf00      	nop
    __NOP();
 8014cf4:	bf00      	nop
 8014cf6:	e7fd      	b.n	8014cf4 <__NVIC_SystemReset+0x20>
 8014cf8:	e000ed00 	.word	0xe000ed00
 8014cfc:	05fa0004 	.word	0x05fa0004

08014d00 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8014d0c:	f240 401c 	movw	r0, #1052	; 0x41c
 8014d10:	f002 fdc2 	bl	8017898 <USBD_static_malloc>
 8014d14:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d105      	bne.n	8014d28 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014d24:	2302      	movs	r3, #2
 8014d26:	e03f      	b.n	8014da8 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8014d30:	68fb      	ldr	r3, [r7, #12]
 8014d32:	2200      	movs	r2, #0
 8014d34:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8014d3e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	2200      	movs	r2, #0
 8014d46:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	2200      	movs	r2, #0
 8014d56:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	2202      	movs	r2, #2
 8014d5e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2200      	movs	r2, #0
 8014d66:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	2200      	movs	r2, #0
 8014d6e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2200      	movs	r2, #0
 8014d76:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2202      	movs	r2, #2
 8014d86:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	2200      	movs	r2, #0
 8014d8e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d98:	685b      	ldr	r3, [r3, #4]
 8014d9a:	4798      	blx	r3
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d001      	beq.n	8014da6 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8014da2:	2303      	movs	r3, #3
 8014da4:	e000      	b.n	8014da8 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8014da6:	2300      	movs	r3, #0
}
 8014da8:	4618      	mov	r0, r3
 8014daa:	3710      	adds	r7, #16
 8014dac:	46bd      	mov	sp, r7
 8014dae:	bd80      	pop	{r7, pc}

08014db0 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
 8014db8:	460b      	mov	r3, r1
 8014dba:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d101      	bne.n	8014dca <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8014dc6:	2302      	movs	r3, #2
 8014dc8:	e027      	b.n	8014e1a <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014dd0:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8014dd2:	68fb      	ldr	r3, [r7, #12]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	2202      	movs	r2, #2
 8014de6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	2200      	movs	r2, #0
 8014dee:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8014df2:	68fb      	ldr	r3, [r7, #12]
 8014df4:	2202      	movs	r2, #2
 8014df6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014e00:	689b      	ldr	r3, [r3, #8]
 8014e02:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e0a:	4618      	mov	r0, r3
 8014e0c:	f002 fd52 	bl	80178b4 <USBD_static_free>
  pdev->pClassData = NULL;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	2200      	movs	r2, #0
 8014e14:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8014e18:	2300      	movs	r3, #0
}
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	3710      	adds	r7, #16
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	bd80      	pop	{r7, pc}
	...

08014e24 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e24:	b580      	push	{r7, lr}
 8014e26:	b088      	sub	sp, #32
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	6078      	str	r0, [r7, #4]
 8014e2c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014e34:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8014e36:	2300      	movs	r3, #0
 8014e38:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8014e3a:	2300      	movs	r3, #0
 8014e3c:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8014e3e:	2300      	movs	r3, #0
 8014e40:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8014e42:	2300      	movs	r3, #0
 8014e44:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8014e46:	693b      	ldr	r3, [r7, #16]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d101      	bne.n	8014e50 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8014e4c:	2303      	movs	r3, #3
 8014e4e:	e0d5      	b.n	8014ffc <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	781b      	ldrb	r3, [r3, #0]
 8014e54:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d03e      	beq.n	8014eda <USBD_DFU_Setup+0xb6>
 8014e5c:	2b20      	cmp	r3, #32
 8014e5e:	f040 80c5 	bne.w	8014fec <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8014e62:	683b      	ldr	r3, [r7, #0]
 8014e64:	785b      	ldrb	r3, [r3, #1]
 8014e66:	2b06      	cmp	r3, #6
 8014e68:	d82f      	bhi.n	8014eca <USBD_DFU_Setup+0xa6>
 8014e6a:	a201      	add	r2, pc, #4	; (adr r2, 8014e70 <USBD_DFU_Setup+0x4c>)
 8014e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e70:	08014ec1 	.word	0x08014ec1
 8014e74:	08014e8d 	.word	0x08014e8d
 8014e78:	08014e97 	.word	0x08014e97
 8014e7c:	08014ea1 	.word	0x08014ea1
 8014e80:	08014ea9 	.word	0x08014ea9
 8014e84:	08014eb1 	.word	0x08014eb1
 8014e88:	08014eb9 	.word	0x08014eb9
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8014e8c:	6839      	ldr	r1, [r7, #0]
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f000 fa6c 	bl	801536c <DFU_Download>
          break;
 8014e94:	e020      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8014e96:	6839      	ldr	r1, [r7, #0]
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f000 fad3 	bl	8015444 <DFU_Upload>
          break;
 8014e9e:	e01b      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 fba9 	bl	80155f8 <DFU_GetStatus>
          break;
 8014ea6:	e017      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8014ea8:	6878      	ldr	r0, [r7, #4]
 8014eaa:	f000 fc5b 	bl	8015764 <DFU_ClearStatus>
          break;
 8014eae:	e013      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8014eb0:	6878      	ldr	r0, [r7, #4]
 8014eb2:	f000 fcab 	bl	801580c <DFU_GetState>
          break;
 8014eb6:	e00f      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f000 fcbf 	bl	801583c <DFU_Abort>
          break;
 8014ebe:	e00b      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8014ec0:	6839      	ldr	r1, [r7, #0]
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f000 f9ee 	bl	80152a4 <DFU_Detach>
          break;
 8014ec8:	e006      	b.n	8014ed8 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8014eca:	6839      	ldr	r1, [r7, #0]
 8014ecc:	6878      	ldr	r0, [r7, #4]
 8014ece:	f001 fde1 	bl	8016a94 <USBD_CtlError>
          ret = USBD_FAIL;
 8014ed2:	2303      	movs	r3, #3
 8014ed4:	77fb      	strb	r3, [r7, #31]
          break;
 8014ed6:	bf00      	nop
      }
      break;
 8014ed8:	e08f      	b.n	8014ffa <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	785b      	ldrb	r3, [r3, #1]
 8014ede:	2b0b      	cmp	r3, #11
 8014ee0:	d87b      	bhi.n	8014fda <USBD_DFU_Setup+0x1b6>
 8014ee2:	a201      	add	r2, pc, #4	; (adr r2, 8014ee8 <USBD_DFU_Setup+0xc4>)
 8014ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ee8:	08014f19 	.word	0x08014f19
 8014eec:	08014fe9 	.word	0x08014fe9
 8014ef0:	08014fdb 	.word	0x08014fdb
 8014ef4:	08014fdb 	.word	0x08014fdb
 8014ef8:	08014fdb 	.word	0x08014fdb
 8014efc:	08014fdb 	.word	0x08014fdb
 8014f00:	08014f43 	.word	0x08014f43
 8014f04:	08014fdb 	.word	0x08014fdb
 8014f08:	08014fdb 	.word	0x08014fdb
 8014f0c:	08014fdb 	.word	0x08014fdb
 8014f10:	08014f6d 	.word	0x08014f6d
 8014f14:	08014f99 	.word	0x08014f99
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f1e:	b2db      	uxtb	r3, r3
 8014f20:	2b03      	cmp	r3, #3
 8014f22:	d107      	bne.n	8014f34 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014f24:	f107 030e 	add.w	r3, r7, #14
 8014f28:	2202      	movs	r2, #2
 8014f2a:	4619      	mov	r1, r3
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	f001 fe22 	bl	8016b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f32:	e05a      	b.n	8014fea <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8014f34:	6839      	ldr	r1, [r7, #0]
 8014f36:	6878      	ldr	r0, [r7, #4]
 8014f38:	f001 fdac 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f3c:	2303      	movs	r3, #3
 8014f3e:	77fb      	strb	r3, [r7, #31]
          break;
 8014f40:	e053      	b.n	8014fea <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	885b      	ldrh	r3, [r3, #2]
 8014f46:	0a1b      	lsrs	r3, r3, #8
 8014f48:	b29b      	uxth	r3, r3
 8014f4a:	2b21      	cmp	r3, #33	; 0x21
 8014f4c:	d107      	bne.n	8014f5e <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8014f4e:	4b2d      	ldr	r3, [pc, #180]	; (8015004 <USBD_DFU_Setup+0x1e0>)
 8014f50:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8014f52:	683b      	ldr	r3, [r7, #0]
 8014f54:	88db      	ldrh	r3, [r3, #6]
 8014f56:	2b09      	cmp	r3, #9
 8014f58:	bf28      	it	cs
 8014f5a:	2309      	movcs	r3, #9
 8014f5c:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8014f5e:	8afb      	ldrh	r3, [r7, #22]
 8014f60:	461a      	mov	r2, r3
 8014f62:	69b9      	ldr	r1, [r7, #24]
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f001 fe06 	bl	8016b76 <USBD_CtlSendData>
          break;
 8014f6a:	e03e      	b.n	8014fea <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014f72:	b2db      	uxtb	r3, r3
 8014f74:	2b03      	cmp	r3, #3
 8014f76:	d108      	bne.n	8014f8a <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8014f7e:	2201      	movs	r2, #1
 8014f80:	4619      	mov	r1, r3
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f001 fdf7 	bl	8016b76 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014f88:	e02f      	b.n	8014fea <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8014f8a:	6839      	ldr	r1, [r7, #0]
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	f001 fd81 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8014f92:	2303      	movs	r3, #3
 8014f94:	77fb      	strb	r3, [r7, #31]
          break;
 8014f96:	e028      	b.n	8014fea <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8014f98:	683b      	ldr	r3, [r7, #0]
 8014f9a:	885b      	ldrh	r3, [r3, #2]
 8014f9c:	b2db      	uxtb	r3, r3
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d114      	bne.n	8014fcc <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fa8:	b2db      	uxtb	r3, r3
 8014faa:	2b03      	cmp	r3, #3
 8014fac:	d107      	bne.n	8014fbe <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	885b      	ldrh	r3, [r3, #2]
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	461a      	mov	r2, r3
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014fbc:	e015      	b.n	8014fea <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8014fbe:	6839      	ldr	r1, [r7, #0]
 8014fc0:	6878      	ldr	r0, [r7, #4]
 8014fc2:	f001 fd67 	bl	8016a94 <USBD_CtlError>
              ret = USBD_FAIL;
 8014fc6:	2303      	movs	r3, #3
 8014fc8:	77fb      	strb	r3, [r7, #31]
          break;
 8014fca:	e00e      	b.n	8014fea <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8014fcc:	6839      	ldr	r1, [r7, #0]
 8014fce:	6878      	ldr	r0, [r7, #4]
 8014fd0:	f001 fd60 	bl	8016a94 <USBD_CtlError>
            ret = USBD_FAIL;
 8014fd4:	2303      	movs	r3, #3
 8014fd6:	77fb      	strb	r3, [r7, #31]
          break;
 8014fd8:	e007      	b.n	8014fea <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014fda:	6839      	ldr	r1, [r7, #0]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f001 fd59 	bl	8016a94 <USBD_CtlError>
          ret = USBD_FAIL;
 8014fe2:	2303      	movs	r3, #3
 8014fe4:	77fb      	strb	r3, [r7, #31]
          break;
 8014fe6:	e000      	b.n	8014fea <USBD_DFU_Setup+0x1c6>
          break;
 8014fe8:	bf00      	nop
      }
      break;
 8014fea:	e006      	b.n	8014ffa <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f001 fd50 	bl	8016a94 <USBD_CtlError>
      ret = USBD_FAIL;
 8014ff4:	2303      	movs	r3, #3
 8014ff6:	77fb      	strb	r3, [r7, #31]
      break;
 8014ff8:	bf00      	nop
  }

  return (uint8_t)ret;
 8014ffa:	7ffb      	ldrb	r3, [r7, #31]
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	3720      	adds	r7, #32
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	200007fa 	.word	0x200007fa

08015008 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8015008:	b480      	push	{r7}
 801500a:	b083      	sub	sp, #12
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	221b      	movs	r2, #27
 8015014:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8015016:	4b03      	ldr	r3, [pc, #12]	; (8015024 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8015018:	4618      	mov	r0, r3
 801501a:	370c      	adds	r7, #12
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr
 8015024:	200007e8 	.word	0x200007e8

08015028 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015028:	b480      	push	{r7}
 801502a:	b083      	sub	sp, #12
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8015030:	2300      	movs	r3, #0
}
 8015032:	4618      	mov	r0, r3
 8015034:	370c      	adds	r7, #12
 8015036:	46bd      	mov	sp, r7
 8015038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503c:	4770      	bx	lr

0801503e <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b088      	sub	sp, #32
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801504c:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015054:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d101      	bne.n	8015060 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801505c:	2303      	movs	r3, #3
 801505e:	e0ce      	b.n	80151fe <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8015060:	69fb      	ldr	r3, [r7, #28]
 8015062:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015066:	2b04      	cmp	r3, #4
 8015068:	f040 80bd 	bne.w	80151e6 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 801506c:	69fb      	ldr	r3, [r7, #28]
 801506e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015072:	2b00      	cmp	r3, #0
 8015074:	d17c      	bne.n	8015170 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8015076:	69fb      	ldr	r3, [r7, #28]
 8015078:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801507c:	2b01      	cmp	r3, #1
 801507e:	f000 8093 	beq.w	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8015082:	69fb      	ldr	r3, [r7, #28]
 8015084:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015088:	2b05      	cmp	r3, #5
 801508a:	d15e      	bne.n	801514a <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 801508c:	69fb      	ldr	r3, [r7, #28]
 801508e:	781b      	ldrb	r3, [r3, #0]
 8015090:	2b21      	cmp	r3, #33	; 0x21
 8015092:	d124      	bne.n	80150de <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8015094:	69fb      	ldr	r3, [r7, #28]
 8015096:	785b      	ldrb	r3, [r3, #1]
 8015098:	461a      	mov	r2, r3
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80150a6:	69fb      	ldr	r3, [r7, #28]
 80150a8:	789b      	ldrb	r3, [r3, #2]
 80150aa:	021b      	lsls	r3, r3, #8
 80150ac:	441a      	add	r2, r3
 80150ae:	69fb      	ldr	r3, [r7, #28]
 80150b0:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 80150b4:	69fb      	ldr	r3, [r7, #28]
 80150b6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80150ba:	69fb      	ldr	r3, [r7, #28]
 80150bc:	78db      	ldrb	r3, [r3, #3]
 80150be:	041b      	lsls	r3, r3, #16
 80150c0:	441a      	add	r2, r3
 80150c2:	69fb      	ldr	r3, [r7, #28]
 80150c4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 80150c8:	69fb      	ldr	r3, [r7, #28]
 80150ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80150ce:	69fb      	ldr	r3, [r7, #28]
 80150d0:	791b      	ldrb	r3, [r3, #4]
 80150d2:	061b      	lsls	r3, r3, #24
 80150d4:	441a      	add	r2, r3
 80150d6:	69fb      	ldr	r3, [r7, #28]
 80150d8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 80150dc:	e064      	b.n	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 80150de:	69fb      	ldr	r3, [r7, #28]
 80150e0:	781b      	ldrb	r3, [r3, #0]
 80150e2:	2b41      	cmp	r3, #65	; 0x41
 80150e4:	d12f      	bne.n	8015146 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	785b      	ldrb	r3, [r3, #1]
 80150ea:	461a      	mov	r2, r3
 80150ec:	69fb      	ldr	r3, [r7, #28]
 80150ee:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80150f2:	69fb      	ldr	r3, [r7, #28]
 80150f4:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80150f8:	69fb      	ldr	r3, [r7, #28]
 80150fa:	789b      	ldrb	r3, [r3, #2]
 80150fc:	021b      	lsls	r3, r3, #8
 80150fe:	441a      	add	r2, r3
 8015100:	69fb      	ldr	r3, [r7, #28]
 8015102:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8015106:	69fb      	ldr	r3, [r7, #28]
 8015108:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801510c:	69fb      	ldr	r3, [r7, #28]
 801510e:	78db      	ldrb	r3, [r3, #3]
 8015110:	041b      	lsls	r3, r3, #16
 8015112:	441a      	add	r2, r3
 8015114:	69fb      	ldr	r3, [r7, #28]
 8015116:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 801511a:	69fb      	ldr	r3, [r7, #28]
 801511c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015120:	69fb      	ldr	r3, [r7, #28]
 8015122:	791b      	ldrb	r3, [r3, #4]
 8015124:	061b      	lsls	r3, r3, #24
 8015126:	441a      	add	r2, r3
 8015128:	69fb      	ldr	r3, [r7, #28]
 801512a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 801512e:	69bb      	ldr	r3, [r7, #24]
 8015130:	68db      	ldr	r3, [r3, #12]
 8015132:	69fa      	ldr	r2, [r7, #28]
 8015134:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8015138:	4610      	mov	r0, r2
 801513a:	4798      	blx	r3
 801513c:	4603      	mov	r3, r0
 801513e:	2b00      	cmp	r3, #0
 8015140:	d032      	beq.n	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8015142:	2303      	movs	r3, #3
 8015144:	e05b      	b.n	80151fe <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8015146:	2303      	movs	r3, #3
 8015148:	e059      	b.n	80151fe <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 801514a:	69fb      	ldr	r3, [r7, #28]
 801514c:	2200      	movs	r2, #0
 801514e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8015152:	69fb      	ldr	r3, [r7, #28]
 8015154:	2200      	movs	r2, #0
 8015156:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 801515a:	2300      	movs	r3, #0
 801515c:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 801515e:	2301      	movs	r3, #1
 8015160:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8015162:	f107 030c 	add.w	r3, r7, #12
 8015166:	4619      	mov	r1, r3
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f001 fc93 	bl	8016a94 <USBD_CtlError>
 801516e:	e01b      	b.n	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8015170:	69fb      	ldr	r3, [r7, #28]
 8015172:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015176:	2b01      	cmp	r3, #1
 8015178:	d916      	bls.n	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 801517a:	69fb      	ldr	r3, [r7, #28]
 801517c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015180:	3b02      	subs	r3, #2
 8015182:	029a      	lsls	r2, r3, #10
 8015184:	69fb      	ldr	r3, [r7, #28]
 8015186:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 801518a:	4413      	add	r3, r2
 801518c:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	691b      	ldr	r3, [r3, #16]
 8015192:	69f8      	ldr	r0, [r7, #28]
 8015194:	6979      	ldr	r1, [r7, #20]
 8015196:	69fa      	ldr	r2, [r7, #28]
 8015198:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 801519c:	4798      	blx	r3
 801519e:	4603      	mov	r3, r0
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d001      	beq.n	80151a8 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80151a4:	2303      	movs	r3, #3
 80151a6:	e02a      	b.n	80151fe <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80151a8:	69fb      	ldr	r3, [r7, #28]
 80151aa:	2200      	movs	r2, #0
 80151ac:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80151b0:	69fb      	ldr	r3, [r7, #28]
 80151b2:	2200      	movs	r2, #0
 80151b4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 80151b8:	69fb      	ldr	r3, [r7, #28]
 80151ba:	2203      	movs	r2, #3
 80151bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80151c0:	69fb      	ldr	r3, [r7, #28]
 80151c2:	2200      	movs	r2, #0
 80151c4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80151c8:	69fb      	ldr	r3, [r7, #28]
 80151ca:	2200      	movs	r2, #0
 80151cc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80151d0:	69fb      	ldr	r3, [r7, #28]
 80151d2:	2200      	movs	r2, #0
 80151d4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80151d8:	69fb      	ldr	r3, [r7, #28]
 80151da:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80151de:	69fb      	ldr	r3, [r7, #28]
 80151e0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80151e4:	e00a      	b.n	80151fc <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 80151e6:	69fb      	ldr	r3, [r7, #28]
 80151e8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80151ec:	2b07      	cmp	r3, #7
 80151ee:	d103      	bne.n	80151f8 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f000 fb75 	bl	80158e0 <DFU_Leave>
 80151f6:	e001      	b.n	80151fc <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 80151f8:	2303      	movs	r3, #3
 80151fa:	e000      	b.n	80151fe <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 80151fc:	2300      	movs	r3, #0
}
 80151fe:	4618      	mov	r0, r3
 8015200:	3720      	adds	r7, #32
 8015202:	46bd      	mov	sp, r7
 8015204:	bd80      	pop	{r7, pc}

08015206 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8015206:	b480      	push	{r7}
 8015208:	b083      	sub	sp, #12
 801520a:	af00      	add	r7, sp, #0
 801520c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801520e:	2300      	movs	r3, #0
}
 8015210:	4618      	mov	r0, r3
 8015212:	370c      	adds	r7, #12
 8015214:	46bd      	mov	sp, r7
 8015216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521a:	4770      	bx	lr

0801521c <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 801521c:	b480      	push	{r7}
 801521e:	b083      	sub	sp, #12
 8015220:	af00      	add	r7, sp, #0
 8015222:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	220a      	movs	r2, #10
 8015228:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 801522a:	4b03      	ldr	r3, [pc, #12]	; (8015238 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 801522c:	4618      	mov	r0, r3
 801522e:	370c      	adds	r7, #12
 8015230:	46bd      	mov	sp, r7
 8015232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015236:	4770      	bx	lr
 8015238:	20000804 	.word	0x20000804

0801523c <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 801523c:	b580      	push	{r7, lr}
 801523e:	b086      	sub	sp, #24
 8015240:	af00      	add	r7, sp, #0
 8015242:	60f8      	str	r0, [r7, #12]
 8015244:	460b      	mov	r3, r1
 8015246:	607a      	str	r2, [r7, #4]
 8015248:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801524a:	68fb      	ldr	r3, [r7, #12]
 801524c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015250:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 8015252:	7afb      	ldrb	r3, [r7, #11]
 8015254:	2b06      	cmp	r3, #6
 8015256:	d808      	bhi.n	801526a <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 8015258:	697b      	ldr	r3, [r7, #20]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	687a      	ldr	r2, [r7, #4]
 801525e:	4905      	ldr	r1, [pc, #20]	; (8015274 <USBD_DFU_GetUsrStringDesc+0x38>)
 8015260:	4618      	mov	r0, r3
 8015262:	f001 fc28 	bl	8016ab6 <USBD_GetString>
    return USBD_StrDesc;
 8015266:	4b03      	ldr	r3, [pc, #12]	; (8015274 <USBD_DFU_GetUsrStringDesc+0x38>)
 8015268:	e000      	b.n	801526c <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 801526a:	2300      	movs	r3, #0
  }
}
 801526c:	4618      	mov	r0, r3
 801526e:	3718      	adds	r7, #24
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	20000ba4 	.word	0x20000ba4

08015278 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 8015278:	b480      	push	{r7}
 801527a:	b083      	sub	sp, #12
 801527c:	af00      	add	r7, sp, #0
 801527e:	6078      	str	r0, [r7, #4]
 8015280:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8015282:	683b      	ldr	r3, [r7, #0]
 8015284:	2b00      	cmp	r3, #0
 8015286:	d101      	bne.n	801528c <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015288:	2303      	movs	r3, #3
 801528a:	e004      	b.n	8015296 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	683a      	ldr	r2, [r7, #0]
 8015290:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8015294:	2300      	movs	r3, #0
}
 8015296:	4618      	mov	r0, r3
 8015298:	370c      	adds	r7, #12
 801529a:	46bd      	mov	sp, r7
 801529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a0:	4770      	bx	lr
	...

080152a4 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b084      	sub	sp, #16
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	6078      	str	r0, [r7, #4]
 80152ac:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80152b4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	2b00      	cmp	r3, #0
 80152ba:	d051      	beq.n	8015360 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80152c2:	2b02      	cmp	r3, #2
 80152c4:	d013      	beq.n	80152ee <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80152cc:	2b03      	cmp	r3, #3
 80152ce:	d00e      	beq.n	80152ee <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80152d6:	2b05      	cmp	r3, #5
 80152d8:	d009      	beq.n	80152ee <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80152da:	68fb      	ldr	r3, [r7, #12]
 80152dc:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80152e0:	2b06      	cmp	r3, #6
 80152e2:	d004      	beq.n	80152ee <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80152ea:	2b09      	cmp	r3, #9
 80152ec:	d125      	bne.n	801533a <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	2202      	movs	r2, #2
 80152f2:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80152f6:	68fb      	ldr	r3, [r7, #12]
 80152f8:	2200      	movs	r2, #0
 80152fa:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2200      	movs	r2, #0
 8015302:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2200      	movs	r2, #0
 801530a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	2200      	movs	r2, #0
 8015312:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015316:	68fb      	ldr	r3, [r7, #12]
 8015318:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2200      	movs	r2, #0
 8015326:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	2200      	movs	r2, #0
 801532e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2200      	movs	r2, #0
 8015336:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 801533a:	4b0b      	ldr	r3, [pc, #44]	; (8015368 <DFU_Detach+0xc4>)
 801533c:	7d5b      	ldrb	r3, [r3, #21]
 801533e:	f003 0310 	and.w	r3, r3, #16
 8015342:	2b00      	cmp	r3, #0
 8015344:	d006      	beq.n	8015354 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8015346:	6878      	ldr	r0, [r7, #4]
 8015348:	f000 fbab 	bl	8015aa2 <USBD_Stop>
    (void)USBD_Start(pdev);
 801534c:	6878      	ldr	r0, [r7, #4]
 801534e:	f000 fb9c 	bl	8015a8a <USBD_Start>
 8015352:	e006      	b.n	8015362 <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	885b      	ldrh	r3, [r3, #2]
 8015358:	4618      	mov	r0, r3
 801535a:	f7f5 f889 	bl	800a470 <HAL_Delay>
 801535e:	e000      	b.n	8015362 <DFU_Detach+0xbe>
    return;
 8015360:	bf00      	nop
  }
}
 8015362:	3710      	adds	r7, #16
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}
 8015368:	200007e8 	.word	0x200007e8

0801536c <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801536c:	b580      	push	{r7, lr}
 801536e:	b084      	sub	sp, #16
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
 8015374:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801537c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d05b      	beq.n	801543c <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	88db      	ldrh	r3, [r3, #6]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d02d      	beq.n	80153e8 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015392:	2b02      	cmp	r3, #2
 8015394:	d004      	beq.n	80153a0 <DFU_Download+0x34>
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801539c:	2b05      	cmp	r3, #5
 801539e:	d11e      	bne.n	80153de <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80153a0:	683b      	ldr	r3, [r7, #0]
 80153a2:	885b      	ldrh	r3, [r3, #2]
 80153a4:	461a      	mov	r2, r3
 80153a6:	68fb      	ldr	r3, [r7, #12]
 80153a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	88db      	ldrh	r3, [r3, #6]
 80153b0:	461a      	mov	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	2203      	movs	r2, #3
 80153bc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 80153cc:	68f9      	ldr	r1, [r7, #12]
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80153d4:	461a      	mov	r2, r3
 80153d6:	6878      	ldr	r0, [r7, #4]
 80153d8:	f001 fbf9 	bl	8016bce <USBD_CtlPrepareRx>
 80153dc:	e02f      	b.n	801543e <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80153de:	6839      	ldr	r1, [r7, #0]
 80153e0:	6878      	ldr	r0, [r7, #4]
 80153e2:	f001 fb57 	bl	8016a94 <USBD_CtlError>
 80153e6:	e02a      	b.n	801543e <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 80153e8:	68fb      	ldr	r3, [r7, #12]
 80153ea:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80153ee:	2b05      	cmp	r3, #5
 80153f0:	d004      	beq.n	80153fc <DFU_Download+0x90>
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80153f8:	2b02      	cmp	r3, #2
 80153fa:	d11a      	bne.n	8015432 <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 80153fc:	68fb      	ldr	r3, [r7, #12]
 80153fe:	2201      	movs	r2, #1
 8015400:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2206      	movs	r2, #6
 8015408:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2200      	movs	r2, #0
 8015410:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	2200      	movs	r2, #0
 8015418:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	2200      	movs	r2, #0
 8015420:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015430:	e005      	b.n	801543e <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8015432:	6839      	ldr	r1, [r7, #0]
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f001 fb2d 	bl	8016a94 <USBD_CtlError>
 801543a:	e000      	b.n	801543e <DFU_Download+0xd2>
    return;
 801543c:	bf00      	nop
    }
  }
}
 801543e:	3710      	adds	r7, #16
 8015440:	46bd      	mov	sp, r7
 8015442:	bd80      	pop	{r7, pc}

08015444 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b086      	sub	sp, #24
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
 801544c:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015454:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801545c:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	2b00      	cmp	r3, #0
 8015462:	f000 80c4 	beq.w	80155ee <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8015466:	683b      	ldr	r3, [r7, #0]
 8015468:	88db      	ldrh	r3, [r3, #6]
 801546a:	2b00      	cmp	r3, #0
 801546c:	f000 80a8 	beq.w	80155c0 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015470:	697b      	ldr	r3, [r7, #20]
 8015472:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015476:	2b02      	cmp	r3, #2
 8015478:	d005      	beq.n	8015486 <DFU_Upload+0x42>
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015480:	2b09      	cmp	r3, #9
 8015482:	f040 8090 	bne.w	80155a6 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8015486:	683b      	ldr	r3, [r7, #0]
 8015488:	885b      	ldrh	r3, [r3, #2]
 801548a:	461a      	mov	r2, r3
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8015492:	683b      	ldr	r3, [r7, #0]
 8015494:	88db      	ldrh	r3, [r3, #6]
 8015496:	461a      	mov	r2, r3
 8015498:	697b      	ldr	r3, [r7, #20]
 801549a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 801549e:	697b      	ldr	r3, [r7, #20]
 80154a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d12c      	bne.n	8015502 <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 80154a8:	697b      	ldr	r3, [r7, #20]
 80154aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80154ae:	2b03      	cmp	r3, #3
 80154b0:	d901      	bls.n	80154b6 <DFU_Upload+0x72>
 80154b2:	2202      	movs	r2, #2
 80154b4:	e000      	b.n	80154b8 <DFU_Upload+0x74>
 80154b6:	2209      	movs	r2, #9
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80154c6:	697b      	ldr	r3, [r7, #20]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	2200      	movs	r2, #0
 80154d2:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	2200      	movs	r2, #0
 80154e6:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 80154e8:	697b      	ldr	r3, [r7, #20]
 80154ea:	2221      	movs	r2, #33	; 0x21
 80154ec:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	2241      	movs	r2, #65	; 0x41
 80154f2:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 80154f4:	697b      	ldr	r3, [r7, #20]
 80154f6:	2203      	movs	r2, #3
 80154f8:	4619      	mov	r1, r3
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f001 fb3b 	bl	8016b76 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8015500:	e076      	b.n	80155f0 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8015502:	697b      	ldr	r3, [r7, #20]
 8015504:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015508:	2b01      	cmp	r3, #1
 801550a:	d931      	bls.n	8015570 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 801550c:	697b      	ldr	r3, [r7, #20]
 801550e:	2209      	movs	r2, #9
 8015510:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015514:	697b      	ldr	r3, [r7, #20]
 8015516:	2200      	movs	r2, #0
 8015518:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801551c:	697b      	ldr	r3, [r7, #20]
 801551e:	2200      	movs	r2, #0
 8015520:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	2200      	movs	r2, #0
 8015528:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801552c:	697b      	ldr	r3, [r7, #20]
 801552e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8015538:	697b      	ldr	r3, [r7, #20]
 801553a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801553e:	3b02      	subs	r3, #2
 8015540:	029a      	lsls	r2, r3, #10
 8015542:	697b      	ldr	r3, [r7, #20]
 8015544:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8015548:	4413      	add	r3, r2
 801554a:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 801554c:	693b      	ldr	r3, [r7, #16]
 801554e:	695b      	ldr	r3, [r3, #20]
 8015550:	68f8      	ldr	r0, [r7, #12]
 8015552:	6979      	ldr	r1, [r7, #20]
 8015554:	697a      	ldr	r2, [r7, #20]
 8015556:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 801555a:	4798      	blx	r3
 801555c:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015564:	461a      	mov	r2, r3
 8015566:	68b9      	ldr	r1, [r7, #8]
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f001 fb04 	bl	8016b76 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 801556e:	e03f      	b.n	80155f0 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8015570:	697b      	ldr	r3, [r7, #20]
 8015572:	220f      	movs	r2, #15
 8015574:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015578:	697b      	ldr	r3, [r7, #20]
 801557a:	2200      	movs	r2, #0
 801557c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015580:	697b      	ldr	r3, [r7, #20]
 8015582:	2200      	movs	r2, #0
 8015584:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	2200      	movs	r2, #0
 801558c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015590:	697b      	ldr	r3, [r7, #20]
 8015592:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 801559c:	6839      	ldr	r1, [r7, #0]
 801559e:	6878      	ldr	r0, [r7, #4]
 80155a0:	f001 fa78 	bl	8016a94 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80155a4:	e024      	b.n	80155f0 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	2200      	movs	r2, #0
 80155aa:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	2200      	movs	r2, #0
 80155b2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 80155b6:	6839      	ldr	r1, [r7, #0]
 80155b8:	6878      	ldr	r0, [r7, #4]
 80155ba:	f001 fa6b 	bl	8016a94 <USBD_CtlError>
 80155be:	e017      	b.n	80155f0 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80155c0:	697b      	ldr	r3, [r7, #20]
 80155c2:	2202      	movs	r2, #2
 80155c4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	2200      	movs	r2, #0
 80155cc:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	2200      	movs	r2, #0
 80155d4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	2200      	movs	r2, #0
 80155dc:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80155e6:	697b      	ldr	r3, [r7, #20]
 80155e8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 80155ec:	e000      	b.n	80155f0 <DFU_Upload+0x1ac>
    return;
 80155ee:	bf00      	nop
  }
}
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
	...

080155f8 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015606:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801560e:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	2b00      	cmp	r3, #0
 8015614:	f000 80a0 	beq.w	8015758 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801561e:	2b03      	cmp	r3, #3
 8015620:	d002      	beq.n	8015628 <DFU_GetStatus+0x30>
 8015622:	2b06      	cmp	r3, #6
 8015624:	d051      	beq.n	80156ca <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8015626:	e08e      	b.n	8015746 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801562e:	2b00      	cmp	r3, #0
 8015630:	d034      	beq.n	801569c <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8015632:	68fb      	ldr	r3, [r7, #12]
 8015634:	2204      	movs	r2, #4
 8015636:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	2200      	movs	r2, #0
 801563e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015642:	68fb      	ldr	r3, [r7, #12]
 8015644:	2200      	movs	r2, #0
 8015646:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	2200      	movs	r2, #0
 801564e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015664:	2b00      	cmp	r3, #0
 8015666:	d10e      	bne.n	8015686 <DFU_GetStatus+0x8e>
 8015668:	68fb      	ldr	r3, [r7, #12]
 801566a:	781b      	ldrb	r3, [r3, #0]
 801566c:	2b41      	cmp	r3, #65	; 0x41
 801566e:	d10a      	bne.n	8015686 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8015670:	68bb      	ldr	r3, [r7, #8]
 8015672:	699b      	ldr	r3, [r3, #24]
 8015674:	68fa      	ldr	r2, [r7, #12]
 8015676:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 801567a:	68fa      	ldr	r2, [r7, #12]
 801567c:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8015680:	2100      	movs	r1, #0
 8015682:	4798      	blx	r3
      break;
 8015684:	e05f      	b.n	8015746 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	699b      	ldr	r3, [r3, #24]
 801568a:	68fa      	ldr	r2, [r7, #12]
 801568c:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8015690:	68fa      	ldr	r2, [r7, #12]
 8015692:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8015696:	2101      	movs	r1, #1
 8015698:	4798      	blx	r3
      break;
 801569a:	e054      	b.n	8015746 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	2205      	movs	r2, #5
 80156a0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	2200      	movs	r2, #0
 80156a8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80156ac:	68fb      	ldr	r3, [r7, #12]
 80156ae:	2200      	movs	r2, #0
 80156b0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	2200      	movs	r2, #0
 80156b8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 80156c8:	e03d      	b.n	8015746 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 80156d0:	2b01      	cmp	r3, #1
 80156d2:	d116      	bne.n	8015702 <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	2207      	movs	r2, #7
 80156d8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	2201      	movs	r2, #1
 80156e0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	2200      	movs	r2, #0
 80156e8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80156ec:	68fb      	ldr	r3, [r7, #12]
 80156ee:	2200      	movs	r2, #0
 80156f0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8015700:	e020      	b.n	8015744 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8015708:	2b00      	cmp	r3, #0
 801570a:	d11b      	bne.n	8015744 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 801570c:	4b14      	ldr	r3, [pc, #80]	; (8015760 <DFU_GetStatus+0x168>)
 801570e:	7d1b      	ldrb	r3, [r3, #20]
 8015710:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8015714:	2b00      	cmp	r3, #0
 8015716:	d015      	beq.n	8015744 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2202      	movs	r2, #2
 801571c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	2200      	movs	r2, #0
 8015724:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	2200      	movs	r2, #0
 801572c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	2200      	movs	r2, #0
 8015734:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8015738:	68fb      	ldr	r3, [r7, #12]
 801573a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8015744:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 801574c:	2206      	movs	r2, #6
 801574e:	4619      	mov	r1, r3
 8015750:	6878      	ldr	r0, [r7, #4]
 8015752:	f001 fa10 	bl	8016b76 <USBD_CtlSendData>
 8015756:	e000      	b.n	801575a <DFU_GetStatus+0x162>
    return;
 8015758:	bf00      	nop
}
 801575a:	3710      	adds	r7, #16
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}
 8015760:	200007e8 	.word	0x200007e8

08015764 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8015764:	b480      	push	{r7}
 8015766:	b085      	sub	sp, #20
 8015768:	af00      	add	r7, sp, #0
 801576a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015772:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	2b00      	cmp	r3, #0
 8015778:	d042      	beq.n	8015800 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 801577a:	68fb      	ldr	r3, [r7, #12]
 801577c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015780:	2b0a      	cmp	r3, #10
 8015782:	d11e      	bne.n	80157c2 <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	2202      	movs	r2, #2
 8015788:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	2200      	movs	r2, #0
 8015790:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	2200      	movs	r2, #0
 8015798:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	2200      	movs	r2, #0
 80157a0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	2200      	movs	r2, #0
 80157a8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	2200      	movs	r2, #0
 80157bc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 80157c0:	e01f      	b.n	8015802 <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	220a      	movs	r2, #10
 80157c6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	220e      	movs	r2, #14
 80157ce:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	2200      	movs	r2, #0
 80157d6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2200      	movs	r2, #0
 80157de:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	2200      	movs	r2, #0
 80157e6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80157f0:	68fb      	ldr	r3, [r7, #12]
 80157f2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	2200      	movs	r2, #0
 80157fa:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 80157fe:	e000      	b.n	8015802 <DFU_ClearStatus+0x9e>
    return;
 8015800:	bf00      	nop
  }
}
 8015802:	3714      	adds	r7, #20
 8015804:	46bd      	mov	sp, r7
 8015806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801580a:	4770      	bx	lr

0801580c <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b084      	sub	sp, #16
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801581a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801581c:	68fb      	ldr	r3, [r7, #12]
 801581e:	2b00      	cmp	r3, #0
 8015820:	d008      	beq.n	8015834 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8015828:	2201      	movs	r2, #1
 801582a:	4619      	mov	r1, r3
 801582c:	6878      	ldr	r0, [r7, #4]
 801582e:	f001 f9a2 	bl	8016b76 <USBD_CtlSendData>
 8015832:	e000      	b.n	8015836 <DFU_GetState+0x2a>
    return;
 8015834:	bf00      	nop
}
 8015836:	3710      	adds	r7, #16
 8015838:	46bd      	mov	sp, r7
 801583a:	bd80      	pop	{r7, pc}

0801583c <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 801583c:	b480      	push	{r7}
 801583e:	b085      	sub	sp, #20
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801584a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801584c:	68fb      	ldr	r3, [r7, #12]
 801584e:	2b00      	cmp	r3, #0
 8015850:	d03f      	beq.n	80158d2 <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015858:	2b02      	cmp	r3, #2
 801585a:	d013      	beq.n	8015884 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015862:	2b03      	cmp	r3, #3
 8015864:	d00e      	beq.n	8015884 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801586c:	2b05      	cmp	r3, #5
 801586e:	d009      	beq.n	8015884 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015870:	68fb      	ldr	r3, [r7, #12]
 8015872:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015876:	2b06      	cmp	r3, #6
 8015878:	d004      	beq.n	8015884 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015880:	2b09      	cmp	r3, #9
 8015882:	d127      	bne.n	80158d4 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015884:	68fb      	ldr	r3, [r7, #12]
 8015886:	2202      	movs	r2, #2
 8015888:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	2200      	movs	r2, #0
 8015890:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	2200      	movs	r2, #0
 8015898:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2200      	movs	r2, #0
 80158a0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	2200      	movs	r2, #0
 80158bc:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2200      	movs	r2, #0
 80158c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	2200      	movs	r2, #0
 80158cc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 80158d0:	e000      	b.n	80158d4 <DFU_Abort+0x98>
    return;
 80158d2:	bf00      	nop
  }
}
 80158d4:	3714      	adds	r7, #20
 80158d6:	46bd      	mov	sp, r7
 80158d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158dc:	4770      	bx	lr
	...

080158e0 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b084      	sub	sp, #16
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80158ee:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80158f0:	68fb      	ldr	r3, [r7, #12]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d03b      	beq.n	801596e <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	2200      	movs	r2, #0
 80158fa:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 80158fe:	4b1e      	ldr	r3, [pc, #120]	; (8015978 <DFU_Leave+0x98>)
 8015900:	7d1b      	ldrb	r3, [r3, #20]
 8015902:	f003 0304 	and.w	r3, r3, #4
 8015906:	2b00      	cmp	r3, #0
 8015908:	d016      	beq.n	8015938 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	2206      	movs	r2, #6
 801590e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	2200      	movs	r2, #0
 8015916:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801591a:	68fb      	ldr	r3, [r7, #12]
 801591c:	2200      	movs	r2, #0
 801591e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	2200      	movs	r2, #0
 8015926:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801592a:	68fb      	ldr	r3, [r7, #12]
 801592c:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8015936:	e01b      	b.n	8015970 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8015938:	68fb      	ldr	r3, [r7, #12]
 801593a:	2208      	movs	r2, #8
 801593c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015940:	68fb      	ldr	r3, [r7, #12]
 8015942:	2200      	movs	r2, #0
 8015944:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	2200      	movs	r2, #0
 801594c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015950:	68fb      	ldr	r3, [r7, #12]
 8015952:	2200      	movs	r2, #0
 8015954:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f000 f89c 	bl	8015aa2 <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 801596a:	f7ff f9b3 	bl	8014cd4 <__NVIC_SystemReset>
    return;
 801596e:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 8015970:	3710      	adds	r7, #16
 8015972:	46bd      	mov	sp, r7
 8015974:	bd80      	pop	{r7, pc}
 8015976:	bf00      	nop
 8015978:	200007e8 	.word	0x200007e8

0801597c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b086      	sub	sp, #24
 8015980:	af00      	add	r7, sp, #0
 8015982:	60f8      	str	r0, [r7, #12]
 8015984:	60b9      	str	r1, [r7, #8]
 8015986:	4613      	mov	r3, r2
 8015988:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801598a:	68fb      	ldr	r3, [r7, #12]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015990:	2303      	movs	r3, #3
 8015992:	e01f      	b.n	80159d4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	2200      	movs	r2, #0
 8015998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2200      	movs	r2, #0
 80159a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	2200      	movs	r2, #0
 80159a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80159ac:	68bb      	ldr	r3, [r7, #8]
 80159ae:	2b00      	cmp	r3, #0
 80159b0:	d003      	beq.n	80159ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	68ba      	ldr	r2, [r7, #8]
 80159b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80159ba:	68fb      	ldr	r3, [r7, #12]
 80159bc:	2201      	movs	r2, #1
 80159be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80159c2:	68fb      	ldr	r3, [r7, #12]
 80159c4:	79fa      	ldrb	r2, [r7, #7]
 80159c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80159c8:	68f8      	ldr	r0, [r7, #12]
 80159ca:	f001 fc59 	bl	8017280 <USBD_LL_Init>
 80159ce:	4603      	mov	r3, r0
 80159d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80159d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80159d4:	4618      	mov	r0, r3
 80159d6:	3718      	adds	r7, #24
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}

080159dc <USBD_Init_CDC>:

/* USER CODE BEGIN*/
USBD_StatusTypeDef USBD_Init_CDC(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b086      	sub	sp, #24
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	60f8      	str	r0, [r7, #12]
 80159e4:	60b9      	str	r1, [r7, #8]
 80159e6:	4613      	mov	r3, r2
 80159e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80159ea:	68fb      	ldr	r3, [r7, #12]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <USBD_Init_CDC+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80159f0:	2303      	movs	r3, #3
 80159f2:	e01f      	b.n	8015a34 <USBD_Init_CDC+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	2200      	movs	r2, #0
 80159f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	2200      	movs	r2, #0
 8015a00:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	2200      	movs	r2, #0
 8015a08:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015a0c:	68bb      	ldr	r3, [r7, #8]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d003      	beq.n	8015a1a <USBD_Init_CDC+0x3e>
  {
    pdev->pDesc = pdesc;
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	68ba      	ldr	r2, [r7, #8]
 8015a16:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2201      	movs	r2, #1
 8015a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	79fa      	ldrb	r2, [r7, #7]
 8015a26:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init_CDC(pdev);
 8015a28:	68f8      	ldr	r0, [r7, #12]
 8015a2a:	f001 fc71 	bl	8017310 <USBD_LL_Init_CDC>
 8015a2e:	4603      	mov	r3, r0
 8015a30:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a34:	4618      	mov	r0, r3
 8015a36:	3718      	adds	r7, #24
 8015a38:	46bd      	mov	sp, r7
 8015a3a:	bd80      	pop	{r7, pc}

08015a3c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015a3c:	b580      	push	{r7, lr}
 8015a3e:	b084      	sub	sp, #16
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
 8015a44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015a46:	2300      	movs	r3, #0
 8015a48:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015a4a:	683b      	ldr	r3, [r7, #0]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d101      	bne.n	8015a54 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015a50:	2303      	movs	r3, #3
 8015a52:	e016      	b.n	8015a82 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	683a      	ldr	r2, [r7, #0]
 8015a58:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	d00b      	beq.n	8015a80 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8015a68:	687b      	ldr	r3, [r7, #4]
 8015a6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a70:	f107 020e 	add.w	r2, r7, #14
 8015a74:	4610      	mov	r0, r2
 8015a76:	4798      	blx	r3
 8015a78:	4602      	mov	r2, r0
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8015a80:	2300      	movs	r3, #0
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3710      	adds	r7, #16
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}

08015a8a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015a8a:	b580      	push	{r7, lr}
 8015a8c:	b082      	sub	sp, #8
 8015a8e:	af00      	add	r7, sp, #0
 8015a90:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f001 fc9e 	bl	80173d4 <USBD_LL_Start>
 8015a98:	4603      	mov	r3, r0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3708      	adds	r7, #8
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b082      	sub	sp, #8
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8015aaa:	6878      	ldr	r0, [r7, #4]
 8015aac:	f001 fcc4 	bl	8017438 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d009      	beq.n	8015ace <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015aba:	687b      	ldr	r3, [r7, #4]
 8015abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ac0:	685b      	ldr	r3, [r3, #4]
 8015ac2:	687a      	ldr	r2, [r7, #4]
 8015ac4:	6852      	ldr	r2, [r2, #4]
 8015ac6:	b2d2      	uxtb	r2, r2
 8015ac8:	4611      	mov	r1, r2
 8015aca:	6878      	ldr	r0, [r7, #4]
 8015acc:	4798      	blx	r3
  }

  return USBD_OK;
 8015ace:	2300      	movs	r3, #0
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3708      	adds	r7, #8
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015ad8:	b480      	push	{r7}
 8015ada:	b083      	sub	sp, #12
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015ae0:	2300      	movs	r3, #0
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	370c      	adds	r7, #12
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aec:	4770      	bx	lr

08015aee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015aee:	b580      	push	{r7, lr}
 8015af0:	b084      	sub	sp, #16
 8015af2:	af00      	add	r7, sp, #0
 8015af4:	6078      	str	r0, [r7, #4]
 8015af6:	460b      	mov	r3, r1
 8015af8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015afa:	2303      	movs	r3, #3
 8015afc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d009      	beq.n	8015b1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	78fa      	ldrb	r2, [r7, #3]
 8015b12:	4611      	mov	r1, r2
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	4798      	blx	r3
 8015b18:	4603      	mov	r3, r0
 8015b1a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015b1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3710      	adds	r7, #16
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b082      	sub	sp, #8
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
 8015b2e:	460b      	mov	r3, r1
 8015b30:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d007      	beq.n	8015b4c <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b42:	685b      	ldr	r3, [r3, #4]
 8015b44:	78fa      	ldrb	r2, [r7, #3]
 8015b46:	4611      	mov	r1, r2
 8015b48:	6878      	ldr	r0, [r7, #4]
 8015b4a:	4798      	blx	r3
  }

  return USBD_OK;
 8015b4c:	2300      	movs	r3, #0
}
 8015b4e:	4618      	mov	r0, r3
 8015b50:	3708      	adds	r7, #8
 8015b52:	46bd      	mov	sp, r7
 8015b54:	bd80      	pop	{r7, pc}

08015b56 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015b56:	b580      	push	{r7, lr}
 8015b58:	b084      	sub	sp, #16
 8015b5a:	af00      	add	r7, sp, #0
 8015b5c:	6078      	str	r0, [r7, #4]
 8015b5e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015b66:	6839      	ldr	r1, [r7, #0]
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f000 ff59 	bl	8016a20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2201      	movs	r2, #1
 8015b72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015b8a:	f003 031f 	and.w	r3, r3, #31
 8015b8e:	2b02      	cmp	r3, #2
 8015b90:	d01a      	beq.n	8015bc8 <USBD_LL_SetupStage+0x72>
 8015b92:	2b02      	cmp	r3, #2
 8015b94:	d822      	bhi.n	8015bdc <USBD_LL_SetupStage+0x86>
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d002      	beq.n	8015ba0 <USBD_LL_SetupStage+0x4a>
 8015b9a:	2b01      	cmp	r3, #1
 8015b9c:	d00a      	beq.n	8015bb4 <USBD_LL_SetupStage+0x5e>
 8015b9e:	e01d      	b.n	8015bdc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015ba6:	4619      	mov	r1, r3
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f000 f9ef 	bl	8015f8c <USBD_StdDevReq>
 8015bae:	4603      	mov	r3, r0
 8015bb0:	73fb      	strb	r3, [r7, #15]
      break;
 8015bb2:	e020      	b.n	8015bf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bba:	4619      	mov	r1, r3
 8015bbc:	6878      	ldr	r0, [r7, #4]
 8015bbe:	f000 fa53 	bl	8016068 <USBD_StdItfReq>
 8015bc2:	4603      	mov	r3, r0
 8015bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8015bc6:	e016      	b.n	8015bf6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bce:	4619      	mov	r1, r3
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f000 fa92 	bl	80160fa <USBD_StdEPReq>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8015bda:	e00c      	b.n	8015bf6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015be2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015be6:	b2db      	uxtb	r3, r3
 8015be8:	4619      	mov	r1, r3
 8015bea:	6878      	ldr	r0, [r7, #4]
 8015bec:	f001 fcca 	bl	8017584 <USBD_LL_StallEP>
 8015bf0:	4603      	mov	r3, r0
 8015bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8015bf4:	bf00      	nop
  }

  return ret;
 8015bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	3710      	adds	r7, #16
 8015bfc:	46bd      	mov	sp, r7
 8015bfe:	bd80      	pop	{r7, pc}

08015c00 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b086      	sub	sp, #24
 8015c04:	af00      	add	r7, sp, #0
 8015c06:	60f8      	str	r0, [r7, #12]
 8015c08:	460b      	mov	r3, r1
 8015c0a:	607a      	str	r2, [r7, #4]
 8015c0c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015c0e:	7afb      	ldrb	r3, [r7, #11]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	d138      	bne.n	8015c86 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015c1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c22:	2b03      	cmp	r3, #3
 8015c24:	d14a      	bne.n	8015cbc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	689a      	ldr	r2, [r3, #8]
 8015c2a:	693b      	ldr	r3, [r7, #16]
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	429a      	cmp	r2, r3
 8015c30:	d913      	bls.n	8015c5a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015c32:	693b      	ldr	r3, [r7, #16]
 8015c34:	689a      	ldr	r2, [r3, #8]
 8015c36:	693b      	ldr	r3, [r7, #16]
 8015c38:	68db      	ldr	r3, [r3, #12]
 8015c3a:	1ad2      	subs	r2, r2, r3
 8015c3c:	693b      	ldr	r3, [r7, #16]
 8015c3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015c40:	693b      	ldr	r3, [r7, #16]
 8015c42:	68da      	ldr	r2, [r3, #12]
 8015c44:	693b      	ldr	r3, [r7, #16]
 8015c46:	689b      	ldr	r3, [r3, #8]
 8015c48:	4293      	cmp	r3, r2
 8015c4a:	bf28      	it	cs
 8015c4c:	4613      	movcs	r3, r2
 8015c4e:	461a      	mov	r2, r3
 8015c50:	6879      	ldr	r1, [r7, #4]
 8015c52:	68f8      	ldr	r0, [r7, #12]
 8015c54:	f000 ffd8 	bl	8016c08 <USBD_CtlContinueRx>
 8015c58:	e030      	b.n	8015cbc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c60:	b2db      	uxtb	r3, r3
 8015c62:	2b03      	cmp	r3, #3
 8015c64:	d10b      	bne.n	8015c7e <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c6c:	691b      	ldr	r3, [r3, #16]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d005      	beq.n	8015c7e <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c78:	691b      	ldr	r3, [r3, #16]
 8015c7a:	68f8      	ldr	r0, [r7, #12]
 8015c7c:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8015c7e:	68f8      	ldr	r0, [r7, #12]
 8015c80:	f000 ffd3 	bl	8016c2a <USBD_CtlSendStatus>
 8015c84:	e01a      	b.n	8015cbc <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c8c:	b2db      	uxtb	r3, r3
 8015c8e:	2b03      	cmp	r3, #3
 8015c90:	d114      	bne.n	8015cbc <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c98:	699b      	ldr	r3, [r3, #24]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d00e      	beq.n	8015cbc <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ca4:	699b      	ldr	r3, [r3, #24]
 8015ca6:	7afa      	ldrb	r2, [r7, #11]
 8015ca8:	4611      	mov	r1, r2
 8015caa:	68f8      	ldr	r0, [r7, #12]
 8015cac:	4798      	blx	r3
 8015cae:	4603      	mov	r3, r0
 8015cb0:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015cb2:	7dfb      	ldrb	r3, [r7, #23]
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d001      	beq.n	8015cbc <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8015cb8:	7dfb      	ldrb	r3, [r7, #23]
 8015cba:	e000      	b.n	8015cbe <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8015cbc:	2300      	movs	r3, #0
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3718      	adds	r7, #24
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b086      	sub	sp, #24
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	60f8      	str	r0, [r7, #12]
 8015cce:	460b      	mov	r3, r1
 8015cd0:	607a      	str	r2, [r7, #4]
 8015cd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015cd4:	7afb      	ldrb	r3, [r7, #11]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d16b      	bne.n	8015db2 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	3314      	adds	r3, #20
 8015cde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015ce6:	2b02      	cmp	r3, #2
 8015ce8:	d156      	bne.n	8015d98 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8015cea:	693b      	ldr	r3, [r7, #16]
 8015cec:	689a      	ldr	r2, [r3, #8]
 8015cee:	693b      	ldr	r3, [r7, #16]
 8015cf0:	68db      	ldr	r3, [r3, #12]
 8015cf2:	429a      	cmp	r2, r3
 8015cf4:	d914      	bls.n	8015d20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015cf6:	693b      	ldr	r3, [r7, #16]
 8015cf8:	689a      	ldr	r2, [r3, #8]
 8015cfa:	693b      	ldr	r3, [r7, #16]
 8015cfc:	68db      	ldr	r3, [r3, #12]
 8015cfe:	1ad2      	subs	r2, r2, r3
 8015d00:	693b      	ldr	r3, [r7, #16]
 8015d02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015d04:	693b      	ldr	r3, [r7, #16]
 8015d06:	689b      	ldr	r3, [r3, #8]
 8015d08:	461a      	mov	r2, r3
 8015d0a:	6879      	ldr	r1, [r7, #4]
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f000 ff4d 	bl	8016bac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d12:	2300      	movs	r3, #0
 8015d14:	2200      	movs	r2, #0
 8015d16:	2100      	movs	r1, #0
 8015d18:	68f8      	ldr	r0, [r7, #12]
 8015d1a:	f001 fd3b 	bl	8017794 <USBD_LL_PrepareReceive>
 8015d1e:	e03b      	b.n	8015d98 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015d20:	693b      	ldr	r3, [r7, #16]
 8015d22:	68da      	ldr	r2, [r3, #12]
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	689b      	ldr	r3, [r3, #8]
 8015d28:	429a      	cmp	r2, r3
 8015d2a:	d11c      	bne.n	8015d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	685a      	ldr	r2, [r3, #4]
 8015d30:	693b      	ldr	r3, [r7, #16]
 8015d32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d316      	bcc.n	8015d66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015d38:	693b      	ldr	r3, [r7, #16]
 8015d3a:	685a      	ldr	r2, [r3, #4]
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015d42:	429a      	cmp	r2, r3
 8015d44:	d20f      	bcs.n	8015d66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015d46:	2200      	movs	r2, #0
 8015d48:	2100      	movs	r1, #0
 8015d4a:	68f8      	ldr	r0, [r7, #12]
 8015d4c:	f000 ff2e 	bl	8016bac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2200      	movs	r2, #0
 8015d54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d58:	2300      	movs	r3, #0
 8015d5a:	2200      	movs	r2, #0
 8015d5c:	2100      	movs	r1, #0
 8015d5e:	68f8      	ldr	r0, [r7, #12]
 8015d60:	f001 fd18 	bl	8017794 <USBD_LL_PrepareReceive>
 8015d64:	e018      	b.n	8015d98 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015d6c:	b2db      	uxtb	r3, r3
 8015d6e:	2b03      	cmp	r3, #3
 8015d70:	d10b      	bne.n	8015d8a <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d005      	beq.n	8015d8a <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	68f8      	ldr	r0, [r7, #12]
 8015d88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015d8a:	2180      	movs	r1, #128	; 0x80
 8015d8c:	68f8      	ldr	r0, [r7, #12]
 8015d8e:	f001 fbf9 	bl	8017584 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015d92:	68f8      	ldr	r0, [r7, #12]
 8015d94:	f000 ff5c 	bl	8016c50 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d122      	bne.n	8015de8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f7ff fe98 	bl	8015ad8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2200      	movs	r2, #0
 8015dac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015db0:	e01a      	b.n	8015de8 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015db2:	68fb      	ldr	r3, [r7, #12]
 8015db4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015db8:	b2db      	uxtb	r3, r3
 8015dba:	2b03      	cmp	r3, #3
 8015dbc:	d114      	bne.n	8015de8 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dc4:	695b      	ldr	r3, [r3, #20]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00e      	beq.n	8015de8 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dd0:	695b      	ldr	r3, [r3, #20]
 8015dd2:	7afa      	ldrb	r2, [r7, #11]
 8015dd4:	4611      	mov	r1, r2
 8015dd6:	68f8      	ldr	r0, [r7, #12]
 8015dd8:	4798      	blx	r3
 8015dda:	4603      	mov	r3, r0
 8015ddc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8015dde:	7dfb      	ldrb	r3, [r7, #23]
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d001      	beq.n	8015de8 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8015de4:	7dfb      	ldrb	r3, [r7, #23]
 8015de6:	e000      	b.n	8015dea <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8015de8:	2300      	movs	r3, #0
}
 8015dea:	4618      	mov	r0, r3
 8015dec:	3718      	adds	r7, #24
 8015dee:	46bd      	mov	sp, r7
 8015df0:	bd80      	pop	{r7, pc}

08015df2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015df2:	b580      	push	{r7, lr}
 8015df4:	b082      	sub	sp, #8
 8015df6:	af00      	add	r7, sp, #0
 8015df8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	2201      	movs	r2, #1
 8015dfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2200      	movs	r2, #0
 8015e06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	2200      	movs	r2, #0
 8015e14:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d101      	bne.n	8015e26 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8015e22:	2303      	movs	r3, #3
 8015e24:	e02f      	b.n	8015e86 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00f      	beq.n	8015e50 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e36:	685b      	ldr	r3, [r3, #4]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d009      	beq.n	8015e50 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	6852      	ldr	r2, [r2, #4]
 8015e48:	b2d2      	uxtb	r2, r2
 8015e4a:	4611      	mov	r1, r2
 8015e4c:	6878      	ldr	r0, [r7, #4]
 8015e4e:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e50:	2340      	movs	r3, #64	; 0x40
 8015e52:	2200      	movs	r2, #0
 8015e54:	2100      	movs	r1, #0
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f001 fb20 	bl	801749c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2240      	movs	r2, #64	; 0x40
 8015e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e6c:	2340      	movs	r3, #64	; 0x40
 8015e6e:	2200      	movs	r2, #0
 8015e70:	2180      	movs	r1, #128	; 0x80
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f001 fb12 	bl	801749c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2201      	movs	r2, #1
 8015e7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	2240      	movs	r2, #64	; 0x40
 8015e82:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015e84:	2300      	movs	r3, #0
}
 8015e86:	4618      	mov	r0, r3
 8015e88:	3708      	adds	r7, #8
 8015e8a:	46bd      	mov	sp, r7
 8015e8c:	bd80      	pop	{r7, pc}

08015e8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015e8e:	b480      	push	{r7}
 8015e90:	b083      	sub	sp, #12
 8015e92:	af00      	add	r7, sp, #0
 8015e94:	6078      	str	r0, [r7, #4]
 8015e96:	460b      	mov	r3, r1
 8015e98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	78fa      	ldrb	r2, [r7, #3]
 8015e9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015ea0:	2300      	movs	r3, #0
}
 8015ea2:	4618      	mov	r0, r3
 8015ea4:	370c      	adds	r7, #12
 8015ea6:	46bd      	mov	sp, r7
 8015ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eac:	4770      	bx	lr

08015eae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015eae:	b480      	push	{r7}
 8015eb0:	b083      	sub	sp, #12
 8015eb2:	af00      	add	r7, sp, #0
 8015eb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ebc:	b2da      	uxtb	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2204      	movs	r2, #4
 8015ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015ecc:	2300      	movs	r3, #0
}
 8015ece:	4618      	mov	r0, r3
 8015ed0:	370c      	adds	r7, #12
 8015ed2:	46bd      	mov	sp, r7
 8015ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed8:	4770      	bx	lr

08015eda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015eda:	b480      	push	{r7}
 8015edc:	b083      	sub	sp, #12
 8015ede:	af00      	add	r7, sp, #0
 8015ee0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ee8:	b2db      	uxtb	r3, r3
 8015eea:	2b04      	cmp	r3, #4
 8015eec:	d106      	bne.n	8015efc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015ef4:	b2da      	uxtb	r2, r3
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015efc:	2300      	movs	r3, #0
}
 8015efe:	4618      	mov	r0, r3
 8015f00:	370c      	adds	r7, #12
 8015f02:	46bd      	mov	sp, r7
 8015f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f08:	4770      	bx	lr

08015f0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015f0a:	b580      	push	{r7, lr}
 8015f0c:	b082      	sub	sp, #8
 8015f0e:	af00      	add	r7, sp, #0
 8015f10:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d101      	bne.n	8015f20 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8015f1c:	2303      	movs	r3, #3
 8015f1e:	e012      	b.n	8015f46 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f26:	b2db      	uxtb	r3, r3
 8015f28:	2b03      	cmp	r3, #3
 8015f2a:	d10b      	bne.n	8015f44 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f32:	69db      	ldr	r3, [r3, #28]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d005      	beq.n	8015f44 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f3e:	69db      	ldr	r3, [r3, #28]
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f44:	2300      	movs	r3, #0
}
 8015f46:	4618      	mov	r0, r3
 8015f48:	3708      	adds	r7, #8
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}

08015f4e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015f4e:	b480      	push	{r7}
 8015f50:	b087      	sub	sp, #28
 8015f52:	af00      	add	r7, sp, #0
 8015f54:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015f5a:	697b      	ldr	r3, [r7, #20]
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015f60:	697b      	ldr	r3, [r7, #20]
 8015f62:	3301      	adds	r3, #1
 8015f64:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015f66:	697b      	ldr	r3, [r7, #20]
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015f6c:	8a3b      	ldrh	r3, [r7, #16]
 8015f6e:	021b      	lsls	r3, r3, #8
 8015f70:	b21a      	sxth	r2, r3
 8015f72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015f76:	4313      	orrs	r3, r2
 8015f78:	b21b      	sxth	r3, r3
 8015f7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015f7c:	89fb      	ldrh	r3, [r7, #14]
}
 8015f7e:	4618      	mov	r0, r3
 8015f80:	371c      	adds	r7, #28
 8015f82:	46bd      	mov	sp, r7
 8015f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f88:	4770      	bx	lr
	...

08015f8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f96:	2300      	movs	r3, #0
 8015f98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f9a:	683b      	ldr	r3, [r7, #0]
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015fa2:	2b40      	cmp	r3, #64	; 0x40
 8015fa4:	d005      	beq.n	8015fb2 <USBD_StdDevReq+0x26>
 8015fa6:	2b40      	cmp	r3, #64	; 0x40
 8015fa8:	d853      	bhi.n	8016052 <USBD_StdDevReq+0xc6>
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d00b      	beq.n	8015fc6 <USBD_StdDevReq+0x3a>
 8015fae:	2b20      	cmp	r3, #32
 8015fb0:	d14f      	bne.n	8016052 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fb8:	689b      	ldr	r3, [r3, #8]
 8015fba:	6839      	ldr	r1, [r7, #0]
 8015fbc:	6878      	ldr	r0, [r7, #4]
 8015fbe:	4798      	blx	r3
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8015fc4:	e04a      	b.n	801605c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015fc6:	683b      	ldr	r3, [r7, #0]
 8015fc8:	785b      	ldrb	r3, [r3, #1]
 8015fca:	2b09      	cmp	r3, #9
 8015fcc:	d83b      	bhi.n	8016046 <USBD_StdDevReq+0xba>
 8015fce:	a201      	add	r2, pc, #4	; (adr r2, 8015fd4 <USBD_StdDevReq+0x48>)
 8015fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fd4:	08016029 	.word	0x08016029
 8015fd8:	0801603d 	.word	0x0801603d
 8015fdc:	08016047 	.word	0x08016047
 8015fe0:	08016033 	.word	0x08016033
 8015fe4:	08016047 	.word	0x08016047
 8015fe8:	08016007 	.word	0x08016007
 8015fec:	08015ffd 	.word	0x08015ffd
 8015ff0:	08016047 	.word	0x08016047
 8015ff4:	0801601f 	.word	0x0801601f
 8015ff8:	08016011 	.word	0x08016011
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015ffc:	6839      	ldr	r1, [r7, #0]
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f000 f9de 	bl	80163c0 <USBD_GetDescriptor>
          break;
 8016004:	e024      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016006:	6839      	ldr	r1, [r7, #0]
 8016008:	6878      	ldr	r0, [r7, #4]
 801600a:	f000 fb7f 	bl	801670c <USBD_SetAddress>
          break;
 801600e:	e01f      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 fbbe 	bl	8016794 <USBD_SetConfig>
 8016018:	4603      	mov	r3, r0
 801601a:	73fb      	strb	r3, [r7, #15]
          break;
 801601c:	e018      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801601e:	6839      	ldr	r1, [r7, #0]
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f000 fc5d 	bl	80168e0 <USBD_GetConfig>
          break;
 8016026:	e013      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016028:	6839      	ldr	r1, [r7, #0]
 801602a:	6878      	ldr	r0, [r7, #4]
 801602c:	f000 fc8e 	bl	801694c <USBD_GetStatus>
          break;
 8016030:	e00e      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8016032:	6839      	ldr	r1, [r7, #0]
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f000 fcbd 	bl	80169b4 <USBD_SetFeature>
          break;
 801603a:	e009      	b.n	8016050 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801603c:	6839      	ldr	r1, [r7, #0]
 801603e:	6878      	ldr	r0, [r7, #4]
 8016040:	f000 fccc 	bl	80169dc <USBD_ClrFeature>
          break;
 8016044:	e004      	b.n	8016050 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8016046:	6839      	ldr	r1, [r7, #0]
 8016048:	6878      	ldr	r0, [r7, #4]
 801604a:	f000 fd23 	bl	8016a94 <USBD_CtlError>
          break;
 801604e:	bf00      	nop
      }
      break;
 8016050:	e004      	b.n	801605c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8016052:	6839      	ldr	r1, [r7, #0]
 8016054:	6878      	ldr	r0, [r7, #4]
 8016056:	f000 fd1d 	bl	8016a94 <USBD_CtlError>
      break;
 801605a:	bf00      	nop
  }

  return ret;
 801605c:	7bfb      	ldrb	r3, [r7, #15]
}
 801605e:	4618      	mov	r0, r3
 8016060:	3710      	adds	r7, #16
 8016062:	46bd      	mov	sp, r7
 8016064:	bd80      	pop	{r7, pc}
 8016066:	bf00      	nop

08016068 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b084      	sub	sp, #16
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016072:	2300      	movs	r3, #0
 8016074:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	781b      	ldrb	r3, [r3, #0]
 801607a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801607e:	2b40      	cmp	r3, #64	; 0x40
 8016080:	d005      	beq.n	801608e <USBD_StdItfReq+0x26>
 8016082:	2b40      	cmp	r3, #64	; 0x40
 8016084:	d82f      	bhi.n	80160e6 <USBD_StdItfReq+0x7e>
 8016086:	2b00      	cmp	r3, #0
 8016088:	d001      	beq.n	801608e <USBD_StdItfReq+0x26>
 801608a:	2b20      	cmp	r3, #32
 801608c:	d12b      	bne.n	80160e6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016094:	b2db      	uxtb	r3, r3
 8016096:	3b01      	subs	r3, #1
 8016098:	2b02      	cmp	r3, #2
 801609a:	d81d      	bhi.n	80160d8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801609c:	683b      	ldr	r3, [r7, #0]
 801609e:	889b      	ldrh	r3, [r3, #4]
 80160a0:	b2db      	uxtb	r3, r3
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d813      	bhi.n	80160ce <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80160ac:	689b      	ldr	r3, [r3, #8]
 80160ae:	6839      	ldr	r1, [r7, #0]
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	4798      	blx	r3
 80160b4:	4603      	mov	r3, r0
 80160b6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	88db      	ldrh	r3, [r3, #6]
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d110      	bne.n	80160e2 <USBD_StdItfReq+0x7a>
 80160c0:	7bfb      	ldrb	r3, [r7, #15]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d10d      	bne.n	80160e2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f000 fdaf 	bl	8016c2a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80160cc:	e009      	b.n	80160e2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80160ce:	6839      	ldr	r1, [r7, #0]
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 fcdf 	bl	8016a94 <USBD_CtlError>
          break;
 80160d6:	e004      	b.n	80160e2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80160d8:	6839      	ldr	r1, [r7, #0]
 80160da:	6878      	ldr	r0, [r7, #4]
 80160dc:	f000 fcda 	bl	8016a94 <USBD_CtlError>
          break;
 80160e0:	e000      	b.n	80160e4 <USBD_StdItfReq+0x7c>
          break;
 80160e2:	bf00      	nop
      }
      break;
 80160e4:	e004      	b.n	80160f0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80160e6:	6839      	ldr	r1, [r7, #0]
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 fcd3 	bl	8016a94 <USBD_CtlError>
      break;
 80160ee:	bf00      	nop
  }

  return ret;
 80160f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80160f2:	4618      	mov	r0, r3
 80160f4:	3710      	adds	r7, #16
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}

080160fa <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160fa:	b580      	push	{r7, lr}
 80160fc:	b084      	sub	sp, #16
 80160fe:	af00      	add	r7, sp, #0
 8016100:	6078      	str	r0, [r7, #4]
 8016102:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016104:	2300      	movs	r3, #0
 8016106:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016108:	683b      	ldr	r3, [r7, #0]
 801610a:	889b      	ldrh	r3, [r3, #4]
 801610c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801610e:	683b      	ldr	r3, [r7, #0]
 8016110:	781b      	ldrb	r3, [r3, #0]
 8016112:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016116:	2b40      	cmp	r3, #64	; 0x40
 8016118:	d007      	beq.n	801612a <USBD_StdEPReq+0x30>
 801611a:	2b40      	cmp	r3, #64	; 0x40
 801611c:	f200 8145 	bhi.w	80163aa <USBD_StdEPReq+0x2b0>
 8016120:	2b00      	cmp	r3, #0
 8016122:	d00c      	beq.n	801613e <USBD_StdEPReq+0x44>
 8016124:	2b20      	cmp	r3, #32
 8016126:	f040 8140 	bne.w	80163aa <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016130:	689b      	ldr	r3, [r3, #8]
 8016132:	6839      	ldr	r1, [r7, #0]
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	4798      	blx	r3
 8016138:	4603      	mov	r3, r0
 801613a:	73fb      	strb	r3, [r7, #15]
      break;
 801613c:	e13a      	b.n	80163b4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	785b      	ldrb	r3, [r3, #1]
 8016142:	2b03      	cmp	r3, #3
 8016144:	d007      	beq.n	8016156 <USBD_StdEPReq+0x5c>
 8016146:	2b03      	cmp	r3, #3
 8016148:	f300 8129 	bgt.w	801639e <USBD_StdEPReq+0x2a4>
 801614c:	2b00      	cmp	r3, #0
 801614e:	d07f      	beq.n	8016250 <USBD_StdEPReq+0x156>
 8016150:	2b01      	cmp	r3, #1
 8016152:	d03c      	beq.n	80161ce <USBD_StdEPReq+0xd4>
 8016154:	e123      	b.n	801639e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801615c:	b2db      	uxtb	r3, r3
 801615e:	2b02      	cmp	r3, #2
 8016160:	d002      	beq.n	8016168 <USBD_StdEPReq+0x6e>
 8016162:	2b03      	cmp	r3, #3
 8016164:	d016      	beq.n	8016194 <USBD_StdEPReq+0x9a>
 8016166:	e02c      	b.n	80161c2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016168:	7bbb      	ldrb	r3, [r7, #14]
 801616a:	2b00      	cmp	r3, #0
 801616c:	d00d      	beq.n	801618a <USBD_StdEPReq+0x90>
 801616e:	7bbb      	ldrb	r3, [r7, #14]
 8016170:	2b80      	cmp	r3, #128	; 0x80
 8016172:	d00a      	beq.n	801618a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016174:	7bbb      	ldrb	r3, [r7, #14]
 8016176:	4619      	mov	r1, r3
 8016178:	6878      	ldr	r0, [r7, #4]
 801617a:	f001 fa03 	bl	8017584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801617e:	2180      	movs	r1, #128	; 0x80
 8016180:	6878      	ldr	r0, [r7, #4]
 8016182:	f001 f9ff 	bl	8017584 <USBD_LL_StallEP>
 8016186:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016188:	e020      	b.n	80161cc <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 801618a:	6839      	ldr	r1, [r7, #0]
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f000 fc81 	bl	8016a94 <USBD_CtlError>
              break;
 8016192:	e01b      	b.n	80161cc <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	885b      	ldrh	r3, [r3, #2]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d10e      	bne.n	80161ba <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801619c:	7bbb      	ldrb	r3, [r7, #14]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d00b      	beq.n	80161ba <USBD_StdEPReq+0xc0>
 80161a2:	7bbb      	ldrb	r3, [r7, #14]
 80161a4:	2b80      	cmp	r3, #128	; 0x80
 80161a6:	d008      	beq.n	80161ba <USBD_StdEPReq+0xc0>
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	88db      	ldrh	r3, [r3, #6]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d104      	bne.n	80161ba <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80161b0:	7bbb      	ldrb	r3, [r7, #14]
 80161b2:	4619      	mov	r1, r3
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f001 f9e5 	bl	8017584 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80161ba:	6878      	ldr	r0, [r7, #4]
 80161bc:	f000 fd35 	bl	8016c2a <USBD_CtlSendStatus>

              break;
 80161c0:	e004      	b.n	80161cc <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80161c2:	6839      	ldr	r1, [r7, #0]
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 fc65 	bl	8016a94 <USBD_CtlError>
              break;
 80161ca:	bf00      	nop
          }
          break;
 80161cc:	e0ec      	b.n	80163a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161d4:	b2db      	uxtb	r3, r3
 80161d6:	2b02      	cmp	r3, #2
 80161d8:	d002      	beq.n	80161e0 <USBD_StdEPReq+0xe6>
 80161da:	2b03      	cmp	r3, #3
 80161dc:	d016      	beq.n	801620c <USBD_StdEPReq+0x112>
 80161de:	e030      	b.n	8016242 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161e0:	7bbb      	ldrb	r3, [r7, #14]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d00d      	beq.n	8016202 <USBD_StdEPReq+0x108>
 80161e6:	7bbb      	ldrb	r3, [r7, #14]
 80161e8:	2b80      	cmp	r3, #128	; 0x80
 80161ea:	d00a      	beq.n	8016202 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80161ec:	7bbb      	ldrb	r3, [r7, #14]
 80161ee:	4619      	mov	r1, r3
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f001 f9c7 	bl	8017584 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80161f6:	2180      	movs	r1, #128	; 0x80
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f001 f9c3 	bl	8017584 <USBD_LL_StallEP>
 80161fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016200:	e025      	b.n	801624e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8016202:	6839      	ldr	r1, [r7, #0]
 8016204:	6878      	ldr	r0, [r7, #4]
 8016206:	f000 fc45 	bl	8016a94 <USBD_CtlError>
              break;
 801620a:	e020      	b.n	801624e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801620c:	683b      	ldr	r3, [r7, #0]
 801620e:	885b      	ldrh	r3, [r3, #2]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d11b      	bne.n	801624c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016214:	7bbb      	ldrb	r3, [r7, #14]
 8016216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801621a:	2b00      	cmp	r3, #0
 801621c:	d004      	beq.n	8016228 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801621e:	7bbb      	ldrb	r3, [r7, #14]
 8016220:	4619      	mov	r1, r3
 8016222:	6878      	ldr	r0, [r7, #4]
 8016224:	f001 f9e4 	bl	80175f0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f000 fcfe 	bl	8016c2a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016234:	689b      	ldr	r3, [r3, #8]
 8016236:	6839      	ldr	r1, [r7, #0]
 8016238:	6878      	ldr	r0, [r7, #4]
 801623a:	4798      	blx	r3
 801623c:	4603      	mov	r3, r0
 801623e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8016240:	e004      	b.n	801624c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8016242:	6839      	ldr	r1, [r7, #0]
 8016244:	6878      	ldr	r0, [r7, #4]
 8016246:	f000 fc25 	bl	8016a94 <USBD_CtlError>
              break;
 801624a:	e000      	b.n	801624e <USBD_StdEPReq+0x154>
              break;
 801624c:	bf00      	nop
          }
          break;
 801624e:	e0ab      	b.n	80163a8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016256:	b2db      	uxtb	r3, r3
 8016258:	2b02      	cmp	r3, #2
 801625a:	d002      	beq.n	8016262 <USBD_StdEPReq+0x168>
 801625c:	2b03      	cmp	r3, #3
 801625e:	d032      	beq.n	80162c6 <USBD_StdEPReq+0x1cc>
 8016260:	e097      	b.n	8016392 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016262:	7bbb      	ldrb	r3, [r7, #14]
 8016264:	2b00      	cmp	r3, #0
 8016266:	d007      	beq.n	8016278 <USBD_StdEPReq+0x17e>
 8016268:	7bbb      	ldrb	r3, [r7, #14]
 801626a:	2b80      	cmp	r3, #128	; 0x80
 801626c:	d004      	beq.n	8016278 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801626e:	6839      	ldr	r1, [r7, #0]
 8016270:	6878      	ldr	r0, [r7, #4]
 8016272:	f000 fc0f 	bl	8016a94 <USBD_CtlError>
                break;
 8016276:	e091      	b.n	801639c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016278:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801627c:	2b00      	cmp	r3, #0
 801627e:	da0b      	bge.n	8016298 <USBD_StdEPReq+0x19e>
 8016280:	7bbb      	ldrb	r3, [r7, #14]
 8016282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016286:	4613      	mov	r3, r2
 8016288:	009b      	lsls	r3, r3, #2
 801628a:	4413      	add	r3, r2
 801628c:	009b      	lsls	r3, r3, #2
 801628e:	3310      	adds	r3, #16
 8016290:	687a      	ldr	r2, [r7, #4]
 8016292:	4413      	add	r3, r2
 8016294:	3304      	adds	r3, #4
 8016296:	e00b      	b.n	80162b0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016298:	7bbb      	ldrb	r3, [r7, #14]
 801629a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801629e:	4613      	mov	r3, r2
 80162a0:	009b      	lsls	r3, r3, #2
 80162a2:	4413      	add	r3, r2
 80162a4:	009b      	lsls	r3, r3, #2
 80162a6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80162aa:	687a      	ldr	r2, [r7, #4]
 80162ac:	4413      	add	r3, r2
 80162ae:	3304      	adds	r3, #4
 80162b0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80162b2:	68bb      	ldr	r3, [r7, #8]
 80162b4:	2200      	movs	r2, #0
 80162b6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2202      	movs	r2, #2
 80162bc:	4619      	mov	r1, r3
 80162be:	6878      	ldr	r0, [r7, #4]
 80162c0:	f000 fc59 	bl	8016b76 <USBD_CtlSendData>
              break;
 80162c4:	e06a      	b.n	801639c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80162c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	da11      	bge.n	80162f2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80162ce:	7bbb      	ldrb	r3, [r7, #14]
 80162d0:	f003 020f 	and.w	r2, r3, #15
 80162d4:	6879      	ldr	r1, [r7, #4]
 80162d6:	4613      	mov	r3, r2
 80162d8:	009b      	lsls	r3, r3, #2
 80162da:	4413      	add	r3, r2
 80162dc:	009b      	lsls	r3, r3, #2
 80162de:	440b      	add	r3, r1
 80162e0:	3324      	adds	r3, #36	; 0x24
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d117      	bne.n	8016318 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80162e8:	6839      	ldr	r1, [r7, #0]
 80162ea:	6878      	ldr	r0, [r7, #4]
 80162ec:	f000 fbd2 	bl	8016a94 <USBD_CtlError>
                  break;
 80162f0:	e054      	b.n	801639c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80162f2:	7bbb      	ldrb	r3, [r7, #14]
 80162f4:	f003 020f 	and.w	r2, r3, #15
 80162f8:	6879      	ldr	r1, [r7, #4]
 80162fa:	4613      	mov	r3, r2
 80162fc:	009b      	lsls	r3, r3, #2
 80162fe:	4413      	add	r3, r2
 8016300:	009b      	lsls	r3, r3, #2
 8016302:	440b      	add	r3, r1
 8016304:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016308:	881b      	ldrh	r3, [r3, #0]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d104      	bne.n	8016318 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 801630e:	6839      	ldr	r1, [r7, #0]
 8016310:	6878      	ldr	r0, [r7, #4]
 8016312:	f000 fbbf 	bl	8016a94 <USBD_CtlError>
                  break;
 8016316:	e041      	b.n	801639c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016318:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801631c:	2b00      	cmp	r3, #0
 801631e:	da0b      	bge.n	8016338 <USBD_StdEPReq+0x23e>
 8016320:	7bbb      	ldrb	r3, [r7, #14]
 8016322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016326:	4613      	mov	r3, r2
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	4413      	add	r3, r2
 801632c:	009b      	lsls	r3, r3, #2
 801632e:	3310      	adds	r3, #16
 8016330:	687a      	ldr	r2, [r7, #4]
 8016332:	4413      	add	r3, r2
 8016334:	3304      	adds	r3, #4
 8016336:	e00b      	b.n	8016350 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016338:	7bbb      	ldrb	r3, [r7, #14]
 801633a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801633e:	4613      	mov	r3, r2
 8016340:	009b      	lsls	r3, r3, #2
 8016342:	4413      	add	r3, r2
 8016344:	009b      	lsls	r3, r3, #2
 8016346:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801634a:	687a      	ldr	r2, [r7, #4]
 801634c:	4413      	add	r3, r2
 801634e:	3304      	adds	r3, #4
 8016350:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016352:	7bbb      	ldrb	r3, [r7, #14]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d002      	beq.n	801635e <USBD_StdEPReq+0x264>
 8016358:	7bbb      	ldrb	r3, [r7, #14]
 801635a:	2b80      	cmp	r3, #128	; 0x80
 801635c:	d103      	bne.n	8016366 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	2200      	movs	r2, #0
 8016362:	601a      	str	r2, [r3, #0]
 8016364:	e00e      	b.n	8016384 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016366:	7bbb      	ldrb	r3, [r7, #14]
 8016368:	4619      	mov	r1, r3
 801636a:	6878      	ldr	r0, [r7, #4]
 801636c:	f001 f976 	bl	801765c <USBD_LL_IsStallEP>
 8016370:	4603      	mov	r3, r0
 8016372:	2b00      	cmp	r3, #0
 8016374:	d003      	beq.n	801637e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	2201      	movs	r2, #1
 801637a:	601a      	str	r2, [r3, #0]
 801637c:	e002      	b.n	8016384 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 801637e:	68bb      	ldr	r3, [r7, #8]
 8016380:	2200      	movs	r2, #0
 8016382:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	2202      	movs	r2, #2
 8016388:	4619      	mov	r1, r3
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f000 fbf3 	bl	8016b76 <USBD_CtlSendData>
              break;
 8016390:	e004      	b.n	801639c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8016392:	6839      	ldr	r1, [r7, #0]
 8016394:	6878      	ldr	r0, [r7, #4]
 8016396:	f000 fb7d 	bl	8016a94 <USBD_CtlError>
              break;
 801639a:	bf00      	nop
          }
          break;
 801639c:	e004      	b.n	80163a8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 801639e:	6839      	ldr	r1, [r7, #0]
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f000 fb77 	bl	8016a94 <USBD_CtlError>
          break;
 80163a6:	bf00      	nop
      }
      break;
 80163a8:	e004      	b.n	80163b4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80163aa:	6839      	ldr	r1, [r7, #0]
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f000 fb71 	bl	8016a94 <USBD_CtlError>
      break;
 80163b2:	bf00      	nop
  }

  return ret;
 80163b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80163b6:	4618      	mov	r0, r3
 80163b8:	3710      	adds	r7, #16
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd80      	pop	{r7, pc}
	...

080163c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
 80163c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80163ca:	2300      	movs	r3, #0
 80163cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80163ce:	2300      	movs	r3, #0
 80163d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80163d2:	2300      	movs	r3, #0
 80163d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	885b      	ldrh	r3, [r3, #2]
 80163da:	0a1b      	lsrs	r3, r3, #8
 80163dc:	b29b      	uxth	r3, r3
 80163de:	3b01      	subs	r3, #1
 80163e0:	2b0e      	cmp	r3, #14
 80163e2:	f200 8165 	bhi.w	80166b0 <USBD_GetDescriptor+0x2f0>
 80163e6:	a201      	add	r2, pc, #4	; (adr r2, 80163ec <USBD_GetDescriptor+0x2c>)
 80163e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163ec:	0801645d 	.word	0x0801645d
 80163f0:	08016475 	.word	0x08016475
 80163f4:	080164b5 	.word	0x080164b5
 80163f8:	080166b1 	.word	0x080166b1
 80163fc:	080166b1 	.word	0x080166b1
 8016400:	08016651 	.word	0x08016651
 8016404:	0801667d 	.word	0x0801667d
 8016408:	080166b1 	.word	0x080166b1
 801640c:	080166b1 	.word	0x080166b1
 8016410:	080166b1 	.word	0x080166b1
 8016414:	080166b1 	.word	0x080166b1
 8016418:	080166b1 	.word	0x080166b1
 801641c:	080166b1 	.word	0x080166b1
 8016420:	080166b1 	.word	0x080166b1
 8016424:	08016429 	.word	0x08016429
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801642e:	69db      	ldr	r3, [r3, #28]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d00b      	beq.n	801644c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801643a:	69db      	ldr	r3, [r3, #28]
 801643c:	687a      	ldr	r2, [r7, #4]
 801643e:	7c12      	ldrb	r2, [r2, #16]
 8016440:	f107 0108 	add.w	r1, r7, #8
 8016444:	4610      	mov	r0, r2
 8016446:	4798      	blx	r3
 8016448:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801644a:	e139      	b.n	80166c0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 801644c:	6839      	ldr	r1, [r7, #0]
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	f000 fb20 	bl	8016a94 <USBD_CtlError>
        err++;
 8016454:	7afb      	ldrb	r3, [r7, #11]
 8016456:	3301      	adds	r3, #1
 8016458:	72fb      	strb	r3, [r7, #11]
      break;
 801645a:	e131      	b.n	80166c0 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016462:	681b      	ldr	r3, [r3, #0]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	7c12      	ldrb	r2, [r2, #16]
 8016468:	f107 0108 	add.w	r1, r7, #8
 801646c:	4610      	mov	r0, r2
 801646e:	4798      	blx	r3
 8016470:	60f8      	str	r0, [r7, #12]
      break;
 8016472:	e125      	b.n	80166c0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	7c1b      	ldrb	r3, [r3, #16]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d10d      	bne.n	8016498 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016484:	f107 0208 	add.w	r2, r7, #8
 8016488:	4610      	mov	r0, r2
 801648a:	4798      	blx	r3
 801648c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	3301      	adds	r3, #1
 8016492:	2202      	movs	r2, #2
 8016494:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016496:	e113      	b.n	80166c0 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801649e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164a0:	f107 0208 	add.w	r2, r7, #8
 80164a4:	4610      	mov	r0, r2
 80164a6:	4798      	blx	r3
 80164a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	3301      	adds	r3, #1
 80164ae:	2202      	movs	r2, #2
 80164b0:	701a      	strb	r2, [r3, #0]
      break;
 80164b2:	e105      	b.n	80166c0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80164b4:	683b      	ldr	r3, [r7, #0]
 80164b6:	885b      	ldrh	r3, [r3, #2]
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	2b05      	cmp	r3, #5
 80164bc:	f200 80ac 	bhi.w	8016618 <USBD_GetDescriptor+0x258>
 80164c0:	a201      	add	r2, pc, #4	; (adr r2, 80164c8 <USBD_GetDescriptor+0x108>)
 80164c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c6:	bf00      	nop
 80164c8:	080164e1 	.word	0x080164e1
 80164cc:	08016515 	.word	0x08016515
 80164d0:	08016549 	.word	0x08016549
 80164d4:	0801657d 	.word	0x0801657d
 80164d8:	080165b1 	.word	0x080165b1
 80164dc:	080165e5 	.word	0x080165e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164e6:	685b      	ldr	r3, [r3, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d00b      	beq.n	8016504 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164f2:	685b      	ldr	r3, [r3, #4]
 80164f4:	687a      	ldr	r2, [r7, #4]
 80164f6:	7c12      	ldrb	r2, [r2, #16]
 80164f8:	f107 0108 	add.w	r1, r7, #8
 80164fc:	4610      	mov	r0, r2
 80164fe:	4798      	blx	r3
 8016500:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016502:	e0a4      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016504:	6839      	ldr	r1, [r7, #0]
 8016506:	6878      	ldr	r0, [r7, #4]
 8016508:	f000 fac4 	bl	8016a94 <USBD_CtlError>
            err++;
 801650c:	7afb      	ldrb	r3, [r7, #11]
 801650e:	3301      	adds	r3, #1
 8016510:	72fb      	strb	r3, [r7, #11]
          break;
 8016512:	e09c      	b.n	801664e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801651a:	689b      	ldr	r3, [r3, #8]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00b      	beq.n	8016538 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016526:	689b      	ldr	r3, [r3, #8]
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	7c12      	ldrb	r2, [r2, #16]
 801652c:	f107 0108 	add.w	r1, r7, #8
 8016530:	4610      	mov	r0, r2
 8016532:	4798      	blx	r3
 8016534:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016536:	e08a      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016538:	6839      	ldr	r1, [r7, #0]
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 faaa 	bl	8016a94 <USBD_CtlError>
            err++;
 8016540:	7afb      	ldrb	r3, [r7, #11]
 8016542:	3301      	adds	r3, #1
 8016544:	72fb      	strb	r3, [r7, #11]
          break;
 8016546:	e082      	b.n	801664e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801654e:	68db      	ldr	r3, [r3, #12]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d00b      	beq.n	801656c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801655a:	68db      	ldr	r3, [r3, #12]
 801655c:	687a      	ldr	r2, [r7, #4]
 801655e:	7c12      	ldrb	r2, [r2, #16]
 8016560:	f107 0108 	add.w	r1, r7, #8
 8016564:	4610      	mov	r0, r2
 8016566:	4798      	blx	r3
 8016568:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801656a:	e070      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801656c:	6839      	ldr	r1, [r7, #0]
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 fa90 	bl	8016a94 <USBD_CtlError>
            err++;
 8016574:	7afb      	ldrb	r3, [r7, #11]
 8016576:	3301      	adds	r3, #1
 8016578:	72fb      	strb	r3, [r7, #11]
          break;
 801657a:	e068      	b.n	801664e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016582:	691b      	ldr	r3, [r3, #16]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00b      	beq.n	80165a0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801658e:	691b      	ldr	r3, [r3, #16]
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	7c12      	ldrb	r2, [r2, #16]
 8016594:	f107 0108 	add.w	r1, r7, #8
 8016598:	4610      	mov	r0, r2
 801659a:	4798      	blx	r3
 801659c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801659e:	e056      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80165a0:	6839      	ldr	r1, [r7, #0]
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 fa76 	bl	8016a94 <USBD_CtlError>
            err++;
 80165a8:	7afb      	ldrb	r3, [r7, #11]
 80165aa:	3301      	adds	r3, #1
 80165ac:	72fb      	strb	r3, [r7, #11]
          break;
 80165ae:	e04e      	b.n	801664e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165b6:	695b      	ldr	r3, [r3, #20]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d00b      	beq.n	80165d4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165c2:	695b      	ldr	r3, [r3, #20]
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	7c12      	ldrb	r2, [r2, #16]
 80165c8:	f107 0108 	add.w	r1, r7, #8
 80165cc:	4610      	mov	r0, r2
 80165ce:	4798      	blx	r3
 80165d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80165d2:	e03c      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 fa5c 	bl	8016a94 <USBD_CtlError>
            err++;
 80165dc:	7afb      	ldrb	r3, [r7, #11]
 80165de:	3301      	adds	r3, #1
 80165e0:	72fb      	strb	r3, [r7, #11]
          break;
 80165e2:	e034      	b.n	801664e <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165ea:	699b      	ldr	r3, [r3, #24]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d00b      	beq.n	8016608 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165f6:	699b      	ldr	r3, [r3, #24]
 80165f8:	687a      	ldr	r2, [r7, #4]
 80165fa:	7c12      	ldrb	r2, [r2, #16]
 80165fc:	f107 0108 	add.w	r1, r7, #8
 8016600:	4610      	mov	r0, r2
 8016602:	4798      	blx	r3
 8016604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016606:	e022      	b.n	801664e <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fa42 	bl	8016a94 <USBD_CtlError>
            err++;
 8016610:	7afb      	ldrb	r3, [r7, #11]
 8016612:	3301      	adds	r3, #1
 8016614:	72fb      	strb	r3, [r7, #11]
          break;
 8016616:	e01a      	b.n	801664e <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801661e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016620:	2b00      	cmp	r3, #0
 8016622:	d00c      	beq.n	801663e <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801662a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801662c:	683a      	ldr	r2, [r7, #0]
 801662e:	8852      	ldrh	r2, [r2, #2]
 8016630:	b2d1      	uxtb	r1, r2
 8016632:	f107 0208 	add.w	r2, r7, #8
 8016636:	6878      	ldr	r0, [r7, #4]
 8016638:	4798      	blx	r3
 801663a:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 801663c:	e006      	b.n	801664c <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 801663e:	6839      	ldr	r1, [r7, #0]
 8016640:	6878      	ldr	r0, [r7, #4]
 8016642:	f000 fa27 	bl	8016a94 <USBD_CtlError>
            err++;
 8016646:	7afb      	ldrb	r3, [r7, #11]
 8016648:	3301      	adds	r3, #1
 801664a:	72fb      	strb	r3, [r7, #11]
          break;
 801664c:	bf00      	nop
      }
      break;
 801664e:	e037      	b.n	80166c0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	7c1b      	ldrb	r3, [r3, #16]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d109      	bne.n	801666c <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016660:	f107 0208 	add.w	r2, r7, #8
 8016664:	4610      	mov	r0, r2
 8016666:	4798      	blx	r3
 8016668:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801666a:	e029      	b.n	80166c0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 801666c:	6839      	ldr	r1, [r7, #0]
 801666e:	6878      	ldr	r0, [r7, #4]
 8016670:	f000 fa10 	bl	8016a94 <USBD_CtlError>
        err++;
 8016674:	7afb      	ldrb	r3, [r7, #11]
 8016676:	3301      	adds	r3, #1
 8016678:	72fb      	strb	r3, [r7, #11]
      break;
 801667a:	e021      	b.n	80166c0 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	7c1b      	ldrb	r3, [r3, #16]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d10d      	bne.n	80166a0 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801668a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801668c:	f107 0208 	add.w	r2, r7, #8
 8016690:	4610      	mov	r0, r2
 8016692:	4798      	blx	r3
 8016694:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016696:	68fb      	ldr	r3, [r7, #12]
 8016698:	3301      	adds	r3, #1
 801669a:	2207      	movs	r2, #7
 801669c:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801669e:	e00f      	b.n	80166c0 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80166a0:	6839      	ldr	r1, [r7, #0]
 80166a2:	6878      	ldr	r0, [r7, #4]
 80166a4:	f000 f9f6 	bl	8016a94 <USBD_CtlError>
        err++;
 80166a8:	7afb      	ldrb	r3, [r7, #11]
 80166aa:	3301      	adds	r3, #1
 80166ac:	72fb      	strb	r3, [r7, #11]
      break;
 80166ae:	e007      	b.n	80166c0 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 80166b0:	6839      	ldr	r1, [r7, #0]
 80166b2:	6878      	ldr	r0, [r7, #4]
 80166b4:	f000 f9ee 	bl	8016a94 <USBD_CtlError>
      err++;
 80166b8:	7afb      	ldrb	r3, [r7, #11]
 80166ba:	3301      	adds	r3, #1
 80166bc:	72fb      	strb	r3, [r7, #11]
      break;
 80166be:	bf00      	nop
  }

  if (err != 0U)
 80166c0:	7afb      	ldrb	r3, [r7, #11]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d11e      	bne.n	8016704 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	88db      	ldrh	r3, [r3, #6]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d016      	beq.n	80166fc <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 80166ce:	893b      	ldrh	r3, [r7, #8]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d00e      	beq.n	80166f2 <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	88da      	ldrh	r2, [r3, #6]
 80166d8:	893b      	ldrh	r3, [r7, #8]
 80166da:	4293      	cmp	r3, r2
 80166dc:	bf28      	it	cs
 80166de:	4613      	movcs	r3, r2
 80166e0:	b29b      	uxth	r3, r3
 80166e2:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80166e4:	893b      	ldrh	r3, [r7, #8]
 80166e6:	461a      	mov	r2, r3
 80166e8:	68f9      	ldr	r1, [r7, #12]
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f000 fa43 	bl	8016b76 <USBD_CtlSendData>
 80166f0:	e009      	b.n	8016706 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80166f2:	6839      	ldr	r1, [r7, #0]
 80166f4:	6878      	ldr	r0, [r7, #4]
 80166f6:	f000 f9cd 	bl	8016a94 <USBD_CtlError>
 80166fa:	e004      	b.n	8016706 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80166fc:	6878      	ldr	r0, [r7, #4]
 80166fe:	f000 fa94 	bl	8016c2a <USBD_CtlSendStatus>
 8016702:	e000      	b.n	8016706 <USBD_GetDescriptor+0x346>
    return;
 8016704:	bf00      	nop
  }
}
 8016706:	3710      	adds	r7, #16
 8016708:	46bd      	mov	sp, r7
 801670a:	bd80      	pop	{r7, pc}

0801670c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801670c:	b580      	push	{r7, lr}
 801670e:	b084      	sub	sp, #16
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
 8016714:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016716:	683b      	ldr	r3, [r7, #0]
 8016718:	889b      	ldrh	r3, [r3, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d131      	bne.n	8016782 <USBD_SetAddress+0x76>
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	88db      	ldrh	r3, [r3, #6]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d12d      	bne.n	8016782 <USBD_SetAddress+0x76>
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	885b      	ldrh	r3, [r3, #2]
 801672a:	2b7f      	cmp	r3, #127	; 0x7f
 801672c:	d829      	bhi.n	8016782 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	885b      	ldrh	r3, [r3, #2]
 8016732:	b2db      	uxtb	r3, r3
 8016734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016738:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016740:	b2db      	uxtb	r3, r3
 8016742:	2b03      	cmp	r3, #3
 8016744:	d104      	bne.n	8016750 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016746:	6839      	ldr	r1, [r7, #0]
 8016748:	6878      	ldr	r0, [r7, #4]
 801674a:	f000 f9a3 	bl	8016a94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801674e:	e01d      	b.n	801678c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	7bfa      	ldrb	r2, [r7, #15]
 8016754:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016758:	7bfb      	ldrb	r3, [r7, #15]
 801675a:	4619      	mov	r1, r3
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f000 ffab 	bl	80176b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f000 fa61 	bl	8016c2a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016768:	7bfb      	ldrb	r3, [r7, #15]
 801676a:	2b00      	cmp	r3, #0
 801676c:	d004      	beq.n	8016778 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2202      	movs	r2, #2
 8016772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016776:	e009      	b.n	801678c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2201      	movs	r2, #1
 801677c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016780:	e004      	b.n	801678c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016782:	6839      	ldr	r1, [r7, #0]
 8016784:	6878      	ldr	r0, [r7, #4]
 8016786:	f000 f985 	bl	8016a94 <USBD_CtlError>
  }
}
 801678a:	bf00      	nop
 801678c:	bf00      	nop
 801678e:	3710      	adds	r7, #16
 8016790:	46bd      	mov	sp, r7
 8016792:	bd80      	pop	{r7, pc}

08016794 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
 801679c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801679e:	2300      	movs	r3, #0
 80167a0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80167a2:	683b      	ldr	r3, [r7, #0]
 80167a4:	885b      	ldrh	r3, [r3, #2]
 80167a6:	b2da      	uxtb	r2, r3
 80167a8:	4b4c      	ldr	r3, [pc, #304]	; (80168dc <USBD_SetConfig+0x148>)
 80167aa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80167ac:	4b4b      	ldr	r3, [pc, #300]	; (80168dc <USBD_SetConfig+0x148>)
 80167ae:	781b      	ldrb	r3, [r3, #0]
 80167b0:	2b01      	cmp	r3, #1
 80167b2:	d905      	bls.n	80167c0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80167b4:	6839      	ldr	r1, [r7, #0]
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f000 f96c 	bl	8016a94 <USBD_CtlError>
    return USBD_FAIL;
 80167bc:	2303      	movs	r3, #3
 80167be:	e088      	b.n	80168d2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167c6:	b2db      	uxtb	r3, r3
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d002      	beq.n	80167d2 <USBD_SetConfig+0x3e>
 80167cc:	2b03      	cmp	r3, #3
 80167ce:	d025      	beq.n	801681c <USBD_SetConfig+0x88>
 80167d0:	e071      	b.n	80168b6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80167d2:	4b42      	ldr	r3, [pc, #264]	; (80168dc <USBD_SetConfig+0x148>)
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	d01c      	beq.n	8016814 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80167da:	4b40      	ldr	r3, [pc, #256]	; (80168dc <USBD_SetConfig+0x148>)
 80167dc:	781b      	ldrb	r3, [r3, #0]
 80167de:	461a      	mov	r2, r3
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167e4:	4b3d      	ldr	r3, [pc, #244]	; (80168dc <USBD_SetConfig+0x148>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	4619      	mov	r1, r3
 80167ea:	6878      	ldr	r0, [r7, #4]
 80167ec:	f7ff f97f 	bl	8015aee <USBD_SetClassConfig>
 80167f0:	4603      	mov	r3, r0
 80167f2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80167f4:	7bfb      	ldrb	r3, [r7, #15]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d004      	beq.n	8016804 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80167fa:	6839      	ldr	r1, [r7, #0]
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	f000 f949 	bl	8016a94 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016802:	e065      	b.n	80168d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 fa10 	bl	8016c2a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801680a:	687b      	ldr	r3, [r7, #4]
 801680c:	2203      	movs	r2, #3
 801680e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016812:	e05d      	b.n	80168d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f000 fa08 	bl	8016c2a <USBD_CtlSendStatus>
      break;
 801681a:	e059      	b.n	80168d0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801681c:	4b2f      	ldr	r3, [pc, #188]	; (80168dc <USBD_SetConfig+0x148>)
 801681e:	781b      	ldrb	r3, [r3, #0]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d112      	bne.n	801684a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	2202      	movs	r2, #2
 8016828:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801682c:	4b2b      	ldr	r3, [pc, #172]	; (80168dc <USBD_SetConfig+0x148>)
 801682e:	781b      	ldrb	r3, [r3, #0]
 8016830:	461a      	mov	r2, r3
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016836:	4b29      	ldr	r3, [pc, #164]	; (80168dc <USBD_SetConfig+0x148>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	4619      	mov	r1, r3
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f7ff f972 	bl	8015b26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 f9f1 	bl	8016c2a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016848:	e042      	b.n	80168d0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 801684a:	4b24      	ldr	r3, [pc, #144]	; (80168dc <USBD_SetConfig+0x148>)
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	461a      	mov	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	429a      	cmp	r2, r3
 8016856:	d02a      	beq.n	80168ae <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	685b      	ldr	r3, [r3, #4]
 801685c:	b2db      	uxtb	r3, r3
 801685e:	4619      	mov	r1, r3
 8016860:	6878      	ldr	r0, [r7, #4]
 8016862:	f7ff f960 	bl	8015b26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016866:	4b1d      	ldr	r3, [pc, #116]	; (80168dc <USBD_SetConfig+0x148>)
 8016868:	781b      	ldrb	r3, [r3, #0]
 801686a:	461a      	mov	r2, r3
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016870:	4b1a      	ldr	r3, [pc, #104]	; (80168dc <USBD_SetConfig+0x148>)
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	4619      	mov	r1, r3
 8016876:	6878      	ldr	r0, [r7, #4]
 8016878:	f7ff f939 	bl	8015aee <USBD_SetClassConfig>
 801687c:	4603      	mov	r3, r0
 801687e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016880:	7bfb      	ldrb	r3, [r7, #15]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00f      	beq.n	80168a6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8016886:	6839      	ldr	r1, [r7, #0]
 8016888:	6878      	ldr	r0, [r7, #4]
 801688a:	f000 f903 	bl	8016a94 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	b2db      	uxtb	r3, r3
 8016894:	4619      	mov	r1, r3
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f7ff f945 	bl	8015b26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2202      	movs	r2, #2
 80168a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80168a4:	e014      	b.n	80168d0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80168a6:	6878      	ldr	r0, [r7, #4]
 80168a8:	f000 f9bf 	bl	8016c2a <USBD_CtlSendStatus>
      break;
 80168ac:	e010      	b.n	80168d0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f000 f9bb 	bl	8016c2a <USBD_CtlSendStatus>
      break;
 80168b4:	e00c      	b.n	80168d0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80168b6:	6839      	ldr	r1, [r7, #0]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 f8eb 	bl	8016a94 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80168be:	4b07      	ldr	r3, [pc, #28]	; (80168dc <USBD_SetConfig+0x148>)
 80168c0:	781b      	ldrb	r3, [r3, #0]
 80168c2:	4619      	mov	r1, r3
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f7ff f92e 	bl	8015b26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80168ca:	2303      	movs	r3, #3
 80168cc:	73fb      	strb	r3, [r7, #15]
      break;
 80168ce:	bf00      	nop
  }

  return ret;
 80168d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80168d2:	4618      	mov	r0, r3
 80168d4:	3710      	adds	r7, #16
 80168d6:	46bd      	mov	sp, r7
 80168d8:	bd80      	pop	{r7, pc}
 80168da:	bf00      	nop
 80168dc:	20000ca3 	.word	0x20000ca3

080168e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
 80168e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80168ea:	683b      	ldr	r3, [r7, #0]
 80168ec:	88db      	ldrh	r3, [r3, #6]
 80168ee:	2b01      	cmp	r3, #1
 80168f0:	d004      	beq.n	80168fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80168f2:	6839      	ldr	r1, [r7, #0]
 80168f4:	6878      	ldr	r0, [r7, #4]
 80168f6:	f000 f8cd 	bl	8016a94 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80168fa:	e023      	b.n	8016944 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016902:	b2db      	uxtb	r3, r3
 8016904:	2b02      	cmp	r3, #2
 8016906:	dc02      	bgt.n	801690e <USBD_GetConfig+0x2e>
 8016908:	2b00      	cmp	r3, #0
 801690a:	dc03      	bgt.n	8016914 <USBD_GetConfig+0x34>
 801690c:	e015      	b.n	801693a <USBD_GetConfig+0x5a>
 801690e:	2b03      	cmp	r3, #3
 8016910:	d00b      	beq.n	801692a <USBD_GetConfig+0x4a>
 8016912:	e012      	b.n	801693a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	2200      	movs	r2, #0
 8016918:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	3308      	adds	r3, #8
 801691e:	2201      	movs	r2, #1
 8016920:	4619      	mov	r1, r3
 8016922:	6878      	ldr	r0, [r7, #4]
 8016924:	f000 f927 	bl	8016b76 <USBD_CtlSendData>
        break;
 8016928:	e00c      	b.n	8016944 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	3304      	adds	r3, #4
 801692e:	2201      	movs	r2, #1
 8016930:	4619      	mov	r1, r3
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f000 f91f 	bl	8016b76 <USBD_CtlSendData>
        break;
 8016938:	e004      	b.n	8016944 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801693a:	6839      	ldr	r1, [r7, #0]
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f000 f8a9 	bl	8016a94 <USBD_CtlError>
        break;
 8016942:	bf00      	nop
}
 8016944:	bf00      	nop
 8016946:	3708      	adds	r7, #8
 8016948:	46bd      	mov	sp, r7
 801694a:	bd80      	pop	{r7, pc}

0801694c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b082      	sub	sp, #8
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
 8016954:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801695c:	b2db      	uxtb	r3, r3
 801695e:	3b01      	subs	r3, #1
 8016960:	2b02      	cmp	r3, #2
 8016962:	d81e      	bhi.n	80169a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016964:	683b      	ldr	r3, [r7, #0]
 8016966:	88db      	ldrh	r3, [r3, #6]
 8016968:	2b02      	cmp	r3, #2
 801696a:	d004      	beq.n	8016976 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801696c:	6839      	ldr	r1, [r7, #0]
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f000 f890 	bl	8016a94 <USBD_CtlError>
        break;
 8016974:	e01a      	b.n	80169ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	2201      	movs	r2, #1
 801697a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016982:	2b00      	cmp	r3, #0
 8016984:	d005      	beq.n	8016992 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	68db      	ldr	r3, [r3, #12]
 801698a:	f043 0202 	orr.w	r2, r3, #2
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	330c      	adds	r3, #12
 8016996:	2202      	movs	r2, #2
 8016998:	4619      	mov	r1, r3
 801699a:	6878      	ldr	r0, [r7, #4]
 801699c:	f000 f8eb 	bl	8016b76 <USBD_CtlSendData>
      break;
 80169a0:	e004      	b.n	80169ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80169a2:	6839      	ldr	r1, [r7, #0]
 80169a4:	6878      	ldr	r0, [r7, #4]
 80169a6:	f000 f875 	bl	8016a94 <USBD_CtlError>
      break;
 80169aa:	bf00      	nop
  }
}
 80169ac:	bf00      	nop
 80169ae:	3708      	adds	r7, #8
 80169b0:	46bd      	mov	sp, r7
 80169b2:	bd80      	pop	{r7, pc}

080169b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169b4:	b580      	push	{r7, lr}
 80169b6:	b082      	sub	sp, #8
 80169b8:	af00      	add	r7, sp, #0
 80169ba:	6078      	str	r0, [r7, #4]
 80169bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	885b      	ldrh	r3, [r3, #2]
 80169c2:	2b01      	cmp	r3, #1
 80169c4:	d106      	bne.n	80169d4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2201      	movs	r2, #1
 80169ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80169ce:	6878      	ldr	r0, [r7, #4]
 80169d0:	f000 f92b 	bl	8016c2a <USBD_CtlSendStatus>
  }
}
 80169d4:	bf00      	nop
 80169d6:	3708      	adds	r7, #8
 80169d8:	46bd      	mov	sp, r7
 80169da:	bd80      	pop	{r7, pc}

080169dc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169dc:	b580      	push	{r7, lr}
 80169de:	b082      	sub	sp, #8
 80169e0:	af00      	add	r7, sp, #0
 80169e2:	6078      	str	r0, [r7, #4]
 80169e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ec:	b2db      	uxtb	r3, r3
 80169ee:	3b01      	subs	r3, #1
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d80b      	bhi.n	8016a0c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	885b      	ldrh	r3, [r3, #2]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d10c      	bne.n	8016a16 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f910 	bl	8016c2a <USBD_CtlSendStatus>
      }
      break;
 8016a0a:	e004      	b.n	8016a16 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016a0c:	6839      	ldr	r1, [r7, #0]
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f840 	bl	8016a94 <USBD_CtlError>
      break;
 8016a14:	e000      	b.n	8016a18 <USBD_ClrFeature+0x3c>
      break;
 8016a16:	bf00      	nop
  }
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	781a      	ldrb	r2, [r3, #0]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	781a      	ldrb	r2, [r3, #0]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	3301      	adds	r3, #1
 8016a48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	f7ff fa7f 	bl	8015f4e <SWAPBYTE>
 8016a50:	4603      	mov	r3, r0
 8016a52:	461a      	mov	r2, r3
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	3301      	adds	r3, #1
 8016a62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f7ff fa72 	bl	8015f4e <SWAPBYTE>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	3301      	adds	r3, #1
 8016a76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a7e:	68f8      	ldr	r0, [r7, #12]
 8016a80:	f7ff fa65 	bl	8015f4e <SWAPBYTE>
 8016a84:	4603      	mov	r3, r0
 8016a86:	461a      	mov	r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	80da      	strh	r2, [r3, #6]
}
 8016a8c:	bf00      	nop
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a9e:	2180      	movs	r1, #128	; 0x80
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f000 fd6f 	bl	8017584 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f000 fd6b 	bl	8017584 <USBD_LL_StallEP>
}
 8016aae:	bf00      	nop
 8016ab0:	3708      	adds	r7, #8
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}

08016ab6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016ab6:	b580      	push	{r7, lr}
 8016ab8:	b086      	sub	sp, #24
 8016aba:	af00      	add	r7, sp, #0
 8016abc:	60f8      	str	r0, [r7, #12]
 8016abe:	60b9      	str	r1, [r7, #8]
 8016ac0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d036      	beq.n	8016b3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016ad0:	6938      	ldr	r0, [r7, #16]
 8016ad2:	f000 f836 	bl	8016b42 <USBD_GetLen>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	3301      	adds	r3, #1
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	b29a      	uxth	r2, r3
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016ae4:	7dfb      	ldrb	r3, [r7, #23]
 8016ae6:	68ba      	ldr	r2, [r7, #8]
 8016ae8:	4413      	add	r3, r2
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	7812      	ldrb	r2, [r2, #0]
 8016aee:	701a      	strb	r2, [r3, #0]
  idx++;
 8016af0:	7dfb      	ldrb	r3, [r7, #23]
 8016af2:	3301      	adds	r3, #1
 8016af4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016af6:	7dfb      	ldrb	r3, [r7, #23]
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	4413      	add	r3, r2
 8016afc:	2203      	movs	r2, #3
 8016afe:	701a      	strb	r2, [r3, #0]
  idx++;
 8016b00:	7dfb      	ldrb	r3, [r7, #23]
 8016b02:	3301      	adds	r3, #1
 8016b04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016b06:	e013      	b.n	8016b30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	68ba      	ldr	r2, [r7, #8]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	693a      	ldr	r2, [r7, #16]
 8016b10:	7812      	ldrb	r2, [r2, #0]
 8016b12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	3301      	adds	r3, #1
 8016b18:	613b      	str	r3, [r7, #16]
    idx++;
 8016b1a:	7dfb      	ldrb	r3, [r7, #23]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016b20:	7dfb      	ldrb	r3, [r7, #23]
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	4413      	add	r3, r2
 8016b26:	2200      	movs	r2, #0
 8016b28:	701a      	strb	r2, [r3, #0]
    idx++;
 8016b2a:	7dfb      	ldrb	r3, [r7, #23]
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d1e7      	bne.n	8016b08 <USBD_GetString+0x52>
 8016b38:	e000      	b.n	8016b3c <USBD_GetString+0x86>
    return;
 8016b3a:	bf00      	nop
  }
}
 8016b3c:	3718      	adds	r7, #24
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016b42:	b480      	push	{r7}
 8016b44:	b085      	sub	sp, #20
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b52:	e005      	b.n	8016b60 <USBD_GetLen+0x1e>
  {
    len++;
 8016b54:	7bfb      	ldrb	r3, [r7, #15]
 8016b56:	3301      	adds	r3, #1
 8016b58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1f5      	bne.n	8016b54 <USBD_GetLen+0x12>
  }

  return len;
 8016b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3714      	adds	r7, #20
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b74:	4770      	bx	lr

08016b76 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b084      	sub	sp, #16
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	60f8      	str	r0, [r7, #12]
 8016b7e:	60b9      	str	r1, [r7, #8]
 8016b80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2202      	movs	r2, #2
 8016b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f000 fdc1 	bl	8017724 <USBD_LL_Transmit>

  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b084      	sub	sp, #16
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	68ba      	ldr	r2, [r7, #8]
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f000 fdb0 	bl	8017724 <USBD_LL_Transmit>

  return USBD_OK;
 8016bc4:	2300      	movs	r3, #0
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	3710      	adds	r7, #16
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}

08016bce <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016bce:	b580      	push	{r7, lr}
 8016bd0:	b084      	sub	sp, #16
 8016bd2:	af00      	add	r7, sp, #0
 8016bd4:	60f8      	str	r0, [r7, #12]
 8016bd6:	60b9      	str	r1, [r7, #8]
 8016bd8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	2203      	movs	r2, #3
 8016bde:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	687a      	ldr	r2, [r7, #4]
 8016be6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016bea:	68fb      	ldr	r3, [r7, #12]
 8016bec:	687a      	ldr	r2, [r7, #4]
 8016bee:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	68ba      	ldr	r2, [r7, #8]
 8016bf6:	2100      	movs	r1, #0
 8016bf8:	68f8      	ldr	r0, [r7, #12]
 8016bfa:	f000 fdcb 	bl	8017794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bfe:	2300      	movs	r3, #0
}
 8016c00:	4618      	mov	r0, r3
 8016c02:	3710      	adds	r7, #16
 8016c04:	46bd      	mov	sp, r7
 8016c06:	bd80      	pop	{r7, pc}

08016c08 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016c08:	b580      	push	{r7, lr}
 8016c0a:	b084      	sub	sp, #16
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	60f8      	str	r0, [r7, #12]
 8016c10:	60b9      	str	r1, [r7, #8]
 8016c12:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	68ba      	ldr	r2, [r7, #8]
 8016c18:	2100      	movs	r1, #0
 8016c1a:	68f8      	ldr	r0, [r7, #12]
 8016c1c:	f000 fdba 	bl	8017794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c20:	2300      	movs	r3, #0
}
 8016c22:	4618      	mov	r0, r3
 8016c24:	3710      	adds	r7, #16
 8016c26:	46bd      	mov	sp, r7
 8016c28:	bd80      	pop	{r7, pc}

08016c2a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016c2a:	b580      	push	{r7, lr}
 8016c2c:	b082      	sub	sp, #8
 8016c2e:	af00      	add	r7, sp, #0
 8016c30:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2204      	movs	r2, #4
 8016c36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016c3a:	2300      	movs	r3, #0
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	2100      	movs	r1, #0
 8016c40:	6878      	ldr	r0, [r7, #4]
 8016c42:	f000 fd6f 	bl	8017724 <USBD_LL_Transmit>

  return USBD_OK;
 8016c46:	2300      	movs	r3, #0
}
 8016c48:	4618      	mov	r0, r3
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	2205      	movs	r2, #5
 8016c5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c60:	2300      	movs	r3, #0
 8016c62:	2200      	movs	r2, #0
 8016c64:	2100      	movs	r1, #0
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f000 fd94 	bl	8017794 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c6c:	2300      	movs	r3, #0
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
	...

08016c78 <Hes_USB_Config_Mode>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void Hes_USB_Config_Mode(void)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	af00      	add	r7, sp, #0
	if (USBD_Init_CDC(&hUsbDeviceFS, &FS_Desc_CDC, DEVICE_FS) != USBD_OK)
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	4912      	ldr	r1, [pc, #72]	; (8016cc8 <Hes_USB_Config_Mode+0x50>)
 8016c80:	4812      	ldr	r0, [pc, #72]	; (8016ccc <Hes_USB_Config_Mode+0x54>)
 8016c82:	f7fe feab 	bl	80159dc <USBD_Init_CDC>
 8016c86:	4603      	mov	r3, r0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d001      	beq.n	8016c90 <Hes_USB_Config_Mode+0x18>
	{
	  Error_Handler();
 8016c8c:	f7f2 fef4 	bl	8009a78 <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016c90:	490f      	ldr	r1, [pc, #60]	; (8016cd0 <Hes_USB_Config_Mode+0x58>)
 8016c92:	480e      	ldr	r0, [pc, #56]	; (8016ccc <Hes_USB_Config_Mode+0x54>)
 8016c94:	f7fe fed2 	bl	8015a3c <USBD_RegisterClass>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d001      	beq.n	8016ca2 <Hes_USB_Config_Mode+0x2a>
	{
	  Error_Handler();
 8016c9e:	f7f2 feeb 	bl	8009a78 <Error_Handler>
	}
	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016ca2:	490c      	ldr	r1, [pc, #48]	; (8016cd4 <Hes_USB_Config_Mode+0x5c>)
 8016ca4:	4809      	ldr	r0, [pc, #36]	; (8016ccc <Hes_USB_Config_Mode+0x54>)
 8016ca6:	f7ea fbeb 	bl	8001480 <USBD_CDC_RegisterInterface>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d001      	beq.n	8016cb4 <Hes_USB_Config_Mode+0x3c>
	{
	  Error_Handler();
 8016cb0:	f7f2 fee2 	bl	8009a78 <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016cb4:	4805      	ldr	r0, [pc, #20]	; (8016ccc <Hes_USB_Config_Mode+0x54>)
 8016cb6:	f7fe fee8 	bl	8015a8a <USBD_Start>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <Hes_USB_Config_Mode+0x4c>
	{
	  Error_Handler();
 8016cc0:	f7f2 feda 	bl	8009a78 <Error_Handler>
	}
}
 8016cc4:	bf00      	nop
 8016cc6:	bd80      	pop	{r7, pc}
 8016cc8:	20000810 	.word	0x20000810
 8016ccc:	200035e0 	.word	0x200035e0
 8016cd0:	2000000c 	.word	0x2000000c
 8016cd4:	20000114 	.word	0x20000114

08016cd8 <USB_DFU>:

void USB_DFU(void)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016cdc:	2200      	movs	r2, #0
 8016cde:	4912      	ldr	r1, [pc, #72]	; (8016d28 <USB_DFU+0x50>)
 8016ce0:	4812      	ldr	r0, [pc, #72]	; (8016d2c <USB_DFU+0x54>)
 8016ce2:	f7fe fe4b 	bl	801597c <USBD_Init>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d001      	beq.n	8016cf0 <USB_DFU+0x18>
  {
    Error_Handler();
 8016cec:	f7f2 fec4 	bl	8009a78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8016cf0:	490f      	ldr	r1, [pc, #60]	; (8016d30 <USB_DFU+0x58>)
 8016cf2:	480e      	ldr	r0, [pc, #56]	; (8016d2c <USB_DFU+0x54>)
 8016cf4:	f7fe fea2 	bl	8015a3c <USBD_RegisterClass>
 8016cf8:	4603      	mov	r3, r0
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d001      	beq.n	8016d02 <USB_DFU+0x2a>
  {
    Error_Handler();
 8016cfe:	f7f2 febb 	bl	8009a78 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8016d02:	490c      	ldr	r1, [pc, #48]	; (8016d34 <USB_DFU+0x5c>)
 8016d04:	4809      	ldr	r0, [pc, #36]	; (8016d2c <USB_DFU+0x54>)
 8016d06:	f7fe fab7 	bl	8015278 <USBD_DFU_RegisterMedia>
 8016d0a:	4603      	mov	r3, r0
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d001      	beq.n	8016d14 <USB_DFU+0x3c>
  {
    Error_Handler();
 8016d10:	f7f2 feb2 	bl	8009a78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016d14:	4805      	ldr	r0, [pc, #20]	; (8016d2c <USB_DFU+0x54>)
 8016d16:	f7fe feb8 	bl	8015a8a <USBD_Start>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d001      	beq.n	8016d24 <USB_DFU+0x4c>
  {
    Error_Handler();
 8016d20:	f7f2 feaa 	bl	8009a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016d24:	bf00      	nop
 8016d26:	bd80      	pop	{r7, pc}
 8016d28:	20000830 	.word	0x20000830
 8016d2c:	200035e0 	.word	0x200035e0
 8016d30:	200007ac 	.word	0x200007ac
 8016d34:	200008a4 	.word	0x200008a4

08016d38 <USBD_FS_DeviceDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_DeviceDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d38:	b480      	push	{r7}
 8016d3a:	b083      	sub	sp, #12
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	4603      	mov	r3, r0
 8016d40:	6039      	str	r1, [r7, #0]
 8016d42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc_CDC);
 8016d44:	683b      	ldr	r3, [r7, #0]
 8016d46:	2212      	movs	r2, #18
 8016d48:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_CDC;
 8016d4a:	4b03      	ldr	r3, [pc, #12]	; (8016d58 <USBD_FS_DeviceDescriptor_CDC+0x20>)
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr
 8016d58:	20000864 	.word	0x20000864

08016d5c <USBD_FS_DeviceDescriptor>:

uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d5c:	b480      	push	{r7}
 8016d5e:	b083      	sub	sp, #12
 8016d60:	af00      	add	r7, sp, #0
 8016d62:	4603      	mov	r3, r0
 8016d64:	6039      	str	r1, [r7, #0]
 8016d66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016d68:	683b      	ldr	r3, [r7, #0]
 8016d6a:	2212      	movs	r2, #18
 8016d6c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016d6e:	4b03      	ldr	r3, [pc, #12]	; (8016d7c <USBD_FS_DeviceDescriptor+0x20>)
}
 8016d70:	4618      	mov	r0, r3
 8016d72:	370c      	adds	r7, #12
 8016d74:	46bd      	mov	sp, r7
 8016d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7a:	4770      	bx	lr
 8016d7c:	20000850 	.word	0x20000850

08016d80 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b083      	sub	sp, #12
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	4603      	mov	r3, r0
 8016d88:	6039      	str	r1, [r7, #0]
 8016d8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016d8c:	683b      	ldr	r3, [r7, #0]
 8016d8e:	2204      	movs	r2, #4
 8016d90:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016d92:	4b03      	ldr	r3, [pc, #12]	; (8016da0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016d94:	4618      	mov	r0, r3
 8016d96:	370c      	adds	r7, #12
 8016d98:	46bd      	mov	sp, r7
 8016d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d9e:	4770      	bx	lr
 8016da0:	20000884 	.word	0x20000884

08016da4 <USBD_FS_ProductStrDescriptor_CDC>:
  */

/* USER CODE BEGIN */

uint8_t * USBD_FS_ProductStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b082      	sub	sp, #8
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	4603      	mov	r3, r0
 8016dac:	6039      	str	r1, [r7, #0]
 8016dae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016db0:	79fb      	ldrb	r3, [r7, #7]
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d105      	bne.n	8016dc2 <USBD_FS_ProductStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 8016db6:	683a      	ldr	r2, [r7, #0]
 8016db8:	4907      	ldr	r1, [pc, #28]	; (8016dd8 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8016dba:	4808      	ldr	r0, [pc, #32]	; (8016ddc <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8016dbc:	f7ff fe7b 	bl	8016ab6 <USBD_GetString>
 8016dc0:	e004      	b.n	8016dcc <USBD_FS_ProductStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 8016dc2:	683a      	ldr	r2, [r7, #0]
 8016dc4:	4904      	ldr	r1, [pc, #16]	; (8016dd8 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8016dc6:	4805      	ldr	r0, [pc, #20]	; (8016ddc <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8016dc8:	f7ff fe75 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016dcc:	4b02      	ldr	r3, [pc, #8]	; (8016dd8 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
}
 8016dce:	4618      	mov	r0, r3
 8016dd0:	3708      	adds	r7, #8
 8016dd2:	46bd      	mov	sp, r7
 8016dd4:	bd80      	pop	{r7, pc}
 8016dd6:	bf00      	nop
 8016dd8:	200038b0 	.word	0x200038b0
 8016ddc:	0801b0bc 	.word	0x0801b0bc

08016de0 <USBD_FS_ProductStrDescriptor>:

/* USER CODE END */

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016de0:	b580      	push	{r7, lr}
 8016de2:	b082      	sub	sp, #8
 8016de4:	af00      	add	r7, sp, #0
 8016de6:	4603      	mov	r3, r0
 8016de8:	6039      	str	r1, [r7, #0]
 8016dea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016dec:	79fb      	ldrb	r3, [r7, #7]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d105      	bne.n	8016dfe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016df2:	683a      	ldr	r2, [r7, #0]
 8016df4:	4907      	ldr	r1, [pc, #28]	; (8016e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8016df6:	4808      	ldr	r0, [pc, #32]	; (8016e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8016df8:	f7ff fe5d 	bl	8016ab6 <USBD_GetString>
 8016dfc:	e004      	b.n	8016e08 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016dfe:	683a      	ldr	r2, [r7, #0]
 8016e00:	4904      	ldr	r1, [pc, #16]	; (8016e14 <USBD_FS_ProductStrDescriptor+0x34>)
 8016e02:	4805      	ldr	r0, [pc, #20]	; (8016e18 <USBD_FS_ProductStrDescriptor+0x38>)
 8016e04:	f7ff fe57 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e08:	4b02      	ldr	r3, [pc, #8]	; (8016e14 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	3708      	adds	r7, #8
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	200038b0 	.word	0x200038b0
 8016e18:	0801b0d4 	.word	0x0801b0d4

08016e1c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e1c:	b580      	push	{r7, lr}
 8016e1e:	b082      	sub	sp, #8
 8016e20:	af00      	add	r7, sp, #0
 8016e22:	4603      	mov	r3, r0
 8016e24:	6039      	str	r1, [r7, #0]
 8016e26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016e28:	683a      	ldr	r2, [r7, #0]
 8016e2a:	4904      	ldr	r1, [pc, #16]	; (8016e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016e2c:	4804      	ldr	r0, [pc, #16]	; (8016e40 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016e2e:	f7ff fe42 	bl	8016ab6 <USBD_GetString>
  return USBD_StrDesc;
 8016e32:	4b02      	ldr	r3, [pc, #8]	; (8016e3c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016e34:	4618      	mov	r0, r3
 8016e36:	3708      	adds	r7, #8
 8016e38:	46bd      	mov	sp, r7
 8016e3a:	bd80      	pop	{r7, pc}
 8016e3c:	200038b0 	.word	0x200038b0
 8016e40:	0801b0f4 	.word	0x0801b0f4

08016e44 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e44:	b580      	push	{r7, lr}
 8016e46:	b082      	sub	sp, #8
 8016e48:	af00      	add	r7, sp, #0
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	6039      	str	r1, [r7, #0]
 8016e4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016e50:	683b      	ldr	r3, [r7, #0]
 8016e52:	221a      	movs	r2, #26
 8016e54:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016e56:	f000 f891 	bl	8016f7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016e5a:	4b02      	ldr	r3, [pc, #8]	; (8016e64 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}
 8016e64:	20000888 	.word	0x20000888

08016e68 <USBD_FS_ConfigStrDescriptor_CDC>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e68:	b580      	push	{r7, lr}
 8016e6a:	b082      	sub	sp, #8
 8016e6c:	af00      	add	r7, sp, #0
 8016e6e:	4603      	mov	r3, r0
 8016e70:	6039      	str	r1, [r7, #0]
 8016e72:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016e74:	79fb      	ldrb	r3, [r7, #7]
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d105      	bne.n	8016e86 <USBD_FS_ConfigStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 8016e7a:	683a      	ldr	r2, [r7, #0]
 8016e7c:	4907      	ldr	r1, [pc, #28]	; (8016e9c <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 8016e7e:	4808      	ldr	r0, [pc, #32]	; (8016ea0 <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 8016e80:	f7ff fe19 	bl	8016ab6 <USBD_GetString>
 8016e84:	e004      	b.n	8016e90 <USBD_FS_ConfigStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 8016e86:	683a      	ldr	r2, [r7, #0]
 8016e88:	4904      	ldr	r1, [pc, #16]	; (8016e9c <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 8016e8a:	4805      	ldr	r0, [pc, #20]	; (8016ea0 <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 8016e8c:	f7ff fe13 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e90:	4b02      	ldr	r3, [pc, #8]	; (8016e9c <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
}
 8016e92:	4618      	mov	r0, r3
 8016e94:	3708      	adds	r7, #8
 8016e96:	46bd      	mov	sp, r7
 8016e98:	bd80      	pop	{r7, pc}
 8016e9a:	bf00      	nop
 8016e9c:	200038b0 	.word	0x200038b0
 8016ea0:	0801b100 	.word	0x0801b100

08016ea4 <USBD_FS_ConfigStrDescriptor>:


uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea4:	b580      	push	{r7, lr}
 8016ea6:	b082      	sub	sp, #8
 8016ea8:	af00      	add	r7, sp, #0
 8016eaa:	4603      	mov	r3, r0
 8016eac:	6039      	str	r1, [r7, #0]
 8016eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016eb0:	79fb      	ldrb	r3, [r7, #7]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d105      	bne.n	8016ec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016eb6:	683a      	ldr	r2, [r7, #0]
 8016eb8:	4907      	ldr	r1, [pc, #28]	; (8016ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016eba:	4808      	ldr	r0, [pc, #32]	; (8016edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ebc:	f7ff fdfb 	bl	8016ab6 <USBD_GetString>
 8016ec0:	e004      	b.n	8016ecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ec2:	683a      	ldr	r2, [r7, #0]
 8016ec4:	4904      	ldr	r1, [pc, #16]	; (8016ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016ec6:	4805      	ldr	r0, [pc, #20]	; (8016edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8016ec8:	f7ff fdf5 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ecc:	4b02      	ldr	r3, [pc, #8]	; (8016ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016ece:	4618      	mov	r0, r3
 8016ed0:	3708      	adds	r7, #8
 8016ed2:	46bd      	mov	sp, r7
 8016ed4:	bd80      	pop	{r7, pc}
 8016ed6:	bf00      	nop
 8016ed8:	200038b0 	.word	0x200038b0
 8016edc:	0801b10c 	.word	0x0801b10c

08016ee0 <USBD_FS_InterfaceStrDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_InterfaceStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b082      	sub	sp, #8
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	4603      	mov	r3, r0
 8016ee8:	6039      	str	r1, [r7, #0]
 8016eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016eec:	79fb      	ldrb	r3, [r7, #7]
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d105      	bne.n	8016efe <USBD_FS_InterfaceStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 8016ef2:	683a      	ldr	r2, [r7, #0]
 8016ef4:	4907      	ldr	r1, [pc, #28]	; (8016f14 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 8016ef6:	4808      	ldr	r0, [pc, #32]	; (8016f18 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8016ef8:	f7ff fddd 	bl	8016ab6 <USBD_GetString>
 8016efc:	e004      	b.n	8016f08 <USBD_FS_InterfaceStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 8016efe:	683a      	ldr	r2, [r7, #0]
 8016f00:	4904      	ldr	r1, [pc, #16]	; (8016f14 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 8016f02:	4805      	ldr	r0, [pc, #20]	; (8016f18 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8016f04:	f7ff fdd7 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f08:	4b02      	ldr	r3, [pc, #8]	; (8016f14 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	3708      	adds	r7, #8
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	bd80      	pop	{r7, pc}
 8016f12:	bf00      	nop
 8016f14:	200038b0 	.word	0x200038b0
 8016f18:	0801b118 	.word	0x0801b118

08016f1c <USBD_FS_InterfaceStrDescriptor>:


uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f1c:	b580      	push	{r7, lr}
 8016f1e:	b082      	sub	sp, #8
 8016f20:	af00      	add	r7, sp, #0
 8016f22:	4603      	mov	r3, r0
 8016f24:	6039      	str	r1, [r7, #0]
 8016f26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f28:	79fb      	ldrb	r3, [r7, #7]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d105      	bne.n	8016f3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f2e:	683a      	ldr	r2, [r7, #0]
 8016f30:	4907      	ldr	r1, [pc, #28]	; (8016f50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f32:	4808      	ldr	r0, [pc, #32]	; (8016f54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f34:	f7ff fdbf 	bl	8016ab6 <USBD_GetString>
 8016f38:	e004      	b.n	8016f44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f3a:	683a      	ldr	r2, [r7, #0]
 8016f3c:	4904      	ldr	r1, [pc, #16]	; (8016f50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f3e:	4805      	ldr	r0, [pc, #20]	; (8016f54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f40:	f7ff fdb9 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f44:	4b02      	ldr	r3, [pc, #8]	; (8016f50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016f46:	4618      	mov	r0, r3
 8016f48:	3708      	adds	r7, #8
 8016f4a:	46bd      	mov	sp, r7
 8016f4c:	bd80      	pop	{r7, pc}
 8016f4e:	bf00      	nop
 8016f50:	200038b0 	.word	0x200038b0
 8016f54:	0801b128 	.word	0x0801b128

08016f58 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f58:	b480      	push	{r7}
 8016f5a:	b083      	sub	sp, #12
 8016f5c:	af00      	add	r7, sp, #0
 8016f5e:	4603      	mov	r3, r0
 8016f60:	6039      	str	r1, [r7, #0]
 8016f62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8016f64:	683b      	ldr	r3, [r7, #0]
 8016f66:	220c      	movs	r2, #12
 8016f68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016f6a:	4b03      	ldr	r3, [pc, #12]	; (8016f78 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	370c      	adds	r7, #12
 8016f70:	46bd      	mov	sp, r7
 8016f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f76:	4770      	bx	lr
 8016f78:	20000878 	.word	0x20000878

08016f7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016f82:	4b0f      	ldr	r3, [pc, #60]	; (8016fc0 <Get_SerialNum+0x44>)
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016f88:	4b0e      	ldr	r3, [pc, #56]	; (8016fc4 <Get_SerialNum+0x48>)
 8016f8a:	681b      	ldr	r3, [r3, #0]
 8016f8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016f8e:	4b0e      	ldr	r3, [pc, #56]	; (8016fc8 <Get_SerialNum+0x4c>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016f94:	68fa      	ldr	r2, [r7, #12]
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	4413      	add	r3, r2
 8016f9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d009      	beq.n	8016fb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016fa2:	2208      	movs	r2, #8
 8016fa4:	4909      	ldr	r1, [pc, #36]	; (8016fcc <Get_SerialNum+0x50>)
 8016fa6:	68f8      	ldr	r0, [r7, #12]
 8016fa8:	f000 f814 	bl	8016fd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016fac:	2204      	movs	r2, #4
 8016fae:	4908      	ldr	r1, [pc, #32]	; (8016fd0 <Get_SerialNum+0x54>)
 8016fb0:	68b8      	ldr	r0, [r7, #8]
 8016fb2:	f000 f80f 	bl	8016fd4 <IntToUnicode>
  }
}
 8016fb6:	bf00      	nop
 8016fb8:	3710      	adds	r7, #16
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	bd80      	pop	{r7, pc}
 8016fbe:	bf00      	nop
 8016fc0:	1fff7590 	.word	0x1fff7590
 8016fc4:	1fff7594 	.word	0x1fff7594
 8016fc8:	1fff7598 	.word	0x1fff7598
 8016fcc:	2000088a 	.word	0x2000088a
 8016fd0:	2000089a 	.word	0x2000089a

08016fd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016fd4:	b480      	push	{r7}
 8016fd6:	b087      	sub	sp, #28
 8016fd8:	af00      	add	r7, sp, #0
 8016fda:	60f8      	str	r0, [r7, #12]
 8016fdc:	60b9      	str	r1, [r7, #8]
 8016fde:	4613      	mov	r3, r2
 8016fe0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	75fb      	strb	r3, [r7, #23]
 8016fea:	e027      	b.n	801703c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	0f1b      	lsrs	r3, r3, #28
 8016ff0:	2b09      	cmp	r3, #9
 8016ff2:	d80b      	bhi.n	801700c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	0f1b      	lsrs	r3, r3, #28
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	7dfb      	ldrb	r3, [r7, #23]
 8016ffc:	005b      	lsls	r3, r3, #1
 8016ffe:	4619      	mov	r1, r3
 8017000:	68bb      	ldr	r3, [r7, #8]
 8017002:	440b      	add	r3, r1
 8017004:	3230      	adds	r2, #48	; 0x30
 8017006:	b2d2      	uxtb	r2, r2
 8017008:	701a      	strb	r2, [r3, #0]
 801700a:	e00a      	b.n	8017022 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	0f1b      	lsrs	r3, r3, #28
 8017010:	b2da      	uxtb	r2, r3
 8017012:	7dfb      	ldrb	r3, [r7, #23]
 8017014:	005b      	lsls	r3, r3, #1
 8017016:	4619      	mov	r1, r3
 8017018:	68bb      	ldr	r3, [r7, #8]
 801701a:	440b      	add	r3, r1
 801701c:	3237      	adds	r2, #55	; 0x37
 801701e:	b2d2      	uxtb	r2, r2
 8017020:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	011b      	lsls	r3, r3, #4
 8017026:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017028:	7dfb      	ldrb	r3, [r7, #23]
 801702a:	005b      	lsls	r3, r3, #1
 801702c:	3301      	adds	r3, #1
 801702e:	68ba      	ldr	r2, [r7, #8]
 8017030:	4413      	add	r3, r2
 8017032:	2200      	movs	r2, #0
 8017034:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017036:	7dfb      	ldrb	r3, [r7, #23]
 8017038:	3301      	adds	r3, #1
 801703a:	75fb      	strb	r3, [r7, #23]
 801703c:	7dfa      	ldrb	r2, [r7, #23]
 801703e:	79fb      	ldrb	r3, [r7, #7]
 8017040:	429a      	cmp	r2, r3
 8017042:	d3d3      	bcc.n	8016fec <IntToUnicode+0x18>
  }
}
 8017044:	bf00      	nop
 8017046:	bf00      	nop
 8017048:	371c      	adds	r7, #28
 801704a:	46bd      	mov	sp, r7
 801704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017050:	4770      	bx	lr

08017052 <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8017052:	b480      	push	{r7}
 8017054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8017056:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8017058:	4618      	mov	r0, r3
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr

08017062 <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8017062:	b480      	push	{r7}
 8017064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8017066:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8017068:	4618      	mov	r0, r3
 801706a:	46bd      	mov	sp, r7
 801706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017070:	4770      	bx	lr

08017072 <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8017072:	b480      	push	{r7}
 8017074:	b083      	sub	sp, #12
 8017076:	af00      	add	r7, sp, #0
 8017078:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 801707a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 801707c:	4618      	mov	r0, r3
 801707e:	370c      	adds	r7, #12
 8017080:	46bd      	mov	sp, r7
 8017082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017086:	4770      	bx	lr

08017088 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8017088:	b480      	push	{r7}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	60f8      	str	r0, [r7, #12]
 8017090:	60b9      	str	r1, [r7, #8]
 8017092:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8017094:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017096:	4618      	mov	r0, r3
 8017098:	3714      	adds	r7, #20
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr

080170a2 <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80170a2:	b480      	push	{r7}
 80170a4:	b085      	sub	sp, #20
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	60f8      	str	r0, [r7, #12]
 80170aa:	60b9      	str	r1, [r7, #8]
 80170ac:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80170ae:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80170b0:	4618      	mov	r0, r3
 80170b2:	3714      	adds	r7, #20
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr

080170bc <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 80170bc:	b480      	push	{r7}
 80170be:	b085      	sub	sp, #20
 80170c0:	af00      	add	r7, sp, #0
 80170c2:	60f8      	str	r0, [r7, #12]
 80170c4:	460b      	mov	r3, r1
 80170c6:	607a      	str	r2, [r7, #4]
 80170c8:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 80170ca:	7afb      	ldrb	r3, [r7, #11]
 80170cc:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 80170ce:	bf00      	nop
  }
  return (USBD_OK);
 80170d0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80170d2:	4618      	mov	r0, r3
 80170d4:	3714      	adds	r7, #20
 80170d6:	46bd      	mov	sp, r7
 80170d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170dc:	4770      	bx	lr
	...

080170e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b084      	sub	sp, #16
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	4a0d      	ldr	r2, [pc, #52]	; (8017124 <HAL_PCD_MspInit+0x44>)
 80170ee:	4293      	cmp	r3, r2
 80170f0:	d113      	bne.n	801711a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80170f2:	4b0d      	ldr	r3, [pc, #52]	; (8017128 <HAL_PCD_MspInit+0x48>)
 80170f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80170f6:	4a0c      	ldr	r2, [pc, #48]	; (8017128 <HAL_PCD_MspInit+0x48>)
 80170f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80170fc:	6593      	str	r3, [r2, #88]	; 0x58
 80170fe:	4b0a      	ldr	r3, [pc, #40]	; (8017128 <HAL_PCD_MspInit+0x48>)
 8017100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017102:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017106:	60fb      	str	r3, [r7, #12]
 8017108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801710a:	2200      	movs	r2, #0
 801710c:	2100      	movs	r1, #0
 801710e:	2043      	movs	r0, #67	; 0x43
 8017110:	f7f4 fc9b 	bl	800ba4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8017114:	2043      	movs	r0, #67	; 0x43
 8017116:	f7f4 fcb4 	bl	800ba82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801711a:	bf00      	nop
 801711c:	3710      	adds	r7, #16
 801711e:	46bd      	mov	sp, r7
 8017120:	bd80      	pop	{r7, pc}
 8017122:	bf00      	nop
 8017124:	40006800 	.word	0x40006800
 8017128:	40021000 	.word	0x40021000

0801712c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b082      	sub	sp, #8
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8017140:	4619      	mov	r1, r3
 8017142:	4610      	mov	r0, r2
 8017144:	f7fe fd07 	bl	8015b56 <USBD_LL_SetupStage>
}
 8017148:	bf00      	nop
 801714a:	3708      	adds	r7, #8
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b082      	sub	sp, #8
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
 8017158:	460b      	mov	r3, r1
 801715a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017162:	78fa      	ldrb	r2, [r7, #3]
 8017164:	6879      	ldr	r1, [r7, #4]
 8017166:	4613      	mov	r3, r2
 8017168:	009b      	lsls	r3, r3, #2
 801716a:	4413      	add	r3, r2
 801716c:	00db      	lsls	r3, r3, #3
 801716e:	440b      	add	r3, r1
 8017170:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8017174:	681a      	ldr	r2, [r3, #0]
 8017176:	78fb      	ldrb	r3, [r7, #3]
 8017178:	4619      	mov	r1, r3
 801717a:	f7fe fd41 	bl	8015c00 <USBD_LL_DataOutStage>
}
 801717e:	bf00      	nop
 8017180:	3708      	adds	r7, #8
 8017182:	46bd      	mov	sp, r7
 8017184:	bd80      	pop	{r7, pc}

08017186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017186:	b580      	push	{r7, lr}
 8017188:	b082      	sub	sp, #8
 801718a:	af00      	add	r7, sp, #0
 801718c:	6078      	str	r0, [r7, #4]
 801718e:	460b      	mov	r3, r1
 8017190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8017198:	78fa      	ldrb	r2, [r7, #3]
 801719a:	6879      	ldr	r1, [r7, #4]
 801719c:	4613      	mov	r3, r2
 801719e:	009b      	lsls	r3, r3, #2
 80171a0:	4413      	add	r3, r2
 80171a2:	00db      	lsls	r3, r3, #3
 80171a4:	440b      	add	r3, r1
 80171a6:	333c      	adds	r3, #60	; 0x3c
 80171a8:	681a      	ldr	r2, [r3, #0]
 80171aa:	78fb      	ldrb	r3, [r7, #3]
 80171ac:	4619      	mov	r1, r3
 80171ae:	f7fe fd8a 	bl	8015cc6 <USBD_LL_DataInStage>
}
 80171b2:	bf00      	nop
 80171b4:	3708      	adds	r7, #8
 80171b6:	46bd      	mov	sp, r7
 80171b8:	bd80      	pop	{r7, pc}

080171ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ba:	b580      	push	{r7, lr}
 80171bc:	b082      	sub	sp, #8
 80171be:	af00      	add	r7, sp, #0
 80171c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80171c8:	4618      	mov	r0, r3
 80171ca:	f7fe fe9e 	bl	8015f0a <USBD_LL_SOF>
}
 80171ce:	bf00      	nop
 80171d0:	3708      	adds	r7, #8
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}

080171d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171d6:	b580      	push	{r7, lr}
 80171d8:	b084      	sub	sp, #16
 80171da:	af00      	add	r7, sp, #0
 80171dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171de:	2301      	movs	r3, #1
 80171e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	689b      	ldr	r3, [r3, #8]
 80171e6:	2b02      	cmp	r3, #2
 80171e8:	d001      	beq.n	80171ee <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80171ea:	f7f2 fc45 	bl	8009a78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80171f4:	7bfa      	ldrb	r2, [r7, #15]
 80171f6:	4611      	mov	r1, r2
 80171f8:	4618      	mov	r0, r3
 80171fa:	f7fe fe48 	bl	8015e8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017204:	4618      	mov	r0, r3
 8017206:	f7fe fdf4 	bl	8015df2 <USBD_LL_Reset>
}
 801720a:	bf00      	nop
 801720c:	3710      	adds	r7, #16
 801720e:	46bd      	mov	sp, r7
 8017210:	bd80      	pop	{r7, pc}
	...

08017214 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017214:	b580      	push	{r7, lr}
 8017216:	b082      	sub	sp, #8
 8017218:	af00      	add	r7, sp, #0
 801721a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017222:	4618      	mov	r0, r3
 8017224:	f7fe fe43 	bl	8015eae <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	699b      	ldr	r3, [r3, #24]
 801722c:	2b00      	cmp	r3, #0
 801722e:	d005      	beq.n	801723c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017230:	4b04      	ldr	r3, [pc, #16]	; (8017244 <HAL_PCD_SuspendCallback+0x30>)
 8017232:	691b      	ldr	r3, [r3, #16]
 8017234:	4a03      	ldr	r2, [pc, #12]	; (8017244 <HAL_PCD_SuspendCallback+0x30>)
 8017236:	f043 0306 	orr.w	r3, r3, #6
 801723a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801723c:	bf00      	nop
 801723e:	3708      	adds	r7, #8
 8017240:	46bd      	mov	sp, r7
 8017242:	bd80      	pop	{r7, pc}
 8017244:	e000ed00 	.word	0xe000ed00

08017248 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017248:	b580      	push	{r7, lr}
 801724a:	b082      	sub	sp, #8
 801724c:	af00      	add	r7, sp, #0
 801724e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	699b      	ldr	r3, [r3, #24]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d007      	beq.n	8017268 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017258:	4b08      	ldr	r3, [pc, #32]	; (801727c <HAL_PCD_ResumeCallback+0x34>)
 801725a:	691b      	ldr	r3, [r3, #16]
 801725c:	4a07      	ldr	r2, [pc, #28]	; (801727c <HAL_PCD_ResumeCallback+0x34>)
 801725e:	f023 0306 	bic.w	r3, r3, #6
 8017262:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8017264:	f000 fb30 	bl	80178c8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801726e:	4618      	mov	r0, r3
 8017270:	f7fe fe33 	bl	8015eda <USBD_LL_Resume>
}
 8017274:	bf00      	nop
 8017276:	3708      	adds	r7, #8
 8017278:	46bd      	mov	sp, r7
 801727a:	bd80      	pop	{r7, pc}
 801727c:	e000ed00 	.word	0xe000ed00

08017280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b082      	sub	sp, #8
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8017288:	f7f7 fe40 	bl	800ef0c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801728c:	4a1e      	ldr	r2, [pc, #120]	; (8017308 <USBD_LL_Init+0x88>)
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	4a1c      	ldr	r2, [pc, #112]	; (8017308 <USBD_LL_Init+0x88>)
 8017298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801729c:	4b1a      	ldr	r3, [pc, #104]	; (8017308 <USBD_LL_Init+0x88>)
 801729e:	4a1b      	ldr	r2, [pc, #108]	; (801730c <USBD_LL_Init+0x8c>)
 80172a0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80172a2:	4b19      	ldr	r3, [pc, #100]	; (8017308 <USBD_LL_Init+0x88>)
 80172a4:	2208      	movs	r2, #8
 80172a6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80172a8:	4b17      	ldr	r3, [pc, #92]	; (8017308 <USBD_LL_Init+0x88>)
 80172aa:	2202      	movs	r2, #2
 80172ac:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80172ae:	4b16      	ldr	r3, [pc, #88]	; (8017308 <USBD_LL_Init+0x88>)
 80172b0:	2202      	movs	r2, #2
 80172b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80172b4:	4b14      	ldr	r3, [pc, #80]	; (8017308 <USBD_LL_Init+0x88>)
 80172b6:	2200      	movs	r2, #0
 80172b8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80172ba:	4b13      	ldr	r3, [pc, #76]	; (8017308 <USBD_LL_Init+0x88>)
 80172bc:	2200      	movs	r2, #0
 80172be:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80172c0:	4b11      	ldr	r3, [pc, #68]	; (8017308 <USBD_LL_Init+0x88>)
 80172c2:	2200      	movs	r2, #0
 80172c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80172c6:	4b10      	ldr	r3, [pc, #64]	; (8017308 <USBD_LL_Init+0x88>)
 80172c8:	2200      	movs	r2, #0
 80172ca:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80172cc:	480e      	ldr	r0, [pc, #56]	; (8017308 <USBD_LL_Init+0x88>)
 80172ce:	f7f6 f8b8 	bl	800d442 <HAL_PCD_Init>
 80172d2:	4603      	mov	r3, r0
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d001      	beq.n	80172dc <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80172d8:	f7f2 fbce 	bl	8009a78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80172e2:	2318      	movs	r3, #24
 80172e4:	2200      	movs	r2, #0
 80172e6:	2100      	movs	r1, #0
 80172e8:	f7f7 fd2f 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80172f2:	2358      	movs	r3, #88	; 0x58
 80172f4:	2200      	movs	r2, #0
 80172f6:	2180      	movs	r1, #128	; 0x80
 80172f8:	f7f7 fd27 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 80172fc:	2300      	movs	r3, #0
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3708      	adds	r7, #8
 8017302:	46bd      	mov	sp, r7
 8017304:	bd80      	pop	{r7, pc}
 8017306:	bf00      	nop
 8017308:	20003ab0 	.word	0x20003ab0
 801730c:	40006800 	.word	0x40006800

08017310 <USBD_LL_Init_CDC>:

/* USER CODE BEGIN */
//LBLeo
USBD_StatusTypeDef USBD_LL_Init_CDC(USBD_HandleTypeDef *pdev)
{
 8017310:	b580      	push	{r7, lr}
 8017312:	b082      	sub	sp, #8
 8017314:	af00      	add	r7, sp, #0
 8017316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8017318:	f7f7 fdf8 	bl	800ef0c <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 801731c:	4a2b      	ldr	r2, [pc, #172]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 801731e:	687b      	ldr	r3, [r7, #4]
 8017320:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	4a29      	ldr	r2, [pc, #164]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017328:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 801732c:	4b27      	ldr	r3, [pc, #156]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 801732e:	4a28      	ldr	r2, [pc, #160]	; (80173d0 <USBD_LL_Init_CDC+0xc0>)
 8017330:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017332:	4b26      	ldr	r3, [pc, #152]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017334:	2208      	movs	r2, #8
 8017336:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017338:	4b24      	ldr	r3, [pc, #144]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 801733a:	2202      	movs	r2, #2
 801733c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801733e:	4b23      	ldr	r3, [pc, #140]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017340:	2202      	movs	r2, #2
 8017342:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017344:	4b21      	ldr	r3, [pc, #132]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017346:	2200      	movs	r2, #0
 8017348:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801734a:	4b20      	ldr	r3, [pc, #128]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 801734c:	2200      	movs	r2, #0
 801734e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017350:	4b1e      	ldr	r3, [pc, #120]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017352:	2200      	movs	r2, #0
 8017354:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017356:	4b1d      	ldr	r3, [pc, #116]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 8017358:	2200      	movs	r2, #0
 801735a:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 801735c:	481b      	ldr	r0, [pc, #108]	; (80173cc <USBD_LL_Init_CDC+0xbc>)
 801735e:	f7f6 f870 	bl	800d442 <HAL_PCD_Init>
 8017362:	4603      	mov	r3, r0
 8017364:	2b00      	cmp	r3, #0
 8017366:	d001      	beq.n	801736c <USBD_LL_Init_CDC+0x5c>
  {
    Error_Handler( );
 8017368:	f7f2 fb86 	bl	8009a78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017372:	2318      	movs	r3, #24
 8017374:	2200      	movs	r2, #0
 8017376:	2100      	movs	r1, #0
 8017378:	f7f7 fce7 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017382:	2358      	movs	r3, #88	; 0x58
 8017384:	2200      	movs	r2, #0
 8017386:	2180      	movs	r1, #128	; 0x80
 8017388:	f7f7 fcdf 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017392:	23c0      	movs	r3, #192	; 0xc0
 8017394:	2200      	movs	r2, #0
 8017396:	2181      	movs	r1, #129	; 0x81
 8017398:	f7f7 fcd7 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80173a2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80173a6:	2200      	movs	r2, #0
 80173a8:	2101      	movs	r1, #1
 80173aa:	f7f7 fcce 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80173b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80173b8:	2200      	movs	r2, #0
 80173ba:	2182      	movs	r1, #130	; 0x82
 80173bc:	f7f7 fcc5 	bl	800ed4a <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80173c0:	2300      	movs	r3, #0
}
 80173c2:	4618      	mov	r0, r3
 80173c4:	3708      	adds	r7, #8
 80173c6:	46bd      	mov	sp, r7
 80173c8:	bd80      	pop	{r7, pc}
 80173ca:	bf00      	nop
 80173cc:	20003ab0 	.word	0x20003ab0
 80173d0:	40006800 	.word	0x40006800

080173d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b084      	sub	sp, #16
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173dc:	2300      	movs	r3, #0
 80173de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173e0:	2300      	movs	r3, #0
 80173e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f6 f93b 	bl	800d666 <HAL_PCD_Start>
 80173f0:	4603      	mov	r3, r0
 80173f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80173f4:	7bbb      	ldrb	r3, [r7, #14]
 80173f6:	2b03      	cmp	r3, #3
 80173f8:	d816      	bhi.n	8017428 <USBD_LL_Start+0x54>
 80173fa:	a201      	add	r2, pc, #4	; (adr r2, 8017400 <USBD_LL_Start+0x2c>)
 80173fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017400:	08017411 	.word	0x08017411
 8017404:	08017417 	.word	0x08017417
 8017408:	0801741d 	.word	0x0801741d
 801740c:	08017423 	.word	0x08017423
    case HAL_OK :
      usb_status = USBD_OK;
 8017410:	2300      	movs	r3, #0
 8017412:	73fb      	strb	r3, [r7, #15]
    break;
 8017414:	e00b      	b.n	801742e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017416:	2303      	movs	r3, #3
 8017418:	73fb      	strb	r3, [r7, #15]
    break;
 801741a:	e008      	b.n	801742e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801741c:	2301      	movs	r3, #1
 801741e:	73fb      	strb	r3, [r7, #15]
    break;
 8017420:	e005      	b.n	801742e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017422:	2303      	movs	r3, #3
 8017424:	73fb      	strb	r3, [r7, #15]
    break;
 8017426:	e002      	b.n	801742e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8017428:	2303      	movs	r3, #3
 801742a:	73fb      	strb	r3, [r7, #15]
    break;
 801742c:	bf00      	nop
  }
  return usb_status;
 801742e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017430:	4618      	mov	r0, r3
 8017432:	3710      	adds	r7, #16
 8017434:	46bd      	mov	sp, r7
 8017436:	bd80      	pop	{r7, pc}

08017438 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8017438:	b580      	push	{r7, lr}
 801743a:	b084      	sub	sp, #16
 801743c:	af00      	add	r7, sp, #0
 801743e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017440:	2300      	movs	r3, #0
 8017442:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017444:	2300      	movs	r3, #0
 8017446:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801744e:	4618      	mov	r0, r3
 8017450:	f7f6 f92b 	bl	800d6aa <HAL_PCD_Stop>
 8017454:	4603      	mov	r3, r0
 8017456:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017458:	7bbb      	ldrb	r3, [r7, #14]
 801745a:	2b03      	cmp	r3, #3
 801745c:	d816      	bhi.n	801748c <USBD_LL_Stop+0x54>
 801745e:	a201      	add	r2, pc, #4	; (adr r2, 8017464 <USBD_LL_Stop+0x2c>)
 8017460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017464:	08017475 	.word	0x08017475
 8017468:	0801747b 	.word	0x0801747b
 801746c:	08017481 	.word	0x08017481
 8017470:	08017487 	.word	0x08017487
    case HAL_OK :
      usb_status = USBD_OK;
 8017474:	2300      	movs	r3, #0
 8017476:	73fb      	strb	r3, [r7, #15]
    break;
 8017478:	e00b      	b.n	8017492 <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801747a:	2303      	movs	r3, #3
 801747c:	73fb      	strb	r3, [r7, #15]
    break;
 801747e:	e008      	b.n	8017492 <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017480:	2301      	movs	r3, #1
 8017482:	73fb      	strb	r3, [r7, #15]
    break;
 8017484:	e005      	b.n	8017492 <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017486:	2303      	movs	r3, #3
 8017488:	73fb      	strb	r3, [r7, #15]
    break;
 801748a:	e002      	b.n	8017492 <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 801748c:	2303      	movs	r3, #3
 801748e:	73fb      	strb	r3, [r7, #15]
    break;
 8017490:	bf00      	nop
  }
  return usb_status;
 8017492:	7bfb      	ldrb	r3, [r7, #15]
}
 8017494:	4618      	mov	r0, r3
 8017496:	3710      	adds	r7, #16
 8017498:	46bd      	mov	sp, r7
 801749a:	bd80      	pop	{r7, pc}

0801749c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	4608      	mov	r0, r1
 80174a6:	4611      	mov	r1, r2
 80174a8:	461a      	mov	r2, r3
 80174aa:	4603      	mov	r3, r0
 80174ac:	70fb      	strb	r3, [r7, #3]
 80174ae:	460b      	mov	r3, r1
 80174b0:	70bb      	strb	r3, [r7, #2]
 80174b2:	4613      	mov	r3, r2
 80174b4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174b6:	2300      	movs	r3, #0
 80174b8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174ba:	2300      	movs	r3, #0
 80174bc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80174c4:	78bb      	ldrb	r3, [r7, #2]
 80174c6:	883a      	ldrh	r2, [r7, #0]
 80174c8:	78f9      	ldrb	r1, [r7, #3]
 80174ca:	f7f6 fa83 	bl	800d9d4 <HAL_PCD_EP_Open>
 80174ce:	4603      	mov	r3, r0
 80174d0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80174d2:	7bbb      	ldrb	r3, [r7, #14]
 80174d4:	2b03      	cmp	r3, #3
 80174d6:	d817      	bhi.n	8017508 <USBD_LL_OpenEP+0x6c>
 80174d8:	a201      	add	r2, pc, #4	; (adr r2, 80174e0 <USBD_LL_OpenEP+0x44>)
 80174da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174de:	bf00      	nop
 80174e0:	080174f1 	.word	0x080174f1
 80174e4:	080174f7 	.word	0x080174f7
 80174e8:	080174fd 	.word	0x080174fd
 80174ec:	08017503 	.word	0x08017503
    case HAL_OK :
      usb_status = USBD_OK;
 80174f0:	2300      	movs	r3, #0
 80174f2:	73fb      	strb	r3, [r7, #15]
    break;
 80174f4:	e00b      	b.n	801750e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80174f6:	2303      	movs	r3, #3
 80174f8:	73fb      	strb	r3, [r7, #15]
    break;
 80174fa:	e008      	b.n	801750e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80174fc:	2301      	movs	r3, #1
 80174fe:	73fb      	strb	r3, [r7, #15]
    break;
 8017500:	e005      	b.n	801750e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017502:	2303      	movs	r3, #3
 8017504:	73fb      	strb	r3, [r7, #15]
    break;
 8017506:	e002      	b.n	801750e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8017508:	2303      	movs	r3, #3
 801750a:	73fb      	strb	r3, [r7, #15]
    break;
 801750c:	bf00      	nop
  }
  return usb_status;
 801750e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017510:	4618      	mov	r0, r3
 8017512:	3710      	adds	r7, #16
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}

08017518 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017518:	b580      	push	{r7, lr}
 801751a:	b084      	sub	sp, #16
 801751c:	af00      	add	r7, sp, #0
 801751e:	6078      	str	r0, [r7, #4]
 8017520:	460b      	mov	r3, r1
 8017522:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017524:	2300      	movs	r3, #0
 8017526:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017528:	2300      	movs	r3, #0
 801752a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017532:	78fa      	ldrb	r2, [r7, #3]
 8017534:	4611      	mov	r1, r2
 8017536:	4618      	mov	r0, r3
 8017538:	f7f6 fab2 	bl	800daa0 <HAL_PCD_EP_Close>
 801753c:	4603      	mov	r3, r0
 801753e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017540:	7bbb      	ldrb	r3, [r7, #14]
 8017542:	2b03      	cmp	r3, #3
 8017544:	d816      	bhi.n	8017574 <USBD_LL_CloseEP+0x5c>
 8017546:	a201      	add	r2, pc, #4	; (adr r2, 801754c <USBD_LL_CloseEP+0x34>)
 8017548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801754c:	0801755d 	.word	0x0801755d
 8017550:	08017563 	.word	0x08017563
 8017554:	08017569 	.word	0x08017569
 8017558:	0801756f 	.word	0x0801756f
    case HAL_OK :
      usb_status = USBD_OK;
 801755c:	2300      	movs	r3, #0
 801755e:	73fb      	strb	r3, [r7, #15]
    break;
 8017560:	e00b      	b.n	801757a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017562:	2303      	movs	r3, #3
 8017564:	73fb      	strb	r3, [r7, #15]
    break;
 8017566:	e008      	b.n	801757a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017568:	2301      	movs	r3, #1
 801756a:	73fb      	strb	r3, [r7, #15]
    break;
 801756c:	e005      	b.n	801757a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801756e:	2303      	movs	r3, #3
 8017570:	73fb      	strb	r3, [r7, #15]
    break;
 8017572:	e002      	b.n	801757a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017574:	2303      	movs	r3, #3
 8017576:	73fb      	strb	r3, [r7, #15]
    break;
 8017578:	bf00      	nop
  }
  return usb_status;
 801757a:	7bfb      	ldrb	r3, [r7, #15]
}
 801757c:	4618      	mov	r0, r3
 801757e:	3710      	adds	r7, #16
 8017580:	46bd      	mov	sp, r7
 8017582:	bd80      	pop	{r7, pc}

08017584 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017584:	b580      	push	{r7, lr}
 8017586:	b084      	sub	sp, #16
 8017588:	af00      	add	r7, sp, #0
 801758a:	6078      	str	r0, [r7, #4]
 801758c:	460b      	mov	r3, r1
 801758e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017590:	2300      	movs	r3, #0
 8017592:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017594:	2300      	movs	r3, #0
 8017596:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801759e:	78fa      	ldrb	r2, [r7, #3]
 80175a0:	4611      	mov	r1, r2
 80175a2:	4618      	mov	r0, r3
 80175a4:	f7f6 fb5c 	bl	800dc60 <HAL_PCD_EP_SetStall>
 80175a8:	4603      	mov	r3, r0
 80175aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80175ac:	7bbb      	ldrb	r3, [r7, #14]
 80175ae:	2b03      	cmp	r3, #3
 80175b0:	d816      	bhi.n	80175e0 <USBD_LL_StallEP+0x5c>
 80175b2:	a201      	add	r2, pc, #4	; (adr r2, 80175b8 <USBD_LL_StallEP+0x34>)
 80175b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175b8:	080175c9 	.word	0x080175c9
 80175bc:	080175cf 	.word	0x080175cf
 80175c0:	080175d5 	.word	0x080175d5
 80175c4:	080175db 	.word	0x080175db
    case HAL_OK :
      usb_status = USBD_OK;
 80175c8:	2300      	movs	r3, #0
 80175ca:	73fb      	strb	r3, [r7, #15]
    break;
 80175cc:	e00b      	b.n	80175e6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80175ce:	2303      	movs	r3, #3
 80175d0:	73fb      	strb	r3, [r7, #15]
    break;
 80175d2:	e008      	b.n	80175e6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80175d4:	2301      	movs	r3, #1
 80175d6:	73fb      	strb	r3, [r7, #15]
    break;
 80175d8:	e005      	b.n	80175e6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80175da:	2303      	movs	r3, #3
 80175dc:	73fb      	strb	r3, [r7, #15]
    break;
 80175de:	e002      	b.n	80175e6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80175e0:	2303      	movs	r3, #3
 80175e2:	73fb      	strb	r3, [r7, #15]
    break;
 80175e4:	bf00      	nop
  }
  return usb_status;
 80175e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80175e8:	4618      	mov	r0, r3
 80175ea:	3710      	adds	r7, #16
 80175ec:	46bd      	mov	sp, r7
 80175ee:	bd80      	pop	{r7, pc}

080175f0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175fc:	2300      	movs	r3, #0
 80175fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017600:	2300      	movs	r3, #0
 8017602:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801760a:	78fa      	ldrb	r2, [r7, #3]
 801760c:	4611      	mov	r1, r2
 801760e:	4618      	mov	r0, r3
 8017610:	f7f6 fb86 	bl	800dd20 <HAL_PCD_EP_ClrStall>
 8017614:	4603      	mov	r3, r0
 8017616:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017618:	7bbb      	ldrb	r3, [r7, #14]
 801761a:	2b03      	cmp	r3, #3
 801761c:	d816      	bhi.n	801764c <USBD_LL_ClearStallEP+0x5c>
 801761e:	a201      	add	r2, pc, #4	; (adr r2, 8017624 <USBD_LL_ClearStallEP+0x34>)
 8017620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017624:	08017635 	.word	0x08017635
 8017628:	0801763b 	.word	0x0801763b
 801762c:	08017641 	.word	0x08017641
 8017630:	08017647 	.word	0x08017647
    case HAL_OK :
      usb_status = USBD_OK;
 8017634:	2300      	movs	r3, #0
 8017636:	73fb      	strb	r3, [r7, #15]
    break;
 8017638:	e00b      	b.n	8017652 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801763a:	2303      	movs	r3, #3
 801763c:	73fb      	strb	r3, [r7, #15]
    break;
 801763e:	e008      	b.n	8017652 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017640:	2301      	movs	r3, #1
 8017642:	73fb      	strb	r3, [r7, #15]
    break;
 8017644:	e005      	b.n	8017652 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017646:	2303      	movs	r3, #3
 8017648:	73fb      	strb	r3, [r7, #15]
    break;
 801764a:	e002      	b.n	8017652 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 801764c:	2303      	movs	r3, #3
 801764e:	73fb      	strb	r3, [r7, #15]
    break;
 8017650:	bf00      	nop
  }
  return usb_status;
 8017652:	7bfb      	ldrb	r3, [r7, #15]
}
 8017654:	4618      	mov	r0, r3
 8017656:	3710      	adds	r7, #16
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}

0801765c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801765c:	b480      	push	{r7}
 801765e:	b085      	sub	sp, #20
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
 8017664:	460b      	mov	r3, r1
 8017666:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801766e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017670:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017674:	2b00      	cmp	r3, #0
 8017676:	da0c      	bge.n	8017692 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017678:	78fb      	ldrb	r3, [r7, #3]
 801767a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801767e:	68f9      	ldr	r1, [r7, #12]
 8017680:	1c5a      	adds	r2, r3, #1
 8017682:	4613      	mov	r3, r2
 8017684:	009b      	lsls	r3, r3, #2
 8017686:	4413      	add	r3, r2
 8017688:	00db      	lsls	r3, r3, #3
 801768a:	440b      	add	r3, r1
 801768c:	3302      	adds	r3, #2
 801768e:	781b      	ldrb	r3, [r3, #0]
 8017690:	e00b      	b.n	80176aa <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017692:	78fb      	ldrb	r3, [r7, #3]
 8017694:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017698:	68f9      	ldr	r1, [r7, #12]
 801769a:	4613      	mov	r3, r2
 801769c:	009b      	lsls	r3, r3, #2
 801769e:	4413      	add	r3, r2
 80176a0:	00db      	lsls	r3, r3, #3
 80176a2:	440b      	add	r3, r1
 80176a4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80176a8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3714      	adds	r7, #20
 80176ae:	46bd      	mov	sp, r7
 80176b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176b4:	4770      	bx	lr
	...

080176b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b084      	sub	sp, #16
 80176bc:	af00      	add	r7, sp, #0
 80176be:	6078      	str	r0, [r7, #4]
 80176c0:	460b      	mov	r3, r1
 80176c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80176c4:	2300      	movs	r3, #0
 80176c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80176c8:	2300      	movs	r3, #0
 80176ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80176d2:	78fa      	ldrb	r2, [r7, #3]
 80176d4:	4611      	mov	r1, r2
 80176d6:	4618      	mov	r0, r3
 80176d8:	f7f6 f957 	bl	800d98a <HAL_PCD_SetAddress>
 80176dc:	4603      	mov	r3, r0
 80176de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80176e0:	7bbb      	ldrb	r3, [r7, #14]
 80176e2:	2b03      	cmp	r3, #3
 80176e4:	d816      	bhi.n	8017714 <USBD_LL_SetUSBAddress+0x5c>
 80176e6:	a201      	add	r2, pc, #4	; (adr r2, 80176ec <USBD_LL_SetUSBAddress+0x34>)
 80176e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176ec:	080176fd 	.word	0x080176fd
 80176f0:	08017703 	.word	0x08017703
 80176f4:	08017709 	.word	0x08017709
 80176f8:	0801770f 	.word	0x0801770f
    case HAL_OK :
      usb_status = USBD_OK;
 80176fc:	2300      	movs	r3, #0
 80176fe:	73fb      	strb	r3, [r7, #15]
    break;
 8017700:	e00b      	b.n	801771a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017702:	2303      	movs	r3, #3
 8017704:	73fb      	strb	r3, [r7, #15]
    break;
 8017706:	e008      	b.n	801771a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017708:	2301      	movs	r3, #1
 801770a:	73fb      	strb	r3, [r7, #15]
    break;
 801770c:	e005      	b.n	801771a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801770e:	2303      	movs	r3, #3
 8017710:	73fb      	strb	r3, [r7, #15]
    break;
 8017712:	e002      	b.n	801771a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8017714:	2303      	movs	r3, #3
 8017716:	73fb      	strb	r3, [r7, #15]
    break;
 8017718:	bf00      	nop
  }
  return usb_status;
 801771a:	7bfb      	ldrb	r3, [r7, #15]
}
 801771c:	4618      	mov	r0, r3
 801771e:	3710      	adds	r7, #16
 8017720:	46bd      	mov	sp, r7
 8017722:	bd80      	pop	{r7, pc}

08017724 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017724:	b580      	push	{r7, lr}
 8017726:	b086      	sub	sp, #24
 8017728:	af00      	add	r7, sp, #0
 801772a:	60f8      	str	r0, [r7, #12]
 801772c:	607a      	str	r2, [r7, #4]
 801772e:	603b      	str	r3, [r7, #0]
 8017730:	460b      	mov	r3, r1
 8017732:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017734:	2300      	movs	r3, #0
 8017736:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017738:	2300      	movs	r3, #0
 801773a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017742:	7af9      	ldrb	r1, [r7, #11]
 8017744:	683b      	ldr	r3, [r7, #0]
 8017746:	687a      	ldr	r2, [r7, #4]
 8017748:	f7f6 fa47 	bl	800dbda <HAL_PCD_EP_Transmit>
 801774c:	4603      	mov	r3, r0
 801774e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8017750:	7dbb      	ldrb	r3, [r7, #22]
 8017752:	2b03      	cmp	r3, #3
 8017754:	d816      	bhi.n	8017784 <USBD_LL_Transmit+0x60>
 8017756:	a201      	add	r2, pc, #4	; (adr r2, 801775c <USBD_LL_Transmit+0x38>)
 8017758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801775c:	0801776d 	.word	0x0801776d
 8017760:	08017773 	.word	0x08017773
 8017764:	08017779 	.word	0x08017779
 8017768:	0801777f 	.word	0x0801777f
    case HAL_OK :
      usb_status = USBD_OK;
 801776c:	2300      	movs	r3, #0
 801776e:	75fb      	strb	r3, [r7, #23]
    break;
 8017770:	e00b      	b.n	801778a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017772:	2303      	movs	r3, #3
 8017774:	75fb      	strb	r3, [r7, #23]
    break;
 8017776:	e008      	b.n	801778a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017778:	2301      	movs	r3, #1
 801777a:	75fb      	strb	r3, [r7, #23]
    break;
 801777c:	e005      	b.n	801778a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801777e:	2303      	movs	r3, #3
 8017780:	75fb      	strb	r3, [r7, #23]
    break;
 8017782:	e002      	b.n	801778a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8017784:	2303      	movs	r3, #3
 8017786:	75fb      	strb	r3, [r7, #23]
    break;
 8017788:	bf00      	nop
  }
  return usb_status;
 801778a:	7dfb      	ldrb	r3, [r7, #23]
}
 801778c:	4618      	mov	r0, r3
 801778e:	3718      	adds	r7, #24
 8017790:	46bd      	mov	sp, r7
 8017792:	bd80      	pop	{r7, pc}

08017794 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017794:	b580      	push	{r7, lr}
 8017796:	b086      	sub	sp, #24
 8017798:	af00      	add	r7, sp, #0
 801779a:	60f8      	str	r0, [r7, #12]
 801779c:	607a      	str	r2, [r7, #4]
 801779e:	603b      	str	r3, [r7, #0]
 80177a0:	460b      	mov	r3, r1
 80177a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80177a4:	2300      	movs	r3, #0
 80177a6:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80177a8:	2300      	movs	r3, #0
 80177aa:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80177b2:	7af9      	ldrb	r1, [r7, #11]
 80177b4:	683b      	ldr	r3, [r7, #0]
 80177b6:	687a      	ldr	r2, [r7, #4]
 80177b8:	f7f6 f9ba 	bl	800db30 <HAL_PCD_EP_Receive>
 80177bc:	4603      	mov	r3, r0
 80177be:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80177c0:	7dbb      	ldrb	r3, [r7, #22]
 80177c2:	2b03      	cmp	r3, #3
 80177c4:	d816      	bhi.n	80177f4 <USBD_LL_PrepareReceive+0x60>
 80177c6:	a201      	add	r2, pc, #4	; (adr r2, 80177cc <USBD_LL_PrepareReceive+0x38>)
 80177c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80177cc:	080177dd 	.word	0x080177dd
 80177d0:	080177e3 	.word	0x080177e3
 80177d4:	080177e9 	.word	0x080177e9
 80177d8:	080177ef 	.word	0x080177ef
    case HAL_OK :
      usb_status = USBD_OK;
 80177dc:	2300      	movs	r3, #0
 80177de:	75fb      	strb	r3, [r7, #23]
    break;
 80177e0:	e00b      	b.n	80177fa <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80177e2:	2303      	movs	r3, #3
 80177e4:	75fb      	strb	r3, [r7, #23]
    break;
 80177e6:	e008      	b.n	80177fa <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80177e8:	2301      	movs	r3, #1
 80177ea:	75fb      	strb	r3, [r7, #23]
    break;
 80177ec:	e005      	b.n	80177fa <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80177ee:	2303      	movs	r3, #3
 80177f0:	75fb      	strb	r3, [r7, #23]
    break;
 80177f2:	e002      	b.n	80177fa <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80177f4:	2303      	movs	r3, #3
 80177f6:	75fb      	strb	r3, [r7, #23]
    break;
 80177f8:	bf00      	nop
  }
  return usb_status;
 80177fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3718      	adds	r7, #24
 8017800:	46bd      	mov	sp, r7
 8017802:	bd80      	pop	{r7, pc}

08017804 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
 801780c:	460b      	mov	r3, r1
 801780e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017810:	687b      	ldr	r3, [r7, #4]
 8017812:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017816:	78fa      	ldrb	r2, [r7, #3]
 8017818:	4611      	mov	r1, r2
 801781a:	4618      	mov	r0, r3
 801781c:	f7f6 f9c5 	bl	800dbaa <HAL_PCD_EP_GetRxCount>
 8017820:	4603      	mov	r3, r0
}
 8017822:	4618      	mov	r0, r3
 8017824:	3708      	adds	r7, #8
 8017826:	46bd      	mov	sp, r7
 8017828:	bd80      	pop	{r7, pc}
	...

0801782c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b082      	sub	sp, #8
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	460b      	mov	r3, r1
 8017836:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017838:	78fb      	ldrb	r3, [r7, #3]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d002      	beq.n	8017844 <HAL_PCDEx_LPM_Callback+0x18>
 801783e:	2b01      	cmp	r3, #1
 8017840:	d013      	beq.n	801786a <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017842:	e023      	b.n	801788c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	699b      	ldr	r3, [r3, #24]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d007      	beq.n	801785c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801784c:	f000 f83c 	bl	80178c8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017850:	4b10      	ldr	r3, [pc, #64]	; (8017894 <HAL_PCDEx_LPM_Callback+0x68>)
 8017852:	691b      	ldr	r3, [r3, #16]
 8017854:	4a0f      	ldr	r2, [pc, #60]	; (8017894 <HAL_PCDEx_LPM_Callback+0x68>)
 8017856:	f023 0306 	bic.w	r3, r3, #6
 801785a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017862:	4618      	mov	r0, r3
 8017864:	f7fe fb39 	bl	8015eda <USBD_LL_Resume>
    break;
 8017868:	e010      	b.n	801788c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017870:	4618      	mov	r0, r3
 8017872:	f7fe fb1c 	bl	8015eae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	699b      	ldr	r3, [r3, #24]
 801787a:	2b00      	cmp	r3, #0
 801787c:	d005      	beq.n	801788a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801787e:	4b05      	ldr	r3, [pc, #20]	; (8017894 <HAL_PCDEx_LPM_Callback+0x68>)
 8017880:	691b      	ldr	r3, [r3, #16]
 8017882:	4a04      	ldr	r2, [pc, #16]	; (8017894 <HAL_PCDEx_LPM_Callback+0x68>)
 8017884:	f043 0306 	orr.w	r3, r3, #6
 8017888:	6113      	str	r3, [r2, #16]
    break;
 801788a:	bf00      	nop
}
 801788c:	bf00      	nop
 801788e:	3708      	adds	r7, #8
 8017890:	46bd      	mov	sp, r7
 8017892:	bd80      	pop	{r7, pc}
 8017894:	e000ed00 	.word	0xe000ed00

08017898 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017898:	b480      	push	{r7}
 801789a:	b083      	sub	sp, #12
 801789c:	af00      	add	r7, sp, #0
 801789e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80178a0:	4b03      	ldr	r3, [pc, #12]	; (80178b0 <USBD_static_malloc+0x18>)
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	370c      	adds	r7, #12
 80178a6:	46bd      	mov	sp, r7
 80178a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ac:	4770      	bx	lr
 80178ae:	bf00      	nop
 80178b0:	20000ca4 	.word	0x20000ca4

080178b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80178b4:	b480      	push	{r7}
 80178b6:	b083      	sub	sp, #12
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]

}
 80178bc:	bf00      	nop
 80178be:	370c      	adds	r7, #12
 80178c0:	46bd      	mov	sp, r7
 80178c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c6:	4770      	bx	lr

080178c8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80178cc:	f7f1 ff70 	bl	80097b0 <SystemClock_Config>
}
 80178d0:	bf00      	nop
 80178d2:	bd80      	pop	{r7, pc}

080178d4 <atoi>:
 80178d4:	220a      	movs	r2, #10
 80178d6:	2100      	movs	r1, #0
 80178d8:	f000 be28 	b.w	801852c <strtol>

080178dc <__errno>:
 80178dc:	4b01      	ldr	r3, [pc, #4]	; (80178e4 <__errno+0x8>)
 80178de:	6818      	ldr	r0, [r3, #0]
 80178e0:	4770      	bx	lr
 80178e2:	bf00      	nop
 80178e4:	200008c0 	.word	0x200008c0

080178e8 <__libc_init_array>:
 80178e8:	b570      	push	{r4, r5, r6, lr}
 80178ea:	4d0d      	ldr	r5, [pc, #52]	; (8017920 <__libc_init_array+0x38>)
 80178ec:	4c0d      	ldr	r4, [pc, #52]	; (8017924 <__libc_init_array+0x3c>)
 80178ee:	1b64      	subs	r4, r4, r5
 80178f0:	10a4      	asrs	r4, r4, #2
 80178f2:	2600      	movs	r6, #0
 80178f4:	42a6      	cmp	r6, r4
 80178f6:	d109      	bne.n	801790c <__libc_init_array+0x24>
 80178f8:	4d0b      	ldr	r5, [pc, #44]	; (8017928 <__libc_init_array+0x40>)
 80178fa:	4c0c      	ldr	r4, [pc, #48]	; (801792c <__libc_init_array+0x44>)
 80178fc:	f003 f92e 	bl	801ab5c <_init>
 8017900:	1b64      	subs	r4, r4, r5
 8017902:	10a4      	asrs	r4, r4, #2
 8017904:	2600      	movs	r6, #0
 8017906:	42a6      	cmp	r6, r4
 8017908:	d105      	bne.n	8017916 <__libc_init_array+0x2e>
 801790a:	bd70      	pop	{r4, r5, r6, pc}
 801790c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017910:	4798      	blx	r3
 8017912:	3601      	adds	r6, #1
 8017914:	e7ee      	b.n	80178f4 <__libc_init_array+0xc>
 8017916:	f855 3b04 	ldr.w	r3, [r5], #4
 801791a:	4798      	blx	r3
 801791c:	3601      	adds	r6, #1
 801791e:	e7f2      	b.n	8017906 <__libc_init_array+0x1e>
 8017920:	0801cb58 	.word	0x0801cb58
 8017924:	0801cb58 	.word	0x0801cb58
 8017928:	0801cb58 	.word	0x0801cb58
 801792c:	0801cb5c 	.word	0x0801cb5c

08017930 <memcpy>:
 8017930:	440a      	add	r2, r1
 8017932:	4291      	cmp	r1, r2
 8017934:	f100 33ff 	add.w	r3, r0, #4294967295
 8017938:	d100      	bne.n	801793c <memcpy+0xc>
 801793a:	4770      	bx	lr
 801793c:	b510      	push	{r4, lr}
 801793e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017946:	4291      	cmp	r1, r2
 8017948:	d1f9      	bne.n	801793e <memcpy+0xe>
 801794a:	bd10      	pop	{r4, pc}

0801794c <memset>:
 801794c:	4402      	add	r2, r0
 801794e:	4603      	mov	r3, r0
 8017950:	4293      	cmp	r3, r2
 8017952:	d100      	bne.n	8017956 <memset+0xa>
 8017954:	4770      	bx	lr
 8017956:	f803 1b01 	strb.w	r1, [r3], #1
 801795a:	e7f9      	b.n	8017950 <memset+0x4>

0801795c <__cvt>:
 801795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017960:	ec55 4b10 	vmov	r4, r5, d0
 8017964:	2d00      	cmp	r5, #0
 8017966:	460e      	mov	r6, r1
 8017968:	4619      	mov	r1, r3
 801796a:	462b      	mov	r3, r5
 801796c:	bfbb      	ittet	lt
 801796e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017972:	461d      	movlt	r5, r3
 8017974:	2300      	movge	r3, #0
 8017976:	232d      	movlt	r3, #45	; 0x2d
 8017978:	700b      	strb	r3, [r1, #0]
 801797a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801797c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017980:	4691      	mov	r9, r2
 8017982:	f023 0820 	bic.w	r8, r3, #32
 8017986:	bfbc      	itt	lt
 8017988:	4622      	movlt	r2, r4
 801798a:	4614      	movlt	r4, r2
 801798c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017990:	d005      	beq.n	801799e <__cvt+0x42>
 8017992:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017996:	d100      	bne.n	801799a <__cvt+0x3e>
 8017998:	3601      	adds	r6, #1
 801799a:	2102      	movs	r1, #2
 801799c:	e000      	b.n	80179a0 <__cvt+0x44>
 801799e:	2103      	movs	r1, #3
 80179a0:	ab03      	add	r3, sp, #12
 80179a2:	9301      	str	r3, [sp, #4]
 80179a4:	ab02      	add	r3, sp, #8
 80179a6:	9300      	str	r3, [sp, #0]
 80179a8:	ec45 4b10 	vmov	d0, r4, r5
 80179ac:	4653      	mov	r3, sl
 80179ae:	4632      	mov	r2, r6
 80179b0:	f000 fe72 	bl	8018698 <_dtoa_r>
 80179b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80179b8:	4607      	mov	r7, r0
 80179ba:	d102      	bne.n	80179c2 <__cvt+0x66>
 80179bc:	f019 0f01 	tst.w	r9, #1
 80179c0:	d022      	beq.n	8017a08 <__cvt+0xac>
 80179c2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80179c6:	eb07 0906 	add.w	r9, r7, r6
 80179ca:	d110      	bne.n	80179ee <__cvt+0x92>
 80179cc:	783b      	ldrb	r3, [r7, #0]
 80179ce:	2b30      	cmp	r3, #48	; 0x30
 80179d0:	d10a      	bne.n	80179e8 <__cvt+0x8c>
 80179d2:	2200      	movs	r2, #0
 80179d4:	2300      	movs	r3, #0
 80179d6:	4620      	mov	r0, r4
 80179d8:	4629      	mov	r1, r5
 80179da:	f7e9 f875 	bl	8000ac8 <__aeabi_dcmpeq>
 80179de:	b918      	cbnz	r0, 80179e8 <__cvt+0x8c>
 80179e0:	f1c6 0601 	rsb	r6, r6, #1
 80179e4:	f8ca 6000 	str.w	r6, [sl]
 80179e8:	f8da 3000 	ldr.w	r3, [sl]
 80179ec:	4499      	add	r9, r3
 80179ee:	2200      	movs	r2, #0
 80179f0:	2300      	movs	r3, #0
 80179f2:	4620      	mov	r0, r4
 80179f4:	4629      	mov	r1, r5
 80179f6:	f7e9 f867 	bl	8000ac8 <__aeabi_dcmpeq>
 80179fa:	b108      	cbz	r0, 8017a00 <__cvt+0xa4>
 80179fc:	f8cd 900c 	str.w	r9, [sp, #12]
 8017a00:	2230      	movs	r2, #48	; 0x30
 8017a02:	9b03      	ldr	r3, [sp, #12]
 8017a04:	454b      	cmp	r3, r9
 8017a06:	d307      	bcc.n	8017a18 <__cvt+0xbc>
 8017a08:	9b03      	ldr	r3, [sp, #12]
 8017a0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017a0c:	1bdb      	subs	r3, r3, r7
 8017a0e:	4638      	mov	r0, r7
 8017a10:	6013      	str	r3, [r2, #0]
 8017a12:	b004      	add	sp, #16
 8017a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a18:	1c59      	adds	r1, r3, #1
 8017a1a:	9103      	str	r1, [sp, #12]
 8017a1c:	701a      	strb	r2, [r3, #0]
 8017a1e:	e7f0      	b.n	8017a02 <__cvt+0xa6>

08017a20 <__exponent>:
 8017a20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a22:	4603      	mov	r3, r0
 8017a24:	2900      	cmp	r1, #0
 8017a26:	bfb8      	it	lt
 8017a28:	4249      	neglt	r1, r1
 8017a2a:	f803 2b02 	strb.w	r2, [r3], #2
 8017a2e:	bfb4      	ite	lt
 8017a30:	222d      	movlt	r2, #45	; 0x2d
 8017a32:	222b      	movge	r2, #43	; 0x2b
 8017a34:	2909      	cmp	r1, #9
 8017a36:	7042      	strb	r2, [r0, #1]
 8017a38:	dd2a      	ble.n	8017a90 <__exponent+0x70>
 8017a3a:	f10d 0407 	add.w	r4, sp, #7
 8017a3e:	46a4      	mov	ip, r4
 8017a40:	270a      	movs	r7, #10
 8017a42:	46a6      	mov	lr, r4
 8017a44:	460a      	mov	r2, r1
 8017a46:	fb91 f6f7 	sdiv	r6, r1, r7
 8017a4a:	fb07 1516 	mls	r5, r7, r6, r1
 8017a4e:	3530      	adds	r5, #48	; 0x30
 8017a50:	2a63      	cmp	r2, #99	; 0x63
 8017a52:	f104 34ff 	add.w	r4, r4, #4294967295
 8017a56:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017a5a:	4631      	mov	r1, r6
 8017a5c:	dcf1      	bgt.n	8017a42 <__exponent+0x22>
 8017a5e:	3130      	adds	r1, #48	; 0x30
 8017a60:	f1ae 0502 	sub.w	r5, lr, #2
 8017a64:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017a68:	1c44      	adds	r4, r0, #1
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	4561      	cmp	r1, ip
 8017a6e:	d30a      	bcc.n	8017a86 <__exponent+0x66>
 8017a70:	f10d 0209 	add.w	r2, sp, #9
 8017a74:	eba2 020e 	sub.w	r2, r2, lr
 8017a78:	4565      	cmp	r5, ip
 8017a7a:	bf88      	it	hi
 8017a7c:	2200      	movhi	r2, #0
 8017a7e:	4413      	add	r3, r2
 8017a80:	1a18      	subs	r0, r3, r0
 8017a82:	b003      	add	sp, #12
 8017a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017a86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017a8a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017a8e:	e7ed      	b.n	8017a6c <__exponent+0x4c>
 8017a90:	2330      	movs	r3, #48	; 0x30
 8017a92:	3130      	adds	r1, #48	; 0x30
 8017a94:	7083      	strb	r3, [r0, #2]
 8017a96:	70c1      	strb	r1, [r0, #3]
 8017a98:	1d03      	adds	r3, r0, #4
 8017a9a:	e7f1      	b.n	8017a80 <__exponent+0x60>

08017a9c <_printf_float>:
 8017a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa0:	ed2d 8b02 	vpush	{d8}
 8017aa4:	b08d      	sub	sp, #52	; 0x34
 8017aa6:	460c      	mov	r4, r1
 8017aa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017aac:	4616      	mov	r6, r2
 8017aae:	461f      	mov	r7, r3
 8017ab0:	4605      	mov	r5, r0
 8017ab2:	f001 fce5 	bl	8019480 <_localeconv_r>
 8017ab6:	f8d0 a000 	ldr.w	sl, [r0]
 8017aba:	4650      	mov	r0, sl
 8017abc:	f7e8 fb88 	bl	80001d0 <strlen>
 8017ac0:	2300      	movs	r3, #0
 8017ac2:	930a      	str	r3, [sp, #40]	; 0x28
 8017ac4:	6823      	ldr	r3, [r4, #0]
 8017ac6:	9305      	str	r3, [sp, #20]
 8017ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8017acc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017ad0:	3307      	adds	r3, #7
 8017ad2:	f023 0307 	bic.w	r3, r3, #7
 8017ad6:	f103 0208 	add.w	r2, r3, #8
 8017ada:	f8c8 2000 	str.w	r2, [r8]
 8017ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ae2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017ae6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017aea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017aee:	9307      	str	r3, [sp, #28]
 8017af0:	f8cd 8018 	str.w	r8, [sp, #24]
 8017af4:	ee08 0a10 	vmov	s16, r0
 8017af8:	4b9f      	ldr	r3, [pc, #636]	; (8017d78 <_printf_float+0x2dc>)
 8017afa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017afe:	f04f 32ff 	mov.w	r2, #4294967295
 8017b02:	f7e9 f813 	bl	8000b2c <__aeabi_dcmpun>
 8017b06:	bb88      	cbnz	r0, 8017b6c <_printf_float+0xd0>
 8017b08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017b0c:	4b9a      	ldr	r3, [pc, #616]	; (8017d78 <_printf_float+0x2dc>)
 8017b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8017b12:	f7e8 ffed 	bl	8000af0 <__aeabi_dcmple>
 8017b16:	bb48      	cbnz	r0, 8017b6c <_printf_float+0xd0>
 8017b18:	2200      	movs	r2, #0
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	4640      	mov	r0, r8
 8017b1e:	4649      	mov	r1, r9
 8017b20:	f7e8 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8017b24:	b110      	cbz	r0, 8017b2c <_printf_float+0x90>
 8017b26:	232d      	movs	r3, #45	; 0x2d
 8017b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b2c:	4b93      	ldr	r3, [pc, #588]	; (8017d7c <_printf_float+0x2e0>)
 8017b2e:	4894      	ldr	r0, [pc, #592]	; (8017d80 <_printf_float+0x2e4>)
 8017b30:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017b34:	bf94      	ite	ls
 8017b36:	4698      	movls	r8, r3
 8017b38:	4680      	movhi	r8, r0
 8017b3a:	2303      	movs	r3, #3
 8017b3c:	6123      	str	r3, [r4, #16]
 8017b3e:	9b05      	ldr	r3, [sp, #20]
 8017b40:	f023 0204 	bic.w	r2, r3, #4
 8017b44:	6022      	str	r2, [r4, #0]
 8017b46:	f04f 0900 	mov.w	r9, #0
 8017b4a:	9700      	str	r7, [sp, #0]
 8017b4c:	4633      	mov	r3, r6
 8017b4e:	aa0b      	add	r2, sp, #44	; 0x2c
 8017b50:	4621      	mov	r1, r4
 8017b52:	4628      	mov	r0, r5
 8017b54:	f000 f9d8 	bl	8017f08 <_printf_common>
 8017b58:	3001      	adds	r0, #1
 8017b5a:	f040 8090 	bne.w	8017c7e <_printf_float+0x1e2>
 8017b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8017b62:	b00d      	add	sp, #52	; 0x34
 8017b64:	ecbd 8b02 	vpop	{d8}
 8017b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b6c:	4642      	mov	r2, r8
 8017b6e:	464b      	mov	r3, r9
 8017b70:	4640      	mov	r0, r8
 8017b72:	4649      	mov	r1, r9
 8017b74:	f7e8 ffda 	bl	8000b2c <__aeabi_dcmpun>
 8017b78:	b140      	cbz	r0, 8017b8c <_printf_float+0xf0>
 8017b7a:	464b      	mov	r3, r9
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	bfbc      	itt	lt
 8017b80:	232d      	movlt	r3, #45	; 0x2d
 8017b82:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017b86:	487f      	ldr	r0, [pc, #508]	; (8017d84 <_printf_float+0x2e8>)
 8017b88:	4b7f      	ldr	r3, [pc, #508]	; (8017d88 <_printf_float+0x2ec>)
 8017b8a:	e7d1      	b.n	8017b30 <_printf_float+0x94>
 8017b8c:	6863      	ldr	r3, [r4, #4]
 8017b8e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017b92:	9206      	str	r2, [sp, #24]
 8017b94:	1c5a      	adds	r2, r3, #1
 8017b96:	d13f      	bne.n	8017c18 <_printf_float+0x17c>
 8017b98:	2306      	movs	r3, #6
 8017b9a:	6063      	str	r3, [r4, #4]
 8017b9c:	9b05      	ldr	r3, [sp, #20]
 8017b9e:	6861      	ldr	r1, [r4, #4]
 8017ba0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017ba4:	2300      	movs	r3, #0
 8017ba6:	9303      	str	r3, [sp, #12]
 8017ba8:	ab0a      	add	r3, sp, #40	; 0x28
 8017baa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017bae:	ab09      	add	r3, sp, #36	; 0x24
 8017bb0:	ec49 8b10 	vmov	d0, r8, r9
 8017bb4:	9300      	str	r3, [sp, #0]
 8017bb6:	6022      	str	r2, [r4, #0]
 8017bb8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7ff fecd 	bl	801795c <__cvt>
 8017bc2:	9b06      	ldr	r3, [sp, #24]
 8017bc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017bc6:	2b47      	cmp	r3, #71	; 0x47
 8017bc8:	4680      	mov	r8, r0
 8017bca:	d108      	bne.n	8017bde <_printf_float+0x142>
 8017bcc:	1cc8      	adds	r0, r1, #3
 8017bce:	db02      	blt.n	8017bd6 <_printf_float+0x13a>
 8017bd0:	6863      	ldr	r3, [r4, #4]
 8017bd2:	4299      	cmp	r1, r3
 8017bd4:	dd41      	ble.n	8017c5a <_printf_float+0x1be>
 8017bd6:	f1ab 0b02 	sub.w	fp, fp, #2
 8017bda:	fa5f fb8b 	uxtb.w	fp, fp
 8017bde:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017be2:	d820      	bhi.n	8017c26 <_printf_float+0x18a>
 8017be4:	3901      	subs	r1, #1
 8017be6:	465a      	mov	r2, fp
 8017be8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017bec:	9109      	str	r1, [sp, #36]	; 0x24
 8017bee:	f7ff ff17 	bl	8017a20 <__exponent>
 8017bf2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017bf4:	1813      	adds	r3, r2, r0
 8017bf6:	2a01      	cmp	r2, #1
 8017bf8:	4681      	mov	r9, r0
 8017bfa:	6123      	str	r3, [r4, #16]
 8017bfc:	dc02      	bgt.n	8017c04 <_printf_float+0x168>
 8017bfe:	6822      	ldr	r2, [r4, #0]
 8017c00:	07d2      	lsls	r2, r2, #31
 8017c02:	d501      	bpl.n	8017c08 <_printf_float+0x16c>
 8017c04:	3301      	adds	r3, #1
 8017c06:	6123      	str	r3, [r4, #16]
 8017c08:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d09c      	beq.n	8017b4a <_printf_float+0xae>
 8017c10:	232d      	movs	r3, #45	; 0x2d
 8017c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017c16:	e798      	b.n	8017b4a <_printf_float+0xae>
 8017c18:	9a06      	ldr	r2, [sp, #24]
 8017c1a:	2a47      	cmp	r2, #71	; 0x47
 8017c1c:	d1be      	bne.n	8017b9c <_printf_float+0x100>
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	d1bc      	bne.n	8017b9c <_printf_float+0x100>
 8017c22:	2301      	movs	r3, #1
 8017c24:	e7b9      	b.n	8017b9a <_printf_float+0xfe>
 8017c26:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017c2a:	d118      	bne.n	8017c5e <_printf_float+0x1c2>
 8017c2c:	2900      	cmp	r1, #0
 8017c2e:	6863      	ldr	r3, [r4, #4]
 8017c30:	dd0b      	ble.n	8017c4a <_printf_float+0x1ae>
 8017c32:	6121      	str	r1, [r4, #16]
 8017c34:	b913      	cbnz	r3, 8017c3c <_printf_float+0x1a0>
 8017c36:	6822      	ldr	r2, [r4, #0]
 8017c38:	07d0      	lsls	r0, r2, #31
 8017c3a:	d502      	bpl.n	8017c42 <_printf_float+0x1a6>
 8017c3c:	3301      	adds	r3, #1
 8017c3e:	440b      	add	r3, r1
 8017c40:	6123      	str	r3, [r4, #16]
 8017c42:	65a1      	str	r1, [r4, #88]	; 0x58
 8017c44:	f04f 0900 	mov.w	r9, #0
 8017c48:	e7de      	b.n	8017c08 <_printf_float+0x16c>
 8017c4a:	b913      	cbnz	r3, 8017c52 <_printf_float+0x1b6>
 8017c4c:	6822      	ldr	r2, [r4, #0]
 8017c4e:	07d2      	lsls	r2, r2, #31
 8017c50:	d501      	bpl.n	8017c56 <_printf_float+0x1ba>
 8017c52:	3302      	adds	r3, #2
 8017c54:	e7f4      	b.n	8017c40 <_printf_float+0x1a4>
 8017c56:	2301      	movs	r3, #1
 8017c58:	e7f2      	b.n	8017c40 <_printf_float+0x1a4>
 8017c5a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017c5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017c60:	4299      	cmp	r1, r3
 8017c62:	db05      	blt.n	8017c70 <_printf_float+0x1d4>
 8017c64:	6823      	ldr	r3, [r4, #0]
 8017c66:	6121      	str	r1, [r4, #16]
 8017c68:	07d8      	lsls	r0, r3, #31
 8017c6a:	d5ea      	bpl.n	8017c42 <_printf_float+0x1a6>
 8017c6c:	1c4b      	adds	r3, r1, #1
 8017c6e:	e7e7      	b.n	8017c40 <_printf_float+0x1a4>
 8017c70:	2900      	cmp	r1, #0
 8017c72:	bfd4      	ite	le
 8017c74:	f1c1 0202 	rsble	r2, r1, #2
 8017c78:	2201      	movgt	r2, #1
 8017c7a:	4413      	add	r3, r2
 8017c7c:	e7e0      	b.n	8017c40 <_printf_float+0x1a4>
 8017c7e:	6823      	ldr	r3, [r4, #0]
 8017c80:	055a      	lsls	r2, r3, #21
 8017c82:	d407      	bmi.n	8017c94 <_printf_float+0x1f8>
 8017c84:	6923      	ldr	r3, [r4, #16]
 8017c86:	4642      	mov	r2, r8
 8017c88:	4631      	mov	r1, r6
 8017c8a:	4628      	mov	r0, r5
 8017c8c:	47b8      	blx	r7
 8017c8e:	3001      	adds	r0, #1
 8017c90:	d12c      	bne.n	8017cec <_printf_float+0x250>
 8017c92:	e764      	b.n	8017b5e <_printf_float+0xc2>
 8017c94:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017c98:	f240 80e0 	bls.w	8017e5c <_printf_float+0x3c0>
 8017c9c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	f7e8 ff10 	bl	8000ac8 <__aeabi_dcmpeq>
 8017ca8:	2800      	cmp	r0, #0
 8017caa:	d034      	beq.n	8017d16 <_printf_float+0x27a>
 8017cac:	4a37      	ldr	r2, [pc, #220]	; (8017d8c <_printf_float+0x2f0>)
 8017cae:	2301      	movs	r3, #1
 8017cb0:	4631      	mov	r1, r6
 8017cb2:	4628      	mov	r0, r5
 8017cb4:	47b8      	blx	r7
 8017cb6:	3001      	adds	r0, #1
 8017cb8:	f43f af51 	beq.w	8017b5e <_printf_float+0xc2>
 8017cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017cc0:	429a      	cmp	r2, r3
 8017cc2:	db02      	blt.n	8017cca <_printf_float+0x22e>
 8017cc4:	6823      	ldr	r3, [r4, #0]
 8017cc6:	07d8      	lsls	r0, r3, #31
 8017cc8:	d510      	bpl.n	8017cec <_printf_float+0x250>
 8017cca:	ee18 3a10 	vmov	r3, s16
 8017cce:	4652      	mov	r2, sl
 8017cd0:	4631      	mov	r1, r6
 8017cd2:	4628      	mov	r0, r5
 8017cd4:	47b8      	blx	r7
 8017cd6:	3001      	adds	r0, #1
 8017cd8:	f43f af41 	beq.w	8017b5e <_printf_float+0xc2>
 8017cdc:	f04f 0800 	mov.w	r8, #0
 8017ce0:	f104 091a 	add.w	r9, r4, #26
 8017ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ce6:	3b01      	subs	r3, #1
 8017ce8:	4543      	cmp	r3, r8
 8017cea:	dc09      	bgt.n	8017d00 <_printf_float+0x264>
 8017cec:	6823      	ldr	r3, [r4, #0]
 8017cee:	079b      	lsls	r3, r3, #30
 8017cf0:	f100 8105 	bmi.w	8017efe <_printf_float+0x462>
 8017cf4:	68e0      	ldr	r0, [r4, #12]
 8017cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cf8:	4298      	cmp	r0, r3
 8017cfa:	bfb8      	it	lt
 8017cfc:	4618      	movlt	r0, r3
 8017cfe:	e730      	b.n	8017b62 <_printf_float+0xc6>
 8017d00:	2301      	movs	r3, #1
 8017d02:	464a      	mov	r2, r9
 8017d04:	4631      	mov	r1, r6
 8017d06:	4628      	mov	r0, r5
 8017d08:	47b8      	blx	r7
 8017d0a:	3001      	adds	r0, #1
 8017d0c:	f43f af27 	beq.w	8017b5e <_printf_float+0xc2>
 8017d10:	f108 0801 	add.w	r8, r8, #1
 8017d14:	e7e6      	b.n	8017ce4 <_printf_float+0x248>
 8017d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d18:	2b00      	cmp	r3, #0
 8017d1a:	dc39      	bgt.n	8017d90 <_printf_float+0x2f4>
 8017d1c:	4a1b      	ldr	r2, [pc, #108]	; (8017d8c <_printf_float+0x2f0>)
 8017d1e:	2301      	movs	r3, #1
 8017d20:	4631      	mov	r1, r6
 8017d22:	4628      	mov	r0, r5
 8017d24:	47b8      	blx	r7
 8017d26:	3001      	adds	r0, #1
 8017d28:	f43f af19 	beq.w	8017b5e <_printf_float+0xc2>
 8017d2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017d30:	4313      	orrs	r3, r2
 8017d32:	d102      	bne.n	8017d3a <_printf_float+0x29e>
 8017d34:	6823      	ldr	r3, [r4, #0]
 8017d36:	07d9      	lsls	r1, r3, #31
 8017d38:	d5d8      	bpl.n	8017cec <_printf_float+0x250>
 8017d3a:	ee18 3a10 	vmov	r3, s16
 8017d3e:	4652      	mov	r2, sl
 8017d40:	4631      	mov	r1, r6
 8017d42:	4628      	mov	r0, r5
 8017d44:	47b8      	blx	r7
 8017d46:	3001      	adds	r0, #1
 8017d48:	f43f af09 	beq.w	8017b5e <_printf_float+0xc2>
 8017d4c:	f04f 0900 	mov.w	r9, #0
 8017d50:	f104 0a1a 	add.w	sl, r4, #26
 8017d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d56:	425b      	negs	r3, r3
 8017d58:	454b      	cmp	r3, r9
 8017d5a:	dc01      	bgt.n	8017d60 <_printf_float+0x2c4>
 8017d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d5e:	e792      	b.n	8017c86 <_printf_float+0x1ea>
 8017d60:	2301      	movs	r3, #1
 8017d62:	4652      	mov	r2, sl
 8017d64:	4631      	mov	r1, r6
 8017d66:	4628      	mov	r0, r5
 8017d68:	47b8      	blx	r7
 8017d6a:	3001      	adds	r0, #1
 8017d6c:	f43f aef7 	beq.w	8017b5e <_printf_float+0xc2>
 8017d70:	f109 0901 	add.w	r9, r9, #1
 8017d74:	e7ee      	b.n	8017d54 <_printf_float+0x2b8>
 8017d76:	bf00      	nop
 8017d78:	7fefffff 	.word	0x7fefffff
 8017d7c:	0801c6b0 	.word	0x0801c6b0
 8017d80:	0801c6b4 	.word	0x0801c6b4
 8017d84:	0801c6bc 	.word	0x0801c6bc
 8017d88:	0801c6b8 	.word	0x0801c6b8
 8017d8c:	0801c6c0 	.word	0x0801c6c0
 8017d90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d92:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017d94:	429a      	cmp	r2, r3
 8017d96:	bfa8      	it	ge
 8017d98:	461a      	movge	r2, r3
 8017d9a:	2a00      	cmp	r2, #0
 8017d9c:	4691      	mov	r9, r2
 8017d9e:	dc37      	bgt.n	8017e10 <_printf_float+0x374>
 8017da0:	f04f 0b00 	mov.w	fp, #0
 8017da4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017da8:	f104 021a 	add.w	r2, r4, #26
 8017dac:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017dae:	9305      	str	r3, [sp, #20]
 8017db0:	eba3 0309 	sub.w	r3, r3, r9
 8017db4:	455b      	cmp	r3, fp
 8017db6:	dc33      	bgt.n	8017e20 <_printf_float+0x384>
 8017db8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017dbc:	429a      	cmp	r2, r3
 8017dbe:	db3b      	blt.n	8017e38 <_printf_float+0x39c>
 8017dc0:	6823      	ldr	r3, [r4, #0]
 8017dc2:	07da      	lsls	r2, r3, #31
 8017dc4:	d438      	bmi.n	8017e38 <_printf_float+0x39c>
 8017dc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017dc8:	9b05      	ldr	r3, [sp, #20]
 8017dca:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dcc:	1ad3      	subs	r3, r2, r3
 8017dce:	eba2 0901 	sub.w	r9, r2, r1
 8017dd2:	4599      	cmp	r9, r3
 8017dd4:	bfa8      	it	ge
 8017dd6:	4699      	movge	r9, r3
 8017dd8:	f1b9 0f00 	cmp.w	r9, #0
 8017ddc:	dc35      	bgt.n	8017e4a <_printf_float+0x3ae>
 8017dde:	f04f 0800 	mov.w	r8, #0
 8017de2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017de6:	f104 0a1a 	add.w	sl, r4, #26
 8017dea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017dee:	1a9b      	subs	r3, r3, r2
 8017df0:	eba3 0309 	sub.w	r3, r3, r9
 8017df4:	4543      	cmp	r3, r8
 8017df6:	f77f af79 	ble.w	8017cec <_printf_float+0x250>
 8017dfa:	2301      	movs	r3, #1
 8017dfc:	4652      	mov	r2, sl
 8017dfe:	4631      	mov	r1, r6
 8017e00:	4628      	mov	r0, r5
 8017e02:	47b8      	blx	r7
 8017e04:	3001      	adds	r0, #1
 8017e06:	f43f aeaa 	beq.w	8017b5e <_printf_float+0xc2>
 8017e0a:	f108 0801 	add.w	r8, r8, #1
 8017e0e:	e7ec      	b.n	8017dea <_printf_float+0x34e>
 8017e10:	4613      	mov	r3, r2
 8017e12:	4631      	mov	r1, r6
 8017e14:	4642      	mov	r2, r8
 8017e16:	4628      	mov	r0, r5
 8017e18:	47b8      	blx	r7
 8017e1a:	3001      	adds	r0, #1
 8017e1c:	d1c0      	bne.n	8017da0 <_printf_float+0x304>
 8017e1e:	e69e      	b.n	8017b5e <_printf_float+0xc2>
 8017e20:	2301      	movs	r3, #1
 8017e22:	4631      	mov	r1, r6
 8017e24:	4628      	mov	r0, r5
 8017e26:	9205      	str	r2, [sp, #20]
 8017e28:	47b8      	blx	r7
 8017e2a:	3001      	adds	r0, #1
 8017e2c:	f43f ae97 	beq.w	8017b5e <_printf_float+0xc2>
 8017e30:	9a05      	ldr	r2, [sp, #20]
 8017e32:	f10b 0b01 	add.w	fp, fp, #1
 8017e36:	e7b9      	b.n	8017dac <_printf_float+0x310>
 8017e38:	ee18 3a10 	vmov	r3, s16
 8017e3c:	4652      	mov	r2, sl
 8017e3e:	4631      	mov	r1, r6
 8017e40:	4628      	mov	r0, r5
 8017e42:	47b8      	blx	r7
 8017e44:	3001      	adds	r0, #1
 8017e46:	d1be      	bne.n	8017dc6 <_printf_float+0x32a>
 8017e48:	e689      	b.n	8017b5e <_printf_float+0xc2>
 8017e4a:	9a05      	ldr	r2, [sp, #20]
 8017e4c:	464b      	mov	r3, r9
 8017e4e:	4442      	add	r2, r8
 8017e50:	4631      	mov	r1, r6
 8017e52:	4628      	mov	r0, r5
 8017e54:	47b8      	blx	r7
 8017e56:	3001      	adds	r0, #1
 8017e58:	d1c1      	bne.n	8017dde <_printf_float+0x342>
 8017e5a:	e680      	b.n	8017b5e <_printf_float+0xc2>
 8017e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017e5e:	2a01      	cmp	r2, #1
 8017e60:	dc01      	bgt.n	8017e66 <_printf_float+0x3ca>
 8017e62:	07db      	lsls	r3, r3, #31
 8017e64:	d538      	bpl.n	8017ed8 <_printf_float+0x43c>
 8017e66:	2301      	movs	r3, #1
 8017e68:	4642      	mov	r2, r8
 8017e6a:	4631      	mov	r1, r6
 8017e6c:	4628      	mov	r0, r5
 8017e6e:	47b8      	blx	r7
 8017e70:	3001      	adds	r0, #1
 8017e72:	f43f ae74 	beq.w	8017b5e <_printf_float+0xc2>
 8017e76:	ee18 3a10 	vmov	r3, s16
 8017e7a:	4652      	mov	r2, sl
 8017e7c:	4631      	mov	r1, r6
 8017e7e:	4628      	mov	r0, r5
 8017e80:	47b8      	blx	r7
 8017e82:	3001      	adds	r0, #1
 8017e84:	f43f ae6b 	beq.w	8017b5e <_printf_float+0xc2>
 8017e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	2300      	movs	r3, #0
 8017e90:	f7e8 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e94:	b9d8      	cbnz	r0, 8017ece <_printf_float+0x432>
 8017e96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e98:	f108 0201 	add.w	r2, r8, #1
 8017e9c:	3b01      	subs	r3, #1
 8017e9e:	4631      	mov	r1, r6
 8017ea0:	4628      	mov	r0, r5
 8017ea2:	47b8      	blx	r7
 8017ea4:	3001      	adds	r0, #1
 8017ea6:	d10e      	bne.n	8017ec6 <_printf_float+0x42a>
 8017ea8:	e659      	b.n	8017b5e <_printf_float+0xc2>
 8017eaa:	2301      	movs	r3, #1
 8017eac:	4652      	mov	r2, sl
 8017eae:	4631      	mov	r1, r6
 8017eb0:	4628      	mov	r0, r5
 8017eb2:	47b8      	blx	r7
 8017eb4:	3001      	adds	r0, #1
 8017eb6:	f43f ae52 	beq.w	8017b5e <_printf_float+0xc2>
 8017eba:	f108 0801 	add.w	r8, r8, #1
 8017ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ec0:	3b01      	subs	r3, #1
 8017ec2:	4543      	cmp	r3, r8
 8017ec4:	dcf1      	bgt.n	8017eaa <_printf_float+0x40e>
 8017ec6:	464b      	mov	r3, r9
 8017ec8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017ecc:	e6dc      	b.n	8017c88 <_printf_float+0x1ec>
 8017ece:	f04f 0800 	mov.w	r8, #0
 8017ed2:	f104 0a1a 	add.w	sl, r4, #26
 8017ed6:	e7f2      	b.n	8017ebe <_printf_float+0x422>
 8017ed8:	2301      	movs	r3, #1
 8017eda:	4642      	mov	r2, r8
 8017edc:	e7df      	b.n	8017e9e <_printf_float+0x402>
 8017ede:	2301      	movs	r3, #1
 8017ee0:	464a      	mov	r2, r9
 8017ee2:	4631      	mov	r1, r6
 8017ee4:	4628      	mov	r0, r5
 8017ee6:	47b8      	blx	r7
 8017ee8:	3001      	adds	r0, #1
 8017eea:	f43f ae38 	beq.w	8017b5e <_printf_float+0xc2>
 8017eee:	f108 0801 	add.w	r8, r8, #1
 8017ef2:	68e3      	ldr	r3, [r4, #12]
 8017ef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017ef6:	1a5b      	subs	r3, r3, r1
 8017ef8:	4543      	cmp	r3, r8
 8017efa:	dcf0      	bgt.n	8017ede <_printf_float+0x442>
 8017efc:	e6fa      	b.n	8017cf4 <_printf_float+0x258>
 8017efe:	f04f 0800 	mov.w	r8, #0
 8017f02:	f104 0919 	add.w	r9, r4, #25
 8017f06:	e7f4      	b.n	8017ef2 <_printf_float+0x456>

08017f08 <_printf_common>:
 8017f08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f0c:	4616      	mov	r6, r2
 8017f0e:	4699      	mov	r9, r3
 8017f10:	688a      	ldr	r2, [r1, #8]
 8017f12:	690b      	ldr	r3, [r1, #16]
 8017f14:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017f18:	4293      	cmp	r3, r2
 8017f1a:	bfb8      	it	lt
 8017f1c:	4613      	movlt	r3, r2
 8017f1e:	6033      	str	r3, [r6, #0]
 8017f20:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017f24:	4607      	mov	r7, r0
 8017f26:	460c      	mov	r4, r1
 8017f28:	b10a      	cbz	r2, 8017f2e <_printf_common+0x26>
 8017f2a:	3301      	adds	r3, #1
 8017f2c:	6033      	str	r3, [r6, #0]
 8017f2e:	6823      	ldr	r3, [r4, #0]
 8017f30:	0699      	lsls	r1, r3, #26
 8017f32:	bf42      	ittt	mi
 8017f34:	6833      	ldrmi	r3, [r6, #0]
 8017f36:	3302      	addmi	r3, #2
 8017f38:	6033      	strmi	r3, [r6, #0]
 8017f3a:	6825      	ldr	r5, [r4, #0]
 8017f3c:	f015 0506 	ands.w	r5, r5, #6
 8017f40:	d106      	bne.n	8017f50 <_printf_common+0x48>
 8017f42:	f104 0a19 	add.w	sl, r4, #25
 8017f46:	68e3      	ldr	r3, [r4, #12]
 8017f48:	6832      	ldr	r2, [r6, #0]
 8017f4a:	1a9b      	subs	r3, r3, r2
 8017f4c:	42ab      	cmp	r3, r5
 8017f4e:	dc26      	bgt.n	8017f9e <_printf_common+0x96>
 8017f50:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017f54:	1e13      	subs	r3, r2, #0
 8017f56:	6822      	ldr	r2, [r4, #0]
 8017f58:	bf18      	it	ne
 8017f5a:	2301      	movne	r3, #1
 8017f5c:	0692      	lsls	r2, r2, #26
 8017f5e:	d42b      	bmi.n	8017fb8 <_printf_common+0xb0>
 8017f60:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017f64:	4649      	mov	r1, r9
 8017f66:	4638      	mov	r0, r7
 8017f68:	47c0      	blx	r8
 8017f6a:	3001      	adds	r0, #1
 8017f6c:	d01e      	beq.n	8017fac <_printf_common+0xa4>
 8017f6e:	6823      	ldr	r3, [r4, #0]
 8017f70:	68e5      	ldr	r5, [r4, #12]
 8017f72:	6832      	ldr	r2, [r6, #0]
 8017f74:	f003 0306 	and.w	r3, r3, #6
 8017f78:	2b04      	cmp	r3, #4
 8017f7a:	bf08      	it	eq
 8017f7c:	1aad      	subeq	r5, r5, r2
 8017f7e:	68a3      	ldr	r3, [r4, #8]
 8017f80:	6922      	ldr	r2, [r4, #16]
 8017f82:	bf0c      	ite	eq
 8017f84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017f88:	2500      	movne	r5, #0
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	bfc4      	itt	gt
 8017f8e:	1a9b      	subgt	r3, r3, r2
 8017f90:	18ed      	addgt	r5, r5, r3
 8017f92:	2600      	movs	r6, #0
 8017f94:	341a      	adds	r4, #26
 8017f96:	42b5      	cmp	r5, r6
 8017f98:	d11a      	bne.n	8017fd0 <_printf_common+0xc8>
 8017f9a:	2000      	movs	r0, #0
 8017f9c:	e008      	b.n	8017fb0 <_printf_common+0xa8>
 8017f9e:	2301      	movs	r3, #1
 8017fa0:	4652      	mov	r2, sl
 8017fa2:	4649      	mov	r1, r9
 8017fa4:	4638      	mov	r0, r7
 8017fa6:	47c0      	blx	r8
 8017fa8:	3001      	adds	r0, #1
 8017faa:	d103      	bne.n	8017fb4 <_printf_common+0xac>
 8017fac:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017fb4:	3501      	adds	r5, #1
 8017fb6:	e7c6      	b.n	8017f46 <_printf_common+0x3e>
 8017fb8:	18e1      	adds	r1, r4, r3
 8017fba:	1c5a      	adds	r2, r3, #1
 8017fbc:	2030      	movs	r0, #48	; 0x30
 8017fbe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017fc2:	4422      	add	r2, r4
 8017fc4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017fc8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017fcc:	3302      	adds	r3, #2
 8017fce:	e7c7      	b.n	8017f60 <_printf_common+0x58>
 8017fd0:	2301      	movs	r3, #1
 8017fd2:	4622      	mov	r2, r4
 8017fd4:	4649      	mov	r1, r9
 8017fd6:	4638      	mov	r0, r7
 8017fd8:	47c0      	blx	r8
 8017fda:	3001      	adds	r0, #1
 8017fdc:	d0e6      	beq.n	8017fac <_printf_common+0xa4>
 8017fde:	3601      	adds	r6, #1
 8017fe0:	e7d9      	b.n	8017f96 <_printf_common+0x8e>
	...

08017fe4 <_printf_i>:
 8017fe4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017fe8:	460c      	mov	r4, r1
 8017fea:	4691      	mov	r9, r2
 8017fec:	7e27      	ldrb	r7, [r4, #24]
 8017fee:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ff0:	2f78      	cmp	r7, #120	; 0x78
 8017ff2:	4680      	mov	r8, r0
 8017ff4:	469a      	mov	sl, r3
 8017ff6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017ffa:	d807      	bhi.n	801800c <_printf_i+0x28>
 8017ffc:	2f62      	cmp	r7, #98	; 0x62
 8017ffe:	d80a      	bhi.n	8018016 <_printf_i+0x32>
 8018000:	2f00      	cmp	r7, #0
 8018002:	f000 80d8 	beq.w	80181b6 <_printf_i+0x1d2>
 8018006:	2f58      	cmp	r7, #88	; 0x58
 8018008:	f000 80a3 	beq.w	8018152 <_printf_i+0x16e>
 801800c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018010:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018014:	e03a      	b.n	801808c <_printf_i+0xa8>
 8018016:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801801a:	2b15      	cmp	r3, #21
 801801c:	d8f6      	bhi.n	801800c <_printf_i+0x28>
 801801e:	a001      	add	r0, pc, #4	; (adr r0, 8018024 <_printf_i+0x40>)
 8018020:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018024:	0801807d 	.word	0x0801807d
 8018028:	08018091 	.word	0x08018091
 801802c:	0801800d 	.word	0x0801800d
 8018030:	0801800d 	.word	0x0801800d
 8018034:	0801800d 	.word	0x0801800d
 8018038:	0801800d 	.word	0x0801800d
 801803c:	08018091 	.word	0x08018091
 8018040:	0801800d 	.word	0x0801800d
 8018044:	0801800d 	.word	0x0801800d
 8018048:	0801800d 	.word	0x0801800d
 801804c:	0801800d 	.word	0x0801800d
 8018050:	0801819d 	.word	0x0801819d
 8018054:	080180c1 	.word	0x080180c1
 8018058:	0801817f 	.word	0x0801817f
 801805c:	0801800d 	.word	0x0801800d
 8018060:	0801800d 	.word	0x0801800d
 8018064:	080181bf 	.word	0x080181bf
 8018068:	0801800d 	.word	0x0801800d
 801806c:	080180c1 	.word	0x080180c1
 8018070:	0801800d 	.word	0x0801800d
 8018074:	0801800d 	.word	0x0801800d
 8018078:	08018187 	.word	0x08018187
 801807c:	680b      	ldr	r3, [r1, #0]
 801807e:	1d1a      	adds	r2, r3, #4
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	600a      	str	r2, [r1, #0]
 8018084:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018088:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801808c:	2301      	movs	r3, #1
 801808e:	e0a3      	b.n	80181d8 <_printf_i+0x1f4>
 8018090:	6825      	ldr	r5, [r4, #0]
 8018092:	6808      	ldr	r0, [r1, #0]
 8018094:	062e      	lsls	r6, r5, #24
 8018096:	f100 0304 	add.w	r3, r0, #4
 801809a:	d50a      	bpl.n	80180b2 <_printf_i+0xce>
 801809c:	6805      	ldr	r5, [r0, #0]
 801809e:	600b      	str	r3, [r1, #0]
 80180a0:	2d00      	cmp	r5, #0
 80180a2:	da03      	bge.n	80180ac <_printf_i+0xc8>
 80180a4:	232d      	movs	r3, #45	; 0x2d
 80180a6:	426d      	negs	r5, r5
 80180a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80180ac:	485e      	ldr	r0, [pc, #376]	; (8018228 <_printf_i+0x244>)
 80180ae:	230a      	movs	r3, #10
 80180b0:	e019      	b.n	80180e6 <_printf_i+0x102>
 80180b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80180b6:	6805      	ldr	r5, [r0, #0]
 80180b8:	600b      	str	r3, [r1, #0]
 80180ba:	bf18      	it	ne
 80180bc:	b22d      	sxthne	r5, r5
 80180be:	e7ef      	b.n	80180a0 <_printf_i+0xbc>
 80180c0:	680b      	ldr	r3, [r1, #0]
 80180c2:	6825      	ldr	r5, [r4, #0]
 80180c4:	1d18      	adds	r0, r3, #4
 80180c6:	6008      	str	r0, [r1, #0]
 80180c8:	0628      	lsls	r0, r5, #24
 80180ca:	d501      	bpl.n	80180d0 <_printf_i+0xec>
 80180cc:	681d      	ldr	r5, [r3, #0]
 80180ce:	e002      	b.n	80180d6 <_printf_i+0xf2>
 80180d0:	0669      	lsls	r1, r5, #25
 80180d2:	d5fb      	bpl.n	80180cc <_printf_i+0xe8>
 80180d4:	881d      	ldrh	r5, [r3, #0]
 80180d6:	4854      	ldr	r0, [pc, #336]	; (8018228 <_printf_i+0x244>)
 80180d8:	2f6f      	cmp	r7, #111	; 0x6f
 80180da:	bf0c      	ite	eq
 80180dc:	2308      	moveq	r3, #8
 80180de:	230a      	movne	r3, #10
 80180e0:	2100      	movs	r1, #0
 80180e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80180e6:	6866      	ldr	r6, [r4, #4]
 80180e8:	60a6      	str	r6, [r4, #8]
 80180ea:	2e00      	cmp	r6, #0
 80180ec:	bfa2      	ittt	ge
 80180ee:	6821      	ldrge	r1, [r4, #0]
 80180f0:	f021 0104 	bicge.w	r1, r1, #4
 80180f4:	6021      	strge	r1, [r4, #0]
 80180f6:	b90d      	cbnz	r5, 80180fc <_printf_i+0x118>
 80180f8:	2e00      	cmp	r6, #0
 80180fa:	d04d      	beq.n	8018198 <_printf_i+0x1b4>
 80180fc:	4616      	mov	r6, r2
 80180fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8018102:	fb03 5711 	mls	r7, r3, r1, r5
 8018106:	5dc7      	ldrb	r7, [r0, r7]
 8018108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801810c:	462f      	mov	r7, r5
 801810e:	42bb      	cmp	r3, r7
 8018110:	460d      	mov	r5, r1
 8018112:	d9f4      	bls.n	80180fe <_printf_i+0x11a>
 8018114:	2b08      	cmp	r3, #8
 8018116:	d10b      	bne.n	8018130 <_printf_i+0x14c>
 8018118:	6823      	ldr	r3, [r4, #0]
 801811a:	07df      	lsls	r7, r3, #31
 801811c:	d508      	bpl.n	8018130 <_printf_i+0x14c>
 801811e:	6923      	ldr	r3, [r4, #16]
 8018120:	6861      	ldr	r1, [r4, #4]
 8018122:	4299      	cmp	r1, r3
 8018124:	bfde      	ittt	le
 8018126:	2330      	movle	r3, #48	; 0x30
 8018128:	f806 3c01 	strble.w	r3, [r6, #-1]
 801812c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8018130:	1b92      	subs	r2, r2, r6
 8018132:	6122      	str	r2, [r4, #16]
 8018134:	f8cd a000 	str.w	sl, [sp]
 8018138:	464b      	mov	r3, r9
 801813a:	aa03      	add	r2, sp, #12
 801813c:	4621      	mov	r1, r4
 801813e:	4640      	mov	r0, r8
 8018140:	f7ff fee2 	bl	8017f08 <_printf_common>
 8018144:	3001      	adds	r0, #1
 8018146:	d14c      	bne.n	80181e2 <_printf_i+0x1fe>
 8018148:	f04f 30ff 	mov.w	r0, #4294967295
 801814c:	b004      	add	sp, #16
 801814e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018152:	4835      	ldr	r0, [pc, #212]	; (8018228 <_printf_i+0x244>)
 8018154:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018158:	6823      	ldr	r3, [r4, #0]
 801815a:	680e      	ldr	r6, [r1, #0]
 801815c:	061f      	lsls	r7, r3, #24
 801815e:	f856 5b04 	ldr.w	r5, [r6], #4
 8018162:	600e      	str	r6, [r1, #0]
 8018164:	d514      	bpl.n	8018190 <_printf_i+0x1ac>
 8018166:	07d9      	lsls	r1, r3, #31
 8018168:	bf44      	itt	mi
 801816a:	f043 0320 	orrmi.w	r3, r3, #32
 801816e:	6023      	strmi	r3, [r4, #0]
 8018170:	b91d      	cbnz	r5, 801817a <_printf_i+0x196>
 8018172:	6823      	ldr	r3, [r4, #0]
 8018174:	f023 0320 	bic.w	r3, r3, #32
 8018178:	6023      	str	r3, [r4, #0]
 801817a:	2310      	movs	r3, #16
 801817c:	e7b0      	b.n	80180e0 <_printf_i+0xfc>
 801817e:	6823      	ldr	r3, [r4, #0]
 8018180:	f043 0320 	orr.w	r3, r3, #32
 8018184:	6023      	str	r3, [r4, #0]
 8018186:	2378      	movs	r3, #120	; 0x78
 8018188:	4828      	ldr	r0, [pc, #160]	; (801822c <_printf_i+0x248>)
 801818a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801818e:	e7e3      	b.n	8018158 <_printf_i+0x174>
 8018190:	065e      	lsls	r6, r3, #25
 8018192:	bf48      	it	mi
 8018194:	b2ad      	uxthmi	r5, r5
 8018196:	e7e6      	b.n	8018166 <_printf_i+0x182>
 8018198:	4616      	mov	r6, r2
 801819a:	e7bb      	b.n	8018114 <_printf_i+0x130>
 801819c:	680b      	ldr	r3, [r1, #0]
 801819e:	6826      	ldr	r6, [r4, #0]
 80181a0:	6960      	ldr	r0, [r4, #20]
 80181a2:	1d1d      	adds	r5, r3, #4
 80181a4:	600d      	str	r5, [r1, #0]
 80181a6:	0635      	lsls	r5, r6, #24
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	d501      	bpl.n	80181b0 <_printf_i+0x1cc>
 80181ac:	6018      	str	r0, [r3, #0]
 80181ae:	e002      	b.n	80181b6 <_printf_i+0x1d2>
 80181b0:	0671      	lsls	r1, r6, #25
 80181b2:	d5fb      	bpl.n	80181ac <_printf_i+0x1c8>
 80181b4:	8018      	strh	r0, [r3, #0]
 80181b6:	2300      	movs	r3, #0
 80181b8:	6123      	str	r3, [r4, #16]
 80181ba:	4616      	mov	r6, r2
 80181bc:	e7ba      	b.n	8018134 <_printf_i+0x150>
 80181be:	680b      	ldr	r3, [r1, #0]
 80181c0:	1d1a      	adds	r2, r3, #4
 80181c2:	600a      	str	r2, [r1, #0]
 80181c4:	681e      	ldr	r6, [r3, #0]
 80181c6:	6862      	ldr	r2, [r4, #4]
 80181c8:	2100      	movs	r1, #0
 80181ca:	4630      	mov	r0, r6
 80181cc:	f7e8 f808 	bl	80001e0 <memchr>
 80181d0:	b108      	cbz	r0, 80181d6 <_printf_i+0x1f2>
 80181d2:	1b80      	subs	r0, r0, r6
 80181d4:	6060      	str	r0, [r4, #4]
 80181d6:	6863      	ldr	r3, [r4, #4]
 80181d8:	6123      	str	r3, [r4, #16]
 80181da:	2300      	movs	r3, #0
 80181dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181e0:	e7a8      	b.n	8018134 <_printf_i+0x150>
 80181e2:	6923      	ldr	r3, [r4, #16]
 80181e4:	4632      	mov	r2, r6
 80181e6:	4649      	mov	r1, r9
 80181e8:	4640      	mov	r0, r8
 80181ea:	47d0      	blx	sl
 80181ec:	3001      	adds	r0, #1
 80181ee:	d0ab      	beq.n	8018148 <_printf_i+0x164>
 80181f0:	6823      	ldr	r3, [r4, #0]
 80181f2:	079b      	lsls	r3, r3, #30
 80181f4:	d413      	bmi.n	801821e <_printf_i+0x23a>
 80181f6:	68e0      	ldr	r0, [r4, #12]
 80181f8:	9b03      	ldr	r3, [sp, #12]
 80181fa:	4298      	cmp	r0, r3
 80181fc:	bfb8      	it	lt
 80181fe:	4618      	movlt	r0, r3
 8018200:	e7a4      	b.n	801814c <_printf_i+0x168>
 8018202:	2301      	movs	r3, #1
 8018204:	4632      	mov	r2, r6
 8018206:	4649      	mov	r1, r9
 8018208:	4640      	mov	r0, r8
 801820a:	47d0      	blx	sl
 801820c:	3001      	adds	r0, #1
 801820e:	d09b      	beq.n	8018148 <_printf_i+0x164>
 8018210:	3501      	adds	r5, #1
 8018212:	68e3      	ldr	r3, [r4, #12]
 8018214:	9903      	ldr	r1, [sp, #12]
 8018216:	1a5b      	subs	r3, r3, r1
 8018218:	42ab      	cmp	r3, r5
 801821a:	dcf2      	bgt.n	8018202 <_printf_i+0x21e>
 801821c:	e7eb      	b.n	80181f6 <_printf_i+0x212>
 801821e:	2500      	movs	r5, #0
 8018220:	f104 0619 	add.w	r6, r4, #25
 8018224:	e7f5      	b.n	8018212 <_printf_i+0x22e>
 8018226:	bf00      	nop
 8018228:	0801c6c2 	.word	0x0801c6c2
 801822c:	0801c6d3 	.word	0x0801c6d3

08018230 <srand>:
 8018230:	b538      	push	{r3, r4, r5, lr}
 8018232:	4b10      	ldr	r3, [pc, #64]	; (8018274 <srand+0x44>)
 8018234:	681d      	ldr	r5, [r3, #0]
 8018236:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018238:	4604      	mov	r4, r0
 801823a:	b9b3      	cbnz	r3, 801826a <srand+0x3a>
 801823c:	2018      	movs	r0, #24
 801823e:	f001 f927 	bl	8019490 <malloc>
 8018242:	4602      	mov	r2, r0
 8018244:	63a8      	str	r0, [r5, #56]	; 0x38
 8018246:	b920      	cbnz	r0, 8018252 <srand+0x22>
 8018248:	4b0b      	ldr	r3, [pc, #44]	; (8018278 <srand+0x48>)
 801824a:	480c      	ldr	r0, [pc, #48]	; (801827c <srand+0x4c>)
 801824c:	2142      	movs	r1, #66	; 0x42
 801824e:	f000 f977 	bl	8018540 <__assert_func>
 8018252:	490b      	ldr	r1, [pc, #44]	; (8018280 <srand+0x50>)
 8018254:	4b0b      	ldr	r3, [pc, #44]	; (8018284 <srand+0x54>)
 8018256:	e9c0 1300 	strd	r1, r3, [r0]
 801825a:	4b0b      	ldr	r3, [pc, #44]	; (8018288 <srand+0x58>)
 801825c:	6083      	str	r3, [r0, #8]
 801825e:	230b      	movs	r3, #11
 8018260:	8183      	strh	r3, [r0, #12]
 8018262:	2100      	movs	r1, #0
 8018264:	2001      	movs	r0, #1
 8018266:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801826a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 801826c:	2200      	movs	r2, #0
 801826e:	611c      	str	r4, [r3, #16]
 8018270:	615a      	str	r2, [r3, #20]
 8018272:	bd38      	pop	{r3, r4, r5, pc}
 8018274:	200008c0 	.word	0x200008c0
 8018278:	0801c6e4 	.word	0x0801c6e4
 801827c:	0801c6fb 	.word	0x0801c6fb
 8018280:	abcd330e 	.word	0xabcd330e
 8018284:	e66d1234 	.word	0xe66d1234
 8018288:	0005deec 	.word	0x0005deec

0801828c <rand>:
 801828c:	4b17      	ldr	r3, [pc, #92]	; (80182ec <rand+0x60>)
 801828e:	b510      	push	{r4, lr}
 8018290:	681c      	ldr	r4, [r3, #0]
 8018292:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018294:	b9b3      	cbnz	r3, 80182c4 <rand+0x38>
 8018296:	2018      	movs	r0, #24
 8018298:	f001 f8fa 	bl	8019490 <malloc>
 801829c:	63a0      	str	r0, [r4, #56]	; 0x38
 801829e:	b928      	cbnz	r0, 80182ac <rand+0x20>
 80182a0:	4602      	mov	r2, r0
 80182a2:	4b13      	ldr	r3, [pc, #76]	; (80182f0 <rand+0x64>)
 80182a4:	4813      	ldr	r0, [pc, #76]	; (80182f4 <rand+0x68>)
 80182a6:	214e      	movs	r1, #78	; 0x4e
 80182a8:	f000 f94a 	bl	8018540 <__assert_func>
 80182ac:	4a12      	ldr	r2, [pc, #72]	; (80182f8 <rand+0x6c>)
 80182ae:	4b13      	ldr	r3, [pc, #76]	; (80182fc <rand+0x70>)
 80182b0:	e9c0 2300 	strd	r2, r3, [r0]
 80182b4:	4b12      	ldr	r3, [pc, #72]	; (8018300 <rand+0x74>)
 80182b6:	6083      	str	r3, [r0, #8]
 80182b8:	230b      	movs	r3, #11
 80182ba:	8183      	strh	r3, [r0, #12]
 80182bc:	2201      	movs	r2, #1
 80182be:	2300      	movs	r3, #0
 80182c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80182c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80182c6:	480f      	ldr	r0, [pc, #60]	; (8018304 <rand+0x78>)
 80182c8:	690a      	ldr	r2, [r1, #16]
 80182ca:	694b      	ldr	r3, [r1, #20]
 80182cc:	4c0e      	ldr	r4, [pc, #56]	; (8018308 <rand+0x7c>)
 80182ce:	4350      	muls	r0, r2
 80182d0:	fb04 0003 	mla	r0, r4, r3, r0
 80182d4:	fba2 3404 	umull	r3, r4, r2, r4
 80182d8:	1c5a      	adds	r2, r3, #1
 80182da:	4404      	add	r4, r0
 80182dc:	f144 0000 	adc.w	r0, r4, #0
 80182e0:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80182e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80182e8:	bd10      	pop	{r4, pc}
 80182ea:	bf00      	nop
 80182ec:	200008c0 	.word	0x200008c0
 80182f0:	0801c6e4 	.word	0x0801c6e4
 80182f4:	0801c6fb 	.word	0x0801c6fb
 80182f8:	abcd330e 	.word	0xabcd330e
 80182fc:	e66d1234 	.word	0xe66d1234
 8018300:	0005deec 	.word	0x0005deec
 8018304:	5851f42d 	.word	0x5851f42d
 8018308:	4c957f2d 	.word	0x4c957f2d

0801830c <siprintf>:
 801830c:	b40e      	push	{r1, r2, r3}
 801830e:	b500      	push	{lr}
 8018310:	b09c      	sub	sp, #112	; 0x70
 8018312:	ab1d      	add	r3, sp, #116	; 0x74
 8018314:	9002      	str	r0, [sp, #8]
 8018316:	9006      	str	r0, [sp, #24]
 8018318:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801831c:	4809      	ldr	r0, [pc, #36]	; (8018344 <siprintf+0x38>)
 801831e:	9107      	str	r1, [sp, #28]
 8018320:	9104      	str	r1, [sp, #16]
 8018322:	4909      	ldr	r1, [pc, #36]	; (8018348 <siprintf+0x3c>)
 8018324:	f853 2b04 	ldr.w	r2, [r3], #4
 8018328:	9105      	str	r1, [sp, #20]
 801832a:	6800      	ldr	r0, [r0, #0]
 801832c:	9301      	str	r3, [sp, #4]
 801832e:	a902      	add	r1, sp, #8
 8018330:	f001 fd4a 	bl	8019dc8 <_svfiprintf_r>
 8018334:	9b02      	ldr	r3, [sp, #8]
 8018336:	2200      	movs	r2, #0
 8018338:	701a      	strb	r2, [r3, #0]
 801833a:	b01c      	add	sp, #112	; 0x70
 801833c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018340:	b003      	add	sp, #12
 8018342:	4770      	bx	lr
 8018344:	200008c0 	.word	0x200008c0
 8018348:	ffff0208 	.word	0xffff0208

0801834c <strcat>:
 801834c:	b510      	push	{r4, lr}
 801834e:	4602      	mov	r2, r0
 8018350:	7814      	ldrb	r4, [r2, #0]
 8018352:	4613      	mov	r3, r2
 8018354:	3201      	adds	r2, #1
 8018356:	2c00      	cmp	r4, #0
 8018358:	d1fa      	bne.n	8018350 <strcat+0x4>
 801835a:	3b01      	subs	r3, #1
 801835c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018360:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018364:	2a00      	cmp	r2, #0
 8018366:	d1f9      	bne.n	801835c <strcat+0x10>
 8018368:	bd10      	pop	{r4, pc}
	...

0801836c <strtok>:
 801836c:	4b16      	ldr	r3, [pc, #88]	; (80183c8 <strtok+0x5c>)
 801836e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018370:	681e      	ldr	r6, [r3, #0]
 8018372:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018374:	4605      	mov	r5, r0
 8018376:	b9fc      	cbnz	r4, 80183b8 <strtok+0x4c>
 8018378:	2050      	movs	r0, #80	; 0x50
 801837a:	9101      	str	r1, [sp, #4]
 801837c:	f001 f888 	bl	8019490 <malloc>
 8018380:	9901      	ldr	r1, [sp, #4]
 8018382:	65b0      	str	r0, [r6, #88]	; 0x58
 8018384:	4602      	mov	r2, r0
 8018386:	b920      	cbnz	r0, 8018392 <strtok+0x26>
 8018388:	4b10      	ldr	r3, [pc, #64]	; (80183cc <strtok+0x60>)
 801838a:	4811      	ldr	r0, [pc, #68]	; (80183d0 <strtok+0x64>)
 801838c:	2157      	movs	r1, #87	; 0x57
 801838e:	f000 f8d7 	bl	8018540 <__assert_func>
 8018392:	e9c0 4400 	strd	r4, r4, [r0]
 8018396:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801839a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801839e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80183a2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80183a6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80183aa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80183ae:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80183b2:	6184      	str	r4, [r0, #24]
 80183b4:	7704      	strb	r4, [r0, #28]
 80183b6:	6244      	str	r4, [r0, #36]	; 0x24
 80183b8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80183ba:	2301      	movs	r3, #1
 80183bc:	4628      	mov	r0, r5
 80183be:	b002      	add	sp, #8
 80183c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80183c4:	f000 b806 	b.w	80183d4 <__strtok_r>
 80183c8:	200008c0 	.word	0x200008c0
 80183cc:	0801c6e4 	.word	0x0801c6e4
 80183d0:	0801c75a 	.word	0x0801c75a

080183d4 <__strtok_r>:
 80183d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80183d6:	b908      	cbnz	r0, 80183dc <__strtok_r+0x8>
 80183d8:	6810      	ldr	r0, [r2, #0]
 80183da:	b188      	cbz	r0, 8018400 <__strtok_r+0x2c>
 80183dc:	4604      	mov	r4, r0
 80183de:	4620      	mov	r0, r4
 80183e0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80183e4:	460f      	mov	r7, r1
 80183e6:	f817 6b01 	ldrb.w	r6, [r7], #1
 80183ea:	b91e      	cbnz	r6, 80183f4 <__strtok_r+0x20>
 80183ec:	b965      	cbnz	r5, 8018408 <__strtok_r+0x34>
 80183ee:	6015      	str	r5, [r2, #0]
 80183f0:	4628      	mov	r0, r5
 80183f2:	e005      	b.n	8018400 <__strtok_r+0x2c>
 80183f4:	42b5      	cmp	r5, r6
 80183f6:	d1f6      	bne.n	80183e6 <__strtok_r+0x12>
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	d1f0      	bne.n	80183de <__strtok_r+0xa>
 80183fc:	6014      	str	r4, [r2, #0]
 80183fe:	7003      	strb	r3, [r0, #0]
 8018400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018402:	461c      	mov	r4, r3
 8018404:	e00c      	b.n	8018420 <__strtok_r+0x4c>
 8018406:	b915      	cbnz	r5, 801840e <__strtok_r+0x3a>
 8018408:	f814 3b01 	ldrb.w	r3, [r4], #1
 801840c:	460e      	mov	r6, r1
 801840e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018412:	42ab      	cmp	r3, r5
 8018414:	d1f7      	bne.n	8018406 <__strtok_r+0x32>
 8018416:	2b00      	cmp	r3, #0
 8018418:	d0f3      	beq.n	8018402 <__strtok_r+0x2e>
 801841a:	2300      	movs	r3, #0
 801841c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018420:	6014      	str	r4, [r2, #0]
 8018422:	e7ed      	b.n	8018400 <__strtok_r+0x2c>

08018424 <_strtol_l.isra.0>:
 8018424:	2b01      	cmp	r3, #1
 8018426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801842a:	d001      	beq.n	8018430 <_strtol_l.isra.0+0xc>
 801842c:	2b24      	cmp	r3, #36	; 0x24
 801842e:	d906      	bls.n	801843e <_strtol_l.isra.0+0x1a>
 8018430:	f7ff fa54 	bl	80178dc <__errno>
 8018434:	2316      	movs	r3, #22
 8018436:	6003      	str	r3, [r0, #0]
 8018438:	2000      	movs	r0, #0
 801843a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801843e:	4f3a      	ldr	r7, [pc, #232]	; (8018528 <_strtol_l.isra.0+0x104>)
 8018440:	468e      	mov	lr, r1
 8018442:	4676      	mov	r6, lr
 8018444:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018448:	5de5      	ldrb	r5, [r4, r7]
 801844a:	f015 0508 	ands.w	r5, r5, #8
 801844e:	d1f8      	bne.n	8018442 <_strtol_l.isra.0+0x1e>
 8018450:	2c2d      	cmp	r4, #45	; 0x2d
 8018452:	d134      	bne.n	80184be <_strtol_l.isra.0+0x9a>
 8018454:	f89e 4000 	ldrb.w	r4, [lr]
 8018458:	f04f 0801 	mov.w	r8, #1
 801845c:	f106 0e02 	add.w	lr, r6, #2
 8018460:	2b00      	cmp	r3, #0
 8018462:	d05c      	beq.n	801851e <_strtol_l.isra.0+0xfa>
 8018464:	2b10      	cmp	r3, #16
 8018466:	d10c      	bne.n	8018482 <_strtol_l.isra.0+0x5e>
 8018468:	2c30      	cmp	r4, #48	; 0x30
 801846a:	d10a      	bne.n	8018482 <_strtol_l.isra.0+0x5e>
 801846c:	f89e 4000 	ldrb.w	r4, [lr]
 8018470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018474:	2c58      	cmp	r4, #88	; 0x58
 8018476:	d14d      	bne.n	8018514 <_strtol_l.isra.0+0xf0>
 8018478:	f89e 4001 	ldrb.w	r4, [lr, #1]
 801847c:	2310      	movs	r3, #16
 801847e:	f10e 0e02 	add.w	lr, lr, #2
 8018482:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018486:	f10c 3cff 	add.w	ip, ip, #4294967295
 801848a:	2600      	movs	r6, #0
 801848c:	fbbc f9f3 	udiv	r9, ip, r3
 8018490:	4635      	mov	r5, r6
 8018492:	fb03 ca19 	mls	sl, r3, r9, ip
 8018496:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801849a:	2f09      	cmp	r7, #9
 801849c:	d818      	bhi.n	80184d0 <_strtol_l.isra.0+0xac>
 801849e:	463c      	mov	r4, r7
 80184a0:	42a3      	cmp	r3, r4
 80184a2:	dd24      	ble.n	80184ee <_strtol_l.isra.0+0xca>
 80184a4:	2e00      	cmp	r6, #0
 80184a6:	db1f      	blt.n	80184e8 <_strtol_l.isra.0+0xc4>
 80184a8:	45a9      	cmp	r9, r5
 80184aa:	d31d      	bcc.n	80184e8 <_strtol_l.isra.0+0xc4>
 80184ac:	d101      	bne.n	80184b2 <_strtol_l.isra.0+0x8e>
 80184ae:	45a2      	cmp	sl, r4
 80184b0:	db1a      	blt.n	80184e8 <_strtol_l.isra.0+0xc4>
 80184b2:	fb05 4503 	mla	r5, r5, r3, r4
 80184b6:	2601      	movs	r6, #1
 80184b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80184bc:	e7eb      	b.n	8018496 <_strtol_l.isra.0+0x72>
 80184be:	2c2b      	cmp	r4, #43	; 0x2b
 80184c0:	bf08      	it	eq
 80184c2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80184c6:	46a8      	mov	r8, r5
 80184c8:	bf08      	it	eq
 80184ca:	f106 0e02 	addeq.w	lr, r6, #2
 80184ce:	e7c7      	b.n	8018460 <_strtol_l.isra.0+0x3c>
 80184d0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80184d4:	2f19      	cmp	r7, #25
 80184d6:	d801      	bhi.n	80184dc <_strtol_l.isra.0+0xb8>
 80184d8:	3c37      	subs	r4, #55	; 0x37
 80184da:	e7e1      	b.n	80184a0 <_strtol_l.isra.0+0x7c>
 80184dc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80184e0:	2f19      	cmp	r7, #25
 80184e2:	d804      	bhi.n	80184ee <_strtol_l.isra.0+0xca>
 80184e4:	3c57      	subs	r4, #87	; 0x57
 80184e6:	e7db      	b.n	80184a0 <_strtol_l.isra.0+0x7c>
 80184e8:	f04f 36ff 	mov.w	r6, #4294967295
 80184ec:	e7e4      	b.n	80184b8 <_strtol_l.isra.0+0x94>
 80184ee:	2e00      	cmp	r6, #0
 80184f0:	da05      	bge.n	80184fe <_strtol_l.isra.0+0xda>
 80184f2:	2322      	movs	r3, #34	; 0x22
 80184f4:	6003      	str	r3, [r0, #0]
 80184f6:	4665      	mov	r5, ip
 80184f8:	b942      	cbnz	r2, 801850c <_strtol_l.isra.0+0xe8>
 80184fa:	4628      	mov	r0, r5
 80184fc:	e79d      	b.n	801843a <_strtol_l.isra.0+0x16>
 80184fe:	f1b8 0f00 	cmp.w	r8, #0
 8018502:	d000      	beq.n	8018506 <_strtol_l.isra.0+0xe2>
 8018504:	426d      	negs	r5, r5
 8018506:	2a00      	cmp	r2, #0
 8018508:	d0f7      	beq.n	80184fa <_strtol_l.isra.0+0xd6>
 801850a:	b10e      	cbz	r6, 8018510 <_strtol_l.isra.0+0xec>
 801850c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018510:	6011      	str	r1, [r2, #0]
 8018512:	e7f2      	b.n	80184fa <_strtol_l.isra.0+0xd6>
 8018514:	2430      	movs	r4, #48	; 0x30
 8018516:	2b00      	cmp	r3, #0
 8018518:	d1b3      	bne.n	8018482 <_strtol_l.isra.0+0x5e>
 801851a:	2308      	movs	r3, #8
 801851c:	e7b1      	b.n	8018482 <_strtol_l.isra.0+0x5e>
 801851e:	2c30      	cmp	r4, #48	; 0x30
 8018520:	d0a4      	beq.n	801846c <_strtol_l.isra.0+0x48>
 8018522:	230a      	movs	r3, #10
 8018524:	e7ad      	b.n	8018482 <_strtol_l.isra.0+0x5e>
 8018526:	bf00      	nop
 8018528:	0801c7f8 	.word	0x0801c7f8

0801852c <strtol>:
 801852c:	4613      	mov	r3, r2
 801852e:	460a      	mov	r2, r1
 8018530:	4601      	mov	r1, r0
 8018532:	4802      	ldr	r0, [pc, #8]	; (801853c <strtol+0x10>)
 8018534:	6800      	ldr	r0, [r0, #0]
 8018536:	f7ff bf75 	b.w	8018424 <_strtol_l.isra.0>
 801853a:	bf00      	nop
 801853c:	200008c0 	.word	0x200008c0

08018540 <__assert_func>:
 8018540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018542:	4614      	mov	r4, r2
 8018544:	461a      	mov	r2, r3
 8018546:	4b09      	ldr	r3, [pc, #36]	; (801856c <__assert_func+0x2c>)
 8018548:	681b      	ldr	r3, [r3, #0]
 801854a:	4605      	mov	r5, r0
 801854c:	68d8      	ldr	r0, [r3, #12]
 801854e:	b14c      	cbz	r4, 8018564 <__assert_func+0x24>
 8018550:	4b07      	ldr	r3, [pc, #28]	; (8018570 <__assert_func+0x30>)
 8018552:	9100      	str	r1, [sp, #0]
 8018554:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018558:	4906      	ldr	r1, [pc, #24]	; (8018574 <__assert_func+0x34>)
 801855a:	462b      	mov	r3, r5
 801855c:	f000 ff5e 	bl	801941c <fiprintf>
 8018560:	f001 ffb2 	bl	801a4c8 <abort>
 8018564:	4b04      	ldr	r3, [pc, #16]	; (8018578 <__assert_func+0x38>)
 8018566:	461c      	mov	r4, r3
 8018568:	e7f3      	b.n	8018552 <__assert_func+0x12>
 801856a:	bf00      	nop
 801856c:	200008c0 	.word	0x200008c0
 8018570:	0801c7bb 	.word	0x0801c7bb
 8018574:	0801c7c8 	.word	0x0801c7c8
 8018578:	0801c7f6 	.word	0x0801c7f6

0801857c <quorem>:
 801857c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018580:	6903      	ldr	r3, [r0, #16]
 8018582:	690c      	ldr	r4, [r1, #16]
 8018584:	42a3      	cmp	r3, r4
 8018586:	4607      	mov	r7, r0
 8018588:	f2c0 8081 	blt.w	801868e <quorem+0x112>
 801858c:	3c01      	subs	r4, #1
 801858e:	f101 0814 	add.w	r8, r1, #20
 8018592:	f100 0514 	add.w	r5, r0, #20
 8018596:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801859a:	9301      	str	r3, [sp, #4]
 801859c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80185a0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80185a4:	3301      	adds	r3, #1
 80185a6:	429a      	cmp	r2, r3
 80185a8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80185ac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80185b0:	fbb2 f6f3 	udiv	r6, r2, r3
 80185b4:	d331      	bcc.n	801861a <quorem+0x9e>
 80185b6:	f04f 0e00 	mov.w	lr, #0
 80185ba:	4640      	mov	r0, r8
 80185bc:	46ac      	mov	ip, r5
 80185be:	46f2      	mov	sl, lr
 80185c0:	f850 2b04 	ldr.w	r2, [r0], #4
 80185c4:	b293      	uxth	r3, r2
 80185c6:	fb06 e303 	mla	r3, r6, r3, lr
 80185ca:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	ebaa 0303 	sub.w	r3, sl, r3
 80185d4:	0c12      	lsrs	r2, r2, #16
 80185d6:	f8dc a000 	ldr.w	sl, [ip]
 80185da:	fb06 e202 	mla	r2, r6, r2, lr
 80185de:	fa13 f38a 	uxtah	r3, r3, sl
 80185e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80185e6:	fa1f fa82 	uxth.w	sl, r2
 80185ea:	f8dc 2000 	ldr.w	r2, [ip]
 80185ee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80185f2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80185f6:	b29b      	uxth	r3, r3
 80185f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80185fc:	4581      	cmp	r9, r0
 80185fe:	f84c 3b04 	str.w	r3, [ip], #4
 8018602:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018606:	d2db      	bcs.n	80185c0 <quorem+0x44>
 8018608:	f855 300b 	ldr.w	r3, [r5, fp]
 801860c:	b92b      	cbnz	r3, 801861a <quorem+0x9e>
 801860e:	9b01      	ldr	r3, [sp, #4]
 8018610:	3b04      	subs	r3, #4
 8018612:	429d      	cmp	r5, r3
 8018614:	461a      	mov	r2, r3
 8018616:	d32e      	bcc.n	8018676 <quorem+0xfa>
 8018618:	613c      	str	r4, [r7, #16]
 801861a:	4638      	mov	r0, r7
 801861c:	f001 f9be 	bl	801999c <__mcmp>
 8018620:	2800      	cmp	r0, #0
 8018622:	db24      	blt.n	801866e <quorem+0xf2>
 8018624:	3601      	adds	r6, #1
 8018626:	4628      	mov	r0, r5
 8018628:	f04f 0c00 	mov.w	ip, #0
 801862c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018630:	f8d0 e000 	ldr.w	lr, [r0]
 8018634:	b293      	uxth	r3, r2
 8018636:	ebac 0303 	sub.w	r3, ip, r3
 801863a:	0c12      	lsrs	r2, r2, #16
 801863c:	fa13 f38e 	uxtah	r3, r3, lr
 8018640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018648:	b29b      	uxth	r3, r3
 801864a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801864e:	45c1      	cmp	r9, r8
 8018650:	f840 3b04 	str.w	r3, [r0], #4
 8018654:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018658:	d2e8      	bcs.n	801862c <quorem+0xb0>
 801865a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801865e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018662:	b922      	cbnz	r2, 801866e <quorem+0xf2>
 8018664:	3b04      	subs	r3, #4
 8018666:	429d      	cmp	r5, r3
 8018668:	461a      	mov	r2, r3
 801866a:	d30a      	bcc.n	8018682 <quorem+0x106>
 801866c:	613c      	str	r4, [r7, #16]
 801866e:	4630      	mov	r0, r6
 8018670:	b003      	add	sp, #12
 8018672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018676:	6812      	ldr	r2, [r2, #0]
 8018678:	3b04      	subs	r3, #4
 801867a:	2a00      	cmp	r2, #0
 801867c:	d1cc      	bne.n	8018618 <quorem+0x9c>
 801867e:	3c01      	subs	r4, #1
 8018680:	e7c7      	b.n	8018612 <quorem+0x96>
 8018682:	6812      	ldr	r2, [r2, #0]
 8018684:	3b04      	subs	r3, #4
 8018686:	2a00      	cmp	r2, #0
 8018688:	d1f0      	bne.n	801866c <quorem+0xf0>
 801868a:	3c01      	subs	r4, #1
 801868c:	e7eb      	b.n	8018666 <quorem+0xea>
 801868e:	2000      	movs	r0, #0
 8018690:	e7ee      	b.n	8018670 <quorem+0xf4>
 8018692:	0000      	movs	r0, r0
 8018694:	0000      	movs	r0, r0
	...

08018698 <_dtoa_r>:
 8018698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801869c:	ed2d 8b02 	vpush	{d8}
 80186a0:	ec57 6b10 	vmov	r6, r7, d0
 80186a4:	b095      	sub	sp, #84	; 0x54
 80186a6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80186a8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80186ac:	9105      	str	r1, [sp, #20]
 80186ae:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80186b2:	4604      	mov	r4, r0
 80186b4:	9209      	str	r2, [sp, #36]	; 0x24
 80186b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80186b8:	b975      	cbnz	r5, 80186d8 <_dtoa_r+0x40>
 80186ba:	2010      	movs	r0, #16
 80186bc:	f000 fee8 	bl	8019490 <malloc>
 80186c0:	4602      	mov	r2, r0
 80186c2:	6260      	str	r0, [r4, #36]	; 0x24
 80186c4:	b920      	cbnz	r0, 80186d0 <_dtoa_r+0x38>
 80186c6:	4bb2      	ldr	r3, [pc, #712]	; (8018990 <_dtoa_r+0x2f8>)
 80186c8:	21ea      	movs	r1, #234	; 0xea
 80186ca:	48b2      	ldr	r0, [pc, #712]	; (8018994 <_dtoa_r+0x2fc>)
 80186cc:	f7ff ff38 	bl	8018540 <__assert_func>
 80186d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80186d4:	6005      	str	r5, [r0, #0]
 80186d6:	60c5      	str	r5, [r0, #12]
 80186d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186da:	6819      	ldr	r1, [r3, #0]
 80186dc:	b151      	cbz	r1, 80186f4 <_dtoa_r+0x5c>
 80186de:	685a      	ldr	r2, [r3, #4]
 80186e0:	604a      	str	r2, [r1, #4]
 80186e2:	2301      	movs	r3, #1
 80186e4:	4093      	lsls	r3, r2
 80186e6:	608b      	str	r3, [r1, #8]
 80186e8:	4620      	mov	r0, r4
 80186ea:	f000 ff19 	bl	8019520 <_Bfree>
 80186ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80186f0:	2200      	movs	r2, #0
 80186f2:	601a      	str	r2, [r3, #0]
 80186f4:	1e3b      	subs	r3, r7, #0
 80186f6:	bfb9      	ittee	lt
 80186f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80186fc:	9303      	strlt	r3, [sp, #12]
 80186fe:	2300      	movge	r3, #0
 8018700:	f8c8 3000 	strge.w	r3, [r8]
 8018704:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018708:	4ba3      	ldr	r3, [pc, #652]	; (8018998 <_dtoa_r+0x300>)
 801870a:	bfbc      	itt	lt
 801870c:	2201      	movlt	r2, #1
 801870e:	f8c8 2000 	strlt.w	r2, [r8]
 8018712:	ea33 0309 	bics.w	r3, r3, r9
 8018716:	d11b      	bne.n	8018750 <_dtoa_r+0xb8>
 8018718:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801871a:	f242 730f 	movw	r3, #9999	; 0x270f
 801871e:	6013      	str	r3, [r2, #0]
 8018720:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018724:	4333      	orrs	r3, r6
 8018726:	f000 857a 	beq.w	801921e <_dtoa_r+0xb86>
 801872a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801872c:	b963      	cbnz	r3, 8018748 <_dtoa_r+0xb0>
 801872e:	4b9b      	ldr	r3, [pc, #620]	; (801899c <_dtoa_r+0x304>)
 8018730:	e024      	b.n	801877c <_dtoa_r+0xe4>
 8018732:	4b9b      	ldr	r3, [pc, #620]	; (80189a0 <_dtoa_r+0x308>)
 8018734:	9300      	str	r3, [sp, #0]
 8018736:	3308      	adds	r3, #8
 8018738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801873a:	6013      	str	r3, [r2, #0]
 801873c:	9800      	ldr	r0, [sp, #0]
 801873e:	b015      	add	sp, #84	; 0x54
 8018740:	ecbd 8b02 	vpop	{d8}
 8018744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018748:	4b94      	ldr	r3, [pc, #592]	; (801899c <_dtoa_r+0x304>)
 801874a:	9300      	str	r3, [sp, #0]
 801874c:	3303      	adds	r3, #3
 801874e:	e7f3      	b.n	8018738 <_dtoa_r+0xa0>
 8018750:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018754:	2200      	movs	r2, #0
 8018756:	ec51 0b17 	vmov	r0, r1, d7
 801875a:	2300      	movs	r3, #0
 801875c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018760:	f7e8 f9b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8018764:	4680      	mov	r8, r0
 8018766:	b158      	cbz	r0, 8018780 <_dtoa_r+0xe8>
 8018768:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801876a:	2301      	movs	r3, #1
 801876c:	6013      	str	r3, [r2, #0]
 801876e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018770:	2b00      	cmp	r3, #0
 8018772:	f000 8551 	beq.w	8019218 <_dtoa_r+0xb80>
 8018776:	488b      	ldr	r0, [pc, #556]	; (80189a4 <_dtoa_r+0x30c>)
 8018778:	6018      	str	r0, [r3, #0]
 801877a:	1e43      	subs	r3, r0, #1
 801877c:	9300      	str	r3, [sp, #0]
 801877e:	e7dd      	b.n	801873c <_dtoa_r+0xa4>
 8018780:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018784:	aa12      	add	r2, sp, #72	; 0x48
 8018786:	a913      	add	r1, sp, #76	; 0x4c
 8018788:	4620      	mov	r0, r4
 801878a:	f001 f9ab 	bl	8019ae4 <__d2b>
 801878e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018792:	4683      	mov	fp, r0
 8018794:	2d00      	cmp	r5, #0
 8018796:	d07c      	beq.n	8018892 <_dtoa_r+0x1fa>
 8018798:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801879a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 801879e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80187a2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80187a6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80187aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80187ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80187b2:	4b7d      	ldr	r3, [pc, #500]	; (80189a8 <_dtoa_r+0x310>)
 80187b4:	2200      	movs	r2, #0
 80187b6:	4630      	mov	r0, r6
 80187b8:	4639      	mov	r1, r7
 80187ba:	f7e7 fd65 	bl	8000288 <__aeabi_dsub>
 80187be:	a36e      	add	r3, pc, #440	; (adr r3, 8018978 <_dtoa_r+0x2e0>)
 80187c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187c4:	f7e7 ff18 	bl	80005f8 <__aeabi_dmul>
 80187c8:	a36d      	add	r3, pc, #436	; (adr r3, 8018980 <_dtoa_r+0x2e8>)
 80187ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187ce:	f7e7 fd5d 	bl	800028c <__adddf3>
 80187d2:	4606      	mov	r6, r0
 80187d4:	4628      	mov	r0, r5
 80187d6:	460f      	mov	r7, r1
 80187d8:	f7e7 fea4 	bl	8000524 <__aeabi_i2d>
 80187dc:	a36a      	add	r3, pc, #424	; (adr r3, 8018988 <_dtoa_r+0x2f0>)
 80187de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80187e2:	f7e7 ff09 	bl	80005f8 <__aeabi_dmul>
 80187e6:	4602      	mov	r2, r0
 80187e8:	460b      	mov	r3, r1
 80187ea:	4630      	mov	r0, r6
 80187ec:	4639      	mov	r1, r7
 80187ee:	f7e7 fd4d 	bl	800028c <__adddf3>
 80187f2:	4606      	mov	r6, r0
 80187f4:	460f      	mov	r7, r1
 80187f6:	f7e8 f9af 	bl	8000b58 <__aeabi_d2iz>
 80187fa:	2200      	movs	r2, #0
 80187fc:	4682      	mov	sl, r0
 80187fe:	2300      	movs	r3, #0
 8018800:	4630      	mov	r0, r6
 8018802:	4639      	mov	r1, r7
 8018804:	f7e8 f96a 	bl	8000adc <__aeabi_dcmplt>
 8018808:	b148      	cbz	r0, 801881e <_dtoa_r+0x186>
 801880a:	4650      	mov	r0, sl
 801880c:	f7e7 fe8a 	bl	8000524 <__aeabi_i2d>
 8018810:	4632      	mov	r2, r6
 8018812:	463b      	mov	r3, r7
 8018814:	f7e8 f958 	bl	8000ac8 <__aeabi_dcmpeq>
 8018818:	b908      	cbnz	r0, 801881e <_dtoa_r+0x186>
 801881a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801881e:	f1ba 0f16 	cmp.w	sl, #22
 8018822:	d854      	bhi.n	80188ce <_dtoa_r+0x236>
 8018824:	4b61      	ldr	r3, [pc, #388]	; (80189ac <_dtoa_r+0x314>)
 8018826:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801882a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801882e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018832:	f7e8 f953 	bl	8000adc <__aeabi_dcmplt>
 8018836:	2800      	cmp	r0, #0
 8018838:	d04b      	beq.n	80188d2 <_dtoa_r+0x23a>
 801883a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801883e:	2300      	movs	r3, #0
 8018840:	930e      	str	r3, [sp, #56]	; 0x38
 8018842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018844:	1b5d      	subs	r5, r3, r5
 8018846:	1e6b      	subs	r3, r5, #1
 8018848:	9304      	str	r3, [sp, #16]
 801884a:	bf43      	ittte	mi
 801884c:	2300      	movmi	r3, #0
 801884e:	f1c5 0801 	rsbmi	r8, r5, #1
 8018852:	9304      	strmi	r3, [sp, #16]
 8018854:	f04f 0800 	movpl.w	r8, #0
 8018858:	f1ba 0f00 	cmp.w	sl, #0
 801885c:	db3b      	blt.n	80188d6 <_dtoa_r+0x23e>
 801885e:	9b04      	ldr	r3, [sp, #16]
 8018860:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018864:	4453      	add	r3, sl
 8018866:	9304      	str	r3, [sp, #16]
 8018868:	2300      	movs	r3, #0
 801886a:	9306      	str	r3, [sp, #24]
 801886c:	9b05      	ldr	r3, [sp, #20]
 801886e:	2b09      	cmp	r3, #9
 8018870:	d869      	bhi.n	8018946 <_dtoa_r+0x2ae>
 8018872:	2b05      	cmp	r3, #5
 8018874:	bfc4      	itt	gt
 8018876:	3b04      	subgt	r3, #4
 8018878:	9305      	strgt	r3, [sp, #20]
 801887a:	9b05      	ldr	r3, [sp, #20]
 801887c:	f1a3 0302 	sub.w	r3, r3, #2
 8018880:	bfcc      	ite	gt
 8018882:	2500      	movgt	r5, #0
 8018884:	2501      	movle	r5, #1
 8018886:	2b03      	cmp	r3, #3
 8018888:	d869      	bhi.n	801895e <_dtoa_r+0x2c6>
 801888a:	e8df f003 	tbb	[pc, r3]
 801888e:	4e2c      	.short	0x4e2c
 8018890:	5a4c      	.short	0x5a4c
 8018892:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018896:	441d      	add	r5, r3
 8018898:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801889c:	2b20      	cmp	r3, #32
 801889e:	bfc1      	itttt	gt
 80188a0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80188a4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80188a8:	fa09 f303 	lslgt.w	r3, r9, r3
 80188ac:	fa26 f000 	lsrgt.w	r0, r6, r0
 80188b0:	bfda      	itte	le
 80188b2:	f1c3 0320 	rsble	r3, r3, #32
 80188b6:	fa06 f003 	lslle.w	r0, r6, r3
 80188ba:	4318      	orrgt	r0, r3
 80188bc:	f7e7 fe22 	bl	8000504 <__aeabi_ui2d>
 80188c0:	2301      	movs	r3, #1
 80188c2:	4606      	mov	r6, r0
 80188c4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80188c8:	3d01      	subs	r5, #1
 80188ca:	9310      	str	r3, [sp, #64]	; 0x40
 80188cc:	e771      	b.n	80187b2 <_dtoa_r+0x11a>
 80188ce:	2301      	movs	r3, #1
 80188d0:	e7b6      	b.n	8018840 <_dtoa_r+0x1a8>
 80188d2:	900e      	str	r0, [sp, #56]	; 0x38
 80188d4:	e7b5      	b.n	8018842 <_dtoa_r+0x1aa>
 80188d6:	f1ca 0300 	rsb	r3, sl, #0
 80188da:	9306      	str	r3, [sp, #24]
 80188dc:	2300      	movs	r3, #0
 80188de:	eba8 080a 	sub.w	r8, r8, sl
 80188e2:	930d      	str	r3, [sp, #52]	; 0x34
 80188e4:	e7c2      	b.n	801886c <_dtoa_r+0x1d4>
 80188e6:	2300      	movs	r3, #0
 80188e8:	9308      	str	r3, [sp, #32]
 80188ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	dc39      	bgt.n	8018964 <_dtoa_r+0x2cc>
 80188f0:	f04f 0901 	mov.w	r9, #1
 80188f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80188f8:	464b      	mov	r3, r9
 80188fa:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80188fe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018900:	2200      	movs	r2, #0
 8018902:	6042      	str	r2, [r0, #4]
 8018904:	2204      	movs	r2, #4
 8018906:	f102 0614 	add.w	r6, r2, #20
 801890a:	429e      	cmp	r6, r3
 801890c:	6841      	ldr	r1, [r0, #4]
 801890e:	d92f      	bls.n	8018970 <_dtoa_r+0x2d8>
 8018910:	4620      	mov	r0, r4
 8018912:	f000 fdc5 	bl	80194a0 <_Balloc>
 8018916:	9000      	str	r0, [sp, #0]
 8018918:	2800      	cmp	r0, #0
 801891a:	d14b      	bne.n	80189b4 <_dtoa_r+0x31c>
 801891c:	4b24      	ldr	r3, [pc, #144]	; (80189b0 <_dtoa_r+0x318>)
 801891e:	4602      	mov	r2, r0
 8018920:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018924:	e6d1      	b.n	80186ca <_dtoa_r+0x32>
 8018926:	2301      	movs	r3, #1
 8018928:	e7de      	b.n	80188e8 <_dtoa_r+0x250>
 801892a:	2300      	movs	r3, #0
 801892c:	9308      	str	r3, [sp, #32]
 801892e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018930:	eb0a 0903 	add.w	r9, sl, r3
 8018934:	f109 0301 	add.w	r3, r9, #1
 8018938:	2b01      	cmp	r3, #1
 801893a:	9301      	str	r3, [sp, #4]
 801893c:	bfb8      	it	lt
 801893e:	2301      	movlt	r3, #1
 8018940:	e7dd      	b.n	80188fe <_dtoa_r+0x266>
 8018942:	2301      	movs	r3, #1
 8018944:	e7f2      	b.n	801892c <_dtoa_r+0x294>
 8018946:	2501      	movs	r5, #1
 8018948:	2300      	movs	r3, #0
 801894a:	9305      	str	r3, [sp, #20]
 801894c:	9508      	str	r5, [sp, #32]
 801894e:	f04f 39ff 	mov.w	r9, #4294967295
 8018952:	2200      	movs	r2, #0
 8018954:	f8cd 9004 	str.w	r9, [sp, #4]
 8018958:	2312      	movs	r3, #18
 801895a:	9209      	str	r2, [sp, #36]	; 0x24
 801895c:	e7cf      	b.n	80188fe <_dtoa_r+0x266>
 801895e:	2301      	movs	r3, #1
 8018960:	9308      	str	r3, [sp, #32]
 8018962:	e7f4      	b.n	801894e <_dtoa_r+0x2b6>
 8018964:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018968:	f8cd 9004 	str.w	r9, [sp, #4]
 801896c:	464b      	mov	r3, r9
 801896e:	e7c6      	b.n	80188fe <_dtoa_r+0x266>
 8018970:	3101      	adds	r1, #1
 8018972:	6041      	str	r1, [r0, #4]
 8018974:	0052      	lsls	r2, r2, #1
 8018976:	e7c6      	b.n	8018906 <_dtoa_r+0x26e>
 8018978:	636f4361 	.word	0x636f4361
 801897c:	3fd287a7 	.word	0x3fd287a7
 8018980:	8b60c8b3 	.word	0x8b60c8b3
 8018984:	3fc68a28 	.word	0x3fc68a28
 8018988:	509f79fb 	.word	0x509f79fb
 801898c:	3fd34413 	.word	0x3fd34413
 8018990:	0801c6e4 	.word	0x0801c6e4
 8018994:	0801c905 	.word	0x0801c905
 8018998:	7ff00000 	.word	0x7ff00000
 801899c:	0801c901 	.word	0x0801c901
 80189a0:	0801c8f8 	.word	0x0801c8f8
 80189a4:	0801c6c1 	.word	0x0801c6c1
 80189a8:	3ff80000 	.word	0x3ff80000
 80189ac:	0801ca60 	.word	0x0801ca60
 80189b0:	0801c964 	.word	0x0801c964
 80189b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80189b6:	9a00      	ldr	r2, [sp, #0]
 80189b8:	601a      	str	r2, [r3, #0]
 80189ba:	9b01      	ldr	r3, [sp, #4]
 80189bc:	2b0e      	cmp	r3, #14
 80189be:	f200 80ad 	bhi.w	8018b1c <_dtoa_r+0x484>
 80189c2:	2d00      	cmp	r5, #0
 80189c4:	f000 80aa 	beq.w	8018b1c <_dtoa_r+0x484>
 80189c8:	f1ba 0f00 	cmp.w	sl, #0
 80189cc:	dd36      	ble.n	8018a3c <_dtoa_r+0x3a4>
 80189ce:	4ac3      	ldr	r2, [pc, #780]	; (8018cdc <_dtoa_r+0x644>)
 80189d0:	f00a 030f 	and.w	r3, sl, #15
 80189d4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80189d8:	ed93 7b00 	vldr	d7, [r3]
 80189dc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80189e0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80189e4:	eeb0 8a47 	vmov.f32	s16, s14
 80189e8:	eef0 8a67 	vmov.f32	s17, s15
 80189ec:	d016      	beq.n	8018a1c <_dtoa_r+0x384>
 80189ee:	4bbc      	ldr	r3, [pc, #752]	; (8018ce0 <_dtoa_r+0x648>)
 80189f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80189f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80189f8:	f7e7 ff28 	bl	800084c <__aeabi_ddiv>
 80189fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a00:	f007 070f 	and.w	r7, r7, #15
 8018a04:	2503      	movs	r5, #3
 8018a06:	4eb6      	ldr	r6, [pc, #728]	; (8018ce0 <_dtoa_r+0x648>)
 8018a08:	b957      	cbnz	r7, 8018a20 <_dtoa_r+0x388>
 8018a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018a0e:	ec53 2b18 	vmov	r2, r3, d8
 8018a12:	f7e7 ff1b 	bl	800084c <__aeabi_ddiv>
 8018a16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a1a:	e029      	b.n	8018a70 <_dtoa_r+0x3d8>
 8018a1c:	2502      	movs	r5, #2
 8018a1e:	e7f2      	b.n	8018a06 <_dtoa_r+0x36e>
 8018a20:	07f9      	lsls	r1, r7, #31
 8018a22:	d508      	bpl.n	8018a36 <_dtoa_r+0x39e>
 8018a24:	ec51 0b18 	vmov	r0, r1, d8
 8018a28:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018a2c:	f7e7 fde4 	bl	80005f8 <__aeabi_dmul>
 8018a30:	ec41 0b18 	vmov	d8, r0, r1
 8018a34:	3501      	adds	r5, #1
 8018a36:	107f      	asrs	r7, r7, #1
 8018a38:	3608      	adds	r6, #8
 8018a3a:	e7e5      	b.n	8018a08 <_dtoa_r+0x370>
 8018a3c:	f000 80a6 	beq.w	8018b8c <_dtoa_r+0x4f4>
 8018a40:	f1ca 0600 	rsb	r6, sl, #0
 8018a44:	4ba5      	ldr	r3, [pc, #660]	; (8018cdc <_dtoa_r+0x644>)
 8018a46:	4fa6      	ldr	r7, [pc, #664]	; (8018ce0 <_dtoa_r+0x648>)
 8018a48:	f006 020f 	and.w	r2, r6, #15
 8018a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a58:	f7e7 fdce 	bl	80005f8 <__aeabi_dmul>
 8018a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018a60:	1136      	asrs	r6, r6, #4
 8018a62:	2300      	movs	r3, #0
 8018a64:	2502      	movs	r5, #2
 8018a66:	2e00      	cmp	r6, #0
 8018a68:	f040 8085 	bne.w	8018b76 <_dtoa_r+0x4de>
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d1d2      	bne.n	8018a16 <_dtoa_r+0x37e>
 8018a70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018a72:	2b00      	cmp	r3, #0
 8018a74:	f000 808c 	beq.w	8018b90 <_dtoa_r+0x4f8>
 8018a78:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018a7c:	4b99      	ldr	r3, [pc, #612]	; (8018ce4 <_dtoa_r+0x64c>)
 8018a7e:	2200      	movs	r2, #0
 8018a80:	4630      	mov	r0, r6
 8018a82:	4639      	mov	r1, r7
 8018a84:	f7e8 f82a 	bl	8000adc <__aeabi_dcmplt>
 8018a88:	2800      	cmp	r0, #0
 8018a8a:	f000 8081 	beq.w	8018b90 <_dtoa_r+0x4f8>
 8018a8e:	9b01      	ldr	r3, [sp, #4]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d07d      	beq.n	8018b90 <_dtoa_r+0x4f8>
 8018a94:	f1b9 0f00 	cmp.w	r9, #0
 8018a98:	dd3c      	ble.n	8018b14 <_dtoa_r+0x47c>
 8018a9a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8018a9e:	9307      	str	r3, [sp, #28]
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	4b91      	ldr	r3, [pc, #580]	; (8018ce8 <_dtoa_r+0x650>)
 8018aa4:	4630      	mov	r0, r6
 8018aa6:	4639      	mov	r1, r7
 8018aa8:	f7e7 fda6 	bl	80005f8 <__aeabi_dmul>
 8018aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ab0:	3501      	adds	r5, #1
 8018ab2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018ab6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018aba:	4628      	mov	r0, r5
 8018abc:	f7e7 fd32 	bl	8000524 <__aeabi_i2d>
 8018ac0:	4632      	mov	r2, r6
 8018ac2:	463b      	mov	r3, r7
 8018ac4:	f7e7 fd98 	bl	80005f8 <__aeabi_dmul>
 8018ac8:	4b88      	ldr	r3, [pc, #544]	; (8018cec <_dtoa_r+0x654>)
 8018aca:	2200      	movs	r2, #0
 8018acc:	f7e7 fbde 	bl	800028c <__adddf3>
 8018ad0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018ad4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ad8:	9303      	str	r3, [sp, #12]
 8018ada:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d15c      	bne.n	8018b9a <_dtoa_r+0x502>
 8018ae0:	4b83      	ldr	r3, [pc, #524]	; (8018cf0 <_dtoa_r+0x658>)
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	4630      	mov	r0, r6
 8018ae6:	4639      	mov	r1, r7
 8018ae8:	f7e7 fbce 	bl	8000288 <__aeabi_dsub>
 8018aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018af0:	4606      	mov	r6, r0
 8018af2:	460f      	mov	r7, r1
 8018af4:	f7e8 f810 	bl	8000b18 <__aeabi_dcmpgt>
 8018af8:	2800      	cmp	r0, #0
 8018afa:	f040 8296 	bne.w	801902a <_dtoa_r+0x992>
 8018afe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018b02:	4630      	mov	r0, r6
 8018b04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018b08:	4639      	mov	r1, r7
 8018b0a:	f7e7 ffe7 	bl	8000adc <__aeabi_dcmplt>
 8018b0e:	2800      	cmp	r0, #0
 8018b10:	f040 8288 	bne.w	8019024 <_dtoa_r+0x98c>
 8018b14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018b18:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018b1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	f2c0 8158 	blt.w	8018dd4 <_dtoa_r+0x73c>
 8018b24:	f1ba 0f0e 	cmp.w	sl, #14
 8018b28:	f300 8154 	bgt.w	8018dd4 <_dtoa_r+0x73c>
 8018b2c:	4b6b      	ldr	r3, [pc, #428]	; (8018cdc <_dtoa_r+0x644>)
 8018b2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018b32:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b38:	2b00      	cmp	r3, #0
 8018b3a:	f280 80e3 	bge.w	8018d04 <_dtoa_r+0x66c>
 8018b3e:	9b01      	ldr	r3, [sp, #4]
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	f300 80df 	bgt.w	8018d04 <_dtoa_r+0x66c>
 8018b46:	f040 826d 	bne.w	8019024 <_dtoa_r+0x98c>
 8018b4a:	4b69      	ldr	r3, [pc, #420]	; (8018cf0 <_dtoa_r+0x658>)
 8018b4c:	2200      	movs	r2, #0
 8018b4e:	4640      	mov	r0, r8
 8018b50:	4649      	mov	r1, r9
 8018b52:	f7e7 fd51 	bl	80005f8 <__aeabi_dmul>
 8018b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b5a:	f7e7 ffd3 	bl	8000b04 <__aeabi_dcmpge>
 8018b5e:	9e01      	ldr	r6, [sp, #4]
 8018b60:	4637      	mov	r7, r6
 8018b62:	2800      	cmp	r0, #0
 8018b64:	f040 8243 	bne.w	8018fee <_dtoa_r+0x956>
 8018b68:	9d00      	ldr	r5, [sp, #0]
 8018b6a:	2331      	movs	r3, #49	; 0x31
 8018b6c:	f805 3b01 	strb.w	r3, [r5], #1
 8018b70:	f10a 0a01 	add.w	sl, sl, #1
 8018b74:	e23f      	b.n	8018ff6 <_dtoa_r+0x95e>
 8018b76:	07f2      	lsls	r2, r6, #31
 8018b78:	d505      	bpl.n	8018b86 <_dtoa_r+0x4ee>
 8018b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018b7e:	f7e7 fd3b 	bl	80005f8 <__aeabi_dmul>
 8018b82:	3501      	adds	r5, #1
 8018b84:	2301      	movs	r3, #1
 8018b86:	1076      	asrs	r6, r6, #1
 8018b88:	3708      	adds	r7, #8
 8018b8a:	e76c      	b.n	8018a66 <_dtoa_r+0x3ce>
 8018b8c:	2502      	movs	r5, #2
 8018b8e:	e76f      	b.n	8018a70 <_dtoa_r+0x3d8>
 8018b90:	9b01      	ldr	r3, [sp, #4]
 8018b92:	f8cd a01c 	str.w	sl, [sp, #28]
 8018b96:	930c      	str	r3, [sp, #48]	; 0x30
 8018b98:	e78d      	b.n	8018ab6 <_dtoa_r+0x41e>
 8018b9a:	9900      	ldr	r1, [sp, #0]
 8018b9c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018ba0:	4b4e      	ldr	r3, [pc, #312]	; (8018cdc <_dtoa_r+0x644>)
 8018ba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018ba6:	4401      	add	r1, r0
 8018ba8:	9102      	str	r1, [sp, #8]
 8018baa:	9908      	ldr	r1, [sp, #32]
 8018bac:	eeb0 8a47 	vmov.f32	s16, s14
 8018bb0:	eef0 8a67 	vmov.f32	s17, s15
 8018bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018bb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018bbc:	2900      	cmp	r1, #0
 8018bbe:	d045      	beq.n	8018c4c <_dtoa_r+0x5b4>
 8018bc0:	494c      	ldr	r1, [pc, #304]	; (8018cf4 <_dtoa_r+0x65c>)
 8018bc2:	2000      	movs	r0, #0
 8018bc4:	f7e7 fe42 	bl	800084c <__aeabi_ddiv>
 8018bc8:	ec53 2b18 	vmov	r2, r3, d8
 8018bcc:	f7e7 fb5c 	bl	8000288 <__aeabi_dsub>
 8018bd0:	9d00      	ldr	r5, [sp, #0]
 8018bd2:	ec41 0b18 	vmov	d8, r0, r1
 8018bd6:	4639      	mov	r1, r7
 8018bd8:	4630      	mov	r0, r6
 8018bda:	f7e7 ffbd 	bl	8000b58 <__aeabi_d2iz>
 8018bde:	900c      	str	r0, [sp, #48]	; 0x30
 8018be0:	f7e7 fca0 	bl	8000524 <__aeabi_i2d>
 8018be4:	4602      	mov	r2, r0
 8018be6:	460b      	mov	r3, r1
 8018be8:	4630      	mov	r0, r6
 8018bea:	4639      	mov	r1, r7
 8018bec:	f7e7 fb4c 	bl	8000288 <__aeabi_dsub>
 8018bf0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bf2:	3330      	adds	r3, #48	; 0x30
 8018bf4:	f805 3b01 	strb.w	r3, [r5], #1
 8018bf8:	ec53 2b18 	vmov	r2, r3, d8
 8018bfc:	4606      	mov	r6, r0
 8018bfe:	460f      	mov	r7, r1
 8018c00:	f7e7 ff6c 	bl	8000adc <__aeabi_dcmplt>
 8018c04:	2800      	cmp	r0, #0
 8018c06:	d165      	bne.n	8018cd4 <_dtoa_r+0x63c>
 8018c08:	4632      	mov	r2, r6
 8018c0a:	463b      	mov	r3, r7
 8018c0c:	4935      	ldr	r1, [pc, #212]	; (8018ce4 <_dtoa_r+0x64c>)
 8018c0e:	2000      	movs	r0, #0
 8018c10:	f7e7 fb3a 	bl	8000288 <__aeabi_dsub>
 8018c14:	ec53 2b18 	vmov	r2, r3, d8
 8018c18:	f7e7 ff60 	bl	8000adc <__aeabi_dcmplt>
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	f040 80b9 	bne.w	8018d94 <_dtoa_r+0x6fc>
 8018c22:	9b02      	ldr	r3, [sp, #8]
 8018c24:	429d      	cmp	r5, r3
 8018c26:	f43f af75 	beq.w	8018b14 <_dtoa_r+0x47c>
 8018c2a:	4b2f      	ldr	r3, [pc, #188]	; (8018ce8 <_dtoa_r+0x650>)
 8018c2c:	ec51 0b18 	vmov	r0, r1, d8
 8018c30:	2200      	movs	r2, #0
 8018c32:	f7e7 fce1 	bl	80005f8 <__aeabi_dmul>
 8018c36:	4b2c      	ldr	r3, [pc, #176]	; (8018ce8 <_dtoa_r+0x650>)
 8018c38:	ec41 0b18 	vmov	d8, r0, r1
 8018c3c:	2200      	movs	r2, #0
 8018c3e:	4630      	mov	r0, r6
 8018c40:	4639      	mov	r1, r7
 8018c42:	f7e7 fcd9 	bl	80005f8 <__aeabi_dmul>
 8018c46:	4606      	mov	r6, r0
 8018c48:	460f      	mov	r7, r1
 8018c4a:	e7c4      	b.n	8018bd6 <_dtoa_r+0x53e>
 8018c4c:	ec51 0b17 	vmov	r0, r1, d7
 8018c50:	f7e7 fcd2 	bl	80005f8 <__aeabi_dmul>
 8018c54:	9b02      	ldr	r3, [sp, #8]
 8018c56:	9d00      	ldr	r5, [sp, #0]
 8018c58:	930c      	str	r3, [sp, #48]	; 0x30
 8018c5a:	ec41 0b18 	vmov	d8, r0, r1
 8018c5e:	4639      	mov	r1, r7
 8018c60:	4630      	mov	r0, r6
 8018c62:	f7e7 ff79 	bl	8000b58 <__aeabi_d2iz>
 8018c66:	9011      	str	r0, [sp, #68]	; 0x44
 8018c68:	f7e7 fc5c 	bl	8000524 <__aeabi_i2d>
 8018c6c:	4602      	mov	r2, r0
 8018c6e:	460b      	mov	r3, r1
 8018c70:	4630      	mov	r0, r6
 8018c72:	4639      	mov	r1, r7
 8018c74:	f7e7 fb08 	bl	8000288 <__aeabi_dsub>
 8018c78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018c7a:	3330      	adds	r3, #48	; 0x30
 8018c7c:	f805 3b01 	strb.w	r3, [r5], #1
 8018c80:	9b02      	ldr	r3, [sp, #8]
 8018c82:	429d      	cmp	r5, r3
 8018c84:	4606      	mov	r6, r0
 8018c86:	460f      	mov	r7, r1
 8018c88:	f04f 0200 	mov.w	r2, #0
 8018c8c:	d134      	bne.n	8018cf8 <_dtoa_r+0x660>
 8018c8e:	4b19      	ldr	r3, [pc, #100]	; (8018cf4 <_dtoa_r+0x65c>)
 8018c90:	ec51 0b18 	vmov	r0, r1, d8
 8018c94:	f7e7 fafa 	bl	800028c <__adddf3>
 8018c98:	4602      	mov	r2, r0
 8018c9a:	460b      	mov	r3, r1
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	4639      	mov	r1, r7
 8018ca0:	f7e7 ff3a 	bl	8000b18 <__aeabi_dcmpgt>
 8018ca4:	2800      	cmp	r0, #0
 8018ca6:	d175      	bne.n	8018d94 <_dtoa_r+0x6fc>
 8018ca8:	ec53 2b18 	vmov	r2, r3, d8
 8018cac:	4911      	ldr	r1, [pc, #68]	; (8018cf4 <_dtoa_r+0x65c>)
 8018cae:	2000      	movs	r0, #0
 8018cb0:	f7e7 faea 	bl	8000288 <__aeabi_dsub>
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	4630      	mov	r0, r6
 8018cba:	4639      	mov	r1, r7
 8018cbc:	f7e7 ff0e 	bl	8000adc <__aeabi_dcmplt>
 8018cc0:	2800      	cmp	r0, #0
 8018cc2:	f43f af27 	beq.w	8018b14 <_dtoa_r+0x47c>
 8018cc6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018cc8:	1e6b      	subs	r3, r5, #1
 8018cca:	930c      	str	r3, [sp, #48]	; 0x30
 8018ccc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018cd0:	2b30      	cmp	r3, #48	; 0x30
 8018cd2:	d0f8      	beq.n	8018cc6 <_dtoa_r+0x62e>
 8018cd4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018cd8:	e04a      	b.n	8018d70 <_dtoa_r+0x6d8>
 8018cda:	bf00      	nop
 8018cdc:	0801ca60 	.word	0x0801ca60
 8018ce0:	0801ca38 	.word	0x0801ca38
 8018ce4:	3ff00000 	.word	0x3ff00000
 8018ce8:	40240000 	.word	0x40240000
 8018cec:	401c0000 	.word	0x401c0000
 8018cf0:	40140000 	.word	0x40140000
 8018cf4:	3fe00000 	.word	0x3fe00000
 8018cf8:	4baf      	ldr	r3, [pc, #700]	; (8018fb8 <_dtoa_r+0x920>)
 8018cfa:	f7e7 fc7d 	bl	80005f8 <__aeabi_dmul>
 8018cfe:	4606      	mov	r6, r0
 8018d00:	460f      	mov	r7, r1
 8018d02:	e7ac      	b.n	8018c5e <_dtoa_r+0x5c6>
 8018d04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018d08:	9d00      	ldr	r5, [sp, #0]
 8018d0a:	4642      	mov	r2, r8
 8018d0c:	464b      	mov	r3, r9
 8018d0e:	4630      	mov	r0, r6
 8018d10:	4639      	mov	r1, r7
 8018d12:	f7e7 fd9b 	bl	800084c <__aeabi_ddiv>
 8018d16:	f7e7 ff1f 	bl	8000b58 <__aeabi_d2iz>
 8018d1a:	9002      	str	r0, [sp, #8]
 8018d1c:	f7e7 fc02 	bl	8000524 <__aeabi_i2d>
 8018d20:	4642      	mov	r2, r8
 8018d22:	464b      	mov	r3, r9
 8018d24:	f7e7 fc68 	bl	80005f8 <__aeabi_dmul>
 8018d28:	4602      	mov	r2, r0
 8018d2a:	460b      	mov	r3, r1
 8018d2c:	4630      	mov	r0, r6
 8018d2e:	4639      	mov	r1, r7
 8018d30:	f7e7 faaa 	bl	8000288 <__aeabi_dsub>
 8018d34:	9e02      	ldr	r6, [sp, #8]
 8018d36:	9f01      	ldr	r7, [sp, #4]
 8018d38:	3630      	adds	r6, #48	; 0x30
 8018d3a:	f805 6b01 	strb.w	r6, [r5], #1
 8018d3e:	9e00      	ldr	r6, [sp, #0]
 8018d40:	1bae      	subs	r6, r5, r6
 8018d42:	42b7      	cmp	r7, r6
 8018d44:	4602      	mov	r2, r0
 8018d46:	460b      	mov	r3, r1
 8018d48:	d137      	bne.n	8018dba <_dtoa_r+0x722>
 8018d4a:	f7e7 fa9f 	bl	800028c <__adddf3>
 8018d4e:	4642      	mov	r2, r8
 8018d50:	464b      	mov	r3, r9
 8018d52:	4606      	mov	r6, r0
 8018d54:	460f      	mov	r7, r1
 8018d56:	f7e7 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 8018d5a:	b9c8      	cbnz	r0, 8018d90 <_dtoa_r+0x6f8>
 8018d5c:	4642      	mov	r2, r8
 8018d5e:	464b      	mov	r3, r9
 8018d60:	4630      	mov	r0, r6
 8018d62:	4639      	mov	r1, r7
 8018d64:	f7e7 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 8018d68:	b110      	cbz	r0, 8018d70 <_dtoa_r+0x6d8>
 8018d6a:	9b02      	ldr	r3, [sp, #8]
 8018d6c:	07d9      	lsls	r1, r3, #31
 8018d6e:	d40f      	bmi.n	8018d90 <_dtoa_r+0x6f8>
 8018d70:	4620      	mov	r0, r4
 8018d72:	4659      	mov	r1, fp
 8018d74:	f000 fbd4 	bl	8019520 <_Bfree>
 8018d78:	2300      	movs	r3, #0
 8018d7a:	702b      	strb	r3, [r5, #0]
 8018d7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018d7e:	f10a 0001 	add.w	r0, sl, #1
 8018d82:	6018      	str	r0, [r3, #0]
 8018d84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	f43f acd8 	beq.w	801873c <_dtoa_r+0xa4>
 8018d8c:	601d      	str	r5, [r3, #0]
 8018d8e:	e4d5      	b.n	801873c <_dtoa_r+0xa4>
 8018d90:	f8cd a01c 	str.w	sl, [sp, #28]
 8018d94:	462b      	mov	r3, r5
 8018d96:	461d      	mov	r5, r3
 8018d98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018d9c:	2a39      	cmp	r2, #57	; 0x39
 8018d9e:	d108      	bne.n	8018db2 <_dtoa_r+0x71a>
 8018da0:	9a00      	ldr	r2, [sp, #0]
 8018da2:	429a      	cmp	r2, r3
 8018da4:	d1f7      	bne.n	8018d96 <_dtoa_r+0x6fe>
 8018da6:	9a07      	ldr	r2, [sp, #28]
 8018da8:	9900      	ldr	r1, [sp, #0]
 8018daa:	3201      	adds	r2, #1
 8018dac:	9207      	str	r2, [sp, #28]
 8018dae:	2230      	movs	r2, #48	; 0x30
 8018db0:	700a      	strb	r2, [r1, #0]
 8018db2:	781a      	ldrb	r2, [r3, #0]
 8018db4:	3201      	adds	r2, #1
 8018db6:	701a      	strb	r2, [r3, #0]
 8018db8:	e78c      	b.n	8018cd4 <_dtoa_r+0x63c>
 8018dba:	4b7f      	ldr	r3, [pc, #508]	; (8018fb8 <_dtoa_r+0x920>)
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	f7e7 fc1b 	bl	80005f8 <__aeabi_dmul>
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	4606      	mov	r6, r0
 8018dc8:	460f      	mov	r7, r1
 8018dca:	f7e7 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8018dce:	2800      	cmp	r0, #0
 8018dd0:	d09b      	beq.n	8018d0a <_dtoa_r+0x672>
 8018dd2:	e7cd      	b.n	8018d70 <_dtoa_r+0x6d8>
 8018dd4:	9a08      	ldr	r2, [sp, #32]
 8018dd6:	2a00      	cmp	r2, #0
 8018dd8:	f000 80c4 	beq.w	8018f64 <_dtoa_r+0x8cc>
 8018ddc:	9a05      	ldr	r2, [sp, #20]
 8018dde:	2a01      	cmp	r2, #1
 8018de0:	f300 80a8 	bgt.w	8018f34 <_dtoa_r+0x89c>
 8018de4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018de6:	2a00      	cmp	r2, #0
 8018de8:	f000 80a0 	beq.w	8018f2c <_dtoa_r+0x894>
 8018dec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018df0:	9e06      	ldr	r6, [sp, #24]
 8018df2:	4645      	mov	r5, r8
 8018df4:	9a04      	ldr	r2, [sp, #16]
 8018df6:	2101      	movs	r1, #1
 8018df8:	441a      	add	r2, r3
 8018dfa:	4620      	mov	r0, r4
 8018dfc:	4498      	add	r8, r3
 8018dfe:	9204      	str	r2, [sp, #16]
 8018e00:	f000 fc4a 	bl	8019698 <__i2b>
 8018e04:	4607      	mov	r7, r0
 8018e06:	2d00      	cmp	r5, #0
 8018e08:	dd0b      	ble.n	8018e22 <_dtoa_r+0x78a>
 8018e0a:	9b04      	ldr	r3, [sp, #16]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	dd08      	ble.n	8018e22 <_dtoa_r+0x78a>
 8018e10:	42ab      	cmp	r3, r5
 8018e12:	9a04      	ldr	r2, [sp, #16]
 8018e14:	bfa8      	it	ge
 8018e16:	462b      	movge	r3, r5
 8018e18:	eba8 0803 	sub.w	r8, r8, r3
 8018e1c:	1aed      	subs	r5, r5, r3
 8018e1e:	1ad3      	subs	r3, r2, r3
 8018e20:	9304      	str	r3, [sp, #16]
 8018e22:	9b06      	ldr	r3, [sp, #24]
 8018e24:	b1fb      	cbz	r3, 8018e66 <_dtoa_r+0x7ce>
 8018e26:	9b08      	ldr	r3, [sp, #32]
 8018e28:	2b00      	cmp	r3, #0
 8018e2a:	f000 809f 	beq.w	8018f6c <_dtoa_r+0x8d4>
 8018e2e:	2e00      	cmp	r6, #0
 8018e30:	dd11      	ble.n	8018e56 <_dtoa_r+0x7be>
 8018e32:	4639      	mov	r1, r7
 8018e34:	4632      	mov	r2, r6
 8018e36:	4620      	mov	r0, r4
 8018e38:	f000 fcea 	bl	8019810 <__pow5mult>
 8018e3c:	465a      	mov	r2, fp
 8018e3e:	4601      	mov	r1, r0
 8018e40:	4607      	mov	r7, r0
 8018e42:	4620      	mov	r0, r4
 8018e44:	f000 fc3e 	bl	80196c4 <__multiply>
 8018e48:	4659      	mov	r1, fp
 8018e4a:	9007      	str	r0, [sp, #28]
 8018e4c:	4620      	mov	r0, r4
 8018e4e:	f000 fb67 	bl	8019520 <_Bfree>
 8018e52:	9b07      	ldr	r3, [sp, #28]
 8018e54:	469b      	mov	fp, r3
 8018e56:	9b06      	ldr	r3, [sp, #24]
 8018e58:	1b9a      	subs	r2, r3, r6
 8018e5a:	d004      	beq.n	8018e66 <_dtoa_r+0x7ce>
 8018e5c:	4659      	mov	r1, fp
 8018e5e:	4620      	mov	r0, r4
 8018e60:	f000 fcd6 	bl	8019810 <__pow5mult>
 8018e64:	4683      	mov	fp, r0
 8018e66:	2101      	movs	r1, #1
 8018e68:	4620      	mov	r0, r4
 8018e6a:	f000 fc15 	bl	8019698 <__i2b>
 8018e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	4606      	mov	r6, r0
 8018e74:	dd7c      	ble.n	8018f70 <_dtoa_r+0x8d8>
 8018e76:	461a      	mov	r2, r3
 8018e78:	4601      	mov	r1, r0
 8018e7a:	4620      	mov	r0, r4
 8018e7c:	f000 fcc8 	bl	8019810 <__pow5mult>
 8018e80:	9b05      	ldr	r3, [sp, #20]
 8018e82:	2b01      	cmp	r3, #1
 8018e84:	4606      	mov	r6, r0
 8018e86:	dd76      	ble.n	8018f76 <_dtoa_r+0x8de>
 8018e88:	2300      	movs	r3, #0
 8018e8a:	9306      	str	r3, [sp, #24]
 8018e8c:	6933      	ldr	r3, [r6, #16]
 8018e8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018e92:	6918      	ldr	r0, [r3, #16]
 8018e94:	f000 fbb0 	bl	80195f8 <__hi0bits>
 8018e98:	f1c0 0020 	rsb	r0, r0, #32
 8018e9c:	9b04      	ldr	r3, [sp, #16]
 8018e9e:	4418      	add	r0, r3
 8018ea0:	f010 001f 	ands.w	r0, r0, #31
 8018ea4:	f000 8086 	beq.w	8018fb4 <_dtoa_r+0x91c>
 8018ea8:	f1c0 0320 	rsb	r3, r0, #32
 8018eac:	2b04      	cmp	r3, #4
 8018eae:	dd7f      	ble.n	8018fb0 <_dtoa_r+0x918>
 8018eb0:	f1c0 001c 	rsb	r0, r0, #28
 8018eb4:	9b04      	ldr	r3, [sp, #16]
 8018eb6:	4403      	add	r3, r0
 8018eb8:	4480      	add	r8, r0
 8018eba:	4405      	add	r5, r0
 8018ebc:	9304      	str	r3, [sp, #16]
 8018ebe:	f1b8 0f00 	cmp.w	r8, #0
 8018ec2:	dd05      	ble.n	8018ed0 <_dtoa_r+0x838>
 8018ec4:	4659      	mov	r1, fp
 8018ec6:	4642      	mov	r2, r8
 8018ec8:	4620      	mov	r0, r4
 8018eca:	f000 fcfb 	bl	80198c4 <__lshift>
 8018ece:	4683      	mov	fp, r0
 8018ed0:	9b04      	ldr	r3, [sp, #16]
 8018ed2:	2b00      	cmp	r3, #0
 8018ed4:	dd05      	ble.n	8018ee2 <_dtoa_r+0x84a>
 8018ed6:	4631      	mov	r1, r6
 8018ed8:	461a      	mov	r2, r3
 8018eda:	4620      	mov	r0, r4
 8018edc:	f000 fcf2 	bl	80198c4 <__lshift>
 8018ee0:	4606      	mov	r6, r0
 8018ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d069      	beq.n	8018fbc <_dtoa_r+0x924>
 8018ee8:	4631      	mov	r1, r6
 8018eea:	4658      	mov	r0, fp
 8018eec:	f000 fd56 	bl	801999c <__mcmp>
 8018ef0:	2800      	cmp	r0, #0
 8018ef2:	da63      	bge.n	8018fbc <_dtoa_r+0x924>
 8018ef4:	2300      	movs	r3, #0
 8018ef6:	4659      	mov	r1, fp
 8018ef8:	220a      	movs	r2, #10
 8018efa:	4620      	mov	r0, r4
 8018efc:	f000 fb32 	bl	8019564 <__multadd>
 8018f00:	9b08      	ldr	r3, [sp, #32]
 8018f02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f06:	4683      	mov	fp, r0
 8018f08:	2b00      	cmp	r3, #0
 8018f0a:	f000 818f 	beq.w	801922c <_dtoa_r+0xb94>
 8018f0e:	4639      	mov	r1, r7
 8018f10:	2300      	movs	r3, #0
 8018f12:	220a      	movs	r2, #10
 8018f14:	4620      	mov	r0, r4
 8018f16:	f000 fb25 	bl	8019564 <__multadd>
 8018f1a:	f1b9 0f00 	cmp.w	r9, #0
 8018f1e:	4607      	mov	r7, r0
 8018f20:	f300 808e 	bgt.w	8019040 <_dtoa_r+0x9a8>
 8018f24:	9b05      	ldr	r3, [sp, #20]
 8018f26:	2b02      	cmp	r3, #2
 8018f28:	dc50      	bgt.n	8018fcc <_dtoa_r+0x934>
 8018f2a:	e089      	b.n	8019040 <_dtoa_r+0x9a8>
 8018f2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8018f32:	e75d      	b.n	8018df0 <_dtoa_r+0x758>
 8018f34:	9b01      	ldr	r3, [sp, #4]
 8018f36:	1e5e      	subs	r6, r3, #1
 8018f38:	9b06      	ldr	r3, [sp, #24]
 8018f3a:	42b3      	cmp	r3, r6
 8018f3c:	bfbf      	itttt	lt
 8018f3e:	9b06      	ldrlt	r3, [sp, #24]
 8018f40:	9606      	strlt	r6, [sp, #24]
 8018f42:	1af2      	sublt	r2, r6, r3
 8018f44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8018f46:	bfb6      	itet	lt
 8018f48:	189b      	addlt	r3, r3, r2
 8018f4a:	1b9e      	subge	r6, r3, r6
 8018f4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018f4e:	9b01      	ldr	r3, [sp, #4]
 8018f50:	bfb8      	it	lt
 8018f52:	2600      	movlt	r6, #0
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	bfb5      	itete	lt
 8018f58:	eba8 0503 	sublt.w	r5, r8, r3
 8018f5c:	9b01      	ldrge	r3, [sp, #4]
 8018f5e:	2300      	movlt	r3, #0
 8018f60:	4645      	movge	r5, r8
 8018f62:	e747      	b.n	8018df4 <_dtoa_r+0x75c>
 8018f64:	9e06      	ldr	r6, [sp, #24]
 8018f66:	9f08      	ldr	r7, [sp, #32]
 8018f68:	4645      	mov	r5, r8
 8018f6a:	e74c      	b.n	8018e06 <_dtoa_r+0x76e>
 8018f6c:	9a06      	ldr	r2, [sp, #24]
 8018f6e:	e775      	b.n	8018e5c <_dtoa_r+0x7c4>
 8018f70:	9b05      	ldr	r3, [sp, #20]
 8018f72:	2b01      	cmp	r3, #1
 8018f74:	dc18      	bgt.n	8018fa8 <_dtoa_r+0x910>
 8018f76:	9b02      	ldr	r3, [sp, #8]
 8018f78:	b9b3      	cbnz	r3, 8018fa8 <_dtoa_r+0x910>
 8018f7a:	9b03      	ldr	r3, [sp, #12]
 8018f7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018f80:	b9a3      	cbnz	r3, 8018fac <_dtoa_r+0x914>
 8018f82:	9b03      	ldr	r3, [sp, #12]
 8018f84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018f88:	0d1b      	lsrs	r3, r3, #20
 8018f8a:	051b      	lsls	r3, r3, #20
 8018f8c:	b12b      	cbz	r3, 8018f9a <_dtoa_r+0x902>
 8018f8e:	9b04      	ldr	r3, [sp, #16]
 8018f90:	3301      	adds	r3, #1
 8018f92:	9304      	str	r3, [sp, #16]
 8018f94:	f108 0801 	add.w	r8, r8, #1
 8018f98:	2301      	movs	r3, #1
 8018f9a:	9306      	str	r3, [sp, #24]
 8018f9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	f47f af74 	bne.w	8018e8c <_dtoa_r+0x7f4>
 8018fa4:	2001      	movs	r0, #1
 8018fa6:	e779      	b.n	8018e9c <_dtoa_r+0x804>
 8018fa8:	2300      	movs	r3, #0
 8018faa:	e7f6      	b.n	8018f9a <_dtoa_r+0x902>
 8018fac:	9b02      	ldr	r3, [sp, #8]
 8018fae:	e7f4      	b.n	8018f9a <_dtoa_r+0x902>
 8018fb0:	d085      	beq.n	8018ebe <_dtoa_r+0x826>
 8018fb2:	4618      	mov	r0, r3
 8018fb4:	301c      	adds	r0, #28
 8018fb6:	e77d      	b.n	8018eb4 <_dtoa_r+0x81c>
 8018fb8:	40240000 	.word	0x40240000
 8018fbc:	9b01      	ldr	r3, [sp, #4]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	dc38      	bgt.n	8019034 <_dtoa_r+0x99c>
 8018fc2:	9b05      	ldr	r3, [sp, #20]
 8018fc4:	2b02      	cmp	r3, #2
 8018fc6:	dd35      	ble.n	8019034 <_dtoa_r+0x99c>
 8018fc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018fcc:	f1b9 0f00 	cmp.w	r9, #0
 8018fd0:	d10d      	bne.n	8018fee <_dtoa_r+0x956>
 8018fd2:	4631      	mov	r1, r6
 8018fd4:	464b      	mov	r3, r9
 8018fd6:	2205      	movs	r2, #5
 8018fd8:	4620      	mov	r0, r4
 8018fda:	f000 fac3 	bl	8019564 <__multadd>
 8018fde:	4601      	mov	r1, r0
 8018fe0:	4606      	mov	r6, r0
 8018fe2:	4658      	mov	r0, fp
 8018fe4:	f000 fcda 	bl	801999c <__mcmp>
 8018fe8:	2800      	cmp	r0, #0
 8018fea:	f73f adbd 	bgt.w	8018b68 <_dtoa_r+0x4d0>
 8018fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018ff0:	9d00      	ldr	r5, [sp, #0]
 8018ff2:	ea6f 0a03 	mvn.w	sl, r3
 8018ff6:	f04f 0800 	mov.w	r8, #0
 8018ffa:	4631      	mov	r1, r6
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f000 fa8f 	bl	8019520 <_Bfree>
 8019002:	2f00      	cmp	r7, #0
 8019004:	f43f aeb4 	beq.w	8018d70 <_dtoa_r+0x6d8>
 8019008:	f1b8 0f00 	cmp.w	r8, #0
 801900c:	d005      	beq.n	801901a <_dtoa_r+0x982>
 801900e:	45b8      	cmp	r8, r7
 8019010:	d003      	beq.n	801901a <_dtoa_r+0x982>
 8019012:	4641      	mov	r1, r8
 8019014:	4620      	mov	r0, r4
 8019016:	f000 fa83 	bl	8019520 <_Bfree>
 801901a:	4639      	mov	r1, r7
 801901c:	4620      	mov	r0, r4
 801901e:	f000 fa7f 	bl	8019520 <_Bfree>
 8019022:	e6a5      	b.n	8018d70 <_dtoa_r+0x6d8>
 8019024:	2600      	movs	r6, #0
 8019026:	4637      	mov	r7, r6
 8019028:	e7e1      	b.n	8018fee <_dtoa_r+0x956>
 801902a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801902c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019030:	4637      	mov	r7, r6
 8019032:	e599      	b.n	8018b68 <_dtoa_r+0x4d0>
 8019034:	9b08      	ldr	r3, [sp, #32]
 8019036:	f8dd 9004 	ldr.w	r9, [sp, #4]
 801903a:	2b00      	cmp	r3, #0
 801903c:	f000 80fd 	beq.w	801923a <_dtoa_r+0xba2>
 8019040:	2d00      	cmp	r5, #0
 8019042:	dd05      	ble.n	8019050 <_dtoa_r+0x9b8>
 8019044:	4639      	mov	r1, r7
 8019046:	462a      	mov	r2, r5
 8019048:	4620      	mov	r0, r4
 801904a:	f000 fc3b 	bl	80198c4 <__lshift>
 801904e:	4607      	mov	r7, r0
 8019050:	9b06      	ldr	r3, [sp, #24]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d05c      	beq.n	8019110 <_dtoa_r+0xa78>
 8019056:	6879      	ldr	r1, [r7, #4]
 8019058:	4620      	mov	r0, r4
 801905a:	f000 fa21 	bl	80194a0 <_Balloc>
 801905e:	4605      	mov	r5, r0
 8019060:	b928      	cbnz	r0, 801906e <_dtoa_r+0x9d6>
 8019062:	4b80      	ldr	r3, [pc, #512]	; (8019264 <_dtoa_r+0xbcc>)
 8019064:	4602      	mov	r2, r0
 8019066:	f240 21ea 	movw	r1, #746	; 0x2ea
 801906a:	f7ff bb2e 	b.w	80186ca <_dtoa_r+0x32>
 801906e:	693a      	ldr	r2, [r7, #16]
 8019070:	3202      	adds	r2, #2
 8019072:	0092      	lsls	r2, r2, #2
 8019074:	f107 010c 	add.w	r1, r7, #12
 8019078:	300c      	adds	r0, #12
 801907a:	f7fe fc59 	bl	8017930 <memcpy>
 801907e:	2201      	movs	r2, #1
 8019080:	4629      	mov	r1, r5
 8019082:	4620      	mov	r0, r4
 8019084:	f000 fc1e 	bl	80198c4 <__lshift>
 8019088:	9b00      	ldr	r3, [sp, #0]
 801908a:	3301      	adds	r3, #1
 801908c:	9301      	str	r3, [sp, #4]
 801908e:	9b00      	ldr	r3, [sp, #0]
 8019090:	444b      	add	r3, r9
 8019092:	9307      	str	r3, [sp, #28]
 8019094:	9b02      	ldr	r3, [sp, #8]
 8019096:	f003 0301 	and.w	r3, r3, #1
 801909a:	46b8      	mov	r8, r7
 801909c:	9306      	str	r3, [sp, #24]
 801909e:	4607      	mov	r7, r0
 80190a0:	9b01      	ldr	r3, [sp, #4]
 80190a2:	4631      	mov	r1, r6
 80190a4:	3b01      	subs	r3, #1
 80190a6:	4658      	mov	r0, fp
 80190a8:	9302      	str	r3, [sp, #8]
 80190aa:	f7ff fa67 	bl	801857c <quorem>
 80190ae:	4603      	mov	r3, r0
 80190b0:	3330      	adds	r3, #48	; 0x30
 80190b2:	9004      	str	r0, [sp, #16]
 80190b4:	4641      	mov	r1, r8
 80190b6:	4658      	mov	r0, fp
 80190b8:	9308      	str	r3, [sp, #32]
 80190ba:	f000 fc6f 	bl	801999c <__mcmp>
 80190be:	463a      	mov	r2, r7
 80190c0:	4681      	mov	r9, r0
 80190c2:	4631      	mov	r1, r6
 80190c4:	4620      	mov	r0, r4
 80190c6:	f000 fc85 	bl	80199d4 <__mdiff>
 80190ca:	68c2      	ldr	r2, [r0, #12]
 80190cc:	9b08      	ldr	r3, [sp, #32]
 80190ce:	4605      	mov	r5, r0
 80190d0:	bb02      	cbnz	r2, 8019114 <_dtoa_r+0xa7c>
 80190d2:	4601      	mov	r1, r0
 80190d4:	4658      	mov	r0, fp
 80190d6:	f000 fc61 	bl	801999c <__mcmp>
 80190da:	9b08      	ldr	r3, [sp, #32]
 80190dc:	4602      	mov	r2, r0
 80190de:	4629      	mov	r1, r5
 80190e0:	4620      	mov	r0, r4
 80190e2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80190e6:	f000 fa1b 	bl	8019520 <_Bfree>
 80190ea:	9b05      	ldr	r3, [sp, #20]
 80190ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80190ee:	9d01      	ldr	r5, [sp, #4]
 80190f0:	ea43 0102 	orr.w	r1, r3, r2
 80190f4:	9b06      	ldr	r3, [sp, #24]
 80190f6:	430b      	orrs	r3, r1
 80190f8:	9b08      	ldr	r3, [sp, #32]
 80190fa:	d10d      	bne.n	8019118 <_dtoa_r+0xa80>
 80190fc:	2b39      	cmp	r3, #57	; 0x39
 80190fe:	d029      	beq.n	8019154 <_dtoa_r+0xabc>
 8019100:	f1b9 0f00 	cmp.w	r9, #0
 8019104:	dd01      	ble.n	801910a <_dtoa_r+0xa72>
 8019106:	9b04      	ldr	r3, [sp, #16]
 8019108:	3331      	adds	r3, #49	; 0x31
 801910a:	9a02      	ldr	r2, [sp, #8]
 801910c:	7013      	strb	r3, [r2, #0]
 801910e:	e774      	b.n	8018ffa <_dtoa_r+0x962>
 8019110:	4638      	mov	r0, r7
 8019112:	e7b9      	b.n	8019088 <_dtoa_r+0x9f0>
 8019114:	2201      	movs	r2, #1
 8019116:	e7e2      	b.n	80190de <_dtoa_r+0xa46>
 8019118:	f1b9 0f00 	cmp.w	r9, #0
 801911c:	db06      	blt.n	801912c <_dtoa_r+0xa94>
 801911e:	9905      	ldr	r1, [sp, #20]
 8019120:	ea41 0909 	orr.w	r9, r1, r9
 8019124:	9906      	ldr	r1, [sp, #24]
 8019126:	ea59 0101 	orrs.w	r1, r9, r1
 801912a:	d120      	bne.n	801916e <_dtoa_r+0xad6>
 801912c:	2a00      	cmp	r2, #0
 801912e:	ddec      	ble.n	801910a <_dtoa_r+0xa72>
 8019130:	4659      	mov	r1, fp
 8019132:	2201      	movs	r2, #1
 8019134:	4620      	mov	r0, r4
 8019136:	9301      	str	r3, [sp, #4]
 8019138:	f000 fbc4 	bl	80198c4 <__lshift>
 801913c:	4631      	mov	r1, r6
 801913e:	4683      	mov	fp, r0
 8019140:	f000 fc2c 	bl	801999c <__mcmp>
 8019144:	2800      	cmp	r0, #0
 8019146:	9b01      	ldr	r3, [sp, #4]
 8019148:	dc02      	bgt.n	8019150 <_dtoa_r+0xab8>
 801914a:	d1de      	bne.n	801910a <_dtoa_r+0xa72>
 801914c:	07da      	lsls	r2, r3, #31
 801914e:	d5dc      	bpl.n	801910a <_dtoa_r+0xa72>
 8019150:	2b39      	cmp	r3, #57	; 0x39
 8019152:	d1d8      	bne.n	8019106 <_dtoa_r+0xa6e>
 8019154:	9a02      	ldr	r2, [sp, #8]
 8019156:	2339      	movs	r3, #57	; 0x39
 8019158:	7013      	strb	r3, [r2, #0]
 801915a:	462b      	mov	r3, r5
 801915c:	461d      	mov	r5, r3
 801915e:	3b01      	subs	r3, #1
 8019160:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8019164:	2a39      	cmp	r2, #57	; 0x39
 8019166:	d050      	beq.n	801920a <_dtoa_r+0xb72>
 8019168:	3201      	adds	r2, #1
 801916a:	701a      	strb	r2, [r3, #0]
 801916c:	e745      	b.n	8018ffa <_dtoa_r+0x962>
 801916e:	2a00      	cmp	r2, #0
 8019170:	dd03      	ble.n	801917a <_dtoa_r+0xae2>
 8019172:	2b39      	cmp	r3, #57	; 0x39
 8019174:	d0ee      	beq.n	8019154 <_dtoa_r+0xabc>
 8019176:	3301      	adds	r3, #1
 8019178:	e7c7      	b.n	801910a <_dtoa_r+0xa72>
 801917a:	9a01      	ldr	r2, [sp, #4]
 801917c:	9907      	ldr	r1, [sp, #28]
 801917e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8019182:	428a      	cmp	r2, r1
 8019184:	d02a      	beq.n	80191dc <_dtoa_r+0xb44>
 8019186:	4659      	mov	r1, fp
 8019188:	2300      	movs	r3, #0
 801918a:	220a      	movs	r2, #10
 801918c:	4620      	mov	r0, r4
 801918e:	f000 f9e9 	bl	8019564 <__multadd>
 8019192:	45b8      	cmp	r8, r7
 8019194:	4683      	mov	fp, r0
 8019196:	f04f 0300 	mov.w	r3, #0
 801919a:	f04f 020a 	mov.w	r2, #10
 801919e:	4641      	mov	r1, r8
 80191a0:	4620      	mov	r0, r4
 80191a2:	d107      	bne.n	80191b4 <_dtoa_r+0xb1c>
 80191a4:	f000 f9de 	bl	8019564 <__multadd>
 80191a8:	4680      	mov	r8, r0
 80191aa:	4607      	mov	r7, r0
 80191ac:	9b01      	ldr	r3, [sp, #4]
 80191ae:	3301      	adds	r3, #1
 80191b0:	9301      	str	r3, [sp, #4]
 80191b2:	e775      	b.n	80190a0 <_dtoa_r+0xa08>
 80191b4:	f000 f9d6 	bl	8019564 <__multadd>
 80191b8:	4639      	mov	r1, r7
 80191ba:	4680      	mov	r8, r0
 80191bc:	2300      	movs	r3, #0
 80191be:	220a      	movs	r2, #10
 80191c0:	4620      	mov	r0, r4
 80191c2:	f000 f9cf 	bl	8019564 <__multadd>
 80191c6:	4607      	mov	r7, r0
 80191c8:	e7f0      	b.n	80191ac <_dtoa_r+0xb14>
 80191ca:	f1b9 0f00 	cmp.w	r9, #0
 80191ce:	9a00      	ldr	r2, [sp, #0]
 80191d0:	bfcc      	ite	gt
 80191d2:	464d      	movgt	r5, r9
 80191d4:	2501      	movle	r5, #1
 80191d6:	4415      	add	r5, r2
 80191d8:	f04f 0800 	mov.w	r8, #0
 80191dc:	4659      	mov	r1, fp
 80191de:	2201      	movs	r2, #1
 80191e0:	4620      	mov	r0, r4
 80191e2:	9301      	str	r3, [sp, #4]
 80191e4:	f000 fb6e 	bl	80198c4 <__lshift>
 80191e8:	4631      	mov	r1, r6
 80191ea:	4683      	mov	fp, r0
 80191ec:	f000 fbd6 	bl	801999c <__mcmp>
 80191f0:	2800      	cmp	r0, #0
 80191f2:	dcb2      	bgt.n	801915a <_dtoa_r+0xac2>
 80191f4:	d102      	bne.n	80191fc <_dtoa_r+0xb64>
 80191f6:	9b01      	ldr	r3, [sp, #4]
 80191f8:	07db      	lsls	r3, r3, #31
 80191fa:	d4ae      	bmi.n	801915a <_dtoa_r+0xac2>
 80191fc:	462b      	mov	r3, r5
 80191fe:	461d      	mov	r5, r3
 8019200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019204:	2a30      	cmp	r2, #48	; 0x30
 8019206:	d0fa      	beq.n	80191fe <_dtoa_r+0xb66>
 8019208:	e6f7      	b.n	8018ffa <_dtoa_r+0x962>
 801920a:	9a00      	ldr	r2, [sp, #0]
 801920c:	429a      	cmp	r2, r3
 801920e:	d1a5      	bne.n	801915c <_dtoa_r+0xac4>
 8019210:	f10a 0a01 	add.w	sl, sl, #1
 8019214:	2331      	movs	r3, #49	; 0x31
 8019216:	e779      	b.n	801910c <_dtoa_r+0xa74>
 8019218:	4b13      	ldr	r3, [pc, #76]	; (8019268 <_dtoa_r+0xbd0>)
 801921a:	f7ff baaf 	b.w	801877c <_dtoa_r+0xe4>
 801921e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019220:	2b00      	cmp	r3, #0
 8019222:	f47f aa86 	bne.w	8018732 <_dtoa_r+0x9a>
 8019226:	4b11      	ldr	r3, [pc, #68]	; (801926c <_dtoa_r+0xbd4>)
 8019228:	f7ff baa8 	b.w	801877c <_dtoa_r+0xe4>
 801922c:	f1b9 0f00 	cmp.w	r9, #0
 8019230:	dc03      	bgt.n	801923a <_dtoa_r+0xba2>
 8019232:	9b05      	ldr	r3, [sp, #20]
 8019234:	2b02      	cmp	r3, #2
 8019236:	f73f aec9 	bgt.w	8018fcc <_dtoa_r+0x934>
 801923a:	9d00      	ldr	r5, [sp, #0]
 801923c:	4631      	mov	r1, r6
 801923e:	4658      	mov	r0, fp
 8019240:	f7ff f99c 	bl	801857c <quorem>
 8019244:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019248:	f805 3b01 	strb.w	r3, [r5], #1
 801924c:	9a00      	ldr	r2, [sp, #0]
 801924e:	1aaa      	subs	r2, r5, r2
 8019250:	4591      	cmp	r9, r2
 8019252:	ddba      	ble.n	80191ca <_dtoa_r+0xb32>
 8019254:	4659      	mov	r1, fp
 8019256:	2300      	movs	r3, #0
 8019258:	220a      	movs	r2, #10
 801925a:	4620      	mov	r0, r4
 801925c:	f000 f982 	bl	8019564 <__multadd>
 8019260:	4683      	mov	fp, r0
 8019262:	e7eb      	b.n	801923c <_dtoa_r+0xba4>
 8019264:	0801c964 	.word	0x0801c964
 8019268:	0801c6c0 	.word	0x0801c6c0
 801926c:	0801c8f8 	.word	0x0801c8f8

08019270 <std>:
 8019270:	2300      	movs	r3, #0
 8019272:	b510      	push	{r4, lr}
 8019274:	4604      	mov	r4, r0
 8019276:	e9c0 3300 	strd	r3, r3, [r0]
 801927a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801927e:	6083      	str	r3, [r0, #8]
 8019280:	8181      	strh	r1, [r0, #12]
 8019282:	6643      	str	r3, [r0, #100]	; 0x64
 8019284:	81c2      	strh	r2, [r0, #14]
 8019286:	6183      	str	r3, [r0, #24]
 8019288:	4619      	mov	r1, r3
 801928a:	2208      	movs	r2, #8
 801928c:	305c      	adds	r0, #92	; 0x5c
 801928e:	f7fe fb5d 	bl	801794c <memset>
 8019292:	4b05      	ldr	r3, [pc, #20]	; (80192a8 <std+0x38>)
 8019294:	6263      	str	r3, [r4, #36]	; 0x24
 8019296:	4b05      	ldr	r3, [pc, #20]	; (80192ac <std+0x3c>)
 8019298:	62a3      	str	r3, [r4, #40]	; 0x28
 801929a:	4b05      	ldr	r3, [pc, #20]	; (80192b0 <std+0x40>)
 801929c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801929e:	4b05      	ldr	r3, [pc, #20]	; (80192b4 <std+0x44>)
 80192a0:	6224      	str	r4, [r4, #32]
 80192a2:	6323      	str	r3, [r4, #48]	; 0x30
 80192a4:	bd10      	pop	{r4, pc}
 80192a6:	bf00      	nop
 80192a8:	0801a29d 	.word	0x0801a29d
 80192ac:	0801a2bf 	.word	0x0801a2bf
 80192b0:	0801a2f7 	.word	0x0801a2f7
 80192b4:	0801a31b 	.word	0x0801a31b

080192b8 <_cleanup_r>:
 80192b8:	4901      	ldr	r1, [pc, #4]	; (80192c0 <_cleanup_r+0x8>)
 80192ba:	f000 b8c1 	b.w	8019440 <_fwalk_reent>
 80192be:	bf00      	nop
 80192c0:	0801a605 	.word	0x0801a605

080192c4 <__sfmoreglue>:
 80192c4:	b570      	push	{r4, r5, r6, lr}
 80192c6:	1e4a      	subs	r2, r1, #1
 80192c8:	2568      	movs	r5, #104	; 0x68
 80192ca:	4355      	muls	r5, r2
 80192cc:	460e      	mov	r6, r1
 80192ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80192d2:	f000 fcc3 	bl	8019c5c <_malloc_r>
 80192d6:	4604      	mov	r4, r0
 80192d8:	b140      	cbz	r0, 80192ec <__sfmoreglue+0x28>
 80192da:	2100      	movs	r1, #0
 80192dc:	e9c0 1600 	strd	r1, r6, [r0]
 80192e0:	300c      	adds	r0, #12
 80192e2:	60a0      	str	r0, [r4, #8]
 80192e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80192e8:	f7fe fb30 	bl	801794c <memset>
 80192ec:	4620      	mov	r0, r4
 80192ee:	bd70      	pop	{r4, r5, r6, pc}

080192f0 <__sfp_lock_acquire>:
 80192f0:	4801      	ldr	r0, [pc, #4]	; (80192f8 <__sfp_lock_acquire+0x8>)
 80192f2:	f000 b8ca 	b.w	801948a <__retarget_lock_acquire_recursive>
 80192f6:	bf00      	nop
 80192f8:	20003da8 	.word	0x20003da8

080192fc <__sfp_lock_release>:
 80192fc:	4801      	ldr	r0, [pc, #4]	; (8019304 <__sfp_lock_release+0x8>)
 80192fe:	f000 b8c5 	b.w	801948c <__retarget_lock_release_recursive>
 8019302:	bf00      	nop
 8019304:	20003da8 	.word	0x20003da8

08019308 <__sinit_lock_acquire>:
 8019308:	4801      	ldr	r0, [pc, #4]	; (8019310 <__sinit_lock_acquire+0x8>)
 801930a:	f000 b8be 	b.w	801948a <__retarget_lock_acquire_recursive>
 801930e:	bf00      	nop
 8019310:	20003da7 	.word	0x20003da7

08019314 <__sinit_lock_release>:
 8019314:	4801      	ldr	r0, [pc, #4]	; (801931c <__sinit_lock_release+0x8>)
 8019316:	f000 b8b9 	b.w	801948c <__retarget_lock_release_recursive>
 801931a:	bf00      	nop
 801931c:	20003da7 	.word	0x20003da7

08019320 <__sinit>:
 8019320:	b510      	push	{r4, lr}
 8019322:	4604      	mov	r4, r0
 8019324:	f7ff fff0 	bl	8019308 <__sinit_lock_acquire>
 8019328:	69a3      	ldr	r3, [r4, #24]
 801932a:	b11b      	cbz	r3, 8019334 <__sinit+0x14>
 801932c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019330:	f7ff bff0 	b.w	8019314 <__sinit_lock_release>
 8019334:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019338:	6523      	str	r3, [r4, #80]	; 0x50
 801933a:	4b13      	ldr	r3, [pc, #76]	; (8019388 <__sinit+0x68>)
 801933c:	4a13      	ldr	r2, [pc, #76]	; (801938c <__sinit+0x6c>)
 801933e:	681b      	ldr	r3, [r3, #0]
 8019340:	62a2      	str	r2, [r4, #40]	; 0x28
 8019342:	42a3      	cmp	r3, r4
 8019344:	bf04      	itt	eq
 8019346:	2301      	moveq	r3, #1
 8019348:	61a3      	streq	r3, [r4, #24]
 801934a:	4620      	mov	r0, r4
 801934c:	f000 f820 	bl	8019390 <__sfp>
 8019350:	6060      	str	r0, [r4, #4]
 8019352:	4620      	mov	r0, r4
 8019354:	f000 f81c 	bl	8019390 <__sfp>
 8019358:	60a0      	str	r0, [r4, #8]
 801935a:	4620      	mov	r0, r4
 801935c:	f000 f818 	bl	8019390 <__sfp>
 8019360:	2200      	movs	r2, #0
 8019362:	60e0      	str	r0, [r4, #12]
 8019364:	2104      	movs	r1, #4
 8019366:	6860      	ldr	r0, [r4, #4]
 8019368:	f7ff ff82 	bl	8019270 <std>
 801936c:	68a0      	ldr	r0, [r4, #8]
 801936e:	2201      	movs	r2, #1
 8019370:	2109      	movs	r1, #9
 8019372:	f7ff ff7d 	bl	8019270 <std>
 8019376:	68e0      	ldr	r0, [r4, #12]
 8019378:	2202      	movs	r2, #2
 801937a:	2112      	movs	r1, #18
 801937c:	f7ff ff78 	bl	8019270 <std>
 8019380:	2301      	movs	r3, #1
 8019382:	61a3      	str	r3, [r4, #24]
 8019384:	e7d2      	b.n	801932c <__sinit+0xc>
 8019386:	bf00      	nop
 8019388:	0801c6ac 	.word	0x0801c6ac
 801938c:	080192b9 	.word	0x080192b9

08019390 <__sfp>:
 8019390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019392:	4607      	mov	r7, r0
 8019394:	f7ff ffac 	bl	80192f0 <__sfp_lock_acquire>
 8019398:	4b1e      	ldr	r3, [pc, #120]	; (8019414 <__sfp+0x84>)
 801939a:	681e      	ldr	r6, [r3, #0]
 801939c:	69b3      	ldr	r3, [r6, #24]
 801939e:	b913      	cbnz	r3, 80193a6 <__sfp+0x16>
 80193a0:	4630      	mov	r0, r6
 80193a2:	f7ff ffbd 	bl	8019320 <__sinit>
 80193a6:	3648      	adds	r6, #72	; 0x48
 80193a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80193ac:	3b01      	subs	r3, #1
 80193ae:	d503      	bpl.n	80193b8 <__sfp+0x28>
 80193b0:	6833      	ldr	r3, [r6, #0]
 80193b2:	b30b      	cbz	r3, 80193f8 <__sfp+0x68>
 80193b4:	6836      	ldr	r6, [r6, #0]
 80193b6:	e7f7      	b.n	80193a8 <__sfp+0x18>
 80193b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80193bc:	b9d5      	cbnz	r5, 80193f4 <__sfp+0x64>
 80193be:	4b16      	ldr	r3, [pc, #88]	; (8019418 <__sfp+0x88>)
 80193c0:	60e3      	str	r3, [r4, #12]
 80193c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80193c6:	6665      	str	r5, [r4, #100]	; 0x64
 80193c8:	f000 f85e 	bl	8019488 <__retarget_lock_init_recursive>
 80193cc:	f7ff ff96 	bl	80192fc <__sfp_lock_release>
 80193d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80193d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80193d8:	6025      	str	r5, [r4, #0]
 80193da:	61a5      	str	r5, [r4, #24]
 80193dc:	2208      	movs	r2, #8
 80193de:	4629      	mov	r1, r5
 80193e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80193e4:	f7fe fab2 	bl	801794c <memset>
 80193e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80193ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80193f0:	4620      	mov	r0, r4
 80193f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80193f4:	3468      	adds	r4, #104	; 0x68
 80193f6:	e7d9      	b.n	80193ac <__sfp+0x1c>
 80193f8:	2104      	movs	r1, #4
 80193fa:	4638      	mov	r0, r7
 80193fc:	f7ff ff62 	bl	80192c4 <__sfmoreglue>
 8019400:	4604      	mov	r4, r0
 8019402:	6030      	str	r0, [r6, #0]
 8019404:	2800      	cmp	r0, #0
 8019406:	d1d5      	bne.n	80193b4 <__sfp+0x24>
 8019408:	f7ff ff78 	bl	80192fc <__sfp_lock_release>
 801940c:	230c      	movs	r3, #12
 801940e:	603b      	str	r3, [r7, #0]
 8019410:	e7ee      	b.n	80193f0 <__sfp+0x60>
 8019412:	bf00      	nop
 8019414:	0801c6ac 	.word	0x0801c6ac
 8019418:	ffff0001 	.word	0xffff0001

0801941c <fiprintf>:
 801941c:	b40e      	push	{r1, r2, r3}
 801941e:	b503      	push	{r0, r1, lr}
 8019420:	4601      	mov	r1, r0
 8019422:	ab03      	add	r3, sp, #12
 8019424:	4805      	ldr	r0, [pc, #20]	; (801943c <fiprintf+0x20>)
 8019426:	f853 2b04 	ldr.w	r2, [r3], #4
 801942a:	6800      	ldr	r0, [r0, #0]
 801942c:	9301      	str	r3, [sp, #4]
 801942e:	f000 fdf5 	bl	801a01c <_vfiprintf_r>
 8019432:	b002      	add	sp, #8
 8019434:	f85d eb04 	ldr.w	lr, [sp], #4
 8019438:	b003      	add	sp, #12
 801943a:	4770      	bx	lr
 801943c:	200008c0 	.word	0x200008c0

08019440 <_fwalk_reent>:
 8019440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019444:	4606      	mov	r6, r0
 8019446:	4688      	mov	r8, r1
 8019448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801944c:	2700      	movs	r7, #0
 801944e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019452:	f1b9 0901 	subs.w	r9, r9, #1
 8019456:	d505      	bpl.n	8019464 <_fwalk_reent+0x24>
 8019458:	6824      	ldr	r4, [r4, #0]
 801945a:	2c00      	cmp	r4, #0
 801945c:	d1f7      	bne.n	801944e <_fwalk_reent+0xe>
 801945e:	4638      	mov	r0, r7
 8019460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019464:	89ab      	ldrh	r3, [r5, #12]
 8019466:	2b01      	cmp	r3, #1
 8019468:	d907      	bls.n	801947a <_fwalk_reent+0x3a>
 801946a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801946e:	3301      	adds	r3, #1
 8019470:	d003      	beq.n	801947a <_fwalk_reent+0x3a>
 8019472:	4629      	mov	r1, r5
 8019474:	4630      	mov	r0, r6
 8019476:	47c0      	blx	r8
 8019478:	4307      	orrs	r7, r0
 801947a:	3568      	adds	r5, #104	; 0x68
 801947c:	e7e9      	b.n	8019452 <_fwalk_reent+0x12>
	...

08019480 <_localeconv_r>:
 8019480:	4800      	ldr	r0, [pc, #0]	; (8019484 <_localeconv_r+0x4>)
 8019482:	4770      	bx	lr
 8019484:	20000a14 	.word	0x20000a14

08019488 <__retarget_lock_init_recursive>:
 8019488:	4770      	bx	lr

0801948a <__retarget_lock_acquire_recursive>:
 801948a:	4770      	bx	lr

0801948c <__retarget_lock_release_recursive>:
 801948c:	4770      	bx	lr
	...

08019490 <malloc>:
 8019490:	4b02      	ldr	r3, [pc, #8]	; (801949c <malloc+0xc>)
 8019492:	4601      	mov	r1, r0
 8019494:	6818      	ldr	r0, [r3, #0]
 8019496:	f000 bbe1 	b.w	8019c5c <_malloc_r>
 801949a:	bf00      	nop
 801949c:	200008c0 	.word	0x200008c0

080194a0 <_Balloc>:
 80194a0:	b570      	push	{r4, r5, r6, lr}
 80194a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80194a4:	4604      	mov	r4, r0
 80194a6:	460d      	mov	r5, r1
 80194a8:	b976      	cbnz	r6, 80194c8 <_Balloc+0x28>
 80194aa:	2010      	movs	r0, #16
 80194ac:	f7ff fff0 	bl	8019490 <malloc>
 80194b0:	4602      	mov	r2, r0
 80194b2:	6260      	str	r0, [r4, #36]	; 0x24
 80194b4:	b920      	cbnz	r0, 80194c0 <_Balloc+0x20>
 80194b6:	4b18      	ldr	r3, [pc, #96]	; (8019518 <_Balloc+0x78>)
 80194b8:	4818      	ldr	r0, [pc, #96]	; (801951c <_Balloc+0x7c>)
 80194ba:	2166      	movs	r1, #102	; 0x66
 80194bc:	f7ff f840 	bl	8018540 <__assert_func>
 80194c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80194c4:	6006      	str	r6, [r0, #0]
 80194c6:	60c6      	str	r6, [r0, #12]
 80194c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80194ca:	68f3      	ldr	r3, [r6, #12]
 80194cc:	b183      	cbz	r3, 80194f0 <_Balloc+0x50>
 80194ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194d0:	68db      	ldr	r3, [r3, #12]
 80194d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80194d6:	b9b8      	cbnz	r0, 8019508 <_Balloc+0x68>
 80194d8:	2101      	movs	r1, #1
 80194da:	fa01 f605 	lsl.w	r6, r1, r5
 80194de:	1d72      	adds	r2, r6, #5
 80194e0:	0092      	lsls	r2, r2, #2
 80194e2:	4620      	mov	r0, r4
 80194e4:	f000 fb5a 	bl	8019b9c <_calloc_r>
 80194e8:	b160      	cbz	r0, 8019504 <_Balloc+0x64>
 80194ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80194ee:	e00e      	b.n	801950e <_Balloc+0x6e>
 80194f0:	2221      	movs	r2, #33	; 0x21
 80194f2:	2104      	movs	r1, #4
 80194f4:	4620      	mov	r0, r4
 80194f6:	f000 fb51 	bl	8019b9c <_calloc_r>
 80194fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80194fc:	60f0      	str	r0, [r6, #12]
 80194fe:	68db      	ldr	r3, [r3, #12]
 8019500:	2b00      	cmp	r3, #0
 8019502:	d1e4      	bne.n	80194ce <_Balloc+0x2e>
 8019504:	2000      	movs	r0, #0
 8019506:	bd70      	pop	{r4, r5, r6, pc}
 8019508:	6802      	ldr	r2, [r0, #0]
 801950a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801950e:	2300      	movs	r3, #0
 8019510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019514:	e7f7      	b.n	8019506 <_Balloc+0x66>
 8019516:	bf00      	nop
 8019518:	0801c6e4 	.word	0x0801c6e4
 801951c:	0801c9d8 	.word	0x0801c9d8

08019520 <_Bfree>:
 8019520:	b570      	push	{r4, r5, r6, lr}
 8019522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019524:	4605      	mov	r5, r0
 8019526:	460c      	mov	r4, r1
 8019528:	b976      	cbnz	r6, 8019548 <_Bfree+0x28>
 801952a:	2010      	movs	r0, #16
 801952c:	f7ff ffb0 	bl	8019490 <malloc>
 8019530:	4602      	mov	r2, r0
 8019532:	6268      	str	r0, [r5, #36]	; 0x24
 8019534:	b920      	cbnz	r0, 8019540 <_Bfree+0x20>
 8019536:	4b09      	ldr	r3, [pc, #36]	; (801955c <_Bfree+0x3c>)
 8019538:	4809      	ldr	r0, [pc, #36]	; (8019560 <_Bfree+0x40>)
 801953a:	218a      	movs	r1, #138	; 0x8a
 801953c:	f7ff f800 	bl	8018540 <__assert_func>
 8019540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019544:	6006      	str	r6, [r0, #0]
 8019546:	60c6      	str	r6, [r0, #12]
 8019548:	b13c      	cbz	r4, 801955a <_Bfree+0x3a>
 801954a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801954c:	6862      	ldr	r2, [r4, #4]
 801954e:	68db      	ldr	r3, [r3, #12]
 8019550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019554:	6021      	str	r1, [r4, #0]
 8019556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801955a:	bd70      	pop	{r4, r5, r6, pc}
 801955c:	0801c6e4 	.word	0x0801c6e4
 8019560:	0801c9d8 	.word	0x0801c9d8

08019564 <__multadd>:
 8019564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019568:	690e      	ldr	r6, [r1, #16]
 801956a:	4607      	mov	r7, r0
 801956c:	4698      	mov	r8, r3
 801956e:	460c      	mov	r4, r1
 8019570:	f101 0014 	add.w	r0, r1, #20
 8019574:	2300      	movs	r3, #0
 8019576:	6805      	ldr	r5, [r0, #0]
 8019578:	b2a9      	uxth	r1, r5
 801957a:	fb02 8101 	mla	r1, r2, r1, r8
 801957e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019582:	0c2d      	lsrs	r5, r5, #16
 8019584:	fb02 c505 	mla	r5, r2, r5, ip
 8019588:	b289      	uxth	r1, r1
 801958a:	3301      	adds	r3, #1
 801958c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019590:	429e      	cmp	r6, r3
 8019592:	f840 1b04 	str.w	r1, [r0], #4
 8019596:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801959a:	dcec      	bgt.n	8019576 <__multadd+0x12>
 801959c:	f1b8 0f00 	cmp.w	r8, #0
 80195a0:	d022      	beq.n	80195e8 <__multadd+0x84>
 80195a2:	68a3      	ldr	r3, [r4, #8]
 80195a4:	42b3      	cmp	r3, r6
 80195a6:	dc19      	bgt.n	80195dc <__multadd+0x78>
 80195a8:	6861      	ldr	r1, [r4, #4]
 80195aa:	4638      	mov	r0, r7
 80195ac:	3101      	adds	r1, #1
 80195ae:	f7ff ff77 	bl	80194a0 <_Balloc>
 80195b2:	4605      	mov	r5, r0
 80195b4:	b928      	cbnz	r0, 80195c2 <__multadd+0x5e>
 80195b6:	4602      	mov	r2, r0
 80195b8:	4b0d      	ldr	r3, [pc, #52]	; (80195f0 <__multadd+0x8c>)
 80195ba:	480e      	ldr	r0, [pc, #56]	; (80195f4 <__multadd+0x90>)
 80195bc:	21b5      	movs	r1, #181	; 0xb5
 80195be:	f7fe ffbf 	bl	8018540 <__assert_func>
 80195c2:	6922      	ldr	r2, [r4, #16]
 80195c4:	3202      	adds	r2, #2
 80195c6:	f104 010c 	add.w	r1, r4, #12
 80195ca:	0092      	lsls	r2, r2, #2
 80195cc:	300c      	adds	r0, #12
 80195ce:	f7fe f9af 	bl	8017930 <memcpy>
 80195d2:	4621      	mov	r1, r4
 80195d4:	4638      	mov	r0, r7
 80195d6:	f7ff ffa3 	bl	8019520 <_Bfree>
 80195da:	462c      	mov	r4, r5
 80195dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80195e0:	3601      	adds	r6, #1
 80195e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80195e6:	6126      	str	r6, [r4, #16]
 80195e8:	4620      	mov	r0, r4
 80195ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ee:	bf00      	nop
 80195f0:	0801c964 	.word	0x0801c964
 80195f4:	0801c9d8 	.word	0x0801c9d8

080195f8 <__hi0bits>:
 80195f8:	0c03      	lsrs	r3, r0, #16
 80195fa:	041b      	lsls	r3, r3, #16
 80195fc:	b9d3      	cbnz	r3, 8019634 <__hi0bits+0x3c>
 80195fe:	0400      	lsls	r0, r0, #16
 8019600:	2310      	movs	r3, #16
 8019602:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019606:	bf04      	itt	eq
 8019608:	0200      	lsleq	r0, r0, #8
 801960a:	3308      	addeq	r3, #8
 801960c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019610:	bf04      	itt	eq
 8019612:	0100      	lsleq	r0, r0, #4
 8019614:	3304      	addeq	r3, #4
 8019616:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801961a:	bf04      	itt	eq
 801961c:	0080      	lsleq	r0, r0, #2
 801961e:	3302      	addeq	r3, #2
 8019620:	2800      	cmp	r0, #0
 8019622:	db05      	blt.n	8019630 <__hi0bits+0x38>
 8019624:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019628:	f103 0301 	add.w	r3, r3, #1
 801962c:	bf08      	it	eq
 801962e:	2320      	moveq	r3, #32
 8019630:	4618      	mov	r0, r3
 8019632:	4770      	bx	lr
 8019634:	2300      	movs	r3, #0
 8019636:	e7e4      	b.n	8019602 <__hi0bits+0xa>

08019638 <__lo0bits>:
 8019638:	6803      	ldr	r3, [r0, #0]
 801963a:	f013 0207 	ands.w	r2, r3, #7
 801963e:	4601      	mov	r1, r0
 8019640:	d00b      	beq.n	801965a <__lo0bits+0x22>
 8019642:	07da      	lsls	r2, r3, #31
 8019644:	d424      	bmi.n	8019690 <__lo0bits+0x58>
 8019646:	0798      	lsls	r0, r3, #30
 8019648:	bf49      	itett	mi
 801964a:	085b      	lsrmi	r3, r3, #1
 801964c:	089b      	lsrpl	r3, r3, #2
 801964e:	2001      	movmi	r0, #1
 8019650:	600b      	strmi	r3, [r1, #0]
 8019652:	bf5c      	itt	pl
 8019654:	600b      	strpl	r3, [r1, #0]
 8019656:	2002      	movpl	r0, #2
 8019658:	4770      	bx	lr
 801965a:	b298      	uxth	r0, r3
 801965c:	b9b0      	cbnz	r0, 801968c <__lo0bits+0x54>
 801965e:	0c1b      	lsrs	r3, r3, #16
 8019660:	2010      	movs	r0, #16
 8019662:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019666:	bf04      	itt	eq
 8019668:	0a1b      	lsreq	r3, r3, #8
 801966a:	3008      	addeq	r0, #8
 801966c:	071a      	lsls	r2, r3, #28
 801966e:	bf04      	itt	eq
 8019670:	091b      	lsreq	r3, r3, #4
 8019672:	3004      	addeq	r0, #4
 8019674:	079a      	lsls	r2, r3, #30
 8019676:	bf04      	itt	eq
 8019678:	089b      	lsreq	r3, r3, #2
 801967a:	3002      	addeq	r0, #2
 801967c:	07da      	lsls	r2, r3, #31
 801967e:	d403      	bmi.n	8019688 <__lo0bits+0x50>
 8019680:	085b      	lsrs	r3, r3, #1
 8019682:	f100 0001 	add.w	r0, r0, #1
 8019686:	d005      	beq.n	8019694 <__lo0bits+0x5c>
 8019688:	600b      	str	r3, [r1, #0]
 801968a:	4770      	bx	lr
 801968c:	4610      	mov	r0, r2
 801968e:	e7e8      	b.n	8019662 <__lo0bits+0x2a>
 8019690:	2000      	movs	r0, #0
 8019692:	4770      	bx	lr
 8019694:	2020      	movs	r0, #32
 8019696:	4770      	bx	lr

08019698 <__i2b>:
 8019698:	b510      	push	{r4, lr}
 801969a:	460c      	mov	r4, r1
 801969c:	2101      	movs	r1, #1
 801969e:	f7ff feff 	bl	80194a0 <_Balloc>
 80196a2:	4602      	mov	r2, r0
 80196a4:	b928      	cbnz	r0, 80196b2 <__i2b+0x1a>
 80196a6:	4b05      	ldr	r3, [pc, #20]	; (80196bc <__i2b+0x24>)
 80196a8:	4805      	ldr	r0, [pc, #20]	; (80196c0 <__i2b+0x28>)
 80196aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80196ae:	f7fe ff47 	bl	8018540 <__assert_func>
 80196b2:	2301      	movs	r3, #1
 80196b4:	6144      	str	r4, [r0, #20]
 80196b6:	6103      	str	r3, [r0, #16]
 80196b8:	bd10      	pop	{r4, pc}
 80196ba:	bf00      	nop
 80196bc:	0801c964 	.word	0x0801c964
 80196c0:	0801c9d8 	.word	0x0801c9d8

080196c4 <__multiply>:
 80196c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196c8:	4614      	mov	r4, r2
 80196ca:	690a      	ldr	r2, [r1, #16]
 80196cc:	6923      	ldr	r3, [r4, #16]
 80196ce:	429a      	cmp	r2, r3
 80196d0:	bfb8      	it	lt
 80196d2:	460b      	movlt	r3, r1
 80196d4:	460d      	mov	r5, r1
 80196d6:	bfbc      	itt	lt
 80196d8:	4625      	movlt	r5, r4
 80196da:	461c      	movlt	r4, r3
 80196dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80196e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80196e4:	68ab      	ldr	r3, [r5, #8]
 80196e6:	6869      	ldr	r1, [r5, #4]
 80196e8:	eb0a 0709 	add.w	r7, sl, r9
 80196ec:	42bb      	cmp	r3, r7
 80196ee:	b085      	sub	sp, #20
 80196f0:	bfb8      	it	lt
 80196f2:	3101      	addlt	r1, #1
 80196f4:	f7ff fed4 	bl	80194a0 <_Balloc>
 80196f8:	b930      	cbnz	r0, 8019708 <__multiply+0x44>
 80196fa:	4602      	mov	r2, r0
 80196fc:	4b42      	ldr	r3, [pc, #264]	; (8019808 <__multiply+0x144>)
 80196fe:	4843      	ldr	r0, [pc, #268]	; (801980c <__multiply+0x148>)
 8019700:	f240 115d 	movw	r1, #349	; 0x15d
 8019704:	f7fe ff1c 	bl	8018540 <__assert_func>
 8019708:	f100 0614 	add.w	r6, r0, #20
 801970c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019710:	4633      	mov	r3, r6
 8019712:	2200      	movs	r2, #0
 8019714:	4543      	cmp	r3, r8
 8019716:	d31e      	bcc.n	8019756 <__multiply+0x92>
 8019718:	f105 0c14 	add.w	ip, r5, #20
 801971c:	f104 0314 	add.w	r3, r4, #20
 8019720:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019724:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019728:	9202      	str	r2, [sp, #8]
 801972a:	ebac 0205 	sub.w	r2, ip, r5
 801972e:	3a15      	subs	r2, #21
 8019730:	f022 0203 	bic.w	r2, r2, #3
 8019734:	3204      	adds	r2, #4
 8019736:	f105 0115 	add.w	r1, r5, #21
 801973a:	458c      	cmp	ip, r1
 801973c:	bf38      	it	cc
 801973e:	2204      	movcc	r2, #4
 8019740:	9201      	str	r2, [sp, #4]
 8019742:	9a02      	ldr	r2, [sp, #8]
 8019744:	9303      	str	r3, [sp, #12]
 8019746:	429a      	cmp	r2, r3
 8019748:	d808      	bhi.n	801975c <__multiply+0x98>
 801974a:	2f00      	cmp	r7, #0
 801974c:	dc55      	bgt.n	80197fa <__multiply+0x136>
 801974e:	6107      	str	r7, [r0, #16]
 8019750:	b005      	add	sp, #20
 8019752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019756:	f843 2b04 	str.w	r2, [r3], #4
 801975a:	e7db      	b.n	8019714 <__multiply+0x50>
 801975c:	f8b3 a000 	ldrh.w	sl, [r3]
 8019760:	f1ba 0f00 	cmp.w	sl, #0
 8019764:	d020      	beq.n	80197a8 <__multiply+0xe4>
 8019766:	f105 0e14 	add.w	lr, r5, #20
 801976a:	46b1      	mov	r9, r6
 801976c:	2200      	movs	r2, #0
 801976e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019772:	f8d9 b000 	ldr.w	fp, [r9]
 8019776:	b2a1      	uxth	r1, r4
 8019778:	fa1f fb8b 	uxth.w	fp, fp
 801977c:	fb0a b101 	mla	r1, sl, r1, fp
 8019780:	4411      	add	r1, r2
 8019782:	f8d9 2000 	ldr.w	r2, [r9]
 8019786:	0c24      	lsrs	r4, r4, #16
 8019788:	0c12      	lsrs	r2, r2, #16
 801978a:	fb0a 2404 	mla	r4, sl, r4, r2
 801978e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019792:	b289      	uxth	r1, r1
 8019794:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019798:	45f4      	cmp	ip, lr
 801979a:	f849 1b04 	str.w	r1, [r9], #4
 801979e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80197a2:	d8e4      	bhi.n	801976e <__multiply+0xaa>
 80197a4:	9901      	ldr	r1, [sp, #4]
 80197a6:	5072      	str	r2, [r6, r1]
 80197a8:	9a03      	ldr	r2, [sp, #12]
 80197aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80197ae:	3304      	adds	r3, #4
 80197b0:	f1b9 0f00 	cmp.w	r9, #0
 80197b4:	d01f      	beq.n	80197f6 <__multiply+0x132>
 80197b6:	6834      	ldr	r4, [r6, #0]
 80197b8:	f105 0114 	add.w	r1, r5, #20
 80197bc:	46b6      	mov	lr, r6
 80197be:	f04f 0a00 	mov.w	sl, #0
 80197c2:	880a      	ldrh	r2, [r1, #0]
 80197c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80197c8:	fb09 b202 	mla	r2, r9, r2, fp
 80197cc:	4492      	add	sl, r2
 80197ce:	b2a4      	uxth	r4, r4
 80197d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80197d4:	f84e 4b04 	str.w	r4, [lr], #4
 80197d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80197dc:	f8be 2000 	ldrh.w	r2, [lr]
 80197e0:	0c24      	lsrs	r4, r4, #16
 80197e2:	fb09 2404 	mla	r4, r9, r4, r2
 80197e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80197ea:	458c      	cmp	ip, r1
 80197ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80197f0:	d8e7      	bhi.n	80197c2 <__multiply+0xfe>
 80197f2:	9a01      	ldr	r2, [sp, #4]
 80197f4:	50b4      	str	r4, [r6, r2]
 80197f6:	3604      	adds	r6, #4
 80197f8:	e7a3      	b.n	8019742 <__multiply+0x7e>
 80197fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80197fe:	2b00      	cmp	r3, #0
 8019800:	d1a5      	bne.n	801974e <__multiply+0x8a>
 8019802:	3f01      	subs	r7, #1
 8019804:	e7a1      	b.n	801974a <__multiply+0x86>
 8019806:	bf00      	nop
 8019808:	0801c964 	.word	0x0801c964
 801980c:	0801c9d8 	.word	0x0801c9d8

08019810 <__pow5mult>:
 8019810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019814:	4615      	mov	r5, r2
 8019816:	f012 0203 	ands.w	r2, r2, #3
 801981a:	4606      	mov	r6, r0
 801981c:	460f      	mov	r7, r1
 801981e:	d007      	beq.n	8019830 <__pow5mult+0x20>
 8019820:	4c25      	ldr	r4, [pc, #148]	; (80198b8 <__pow5mult+0xa8>)
 8019822:	3a01      	subs	r2, #1
 8019824:	2300      	movs	r3, #0
 8019826:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801982a:	f7ff fe9b 	bl	8019564 <__multadd>
 801982e:	4607      	mov	r7, r0
 8019830:	10ad      	asrs	r5, r5, #2
 8019832:	d03d      	beq.n	80198b0 <__pow5mult+0xa0>
 8019834:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019836:	b97c      	cbnz	r4, 8019858 <__pow5mult+0x48>
 8019838:	2010      	movs	r0, #16
 801983a:	f7ff fe29 	bl	8019490 <malloc>
 801983e:	4602      	mov	r2, r0
 8019840:	6270      	str	r0, [r6, #36]	; 0x24
 8019842:	b928      	cbnz	r0, 8019850 <__pow5mult+0x40>
 8019844:	4b1d      	ldr	r3, [pc, #116]	; (80198bc <__pow5mult+0xac>)
 8019846:	481e      	ldr	r0, [pc, #120]	; (80198c0 <__pow5mult+0xb0>)
 8019848:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801984c:	f7fe fe78 	bl	8018540 <__assert_func>
 8019850:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019854:	6004      	str	r4, [r0, #0]
 8019856:	60c4      	str	r4, [r0, #12]
 8019858:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801985c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019860:	b94c      	cbnz	r4, 8019876 <__pow5mult+0x66>
 8019862:	f240 2171 	movw	r1, #625	; 0x271
 8019866:	4630      	mov	r0, r6
 8019868:	f7ff ff16 	bl	8019698 <__i2b>
 801986c:	2300      	movs	r3, #0
 801986e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019872:	4604      	mov	r4, r0
 8019874:	6003      	str	r3, [r0, #0]
 8019876:	f04f 0900 	mov.w	r9, #0
 801987a:	07eb      	lsls	r3, r5, #31
 801987c:	d50a      	bpl.n	8019894 <__pow5mult+0x84>
 801987e:	4639      	mov	r1, r7
 8019880:	4622      	mov	r2, r4
 8019882:	4630      	mov	r0, r6
 8019884:	f7ff ff1e 	bl	80196c4 <__multiply>
 8019888:	4639      	mov	r1, r7
 801988a:	4680      	mov	r8, r0
 801988c:	4630      	mov	r0, r6
 801988e:	f7ff fe47 	bl	8019520 <_Bfree>
 8019892:	4647      	mov	r7, r8
 8019894:	106d      	asrs	r5, r5, #1
 8019896:	d00b      	beq.n	80198b0 <__pow5mult+0xa0>
 8019898:	6820      	ldr	r0, [r4, #0]
 801989a:	b938      	cbnz	r0, 80198ac <__pow5mult+0x9c>
 801989c:	4622      	mov	r2, r4
 801989e:	4621      	mov	r1, r4
 80198a0:	4630      	mov	r0, r6
 80198a2:	f7ff ff0f 	bl	80196c4 <__multiply>
 80198a6:	6020      	str	r0, [r4, #0]
 80198a8:	f8c0 9000 	str.w	r9, [r0]
 80198ac:	4604      	mov	r4, r0
 80198ae:	e7e4      	b.n	801987a <__pow5mult+0x6a>
 80198b0:	4638      	mov	r0, r7
 80198b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80198b6:	bf00      	nop
 80198b8:	0801cb28 	.word	0x0801cb28
 80198bc:	0801c6e4 	.word	0x0801c6e4
 80198c0:	0801c9d8 	.word	0x0801c9d8

080198c4 <__lshift>:
 80198c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198c8:	460c      	mov	r4, r1
 80198ca:	6849      	ldr	r1, [r1, #4]
 80198cc:	6923      	ldr	r3, [r4, #16]
 80198ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80198d2:	68a3      	ldr	r3, [r4, #8]
 80198d4:	4607      	mov	r7, r0
 80198d6:	4691      	mov	r9, r2
 80198d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80198dc:	f108 0601 	add.w	r6, r8, #1
 80198e0:	42b3      	cmp	r3, r6
 80198e2:	db0b      	blt.n	80198fc <__lshift+0x38>
 80198e4:	4638      	mov	r0, r7
 80198e6:	f7ff fddb 	bl	80194a0 <_Balloc>
 80198ea:	4605      	mov	r5, r0
 80198ec:	b948      	cbnz	r0, 8019902 <__lshift+0x3e>
 80198ee:	4602      	mov	r2, r0
 80198f0:	4b28      	ldr	r3, [pc, #160]	; (8019994 <__lshift+0xd0>)
 80198f2:	4829      	ldr	r0, [pc, #164]	; (8019998 <__lshift+0xd4>)
 80198f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80198f8:	f7fe fe22 	bl	8018540 <__assert_func>
 80198fc:	3101      	adds	r1, #1
 80198fe:	005b      	lsls	r3, r3, #1
 8019900:	e7ee      	b.n	80198e0 <__lshift+0x1c>
 8019902:	2300      	movs	r3, #0
 8019904:	f100 0114 	add.w	r1, r0, #20
 8019908:	f100 0210 	add.w	r2, r0, #16
 801990c:	4618      	mov	r0, r3
 801990e:	4553      	cmp	r3, sl
 8019910:	db33      	blt.n	801997a <__lshift+0xb6>
 8019912:	6920      	ldr	r0, [r4, #16]
 8019914:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019918:	f104 0314 	add.w	r3, r4, #20
 801991c:	f019 091f 	ands.w	r9, r9, #31
 8019920:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019924:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8019928:	d02b      	beq.n	8019982 <__lshift+0xbe>
 801992a:	f1c9 0e20 	rsb	lr, r9, #32
 801992e:	468a      	mov	sl, r1
 8019930:	2200      	movs	r2, #0
 8019932:	6818      	ldr	r0, [r3, #0]
 8019934:	fa00 f009 	lsl.w	r0, r0, r9
 8019938:	4302      	orrs	r2, r0
 801993a:	f84a 2b04 	str.w	r2, [sl], #4
 801993e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019942:	459c      	cmp	ip, r3
 8019944:	fa22 f20e 	lsr.w	r2, r2, lr
 8019948:	d8f3      	bhi.n	8019932 <__lshift+0x6e>
 801994a:	ebac 0304 	sub.w	r3, ip, r4
 801994e:	3b15      	subs	r3, #21
 8019950:	f023 0303 	bic.w	r3, r3, #3
 8019954:	3304      	adds	r3, #4
 8019956:	f104 0015 	add.w	r0, r4, #21
 801995a:	4584      	cmp	ip, r0
 801995c:	bf38      	it	cc
 801995e:	2304      	movcc	r3, #4
 8019960:	50ca      	str	r2, [r1, r3]
 8019962:	b10a      	cbz	r2, 8019968 <__lshift+0xa4>
 8019964:	f108 0602 	add.w	r6, r8, #2
 8019968:	3e01      	subs	r6, #1
 801996a:	4638      	mov	r0, r7
 801996c:	612e      	str	r6, [r5, #16]
 801996e:	4621      	mov	r1, r4
 8019970:	f7ff fdd6 	bl	8019520 <_Bfree>
 8019974:	4628      	mov	r0, r5
 8019976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801997a:	f842 0f04 	str.w	r0, [r2, #4]!
 801997e:	3301      	adds	r3, #1
 8019980:	e7c5      	b.n	801990e <__lshift+0x4a>
 8019982:	3904      	subs	r1, #4
 8019984:	f853 2b04 	ldr.w	r2, [r3], #4
 8019988:	f841 2f04 	str.w	r2, [r1, #4]!
 801998c:	459c      	cmp	ip, r3
 801998e:	d8f9      	bhi.n	8019984 <__lshift+0xc0>
 8019990:	e7ea      	b.n	8019968 <__lshift+0xa4>
 8019992:	bf00      	nop
 8019994:	0801c964 	.word	0x0801c964
 8019998:	0801c9d8 	.word	0x0801c9d8

0801999c <__mcmp>:
 801999c:	b530      	push	{r4, r5, lr}
 801999e:	6902      	ldr	r2, [r0, #16]
 80199a0:	690c      	ldr	r4, [r1, #16]
 80199a2:	1b12      	subs	r2, r2, r4
 80199a4:	d10e      	bne.n	80199c4 <__mcmp+0x28>
 80199a6:	f100 0314 	add.w	r3, r0, #20
 80199aa:	3114      	adds	r1, #20
 80199ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80199b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80199b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80199b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80199bc:	42a5      	cmp	r5, r4
 80199be:	d003      	beq.n	80199c8 <__mcmp+0x2c>
 80199c0:	d305      	bcc.n	80199ce <__mcmp+0x32>
 80199c2:	2201      	movs	r2, #1
 80199c4:	4610      	mov	r0, r2
 80199c6:	bd30      	pop	{r4, r5, pc}
 80199c8:	4283      	cmp	r3, r0
 80199ca:	d3f3      	bcc.n	80199b4 <__mcmp+0x18>
 80199cc:	e7fa      	b.n	80199c4 <__mcmp+0x28>
 80199ce:	f04f 32ff 	mov.w	r2, #4294967295
 80199d2:	e7f7      	b.n	80199c4 <__mcmp+0x28>

080199d4 <__mdiff>:
 80199d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199d8:	460c      	mov	r4, r1
 80199da:	4606      	mov	r6, r0
 80199dc:	4611      	mov	r1, r2
 80199de:	4620      	mov	r0, r4
 80199e0:	4617      	mov	r7, r2
 80199e2:	f7ff ffdb 	bl	801999c <__mcmp>
 80199e6:	1e05      	subs	r5, r0, #0
 80199e8:	d110      	bne.n	8019a0c <__mdiff+0x38>
 80199ea:	4629      	mov	r1, r5
 80199ec:	4630      	mov	r0, r6
 80199ee:	f7ff fd57 	bl	80194a0 <_Balloc>
 80199f2:	b930      	cbnz	r0, 8019a02 <__mdiff+0x2e>
 80199f4:	4b39      	ldr	r3, [pc, #228]	; (8019adc <__mdiff+0x108>)
 80199f6:	4602      	mov	r2, r0
 80199f8:	f240 2132 	movw	r1, #562	; 0x232
 80199fc:	4838      	ldr	r0, [pc, #224]	; (8019ae0 <__mdiff+0x10c>)
 80199fe:	f7fe fd9f 	bl	8018540 <__assert_func>
 8019a02:	2301      	movs	r3, #1
 8019a04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019a08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a0c:	bfa4      	itt	ge
 8019a0e:	463b      	movge	r3, r7
 8019a10:	4627      	movge	r7, r4
 8019a12:	4630      	mov	r0, r6
 8019a14:	6879      	ldr	r1, [r7, #4]
 8019a16:	bfa6      	itte	ge
 8019a18:	461c      	movge	r4, r3
 8019a1a:	2500      	movge	r5, #0
 8019a1c:	2501      	movlt	r5, #1
 8019a1e:	f7ff fd3f 	bl	80194a0 <_Balloc>
 8019a22:	b920      	cbnz	r0, 8019a2e <__mdiff+0x5a>
 8019a24:	4b2d      	ldr	r3, [pc, #180]	; (8019adc <__mdiff+0x108>)
 8019a26:	4602      	mov	r2, r0
 8019a28:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019a2c:	e7e6      	b.n	80199fc <__mdiff+0x28>
 8019a2e:	693e      	ldr	r6, [r7, #16]
 8019a30:	60c5      	str	r5, [r0, #12]
 8019a32:	6925      	ldr	r5, [r4, #16]
 8019a34:	f107 0114 	add.w	r1, r7, #20
 8019a38:	f104 0914 	add.w	r9, r4, #20
 8019a3c:	f100 0e14 	add.w	lr, r0, #20
 8019a40:	f107 0210 	add.w	r2, r7, #16
 8019a44:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019a48:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019a4c:	46f2      	mov	sl, lr
 8019a4e:	2700      	movs	r7, #0
 8019a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8019a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019a58:	fa1f f883 	uxth.w	r8, r3
 8019a5c:	fa17 f78b 	uxtah	r7, r7, fp
 8019a60:	0c1b      	lsrs	r3, r3, #16
 8019a62:	eba7 0808 	sub.w	r8, r7, r8
 8019a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019a6e:	fa1f f888 	uxth.w	r8, r8
 8019a72:	141f      	asrs	r7, r3, #16
 8019a74:	454d      	cmp	r5, r9
 8019a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8019a7e:	d8e7      	bhi.n	8019a50 <__mdiff+0x7c>
 8019a80:	1b2b      	subs	r3, r5, r4
 8019a82:	3b15      	subs	r3, #21
 8019a84:	f023 0303 	bic.w	r3, r3, #3
 8019a88:	3304      	adds	r3, #4
 8019a8a:	3415      	adds	r4, #21
 8019a8c:	42a5      	cmp	r5, r4
 8019a8e:	bf38      	it	cc
 8019a90:	2304      	movcc	r3, #4
 8019a92:	4419      	add	r1, r3
 8019a94:	4473      	add	r3, lr
 8019a96:	469e      	mov	lr, r3
 8019a98:	460d      	mov	r5, r1
 8019a9a:	4565      	cmp	r5, ip
 8019a9c:	d30e      	bcc.n	8019abc <__mdiff+0xe8>
 8019a9e:	f10c 0203 	add.w	r2, ip, #3
 8019aa2:	1a52      	subs	r2, r2, r1
 8019aa4:	f022 0203 	bic.w	r2, r2, #3
 8019aa8:	3903      	subs	r1, #3
 8019aaa:	458c      	cmp	ip, r1
 8019aac:	bf38      	it	cc
 8019aae:	2200      	movcc	r2, #0
 8019ab0:	441a      	add	r2, r3
 8019ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019ab6:	b17b      	cbz	r3, 8019ad8 <__mdiff+0x104>
 8019ab8:	6106      	str	r6, [r0, #16]
 8019aba:	e7a5      	b.n	8019a08 <__mdiff+0x34>
 8019abc:	f855 8b04 	ldr.w	r8, [r5], #4
 8019ac0:	fa17 f488 	uxtah	r4, r7, r8
 8019ac4:	1422      	asrs	r2, r4, #16
 8019ac6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019aca:	b2a4      	uxth	r4, r4
 8019acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019ad0:	f84e 4b04 	str.w	r4, [lr], #4
 8019ad4:	1417      	asrs	r7, r2, #16
 8019ad6:	e7e0      	b.n	8019a9a <__mdiff+0xc6>
 8019ad8:	3e01      	subs	r6, #1
 8019ada:	e7ea      	b.n	8019ab2 <__mdiff+0xde>
 8019adc:	0801c964 	.word	0x0801c964
 8019ae0:	0801c9d8 	.word	0x0801c9d8

08019ae4 <__d2b>:
 8019ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019ae8:	4689      	mov	r9, r1
 8019aea:	2101      	movs	r1, #1
 8019aec:	ec57 6b10 	vmov	r6, r7, d0
 8019af0:	4690      	mov	r8, r2
 8019af2:	f7ff fcd5 	bl	80194a0 <_Balloc>
 8019af6:	4604      	mov	r4, r0
 8019af8:	b930      	cbnz	r0, 8019b08 <__d2b+0x24>
 8019afa:	4602      	mov	r2, r0
 8019afc:	4b25      	ldr	r3, [pc, #148]	; (8019b94 <__d2b+0xb0>)
 8019afe:	4826      	ldr	r0, [pc, #152]	; (8019b98 <__d2b+0xb4>)
 8019b00:	f240 310a 	movw	r1, #778	; 0x30a
 8019b04:	f7fe fd1c 	bl	8018540 <__assert_func>
 8019b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019b10:	bb35      	cbnz	r5, 8019b60 <__d2b+0x7c>
 8019b12:	2e00      	cmp	r6, #0
 8019b14:	9301      	str	r3, [sp, #4]
 8019b16:	d028      	beq.n	8019b6a <__d2b+0x86>
 8019b18:	4668      	mov	r0, sp
 8019b1a:	9600      	str	r6, [sp, #0]
 8019b1c:	f7ff fd8c 	bl	8019638 <__lo0bits>
 8019b20:	9900      	ldr	r1, [sp, #0]
 8019b22:	b300      	cbz	r0, 8019b66 <__d2b+0x82>
 8019b24:	9a01      	ldr	r2, [sp, #4]
 8019b26:	f1c0 0320 	rsb	r3, r0, #32
 8019b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8019b2e:	430b      	orrs	r3, r1
 8019b30:	40c2      	lsrs	r2, r0
 8019b32:	6163      	str	r3, [r4, #20]
 8019b34:	9201      	str	r2, [sp, #4]
 8019b36:	9b01      	ldr	r3, [sp, #4]
 8019b38:	61a3      	str	r3, [r4, #24]
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	bf14      	ite	ne
 8019b3e:	2202      	movne	r2, #2
 8019b40:	2201      	moveq	r2, #1
 8019b42:	6122      	str	r2, [r4, #16]
 8019b44:	b1d5      	cbz	r5, 8019b7c <__d2b+0x98>
 8019b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019b4a:	4405      	add	r5, r0
 8019b4c:	f8c9 5000 	str.w	r5, [r9]
 8019b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019b54:	f8c8 0000 	str.w	r0, [r8]
 8019b58:	4620      	mov	r0, r4
 8019b5a:	b003      	add	sp, #12
 8019b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019b64:	e7d5      	b.n	8019b12 <__d2b+0x2e>
 8019b66:	6161      	str	r1, [r4, #20]
 8019b68:	e7e5      	b.n	8019b36 <__d2b+0x52>
 8019b6a:	a801      	add	r0, sp, #4
 8019b6c:	f7ff fd64 	bl	8019638 <__lo0bits>
 8019b70:	9b01      	ldr	r3, [sp, #4]
 8019b72:	6163      	str	r3, [r4, #20]
 8019b74:	2201      	movs	r2, #1
 8019b76:	6122      	str	r2, [r4, #16]
 8019b78:	3020      	adds	r0, #32
 8019b7a:	e7e3      	b.n	8019b44 <__d2b+0x60>
 8019b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019b84:	f8c9 0000 	str.w	r0, [r9]
 8019b88:	6918      	ldr	r0, [r3, #16]
 8019b8a:	f7ff fd35 	bl	80195f8 <__hi0bits>
 8019b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019b92:	e7df      	b.n	8019b54 <__d2b+0x70>
 8019b94:	0801c964 	.word	0x0801c964
 8019b98:	0801c9d8 	.word	0x0801c9d8

08019b9c <_calloc_r>:
 8019b9c:	b513      	push	{r0, r1, r4, lr}
 8019b9e:	434a      	muls	r2, r1
 8019ba0:	4611      	mov	r1, r2
 8019ba2:	9201      	str	r2, [sp, #4]
 8019ba4:	f000 f85a 	bl	8019c5c <_malloc_r>
 8019ba8:	4604      	mov	r4, r0
 8019baa:	b118      	cbz	r0, 8019bb4 <_calloc_r+0x18>
 8019bac:	9a01      	ldr	r2, [sp, #4]
 8019bae:	2100      	movs	r1, #0
 8019bb0:	f7fd fecc 	bl	801794c <memset>
 8019bb4:	4620      	mov	r0, r4
 8019bb6:	b002      	add	sp, #8
 8019bb8:	bd10      	pop	{r4, pc}
	...

08019bbc <_free_r>:
 8019bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019bbe:	2900      	cmp	r1, #0
 8019bc0:	d048      	beq.n	8019c54 <_free_r+0x98>
 8019bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019bc6:	9001      	str	r0, [sp, #4]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	f1a1 0404 	sub.w	r4, r1, #4
 8019bce:	bfb8      	it	lt
 8019bd0:	18e4      	addlt	r4, r4, r3
 8019bd2:	f000 fdf5 	bl	801a7c0 <__malloc_lock>
 8019bd6:	4a20      	ldr	r2, [pc, #128]	; (8019c58 <_free_r+0x9c>)
 8019bd8:	9801      	ldr	r0, [sp, #4]
 8019bda:	6813      	ldr	r3, [r2, #0]
 8019bdc:	4615      	mov	r5, r2
 8019bde:	b933      	cbnz	r3, 8019bee <_free_r+0x32>
 8019be0:	6063      	str	r3, [r4, #4]
 8019be2:	6014      	str	r4, [r2, #0]
 8019be4:	b003      	add	sp, #12
 8019be6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019bea:	f000 bdef 	b.w	801a7cc <__malloc_unlock>
 8019bee:	42a3      	cmp	r3, r4
 8019bf0:	d90b      	bls.n	8019c0a <_free_r+0x4e>
 8019bf2:	6821      	ldr	r1, [r4, #0]
 8019bf4:	1862      	adds	r2, r4, r1
 8019bf6:	4293      	cmp	r3, r2
 8019bf8:	bf04      	itt	eq
 8019bfa:	681a      	ldreq	r2, [r3, #0]
 8019bfc:	685b      	ldreq	r3, [r3, #4]
 8019bfe:	6063      	str	r3, [r4, #4]
 8019c00:	bf04      	itt	eq
 8019c02:	1852      	addeq	r2, r2, r1
 8019c04:	6022      	streq	r2, [r4, #0]
 8019c06:	602c      	str	r4, [r5, #0]
 8019c08:	e7ec      	b.n	8019be4 <_free_r+0x28>
 8019c0a:	461a      	mov	r2, r3
 8019c0c:	685b      	ldr	r3, [r3, #4]
 8019c0e:	b10b      	cbz	r3, 8019c14 <_free_r+0x58>
 8019c10:	42a3      	cmp	r3, r4
 8019c12:	d9fa      	bls.n	8019c0a <_free_r+0x4e>
 8019c14:	6811      	ldr	r1, [r2, #0]
 8019c16:	1855      	adds	r5, r2, r1
 8019c18:	42a5      	cmp	r5, r4
 8019c1a:	d10b      	bne.n	8019c34 <_free_r+0x78>
 8019c1c:	6824      	ldr	r4, [r4, #0]
 8019c1e:	4421      	add	r1, r4
 8019c20:	1854      	adds	r4, r2, r1
 8019c22:	42a3      	cmp	r3, r4
 8019c24:	6011      	str	r1, [r2, #0]
 8019c26:	d1dd      	bne.n	8019be4 <_free_r+0x28>
 8019c28:	681c      	ldr	r4, [r3, #0]
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	6053      	str	r3, [r2, #4]
 8019c2e:	4421      	add	r1, r4
 8019c30:	6011      	str	r1, [r2, #0]
 8019c32:	e7d7      	b.n	8019be4 <_free_r+0x28>
 8019c34:	d902      	bls.n	8019c3c <_free_r+0x80>
 8019c36:	230c      	movs	r3, #12
 8019c38:	6003      	str	r3, [r0, #0]
 8019c3a:	e7d3      	b.n	8019be4 <_free_r+0x28>
 8019c3c:	6825      	ldr	r5, [r4, #0]
 8019c3e:	1961      	adds	r1, r4, r5
 8019c40:	428b      	cmp	r3, r1
 8019c42:	bf04      	itt	eq
 8019c44:	6819      	ldreq	r1, [r3, #0]
 8019c46:	685b      	ldreq	r3, [r3, #4]
 8019c48:	6063      	str	r3, [r4, #4]
 8019c4a:	bf04      	itt	eq
 8019c4c:	1949      	addeq	r1, r1, r5
 8019c4e:	6021      	streq	r1, [r4, #0]
 8019c50:	6054      	str	r4, [r2, #4]
 8019c52:	e7c7      	b.n	8019be4 <_free_r+0x28>
 8019c54:	b003      	add	sp, #12
 8019c56:	bd30      	pop	{r4, r5, pc}
 8019c58:	200010c4 	.word	0x200010c4

08019c5c <_malloc_r>:
 8019c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c5e:	1ccd      	adds	r5, r1, #3
 8019c60:	f025 0503 	bic.w	r5, r5, #3
 8019c64:	3508      	adds	r5, #8
 8019c66:	2d0c      	cmp	r5, #12
 8019c68:	bf38      	it	cc
 8019c6a:	250c      	movcc	r5, #12
 8019c6c:	2d00      	cmp	r5, #0
 8019c6e:	4606      	mov	r6, r0
 8019c70:	db01      	blt.n	8019c76 <_malloc_r+0x1a>
 8019c72:	42a9      	cmp	r1, r5
 8019c74:	d903      	bls.n	8019c7e <_malloc_r+0x22>
 8019c76:	230c      	movs	r3, #12
 8019c78:	6033      	str	r3, [r6, #0]
 8019c7a:	2000      	movs	r0, #0
 8019c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c7e:	f000 fd9f 	bl	801a7c0 <__malloc_lock>
 8019c82:	4921      	ldr	r1, [pc, #132]	; (8019d08 <_malloc_r+0xac>)
 8019c84:	680a      	ldr	r2, [r1, #0]
 8019c86:	4614      	mov	r4, r2
 8019c88:	b99c      	cbnz	r4, 8019cb2 <_malloc_r+0x56>
 8019c8a:	4f20      	ldr	r7, [pc, #128]	; (8019d0c <_malloc_r+0xb0>)
 8019c8c:	683b      	ldr	r3, [r7, #0]
 8019c8e:	b923      	cbnz	r3, 8019c9a <_malloc_r+0x3e>
 8019c90:	4621      	mov	r1, r4
 8019c92:	4630      	mov	r0, r6
 8019c94:	f000 faf2 	bl	801a27c <_sbrk_r>
 8019c98:	6038      	str	r0, [r7, #0]
 8019c9a:	4629      	mov	r1, r5
 8019c9c:	4630      	mov	r0, r6
 8019c9e:	f000 faed 	bl	801a27c <_sbrk_r>
 8019ca2:	1c43      	adds	r3, r0, #1
 8019ca4:	d123      	bne.n	8019cee <_malloc_r+0x92>
 8019ca6:	230c      	movs	r3, #12
 8019ca8:	6033      	str	r3, [r6, #0]
 8019caa:	4630      	mov	r0, r6
 8019cac:	f000 fd8e 	bl	801a7cc <__malloc_unlock>
 8019cb0:	e7e3      	b.n	8019c7a <_malloc_r+0x1e>
 8019cb2:	6823      	ldr	r3, [r4, #0]
 8019cb4:	1b5b      	subs	r3, r3, r5
 8019cb6:	d417      	bmi.n	8019ce8 <_malloc_r+0x8c>
 8019cb8:	2b0b      	cmp	r3, #11
 8019cba:	d903      	bls.n	8019cc4 <_malloc_r+0x68>
 8019cbc:	6023      	str	r3, [r4, #0]
 8019cbe:	441c      	add	r4, r3
 8019cc0:	6025      	str	r5, [r4, #0]
 8019cc2:	e004      	b.n	8019cce <_malloc_r+0x72>
 8019cc4:	6863      	ldr	r3, [r4, #4]
 8019cc6:	42a2      	cmp	r2, r4
 8019cc8:	bf0c      	ite	eq
 8019cca:	600b      	streq	r3, [r1, #0]
 8019ccc:	6053      	strne	r3, [r2, #4]
 8019cce:	4630      	mov	r0, r6
 8019cd0:	f000 fd7c 	bl	801a7cc <__malloc_unlock>
 8019cd4:	f104 000b 	add.w	r0, r4, #11
 8019cd8:	1d23      	adds	r3, r4, #4
 8019cda:	f020 0007 	bic.w	r0, r0, #7
 8019cde:	1ac2      	subs	r2, r0, r3
 8019ce0:	d0cc      	beq.n	8019c7c <_malloc_r+0x20>
 8019ce2:	1a1b      	subs	r3, r3, r0
 8019ce4:	50a3      	str	r3, [r4, r2]
 8019ce6:	e7c9      	b.n	8019c7c <_malloc_r+0x20>
 8019ce8:	4622      	mov	r2, r4
 8019cea:	6864      	ldr	r4, [r4, #4]
 8019cec:	e7cc      	b.n	8019c88 <_malloc_r+0x2c>
 8019cee:	1cc4      	adds	r4, r0, #3
 8019cf0:	f024 0403 	bic.w	r4, r4, #3
 8019cf4:	42a0      	cmp	r0, r4
 8019cf6:	d0e3      	beq.n	8019cc0 <_malloc_r+0x64>
 8019cf8:	1a21      	subs	r1, r4, r0
 8019cfa:	4630      	mov	r0, r6
 8019cfc:	f000 fabe 	bl	801a27c <_sbrk_r>
 8019d00:	3001      	adds	r0, #1
 8019d02:	d1dd      	bne.n	8019cc0 <_malloc_r+0x64>
 8019d04:	e7cf      	b.n	8019ca6 <_malloc_r+0x4a>
 8019d06:	bf00      	nop
 8019d08:	200010c4 	.word	0x200010c4
 8019d0c:	200010c8 	.word	0x200010c8

08019d10 <__ssputs_r>:
 8019d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d14:	688e      	ldr	r6, [r1, #8]
 8019d16:	429e      	cmp	r6, r3
 8019d18:	4682      	mov	sl, r0
 8019d1a:	460c      	mov	r4, r1
 8019d1c:	4690      	mov	r8, r2
 8019d1e:	461f      	mov	r7, r3
 8019d20:	d838      	bhi.n	8019d94 <__ssputs_r+0x84>
 8019d22:	898a      	ldrh	r2, [r1, #12]
 8019d24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019d28:	d032      	beq.n	8019d90 <__ssputs_r+0x80>
 8019d2a:	6825      	ldr	r5, [r4, #0]
 8019d2c:	6909      	ldr	r1, [r1, #16]
 8019d2e:	eba5 0901 	sub.w	r9, r5, r1
 8019d32:	6965      	ldr	r5, [r4, #20]
 8019d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019d38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019d3c:	3301      	adds	r3, #1
 8019d3e:	444b      	add	r3, r9
 8019d40:	106d      	asrs	r5, r5, #1
 8019d42:	429d      	cmp	r5, r3
 8019d44:	bf38      	it	cc
 8019d46:	461d      	movcc	r5, r3
 8019d48:	0553      	lsls	r3, r2, #21
 8019d4a:	d531      	bpl.n	8019db0 <__ssputs_r+0xa0>
 8019d4c:	4629      	mov	r1, r5
 8019d4e:	f7ff ff85 	bl	8019c5c <_malloc_r>
 8019d52:	4606      	mov	r6, r0
 8019d54:	b950      	cbnz	r0, 8019d6c <__ssputs_r+0x5c>
 8019d56:	230c      	movs	r3, #12
 8019d58:	f8ca 3000 	str.w	r3, [sl]
 8019d5c:	89a3      	ldrh	r3, [r4, #12]
 8019d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019d62:	81a3      	strh	r3, [r4, #12]
 8019d64:	f04f 30ff 	mov.w	r0, #4294967295
 8019d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d6c:	6921      	ldr	r1, [r4, #16]
 8019d6e:	464a      	mov	r2, r9
 8019d70:	f7fd fdde 	bl	8017930 <memcpy>
 8019d74:	89a3      	ldrh	r3, [r4, #12]
 8019d76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d7e:	81a3      	strh	r3, [r4, #12]
 8019d80:	6126      	str	r6, [r4, #16]
 8019d82:	6165      	str	r5, [r4, #20]
 8019d84:	444e      	add	r6, r9
 8019d86:	eba5 0509 	sub.w	r5, r5, r9
 8019d8a:	6026      	str	r6, [r4, #0]
 8019d8c:	60a5      	str	r5, [r4, #8]
 8019d8e:	463e      	mov	r6, r7
 8019d90:	42be      	cmp	r6, r7
 8019d92:	d900      	bls.n	8019d96 <__ssputs_r+0x86>
 8019d94:	463e      	mov	r6, r7
 8019d96:	4632      	mov	r2, r6
 8019d98:	6820      	ldr	r0, [r4, #0]
 8019d9a:	4641      	mov	r1, r8
 8019d9c:	f000 fcf6 	bl	801a78c <memmove>
 8019da0:	68a3      	ldr	r3, [r4, #8]
 8019da2:	6822      	ldr	r2, [r4, #0]
 8019da4:	1b9b      	subs	r3, r3, r6
 8019da6:	4432      	add	r2, r6
 8019da8:	60a3      	str	r3, [r4, #8]
 8019daa:	6022      	str	r2, [r4, #0]
 8019dac:	2000      	movs	r0, #0
 8019dae:	e7db      	b.n	8019d68 <__ssputs_r+0x58>
 8019db0:	462a      	mov	r2, r5
 8019db2:	f000 fd11 	bl	801a7d8 <_realloc_r>
 8019db6:	4606      	mov	r6, r0
 8019db8:	2800      	cmp	r0, #0
 8019dba:	d1e1      	bne.n	8019d80 <__ssputs_r+0x70>
 8019dbc:	6921      	ldr	r1, [r4, #16]
 8019dbe:	4650      	mov	r0, sl
 8019dc0:	f7ff fefc 	bl	8019bbc <_free_r>
 8019dc4:	e7c7      	b.n	8019d56 <__ssputs_r+0x46>
	...

08019dc8 <_svfiprintf_r>:
 8019dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dcc:	4698      	mov	r8, r3
 8019dce:	898b      	ldrh	r3, [r1, #12]
 8019dd0:	061b      	lsls	r3, r3, #24
 8019dd2:	b09d      	sub	sp, #116	; 0x74
 8019dd4:	4607      	mov	r7, r0
 8019dd6:	460d      	mov	r5, r1
 8019dd8:	4614      	mov	r4, r2
 8019dda:	d50e      	bpl.n	8019dfa <_svfiprintf_r+0x32>
 8019ddc:	690b      	ldr	r3, [r1, #16]
 8019dde:	b963      	cbnz	r3, 8019dfa <_svfiprintf_r+0x32>
 8019de0:	2140      	movs	r1, #64	; 0x40
 8019de2:	f7ff ff3b 	bl	8019c5c <_malloc_r>
 8019de6:	6028      	str	r0, [r5, #0]
 8019de8:	6128      	str	r0, [r5, #16]
 8019dea:	b920      	cbnz	r0, 8019df6 <_svfiprintf_r+0x2e>
 8019dec:	230c      	movs	r3, #12
 8019dee:	603b      	str	r3, [r7, #0]
 8019df0:	f04f 30ff 	mov.w	r0, #4294967295
 8019df4:	e0d1      	b.n	8019f9a <_svfiprintf_r+0x1d2>
 8019df6:	2340      	movs	r3, #64	; 0x40
 8019df8:	616b      	str	r3, [r5, #20]
 8019dfa:	2300      	movs	r3, #0
 8019dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8019dfe:	2320      	movs	r3, #32
 8019e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8019e08:	2330      	movs	r3, #48	; 0x30
 8019e0a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019fb4 <_svfiprintf_r+0x1ec>
 8019e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019e12:	f04f 0901 	mov.w	r9, #1
 8019e16:	4623      	mov	r3, r4
 8019e18:	469a      	mov	sl, r3
 8019e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019e1e:	b10a      	cbz	r2, 8019e24 <_svfiprintf_r+0x5c>
 8019e20:	2a25      	cmp	r2, #37	; 0x25
 8019e22:	d1f9      	bne.n	8019e18 <_svfiprintf_r+0x50>
 8019e24:	ebba 0b04 	subs.w	fp, sl, r4
 8019e28:	d00b      	beq.n	8019e42 <_svfiprintf_r+0x7a>
 8019e2a:	465b      	mov	r3, fp
 8019e2c:	4622      	mov	r2, r4
 8019e2e:	4629      	mov	r1, r5
 8019e30:	4638      	mov	r0, r7
 8019e32:	f7ff ff6d 	bl	8019d10 <__ssputs_r>
 8019e36:	3001      	adds	r0, #1
 8019e38:	f000 80aa 	beq.w	8019f90 <_svfiprintf_r+0x1c8>
 8019e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019e3e:	445a      	add	r2, fp
 8019e40:	9209      	str	r2, [sp, #36]	; 0x24
 8019e42:	f89a 3000 	ldrb.w	r3, [sl]
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	f000 80a2 	beq.w	8019f90 <_svfiprintf_r+0x1c8>
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8019e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e56:	f10a 0a01 	add.w	sl, sl, #1
 8019e5a:	9304      	str	r3, [sp, #16]
 8019e5c:	9307      	str	r3, [sp, #28]
 8019e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019e62:	931a      	str	r3, [sp, #104]	; 0x68
 8019e64:	4654      	mov	r4, sl
 8019e66:	2205      	movs	r2, #5
 8019e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e6c:	4851      	ldr	r0, [pc, #324]	; (8019fb4 <_svfiprintf_r+0x1ec>)
 8019e6e:	f7e6 f9b7 	bl	80001e0 <memchr>
 8019e72:	9a04      	ldr	r2, [sp, #16]
 8019e74:	b9d8      	cbnz	r0, 8019eae <_svfiprintf_r+0xe6>
 8019e76:	06d0      	lsls	r0, r2, #27
 8019e78:	bf44      	itt	mi
 8019e7a:	2320      	movmi	r3, #32
 8019e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e80:	0711      	lsls	r1, r2, #28
 8019e82:	bf44      	itt	mi
 8019e84:	232b      	movmi	r3, #43	; 0x2b
 8019e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8019e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8019e90:	d015      	beq.n	8019ebe <_svfiprintf_r+0xf6>
 8019e92:	9a07      	ldr	r2, [sp, #28]
 8019e94:	4654      	mov	r4, sl
 8019e96:	2000      	movs	r0, #0
 8019e98:	f04f 0c0a 	mov.w	ip, #10
 8019e9c:	4621      	mov	r1, r4
 8019e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ea2:	3b30      	subs	r3, #48	; 0x30
 8019ea4:	2b09      	cmp	r3, #9
 8019ea6:	d94e      	bls.n	8019f46 <_svfiprintf_r+0x17e>
 8019ea8:	b1b0      	cbz	r0, 8019ed8 <_svfiprintf_r+0x110>
 8019eaa:	9207      	str	r2, [sp, #28]
 8019eac:	e014      	b.n	8019ed8 <_svfiprintf_r+0x110>
 8019eae:	eba0 0308 	sub.w	r3, r0, r8
 8019eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8019eb6:	4313      	orrs	r3, r2
 8019eb8:	9304      	str	r3, [sp, #16]
 8019eba:	46a2      	mov	sl, r4
 8019ebc:	e7d2      	b.n	8019e64 <_svfiprintf_r+0x9c>
 8019ebe:	9b03      	ldr	r3, [sp, #12]
 8019ec0:	1d19      	adds	r1, r3, #4
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	9103      	str	r1, [sp, #12]
 8019ec6:	2b00      	cmp	r3, #0
 8019ec8:	bfbb      	ittet	lt
 8019eca:	425b      	neglt	r3, r3
 8019ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8019ed0:	9307      	strge	r3, [sp, #28]
 8019ed2:	9307      	strlt	r3, [sp, #28]
 8019ed4:	bfb8      	it	lt
 8019ed6:	9204      	strlt	r2, [sp, #16]
 8019ed8:	7823      	ldrb	r3, [r4, #0]
 8019eda:	2b2e      	cmp	r3, #46	; 0x2e
 8019edc:	d10c      	bne.n	8019ef8 <_svfiprintf_r+0x130>
 8019ede:	7863      	ldrb	r3, [r4, #1]
 8019ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8019ee2:	d135      	bne.n	8019f50 <_svfiprintf_r+0x188>
 8019ee4:	9b03      	ldr	r3, [sp, #12]
 8019ee6:	1d1a      	adds	r2, r3, #4
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	9203      	str	r2, [sp, #12]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	bfb8      	it	lt
 8019ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8019ef4:	3402      	adds	r4, #2
 8019ef6:	9305      	str	r3, [sp, #20]
 8019ef8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019fc4 <_svfiprintf_r+0x1fc>
 8019efc:	7821      	ldrb	r1, [r4, #0]
 8019efe:	2203      	movs	r2, #3
 8019f00:	4650      	mov	r0, sl
 8019f02:	f7e6 f96d 	bl	80001e0 <memchr>
 8019f06:	b140      	cbz	r0, 8019f1a <_svfiprintf_r+0x152>
 8019f08:	2340      	movs	r3, #64	; 0x40
 8019f0a:	eba0 000a 	sub.w	r0, r0, sl
 8019f0e:	fa03 f000 	lsl.w	r0, r3, r0
 8019f12:	9b04      	ldr	r3, [sp, #16]
 8019f14:	4303      	orrs	r3, r0
 8019f16:	3401      	adds	r4, #1
 8019f18:	9304      	str	r3, [sp, #16]
 8019f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f1e:	4826      	ldr	r0, [pc, #152]	; (8019fb8 <_svfiprintf_r+0x1f0>)
 8019f20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019f24:	2206      	movs	r2, #6
 8019f26:	f7e6 f95b 	bl	80001e0 <memchr>
 8019f2a:	2800      	cmp	r0, #0
 8019f2c:	d038      	beq.n	8019fa0 <_svfiprintf_r+0x1d8>
 8019f2e:	4b23      	ldr	r3, [pc, #140]	; (8019fbc <_svfiprintf_r+0x1f4>)
 8019f30:	bb1b      	cbnz	r3, 8019f7a <_svfiprintf_r+0x1b2>
 8019f32:	9b03      	ldr	r3, [sp, #12]
 8019f34:	3307      	adds	r3, #7
 8019f36:	f023 0307 	bic.w	r3, r3, #7
 8019f3a:	3308      	adds	r3, #8
 8019f3c:	9303      	str	r3, [sp, #12]
 8019f3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019f40:	4433      	add	r3, r6
 8019f42:	9309      	str	r3, [sp, #36]	; 0x24
 8019f44:	e767      	b.n	8019e16 <_svfiprintf_r+0x4e>
 8019f46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f4a:	460c      	mov	r4, r1
 8019f4c:	2001      	movs	r0, #1
 8019f4e:	e7a5      	b.n	8019e9c <_svfiprintf_r+0xd4>
 8019f50:	2300      	movs	r3, #0
 8019f52:	3401      	adds	r4, #1
 8019f54:	9305      	str	r3, [sp, #20]
 8019f56:	4619      	mov	r1, r3
 8019f58:	f04f 0c0a 	mov.w	ip, #10
 8019f5c:	4620      	mov	r0, r4
 8019f5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f62:	3a30      	subs	r2, #48	; 0x30
 8019f64:	2a09      	cmp	r2, #9
 8019f66:	d903      	bls.n	8019f70 <_svfiprintf_r+0x1a8>
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d0c5      	beq.n	8019ef8 <_svfiprintf_r+0x130>
 8019f6c:	9105      	str	r1, [sp, #20]
 8019f6e:	e7c3      	b.n	8019ef8 <_svfiprintf_r+0x130>
 8019f70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f74:	4604      	mov	r4, r0
 8019f76:	2301      	movs	r3, #1
 8019f78:	e7f0      	b.n	8019f5c <_svfiprintf_r+0x194>
 8019f7a:	ab03      	add	r3, sp, #12
 8019f7c:	9300      	str	r3, [sp, #0]
 8019f7e:	462a      	mov	r2, r5
 8019f80:	4b0f      	ldr	r3, [pc, #60]	; (8019fc0 <_svfiprintf_r+0x1f8>)
 8019f82:	a904      	add	r1, sp, #16
 8019f84:	4638      	mov	r0, r7
 8019f86:	f7fd fd89 	bl	8017a9c <_printf_float>
 8019f8a:	1c42      	adds	r2, r0, #1
 8019f8c:	4606      	mov	r6, r0
 8019f8e:	d1d6      	bne.n	8019f3e <_svfiprintf_r+0x176>
 8019f90:	89ab      	ldrh	r3, [r5, #12]
 8019f92:	065b      	lsls	r3, r3, #25
 8019f94:	f53f af2c 	bmi.w	8019df0 <_svfiprintf_r+0x28>
 8019f98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f9a:	b01d      	add	sp, #116	; 0x74
 8019f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fa0:	ab03      	add	r3, sp, #12
 8019fa2:	9300      	str	r3, [sp, #0]
 8019fa4:	462a      	mov	r2, r5
 8019fa6:	4b06      	ldr	r3, [pc, #24]	; (8019fc0 <_svfiprintf_r+0x1f8>)
 8019fa8:	a904      	add	r1, sp, #16
 8019faa:	4638      	mov	r0, r7
 8019fac:	f7fe f81a 	bl	8017fe4 <_printf_i>
 8019fb0:	e7eb      	b.n	8019f8a <_svfiprintf_r+0x1c2>
 8019fb2:	bf00      	nop
 8019fb4:	0801cb34 	.word	0x0801cb34
 8019fb8:	0801cb3e 	.word	0x0801cb3e
 8019fbc:	08017a9d 	.word	0x08017a9d
 8019fc0:	08019d11 	.word	0x08019d11
 8019fc4:	0801cb3a 	.word	0x0801cb3a

08019fc8 <__sfputc_r>:
 8019fc8:	6893      	ldr	r3, [r2, #8]
 8019fca:	3b01      	subs	r3, #1
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	b410      	push	{r4}
 8019fd0:	6093      	str	r3, [r2, #8]
 8019fd2:	da08      	bge.n	8019fe6 <__sfputc_r+0x1e>
 8019fd4:	6994      	ldr	r4, [r2, #24]
 8019fd6:	42a3      	cmp	r3, r4
 8019fd8:	db01      	blt.n	8019fde <__sfputc_r+0x16>
 8019fda:	290a      	cmp	r1, #10
 8019fdc:	d103      	bne.n	8019fe6 <__sfputc_r+0x1e>
 8019fde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019fe2:	f000 b99f 	b.w	801a324 <__swbuf_r>
 8019fe6:	6813      	ldr	r3, [r2, #0]
 8019fe8:	1c58      	adds	r0, r3, #1
 8019fea:	6010      	str	r0, [r2, #0]
 8019fec:	7019      	strb	r1, [r3, #0]
 8019fee:	4608      	mov	r0, r1
 8019ff0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019ff4:	4770      	bx	lr

08019ff6 <__sfputs_r>:
 8019ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ff8:	4606      	mov	r6, r0
 8019ffa:	460f      	mov	r7, r1
 8019ffc:	4614      	mov	r4, r2
 8019ffe:	18d5      	adds	r5, r2, r3
 801a000:	42ac      	cmp	r4, r5
 801a002:	d101      	bne.n	801a008 <__sfputs_r+0x12>
 801a004:	2000      	movs	r0, #0
 801a006:	e007      	b.n	801a018 <__sfputs_r+0x22>
 801a008:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a00c:	463a      	mov	r2, r7
 801a00e:	4630      	mov	r0, r6
 801a010:	f7ff ffda 	bl	8019fc8 <__sfputc_r>
 801a014:	1c43      	adds	r3, r0, #1
 801a016:	d1f3      	bne.n	801a000 <__sfputs_r+0xa>
 801a018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a01c <_vfiprintf_r>:
 801a01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a020:	460d      	mov	r5, r1
 801a022:	b09d      	sub	sp, #116	; 0x74
 801a024:	4614      	mov	r4, r2
 801a026:	4698      	mov	r8, r3
 801a028:	4606      	mov	r6, r0
 801a02a:	b118      	cbz	r0, 801a034 <_vfiprintf_r+0x18>
 801a02c:	6983      	ldr	r3, [r0, #24]
 801a02e:	b90b      	cbnz	r3, 801a034 <_vfiprintf_r+0x18>
 801a030:	f7ff f976 	bl	8019320 <__sinit>
 801a034:	4b89      	ldr	r3, [pc, #548]	; (801a25c <_vfiprintf_r+0x240>)
 801a036:	429d      	cmp	r5, r3
 801a038:	d11b      	bne.n	801a072 <_vfiprintf_r+0x56>
 801a03a:	6875      	ldr	r5, [r6, #4]
 801a03c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a03e:	07d9      	lsls	r1, r3, #31
 801a040:	d405      	bmi.n	801a04e <_vfiprintf_r+0x32>
 801a042:	89ab      	ldrh	r3, [r5, #12]
 801a044:	059a      	lsls	r2, r3, #22
 801a046:	d402      	bmi.n	801a04e <_vfiprintf_r+0x32>
 801a048:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a04a:	f7ff fa1e 	bl	801948a <__retarget_lock_acquire_recursive>
 801a04e:	89ab      	ldrh	r3, [r5, #12]
 801a050:	071b      	lsls	r3, r3, #28
 801a052:	d501      	bpl.n	801a058 <_vfiprintf_r+0x3c>
 801a054:	692b      	ldr	r3, [r5, #16]
 801a056:	b9eb      	cbnz	r3, 801a094 <_vfiprintf_r+0x78>
 801a058:	4629      	mov	r1, r5
 801a05a:	4630      	mov	r0, r6
 801a05c:	f000 f9c6 	bl	801a3ec <__swsetup_r>
 801a060:	b1c0      	cbz	r0, 801a094 <_vfiprintf_r+0x78>
 801a062:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a064:	07dc      	lsls	r4, r3, #31
 801a066:	d50e      	bpl.n	801a086 <_vfiprintf_r+0x6a>
 801a068:	f04f 30ff 	mov.w	r0, #4294967295
 801a06c:	b01d      	add	sp, #116	; 0x74
 801a06e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a072:	4b7b      	ldr	r3, [pc, #492]	; (801a260 <_vfiprintf_r+0x244>)
 801a074:	429d      	cmp	r5, r3
 801a076:	d101      	bne.n	801a07c <_vfiprintf_r+0x60>
 801a078:	68b5      	ldr	r5, [r6, #8]
 801a07a:	e7df      	b.n	801a03c <_vfiprintf_r+0x20>
 801a07c:	4b79      	ldr	r3, [pc, #484]	; (801a264 <_vfiprintf_r+0x248>)
 801a07e:	429d      	cmp	r5, r3
 801a080:	bf08      	it	eq
 801a082:	68f5      	ldreq	r5, [r6, #12]
 801a084:	e7da      	b.n	801a03c <_vfiprintf_r+0x20>
 801a086:	89ab      	ldrh	r3, [r5, #12]
 801a088:	0598      	lsls	r0, r3, #22
 801a08a:	d4ed      	bmi.n	801a068 <_vfiprintf_r+0x4c>
 801a08c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a08e:	f7ff f9fd 	bl	801948c <__retarget_lock_release_recursive>
 801a092:	e7e9      	b.n	801a068 <_vfiprintf_r+0x4c>
 801a094:	2300      	movs	r3, #0
 801a096:	9309      	str	r3, [sp, #36]	; 0x24
 801a098:	2320      	movs	r3, #32
 801a09a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a09e:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0a2:	2330      	movs	r3, #48	; 0x30
 801a0a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a268 <_vfiprintf_r+0x24c>
 801a0a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0ac:	f04f 0901 	mov.w	r9, #1
 801a0b0:	4623      	mov	r3, r4
 801a0b2:	469a      	mov	sl, r3
 801a0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a0b8:	b10a      	cbz	r2, 801a0be <_vfiprintf_r+0xa2>
 801a0ba:	2a25      	cmp	r2, #37	; 0x25
 801a0bc:	d1f9      	bne.n	801a0b2 <_vfiprintf_r+0x96>
 801a0be:	ebba 0b04 	subs.w	fp, sl, r4
 801a0c2:	d00b      	beq.n	801a0dc <_vfiprintf_r+0xc0>
 801a0c4:	465b      	mov	r3, fp
 801a0c6:	4622      	mov	r2, r4
 801a0c8:	4629      	mov	r1, r5
 801a0ca:	4630      	mov	r0, r6
 801a0cc:	f7ff ff93 	bl	8019ff6 <__sfputs_r>
 801a0d0:	3001      	adds	r0, #1
 801a0d2:	f000 80aa 	beq.w	801a22a <_vfiprintf_r+0x20e>
 801a0d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a0d8:	445a      	add	r2, fp
 801a0da:	9209      	str	r2, [sp, #36]	; 0x24
 801a0dc:	f89a 3000 	ldrb.w	r3, [sl]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	f000 80a2 	beq.w	801a22a <_vfiprintf_r+0x20e>
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a0f0:	f10a 0a01 	add.w	sl, sl, #1
 801a0f4:	9304      	str	r3, [sp, #16]
 801a0f6:	9307      	str	r3, [sp, #28]
 801a0f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a0fc:	931a      	str	r3, [sp, #104]	; 0x68
 801a0fe:	4654      	mov	r4, sl
 801a100:	2205      	movs	r2, #5
 801a102:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a106:	4858      	ldr	r0, [pc, #352]	; (801a268 <_vfiprintf_r+0x24c>)
 801a108:	f7e6 f86a 	bl	80001e0 <memchr>
 801a10c:	9a04      	ldr	r2, [sp, #16]
 801a10e:	b9d8      	cbnz	r0, 801a148 <_vfiprintf_r+0x12c>
 801a110:	06d1      	lsls	r1, r2, #27
 801a112:	bf44      	itt	mi
 801a114:	2320      	movmi	r3, #32
 801a116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a11a:	0713      	lsls	r3, r2, #28
 801a11c:	bf44      	itt	mi
 801a11e:	232b      	movmi	r3, #43	; 0x2b
 801a120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a124:	f89a 3000 	ldrb.w	r3, [sl]
 801a128:	2b2a      	cmp	r3, #42	; 0x2a
 801a12a:	d015      	beq.n	801a158 <_vfiprintf_r+0x13c>
 801a12c:	9a07      	ldr	r2, [sp, #28]
 801a12e:	4654      	mov	r4, sl
 801a130:	2000      	movs	r0, #0
 801a132:	f04f 0c0a 	mov.w	ip, #10
 801a136:	4621      	mov	r1, r4
 801a138:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a13c:	3b30      	subs	r3, #48	; 0x30
 801a13e:	2b09      	cmp	r3, #9
 801a140:	d94e      	bls.n	801a1e0 <_vfiprintf_r+0x1c4>
 801a142:	b1b0      	cbz	r0, 801a172 <_vfiprintf_r+0x156>
 801a144:	9207      	str	r2, [sp, #28]
 801a146:	e014      	b.n	801a172 <_vfiprintf_r+0x156>
 801a148:	eba0 0308 	sub.w	r3, r0, r8
 801a14c:	fa09 f303 	lsl.w	r3, r9, r3
 801a150:	4313      	orrs	r3, r2
 801a152:	9304      	str	r3, [sp, #16]
 801a154:	46a2      	mov	sl, r4
 801a156:	e7d2      	b.n	801a0fe <_vfiprintf_r+0xe2>
 801a158:	9b03      	ldr	r3, [sp, #12]
 801a15a:	1d19      	adds	r1, r3, #4
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	9103      	str	r1, [sp, #12]
 801a160:	2b00      	cmp	r3, #0
 801a162:	bfbb      	ittet	lt
 801a164:	425b      	neglt	r3, r3
 801a166:	f042 0202 	orrlt.w	r2, r2, #2
 801a16a:	9307      	strge	r3, [sp, #28]
 801a16c:	9307      	strlt	r3, [sp, #28]
 801a16e:	bfb8      	it	lt
 801a170:	9204      	strlt	r2, [sp, #16]
 801a172:	7823      	ldrb	r3, [r4, #0]
 801a174:	2b2e      	cmp	r3, #46	; 0x2e
 801a176:	d10c      	bne.n	801a192 <_vfiprintf_r+0x176>
 801a178:	7863      	ldrb	r3, [r4, #1]
 801a17a:	2b2a      	cmp	r3, #42	; 0x2a
 801a17c:	d135      	bne.n	801a1ea <_vfiprintf_r+0x1ce>
 801a17e:	9b03      	ldr	r3, [sp, #12]
 801a180:	1d1a      	adds	r2, r3, #4
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	9203      	str	r2, [sp, #12]
 801a186:	2b00      	cmp	r3, #0
 801a188:	bfb8      	it	lt
 801a18a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a18e:	3402      	adds	r4, #2
 801a190:	9305      	str	r3, [sp, #20]
 801a192:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a278 <_vfiprintf_r+0x25c>
 801a196:	7821      	ldrb	r1, [r4, #0]
 801a198:	2203      	movs	r2, #3
 801a19a:	4650      	mov	r0, sl
 801a19c:	f7e6 f820 	bl	80001e0 <memchr>
 801a1a0:	b140      	cbz	r0, 801a1b4 <_vfiprintf_r+0x198>
 801a1a2:	2340      	movs	r3, #64	; 0x40
 801a1a4:	eba0 000a 	sub.w	r0, r0, sl
 801a1a8:	fa03 f000 	lsl.w	r0, r3, r0
 801a1ac:	9b04      	ldr	r3, [sp, #16]
 801a1ae:	4303      	orrs	r3, r0
 801a1b0:	3401      	adds	r4, #1
 801a1b2:	9304      	str	r3, [sp, #16]
 801a1b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a1b8:	482c      	ldr	r0, [pc, #176]	; (801a26c <_vfiprintf_r+0x250>)
 801a1ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a1be:	2206      	movs	r2, #6
 801a1c0:	f7e6 f80e 	bl	80001e0 <memchr>
 801a1c4:	2800      	cmp	r0, #0
 801a1c6:	d03f      	beq.n	801a248 <_vfiprintf_r+0x22c>
 801a1c8:	4b29      	ldr	r3, [pc, #164]	; (801a270 <_vfiprintf_r+0x254>)
 801a1ca:	bb1b      	cbnz	r3, 801a214 <_vfiprintf_r+0x1f8>
 801a1cc:	9b03      	ldr	r3, [sp, #12]
 801a1ce:	3307      	adds	r3, #7
 801a1d0:	f023 0307 	bic.w	r3, r3, #7
 801a1d4:	3308      	adds	r3, #8
 801a1d6:	9303      	str	r3, [sp, #12]
 801a1d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1da:	443b      	add	r3, r7
 801a1dc:	9309      	str	r3, [sp, #36]	; 0x24
 801a1de:	e767      	b.n	801a0b0 <_vfiprintf_r+0x94>
 801a1e0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a1e4:	460c      	mov	r4, r1
 801a1e6:	2001      	movs	r0, #1
 801a1e8:	e7a5      	b.n	801a136 <_vfiprintf_r+0x11a>
 801a1ea:	2300      	movs	r3, #0
 801a1ec:	3401      	adds	r4, #1
 801a1ee:	9305      	str	r3, [sp, #20]
 801a1f0:	4619      	mov	r1, r3
 801a1f2:	f04f 0c0a 	mov.w	ip, #10
 801a1f6:	4620      	mov	r0, r4
 801a1f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a1fc:	3a30      	subs	r2, #48	; 0x30
 801a1fe:	2a09      	cmp	r2, #9
 801a200:	d903      	bls.n	801a20a <_vfiprintf_r+0x1ee>
 801a202:	2b00      	cmp	r3, #0
 801a204:	d0c5      	beq.n	801a192 <_vfiprintf_r+0x176>
 801a206:	9105      	str	r1, [sp, #20]
 801a208:	e7c3      	b.n	801a192 <_vfiprintf_r+0x176>
 801a20a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a20e:	4604      	mov	r4, r0
 801a210:	2301      	movs	r3, #1
 801a212:	e7f0      	b.n	801a1f6 <_vfiprintf_r+0x1da>
 801a214:	ab03      	add	r3, sp, #12
 801a216:	9300      	str	r3, [sp, #0]
 801a218:	462a      	mov	r2, r5
 801a21a:	4b16      	ldr	r3, [pc, #88]	; (801a274 <_vfiprintf_r+0x258>)
 801a21c:	a904      	add	r1, sp, #16
 801a21e:	4630      	mov	r0, r6
 801a220:	f7fd fc3c 	bl	8017a9c <_printf_float>
 801a224:	4607      	mov	r7, r0
 801a226:	1c78      	adds	r0, r7, #1
 801a228:	d1d6      	bne.n	801a1d8 <_vfiprintf_r+0x1bc>
 801a22a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a22c:	07d9      	lsls	r1, r3, #31
 801a22e:	d405      	bmi.n	801a23c <_vfiprintf_r+0x220>
 801a230:	89ab      	ldrh	r3, [r5, #12]
 801a232:	059a      	lsls	r2, r3, #22
 801a234:	d402      	bmi.n	801a23c <_vfiprintf_r+0x220>
 801a236:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a238:	f7ff f928 	bl	801948c <__retarget_lock_release_recursive>
 801a23c:	89ab      	ldrh	r3, [r5, #12]
 801a23e:	065b      	lsls	r3, r3, #25
 801a240:	f53f af12 	bmi.w	801a068 <_vfiprintf_r+0x4c>
 801a244:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a246:	e711      	b.n	801a06c <_vfiprintf_r+0x50>
 801a248:	ab03      	add	r3, sp, #12
 801a24a:	9300      	str	r3, [sp, #0]
 801a24c:	462a      	mov	r2, r5
 801a24e:	4b09      	ldr	r3, [pc, #36]	; (801a274 <_vfiprintf_r+0x258>)
 801a250:	a904      	add	r1, sp, #16
 801a252:	4630      	mov	r0, r6
 801a254:	f7fd fec6 	bl	8017fe4 <_printf_i>
 801a258:	e7e4      	b.n	801a224 <_vfiprintf_r+0x208>
 801a25a:	bf00      	nop
 801a25c:	0801c998 	.word	0x0801c998
 801a260:	0801c9b8 	.word	0x0801c9b8
 801a264:	0801c978 	.word	0x0801c978
 801a268:	0801cb34 	.word	0x0801cb34
 801a26c:	0801cb3e 	.word	0x0801cb3e
 801a270:	08017a9d 	.word	0x08017a9d
 801a274:	08019ff7 	.word	0x08019ff7
 801a278:	0801cb3a 	.word	0x0801cb3a

0801a27c <_sbrk_r>:
 801a27c:	b538      	push	{r3, r4, r5, lr}
 801a27e:	4d06      	ldr	r5, [pc, #24]	; (801a298 <_sbrk_r+0x1c>)
 801a280:	2300      	movs	r3, #0
 801a282:	4604      	mov	r4, r0
 801a284:	4608      	mov	r0, r1
 801a286:	602b      	str	r3, [r5, #0]
 801a288:	f7ef fd3a 	bl	8009d00 <_sbrk>
 801a28c:	1c43      	adds	r3, r0, #1
 801a28e:	d102      	bne.n	801a296 <_sbrk_r+0x1a>
 801a290:	682b      	ldr	r3, [r5, #0]
 801a292:	b103      	cbz	r3, 801a296 <_sbrk_r+0x1a>
 801a294:	6023      	str	r3, [r4, #0]
 801a296:	bd38      	pop	{r3, r4, r5, pc}
 801a298:	20003db0 	.word	0x20003db0

0801a29c <__sread>:
 801a29c:	b510      	push	{r4, lr}
 801a29e:	460c      	mov	r4, r1
 801a2a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2a4:	f000 fabe 	bl	801a824 <_read_r>
 801a2a8:	2800      	cmp	r0, #0
 801a2aa:	bfab      	itete	ge
 801a2ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a2ae:	89a3      	ldrhlt	r3, [r4, #12]
 801a2b0:	181b      	addge	r3, r3, r0
 801a2b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a2b6:	bfac      	ite	ge
 801a2b8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a2ba:	81a3      	strhlt	r3, [r4, #12]
 801a2bc:	bd10      	pop	{r4, pc}

0801a2be <__swrite>:
 801a2be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2c2:	461f      	mov	r7, r3
 801a2c4:	898b      	ldrh	r3, [r1, #12]
 801a2c6:	05db      	lsls	r3, r3, #23
 801a2c8:	4605      	mov	r5, r0
 801a2ca:	460c      	mov	r4, r1
 801a2cc:	4616      	mov	r6, r2
 801a2ce:	d505      	bpl.n	801a2dc <__swrite+0x1e>
 801a2d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2d4:	2302      	movs	r3, #2
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	f000 f9d0 	bl	801a67c <_lseek_r>
 801a2dc:	89a3      	ldrh	r3, [r4, #12]
 801a2de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a2e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a2e6:	81a3      	strh	r3, [r4, #12]
 801a2e8:	4632      	mov	r2, r6
 801a2ea:	463b      	mov	r3, r7
 801a2ec:	4628      	mov	r0, r5
 801a2ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a2f2:	f000 b869 	b.w	801a3c8 <_write_r>

0801a2f6 <__sseek>:
 801a2f6:	b510      	push	{r4, lr}
 801a2f8:	460c      	mov	r4, r1
 801a2fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a2fe:	f000 f9bd 	bl	801a67c <_lseek_r>
 801a302:	1c43      	adds	r3, r0, #1
 801a304:	89a3      	ldrh	r3, [r4, #12]
 801a306:	bf15      	itete	ne
 801a308:	6560      	strne	r0, [r4, #84]	; 0x54
 801a30a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a30e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a312:	81a3      	strheq	r3, [r4, #12]
 801a314:	bf18      	it	ne
 801a316:	81a3      	strhne	r3, [r4, #12]
 801a318:	bd10      	pop	{r4, pc}

0801a31a <__sclose>:
 801a31a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a31e:	f000 b8db 	b.w	801a4d8 <_close_r>
	...

0801a324 <__swbuf_r>:
 801a324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a326:	460e      	mov	r6, r1
 801a328:	4614      	mov	r4, r2
 801a32a:	4605      	mov	r5, r0
 801a32c:	b118      	cbz	r0, 801a336 <__swbuf_r+0x12>
 801a32e:	6983      	ldr	r3, [r0, #24]
 801a330:	b90b      	cbnz	r3, 801a336 <__swbuf_r+0x12>
 801a332:	f7fe fff5 	bl	8019320 <__sinit>
 801a336:	4b21      	ldr	r3, [pc, #132]	; (801a3bc <__swbuf_r+0x98>)
 801a338:	429c      	cmp	r4, r3
 801a33a:	d12b      	bne.n	801a394 <__swbuf_r+0x70>
 801a33c:	686c      	ldr	r4, [r5, #4]
 801a33e:	69a3      	ldr	r3, [r4, #24]
 801a340:	60a3      	str	r3, [r4, #8]
 801a342:	89a3      	ldrh	r3, [r4, #12]
 801a344:	071a      	lsls	r2, r3, #28
 801a346:	d52f      	bpl.n	801a3a8 <__swbuf_r+0x84>
 801a348:	6923      	ldr	r3, [r4, #16]
 801a34a:	b36b      	cbz	r3, 801a3a8 <__swbuf_r+0x84>
 801a34c:	6923      	ldr	r3, [r4, #16]
 801a34e:	6820      	ldr	r0, [r4, #0]
 801a350:	1ac0      	subs	r0, r0, r3
 801a352:	6963      	ldr	r3, [r4, #20]
 801a354:	b2f6      	uxtb	r6, r6
 801a356:	4283      	cmp	r3, r0
 801a358:	4637      	mov	r7, r6
 801a35a:	dc04      	bgt.n	801a366 <__swbuf_r+0x42>
 801a35c:	4621      	mov	r1, r4
 801a35e:	4628      	mov	r0, r5
 801a360:	f000 f950 	bl	801a604 <_fflush_r>
 801a364:	bb30      	cbnz	r0, 801a3b4 <__swbuf_r+0x90>
 801a366:	68a3      	ldr	r3, [r4, #8]
 801a368:	3b01      	subs	r3, #1
 801a36a:	60a3      	str	r3, [r4, #8]
 801a36c:	6823      	ldr	r3, [r4, #0]
 801a36e:	1c5a      	adds	r2, r3, #1
 801a370:	6022      	str	r2, [r4, #0]
 801a372:	701e      	strb	r6, [r3, #0]
 801a374:	6963      	ldr	r3, [r4, #20]
 801a376:	3001      	adds	r0, #1
 801a378:	4283      	cmp	r3, r0
 801a37a:	d004      	beq.n	801a386 <__swbuf_r+0x62>
 801a37c:	89a3      	ldrh	r3, [r4, #12]
 801a37e:	07db      	lsls	r3, r3, #31
 801a380:	d506      	bpl.n	801a390 <__swbuf_r+0x6c>
 801a382:	2e0a      	cmp	r6, #10
 801a384:	d104      	bne.n	801a390 <__swbuf_r+0x6c>
 801a386:	4621      	mov	r1, r4
 801a388:	4628      	mov	r0, r5
 801a38a:	f000 f93b 	bl	801a604 <_fflush_r>
 801a38e:	b988      	cbnz	r0, 801a3b4 <__swbuf_r+0x90>
 801a390:	4638      	mov	r0, r7
 801a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a394:	4b0a      	ldr	r3, [pc, #40]	; (801a3c0 <__swbuf_r+0x9c>)
 801a396:	429c      	cmp	r4, r3
 801a398:	d101      	bne.n	801a39e <__swbuf_r+0x7a>
 801a39a:	68ac      	ldr	r4, [r5, #8]
 801a39c:	e7cf      	b.n	801a33e <__swbuf_r+0x1a>
 801a39e:	4b09      	ldr	r3, [pc, #36]	; (801a3c4 <__swbuf_r+0xa0>)
 801a3a0:	429c      	cmp	r4, r3
 801a3a2:	bf08      	it	eq
 801a3a4:	68ec      	ldreq	r4, [r5, #12]
 801a3a6:	e7ca      	b.n	801a33e <__swbuf_r+0x1a>
 801a3a8:	4621      	mov	r1, r4
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	f000 f81e 	bl	801a3ec <__swsetup_r>
 801a3b0:	2800      	cmp	r0, #0
 801a3b2:	d0cb      	beq.n	801a34c <__swbuf_r+0x28>
 801a3b4:	f04f 37ff 	mov.w	r7, #4294967295
 801a3b8:	e7ea      	b.n	801a390 <__swbuf_r+0x6c>
 801a3ba:	bf00      	nop
 801a3bc:	0801c998 	.word	0x0801c998
 801a3c0:	0801c9b8 	.word	0x0801c9b8
 801a3c4:	0801c978 	.word	0x0801c978

0801a3c8 <_write_r>:
 801a3c8:	b538      	push	{r3, r4, r5, lr}
 801a3ca:	4d07      	ldr	r5, [pc, #28]	; (801a3e8 <_write_r+0x20>)
 801a3cc:	4604      	mov	r4, r0
 801a3ce:	4608      	mov	r0, r1
 801a3d0:	4611      	mov	r1, r2
 801a3d2:	2200      	movs	r2, #0
 801a3d4:	602a      	str	r2, [r5, #0]
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	f7ef fc41 	bl	8009c5e <_write>
 801a3dc:	1c43      	adds	r3, r0, #1
 801a3de:	d102      	bne.n	801a3e6 <_write_r+0x1e>
 801a3e0:	682b      	ldr	r3, [r5, #0]
 801a3e2:	b103      	cbz	r3, 801a3e6 <_write_r+0x1e>
 801a3e4:	6023      	str	r3, [r4, #0]
 801a3e6:	bd38      	pop	{r3, r4, r5, pc}
 801a3e8:	20003db0 	.word	0x20003db0

0801a3ec <__swsetup_r>:
 801a3ec:	4b32      	ldr	r3, [pc, #200]	; (801a4b8 <__swsetup_r+0xcc>)
 801a3ee:	b570      	push	{r4, r5, r6, lr}
 801a3f0:	681d      	ldr	r5, [r3, #0]
 801a3f2:	4606      	mov	r6, r0
 801a3f4:	460c      	mov	r4, r1
 801a3f6:	b125      	cbz	r5, 801a402 <__swsetup_r+0x16>
 801a3f8:	69ab      	ldr	r3, [r5, #24]
 801a3fa:	b913      	cbnz	r3, 801a402 <__swsetup_r+0x16>
 801a3fc:	4628      	mov	r0, r5
 801a3fe:	f7fe ff8f 	bl	8019320 <__sinit>
 801a402:	4b2e      	ldr	r3, [pc, #184]	; (801a4bc <__swsetup_r+0xd0>)
 801a404:	429c      	cmp	r4, r3
 801a406:	d10f      	bne.n	801a428 <__swsetup_r+0x3c>
 801a408:	686c      	ldr	r4, [r5, #4]
 801a40a:	89a3      	ldrh	r3, [r4, #12]
 801a40c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a410:	0719      	lsls	r1, r3, #28
 801a412:	d42c      	bmi.n	801a46e <__swsetup_r+0x82>
 801a414:	06dd      	lsls	r5, r3, #27
 801a416:	d411      	bmi.n	801a43c <__swsetup_r+0x50>
 801a418:	2309      	movs	r3, #9
 801a41a:	6033      	str	r3, [r6, #0]
 801a41c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a420:	81a3      	strh	r3, [r4, #12]
 801a422:	f04f 30ff 	mov.w	r0, #4294967295
 801a426:	e03e      	b.n	801a4a6 <__swsetup_r+0xba>
 801a428:	4b25      	ldr	r3, [pc, #148]	; (801a4c0 <__swsetup_r+0xd4>)
 801a42a:	429c      	cmp	r4, r3
 801a42c:	d101      	bne.n	801a432 <__swsetup_r+0x46>
 801a42e:	68ac      	ldr	r4, [r5, #8]
 801a430:	e7eb      	b.n	801a40a <__swsetup_r+0x1e>
 801a432:	4b24      	ldr	r3, [pc, #144]	; (801a4c4 <__swsetup_r+0xd8>)
 801a434:	429c      	cmp	r4, r3
 801a436:	bf08      	it	eq
 801a438:	68ec      	ldreq	r4, [r5, #12]
 801a43a:	e7e6      	b.n	801a40a <__swsetup_r+0x1e>
 801a43c:	0758      	lsls	r0, r3, #29
 801a43e:	d512      	bpl.n	801a466 <__swsetup_r+0x7a>
 801a440:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a442:	b141      	cbz	r1, 801a456 <__swsetup_r+0x6a>
 801a444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a448:	4299      	cmp	r1, r3
 801a44a:	d002      	beq.n	801a452 <__swsetup_r+0x66>
 801a44c:	4630      	mov	r0, r6
 801a44e:	f7ff fbb5 	bl	8019bbc <_free_r>
 801a452:	2300      	movs	r3, #0
 801a454:	6363      	str	r3, [r4, #52]	; 0x34
 801a456:	89a3      	ldrh	r3, [r4, #12]
 801a458:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a45c:	81a3      	strh	r3, [r4, #12]
 801a45e:	2300      	movs	r3, #0
 801a460:	6063      	str	r3, [r4, #4]
 801a462:	6923      	ldr	r3, [r4, #16]
 801a464:	6023      	str	r3, [r4, #0]
 801a466:	89a3      	ldrh	r3, [r4, #12]
 801a468:	f043 0308 	orr.w	r3, r3, #8
 801a46c:	81a3      	strh	r3, [r4, #12]
 801a46e:	6923      	ldr	r3, [r4, #16]
 801a470:	b94b      	cbnz	r3, 801a486 <__swsetup_r+0x9a>
 801a472:	89a3      	ldrh	r3, [r4, #12]
 801a474:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a47c:	d003      	beq.n	801a486 <__swsetup_r+0x9a>
 801a47e:	4621      	mov	r1, r4
 801a480:	4630      	mov	r0, r6
 801a482:	f000 f931 	bl	801a6e8 <__smakebuf_r>
 801a486:	89a0      	ldrh	r0, [r4, #12]
 801a488:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a48c:	f010 0301 	ands.w	r3, r0, #1
 801a490:	d00a      	beq.n	801a4a8 <__swsetup_r+0xbc>
 801a492:	2300      	movs	r3, #0
 801a494:	60a3      	str	r3, [r4, #8]
 801a496:	6963      	ldr	r3, [r4, #20]
 801a498:	425b      	negs	r3, r3
 801a49a:	61a3      	str	r3, [r4, #24]
 801a49c:	6923      	ldr	r3, [r4, #16]
 801a49e:	b943      	cbnz	r3, 801a4b2 <__swsetup_r+0xc6>
 801a4a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a4a4:	d1ba      	bne.n	801a41c <__swsetup_r+0x30>
 801a4a6:	bd70      	pop	{r4, r5, r6, pc}
 801a4a8:	0781      	lsls	r1, r0, #30
 801a4aa:	bf58      	it	pl
 801a4ac:	6963      	ldrpl	r3, [r4, #20]
 801a4ae:	60a3      	str	r3, [r4, #8]
 801a4b0:	e7f4      	b.n	801a49c <__swsetup_r+0xb0>
 801a4b2:	2000      	movs	r0, #0
 801a4b4:	e7f7      	b.n	801a4a6 <__swsetup_r+0xba>
 801a4b6:	bf00      	nop
 801a4b8:	200008c0 	.word	0x200008c0
 801a4bc:	0801c998 	.word	0x0801c998
 801a4c0:	0801c9b8 	.word	0x0801c9b8
 801a4c4:	0801c978 	.word	0x0801c978

0801a4c8 <abort>:
 801a4c8:	b508      	push	{r3, lr}
 801a4ca:	2006      	movs	r0, #6
 801a4cc:	f000 f9e4 	bl	801a898 <raise>
 801a4d0:	2001      	movs	r0, #1
 801a4d2:	f7ef fb9d 	bl	8009c10 <_exit>
	...

0801a4d8 <_close_r>:
 801a4d8:	b538      	push	{r3, r4, r5, lr}
 801a4da:	4d06      	ldr	r5, [pc, #24]	; (801a4f4 <_close_r+0x1c>)
 801a4dc:	2300      	movs	r3, #0
 801a4de:	4604      	mov	r4, r0
 801a4e0:	4608      	mov	r0, r1
 801a4e2:	602b      	str	r3, [r5, #0]
 801a4e4:	f7ef fbd7 	bl	8009c96 <_close>
 801a4e8:	1c43      	adds	r3, r0, #1
 801a4ea:	d102      	bne.n	801a4f2 <_close_r+0x1a>
 801a4ec:	682b      	ldr	r3, [r5, #0]
 801a4ee:	b103      	cbz	r3, 801a4f2 <_close_r+0x1a>
 801a4f0:	6023      	str	r3, [r4, #0]
 801a4f2:	bd38      	pop	{r3, r4, r5, pc}
 801a4f4:	20003db0 	.word	0x20003db0

0801a4f8 <__sflush_r>:
 801a4f8:	898a      	ldrh	r2, [r1, #12]
 801a4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4fe:	4605      	mov	r5, r0
 801a500:	0710      	lsls	r0, r2, #28
 801a502:	460c      	mov	r4, r1
 801a504:	d458      	bmi.n	801a5b8 <__sflush_r+0xc0>
 801a506:	684b      	ldr	r3, [r1, #4]
 801a508:	2b00      	cmp	r3, #0
 801a50a:	dc05      	bgt.n	801a518 <__sflush_r+0x20>
 801a50c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a50e:	2b00      	cmp	r3, #0
 801a510:	dc02      	bgt.n	801a518 <__sflush_r+0x20>
 801a512:	2000      	movs	r0, #0
 801a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a518:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a51a:	2e00      	cmp	r6, #0
 801a51c:	d0f9      	beq.n	801a512 <__sflush_r+0x1a>
 801a51e:	2300      	movs	r3, #0
 801a520:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a524:	682f      	ldr	r7, [r5, #0]
 801a526:	602b      	str	r3, [r5, #0]
 801a528:	d032      	beq.n	801a590 <__sflush_r+0x98>
 801a52a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a52c:	89a3      	ldrh	r3, [r4, #12]
 801a52e:	075a      	lsls	r2, r3, #29
 801a530:	d505      	bpl.n	801a53e <__sflush_r+0x46>
 801a532:	6863      	ldr	r3, [r4, #4]
 801a534:	1ac0      	subs	r0, r0, r3
 801a536:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a538:	b10b      	cbz	r3, 801a53e <__sflush_r+0x46>
 801a53a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a53c:	1ac0      	subs	r0, r0, r3
 801a53e:	2300      	movs	r3, #0
 801a540:	4602      	mov	r2, r0
 801a542:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a544:	6a21      	ldr	r1, [r4, #32]
 801a546:	4628      	mov	r0, r5
 801a548:	47b0      	blx	r6
 801a54a:	1c43      	adds	r3, r0, #1
 801a54c:	89a3      	ldrh	r3, [r4, #12]
 801a54e:	d106      	bne.n	801a55e <__sflush_r+0x66>
 801a550:	6829      	ldr	r1, [r5, #0]
 801a552:	291d      	cmp	r1, #29
 801a554:	d82c      	bhi.n	801a5b0 <__sflush_r+0xb8>
 801a556:	4a2a      	ldr	r2, [pc, #168]	; (801a600 <__sflush_r+0x108>)
 801a558:	40ca      	lsrs	r2, r1
 801a55a:	07d6      	lsls	r6, r2, #31
 801a55c:	d528      	bpl.n	801a5b0 <__sflush_r+0xb8>
 801a55e:	2200      	movs	r2, #0
 801a560:	6062      	str	r2, [r4, #4]
 801a562:	04d9      	lsls	r1, r3, #19
 801a564:	6922      	ldr	r2, [r4, #16]
 801a566:	6022      	str	r2, [r4, #0]
 801a568:	d504      	bpl.n	801a574 <__sflush_r+0x7c>
 801a56a:	1c42      	adds	r2, r0, #1
 801a56c:	d101      	bne.n	801a572 <__sflush_r+0x7a>
 801a56e:	682b      	ldr	r3, [r5, #0]
 801a570:	b903      	cbnz	r3, 801a574 <__sflush_r+0x7c>
 801a572:	6560      	str	r0, [r4, #84]	; 0x54
 801a574:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a576:	602f      	str	r7, [r5, #0]
 801a578:	2900      	cmp	r1, #0
 801a57a:	d0ca      	beq.n	801a512 <__sflush_r+0x1a>
 801a57c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a580:	4299      	cmp	r1, r3
 801a582:	d002      	beq.n	801a58a <__sflush_r+0x92>
 801a584:	4628      	mov	r0, r5
 801a586:	f7ff fb19 	bl	8019bbc <_free_r>
 801a58a:	2000      	movs	r0, #0
 801a58c:	6360      	str	r0, [r4, #52]	; 0x34
 801a58e:	e7c1      	b.n	801a514 <__sflush_r+0x1c>
 801a590:	6a21      	ldr	r1, [r4, #32]
 801a592:	2301      	movs	r3, #1
 801a594:	4628      	mov	r0, r5
 801a596:	47b0      	blx	r6
 801a598:	1c41      	adds	r1, r0, #1
 801a59a:	d1c7      	bne.n	801a52c <__sflush_r+0x34>
 801a59c:	682b      	ldr	r3, [r5, #0]
 801a59e:	2b00      	cmp	r3, #0
 801a5a0:	d0c4      	beq.n	801a52c <__sflush_r+0x34>
 801a5a2:	2b1d      	cmp	r3, #29
 801a5a4:	d001      	beq.n	801a5aa <__sflush_r+0xb2>
 801a5a6:	2b16      	cmp	r3, #22
 801a5a8:	d101      	bne.n	801a5ae <__sflush_r+0xb6>
 801a5aa:	602f      	str	r7, [r5, #0]
 801a5ac:	e7b1      	b.n	801a512 <__sflush_r+0x1a>
 801a5ae:	89a3      	ldrh	r3, [r4, #12]
 801a5b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5b4:	81a3      	strh	r3, [r4, #12]
 801a5b6:	e7ad      	b.n	801a514 <__sflush_r+0x1c>
 801a5b8:	690f      	ldr	r7, [r1, #16]
 801a5ba:	2f00      	cmp	r7, #0
 801a5bc:	d0a9      	beq.n	801a512 <__sflush_r+0x1a>
 801a5be:	0793      	lsls	r3, r2, #30
 801a5c0:	680e      	ldr	r6, [r1, #0]
 801a5c2:	bf08      	it	eq
 801a5c4:	694b      	ldreq	r3, [r1, #20]
 801a5c6:	600f      	str	r7, [r1, #0]
 801a5c8:	bf18      	it	ne
 801a5ca:	2300      	movne	r3, #0
 801a5cc:	eba6 0807 	sub.w	r8, r6, r7
 801a5d0:	608b      	str	r3, [r1, #8]
 801a5d2:	f1b8 0f00 	cmp.w	r8, #0
 801a5d6:	dd9c      	ble.n	801a512 <__sflush_r+0x1a>
 801a5d8:	6a21      	ldr	r1, [r4, #32]
 801a5da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a5dc:	4643      	mov	r3, r8
 801a5de:	463a      	mov	r2, r7
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	47b0      	blx	r6
 801a5e4:	2800      	cmp	r0, #0
 801a5e6:	dc06      	bgt.n	801a5f6 <__sflush_r+0xfe>
 801a5e8:	89a3      	ldrh	r3, [r4, #12]
 801a5ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a5ee:	81a3      	strh	r3, [r4, #12]
 801a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 801a5f4:	e78e      	b.n	801a514 <__sflush_r+0x1c>
 801a5f6:	4407      	add	r7, r0
 801a5f8:	eba8 0800 	sub.w	r8, r8, r0
 801a5fc:	e7e9      	b.n	801a5d2 <__sflush_r+0xda>
 801a5fe:	bf00      	nop
 801a600:	20400001 	.word	0x20400001

0801a604 <_fflush_r>:
 801a604:	b538      	push	{r3, r4, r5, lr}
 801a606:	690b      	ldr	r3, [r1, #16]
 801a608:	4605      	mov	r5, r0
 801a60a:	460c      	mov	r4, r1
 801a60c:	b913      	cbnz	r3, 801a614 <_fflush_r+0x10>
 801a60e:	2500      	movs	r5, #0
 801a610:	4628      	mov	r0, r5
 801a612:	bd38      	pop	{r3, r4, r5, pc}
 801a614:	b118      	cbz	r0, 801a61e <_fflush_r+0x1a>
 801a616:	6983      	ldr	r3, [r0, #24]
 801a618:	b90b      	cbnz	r3, 801a61e <_fflush_r+0x1a>
 801a61a:	f7fe fe81 	bl	8019320 <__sinit>
 801a61e:	4b14      	ldr	r3, [pc, #80]	; (801a670 <_fflush_r+0x6c>)
 801a620:	429c      	cmp	r4, r3
 801a622:	d11b      	bne.n	801a65c <_fflush_r+0x58>
 801a624:	686c      	ldr	r4, [r5, #4]
 801a626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d0ef      	beq.n	801a60e <_fflush_r+0xa>
 801a62e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a630:	07d0      	lsls	r0, r2, #31
 801a632:	d404      	bmi.n	801a63e <_fflush_r+0x3a>
 801a634:	0599      	lsls	r1, r3, #22
 801a636:	d402      	bmi.n	801a63e <_fflush_r+0x3a>
 801a638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a63a:	f7fe ff26 	bl	801948a <__retarget_lock_acquire_recursive>
 801a63e:	4628      	mov	r0, r5
 801a640:	4621      	mov	r1, r4
 801a642:	f7ff ff59 	bl	801a4f8 <__sflush_r>
 801a646:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a648:	07da      	lsls	r2, r3, #31
 801a64a:	4605      	mov	r5, r0
 801a64c:	d4e0      	bmi.n	801a610 <_fflush_r+0xc>
 801a64e:	89a3      	ldrh	r3, [r4, #12]
 801a650:	059b      	lsls	r3, r3, #22
 801a652:	d4dd      	bmi.n	801a610 <_fflush_r+0xc>
 801a654:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a656:	f7fe ff19 	bl	801948c <__retarget_lock_release_recursive>
 801a65a:	e7d9      	b.n	801a610 <_fflush_r+0xc>
 801a65c:	4b05      	ldr	r3, [pc, #20]	; (801a674 <_fflush_r+0x70>)
 801a65e:	429c      	cmp	r4, r3
 801a660:	d101      	bne.n	801a666 <_fflush_r+0x62>
 801a662:	68ac      	ldr	r4, [r5, #8]
 801a664:	e7df      	b.n	801a626 <_fflush_r+0x22>
 801a666:	4b04      	ldr	r3, [pc, #16]	; (801a678 <_fflush_r+0x74>)
 801a668:	429c      	cmp	r4, r3
 801a66a:	bf08      	it	eq
 801a66c:	68ec      	ldreq	r4, [r5, #12]
 801a66e:	e7da      	b.n	801a626 <_fflush_r+0x22>
 801a670:	0801c998 	.word	0x0801c998
 801a674:	0801c9b8 	.word	0x0801c9b8
 801a678:	0801c978 	.word	0x0801c978

0801a67c <_lseek_r>:
 801a67c:	b538      	push	{r3, r4, r5, lr}
 801a67e:	4d07      	ldr	r5, [pc, #28]	; (801a69c <_lseek_r+0x20>)
 801a680:	4604      	mov	r4, r0
 801a682:	4608      	mov	r0, r1
 801a684:	4611      	mov	r1, r2
 801a686:	2200      	movs	r2, #0
 801a688:	602a      	str	r2, [r5, #0]
 801a68a:	461a      	mov	r2, r3
 801a68c:	f7ef fb2a 	bl	8009ce4 <_lseek>
 801a690:	1c43      	adds	r3, r0, #1
 801a692:	d102      	bne.n	801a69a <_lseek_r+0x1e>
 801a694:	682b      	ldr	r3, [r5, #0]
 801a696:	b103      	cbz	r3, 801a69a <_lseek_r+0x1e>
 801a698:	6023      	str	r3, [r4, #0]
 801a69a:	bd38      	pop	{r3, r4, r5, pc}
 801a69c:	20003db0 	.word	0x20003db0

0801a6a0 <__swhatbuf_r>:
 801a6a0:	b570      	push	{r4, r5, r6, lr}
 801a6a2:	460e      	mov	r6, r1
 801a6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a6a8:	2900      	cmp	r1, #0
 801a6aa:	b096      	sub	sp, #88	; 0x58
 801a6ac:	4614      	mov	r4, r2
 801a6ae:	461d      	mov	r5, r3
 801a6b0:	da07      	bge.n	801a6c2 <__swhatbuf_r+0x22>
 801a6b2:	2300      	movs	r3, #0
 801a6b4:	602b      	str	r3, [r5, #0]
 801a6b6:	89b3      	ldrh	r3, [r6, #12]
 801a6b8:	061a      	lsls	r2, r3, #24
 801a6ba:	d410      	bmi.n	801a6de <__swhatbuf_r+0x3e>
 801a6bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a6c0:	e00e      	b.n	801a6e0 <__swhatbuf_r+0x40>
 801a6c2:	466a      	mov	r2, sp
 801a6c4:	f000 f912 	bl	801a8ec <_fstat_r>
 801a6c8:	2800      	cmp	r0, #0
 801a6ca:	dbf2      	blt.n	801a6b2 <__swhatbuf_r+0x12>
 801a6cc:	9a01      	ldr	r2, [sp, #4]
 801a6ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a6d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a6d6:	425a      	negs	r2, r3
 801a6d8:	415a      	adcs	r2, r3
 801a6da:	602a      	str	r2, [r5, #0]
 801a6dc:	e7ee      	b.n	801a6bc <__swhatbuf_r+0x1c>
 801a6de:	2340      	movs	r3, #64	; 0x40
 801a6e0:	2000      	movs	r0, #0
 801a6e2:	6023      	str	r3, [r4, #0]
 801a6e4:	b016      	add	sp, #88	; 0x58
 801a6e6:	bd70      	pop	{r4, r5, r6, pc}

0801a6e8 <__smakebuf_r>:
 801a6e8:	898b      	ldrh	r3, [r1, #12]
 801a6ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a6ec:	079d      	lsls	r5, r3, #30
 801a6ee:	4606      	mov	r6, r0
 801a6f0:	460c      	mov	r4, r1
 801a6f2:	d507      	bpl.n	801a704 <__smakebuf_r+0x1c>
 801a6f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a6f8:	6023      	str	r3, [r4, #0]
 801a6fa:	6123      	str	r3, [r4, #16]
 801a6fc:	2301      	movs	r3, #1
 801a6fe:	6163      	str	r3, [r4, #20]
 801a700:	b002      	add	sp, #8
 801a702:	bd70      	pop	{r4, r5, r6, pc}
 801a704:	ab01      	add	r3, sp, #4
 801a706:	466a      	mov	r2, sp
 801a708:	f7ff ffca 	bl	801a6a0 <__swhatbuf_r>
 801a70c:	9900      	ldr	r1, [sp, #0]
 801a70e:	4605      	mov	r5, r0
 801a710:	4630      	mov	r0, r6
 801a712:	f7ff faa3 	bl	8019c5c <_malloc_r>
 801a716:	b948      	cbnz	r0, 801a72c <__smakebuf_r+0x44>
 801a718:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a71c:	059a      	lsls	r2, r3, #22
 801a71e:	d4ef      	bmi.n	801a700 <__smakebuf_r+0x18>
 801a720:	f023 0303 	bic.w	r3, r3, #3
 801a724:	f043 0302 	orr.w	r3, r3, #2
 801a728:	81a3      	strh	r3, [r4, #12]
 801a72a:	e7e3      	b.n	801a6f4 <__smakebuf_r+0xc>
 801a72c:	4b0d      	ldr	r3, [pc, #52]	; (801a764 <__smakebuf_r+0x7c>)
 801a72e:	62b3      	str	r3, [r6, #40]	; 0x28
 801a730:	89a3      	ldrh	r3, [r4, #12]
 801a732:	6020      	str	r0, [r4, #0]
 801a734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a738:	81a3      	strh	r3, [r4, #12]
 801a73a:	9b00      	ldr	r3, [sp, #0]
 801a73c:	6163      	str	r3, [r4, #20]
 801a73e:	9b01      	ldr	r3, [sp, #4]
 801a740:	6120      	str	r0, [r4, #16]
 801a742:	b15b      	cbz	r3, 801a75c <__smakebuf_r+0x74>
 801a744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a748:	4630      	mov	r0, r6
 801a74a:	f000 f8e1 	bl	801a910 <_isatty_r>
 801a74e:	b128      	cbz	r0, 801a75c <__smakebuf_r+0x74>
 801a750:	89a3      	ldrh	r3, [r4, #12]
 801a752:	f023 0303 	bic.w	r3, r3, #3
 801a756:	f043 0301 	orr.w	r3, r3, #1
 801a75a:	81a3      	strh	r3, [r4, #12]
 801a75c:	89a0      	ldrh	r0, [r4, #12]
 801a75e:	4305      	orrs	r5, r0
 801a760:	81a5      	strh	r5, [r4, #12]
 801a762:	e7cd      	b.n	801a700 <__smakebuf_r+0x18>
 801a764:	080192b9 	.word	0x080192b9

0801a768 <__ascii_mbtowc>:
 801a768:	b082      	sub	sp, #8
 801a76a:	b901      	cbnz	r1, 801a76e <__ascii_mbtowc+0x6>
 801a76c:	a901      	add	r1, sp, #4
 801a76e:	b142      	cbz	r2, 801a782 <__ascii_mbtowc+0x1a>
 801a770:	b14b      	cbz	r3, 801a786 <__ascii_mbtowc+0x1e>
 801a772:	7813      	ldrb	r3, [r2, #0]
 801a774:	600b      	str	r3, [r1, #0]
 801a776:	7812      	ldrb	r2, [r2, #0]
 801a778:	1e10      	subs	r0, r2, #0
 801a77a:	bf18      	it	ne
 801a77c:	2001      	movne	r0, #1
 801a77e:	b002      	add	sp, #8
 801a780:	4770      	bx	lr
 801a782:	4610      	mov	r0, r2
 801a784:	e7fb      	b.n	801a77e <__ascii_mbtowc+0x16>
 801a786:	f06f 0001 	mvn.w	r0, #1
 801a78a:	e7f8      	b.n	801a77e <__ascii_mbtowc+0x16>

0801a78c <memmove>:
 801a78c:	4288      	cmp	r0, r1
 801a78e:	b510      	push	{r4, lr}
 801a790:	eb01 0402 	add.w	r4, r1, r2
 801a794:	d902      	bls.n	801a79c <memmove+0x10>
 801a796:	4284      	cmp	r4, r0
 801a798:	4623      	mov	r3, r4
 801a79a:	d807      	bhi.n	801a7ac <memmove+0x20>
 801a79c:	1e43      	subs	r3, r0, #1
 801a79e:	42a1      	cmp	r1, r4
 801a7a0:	d008      	beq.n	801a7b4 <memmove+0x28>
 801a7a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a7a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a7aa:	e7f8      	b.n	801a79e <memmove+0x12>
 801a7ac:	4402      	add	r2, r0
 801a7ae:	4601      	mov	r1, r0
 801a7b0:	428a      	cmp	r2, r1
 801a7b2:	d100      	bne.n	801a7b6 <memmove+0x2a>
 801a7b4:	bd10      	pop	{r4, pc}
 801a7b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a7ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a7be:	e7f7      	b.n	801a7b0 <memmove+0x24>

0801a7c0 <__malloc_lock>:
 801a7c0:	4801      	ldr	r0, [pc, #4]	; (801a7c8 <__malloc_lock+0x8>)
 801a7c2:	f7fe be62 	b.w	801948a <__retarget_lock_acquire_recursive>
 801a7c6:	bf00      	nop
 801a7c8:	20003da4 	.word	0x20003da4

0801a7cc <__malloc_unlock>:
 801a7cc:	4801      	ldr	r0, [pc, #4]	; (801a7d4 <__malloc_unlock+0x8>)
 801a7ce:	f7fe be5d 	b.w	801948c <__retarget_lock_release_recursive>
 801a7d2:	bf00      	nop
 801a7d4:	20003da4 	.word	0x20003da4

0801a7d8 <_realloc_r>:
 801a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7da:	4607      	mov	r7, r0
 801a7dc:	4614      	mov	r4, r2
 801a7de:	460e      	mov	r6, r1
 801a7e0:	b921      	cbnz	r1, 801a7ec <_realloc_r+0x14>
 801a7e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a7e6:	4611      	mov	r1, r2
 801a7e8:	f7ff ba38 	b.w	8019c5c <_malloc_r>
 801a7ec:	b922      	cbnz	r2, 801a7f8 <_realloc_r+0x20>
 801a7ee:	f7ff f9e5 	bl	8019bbc <_free_r>
 801a7f2:	4625      	mov	r5, r4
 801a7f4:	4628      	mov	r0, r5
 801a7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7f8:	f000 f89a 	bl	801a930 <_malloc_usable_size_r>
 801a7fc:	42a0      	cmp	r0, r4
 801a7fe:	d20f      	bcs.n	801a820 <_realloc_r+0x48>
 801a800:	4621      	mov	r1, r4
 801a802:	4638      	mov	r0, r7
 801a804:	f7ff fa2a 	bl	8019c5c <_malloc_r>
 801a808:	4605      	mov	r5, r0
 801a80a:	2800      	cmp	r0, #0
 801a80c:	d0f2      	beq.n	801a7f4 <_realloc_r+0x1c>
 801a80e:	4631      	mov	r1, r6
 801a810:	4622      	mov	r2, r4
 801a812:	f7fd f88d 	bl	8017930 <memcpy>
 801a816:	4631      	mov	r1, r6
 801a818:	4638      	mov	r0, r7
 801a81a:	f7ff f9cf 	bl	8019bbc <_free_r>
 801a81e:	e7e9      	b.n	801a7f4 <_realloc_r+0x1c>
 801a820:	4635      	mov	r5, r6
 801a822:	e7e7      	b.n	801a7f4 <_realloc_r+0x1c>

0801a824 <_read_r>:
 801a824:	b538      	push	{r3, r4, r5, lr}
 801a826:	4d07      	ldr	r5, [pc, #28]	; (801a844 <_read_r+0x20>)
 801a828:	4604      	mov	r4, r0
 801a82a:	4608      	mov	r0, r1
 801a82c:	4611      	mov	r1, r2
 801a82e:	2200      	movs	r2, #0
 801a830:	602a      	str	r2, [r5, #0]
 801a832:	461a      	mov	r2, r3
 801a834:	f7ef f9f6 	bl	8009c24 <_read>
 801a838:	1c43      	adds	r3, r0, #1
 801a83a:	d102      	bne.n	801a842 <_read_r+0x1e>
 801a83c:	682b      	ldr	r3, [r5, #0]
 801a83e:	b103      	cbz	r3, 801a842 <_read_r+0x1e>
 801a840:	6023      	str	r3, [r4, #0]
 801a842:	bd38      	pop	{r3, r4, r5, pc}
 801a844:	20003db0 	.word	0x20003db0

0801a848 <_raise_r>:
 801a848:	291f      	cmp	r1, #31
 801a84a:	b538      	push	{r3, r4, r5, lr}
 801a84c:	4604      	mov	r4, r0
 801a84e:	460d      	mov	r5, r1
 801a850:	d904      	bls.n	801a85c <_raise_r+0x14>
 801a852:	2316      	movs	r3, #22
 801a854:	6003      	str	r3, [r0, #0]
 801a856:	f04f 30ff 	mov.w	r0, #4294967295
 801a85a:	bd38      	pop	{r3, r4, r5, pc}
 801a85c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a85e:	b112      	cbz	r2, 801a866 <_raise_r+0x1e>
 801a860:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a864:	b94b      	cbnz	r3, 801a87a <_raise_r+0x32>
 801a866:	4620      	mov	r0, r4
 801a868:	f000 f830 	bl	801a8cc <_getpid_r>
 801a86c:	462a      	mov	r2, r5
 801a86e:	4601      	mov	r1, r0
 801a870:	4620      	mov	r0, r4
 801a872:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a876:	f000 b817 	b.w	801a8a8 <_kill_r>
 801a87a:	2b01      	cmp	r3, #1
 801a87c:	d00a      	beq.n	801a894 <_raise_r+0x4c>
 801a87e:	1c59      	adds	r1, r3, #1
 801a880:	d103      	bne.n	801a88a <_raise_r+0x42>
 801a882:	2316      	movs	r3, #22
 801a884:	6003      	str	r3, [r0, #0]
 801a886:	2001      	movs	r0, #1
 801a888:	e7e7      	b.n	801a85a <_raise_r+0x12>
 801a88a:	2400      	movs	r4, #0
 801a88c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a890:	4628      	mov	r0, r5
 801a892:	4798      	blx	r3
 801a894:	2000      	movs	r0, #0
 801a896:	e7e0      	b.n	801a85a <_raise_r+0x12>

0801a898 <raise>:
 801a898:	4b02      	ldr	r3, [pc, #8]	; (801a8a4 <raise+0xc>)
 801a89a:	4601      	mov	r1, r0
 801a89c:	6818      	ldr	r0, [r3, #0]
 801a89e:	f7ff bfd3 	b.w	801a848 <_raise_r>
 801a8a2:	bf00      	nop
 801a8a4:	200008c0 	.word	0x200008c0

0801a8a8 <_kill_r>:
 801a8a8:	b538      	push	{r3, r4, r5, lr}
 801a8aa:	4d07      	ldr	r5, [pc, #28]	; (801a8c8 <_kill_r+0x20>)
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	4604      	mov	r4, r0
 801a8b0:	4608      	mov	r0, r1
 801a8b2:	4611      	mov	r1, r2
 801a8b4:	602b      	str	r3, [r5, #0]
 801a8b6:	f7ef f99b 	bl	8009bf0 <_kill>
 801a8ba:	1c43      	adds	r3, r0, #1
 801a8bc:	d102      	bne.n	801a8c4 <_kill_r+0x1c>
 801a8be:	682b      	ldr	r3, [r5, #0]
 801a8c0:	b103      	cbz	r3, 801a8c4 <_kill_r+0x1c>
 801a8c2:	6023      	str	r3, [r4, #0]
 801a8c4:	bd38      	pop	{r3, r4, r5, pc}
 801a8c6:	bf00      	nop
 801a8c8:	20003db0 	.word	0x20003db0

0801a8cc <_getpid_r>:
 801a8cc:	f7ef b988 	b.w	8009be0 <_getpid>

0801a8d0 <__ascii_wctomb>:
 801a8d0:	b149      	cbz	r1, 801a8e6 <__ascii_wctomb+0x16>
 801a8d2:	2aff      	cmp	r2, #255	; 0xff
 801a8d4:	bf85      	ittet	hi
 801a8d6:	238a      	movhi	r3, #138	; 0x8a
 801a8d8:	6003      	strhi	r3, [r0, #0]
 801a8da:	700a      	strbls	r2, [r1, #0]
 801a8dc:	f04f 30ff 	movhi.w	r0, #4294967295
 801a8e0:	bf98      	it	ls
 801a8e2:	2001      	movls	r0, #1
 801a8e4:	4770      	bx	lr
 801a8e6:	4608      	mov	r0, r1
 801a8e8:	4770      	bx	lr
	...

0801a8ec <_fstat_r>:
 801a8ec:	b538      	push	{r3, r4, r5, lr}
 801a8ee:	4d07      	ldr	r5, [pc, #28]	; (801a90c <_fstat_r+0x20>)
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	4608      	mov	r0, r1
 801a8f6:	4611      	mov	r1, r2
 801a8f8:	602b      	str	r3, [r5, #0]
 801a8fa:	f7ef f9d8 	bl	8009cae <_fstat>
 801a8fe:	1c43      	adds	r3, r0, #1
 801a900:	d102      	bne.n	801a908 <_fstat_r+0x1c>
 801a902:	682b      	ldr	r3, [r5, #0]
 801a904:	b103      	cbz	r3, 801a908 <_fstat_r+0x1c>
 801a906:	6023      	str	r3, [r4, #0]
 801a908:	bd38      	pop	{r3, r4, r5, pc}
 801a90a:	bf00      	nop
 801a90c:	20003db0 	.word	0x20003db0

0801a910 <_isatty_r>:
 801a910:	b538      	push	{r3, r4, r5, lr}
 801a912:	4d06      	ldr	r5, [pc, #24]	; (801a92c <_isatty_r+0x1c>)
 801a914:	2300      	movs	r3, #0
 801a916:	4604      	mov	r4, r0
 801a918:	4608      	mov	r0, r1
 801a91a:	602b      	str	r3, [r5, #0]
 801a91c:	f7ef f9d7 	bl	8009cce <_isatty>
 801a920:	1c43      	adds	r3, r0, #1
 801a922:	d102      	bne.n	801a92a <_isatty_r+0x1a>
 801a924:	682b      	ldr	r3, [r5, #0]
 801a926:	b103      	cbz	r3, 801a92a <_isatty_r+0x1a>
 801a928:	6023      	str	r3, [r4, #0]
 801a92a:	bd38      	pop	{r3, r4, r5, pc}
 801a92c:	20003db0 	.word	0x20003db0

0801a930 <_malloc_usable_size_r>:
 801a930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a934:	1f18      	subs	r0, r3, #4
 801a936:	2b00      	cmp	r3, #0
 801a938:	bfbc      	itt	lt
 801a93a:	580b      	ldrlt	r3, [r1, r0]
 801a93c:	18c0      	addlt	r0, r0, r3
 801a93e:	4770      	bx	lr

0801a940 <roundf>:
 801a940:	ee10 0a10 	vmov	r0, s0
 801a944:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801a948:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801a94c:	2a16      	cmp	r2, #22
 801a94e:	dc15      	bgt.n	801a97c <roundf+0x3c>
 801a950:	2a00      	cmp	r2, #0
 801a952:	da08      	bge.n	801a966 <roundf+0x26>
 801a954:	3201      	adds	r2, #1
 801a956:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801a95a:	d101      	bne.n	801a960 <roundf+0x20>
 801a95c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801a960:	ee00 3a10 	vmov	s0, r3
 801a964:	4770      	bx	lr
 801a966:	4908      	ldr	r1, [pc, #32]	; (801a988 <roundf+0x48>)
 801a968:	4111      	asrs	r1, r2
 801a96a:	4208      	tst	r0, r1
 801a96c:	d0fa      	beq.n	801a964 <roundf+0x24>
 801a96e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a972:	4113      	asrs	r3, r2
 801a974:	4403      	add	r3, r0
 801a976:	ea23 0301 	bic.w	r3, r3, r1
 801a97a:	e7f1      	b.n	801a960 <roundf+0x20>
 801a97c:	2a80      	cmp	r2, #128	; 0x80
 801a97e:	d1f1      	bne.n	801a964 <roundf+0x24>
 801a980:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a984:	4770      	bx	lr
 801a986:	bf00      	nop
 801a988:	007fffff 	.word	0x007fffff

0801a98c <sqrt>:
 801a98c:	b538      	push	{r3, r4, r5, lr}
 801a98e:	ed2d 8b02 	vpush	{d8}
 801a992:	ec55 4b10 	vmov	r4, r5, d0
 801a996:	f000 f82d 	bl	801a9f4 <__ieee754_sqrt>
 801a99a:	4b15      	ldr	r3, [pc, #84]	; (801a9f0 <sqrt+0x64>)
 801a99c:	eeb0 8a40 	vmov.f32	s16, s0
 801a9a0:	eef0 8a60 	vmov.f32	s17, s1
 801a9a4:	f993 3000 	ldrsb.w	r3, [r3]
 801a9a8:	3301      	adds	r3, #1
 801a9aa:	d019      	beq.n	801a9e0 <sqrt+0x54>
 801a9ac:	4622      	mov	r2, r4
 801a9ae:	462b      	mov	r3, r5
 801a9b0:	4620      	mov	r0, r4
 801a9b2:	4629      	mov	r1, r5
 801a9b4:	f7e6 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 801a9b8:	b990      	cbnz	r0, 801a9e0 <sqrt+0x54>
 801a9ba:	2200      	movs	r2, #0
 801a9bc:	2300      	movs	r3, #0
 801a9be:	4620      	mov	r0, r4
 801a9c0:	4629      	mov	r1, r5
 801a9c2:	f7e6 f88b 	bl	8000adc <__aeabi_dcmplt>
 801a9c6:	b158      	cbz	r0, 801a9e0 <sqrt+0x54>
 801a9c8:	f7fc ff88 	bl	80178dc <__errno>
 801a9cc:	2321      	movs	r3, #33	; 0x21
 801a9ce:	6003      	str	r3, [r0, #0]
 801a9d0:	2200      	movs	r2, #0
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	4610      	mov	r0, r2
 801a9d6:	4619      	mov	r1, r3
 801a9d8:	f7e5 ff38 	bl	800084c <__aeabi_ddiv>
 801a9dc:	ec41 0b18 	vmov	d8, r0, r1
 801a9e0:	eeb0 0a48 	vmov.f32	s0, s16
 801a9e4:	eef0 0a68 	vmov.f32	s1, s17
 801a9e8:	ecbd 8b02 	vpop	{d8}
 801a9ec:	bd38      	pop	{r3, r4, r5, pc}
 801a9ee:	bf00      	nop
 801a9f0:	20000a90 	.word	0x20000a90

0801a9f4 <__ieee754_sqrt>:
 801a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9f8:	ec55 4b10 	vmov	r4, r5, d0
 801a9fc:	4e56      	ldr	r6, [pc, #344]	; (801ab58 <__ieee754_sqrt+0x164>)
 801a9fe:	43ae      	bics	r6, r5
 801aa00:	ee10 0a10 	vmov	r0, s0
 801aa04:	ee10 3a10 	vmov	r3, s0
 801aa08:	4629      	mov	r1, r5
 801aa0a:	462a      	mov	r2, r5
 801aa0c:	d110      	bne.n	801aa30 <__ieee754_sqrt+0x3c>
 801aa0e:	ee10 2a10 	vmov	r2, s0
 801aa12:	462b      	mov	r3, r5
 801aa14:	f7e5 fdf0 	bl	80005f8 <__aeabi_dmul>
 801aa18:	4602      	mov	r2, r0
 801aa1a:	460b      	mov	r3, r1
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	4629      	mov	r1, r5
 801aa20:	f7e5 fc34 	bl	800028c <__adddf3>
 801aa24:	4604      	mov	r4, r0
 801aa26:	460d      	mov	r5, r1
 801aa28:	ec45 4b10 	vmov	d0, r4, r5
 801aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa30:	2d00      	cmp	r5, #0
 801aa32:	dc10      	bgt.n	801aa56 <__ieee754_sqrt+0x62>
 801aa34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801aa38:	4330      	orrs	r0, r6
 801aa3a:	d0f5      	beq.n	801aa28 <__ieee754_sqrt+0x34>
 801aa3c:	b15d      	cbz	r5, 801aa56 <__ieee754_sqrt+0x62>
 801aa3e:	ee10 2a10 	vmov	r2, s0
 801aa42:	462b      	mov	r3, r5
 801aa44:	ee10 0a10 	vmov	r0, s0
 801aa48:	f7e5 fc1e 	bl	8000288 <__aeabi_dsub>
 801aa4c:	4602      	mov	r2, r0
 801aa4e:	460b      	mov	r3, r1
 801aa50:	f7e5 fefc 	bl	800084c <__aeabi_ddiv>
 801aa54:	e7e6      	b.n	801aa24 <__ieee754_sqrt+0x30>
 801aa56:	1509      	asrs	r1, r1, #20
 801aa58:	d076      	beq.n	801ab48 <__ieee754_sqrt+0x154>
 801aa5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801aa5e:	07ce      	lsls	r6, r1, #31
 801aa60:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801aa64:	bf5e      	ittt	pl
 801aa66:	0fda      	lsrpl	r2, r3, #31
 801aa68:	005b      	lslpl	r3, r3, #1
 801aa6a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801aa6e:	0fda      	lsrs	r2, r3, #31
 801aa70:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801aa74:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801aa78:	2000      	movs	r0, #0
 801aa7a:	106d      	asrs	r5, r5, #1
 801aa7c:	005b      	lsls	r3, r3, #1
 801aa7e:	f04f 0e16 	mov.w	lr, #22
 801aa82:	4684      	mov	ip, r0
 801aa84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801aa88:	eb0c 0401 	add.w	r4, ip, r1
 801aa8c:	4294      	cmp	r4, r2
 801aa8e:	bfde      	ittt	le
 801aa90:	1b12      	suble	r2, r2, r4
 801aa92:	eb04 0c01 	addle.w	ip, r4, r1
 801aa96:	1840      	addle	r0, r0, r1
 801aa98:	0052      	lsls	r2, r2, #1
 801aa9a:	f1be 0e01 	subs.w	lr, lr, #1
 801aa9e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801aaa2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801aaa6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aaaa:	d1ed      	bne.n	801aa88 <__ieee754_sqrt+0x94>
 801aaac:	4671      	mov	r1, lr
 801aaae:	2720      	movs	r7, #32
 801aab0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801aab4:	4562      	cmp	r2, ip
 801aab6:	eb04 060e 	add.w	r6, r4, lr
 801aaba:	dc02      	bgt.n	801aac2 <__ieee754_sqrt+0xce>
 801aabc:	d113      	bne.n	801aae6 <__ieee754_sqrt+0xf2>
 801aabe:	429e      	cmp	r6, r3
 801aac0:	d811      	bhi.n	801aae6 <__ieee754_sqrt+0xf2>
 801aac2:	2e00      	cmp	r6, #0
 801aac4:	eb06 0e04 	add.w	lr, r6, r4
 801aac8:	da43      	bge.n	801ab52 <__ieee754_sqrt+0x15e>
 801aaca:	f1be 0f00 	cmp.w	lr, #0
 801aace:	db40      	blt.n	801ab52 <__ieee754_sqrt+0x15e>
 801aad0:	f10c 0801 	add.w	r8, ip, #1
 801aad4:	eba2 020c 	sub.w	r2, r2, ip
 801aad8:	429e      	cmp	r6, r3
 801aada:	bf88      	it	hi
 801aadc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801aae0:	1b9b      	subs	r3, r3, r6
 801aae2:	4421      	add	r1, r4
 801aae4:	46c4      	mov	ip, r8
 801aae6:	0052      	lsls	r2, r2, #1
 801aae8:	3f01      	subs	r7, #1
 801aaea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801aaee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801aaf2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801aaf6:	d1dd      	bne.n	801aab4 <__ieee754_sqrt+0xc0>
 801aaf8:	4313      	orrs	r3, r2
 801aafa:	d006      	beq.n	801ab0a <__ieee754_sqrt+0x116>
 801aafc:	1c4c      	adds	r4, r1, #1
 801aafe:	bf13      	iteet	ne
 801ab00:	3101      	addne	r1, #1
 801ab02:	3001      	addeq	r0, #1
 801ab04:	4639      	moveq	r1, r7
 801ab06:	f021 0101 	bicne.w	r1, r1, #1
 801ab0a:	1043      	asrs	r3, r0, #1
 801ab0c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801ab10:	0849      	lsrs	r1, r1, #1
 801ab12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801ab16:	07c2      	lsls	r2, r0, #31
 801ab18:	bf48      	it	mi
 801ab1a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801ab1e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801ab22:	460c      	mov	r4, r1
 801ab24:	463d      	mov	r5, r7
 801ab26:	e77f      	b.n	801aa28 <__ieee754_sqrt+0x34>
 801ab28:	0ada      	lsrs	r2, r3, #11
 801ab2a:	3815      	subs	r0, #21
 801ab2c:	055b      	lsls	r3, r3, #21
 801ab2e:	2a00      	cmp	r2, #0
 801ab30:	d0fa      	beq.n	801ab28 <__ieee754_sqrt+0x134>
 801ab32:	02d7      	lsls	r7, r2, #11
 801ab34:	d50a      	bpl.n	801ab4c <__ieee754_sqrt+0x158>
 801ab36:	f1c1 0420 	rsb	r4, r1, #32
 801ab3a:	fa23 f404 	lsr.w	r4, r3, r4
 801ab3e:	1e4d      	subs	r5, r1, #1
 801ab40:	408b      	lsls	r3, r1
 801ab42:	4322      	orrs	r2, r4
 801ab44:	1b41      	subs	r1, r0, r5
 801ab46:	e788      	b.n	801aa5a <__ieee754_sqrt+0x66>
 801ab48:	4608      	mov	r0, r1
 801ab4a:	e7f0      	b.n	801ab2e <__ieee754_sqrt+0x13a>
 801ab4c:	0052      	lsls	r2, r2, #1
 801ab4e:	3101      	adds	r1, #1
 801ab50:	e7ef      	b.n	801ab32 <__ieee754_sqrt+0x13e>
 801ab52:	46e0      	mov	r8, ip
 801ab54:	e7be      	b.n	801aad4 <__ieee754_sqrt+0xe0>
 801ab56:	bf00      	nop
 801ab58:	7ff00000 	.word	0x7ff00000

0801ab5c <_init>:
 801ab5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab5e:	bf00      	nop
 801ab60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab62:	bc08      	pop	{r3}
 801ab64:	469e      	mov	lr, r3
 801ab66:	4770      	bx	lr

0801ab68 <_fini>:
 801ab68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab6a:	bf00      	nop
 801ab6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ab6e:	bc08      	pop	{r3}
 801ab70:	469e      	mov	lr, r3
 801ab72:	4770      	bx	lr
