
HeliosModifLora+SF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001983c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002058  080199d0  080199d0  000299d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba28  0801ba28  00030a94  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba28  0801ba28  0002ba28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba30  0801ba30  00030a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba30  0801ba30  0002ba30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba34  0801ba34  0002ba34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a94  20000000  0801ba38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000328c  20000a94  0801c4cc  00030a94  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003d20  0801c4cc  00033d20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030a94  2**0
                  CONTENTS, READONLY
 12 .debug_info   0014f8e3  00000000  00000000  00030ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000acbe  00000000  00000000  001803a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004118  00000000  00000000  0018b068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ca0  00000000  00000000  0018f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030fd8  00000000  00000000  00192e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000440b2  00000000  00000000  001c3df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f746e  00000000  00000000  00207eaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  002ff318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00012514  00000000  00000000  002ff36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000a94 	.word	0x20000a94
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080199b4 	.word	0x080199b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000a98 	.word	0x20000a98
 80001cc:	080199b4 	.word	0x080199b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8000f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000f90:	f015 fbae 	bl	80166f0 <USBD_static_malloc>
 8000f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e066      	b.n	8001076 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	2181      	movs	r1, #129	; 0x81
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f015 f997 	bl	80162f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f015 f98d 	bl	80162f4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8000fea:	e016      	b.n	800101a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	2202      	movs	r2, #2
 8000ff0:	2181      	movs	r1, #129	; 0x81
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f015 f97e 	bl	80162f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	2202      	movs	r2, #2
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f015 f975 	bl	80162f4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2210      	movs	r2, #16
 8001016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800101a:	2308      	movs	r3, #8
 800101c:	2203      	movs	r2, #3
 800101e:	2182      	movs	r1, #130	; 0x82
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f015 f967 	bl	80162f4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7c1b      	ldrb	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	2101      	movs	r1, #1
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f015 fac5 	bl	80165ec <USBD_LL_PrepareReceive>
 8001062:	e007      	b.n	8001074 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	2101      	movs	r1, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f015 fabc 	bl	80165ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800108a:	2181      	movs	r1, #129	; 0x81
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f015 f96f 	bl	8016370 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001098:	2101      	movs	r1, #1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f015 f968 	bl	8016370 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80010a8:	2182      	movs	r1, #130	; 0x82
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f015 f960 	bl	8016370 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010da:	4618      	mov	r0, r3
 80010dc:	f015 fb16 	bl	801670c <USBD_static_free>
    pdev->pClassData = NULL;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001104:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001118:	2303      	movs	r3, #3
 800111a:	e0af      	b.n	800127c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001124:	2b00      	cmp	r3, #0
 8001126:	d03f      	beq.n	80011a8 <USBD_CDC_Setup+0xb4>
 8001128:	2b20      	cmp	r3, #32
 800112a:	f040 809f 	bne.w	800126c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	88db      	ldrh	r3, [r3, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02e      	beq.n	8001194 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	da16      	bge.n	800116e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800114c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	88d2      	ldrh	r2, [r2, #6]
 8001152:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	88db      	ldrh	r3, [r3, #6]
 8001158:	2b07      	cmp	r3, #7
 800115a:	bf28      	it	cs
 800115c:	2307      	movcs	r3, #7
 800115e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f014 fc31 	bl	80159ce <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800116c:	e085      	b.n	800127a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	88db      	ldrh	r3, [r3, #6]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	88db      	ldrh	r3, [r3, #6]
 800118a:	461a      	mov	r2, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f014 fc4a 	bl	8015a26 <USBD_CtlPrepareRx>
      break;
 8001192:	e072      	b.n	800127a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	7850      	ldrb	r0, [r2, #1]
 80011a0:	2200      	movs	r2, #0
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4798      	blx	r3
      break;
 80011a6:	e068      	b.n	800127a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	2b0b      	cmp	r3, #11
 80011ae:	d852      	bhi.n	8001256 <USBD_CDC_Setup+0x162>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <USBD_CDC_Setup+0xc4>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	08001265 	.word	0x08001265
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001213 	.word	0x08001213
 80011e4:	0800123d 	.word	0x0800123d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d107      	bne.n	8001204 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80011f4:	f107 030a 	add.w	r3, r7, #10
 80011f8:	2202      	movs	r2, #2
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f014 fbe6 	bl	80159ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001202:	e032      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f014 fb70 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 800120c:	2303      	movs	r3, #3
 800120e:	75fb      	strb	r3, [r7, #23]
          break;
 8001210:	e02b      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800121e:	f107 030d 	add.w	r3, r7, #13
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f014 fbd1 	bl	80159ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800122c:	e01d      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f014 fb5b 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 8001236:	2303      	movs	r3, #3
 8001238:	75fb      	strb	r3, [r7, #23]
          break;
 800123a:	e016      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d00f      	beq.n	8001268 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f014 fb4e 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 8001250:	2303      	movs	r3, #3
 8001252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8001254:	e008      	b.n	8001268 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f014 fb47 	bl	80158ec <USBD_CtlError>
          ret = USBD_FAIL;
 800125e:	2303      	movs	r3, #3
 8001260:	75fb      	strb	r3, [r7, #23]
          break;
 8001262:	e002      	b.n	800126a <USBD_CDC_Setup+0x176>
          break;
 8001264:	bf00      	nop
 8001266:	e008      	b.n	800127a <USBD_CDC_Setup+0x186>
          break;
 8001268:	bf00      	nop
      }
      break;
 800126a:	e006      	b.n	800127a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f014 fb3c 	bl	80158ec <USBD_CtlError>
      ret = USBD_FAIL;
 8001274:	2303      	movs	r3, #3
 8001276:	75fb      	strb	r3, [r7, #23]
      break;
 8001278:	bf00      	nop
  }

  return (uint8_t)ret;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04f      	b.n	8001346 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80012ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3318      	adds	r3, #24
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d029      	beq.n	8001318 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3318      	adds	r3, #24
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	78f9      	ldrb	r1, [r7, #3]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	460b      	mov	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4403      	add	r3, r0
 80012e4:	3338      	adds	r3, #56	; 0x38
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80012ec:	fb03 f301 	mul.w	r3, r3, r1
 80012f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d110      	bne.n	8001318 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3318      	adds	r3, #24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800130a:	78f9      	ldrb	r1, [r7, #3]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f015 f933 	bl	801657c <USBD_LL_Transmit>
 8001316:	e015      	b.n	8001344 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800136c:	2303      	movs	r3, #3
 800136e:	e015      	b.n	800139c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f015 f971 	bl	801665c <USBD_LL_GetRxDataSize>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001396:	4611      	mov	r1, r2
 8001398:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80013b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e01b      	b.n	80013f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d010      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80013e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2243      	movs	r2, #67	; 0x43
 800140c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	2000008c 	.word	0x2000008c

08001420 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2243      	movs	r2, #67	; 0x43
 800142c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000048 	.word	0x20000048

08001440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2243      	movs	r2, #67	; 0x43
 800144c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	200000d0 	.word	0x200000d0

08001460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	220a      	movs	r2, #10
 800146c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e008      	b.n	80014da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001526:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001536:	2303      	movs	r3, #3
 8001538:	e01a      	b.n	8001570 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001540:	2b00      	cmp	r3, #0
 8001542:	d114      	bne.n	800156e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001562:	2181      	movs	r1, #129	; 0x81
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f015 f809 	bl	801657c <USBD_LL_Transmit>

    ret = USBD_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8001592:	2303      	movs	r3, #3
 8001594:	e016      	b.n	80015c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7c1b      	ldrb	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f015 f81e 	bl	80165ec <USBD_LL_PrepareReceive>
 80015b0:	e007      	b.n	80015c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f015 f815 	bl	80165ec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <CDC_Init_FS+0x1c>)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <CDC_Init_FS+0x20>)
 80015d6:	f7ff ff68 	bl	80014aa <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80015da:	4905      	ldr	r1, [pc, #20]	; (80015f0 <CDC_Init_FS+0x24>)
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <CDC_Init_FS+0x20>)
 80015de:	f7ff ff82 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80015e2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200010d4 	.word	0x200010d4
 80015ec:	2000354c 	.word	0x2000354c
 80015f0:	200014fc 	.word	0x200014fc

080015f4 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80015f8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b23      	cmp	r3, #35	; 0x23
 8001618:	d84a      	bhi.n	80016b0 <CDC_Control_FS+0xac>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <CDC_Control_FS+0x1c>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	080016b1 	.word	0x080016b1
 8001624:	080016b1 	.word	0x080016b1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	080016b1 	.word	0x080016b1
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016b1 	.word	0x080016b1
 8001638:	080016b1 	.word	0x080016b1
 800163c:	080016b1 	.word	0x080016b1
 8001640:	080016b1 	.word	0x080016b1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016b1 	.word	0x080016b1
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016b1 	.word	0x080016b1
 8001668:	080016b1 	.word	0x080016b1
 800166c:	080016b1 	.word	0x080016b1
 8001670:	080016b1 	.word	0x080016b1
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016b1 	.word	0x080016b1
 800167c:	080016b1 	.word	0x080016b1
 8001680:	080016b1 	.word	0x080016b1
 8001684:	080016b1 	.word	0x080016b1
 8001688:	080016b1 	.word	0x080016b1
 800168c:	080016b1 	.word	0x080016b1
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016b1 	.word	0x080016b1
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016b1 	.word	0x080016b1
 80016a8:	080016b1 	.word	0x080016b1
 80016ac:	080016b1 	.word	0x080016b1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80016b0:	bf00      	nop
	}

	return (USBD_OK);
 80016b2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <CDC_Receive_FS>:
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */

//LBLeo
uint8_t received_data[64];
int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <CDC_Receive_FS+0x4c>)
 80016ce:	f7ff ff0a 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <CDC_Receive_FS+0x4c>)
 80016d4:	f7ff ff50 	bl	8001578 <USBD_CDC_ReceivePacket>

	//LBLeo
	memset(received_data, 0, 64);
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	2100      	movs	r1, #0
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <CDC_Receive_FS+0x50>)
 80016de:	f015 f861 	bl	80167a4 <memset>
	uint8_t len = (uint8_t) *Len;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	73fb      	strb	r3, [r7, #15]
	memcpy(received_data, Buf, len);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	461a      	mov	r2, r3
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <CDC_Receive_FS+0x50>)
 80016f0:	f015 f84a 	bl	8016788 <memcpy>
	memset(Buf, 0, len);
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f015 f852 	bl	80167a4 <memset>

	return (USBD_OK);
 8001700:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000354c 	.word	0x2000354c
 8001710:	200014bc 	.word	0x200014bc

08001714 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <CDC_Transmit_FS+0x48>)
 8001726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800172a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8001736:	2301      	movs	r3, #1
 8001738:	e00b      	b.n	8001752 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	461a      	mov	r2, r3
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <CDC_Transmit_FS+0x48>)
 8001742:	f7ff feb2 	bl	80014aa <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <CDC_Transmit_FS+0x48>)
 8001748:	f7ff fee6 	bl	8001518 <USBD_CDC_TransmitPacket>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000354c 	.word	0x2000354c

08001760 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8001772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <display_Init>:

uint8_t blink_soundLevel = 1;
/*
* Permet de faire l'initialisation  de l'�cran au d�marrage
*/
void display_Init(uint8_t b_display_msg) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <display_Init+0x44>)
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <display_Init+0x48>)
 8001792:	490f      	ldr	r1, [pc, #60]	; (80017d0 <display_Init+0x4c>)
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <display_Init+0x50>)
 8001796:	f005 fb5d 	bl	8006e54 <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
	u8g2_InitDisplay(&u8g2);
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <display_Init+0x50>)
 800179c:	f006 ff72 	bl	8008684 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <display_Init+0x50>)
 80017a4:	f006 ff7d 	bl	80086a2 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <display_Init+0x50>)
 80017aa:	f005 fb2d 	bl	8006e08 <u8g2_ClearDisplay>
	if(b_display_msg)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <display_Init+0x34>
		display_Chargement_perso();
 80017b4:	f000 faa0 	bl	8001cf8 <display_Chargement_perso>
	u8g2_FirstPage(&u8g2);  // EJ : test bug ecran clear
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <display_Init+0x50>)
 80017ba:	f005 fae3 	bl	8006d84 <u8g2_FirstPage>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	08002529 	.word	0x08002529
 80017cc:	08002469 	.word	0x08002469
 80017d0:	0801b4c0 	.word	0x0801b4c0
 80017d4:	20002648 	.word	0x20002648

080017d8 <display_InitBis>:

void display_InitBis() 
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <display_InitBis+0x28>)
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <display_InitBis+0x2c>)
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <display_InitBis+0x30>)
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <display_InitBis+0x34>)
 80017e4:	f005 fb36 	bl	8006e54 <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
	u8g2_InitDisplay(&u8g2);
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <display_InitBis+0x34>)
 80017ea:	f006 ff4b 	bl	8008684 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <display_InitBis+0x34>)
 80017f2:	f006 ff56 	bl	80086a2 <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <display_InitBis+0x34>)
 80017f8:	f005 fb06 	bl	8006e08 <u8g2_ClearDisplay>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08002529 	.word	0x08002529
 8001804:	08002469 	.word	0x08002469
 8001808:	0801b4c0 	.word	0x0801b4c0
 800180c:	20002648 	.word	0x20002648

08001810 <display_dco>:
/*
* Fonction permettant d'afficher les taux des differents gaz et niveau sonore
* ainsi que les etats des alertes, du GPS , du reseau et de la batterie
*/
void display_dco(float TabFloatValue[],int TabAlert[],int TabGen[], uint32_t TabTimer[], char name[], char * msg1, char * msg2, char *msg3, char *msg4) 
	{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0b8      	sub	sp, #224	; 0xe0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6178      	str	r0, [r7, #20]
 8001818:	6139      	str	r1, [r7, #16]
 800181a:	60fa      	str	r2, [r7, #12]
 800181c:	60bb      	str	r3, [r7, #8]

	char str_ppm[] = " PPM";
 800181e:	4abe      	ldr	r2, [pc, #760]	; (8001b18 <display_dco+0x308>)
 8001820:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	char poucent[] = " %";
 800182e:	4abb      	ldr	r2, [pc, #748]	; (8001b1c <display_dco+0x30c>)
 8001830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	8019      	strh	r1, [r3, #0]
 800183a:	3302      	adds	r3, #2
 800183c:	0c12      	lsrs	r2, r2, #16
 800183e:	701a      	strb	r2, [r3, #0]
	char vme[]		 = " VME";
 8001840:	4ab7      	ldr	r2, [pc, #732]	; (8001b20 <display_dco+0x310>)
 8001842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	7019      	strb	r1, [r3, #0]
	char manque[]		 = " <<";
 8001850:	4bb4      	ldr	r3, [pc, #720]	; (8001b24 <display_dco+0x314>)
 8001852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	char explo[]		 = " >>";
 8001856:	4bb4      	ldr	r3, [pc, #720]	; (8001b28 <display_dco+0x318>)
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	char vlct[] 	 = " VLCT";
 800185c:	4ab3      	ldr	r2, [pc, #716]	; (8001b2c <display_dco+0x31c>)
 800185e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001866:	6018      	str	r0, [r3, #0]
 8001868:	3304      	adds	r3, #4
 800186a:	8019      	strh	r1, [r3, #0]
	char db[] 		 = " dB";
 800186c:	4bb0      	ldr	r3, [pc, #704]	; (8001b30 <display_dco+0x320>)
 800186e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char str_H2S [30] = {0};
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	831a      	strh	r2, [r3, #24]
	char str_O2 [30]	= {0};
 800188c:	2300      	movs	r3, #0
 800188e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001890:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	831a      	strh	r2, [r3, #24]
	char str_CO [30]	= {0};
 80018a4:	2300      	movs	r3, #0
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80018a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	831a      	strh	r2, [r3, #24]
	char str_EX [30]	= {0};
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	831a      	strh	r2, [r3, #24]

	char str_son[6] = {0};
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
 80018d8:	2300      	movs	r3, #0
 80018da:	86bb      	strh	r3, [r7, #52]	; 0x34

	// H2S
	strcat(str_H2S, str_taux_H2S);
 80018dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e0:	4994      	ldr	r1, [pc, #592]	; (8001b34 <display_dco+0x324>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f015 fc5e 	bl	80171a4 <strcat>
	strcat(str_H2S, msg1);
 80018e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ec:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80018f0:	4618      	mov	r0, r3
 80018f2:	f015 fc57 	bl	80171a4 <strcat>
	strcat(str_H2S, str_ppm);
 80018f6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80018fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f015 fc4f 	bl	80171a4 <strcat>
	if (TabAlert[ALERT_H2SVLCT] == 1)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3320      	adds	r3, #32
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <display_dco+0x112>
	{
		strcat(str_H2S, vlct);
 8001910:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001914:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f015 fc42 	bl	80171a4 <strcat>
 8001920:	e00c      	b.n	800193c <display_dco+0x12c>
	}
	else if (TabAlert[ALERT_H2SVME] == 1)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	331c      	adds	r3, #28
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <display_dco+0x12c>
	{
		strcat(str_H2S, vme);
 800192c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f015 fc34 	bl	80171a4 <strcat>
	}
	// O2 clignotement
	strcat(str_O2, str_taux_O2);
 800193c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001940:	497d      	ldr	r1, [pc, #500]	; (8001b38 <display_dco+0x328>)
 8001942:	4618      	mov	r0, r3
 8001944:	f015 fc2e 	bl	80171a4 <strcat>
	strcat(str_O2, msg2);
 8001948:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800194c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001950:	4618      	mov	r0, r3
 8001952:	f015 fc27 	bl	80171a4 <strcat>
	strcat(str_O2, poucent);
 8001956:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800195a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f015 fc1f 	bl	80171a4 <strcat>
	if (TabAlert[ALERT_O2] == 1)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3324      	adds	r3, #36	; 0x24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <display_dco+0x170>
	{
		strcat(str_O2, manque);
 8001970:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001974:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f015 fc12 	bl	80171a4 <strcat>
	}


	//CO pas afficher
	strcat(str_CO, str_taux_CO);
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	496d      	ldr	r1, [pc, #436]	; (8001b3c <display_dco+0x32c>)
 8001986:	4618      	mov	r0, r3
 8001988:	f015 fc0c 	bl	80171a4 <strcat>
	strcat(str_CO, msg3);
 800198c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001990:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001994:	4618      	mov	r0, r3
 8001996:	f015 fc05 	bl	80171a4 <strcat>
	strcat(str_CO, str_ppm);
 800199a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800199e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f015 fbfd 	bl	80171a4 <strcat>
	if (TabAlert[ALERT_COVLCT] == 1) {
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	332c      	adds	r3, #44	; 0x2c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <display_dco+0x1b6>
		strcat(str_CO, vlct);
 80019b4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80019b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f015 fbf0 	bl	80171a4 <strcat>
 80019c4:	e00c      	b.n	80019e0 <display_dco+0x1d0>
	}
	else if (TabAlert[ALERT_COVME] ==+ 1) {
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <display_dco+0x1d0>
		strcat(str_CO, vme);
 80019d0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80019d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f015 fbe2 	bl	80171a4 <strcat>
	}

	// EX
	strcat(str_EX, str_taux_EX);
 80019e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e4:	4956      	ldr	r1, [pc, #344]	; (8001b40 <display_dco+0x330>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f015 fbdc 	bl	80171a4 <strcat>
	
	strcat(str_EX, msg4);
 80019ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f015 fbd5 	bl	80171a4 <strcat>
	strcat(str_EX, poucent);
 80019fa:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f015 fbcd 	bl	80171a4 <strcat>
	if (TabAlert[ALERT_EX] == 1) {
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <display_dco+0x214>
		strcat(str_EX, explo);
 8001a14:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f015 fbc0 	bl	80171a4 <strcat>
	}

	 son = ((uint8_t) TabFloatValue[DB_VALUE])+10;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3310      	adds	r3, #16
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a34:	793b      	ldrb	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	330a      	adds	r3, #10
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b41      	ldr	r3, [pc, #260]	; (8001b44 <display_dco+0x334>)
 8001a3e:	701a      	strb	r2, [r3, #0]
	
	sprintf(str_son, "%i", son);
 8001a40:	4b40      	ldr	r3, [pc, #256]	; (8001b44 <display_dco+0x334>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	493f      	ldr	r1, [pc, #252]	; (8001b48 <display_dco+0x338>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f015 fb89 	bl	8017164 <siprintf>
	strcat(str_son, db);
 8001a52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f015 fba1 	bl	80171a4 <strcat>

	

		u8g2_FirstPage(&u8g2);   
 8001a62:	483a      	ldr	r0, [pc, #232]	; (8001b4c <display_dco+0x33c>)
 8001a64:	f005 f98e 	bl	8006d84 <u8g2_FirstPage>
	
	do {
		
			char str_display[18];
			u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001a68:	4939      	ldr	r1, [pc, #228]	; (8001b50 <display_dco+0x340>)
 8001a6a:	4838      	ldr	r0, [pc, #224]	; (8001b4c <display_dco+0x33c>)
 8001a6c:	f005 ff88 	bl	8007980 <u8g2_SetFont>
			if(IMU_nodata == 100)
 8001a70:	4b38      	ldr	r3, [pc, #224]	; (8001b54 <display_dco+0x344>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d106      	bne.n	8001a86 <display_dco+0x276>
			{
				u8g2_DrawStr(&u8g2, 45, 8, "!IMU!");
 8001a78:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <display_dco+0x348>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	212d      	movs	r1, #45	; 0x2d
 8001a7e:	4833      	ldr	r0, [pc, #204]	; (8001b4c <display_dco+0x33c>)
 8001a80:	f005 fedc 	bl	800783c <u8g2_DrawStr>
 8001a84:	e009      	b.n	8001a9a <display_dco+0x28a>
			}
			else
			{
				sprintf(str_display, "%d mA", TabGen[AVG_CURRENT]);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4932      	ldr	r1, [pc, #200]	; (8001b5c <display_dco+0x34c>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f015 fb65 	bl	8017164 <siprintf>
		if(SIGFOXOK == 1 || LORAWANOK == 1)
		{
//			if(SIGFOXOK == 1 && LORAWANOK == 1)
//				NetworkStatus(TabGen);
			
			if (HAL_GetTick() - TabTimer[ACK_TIMER] <= SEC_ONOFF_SCREEN * 1000 && TabTimer[ACK_TIMER] != 0)
 8001a9a:	f008 fc8f 	bl	800a3bc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	330c      	adds	r3, #12
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d808      	bhi.n	8001ac2 <display_dco+0x2b2>
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	330c      	adds	r3, #12
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <display_dco+0x2b2>
			{
				//NetworkStatus(TabGen);
				show_RSSI = 1;
 8001aba:	4b29      	ldr	r3, [pc, #164]	; (8001b60 <display_dco+0x350>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	701a      	strb	r2, [r3, #0]
 8001ac0:	e002      	b.n	8001ac8 <display_dco+0x2b8>
			}
			else
				show_RSSI = 0;
 8001ac2:	4b27      	ldr	r3, [pc, #156]	; (8001b60 <display_dco+0x350>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	701a      	strb	r2, [r3, #0]
		}
		//display_son(son);
		if(GPSOK == 1 && show_RSSI == 0)
 8001ac8:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <display_dco+0x350>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <display_dco+0x2ce>
			display_GPS_status(status_GPS, TabTimer, TabGen);
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <display_dco+0x354>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	68fa      	ldr	r2, [r7, #12]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 f84b 	bl	8001b74 <display_GPS_status>

		if(BATTERYOK == 1 && SUEZ == 0)
			display_BatteryLvl(batteryLevel, 108, 0);
 8001ade:	4b22      	ldr	r3, [pc, #136]	; (8001b68 <display_dco+0x358>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	216c      	movs	r1, #108	; 0x6c
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 fda0 	bl	800262c <display_BatteryLvl>
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001aec:	491f      	ldr	r1, [pc, #124]	; (8001b6c <display_dco+0x35c>)
 8001aee:	4817      	ldr	r0, [pc, #92]	; (8001b4c <display_dco+0x33c>)
 8001af0:	f005 ff46 	bl	8007980 <u8g2_SetFont>
		else 
		if (SUEZ == 1)
		{
			u8g2_DrawStr(&u8g2, 2, 17, str_H2S);
		}
		display_Alerte(TabGen, alerte);
 8001af4:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <display_dco+0x360>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f000 fa78 	bl	8001ff0 <display_Alerte>
	} while (u8g2_NextPage(&u8g2));
 8001b00:	4812      	ldr	r0, [pc, #72]	; (8001b4c <display_dco+0x33c>)
 8001b02:	f005 f953 	bl	8006dac <u8g2_NextPage>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1ad      	bne.n	8001a68 <display_dco+0x258>
	//blink_soundLevel = !blink_soundLevel;
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	37e0      	adds	r7, #224	; 0xe0
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	080199e4 	.word	0x080199e4
 8001b1c:	080199ec 	.word	0x080199ec
 8001b20:	080199f0 	.word	0x080199f0
 8001b24:	003c3c20 	.word	0x003c3c20
 8001b28:	003e3e20 	.word	0x003e3e20
 8001b2c:	080199f8 	.word	0x080199f8
 8001b30:	00426420 	.word	0x00426420
 8001b34:	20000754 	.word	0x20000754
 8001b38:	2000075c 	.word	0x2000075c
 8001b3c:	20000764 	.word	0x20000764
 8001b40:	2000076c 	.word	0x2000076c
 8001b44:	20000b6d 	.word	0x20000b6d
 8001b48:	080199d0 	.word	0x080199d0
 8001b4c:	20002648 	.word	0x20002648
 8001b50:	0801a084 	.word	0x0801a084
 8001b54:	20000b80 	.word	0x20000b80
 8001b58:	080199d4 	.word	0x080199d4
 8001b5c:	080199dc 	.word	0x080199dc
 8001b60:	20000ab0 	.word	0x20000ab0
 8001b64:	20000b6b 	.word	0x20000b6b
 8001b68:	20000b6a 	.word	0x20000b6a
 8001b6c:	0801a880 	.word	0x0801a880
 8001b70:	20000b6c 	.word	0x20000b6c

08001b74 <display_GPS_status>:

/*
* Permet d'afficher l'etat du GPS
*/
void display_GPS_status(uint8_t status, uint32_t TabGpsTimer[], int TabGen[]) 
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08e      	sub	sp, #56	; 0x38
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	73fb      	strb	r3, [r7, #15]
	uint32_t last_update = 0 ;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62fb      	str	r3, [r7, #44]	; 0x2c
	char str_last[8];
	char nb_sat[2];
	
//	TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick() - 8 *60 * 1000 *59 ;
	
	if(TabGen[GPS_ON] == 1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d10a      	bne.n	8001ba6 <display_GPS_status+0x32>
	{
		sprintf(nb_sat, "%d", TabGen[NB_SATT_FOUND]);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	494a      	ldr	r1, [pc, #296]	; (8001cc8 <display_GPS_status+0x154>)
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f015 fae0 	bl	8017164 <siprintf>
 8001ba4:	e001      	b.n	8001baa <display_GPS_status+0x36>
//				else if (TabGen[NB_SATT_FOUND] >= 5)
//					strcat(str_last, "+");  // concatenation

	}
	else 
		strcpy(nb_sat, ".");  // concatenation
 8001ba6:	232e      	movs	r3, #46	; 0x2e
 8001ba8:	82bb      	strh	r3, [r7, #20]
	
	//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);	
	//u8g2_DrawStr(&u8g2, 60, 8, nb_sat); 		// Display elasped time since last good GPS position
	
	if (TabGpsTimer[LAST_UPDATE_GPS] <= 0) // never got location
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	3308      	adds	r3, #8
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d102      	bne.n	8001bba <display_GPS_status+0x46>
		last_update = 0;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bb8:	e065      	b.n	8001c86 <display_GPS_status+0x112>
	else // last update seems valid, display time on screen
	{
		// display time when location acquired
		last_update = (HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000 + 1 ; //    / 60000
 8001bba:	f008 fbff 	bl	800a3bc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	4a40      	ldr	r2, [pc, #256]	; (8001ccc <display_GPS_status+0x158>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	0b9b      	lsrs	r3, r3, #14
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
	
		if(last_update > (8 * 60))
 8001bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd6:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001bda:	d909      	bls.n	8001bf0 <display_GPS_status+0x7c>
		{
			strcpy(str_last, "++"); // copy
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <display_GPS_status+0x15c>)
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	4611      	mov	r1, r2
 8001be6:	8019      	strh	r1, [r3, #0]
 8001be8:	3302      	adds	r3, #2
 8001bea:	0c12      	lsrs	r2, r2, #16
 8001bec:	701a      	strb	r2, [r3, #0]
 8001bee:	e031      	b.n	8001c54 <display_GPS_status+0xe0>
		}
		else
		{
			if( last_update >= 60)
 8001bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf2:	2b3b      	cmp	r3, #59	; 0x3b
 8001bf4:	d91a      	bls.n	8001c2c <display_GPS_status+0xb8>
			{
				sprintf(str_last, "%u", last_update / 60);
 8001bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bf8:	4a36      	ldr	r2, [pc, #216]	; (8001cd4 <display_GPS_status+0x160>)
 8001bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfe:	095a      	lsrs	r2, r3, #5
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4934      	ldr	r1, [pc, #208]	; (8001cd8 <display_GPS_status+0x164>)
 8001c06:	4618      	mov	r0, r3
 8001c08:	f015 faac 	bl	8017164 <siprintf>
				strcat(str_last, "h");  // concatenation
 8001c0c:	f107 0318 	add.w	r3, r7, #24
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fadd 	bl	80001d0 <strlen>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461a      	mov	r2, r3
 8001c1a:	f107 0318 	add.w	r3, r7, #24
 8001c1e:	4413      	add	r3, r2
 8001c20:	492e      	ldr	r1, [pc, #184]	; (8001cdc <display_GPS_status+0x168>)
 8001c22:	461a      	mov	r2, r3
 8001c24:	460b      	mov	r3, r1
 8001c26:	881b      	ldrh	r3, [r3, #0]
 8001c28:	8013      	strh	r3, [r2, #0]
 8001c2a:	e013      	b.n	8001c54 <display_GPS_status+0xe0>
			}
			else
			{
				sprintf(str_last, "%u", last_update);
 8001c2c:	f107 0318 	add.w	r3, r7, #24
 8001c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c32:	4929      	ldr	r1, [pc, #164]	; (8001cd8 <display_GPS_status+0x164>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f015 fa95 	bl	8017164 <siprintf>
				strcat(str_last, "min");  // concatenation
 8001c3a:	f107 0318 	add.w	r3, r7, #24
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fac6 	bl	80001d0 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461a      	mov	r2, r3
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a24      	ldr	r2, [pc, #144]	; (8001ce0 <display_GPS_status+0x16c>)
 8001c50:	6810      	ldr	r0, [r2, #0]
 8001c52:	6018      	str	r0, [r3, #0]
			}
			//strcat(str_last, nb_sat);  // concatenation
		}
		//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
		u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);	
 8001c54:	4923      	ldr	r1, [pc, #140]	; (8001ce4 <display_GPS_status+0x170>)
 8001c56:	4824      	ldr	r0, [pc, #144]	; (8001ce8 <display_GPS_status+0x174>)
 8001c58:	f005 fe92 	bl	8007980 <u8g2_SetFont>
		sprintf(str_display, "GPS:");
 8001c5c:	f107 0320 	add.w	r3, r7, #32
 8001c60:	4922      	ldr	r1, [pc, #136]	; (8001cec <display_GPS_status+0x178>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f015 fa7e 	bl	8017164 <siprintf>
		strcat(str_display, str_last);
 8001c68:	f107 0218 	add.w	r2, r7, #24
 8001c6c:	f107 0320 	add.w	r3, r7, #32
 8001c70:	4611      	mov	r1, r2
 8001c72:	4618      	mov	r0, r3
 8001c74:	f015 fa96 	bl	80171a4 <strcat>
		u8g2_DrawStr(&u8g2, 0, 8, str_display); // Display elasped time since last good GPS position
 8001c78:	f107 0320 	add.w	r3, r7, #32
 8001c7c:	2208      	movs	r2, #8
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4819      	ldr	r0, [pc, #100]	; (8001ce8 <display_GPS_status+0x174>)
 8001c82:	f005 fddb 	bl	800783c <u8g2_DrawStr>
	}
			
	
//	u8g2_SetFont(&u8g2,u8g2_font_t0_11_tr); // fonctionne
	if (last_update > 0 && last_update <= 1)  // (status)
 8001c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00d      	beq.n	8001ca8 <display_GPS_status+0x134>
 8001c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d80a      	bhi.n	8001ca8 <display_GPS_status+0x134>
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_on_width, gps_on_height, (uint8_t *)gps_on_bits);
 8001c92:	4b17      	ldr	r3, [pc, #92]	; (8001cf0 <display_GPS_status+0x17c>)
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	230c      	movs	r3, #12
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	230c      	movs	r3, #12
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	215a      	movs	r1, #90	; 0x5a
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <display_GPS_status+0x174>)
 8001ca2:	f004 ffa1 	bl	8006be8 <u8g2_DrawXBM>
 8001ca6:	e00a      	b.n	8001cbe <display_GPS_status+0x14a>
	}
	else 
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_off_width, gps_off_height, (uint8_t *)gps_off_bits);
 8001ca8:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <display_GPS_status+0x180>)
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	230c      	movs	r3, #12
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	230c      	movs	r3, #12
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	215a      	movs	r1, #90	; 0x5a
 8001cb6:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <display_GPS_status+0x174>)
 8001cb8:	f004 ff96 	bl	8006be8 <u8g2_DrawXBM>
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	bf00      	nop
 8001cc0:	3730      	adds	r7, #48	; 0x30
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08019a04 	.word	0x08019a04
 8001ccc:	45e7b273 	.word	0x45e7b273
 8001cd0:	08019a08 	.word	0x08019a08
 8001cd4:	88888889 	.word	0x88888889
 8001cd8:	08019a0c 	.word	0x08019a0c
 8001cdc:	08019a10 	.word	0x08019a10
 8001ce0:	08019a14 	.word	0x08019a14
 8001ce4:	0801a084 	.word	0x0801a084
 8001ce8:	20002648 	.word	0x20002648
 8001cec:	08019a18 	.word	0x08019a18
 8001cf0:	2000073c 	.word	0x2000073c
 8001cf4:	20000724 	.word	0x20000724

08001cf8 <display_Chargement_perso>:
}
}


void display_Chargement_perso(void) 
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
	
	char name_start[20] = "HELIOS";
 8001cfe:	4a14      	ldr	r2, [pc, #80]	; (8001d50 <display_Chargement_perso+0x58>)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d06:	6018      	str	r0, [r3, #0]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	8019      	strh	r1, [r3, #0]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	0c0a      	lsrs	r2, r1, #16
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	f107 030b 	add.w	r3, r7, #11
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	731a      	strb	r2, [r3, #12]
//	#ifdef debug_sound_vibration
//	strcat(name_start, "_debug2");
//	#endif
	
//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
	u8g2_FirstPage(&u8g2);
 8001d20:	480c      	ldr	r0, [pc, #48]	; (8001d54 <display_Chargement_perso+0x5c>)
 8001d22:	f005 f82f 	bl	8006d84 <u8g2_FirstPage>
	u8g2_SetFont(&u8g2, u8g2_font_7x14_tr);	
 8001d26:	490c      	ldr	r1, [pc, #48]	; (8001d58 <display_Chargement_perso+0x60>)
 8001d28:	480a      	ldr	r0, [pc, #40]	; (8001d54 <display_Chargement_perso+0x5c>)
 8001d2a:	f005 fe29 	bl	8007980 <u8g2_SetFont>

	do 
	{
		u8g2_DrawStr(&u8g2, 50, 20, name_start);
 8001d2e:	1d3b      	adds	r3, r7, #4
 8001d30:	2214      	movs	r2, #20
 8001d32:	2132      	movs	r1, #50	; 0x32
 8001d34:	4807      	ldr	r0, [pc, #28]	; (8001d54 <display_Chargement_perso+0x5c>)
 8001d36:	f005 fd81 	bl	800783c <u8g2_DrawStr>
		
	}while (u8g2_NextPage(&u8g2));
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <display_Chargement_perso+0x5c>)
 8001d3c:	f005 f836 	bl	8006dac <u8g2_NextPage>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f3      	bne.n	8001d2e <display_Chargement_perso+0x36>
//		} while (u8g2_NextPage(&u8g2));
//		HAL_Delay(500);
//		}
//	
//	}
}
 8001d46:	bf00      	nop
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08019a48 	.word	0x08019a48
 8001d54:	20002648 	.word	0x20002648
 8001d58:	0801a3fc 	.word	0x0801a3fc

08001d5c <display_AlerteDanger>:



void display_AlerteDanger(int TabGen[], uint32_t TabAlertAll[], int type_warning) {
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b08b      	sub	sp, #44	; 0x2c
 8001d60:	af02      	add	r7, sp, #8
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]

if (	TabGen[TYPE_ALERT] != NONE_ALERT ) 
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	3390      	adds	r3, #144	; 0x90
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80df 	beq.w	8001f32 <display_AlerteDanger+0x1d6>
{
	u8g2_FirstPage(&u8g2);
 8001d74:	4871      	ldr	r0, [pc, #452]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001d76:	f005 f805 	bl	8006d84 <u8g2_FirstPage>
	do 
	{
		if (type_warning == 0) 
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d10a      	bne.n	8001d96 <display_AlerteDanger+0x3a>
		{
			u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height, (uint8_t *)warning1_bits); // blinking warning sign step 1
 8001d80:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <display_AlerteDanger+0x1e4>)
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2320      	movs	r3, #32
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2320      	movs	r3, #32
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2105      	movs	r1, #5
 8001d8e:	486b      	ldr	r0, [pc, #428]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001d90:	f004 ff2a 	bl	8006be8 <u8g2_DrawXBM>
 8001d94:	e009      	b.n	8001daa <display_AlerteDanger+0x4e>
		}
		else 
		{
			u8g2_DrawXBM(&u8g2, 5, 0, warning2_width, warning2_height, (uint8_t *)warning2_bits);  // blinking warning sign step 2
 8001d96:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <display_AlerteDanger+0x1e8>)
 8001d98:	9301      	str	r3, [sp, #4]
 8001d9a:	2320      	movs	r3, #32
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	2320      	movs	r3, #32
 8001da0:	2200      	movs	r2, #0
 8001da2:	2105      	movs	r1, #5
 8001da4:	4865      	ldr	r0, [pc, #404]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001da6:	f004 ff1f 	bl	8006be8 <u8g2_DrawXBM>
		}
		
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr ); 
 8001daa:	4967      	ldr	r1, [pc, #412]	; (8001f48 <display_AlerteDanger+0x1ec>)
 8001dac:	4863      	ldr	r0, [pc, #396]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001dae:	f005 fde7 	bl	8007980 <u8g2_SetFont>
		char timerChar[3];
		unsigned int timer = (SIGDURATION * 1000 + 500) -  (HAL_GetTick() - TabAlertAll[ALL_TIM_1]);
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	681c      	ldr	r4, [r3, #0]
 8001db6:	f008 fb01 	bl	800a3bc <HAL_GetTick>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	1ae3      	subs	r3, r4, r3
 8001dbe:	f503 43ee 	add.w	r3, r3, #30464	; 0x7700
 8001dc2:	3324      	adds	r3, #36	; 0x24
 8001dc4:	61fb      	str	r3, [r7, #28]
		timer = timer / 1000;
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <display_AlerteDanger+0x1f0>)
 8001dca:	fba2 2303 	umull	r2, r3, r2, r3
 8001dce:	099b      	lsrs	r3, r3, #6
 8001dd0:	61fb      	str	r3, [r7, #28]
		sprintf(timerChar, "%u", timer);
 8001dd2:	f107 0310 	add.w	r3, r7, #16
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	495d      	ldr	r1, [pc, #372]	; (8001f50 <display_AlerteDanger+0x1f4>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f015 f9c2 	bl	8017164 <siprintf>
		int posXmes = 45, posYmes = 0;
 8001de0:	232d      	movs	r3, #45	; 0x2d
 8001de2:	61bb      	str	r3, [r7, #24]
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]
		
		u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE");
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	b2d9      	uxtb	r1, r3
 8001dec:	4b59      	ldr	r3, [pc, #356]	; (8001f54 <display_AlerteDanger+0x1f8>)
 8001dee:	220d      	movs	r2, #13
 8001df0:	4852      	ldr	r0, [pc, #328]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001df2:	f005 fd23 	bl	800783c <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 80, 25, timerChar);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	2219      	movs	r2, #25
 8001dfc:	2150      	movs	r1, #80	; 0x50
 8001dfe:	484f      	ldr	r0, [pc, #316]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e00:	f005 fd1c 	bl	800783c <u8g2_DrawStr>
		
		if (TabGen[TYPE_ALERT] == ALERT_FALL) 
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	3390      	adds	r3, #144	; 0x90
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b0d      	cmp	r3, #13
 8001e0c:	d106      	bne.n	8001e1c <display_AlerteDanger+0xc0>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE CHUTE");
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	b2d9      	uxtb	r1, r3
 8001e12:	4b51      	ldr	r3, [pc, #324]	; (8001f58 <display_AlerteDanger+0x1fc>)
 8001e14:	220d      	movs	r2, #13
 8001e16:	4849      	ldr	r0, [pc, #292]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e18:	f005 fd10 	bl	800783c <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "CHUTE");
		}
		if (TabGen[TYPE_ALERT] == ALERT_SOS) 
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3390      	adds	r3, #144	; 0x90
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d106      	bne.n	8001e34 <display_AlerteDanger+0xd8>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SOS");
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	b2d9      	uxtb	r1, r3
 8001e2a:	4b4c      	ldr	r3, [pc, #304]	; (8001f5c <display_AlerteDanger+0x200>)
 8001e2c:	220d      	movs	r2, #13
 8001e2e:	4843      	ldr	r0, [pc, #268]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e30:	f005 fd04 	bl	800783c <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "SOS");
		}
		if (TabGen[TYPE_ALERT] == ALERT_MALAISE) 
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	3390      	adds	r3, #144	; 0x90
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d106      	bne.n	8001e4c <display_AlerteDanger+0xf0>
		{
			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE MALAISE");
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	b2d9      	uxtb	r1, r3
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <display_AlerteDanger+0x204>)
 8001e44:	220d      	movs	r2, #13
 8001e46:	483d      	ldr	r0, [pc, #244]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e48:	f005 fcf8 	bl	800783c <u8g2_DrawStr>
			//u8g2_DrawStr(&u8g2, 100, 13, "MALAISE");
		}
		if (TabGen[TYPE_ALERT] == ALERT_SONO) 
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	3390      	adds	r3, #144	; 0x90
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d106      	bne.n	8001e64 <display_AlerteDanger+0x108>
		{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SON");
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <display_AlerteDanger+0x208>)
 8001e5c:	220d      	movs	r2, #13
 8001e5e:	4837      	ldr	r0, [pc, #220]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e60:	f005 fcec 	bl	800783c <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "SON");
		}
		if (TabGen[TYPE_ALERT] == ALERT_H2SVME) 
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	3390      	adds	r3, #144	; 0x90
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b07      	cmp	r3, #7
 8001e6c:	d105      	bne.n	8001e7a <display_AlerteDanger+0x11e>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 8001e6e:	4b3e      	ldr	r3, [pc, #248]	; (8001f68 <display_AlerteDanger+0x20c>)
 8001e70:	220d      	movs	r2, #13
 8001e72:	2132      	movs	r1, #50	; 0x32
 8001e74:	4831      	ldr	r0, [pc, #196]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e76:	f005 fce1 	bl	800783c <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 30, "VME");
		}
		if (TabGen[TYPE_ALERT] == ALERT_H2SVLCT) 
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	3390      	adds	r3, #144	; 0x90
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d10b      	bne.n	8001e9c <display_AlerteDanger+0x140>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 8001e84:	4b38      	ldr	r3, [pc, #224]	; (8001f68 <display_AlerteDanger+0x20c>)
 8001e86:	220d      	movs	r2, #13
 8001e88:	2132      	movs	r1, #50	; 0x32
 8001e8a:	482c      	ldr	r0, [pc, #176]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e8c:	f005 fcd6 	bl	800783c <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8001e90:	4b36      	ldr	r3, [pc, #216]	; (8001f6c <display_AlerteDanger+0x210>)
 8001e92:	221e      	movs	r2, #30
 8001e94:	2164      	movs	r1, #100	; 0x64
 8001e96:	4829      	ldr	r0, [pc, #164]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001e98:	f005 fcd0 	bl	800783c <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_O2) 
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	3390      	adds	r3, #144	; 0x90
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d10b      	bne.n	8001ebe <display_AlerteDanger+0x162>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "MANQUE");
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <display_AlerteDanger+0x214>)
 8001ea8:	220d      	movs	r2, #13
 8001eaa:	2132      	movs	r1, #50	; 0x32
 8001eac:	4823      	ldr	r0, [pc, #140]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001eae:	f005 fcc5 	bl	800783c <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "O2");
 8001eb2:	4b30      	ldr	r3, [pc, #192]	; (8001f74 <display_AlerteDanger+0x218>)
 8001eb4:	221e      	movs	r2, #30
 8001eb6:	2164      	movs	r1, #100	; 0x64
 8001eb8:	4820      	ldr	r0, [pc, #128]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001eba:	f005 fcbf 	bl	800783c <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_COVME) 
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	3390      	adds	r3, #144	; 0x90
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2b0a      	cmp	r3, #10
 8001ec6:	d10b      	bne.n	8001ee0 <display_AlerteDanger+0x184>
		{
				u8g2_DrawStr(&u8g2, 50, 13, "CO");
 8001ec8:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <display_AlerteDanger+0x21c>)
 8001eca:	220d      	movs	r2, #13
 8001ecc:	2132      	movs	r1, #50	; 0x32
 8001ece:	481b      	ldr	r0, [pc, #108]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001ed0:	f005 fcb4 	bl	800783c <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VME");
 8001ed4:	4b29      	ldr	r3, [pc, #164]	; (8001f7c <display_AlerteDanger+0x220>)
 8001ed6:	221e      	movs	r2, #30
 8001ed8:	2164      	movs	r1, #100	; 0x64
 8001eda:	4818      	ldr	r0, [pc, #96]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001edc:	f005 fcae 	bl	800783c <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_COVLCT) 
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3390      	adds	r3, #144	; 0x90
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b0b      	cmp	r3, #11
 8001ee8:	d10b      	bne.n	8001f02 <display_AlerteDanger+0x1a6>
		{
					u8g2_DrawStr(&u8g2, 50, 13, "CO");
 8001eea:	4b23      	ldr	r3, [pc, #140]	; (8001f78 <display_AlerteDanger+0x21c>)
 8001eec:	220d      	movs	r2, #13
 8001eee:	2132      	movs	r1, #50	; 0x32
 8001ef0:	4812      	ldr	r0, [pc, #72]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001ef2:	f005 fca3 	bl	800783c <u8g2_DrawStr>
					u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8001ef6:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <display_AlerteDanger+0x210>)
 8001ef8:	221e      	movs	r2, #30
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001efe:	f005 fc9d 	bl	800783c <u8g2_DrawStr>
		}
		if (TabGen[TYPE_ALERT] == ALERT_EX) 
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3390      	adds	r3, #144	; 0x90
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	d10b      	bne.n	8001f24 <display_AlerteDanger+0x1c8>
		{
					u8g2_DrawStr(&u8g2, 50, 13, "RISQUE");
 8001f0c:	4b1c      	ldr	r3, [pc, #112]	; (8001f80 <display_AlerteDanger+0x224>)
 8001f0e:	220d      	movs	r2, #13
 8001f10:	2132      	movs	r1, #50	; 0x32
 8001f12:	480a      	ldr	r0, [pc, #40]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001f14:	f005 fc92 	bl	800783c <u8g2_DrawStr>
					u8g2_DrawStr(&u8g2, 100, 30, "EX");
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <display_AlerteDanger+0x228>)
 8001f1a:	221e      	movs	r2, #30
 8001f1c:	2164      	movs	r1, #100	; 0x64
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001f20:	f005 fc8c 	bl	800783c <u8g2_DrawStr>
		}
	} while (u8g2_NextPage(&u8g2));
 8001f24:	4805      	ldr	r0, [pc, #20]	; (8001f3c <display_AlerteDanger+0x1e0>)
 8001f26:	f004 ff41 	bl	8006dac <u8g2_NextPage>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f47f af24 	bne.w	8001d7a <display_AlerteDanger+0x1e>
}
}
 8001f32:	bf00      	nop
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd90      	pop	{r4, r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20002648 	.word	0x20002648
 8001f40:	20000128 	.word	0x20000128
 8001f44:	200001a8 	.word	0x200001a8
 8001f48:	0801a880 	.word	0x0801a880
 8001f4c:	10624dd3 	.word	0x10624dd3
 8001f50:	08019a0c 	.word	0x08019a0c
 8001f54:	08019a5c 	.word	0x08019a5c
 8001f58:	08019a64 	.word	0x08019a64
 8001f5c:	08019a74 	.word	0x08019a74
 8001f60:	08019a80 	.word	0x08019a80
 8001f64:	08019a90 	.word	0x08019a90
 8001f68:	08019a9c 	.word	0x08019a9c
 8001f6c:	08019aa0 	.word	0x08019aa0
 8001f70:	08019aa8 	.word	0x08019aa8
 8001f74:	08019ab0 	.word	0x08019ab0
 8001f78:	08019ab4 	.word	0x08019ab4
 8001f7c:	08019ab8 	.word	0x08019ab8
 8001f80:	08019abc 	.word	0x08019abc
 8001f84:	08019ac4 	.word	0x08019ac4

08001f88 <display_SendMess>:



void display_SendMess(void) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8001f8e:	4813      	ldr	r0, [pc, #76]	; (8001fdc <display_SendMess+0x54>)
 8001f90:	f004 fef8 	bl	8006d84 <u8g2_FirstPage>
	do {
		u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height, (uint8_t *)warning1_bits);
 8001f94:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <display_SendMess+0x58>)
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	2320      	movs	r3, #32
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	2320      	movs	r3, #32
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	2105      	movs	r1, #5
 8001fa2:	480e      	ldr	r0, [pc, #56]	; (8001fdc <display_SendMess+0x54>)
 8001fa4:	f004 fe20 	bl	8006be8 <u8g2_DrawXBM>
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8001fa8:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <display_SendMess+0x5c>)
 8001faa:	480c      	ldr	r0, [pc, #48]	; (8001fdc <display_SendMess+0x54>)
 8001fac:	f005 fce8 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 50, 13, "ENVOI");
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <display_SendMess+0x60>)
 8001fb2:	220d      	movs	r2, #13
 8001fb4:	2132      	movs	r1, #50	; 0x32
 8001fb6:	4809      	ldr	r0, [pc, #36]	; (8001fdc <display_SendMess+0x54>)
 8001fb8:	f005 fc40 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 30, "ALERTE");
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <display_SendMess+0x64>)
 8001fbe:	221e      	movs	r2, #30
 8001fc0:	2132      	movs	r1, #50	; 0x32
 8001fc2:	4806      	ldr	r0, [pc, #24]	; (8001fdc <display_SendMess+0x54>)
 8001fc4:	f005 fc3a 	bl	800783c <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 8001fc8:	4804      	ldr	r0, [pc, #16]	; (8001fdc <display_SendMess+0x54>)
 8001fca:	f004 feef 	bl	8006dac <u8g2_NextPage>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1df      	bne.n	8001f94 <display_SendMess+0xc>
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	20002648 	.word	0x20002648
 8001fe0:	20000128 	.word	0x20000128
 8001fe4:	0801a880 	.word	0x0801a880
 8001fe8:	08019ac8 	.word	0x08019ac8
 8001fec:	08019a5c 	.word	0x08019a5c

08001ff0 <display_Alerte>:

/*
* Permet d'afficher une alerte
*/
void display_Alerte(int TabGen[], uint8_t type_alerte) 
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0a6      	sub	sp, #152	; 0x98
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001ffc:	4953      	ldr	r1, [pc, #332]	; (800214c <display_Alerte+0x15c>)
 8001ffe:	4854      	ldr	r0, [pc, #336]	; (8002150 <display_Alerte+0x160>)
 8002000:	f005 fcbe 	bl	8007980 <u8g2_SetFont>

	if (GPSOK == 1)
	{

		if(show_RSSI == 1)
 8002004:	4b53      	ldr	r3, [pc, #332]	; (8002154 <display_Alerte+0x164>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d11b      	bne.n	8002044 <display_Alerte+0x54>
				//u8g2_DrawStr(&u8g2, 0, 30, str_display);
			}
			else
			if(SIGFOXOK == 1)
			{
				u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 800200c:	494f      	ldr	r1, [pc, #316]	; (800214c <display_Alerte+0x15c>)
 800200e:	4850      	ldr	r0, [pc, #320]	; (8002150 <display_Alerte+0x160>)
 8002010:	f005 fcb6 	bl	8007980 <u8g2_SetFont>

				u8g2_DrawStr(&u8g2, 0, 20, "Reseau ok a cette");
 8002014:	4b50      	ldr	r3, [pc, #320]	; (8002158 <display_Alerte+0x168>)
 8002016:	2214      	movs	r2, #20
 8002018:	2100      	movs	r1, #0
 800201a:	484d      	ldr	r0, [pc, #308]	; (8002150 <display_Alerte+0x160>)
 800201c:	f005 fc0e 	bl	800783c <u8g2_DrawStr>
				char str_display[25];
				//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
				sprintf(str_display, "position (RSSI%ddB)", TabGen[SIGFOX_RSSI]);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800202c:	494b      	ldr	r1, [pc, #300]	; (800215c <display_Alerte+0x16c>)
 800202e:	4618      	mov	r0, r3
 8002030:	f015 f898 	bl	8017164 <siprintf>
				//u8g2_DrawStr(&u8g2, 1, 8, str_display);
				u8g2_DrawStr(&u8g2, 0, 30, str_display);
 8002034:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002038:	221e      	movs	r2, #30
 800203a:	2100      	movs	r1, #0
 800203c:	4844      	ldr	r0, [pc, #272]	; (8002150 <display_Alerte+0x160>)
 800203e:	f005 fbfd 	bl	800783c <u8g2_DrawStr>
		{
			u8g2_DrawStr(&u8g2, 2, 30, "En attente de reseau");
		}

	}
}
 8002042:	e07e      	b.n	8002142 <display_Alerte+0x152>
		else if (TabGen[CHARGEC] == 1)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	33ac      	adds	r3, #172	; 0xac
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d113      	bne.n	8002076 <display_Alerte+0x86>
			u8g2_DrawStr(&u8g2, 1, 30, "Alertes desactivees");
 800204e:	4b44      	ldr	r3, [pc, #272]	; (8002160 <display_Alerte+0x170>)
 8002050:	221e      	movs	r2, #30
 8002052:	2101      	movs	r1, #1
 8002054:	483e      	ldr	r0, [pc, #248]	; (8002150 <display_Alerte+0x160>)
 8002056:	f005 fbf1 	bl	800783c <u8g2_DrawStr>
			sprintf(str_display, "En charge...");//: %ddB", TabGen[LORAWAN_RSSI]);
 800205a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800205e:	4941      	ldr	r1, [pc, #260]	; (8002164 <display_Alerte+0x174>)
 8002060:	4618      	mov	r0, r3
 8002062:	f015 f87f 	bl	8017164 <siprintf>
			u8g2_DrawStr(&u8g2, 1, 18, str_display);
 8002066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800206a:	2212      	movs	r2, #18
 800206c:	2101      	movs	r1, #1
 800206e:	4838      	ldr	r0, [pc, #224]	; (8002150 <display_Alerte+0x160>)
 8002070:	f005 fbe4 	bl	800783c <u8g2_DrawStr>
}
 8002074:	e065      	b.n	8002142 <display_Alerte+0x152>
			if(TabGen[BAT_VALUE] < 15 && TabGen[BAT_VALUE] > 5 && (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	33a8      	adds	r3, #168	; 0xa8
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b0e      	cmp	r3, #14
 800207e:	dc15      	bgt.n	80020ac <display_Alerte+0xbc>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	33a8      	adds	r3, #168	; 0xa8
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b05      	cmp	r3, #5
 8002088:	dd10      	ble.n	80020ac <display_Alerte+0xbc>
 800208a:	f008 f997 	bl	800a3bc <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	4b35      	ldr	r3, [pc, #212]	; (8002168 <display_Alerte+0x178>)
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	f242 720f 	movw	r2, #9999	; 0x270f
 800209a:	4293      	cmp	r3, r2
 800209c:	d806      	bhi.n	80020ac <display_Alerte+0xbc>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie faible");
 800209e:	4b33      	ldr	r3, [pc, #204]	; (800216c <display_Alerte+0x17c>)
 80020a0:	221e      	movs	r2, #30
 80020a2:	2102      	movs	r1, #2
 80020a4:	482a      	ldr	r0, [pc, #168]	; (8002150 <display_Alerte+0x160>)
 80020a6:	f005 fbc9 	bl	800783c <u8g2_DrawStr>
 80020aa:	e04a      	b.n	8002142 <display_Alerte+0x152>
			else if(TabGen[BAT_VALUE] < 5  && (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	33a8      	adds	r3, #168	; 0xa8
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	dc10      	bgt.n	80020d8 <display_Alerte+0xe8>
 80020b6:	f008 f981 	bl	800a3bc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <display_Alerte+0x178>)
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f242 720f 	movw	r2, #9999	; 0x270f
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d806      	bhi.n	80020d8 <display_Alerte+0xe8>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie tres faible");
 80020ca:	4b29      	ldr	r3, [pc, #164]	; (8002170 <display_Alerte+0x180>)
 80020cc:	221e      	movs	r2, #30
 80020ce:	2102      	movs	r1, #2
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <display_Alerte+0x160>)
 80020d2:	f005 fbb3 	bl	800783c <u8g2_DrawStr>
 80020d6:	e034      	b.n	8002142 <display_Alerte+0x152>
				if (TabGen[STATUT_GPS] == 1)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	33a0      	adds	r3, #160	; 0xa0
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d106      	bne.n	80020f0 <display_Alerte+0x100>
					u8g2_DrawStr(&u8g2, 2, 30, "Protection active");
 80020e2:	4b24      	ldr	r3, [pc, #144]	; (8002174 <display_Alerte+0x184>)
 80020e4:	221e      	movs	r2, #30
 80020e6:	2102      	movs	r1, #2
 80020e8:	4819      	ldr	r0, [pc, #100]	; (8002150 <display_Alerte+0x160>)
 80020ea:	f005 fba7 	bl	800783c <u8g2_DrawStr>
}
 80020ee:	e028      	b.n	8002142 <display_Alerte+0x152>
				else if (TabGen[GPS_ON] == 1 || TabGen[FORCE_GPS] == 1 )
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3304      	adds	r3, #4
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d004      	beq.n	8002104 <display_Alerte+0x114>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	33f0      	adds	r3, #240	; 0xf0
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d106      	bne.n	8002112 <display_Alerte+0x122>
					u8g2_DrawStr(&u8g2, 2, 30, "Recherche GPS...");
 8002104:	4b1c      	ldr	r3, [pc, #112]	; (8002178 <display_Alerte+0x188>)
 8002106:	221e      	movs	r2, #30
 8002108:	2102      	movs	r1, #2
 800210a:	4811      	ldr	r0, [pc, #68]	; (8002150 <display_Alerte+0x160>)
 800210c:	f005 fb96 	bl	800783c <u8g2_DrawStr>
 8002110:	e017      	b.n	8002142 <display_Alerte+0x152>
				else if (	TabGen[GPS_ON] == 0 &&	TabGen[GPS_ON_PREVIOUS] == 0 )
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10b      	bne.n	8002134 <display_Alerte+0x144>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	338c      	adds	r3, #140	; 0x8c
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <display_Alerte+0x144>
					u8g2_DrawStr(&u8g2, 2, 30, "GPS OFF");
 8002126:	4b15      	ldr	r3, [pc, #84]	; (800217c <display_Alerte+0x18c>)
 8002128:	221e      	movs	r2, #30
 800212a:	2102      	movs	r1, #2
 800212c:	4808      	ldr	r0, [pc, #32]	; (8002150 <display_Alerte+0x160>)
 800212e:	f005 fb85 	bl	800783c <u8g2_DrawStr>
 8002132:	e006      	b.n	8002142 <display_Alerte+0x152>
					u8g2_DrawStr(&u8g2, 2, 30, "NONE");
 8002134:	4b12      	ldr	r3, [pc, #72]	; (8002180 <display_Alerte+0x190>)
 8002136:	221e      	movs	r2, #30
 8002138:	2102      	movs	r1, #2
 800213a:	4805      	ldr	r0, [pc, #20]	; (8002150 <display_Alerte+0x160>)
 800213c:	f005 fb7e 	bl	800783c <u8g2_DrawStr>
}
 8002140:	e7ff      	b.n	8002142 <display_Alerte+0x152>
 8002142:	bf00      	nop
 8002144:	3798      	adds	r7, #152	; 0x98
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	0801a880 	.word	0x0801a880
 8002150:	20002648 	.word	0x20002648
 8002154:	20000ab0 	.word	0x20000ab0
 8002158:	08019ad0 	.word	0x08019ad0
 800215c:	08019ae4 	.word	0x08019ae4
 8002160:	08019af8 	.word	0x08019af8
 8002164:	08019b0c 	.word	0x08019b0c
 8002168:	200027fc 	.word	0x200027fc
 800216c:	08019b1c 	.word	0x08019b1c
 8002170:	08019b2c 	.word	0x08019b2c
 8002174:	08019b44 	.word	0x08019b44
 8002178:	08019b58 	.word	0x08019b58
 800217c:	08019b6c 	.word	0x08019b6c
 8002180:	08019b74 	.word	0x08019b74

08002184 <display_wait>:



void display_wait(uint8_t step) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af02      	add	r7, sp, #8
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
	switch (step) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3b01      	subs	r3, #1
 8002192:	2b07      	cmp	r3, #7
 8002194:	f200 8128 	bhi.w	80023e8 <display_wait+0x264>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <display_wait+0x1c>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021c1 	.word	0x080021c1
 80021a4:	08002209 	.word	0x08002209
 80021a8:	08002251 	.word	0x08002251
 80021ac:	08002299 	.word	0x08002299
 80021b0:	080022e1 	.word	0x080022e1
 80021b4:	08002329 	.word	0x08002329
 80021b8:	08002371 	.word	0x08002371
 80021bc:	080023ad 	.word	0x080023ad
	case 1:
		u8g2_FirstPage(&u8g2);
 80021c0:	488b      	ldr	r0, [pc, #556]	; (80023f0 <display_wait+0x26c>)
 80021c2:	f004 fddf 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading1_width, loading1_height, (uint8_t *)loading1_bits);
 80021c6:	4b8b      	ldr	r3, [pc, #556]	; (80023f4 <display_wait+0x270>)
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	2320      	movs	r3, #32
 80021cc:	9300      	str	r3, [sp, #0]
 80021ce:	2320      	movs	r3, #32
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	4886      	ldr	r0, [pc, #536]	; (80023f0 <display_wait+0x26c>)
 80021d6:	f004 fd07 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80021da:	4987      	ldr	r1, [pc, #540]	; (80023f8 <display_wait+0x274>)
 80021dc:	4884      	ldr	r0, [pc, #528]	; (80023f0 <display_wait+0x26c>)
 80021de:	f005 fbcf 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 80021e2:	4b86      	ldr	r3, [pc, #536]	; (80023fc <display_wait+0x278>)
 80021e4:	220c      	movs	r2, #12
 80021e6:	212d      	movs	r1, #45	; 0x2d
 80021e8:	4881      	ldr	r0, [pc, #516]	; (80023f0 <display_wait+0x26c>)
 80021ea:	f005 fb27 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 80021ee:	4b84      	ldr	r3, [pc, #528]	; (8002400 <display_wait+0x27c>)
 80021f0:	221c      	movs	r2, #28
 80021f2:	2132      	movs	r1, #50	; 0x32
 80021f4:	487e      	ldr	r0, [pc, #504]	; (80023f0 <display_wait+0x26c>)
 80021f6:	f005 fb21 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80021fa:	487d      	ldr	r0, [pc, #500]	; (80023f0 <display_wait+0x26c>)
 80021fc:	f004 fdd6 	bl	8006dac <u8g2_NextPage>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1df      	bne.n	80021c6 <display_wait+0x42>
		break;
 8002206:	e0ef      	b.n	80023e8 <display_wait+0x264>
	case 2:
		u8g2_FirstPage(&u8g2);
 8002208:	4879      	ldr	r0, [pc, #484]	; (80023f0 <display_wait+0x26c>)
 800220a:	f004 fdbb 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading2_width, loading2_height, (uint8_t *)loading2_bits);
 800220e:	4b7d      	ldr	r3, [pc, #500]	; (8002404 <display_wait+0x280>)
 8002210:	9301      	str	r3, [sp, #4]
 8002212:	2320      	movs	r3, #32
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	2320      	movs	r3, #32
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	4874      	ldr	r0, [pc, #464]	; (80023f0 <display_wait+0x26c>)
 800221e:	f004 fce3 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8002222:	4975      	ldr	r1, [pc, #468]	; (80023f8 <display_wait+0x274>)
 8002224:	4872      	ldr	r0, [pc, #456]	; (80023f0 <display_wait+0x26c>)
 8002226:	f005 fbab 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800222a:	4b74      	ldr	r3, [pc, #464]	; (80023fc <display_wait+0x278>)
 800222c:	220c      	movs	r2, #12
 800222e:	212d      	movs	r1, #45	; 0x2d
 8002230:	486f      	ldr	r0, [pc, #444]	; (80023f0 <display_wait+0x26c>)
 8002232:	f005 fb03 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 8002236:	4b72      	ldr	r3, [pc, #456]	; (8002400 <display_wait+0x27c>)
 8002238:	221c      	movs	r2, #28
 800223a:	2132      	movs	r1, #50	; 0x32
 800223c:	486c      	ldr	r0, [pc, #432]	; (80023f0 <display_wait+0x26c>)
 800223e:	f005 fafd 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002242:	486b      	ldr	r0, [pc, #428]	; (80023f0 <display_wait+0x26c>)
 8002244:	f004 fdb2 	bl	8006dac <u8g2_NextPage>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1df      	bne.n	800220e <display_wait+0x8a>
		break;
 800224e:	e0cb      	b.n	80023e8 <display_wait+0x264>

	case 3 :
		u8g2_FirstPage(&u8g2);
 8002250:	4867      	ldr	r0, [pc, #412]	; (80023f0 <display_wait+0x26c>)
 8002252:	f004 fd97 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading3_width, loading3_height, (uint8_t *)loading3_bits);
 8002256:	4b6c      	ldr	r3, [pc, #432]	; (8002408 <display_wait+0x284>)
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	2320      	movs	r3, #32
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2320      	movs	r3, #32
 8002260:	2200      	movs	r2, #0
 8002262:	2100      	movs	r1, #0
 8002264:	4862      	ldr	r0, [pc, #392]	; (80023f0 <display_wait+0x26c>)
 8002266:	f004 fcbf 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 800226a:	4963      	ldr	r1, [pc, #396]	; (80023f8 <display_wait+0x274>)
 800226c:	4860      	ldr	r0, [pc, #384]	; (80023f0 <display_wait+0x26c>)
 800226e:	f005 fb87 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002272:	4b62      	ldr	r3, [pc, #392]	; (80023fc <display_wait+0x278>)
 8002274:	220c      	movs	r2, #12
 8002276:	212d      	movs	r1, #45	; 0x2d
 8002278:	485d      	ldr	r0, [pc, #372]	; (80023f0 <display_wait+0x26c>)
 800227a:	f005 fadf 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 800227e:	4b63      	ldr	r3, [pc, #396]	; (800240c <display_wait+0x288>)
 8002280:	221c      	movs	r2, #28
 8002282:	2132      	movs	r1, #50	; 0x32
 8002284:	485a      	ldr	r0, [pc, #360]	; (80023f0 <display_wait+0x26c>)
 8002286:	f005 fad9 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800228a:	4859      	ldr	r0, [pc, #356]	; (80023f0 <display_wait+0x26c>)
 800228c:	f004 fd8e 	bl	8006dac <u8g2_NextPage>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1df      	bne.n	8002256 <display_wait+0xd2>
		break;
 8002296:	e0a7      	b.n	80023e8 <display_wait+0x264>
			case 4 :
		u8g2_FirstPage(&u8g2);
 8002298:	4855      	ldr	r0, [pc, #340]	; (80023f0 <display_wait+0x26c>)
 800229a:	f004 fd73 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading4_width, loading4_height, (uint8_t *)loading4_bits);
 800229e:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <display_wait+0x28c>)
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2320      	movs	r3, #32
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2320      	movs	r3, #32
 80022a8:	2200      	movs	r2, #0
 80022aa:	2100      	movs	r1, #0
 80022ac:	4850      	ldr	r0, [pc, #320]	; (80023f0 <display_wait+0x26c>)
 80022ae:	f004 fc9b 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80022b2:	4951      	ldr	r1, [pc, #324]	; (80023f8 <display_wait+0x274>)
 80022b4:	484e      	ldr	r0, [pc, #312]	; (80023f0 <display_wait+0x26c>)
 80022b6:	f005 fb63 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 80022ba:	4b50      	ldr	r3, [pc, #320]	; (80023fc <display_wait+0x278>)
 80022bc:	220c      	movs	r2, #12
 80022be:	212d      	movs	r1, #45	; 0x2d
 80022c0:	484b      	ldr	r0, [pc, #300]	; (80023f0 <display_wait+0x26c>)
 80022c2:	f005 fabb 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 80022c6:	4b51      	ldr	r3, [pc, #324]	; (800240c <display_wait+0x288>)
 80022c8:	221c      	movs	r2, #28
 80022ca:	2132      	movs	r1, #50	; 0x32
 80022cc:	4848      	ldr	r0, [pc, #288]	; (80023f0 <display_wait+0x26c>)
 80022ce:	f005 fab5 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80022d2:	4847      	ldr	r0, [pc, #284]	; (80023f0 <display_wait+0x26c>)
 80022d4:	f004 fd6a 	bl	8006dac <u8g2_NextPage>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1df      	bne.n	800229e <display_wait+0x11a>
		break;
 80022de:	e083      	b.n	80023e8 <display_wait+0x264>

	case 5:
		u8g2_FirstPage(&u8g2);
 80022e0:	4843      	ldr	r0, [pc, #268]	; (80023f0 <display_wait+0x26c>)
 80022e2:	f004 fd4f 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading5_width, loading5_height, (uint8_t *)loading5_bits);
 80022e6:	4b4b      	ldr	r3, [pc, #300]	; (8002414 <display_wait+0x290>)
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2320      	movs	r3, #32
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2320      	movs	r3, #32
 80022f0:	2200      	movs	r2, #0
 80022f2:	2100      	movs	r1, #0
 80022f4:	483e      	ldr	r0, [pc, #248]	; (80023f0 <display_wait+0x26c>)
 80022f6:	f004 fc77 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80022fa:	493f      	ldr	r1, [pc, #252]	; (80023f8 <display_wait+0x274>)
 80022fc:	483c      	ldr	r0, [pc, #240]	; (80023f0 <display_wait+0x26c>)
 80022fe:	f005 fb3f 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002302:	4b3e      	ldr	r3, [pc, #248]	; (80023fc <display_wait+0x278>)
 8002304:	220c      	movs	r2, #12
 8002306:	212d      	movs	r1, #45	; 0x2d
 8002308:	4839      	ldr	r0, [pc, #228]	; (80023f0 <display_wait+0x26c>)
 800230a:	f005 fa97 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 800230e:	4b42      	ldr	r3, [pc, #264]	; (8002418 <display_wait+0x294>)
 8002310:	221c      	movs	r2, #28
 8002312:	2132      	movs	r1, #50	; 0x32
 8002314:	4836      	ldr	r0, [pc, #216]	; (80023f0 <display_wait+0x26c>)
 8002316:	f005 fa91 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800231a:	4835      	ldr	r0, [pc, #212]	; (80023f0 <display_wait+0x26c>)
 800231c:	f004 fd46 	bl	8006dac <u8g2_NextPage>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1df      	bne.n	80022e6 <display_wait+0x162>
		break;
 8002326:	e05f      	b.n	80023e8 <display_wait+0x264>
		case 6:
		u8g2_FirstPage(&u8g2);
 8002328:	4831      	ldr	r0, [pc, #196]	; (80023f0 <display_wait+0x26c>)
 800232a:	f004 fd2b 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading6_width, loading6_height, (uint8_t *)loading6_bits);
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <display_wait+0x298>)
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2320      	movs	r3, #32
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2320      	movs	r3, #32
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	482c      	ldr	r0, [pc, #176]	; (80023f0 <display_wait+0x26c>)
 800233e:	f004 fc53 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 8002342:	492d      	ldr	r1, [pc, #180]	; (80023f8 <display_wait+0x274>)
 8002344:	482a      	ldr	r0, [pc, #168]	; (80023f0 <display_wait+0x26c>)
 8002346:	f005 fb1b 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800234a:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <display_wait+0x278>)
 800234c:	220c      	movs	r2, #12
 800234e:	212d      	movs	r1, #45	; 0x2d
 8002350:	4827      	ldr	r0, [pc, #156]	; (80023f0 <display_wait+0x26c>)
 8002352:	f005 fa73 	bl	800783c <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 8002356:	4b30      	ldr	r3, [pc, #192]	; (8002418 <display_wait+0x294>)
 8002358:	221c      	movs	r2, #28
 800235a:	2132      	movs	r1, #50	; 0x32
 800235c:	4824      	ldr	r0, [pc, #144]	; (80023f0 <display_wait+0x26c>)
 800235e:	f005 fa6d 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002362:	4823      	ldr	r0, [pc, #140]	; (80023f0 <display_wait+0x26c>)
 8002364:	f004 fd22 	bl	8006dac <u8g2_NextPage>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1df      	bne.n	800232e <display_wait+0x1aa>
		break;
 800236e:	e03b      	b.n	80023e8 <display_wait+0x264>

	case 7:
		u8g2_FirstPage(&u8g2);
 8002370:	481f      	ldr	r0, [pc, #124]	; (80023f0 <display_wait+0x26c>)
 8002372:	f004 fd07 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading7_width, loading7_height, (uint8_t *)loading7_bits);
 8002376:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <display_wait+0x29c>)
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2320      	movs	r3, #32
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2320      	movs	r3, #32
 8002380:	2200      	movs	r2, #0
 8002382:	2100      	movs	r1, #0
 8002384:	481a      	ldr	r0, [pc, #104]	; (80023f0 <display_wait+0x26c>)
 8002386:	f004 fc2f 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 800238a:	491b      	ldr	r1, [pc, #108]	; (80023f8 <display_wait+0x274>)
 800238c:	4818      	ldr	r0, [pc, #96]	; (80023f0 <display_wait+0x26c>)
 800238e:	f005 faf7 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 8002392:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <display_wait+0x278>)
 8002394:	2214      	movs	r2, #20
 8002396:	2128      	movs	r1, #40	; 0x28
 8002398:	4815      	ldr	r0, [pc, #84]	; (80023f0 <display_wait+0x26c>)
 800239a:	f005 fa4f 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800239e:	4814      	ldr	r0, [pc, #80]	; (80023f0 <display_wait+0x26c>)
 80023a0:	f004 fd04 	bl	8006dac <u8g2_NextPage>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1e5      	bne.n	8002376 <display_wait+0x1f2>
		break;
 80023aa:	e01d      	b.n	80023e8 <display_wait+0x264>
		
	case 8:
		u8g2_FirstPage(&u8g2);
 80023ac:	4810      	ldr	r0, [pc, #64]	; (80023f0 <display_wait+0x26c>)
 80023ae:	f004 fce9 	bl	8006d84 <u8g2_FirstPage>
		do {
			u8g2_DrawXBM(&u8g2, 0, 0, loading8_width, loading8_height, (uint8_t *)loading8_bits);
 80023b2:	4b1c      	ldr	r3, [pc, #112]	; (8002424 <display_wait+0x2a0>)
 80023b4:	9301      	str	r3, [sp, #4]
 80023b6:	2320      	movs	r3, #32
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2320      	movs	r3, #32
 80023bc:	2200      	movs	r2, #0
 80023be:	2100      	movs	r1, #0
 80023c0:	480b      	ldr	r0, [pc, #44]	; (80023f0 <display_wait+0x26c>)
 80023c2:	f004 fc11 	bl	8006be8 <u8g2_DrawXBM>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr );
 80023c6:	490c      	ldr	r1, [pc, #48]	; (80023f8 <display_wait+0x274>)
 80023c8:	4809      	ldr	r0, [pc, #36]	; (80023f0 <display_wait+0x26c>)
 80023ca:	f005 fad9 	bl	8007980 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <display_wait+0x278>)
 80023d0:	2214      	movs	r2, #20
 80023d2:	2128      	movs	r1, #40	; 0x28
 80023d4:	4806      	ldr	r0, [pc, #24]	; (80023f0 <display_wait+0x26c>)
 80023d6:	f005 fa31 	bl	800783c <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80023da:	4805      	ldr	r0, [pc, #20]	; (80023f0 <display_wait+0x26c>)
 80023dc:	f004 fce6 	bl	8006dac <u8g2_NextPage>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1e5      	bne.n	80023b2 <display_wait+0x22e>
		break;
 80023e6:	bf00      	nop
	}
}
 80023e8:	bf00      	nop
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20002648 	.word	0x20002648
 80023f4:	20000228 	.word	0x20000228
 80023f8:	0801a880 	.word	0x0801a880
 80023fc:	08019b7c 	.word	0x08019b7c
 8002400:	08019b88 	.word	0x08019b88
 8002404:	200002a8 	.word	0x200002a8
 8002408:	20000328 	.word	0x20000328
 800240c:	08019b94 	.word	0x08019b94
 8002410:	200003a8 	.word	0x200003a8
 8002414:	20000428 	.word	0x20000428
 8002418:	08019ba0 	.word	0x08019ba0
 800241c:	200004a8 	.word	0x200004a8
 8002420:	20000528 	.word	0x20000528
 8002424:	200005a8 	.word	0x200005a8

08002428 <display_Print>:

/*
* Fonction permettant d'afficher un message basique
*/
void display_Print(char *msg) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 8002430:	480b      	ldr	r0, [pc, #44]	; (8002460 <display_Print+0x38>)
 8002432:	f004 fca7 	bl	8006d84 <u8g2_FirstPage>
	do {
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 8002436:	490b      	ldr	r1, [pc, #44]	; (8002464 <display_Print+0x3c>)
 8002438:	4809      	ldr	r0, [pc, #36]	; (8002460 <display_Print+0x38>)
 800243a:	f005 faa1 	bl	8007980 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 15, msg);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	220f      	movs	r2, #15
 8002442:	2100      	movs	r1, #0
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <display_Print+0x38>)
 8002446:	f005 f9f9 	bl	800783c <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <display_Print+0x38>)
 800244c:	f004 fcae 	bl	8006dac <u8g2_NextPage>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ef      	bne.n	8002436 <display_Print+0xe>
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20002648 	.word	0x20002648
 8002464:	0801ac6c 	.word	0x0801ac6c

08002468 <u8x8_byte_hw_i2c>:

/*
* fonction pour u8g2
*/
uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	460b      	mov	r3, r1
 8002474:	72fb      	strb	r3, [r7, #11]
 8002476:	4613      	mov	r3, r2
 8002478:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	/* add extra byte for the i2c address */
	static uint8_t buffer[34];
	static uint8_t buf_idx;
	uint8_t *data;
	switch (msg)  {
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	3b14      	subs	r3, #20
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d844      	bhi.n	800250c <u8x8_byte_hw_i2c+0xa4>
 8002482:	a201      	add	r2, pc, #4	; (adr r2, 8002488 <u8x8_byte_hw_i2c+0x20>)
 8002484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002488:	08002511 	.word	0x08002511
 800248c:	0800250d 	.word	0x0800250d
 8002490:	0800250d 	.word	0x0800250d
 8002494:	080024bd 	.word	0x080024bd
 8002498:	080024ed 	.word	0x080024ed
 800249c:	080024f5 	.word	0x080024f5
 80024a0:	0800250d 	.word	0x0800250d
 80024a4:	0800250d 	.word	0x0800250d
 80024a8:	0800250d 	.word	0x0800250d
 80024ac:	0800250d 	.word	0x0800250d
 80024b0:	0800250d 	.word	0x0800250d
 80024b4:	0800250d 	.word	0x0800250d
 80024b8:	08002511 	.word	0x08002511
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t *)arg_ptr;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	617b      	str	r3, [r7, #20]
		while ( arg_int > 0 )
 80024c0:	e010      	b.n	80024e4 <u8x8_byte_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <u8x8_byte_hw_i2c+0xb4>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	b2d1      	uxtb	r1, r2
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <u8x8_byte_hw_i2c+0xb4>)
 80024cc:	7011      	strb	r1, [r2, #0]
 80024ce:	461a      	mov	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	7819      	ldrb	r1, [r3, #0]
 80024d4:	4b12      	ldr	r3, [pc, #72]	; (8002520 <u8x8_byte_hw_i2c+0xb8>)
 80024d6:	5499      	strb	r1, [r3, r2]
			data++;
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
			arg_int--;
 80024de:	7abb      	ldrb	r3, [r7, #10]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	72bb      	strb	r3, [r7, #10]
		while ( arg_int > 0 )
 80024e4:	7abb      	ldrb	r3, [r7, #10]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1eb      	bne.n	80024c2 <u8x8_byte_hw_i2c+0x5a>
		}
		break;
 80024ea:	e012      	b.n	8002512 <u8x8_byte_hw_i2c+0xaa>
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;

	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <u8x8_byte_hw_i2c+0xb4>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	701a      	strb	r2, [r3, #0]
		break;
 80024f2:	e00e      	b.n	8002512 <u8x8_byte_hw_i2c+0xaa>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&BIGOLED_I2C_PORT, (0x78), (uint8_t *)buffer, buf_idx, 1000);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <u8x8_byte_hw_i2c+0xb4>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024fe:	9200      	str	r2, [sp, #0]
 8002500:	4a07      	ldr	r2, [pc, #28]	; (8002520 <u8x8_byte_hw_i2c+0xb8>)
 8002502:	2178      	movs	r1, #120	; 0x78
 8002504:	4807      	ldr	r0, [pc, #28]	; (8002524 <u8x8_byte_hw_i2c+0xbc>)
 8002506:	f009 f89d 	bl	800b644 <HAL_I2C_Master_Transmit>
		break;
 800250a:	e002      	b.n	8002512 <u8x8_byte_hw_i2c+0xaa>

	default:
		return 0;
 800250c:	2300      	movs	r3, #0
 800250e:	e001      	b.n	8002514 <u8x8_byte_hw_i2c+0xac>
		break;
 8002510:	bf00      	nop
	}
	return 1;
 8002512:	2301      	movs	r3, #1
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000ab1 	.word	0x20000ab1
 8002520:	20000ab4 	.word	0x20000ab4
 8002524:	20001ce4 	.word	0x20001ce4

08002528 <u8x8_gpio_and_delay>:

/*
* Fonction pour u8g2
*/
uint8_t u8x8_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	72fb      	strb	r3, [r7, #11]
 8002536:	4613      	mov	r3, r2
 8002538:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800253a:	7afb      	ldrb	r3, [r7, #11]
 800253c:	3b28      	subs	r3, #40	; 0x28
 800253e:	2b25      	cmp	r3, #37	; 0x25
 8002540:	d867      	bhi.n	8002612 <u8x8_gpio_and_delay+0xea>
 8002542:	a201      	add	r2, pc, #4	; (adr r2, 8002548 <u8x8_gpio_and_delay+0x20>)
 8002544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002548:	080025e1 	.word	0x080025e1
 800254c:	080025e9 	.word	0x080025e9
 8002550:	08002613 	.word	0x08002613
 8002554:	08002613 	.word	0x08002613
 8002558:	08002613 	.word	0x08002613
 800255c:	0800261d 	.word	0x0800261d
 8002560:	08002613 	.word	0x08002613
 8002564:	08002613 	.word	0x08002613
 8002568:	08002613 	.word	0x08002613
 800256c:	08002613 	.word	0x08002613
 8002570:	08002613 	.word	0x08002613
 8002574:	08002613 	.word	0x08002613
 8002578:	08002613 	.word	0x08002613
 800257c:	08002613 	.word	0x08002613
 8002580:	08002613 	.word	0x08002613
 8002584:	08002613 	.word	0x08002613
 8002588:	08002613 	.word	0x08002613
 800258c:	08002613 	.word	0x08002613
 8002590:	08002613 	.word	0x08002613
 8002594:	08002613 	.word	0x08002613
 8002598:	08002613 	.word	0x08002613
 800259c:	08002613 	.word	0x08002613
 80025a0:	08002613 	.word	0x08002613
 80025a4:	08002613 	.word	0x08002613
 80025a8:	08002613 	.word	0x08002613
 80025ac:	08002613 	.word	0x08002613
 80025b0:	08002613 	.word	0x08002613
 80025b4:	08002613 	.word	0x08002613
 80025b8:	08002613 	.word	0x08002613
 80025bc:	08002613 	.word	0x08002613
 80025c0:	08002613 	.word	0x08002613
 80025c4:	08002613 	.word	0x08002613
 80025c8:	08002613 	.word	0x08002613
 80025cc:	08002613 	.word	0x08002613
 80025d0:	08002613 	.word	0x08002613
 80025d4:	08002613 	.word	0x08002613
 80025d8:	080025f3 	.word	0x080025f3
 80025dc:	08002603 	.word	0x08002603
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 80025e0:	2001      	movs	r0, #1
 80025e2:	f007 fef7 	bl	800a3d4 <HAL_Delay>
		break;
 80025e6:	e01a      	b.n	800261e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 80025e8:	7abb      	ldrb	r3, [r7, #10]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f007 fef2 	bl	800a3d4 <HAL_Delay>
		break;
 80025f0:	e015      	b.n	800261e <u8x8_gpio_and_delay+0xf6>
		break;

	case U8X8_MSG_GPIO_I2C_CLOCK:
		// arg_int=0: Output low at I2C clock pin
		// arg_int=1: Input dir with pullup high for I2C clock pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, arg_int);
 80025f2:	7abb      	ldrb	r3, [r7, #10]
 80025f4:	461a      	mov	r2, r3
 80025f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025fa:	480b      	ldr	r0, [pc, #44]	; (8002628 <u8x8_gpio_and_delay+0x100>)
 80025fc:	f008 ff7a 	bl	800b4f4 <HAL_GPIO_WritePin>
		break;
 8002600:	e00d      	b.n	800261e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_GPIO_I2C_DATA:
		// arg_int=0: Output low at I2C data pin
		// arg_int=1: Input dir with pullup high for I2C data pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, arg_int);
 8002602:	7abb      	ldrb	r3, [r7, #10]
 8002604:	461a      	mov	r2, r3
 8002606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800260a:	4807      	ldr	r0, [pc, #28]	; (8002628 <u8x8_gpio_and_delay+0x100>)
 800260c:	f008 ff72 	bl	800b4f4 <HAL_GPIO_WritePin>
		break;
 8002610:	e005      	b.n	800261e <u8x8_gpio_and_delay+0xf6>

	default:
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 800261a:	e000      	b.n	800261e <u8x8_gpio_and_delay+0xf6>
		break;
 800261c:	bf00      	nop

	}
	return 1;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	48000400 	.word	0x48000400

0800262c <display_BatteryLvl>:

/*
* Permet d'afficher le niveau de batterie
*/
void display_BatteryLvl(uint8_t lvl, uint8_t posXmes, uint8_t posYmes)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af02      	add	r7, sp, #8
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
 8002636:	460b      	mov	r3, r1
 8002638:	71bb      	strb	r3, [r7, #6]
 800263a:	4613      	mov	r3, r2
 800263c:	717b      	strb	r3, [r7, #5]

	if ( lvl <= 10) 
 800263e:	79fb      	ldrb	r3, [r7, #7]
 8002640:	2b0a      	cmp	r3, #10
 8002642:	d80a      	bhi.n	800265a <display_BatteryLvl+0x2e>
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_0_width, bat_0_height, (uint8_t *)bat_0_bits);
 8002644:	79b9      	ldrb	r1, [r7, #6]
 8002646:	4b37      	ldr	r3, [pc, #220]	; (8002724 <display_BatteryLvl+0xf8>)
 8002648:	9301      	str	r3, [sp, #4]
 800264a:	230c      	movs	r3, #12
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	2314      	movs	r3, #20
 8002650:	2200      	movs	r2, #0
 8002652:	4835      	ldr	r0, [pc, #212]	; (8002728 <display_BatteryLvl+0xfc>)
 8002654:	f004 fac8 	bl	8006be8 <u8g2_DrawXBM>
	}
	else
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width, BattertyError_height, (uint8_t *)BattertyError_bits);
	}
}
 8002658:	e05f      	b.n	800271a <display_BatteryLvl+0xee>
	if (lvl > 10 && lvl < 30) 
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b0a      	cmp	r3, #10
 800265e:	d90d      	bls.n	800267c <display_BatteryLvl+0x50>
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	2b1d      	cmp	r3, #29
 8002664:	d80a      	bhi.n	800267c <display_BatteryLvl+0x50>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_20_width, bat_20_height, (uint8_t *)bat_20_bits);
 8002666:	79b9      	ldrb	r1, [r7, #6]
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <display_BatteryLvl+0x100>)
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	230c      	movs	r3, #12
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	2314      	movs	r3, #20
 8002672:	2200      	movs	r2, #0
 8002674:	482c      	ldr	r0, [pc, #176]	; (8002728 <display_BatteryLvl+0xfc>)
 8002676:	f004 fab7 	bl	8006be8 <u8g2_DrawXBM>
 800267a:	e04e      	b.n	800271a <display_BatteryLvl+0xee>
	if ( lvl >= 30 && lvl < 50) 
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	2b1d      	cmp	r3, #29
 8002680:	d90d      	bls.n	800269e <display_BatteryLvl+0x72>
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b31      	cmp	r3, #49	; 0x31
 8002686:	d80a      	bhi.n	800269e <display_BatteryLvl+0x72>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_40_width, bat_40_height, (uint8_t *)bat_40_bits);
 8002688:	79b9      	ldrb	r1, [r7, #6]
 800268a:	4b29      	ldr	r3, [pc, #164]	; (8002730 <display_BatteryLvl+0x104>)
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	230c      	movs	r3, #12
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2314      	movs	r3, #20
 8002694:	2200      	movs	r2, #0
 8002696:	4824      	ldr	r0, [pc, #144]	; (8002728 <display_BatteryLvl+0xfc>)
 8002698:	f004 faa6 	bl	8006be8 <u8g2_DrawXBM>
 800269c:	e03d      	b.n	800271a <display_BatteryLvl+0xee>
	if (lvl >= 50 && lvl < 70) 
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	2b31      	cmp	r3, #49	; 0x31
 80026a2:	d90d      	bls.n	80026c0 <display_BatteryLvl+0x94>
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b45      	cmp	r3, #69	; 0x45
 80026a8:	d80a      	bhi.n	80026c0 <display_BatteryLvl+0x94>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_60_width, bat_60_height, (uint8_t *)bat_60_bits);
 80026aa:	79b9      	ldrb	r1, [r7, #6]
 80026ac:	4b21      	ldr	r3, [pc, #132]	; (8002734 <display_BatteryLvl+0x108>)
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	230c      	movs	r3, #12
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2314      	movs	r3, #20
 80026b6:	2200      	movs	r2, #0
 80026b8:	481b      	ldr	r0, [pc, #108]	; (8002728 <display_BatteryLvl+0xfc>)
 80026ba:	f004 fa95 	bl	8006be8 <u8g2_DrawXBM>
 80026be:	e02c      	b.n	800271a <display_BatteryLvl+0xee>
	if (lvl >= 70 && lvl < 90) {
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	2b45      	cmp	r3, #69	; 0x45
 80026c4:	d90d      	bls.n	80026e2 <display_BatteryLvl+0xb6>
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b59      	cmp	r3, #89	; 0x59
 80026ca:	d80a      	bhi.n	80026e2 <display_BatteryLvl+0xb6>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_80_width, bat_80_height, (uint8_t *)bat_80_bits);
 80026cc:	79b9      	ldrb	r1, [r7, #6]
 80026ce:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <display_BatteryLvl+0x10c>)
 80026d0:	9301      	str	r3, [sp, #4]
 80026d2:	230c      	movs	r3, #12
 80026d4:	9300      	str	r3, [sp, #0]
 80026d6:	2314      	movs	r3, #20
 80026d8:	2200      	movs	r2, #0
 80026da:	4813      	ldr	r0, [pc, #76]	; (8002728 <display_BatteryLvl+0xfc>)
 80026dc:	f004 fa84 	bl	8006be8 <u8g2_DrawXBM>
 80026e0:	e01b      	b.n	800271a <display_BatteryLvl+0xee>
	if (lvl >= 90 && lvl <= 100)
 80026e2:	79fb      	ldrb	r3, [r7, #7]
 80026e4:	2b59      	cmp	r3, #89	; 0x59
 80026e6:	d90d      	bls.n	8002704 <display_BatteryLvl+0xd8>
 80026e8:	79fb      	ldrb	r3, [r7, #7]
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d80a      	bhi.n	8002704 <display_BatteryLvl+0xd8>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_100_width, bat_100_height, (uint8_t *)bat_100_bits);
 80026ee:	79b9      	ldrb	r1, [r7, #6]
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <display_BatteryLvl+0x110>)
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	230c      	movs	r3, #12
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2314      	movs	r3, #20
 80026fa:	2200      	movs	r2, #0
 80026fc:	480a      	ldr	r0, [pc, #40]	; (8002728 <display_BatteryLvl+0xfc>)
 80026fe:	f004 fa73 	bl	8006be8 <u8g2_DrawXBM>
 8002702:	e00a      	b.n	800271a <display_BatteryLvl+0xee>
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width, BattertyError_height, (uint8_t *)BattertyError_bits);
 8002704:	79b9      	ldrb	r1, [r7, #6]
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <display_BatteryLvl+0x114>)
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	230c      	movs	r3, #12
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	2314      	movs	r3, #20
 8002710:	2200      	movs	r2, #0
 8002712:	4805      	ldr	r0, [pc, #20]	; (8002728 <display_BatteryLvl+0xfc>)
 8002714:	f004 fa68 	bl	8006be8 <u8g2_DrawXBM>
}
 8002718:	e7ff      	b.n	800271a <display_BatteryLvl+0xee>
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	20000628 	.word	0x20000628
 8002728:	20002648 	.word	0x20002648
 800272c:	2000064c 	.word	0x2000064c
 8002730:	20000670 	.word	0x20000670
 8002734:	20000694 	.word	0x20000694
 8002738:	200006b8 	.word	0x200006b8
 800273c:	200006dc 	.word	0x200006dc
 8002740:	20000700 	.word	0x20000700

08002744 <PowerBuzVib>:
#include "hes_buzvib.h"

void PowerBuzVib(uint32_t Delay)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	OutBuzOn();
 800274c:	f000 ff14 	bl	8003578 <OutBuzOn>
	OutMotorWu(1);
 8002750:	2001      	movs	r0, #1
 8002752:	f000 feb3 	bl	80034bc <OutMotorWu>
	HAL_Delay(Delay);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f007 fe3c 	bl	800a3d4 <HAL_Delay>
	OutBuzOff();
 800275c:	f000 ff16 	bl	800358c <OutBuzOff>
	OutMotorWu(0);
 8002760:	2000      	movs	r0, #0
 8002762:	f000 feab 	bl	80034bc <OutMotorWu>
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <PowerVib>:
	HAL_Delay(Delay);
	OutBuzOff();
}

void PowerVib(uint32_t Delay)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
	OutMotorWu(1);
 8002776:	2001      	movs	r0, #1
 8002778:	f000 fea0 	bl	80034bc <OutMotorWu>
	HAL_Delay(Delay);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f007 fe29 	bl	800a3d4 <HAL_Delay>
	OutMotorWu(0);
 8002782:	2000      	movs	r0, #0
 8002784:	f000 fe9a 	bl	80034bc <OutMotorWu>
 8002788:	bf00      	nop
 800278a:	3708      	adds	r7, #8
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <chargerRead>:

extern HAL_StatusTypeDef I2C1_OK;

//LP3947
void chargerRead(int *bmsEOC,int *bmsCharge, int TabGen[])
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b08a      	sub	sp, #40	; 0x28
 8002794:	af04      	add	r7, sp, #16
 8002796:	60f8      	str	r0, [r7, #12]
 8002798:	60b9      	str	r1, [r7, #8]
 800279a:	607a      	str	r2, [r7, #4]

		
	uint8_t buffer = 0x00 ; 
 800279c:	2300      	movs	r3, #0
 800279e:	75fb      	strb	r3, [r7, #23]
		
	if (I2C1_OK == HAL_OK)
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <chargerRead+0x6c>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d110      	bne.n	80027ca <chargerRead+0x3a>
	{
		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C <<1, 0x01, 1, &buffer, 1, 100); // Charger
 80027a8:	2364      	movs	r3, #100	; 0x64
 80027aa:	9302      	str	r3, [sp, #8]
 80027ac:	2301      	movs	r3, #1
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	f107 0317 	add.w	r3, r7, #23
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2301      	movs	r3, #1
 80027b8:	2201      	movs	r2, #1
 80027ba:	218e      	movs	r1, #142	; 0x8e
 80027bc:	4810      	ldr	r0, [pc, #64]	; (8002800 <chargerRead+0x70>)
 80027be:	f009 f949 	bl	800ba54 <HAL_I2C_Mem_Read>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461a      	mov	r2, r3
 80027c6:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <chargerRead+0x6c>)
 80027c8:	701a      	strb	r2, [r3, #0]
	}
	
	

	*bmsEOC    = (int) (( buffer & ( (uint8_t) 0x10) )/( (uint8_t) 0x10)); //10000
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	f003 0310 	and.w	r3, r3, #16
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	da00      	bge.n	80027d6 <chargerRead+0x46>
 80027d4:	330f      	adds	r3, #15
 80027d6:	111b      	asrs	r3, r3, #4
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	601a      	str	r2, [r3, #0]
	*bmsCharge  = (int) (( buffer & ( (uint8_t) 0x08) )/( (uint8_t) 0x08)); //1000
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	da00      	bge.n	80027ea <chargerRead+0x5a>
 80027e8:	3307      	adds	r3, #7
 80027ea:	10db      	asrs	r3, r3, #3
 80027ec:	461a      	mov	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	601a      	str	r2, [r3, #0]
//	{
//		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C <<1, 0x00, 1, &buffer, 1, 50); // Charger
//	}


}
 80027f2:	bf00      	nop
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000b68 	.word	0x20000b68
 8002800:	20001d30 	.word	0x20001d30
 8002804:	00000000 	.word	0x00000000

08002808 <ReadBat>:


//MAX17260
void ReadBat(int *percent, int bmsEOC, int bmsCharge, int TabGen[]) 
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b092      	sub	sp, #72	; 0x48
 800280c:	af04      	add	r7, sp, #16
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
 8002814:	603b      	str	r3, [r7, #0]
	int battmVolt;
	int newPercent ;
	int current;
		
 
	if(TabGen[LOCK_I2C1] == 0) // I2C available
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	33ec      	adds	r3, #236	; 0xec
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b00      	cmp	r3, #0
 800281e:	f040 8138 	bne.w	8002a92 <ReadBat+0x28a>
	{	
		buffer[1] = 0x00;  buffer[0] = 0x00;
 8002822:	2300      	movs	r3, #0
 8002824:	757b      	strb	r3, [r7, #21]
 8002826:	2300      	movs	r3, #0
 8002828:	753b      	strb	r3, [r7, #20]
		
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	33ec      	adds	r3, #236	; 0xec
 800282e:	2201      	movs	r2, #1
 8002830:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);
		
		// 0x36 => max17260
		// 0x47 => LP3947 (to test)

		if (I2C1_OK == HAL_OK)
 8002832:	4b9d      	ldr	r3, [pc, #628]	; (8002aa8 <ReadBat+0x2a0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8081 	bne.w	800293e <ReadBat+0x136>
		{
			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, 0x36 << 1, 0x19, 1, buffer, 2, 100);
 800283c:	2364      	movs	r3, #100	; 0x64
 800283e:	9302      	str	r3, [sp, #8]
 8002840:	2302      	movs	r3, #2
 8002842:	9301      	str	r3, [sp, #4]
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	9300      	str	r3, [sp, #0]
 800284a:	2301      	movs	r3, #1
 800284c:	2219      	movs	r2, #25
 800284e:	216c      	movs	r1, #108	; 0x6c
 8002850:	4896      	ldr	r0, [pc, #600]	; (8002aac <ReadBat+0x2a4>)
 8002852:	f009 f8ff 	bl	800ba54 <HAL_I2C_Mem_Read>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <ReadBat+0x2a0>)
 800285c:	701a      	strb	r2, [r3, #0]
			uint32_t buff = buffer[1];
 800285e:	7d7b      	ldrb	r3, [r7, #21]
 8002860:	633b      	str	r3, [r7, #48]	; 0x30
			buff = buff * 256;
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
			//buff += buffer[0]	;
			buff = buff / 16.0;
 8002868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800286a:	f7fd fe4b 	bl	8000504 <__aeabi_ui2d>
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4b8f      	ldr	r3, [pc, #572]	; (8002ab0 <ReadBat+0x2a8>)
 8002874:	f7fd ffea 	bl	800084c <__aeabi_ddiv>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4610      	mov	r0, r2
 800287e:	4619      	mov	r1, r3
 8002880:	f7fe f992 	bl	8000ba8 <__aeabi_d2uiz>
 8002884:	4603      	mov	r3, r0
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
			battmVolt = buff * 1.25;
 8002888:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800288a:	f7fd fe3b 	bl	8000504 <__aeabi_ui2d>
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	4b88      	ldr	r3, [pc, #544]	; (8002ab4 <ReadBat+0x2ac>)
 8002894:	f7fd feb0 	bl	80005f8 <__aeabi_dmul>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4610      	mov	r0, r2
 800289e:	4619      	mov	r1, r3
 80028a0:	f7fe f95a 	bl	8000b58 <__aeabi_d2iz>
 80028a4:	4603      	mov	r3, r0
 80028a6:	62fb      	str	r3, [r7, #44]	; 0x2c

			if(battmVolt >= BAT_MIN)
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	f640 42e3 	movw	r2, #3299	; 0xce3
 80028ae:	4293      	cmp	r3, r2
 80028b0:	dd19      	ble.n	80028e6 <ReadBat+0xde>
			{
				if (battmVolt < BAT_MAX)
 80028b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028b4:	f241 0203 	movw	r2, #4099	; 0x1003
 80028b8:	4293      	cmp	r3, r2
 80028ba:	dc11      	bgt.n	80028e0 <ReadBat+0xd8>
				{
					buff = battmVolt - BAT_MIN;
 80028bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028be:	f6a3 43e4 	subw	r3, r3, #3300	; 0xce4
 80028c2:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff * 100;
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	2264      	movs	r2, #100	; 0x64
 80028c8:	fb02 f303 	mul.w	r3, r2, r3
 80028cc:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff / (BAT_MAX - BAT_MIN);
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	4a79      	ldr	r2, [pc, #484]	; (8002ab8 <ReadBat+0x2b0>)
 80028d2:	fba2 2303 	umull	r2, r3, r2, r3
 80028d6:	0a1b      	lsrs	r3, r3, #8
 80028d8:	633b      	str	r3, [r7, #48]	; 0x30

					newPercent = buff ; //+ 5; // =(95 * ((A5 - 3100) / 700) + 5)
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	637b      	str	r3, [r7, #52]	; 0x34
 80028de:	e00c      	b.n	80028fa <ReadBat+0xf2>
				}
				else
				{
					newPercent = 100;
 80028e0:	2364      	movs	r3, #100	; 0x64
 80028e2:	637b      	str	r3, [r7, #52]	; 0x34
 80028e4:	e009      	b.n	80028fa <ReadBat+0xf2>
				}
			}
			else
			{
				if(battmVolt < BAT_MIN - 200)
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	f640 421b 	movw	r2, #3099	; 0xc1b
 80028ec:	4293      	cmp	r3, r2
 80028ee:	dc02      	bgt.n	80028f6 <ReadBat+0xee>
					newPercent = 255;
 80028f0:	23ff      	movs	r3, #255	; 0xff
 80028f2:	637b      	str	r3, [r7, #52]	; 0x34
 80028f4:	e001      	b.n	80028fa <ReadBat+0xf2>
				else
					newPercent = 1;
 80028f6:	2301      	movs	r3, #1
 80028f8:	637b      	str	r3, [r7, #52]	; 0x34
			}



			if(battmVolt  < 3800)
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	f640 62d7 	movw	r2, #3799	; 0xed7
 8002900:	4293      	cmp	r3, r2
 8002902:	dc05      	bgt.n	8002910 <ReadBat+0x108>
			{
				TabGen[LOW_BAT] = 1;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	e004      	b.n	800291a <ReadBat+0x112>
			}
			else
				TabGen[LOW_BAT] = 0;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002916:	2200      	movs	r2, #0
 8002918:	601a      	str	r2, [r3, #0]



			if ((newPercent < *percent) || (bmsEOC==1) || (bmsCharge==1) || newPercent == 255)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002920:	429a      	cmp	r2, r3
 8002922:	db08      	blt.n	8002936 <ReadBat+0x12e>
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d005      	beq.n	8002936 <ReadBat+0x12e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d002      	beq.n	8002936 <ReadBat+0x12e>
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	2bff      	cmp	r3, #255	; 0xff
 8002934:	d108      	bne.n	8002948 <ReadBat+0x140>
			{
				*percent = newPercent;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800293a:	601a      	str	r2, [r3, #0]
 800293c:	e004      	b.n	8002948 <ReadBat+0x140>
			}
		}
		else
			*percent = TabGen[BAT_VALUE];
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);		// bms // AvrgVoltage (mm 45s)
		
		TabGen[LOCK_I2C1] = 0;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	33ec      	adds	r3, #236	; 0xec
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
		




		uint16_t capacity_uV = 0;
 8002950:	2300      	movs	r3, #0
 8002952:	857b      	strh	r3, [r7, #42]	; 0x2a
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x05, 1, buffer, 2, 20); // capacity measured

		capacity_uV = buffer[1] *255 + buffer[0];
 8002954:	7d7b      	ldrb	r3, [r7, #21]
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	0212      	lsls	r2, r2, #8
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	b29a      	uxth	r2, r3
 8002960:	7d3b      	ldrb	r3, [r7, #20]
 8002962:	b29b      	uxth	r3, r3
 8002964:	4413      	add	r3, r2
 8002966:	857b      	strh	r3, [r7, #42]	; 0x2a
		float capacity = (5 / 0.01) * capacity_uV / 1000; // capacity in mAH = (5.0uV / RSENSE) * capacity in uv / 1000
 8002968:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800296a:	4618      	mov	r0, r3
 800296c:	f7fd fdda 	bl	8000524 <__aeabi_i2d>
 8002970:	f04f 0200 	mov.w	r2, #0
 8002974:	4b51      	ldr	r3, [pc, #324]	; (8002abc <ReadBat+0x2b4>)
 8002976:	f7fd fe3f 	bl	80005f8 <__aeabi_dmul>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <ReadBat+0x2b8>)
 8002988:	f7fd ff60 	bl	800084c <__aeabi_ddiv>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4610      	mov	r0, r2
 8002992:	4619      	mov	r1, r3
 8002994:	f7fe f928 	bl	8000be8 <__aeabi_d2f>
 8002998:	4603      	mov	r3, r0
 800299a:	627b      	str	r3, [r7, #36]	; 0x24

		uint16_t cycles = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	847b      	strh	r3, [r7, #34]	; 0x22
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x17, 1, buffer, 2, 20); //
		cycles = buffer[1] *255 + buffer[0];
 80029a0:	7d7b      	ldrb	r3, [r7, #21]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	461a      	mov	r2, r3
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	7d3b      	ldrb	r3, [r7, #20]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4413      	add	r3, r2
 80029b2:	847b      	strh	r3, [r7, #34]	; 0x22

		uint16_t percentage = 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	843b      	strh	r3, [r7, #32]

		int16_t avg_current = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	83fb      	strh	r3, [r7, #30]
//		if (I2C1_OK == HAL_OK)
//		{
//			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x0B, 1, buffer, 2, 100); // avg current
//		}

		uint16_t temp = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	83bb      	strh	r3, [r7, #28]
		temp = buffer[1];
 80029c0:	7d7b      	ldrb	r3, [r7, #21]
 80029c2:	83bb      	strh	r3, [r7, #28]
		temp = temp ;//& 0b01111111;
		temp = temp << 8 ;
 80029c4:	8bbb      	ldrh	r3, [r7, #28]
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	83bb      	strh	r3, [r7, #28]
		temp = temp + buffer[0];
 80029ca:	7d3b      	ldrb	r3, [r7, #20]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	8bbb      	ldrh	r3, [r7, #28]
 80029d0:	4413      	add	r3, r2
 80029d2:	83bb      	strh	r3, [r7, #28]
		avg_current = (int16_t) temp;
 80029d4:	8bbb      	ldrh	r3, [r7, #28]
 80029d6:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int16_t)0xcdde;
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] =ke
		avg_current = avg_current*(1.5625/0.01)/1000;// * (buffer[1] *255 + buffer[0]) ;
 80029d8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fd fda1 	bl	8000524 <__aeabi_i2d>
 80029e2:	a32f      	add	r3, pc, #188	; (adr r3, 8002aa0 <ReadBat+0x298>)
 80029e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029e8:	f7fd fe06 	bl	80005f8 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4610      	mov	r0, r2
 80029f2:	4619      	mov	r1, r3
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	4b31      	ldr	r3, [pc, #196]	; (8002ac0 <ReadBat+0x2b8>)
 80029fa:	f7fd ff27 	bl	800084c <__aeabi_ddiv>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	4610      	mov	r0, r2
 8002a04:	4619      	mov	r1, r3
 8002a06:	f7fe f8a7 	bl	8000b58 <__aeabi_d2iz>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	83fb      	strh	r3, [r7, #30]
		TabGen[AVG_CURRENT] = (int)abs(avg_current);
 8002a0e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	bfb8      	it	lt
 8002a16:	425b      	neglt	r3, r3
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a20:	601a      	str	r2, [r3, #0]

		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x1C, 1, buffer, 2, 20); // min max current

		uint16_t min,max = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	837b      	strh	r3, [r7, #26]

		max = buffer[1];
 8002a26:	7d7b      	ldrb	r3, [r7, #21]
 8002a28:	837b      	strh	r3, [r7, #26]
		min = buffer[0];
 8002a2a:	7d3b      	ldrb	r3, [r7, #20]
 8002a2c:	833b      	strh	r3, [r7, #24]
		//temp = temp << 8 ;
		//temp = buffer[0];
				//(uint16_t)buffer[1] << 8 + buffer[0];
		avg_current = (int)min;
 8002a2e:	8b3b      	ldrh	r3, [r7, #24]
 8002a30:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] = avg_current*(0.4/0.01)/1000;// * (buffer[1] *255 + buffer[0]) ;

		uint16_t time = 0;
 8002a32:	2300      	movs	r3, #0
 8002a34:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x20, 1, buffer, 2, 100); // TTF
		time = buffer[1] * 255 + buffer[0];
 8002a36:	7d7b      	ldrb	r3, [r7, #21]
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	0212      	lsls	r2, r2, #8
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	7d3b      	ldrb	r3, [r7, #20]
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	4413      	add	r3, r2
 8002a48:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a4a:	8afb      	ldrh	r3, [r7, #22]
 8002a4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ac4 <ReadBat+0x2bc>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a56:	8afb      	ldrh	r3, [r7, #22]
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <ReadBat+0x2bc>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	82fb      	strh	r3, [r7, #22]

		time = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x11, 1, buffer, 2, 100); // TTE
		time = buffer[1] *255 + buffer[0];
 8002a66:	7d7b      	ldrb	r3, [r7, #21]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	0212      	lsls	r2, r2, #8
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	7d3b      	ldrb	r3, [r7, #20]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	4413      	add	r3, r2
 8002a78:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a7a:	8afb      	ldrh	r3, [r7, #22]
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <ReadBat+0x2bc>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	82fb      	strh	r3, [r7, #22]
		time = time /60;
 8002a86:	8afb      	ldrh	r3, [r7, #22]
 8002a88:	4a0e      	ldr	r2, [pc, #56]	; (8002ac4 <ReadBat+0x2bc>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(100);
		OutCmdBuzzer(0);
		HAL_Delay(50);
	}*/
			
}
 8002a92:	bf00      	nop
 8002a94:	3738      	adds	r7, #56	; 0x38
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	f3af 8000 	nop.w
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	40638800 	.word	0x40638800
 8002aa8:	20000b68 	.word	0x20000b68
 8002aac:	20001d30 	.word	0x20001d30
 8002ab0:	40300000 	.word	0x40300000
 8002ab4:	3ff40000 	.word	0x3ff40000
 8002ab8:	51eb851f 	.word	0x51eb851f
 8002abc:	407f4000 	.word	0x407f4000
 8002ac0:	408f4000 	.word	0x408f4000
 8002ac4:	88888889 	.word	0x88888889

08002ac8 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8002acc:	2200      	movs	r2, #0
 8002ace:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	f000 f83e 	bl	8002b54 <ee_read>
 8002ad8:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8002aea:	f008 f88b 	bl	800ac04 <HAL_FLASH_Unlock>
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
  flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
#elif _EE_PAGE_OR_SECTOR == PAGE_NUM
  flashErase.NbPages = 1;
 8002aee:	2301      	movs	r3, #1
 8002af0:	61bb      	str	r3, [r7, #24]
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 8002af2:	237f      	movs	r3, #127	; 0x7f
 8002af4:	617b      	str	r3, [r7, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8002afa:	2301      	movs	r3, #1
 8002afc:	613b      	str	r3, [r7, #16]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8002afe:	f107 021c 	add.w	r2, r7, #28
 8002b02:	f107 030c 	add.w	r3, r7, #12
 8002b06:	4611      	mov	r1, r2
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f008 f961 	bl	800add0 <HAL_FLASHEx_Erase>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d115      	bne.n	8002b40 <ee_format+0x60>
  {
    HAL_FLASH_Lock();
 8002b14:	f008 f898 	bl	800ac48 <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1e:	d001      	beq.n	8002b24 <ee_format+0x44>
      return false;
 8002b20:	2300      	movs	r3, #0
 8002b22:	e010      	b.n	8002b46 <ee_format+0x66>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8002b24:	79fb      	ldrb	r3, [r7, #7]
 8002b26:	f083 0301 	eor.w	r3, r3, #1
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d005      	beq.n	8002b3c <ee_format+0x5c>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8002b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b34:	21ff      	movs	r1, #255	; 0xff
 8002b36:	4806      	ldr	r0, [pc, #24]	; (8002b50 <ee_format+0x70>)
 8002b38:	f013 fe34 	bl	80167a4 <memset>
#endif
      return true;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e002      	b.n	8002b46 <ee_format+0x66>
    }
  }
  HAL_FLASH_Lock();
 8002b40:	f008 f882 	bl	800ac48 <HAL_FLASH_Lock>
  return false;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3720      	adds	r7, #32
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	200018e4 	.word	0x200018e4

08002b54 <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b087      	sub	sp, #28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	60f8      	str	r0, [r7, #12]
 8002b5c:	60b9      	str	r1, [r7, #8]
 8002b5e:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4413      	add	r3, r2
 8002b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b6a:	d901      	bls.n	8002b70 <ee_read+0x1c>
    return false;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	e02b      	b.n	8002bc8 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	e021      	b.n	8002bba <ee_read+0x66>
  {
    if (data != NULL)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002b82:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	b2da      	uxtb	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	701a      	strb	r2, [r3, #0]
      data++;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3301      	adds	r3, #1
 8002b92:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b9a:	d20b      	bcs.n	8002bb4 <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002ba2:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	b2d9      	uxtb	r1, r3
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <ee_read+0x80>)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	4413      	add	r3, r2
 8002bb0:	460a      	mov	r2, r1
 8002bb2:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	617b      	str	r3, [r7, #20]
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3d7      	bcc.n	8002b76 <ee_read+0x22>
#endif
  }
  return true;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	371c      	adds	r7, #28
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	200018e4 	.word	0x200018e4

08002bd8 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8002bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bdc:	b091      	sub	sp, #68	; 0x44
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002be2:	62b9      	str	r1, [r7, #40]	; 0x28
 8002be4:	627a      	str	r2, [r7, #36]	; 0x24
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bea:	4413      	add	r3, r2
 8002bec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bf0:	d901      	bls.n	8002bf6 <ee_write+0x1e>
    return false;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	e0c2      	b.n	8002d7c <ee_write+0x1a4>
  if (data == NULL)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d101      	bne.n	8002c00 <ee_write+0x28>
    return false;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	e0bd      	b.n	8002d7c <ee_write+0x1a4>
  HAL_FLASH_Unlock();
 8002c00:	f008 f800 	bl	800ac04 <HAL_FLASH_Unlock>
      return false;
    }
  }
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8002c04:	2300      	movs	r3, #0
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c08:	e0b0      	b.n	8002d6c <ee_write+0x194>
  {
    uint64_t data64 = data[i];
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 1] * 0x100;
 8002c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c22:	4413      	add	r3, r2
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	4618      	mov	r0, r3
 8002c2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c32:	1814      	adds	r4, r2, r0
 8002c34:	eb43 0501 	adc.w	r5, r3, r1
 8002c38:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    data64 += data[i + 2] * 0x10000;
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	1c9a      	adds	r2, r3, #2
 8002c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	041b      	lsls	r3, r3, #16
 8002c48:	4618      	mov	r0, r3
 8002c4a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c52:	eb12 0800 	adds.w	r8, r2, r0
 8002c56:	eb43 0901 	adc.w	r9, r3, r1
 8002c5a:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    data64 += data[i + 3] * 0x1000000;
 8002c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c60:	1cda      	adds	r2, r3, #3
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	061b      	lsls	r3, r3, #24
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002c70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002c74:	eb12 0a00 	adds.w	sl, r2, r0
 8002c78:	eb43 0b01 	adc.w	fp, r3, r1
 8002c7c:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    data64 += data[i + 4] * 0x100000000;
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	1d1a      	adds	r2, r3, #4
 8002c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	f04f 0300 	mov.w	r3, #0
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	f04f 0100 	mov.w	r1, #0
 8002c98:	0011      	movs	r1, r2
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002ca0:	1816      	adds	r6, r2, r0
 8002ca2:	61be      	str	r6, [r7, #24]
 8002ca4:	414b      	adcs	r3, r1
 8002ca6:	61fb      	str	r3, [r7, #28]
 8002ca8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cac:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 5] * 0x10000000000;
 8002cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb2:	1d5a      	adds	r2, r3, #5
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	f04f 0000 	mov.w	r0, #0
 8002cc4:	f04f 0100 	mov.w	r1, #0
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	2000      	movs	r0, #0
 8002ccc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002cd0:	1816      	adds	r6, r2, r0
 8002cd2:	613e      	str	r6, [r7, #16]
 8002cd4:	414b      	adcs	r3, r1
 8002cd6:	617b      	str	r3, [r7, #20]
 8002cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cdc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 6] * 0x1000000000000;
 8002ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce2:	1d9a      	adds	r2, r3, #6
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	4413      	add	r3, r2
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	f04f 0000 	mov.w	r0, #0
 8002cf4:	f04f 0100 	mov.w	r1, #0
 8002cf8:	0411      	lsls	r1, r2, #16
 8002cfa:	2000      	movs	r0, #0
 8002cfc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d00:	1816      	adds	r6, r2, r0
 8002d02:	60be      	str	r6, [r7, #8]
 8002d04:	414b      	adcs	r3, r1
 8002d06:	60fb      	str	r3, [r7, #12]
 8002d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d0c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 7] * 0x100000000000000;
 8002d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d12:	1dda      	adds	r2, r3, #7
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	4413      	add	r3, r2
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	0611      	lsls	r1, r2, #24
 8002d2a:	2000      	movs	r0, #0
 8002d2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d30:	1816      	adds	r6, r2, r0
 8002d32:	603e      	str	r6, [r7, #0]
 8002d34:	414b      	adcs	r3, r1
 8002d36:	607b      	str	r3, [r7, #4]
 8002d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d3c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 8002d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	4413      	add	r3, r2
 8002d46:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8002d4a:	f501 317e 	add.w	r1, r1, #260096	; 0x3f800
 8002d4e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002d52:	2000      	movs	r0, #0
 8002d54:	f007 feea 	bl	800ab2c <HAL_FLASH_Program>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <ee_write+0x18e>
    {
      HAL_FLASH_Lock();
 8002d5e:	f007 ff73 	bl	800ac48 <HAL_FLASH_Lock>
      return false;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e00a      	b.n	8002d7c <ee_write+0x1a4>
  for (uint32_t i = 0; i < len; i += 8)
 8002d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d68:	3308      	adds	r3, #8
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	429a      	cmp	r2, r3
 8002d72:	f4ff af4a 	bcc.w	8002c0a <ee_write+0x32>
    }
  }
#endif
  HAL_FLASH_Lock();
 8002d76:	f007 ff67 	bl	800ac48 <HAL_FLASH_Lock>
  return true;
 8002d7a:	2301      	movs	r3, #1
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3744      	adds	r7, #68	; 0x44
 8002d80:	46bd      	mov	sp, r7
 8002d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002d88 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 8002d94:	68fa      	ldr	r2, [r7, #12]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d9e:	d901      	bls.n	8002da4 <ee_writeToRam+0x1c>
    return false;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e00d      	b.n	8002dc0 <ee_writeToRam+0x38>
  if (data == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <ee_writeToRam+0x26>
    return false;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e008      	b.n	8002dc0 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <ee_writeToRam+0x40>)
 8002db2:	4413      	add	r3, r2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f013 fce5 	bl	8016788 <memcpy>
  return true;
 8002dbe:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	200018e4 	.word	0x200018e4

08002dcc <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	f7ff fe85 	bl	8002ae0 <ee_format>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f083 0301 	eor.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <ee_commit+0x1a>
    return false;
 8002de2:	2300      	movs	r3, #0
 8002de4:	e006      	b.n	8002df4 <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 8002de6:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <ee_commit+0x2c>)
 8002de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7ff fef3 	bl	8002bd8 <ee_write>
 8002df2:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	200018e4 	.word	0x200018e4

08002dfc <mean>:
#include "hes_fall.h"



uint16_t mean(uint8_t *t, uint16_t val_initiale) {
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
	uint16_t a;
	a = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <mean+0x60>)
 8002e0e:	887b      	ldrh	r3, [r7, #2]
 8002e10:	8013      	strh	r3, [r2, #0]
 8002e12:	e00f      	b.n	8002e34 <mean+0x38>
		a = a + t[i];
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <mean+0x60>)
 8002e16:	881b      	ldrh	r3, [r3, #0]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b29a      	uxth	r2, r3
 8002e22:	89fb      	ldrh	r3, [r7, #14]
 8002e24:	4413      	add	r3, r2
 8002e26:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 8002e28:	4b0c      	ldr	r3, [pc, #48]	; (8002e5c <mean+0x60>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b0a      	ldr	r3, [pc, #40]	; (8002e5c <mean+0x60>)
 8002e32:	801a      	strh	r2, [r3, #0]
 8002e34:	4b09      	ldr	r3, [pc, #36]	; (8002e5c <mean+0x60>)
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	887b      	ldrh	r3, [r7, #2]
 8002e3c:	330a      	adds	r3, #10
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	dde8      	ble.n	8002e14 <mean+0x18>
	}
	a = a / 11;
 8002e42:	89fb      	ldrh	r3, [r7, #14]
 8002e44:	4a06      	ldr	r2, [pc, #24]	; (8002e60 <mean+0x64>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	08db      	lsrs	r3, r3, #3
 8002e4c:	81fb      	strh	r3, [r7, #14]

	return a;
 8002e4e:	89fb      	ldrh	r3, [r7, #14]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	20000b78 	.word	0x20000b78
 8002e60:	ba2e8ba3 	.word	0xba2e8ba3

08002e64 <test_chute>:



uint8_t test_chute(uint16_t *accl, uint8_t *v) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]

	uint32_t millis_begin;

	millis_begin = HAL_GetTick();
 8002e6e:	f007 faa5 	bl	800a3bc <HAL_GetTick>
 8002e72:	60f8      	str	r0, [r7, #12]

	/*double total_time;
	clock_t start, end;
	 start = clock();
	 srand(time(NULL));*/
	uint16_t i = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	82fb      	strh	r3, [r7, #22]

	uint8_t  a = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	757b      	strb	r3, [r7, #21]


	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 8002e7c:	e051      	b.n	8002f22 <test_chute+0xbe>
		//CDC_Transmit_FS("Debut test chute\n",sizeof("Debut test chute\n"));
//    Serial.print("Debut test chute\n");
		if (accl[i] < 153) {                        // on detecte la chute et le nombre 153 ~ 0.80 en d�cimale
 8002e7e:	8afb      	ldrh	r3, [r7, #22]
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	881b      	ldrh	r3, [r3, #0]
 8002e88:	2b98      	cmp	r3, #152	; 0x98
 8002e8a:	d847      	bhi.n	8002f1c <test_chute+0xb8>
			a = 1;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	757b      	strb	r3, [r7, #21]
			// CDC_Transmit_FS("a <0.8063",sizeof("a <0.8063idr"));
//          Serial.print("1er if");
			for (uint16_t j = i; j <= 2 + i; j++) {
 8002e90:	8afb      	ldrh	r3, [r7, #22]
 8002e92:	827b      	strh	r3, [r7, #18]
 8002e94:	e00c      	b.n	8002eb0 <test_chute+0x4c>
				if (accl[j] > 153) {               // on test si la chute dure 30ms   le nombre 153 ~ 0.80 en d�cimale
 8002e96:	8a7b      	ldrh	r3, [r7, #18]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	2b99      	cmp	r3, #153	; 0x99
 8002ea2:	d902      	bls.n	8002eaa <test_chute+0x46>
					a = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	757b      	strb	r3, [r7, #21]
					break;
 8002ea8:	e007      	b.n	8002eba <test_chute+0x56>
			for (uint16_t j = i; j <= 2 + i; j++) {
 8002eaa:	8a7b      	ldrh	r3, [r7, #18]
 8002eac:	3301      	adds	r3, #1
 8002eae:	827b      	strh	r3, [r7, #18]
 8002eb0:	8a7a      	ldrh	r2, [r7, #18]
 8002eb2:	8afb      	ldrh	r3, [r7, #22]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	dded      	ble.n	8002e96 <test_chute+0x32>
				}
			}
//
//         Serial.print("a==true");
			if (a == 1) {
 8002eba:	7d7b      	ldrb	r3, [r7, #21]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d116      	bne.n	8002eee <test_chute+0x8a>
				// CDC_Transmit_FS("a==true",sizeof("a==true"));
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8002ec0:	8afb      	ldrh	r3, [r7, #22]
 8002ec2:	823b      	strh	r3, [r7, #16]
 8002ec4:	e00e      	b.n	8002ee4 <test_chute+0x80>

					if (accl[j] >= 207 ) { // /*2.5025*/){      207 ~ 2.50 en d�cimal
 8002ec6:	8a3b      	ldrh	r3, [r7, #16]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	4413      	add	r3, r2
 8002ece:	881b      	ldrh	r3, [r3, #0]
 8002ed0:	2bce      	cmp	r3, #206	; 0xce
 8002ed2:	d902      	bls.n	8002eda <test_chute+0x76>
						a = 1;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	757b      	strb	r3, [r7, #21]
						//		 CDC_Transmit_FS("acc supe � 8",sizeof("acc supe � 8"));
						break;
 8002ed8:	e009      	b.n	8002eee <test_chute+0x8a>
					}
					else {
						a = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	757b      	strb	r3, [r7, #21]
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8002ede:	8a3b      	ldrh	r3, [r7, #16]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	823b      	strh	r3, [r7, #16]
 8002ee4:	8a3a      	ldrh	r2, [r7, #16]
 8002ee6:	8afb      	ldrh	r3, [r7, #22]
 8002ee8:	333a      	adds	r3, #58	; 0x3a
 8002eea:	429a      	cmp	r2, r3
 8002eec:	ddeb      	ble.n	8002ec6 <test_chute+0x62>
					}

				}

			}
			if (a == 1 ) {
 8002eee:	7d7b      	ldrb	r3, [r7, #21]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d113      	bne.n	8002f1c <test_chute+0xb8>
				uint16_t b;
				//   float angle;
				b = mean(v, i + 3 + 56 + 50);
 8002ef4:	8afb      	ldrh	r3, [r7, #22]
 8002ef6:	336d      	adds	r3, #109	; 0x6d
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4619      	mov	r1, r3
 8002efc:	6838      	ldr	r0, [r7, #0]
 8002efe:	f7ff ff7d 	bl	8002dfc <mean>
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
//
//
////          angle =acos(b)*180/(3.14);                         // on calcul l'angle que fais le vecteur de la pesenteur avec l'axe y

//             //if (60<=angle){
				if (b <= 140 && b >= 114)
 8002f06:	897b      	ldrh	r3, [r7, #10]
 8002f08:	2b8c      	cmp	r3, #140	; 0x8c
 8002f0a:	d805      	bhi.n	8002f18 <test_chute+0xb4>
 8002f0c:	897b      	ldrh	r3, [r7, #10]
 8002f0e:	2b71      	cmp	r3, #113	; 0x71
 8002f10:	d902      	bls.n	8002f18 <test_chute+0xb4>
				{ // 140 ~ 0.4   -0.4 ~ 114
					a = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	757b      	strb	r3, [r7, #21]
					break;
 8002f16:	e00b      	b.n	8002f30 <test_chute+0xcc>
				}
				else
				{
					a = 0;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	757b      	strb	r3, [r7, #21]

			}

		}

		i = i + 1;
 8002f1c:	8afb      	ldrh	r3, [r7, #22]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	82fb      	strh	r3, [r7, #22]
	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 8002f22:	8afb      	ldrh	r3, [r7, #22]
 8002f24:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8002f28:	d802      	bhi.n	8002f30 <test_chute+0xcc>
 8002f2a:	7d7b      	ldrb	r3, [r7, #21]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0a6      	beq.n	8002e7e <test_chute+0x1a>

	//sprintf(lcd_buf1, "%d\n",( (int) millis_tot));
	//CDC_Transmit_FS(lcd_buf1,sizeof(lcd_buf1));


	return a;
 8002f30:	7d7b      	ldrb	r3, [r7, #21]
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <LedChargeIndic>:
#include "hes_fct.h"

void LedChargeIndic(int TabGen[])
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
	int bmsCharge = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
	int percent = 1;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	60fb      	str	r3, [r7, #12]

	chargerRead(&bmsEOC, &bmsCharge, TabGen);
 8002f4e:	f107 0110 	add.w	r1, r7, #16
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fc19 	bl	8002790 <chargerRead>
	ReadBat(&percent, 1, 1, TabGen);
 8002f5e:	f107 000c 	add.w	r0, r7, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	2101      	movs	r1, #1
 8002f68:	f7ff fc4e 	bl	8002808 <ReadBat>

	if (percent == 0xFF)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2bff      	cmp	r3, #255	; 0xff
 8002f70:	d106      	bne.n	8002f80 <LedChargeIndic+0x46>
	{
		LedOn(0, 0, 100, TabGen);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2264      	movs	r2, #100	; 0x64
 8002f76:	2100      	movs	r1, #0
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f000 fdfd 	bl	8003b78 <LedOn>
//	while ((bmsCharge == 1) || (bmsEOC == 1)) {chargerRead(&bmsEOC, &bmsCharge); HAL_Delay(3000);};
//	
//	
//	if ((bmsCharge == 0) &&	(bmsEOC == 0)) {		LedOn(0, 0, 0);
//	}
}
 8002f7e:	e02c      	b.n	8002fda <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent < 100))
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d002      	beq.n	8002f8c <LedChargeIndic+0x52>
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d109      	bne.n	8002fa0 <LedChargeIndic+0x66>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2b63      	cmp	r3, #99	; 0x63
 8002f90:	dc06      	bgt.n	8002fa0 <LedChargeIndic+0x66>
			LedOn(50, 0, 0, TabGen);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	2100      	movs	r1, #0
 8002f98:	2032      	movs	r0, #50	; 0x32
 8002f9a:	f000 fded 	bl	8003b78 <LedOn>
		if (BOX4GAZ == 0)
 8002f9e:	e01c      	b.n	8002fda <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent == 100))
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d002      	beq.n	8002fac <LedChargeIndic+0x72>
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d109      	bne.n	8002fc0 <LedChargeIndic+0x86>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b64      	cmp	r3, #100	; 0x64
 8002fb0:	d106      	bne.n	8002fc0 <LedChargeIndic+0x86>
			LedOn(0, 0, 0, TabGen);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	2000      	movs	r0, #0
 8002fba:	f000 fddd 	bl	8003b78 <LedOn>
		if (BOX4GAZ == 0)
 8002fbe:	e00c      	b.n	8002fda <LedChargeIndic+0xa0>
	else if ((bmsCharge == 0) && (bmsEOC == 0))
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d109      	bne.n	8002fda <LedChargeIndic+0xa0>
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <LedChargeIndic+0xa0>
		LedOn(0, 0, 0, TabGen);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f000 fdd0 	bl	8003b78 <LedOn>
}
 8002fd8:	e7ff      	b.n	8002fda <LedChargeIndic+0xa0>
 8002fda:	bf00      	nop
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <TaskAlertAcc>:
//	
//	
//}

void TaskAlertAcc(uint8_t accy, uint16_t accres, int TabAlert[], int TabGen[])
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60ba      	str	r2, [r7, #8]
 8002fea:	607b      	str	r3, [r7, #4]
 8002fec:	4603      	mov	r3, r0
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	81bb      	strh	r3, [r7, #12]
#endif

	//fall

#ifdef CHUTE_ACTIF
	if (((accy <= 140) && (accy >= 114)) && (TabGen[FALL_DELAY] == 1)
 8002ff4:	7bfb      	ldrb	r3, [r7, #15]
 8002ff6:	2b8c      	cmp	r3, #140	; 0x8c
 8002ff8:	d823      	bhi.n	8003042 <TaskAlertAcc+0x60>
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b71      	cmp	r3, #113	; 0x71
 8002ffe:	d920      	bls.n	8003042 <TaskAlertAcc+0x60>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3328      	adds	r3, #40	; 0x28
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d11b      	bne.n	8003042 <TaskAlertAcc+0x60>
			&& (TabAlert[ALERT_MALAISE] == 0) && (TabAlert[ALERT_FALL] == 0))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	3308      	adds	r3, #8
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d116      	bne.n	8003042 <TaskAlertAcc+0x60>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3334      	adds	r3, #52	; 0x34
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d111      	bne.n	8003042 <TaskAlertAcc+0x60>
	{
		TabGen[NS_FALL]++;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	3344      	adds	r3, #68	; 0x44
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	3201      	adds	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3344      	adds	r3, #68	; 0x44
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3338      	adds	r3, #56	; 0x38
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	db0d      	blt.n	8003054 <TaskAlertAcc+0x72>
		{
			TabGen[FALL_UP_DELAY] = 1;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	332c      	adds	r3, #44	; 0x2c
 800303c:	2201      	movs	r2, #1
 800303e:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 8003040:	e008      	b.n	8003054 <TaskAlertAcc+0x72>
		}

	}
	else
	{
		TabGen[FALL_UP_DELAY] = 0;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	332c      	adds	r3, #44	; 0x2c
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
		TabGen[NS_FALL] = 0;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3344      	adds	r3, #68	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	601a      	str	r2, [r3, #0]
	}
#endif

}
 8003052:	bf00      	nop
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <bootloader>:

unsigned char bootloader(unsigned char tps_appui)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	71fb      	strb	r3, [r7, #7]
	while (tps_appui > 0)
 800306a:	e010      	b.n	800308e <bootloader+0x2e>
	{
		if (InOn() == 1)
 800306c:	f000 fa58 	bl	8003520 <InOn>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d109      	bne.n	800308a <bootloader+0x2a>
		{
			vibration_LBL(1, 250, 1000);
 8003076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800307a:	21fa      	movs	r1, #250	; 0xfa
 800307c:	2001      	movs	r0, #1
 800307e:	f006 fbf3 	bl	8009868 <vibration_LBL>
			tps_appui--;
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	3b01      	subs	r3, #1
 8003086:	71fb      	strb	r3, [r7, #7]
 8003088:	e001      	b.n	800308e <bootloader+0x2e>
		}
		else
		{
			return 0;
 800308a:	2300      	movs	r3, #0
 800308c:	e003      	b.n	8003096 <bootloader+0x36>
	while (tps_appui > 0)
 800308e:	79fb      	ldrb	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1eb      	bne.n	800306c <bootloader+0xc>
		}
	}
	return 1;
 8003094:	2301      	movs	r3, #1
}
 8003096:	4618      	mov	r0, r3
 8003098:	3708      	adds	r7, #8
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <default_value>:

extern uint8_t nb_parametre;
extern struct config_data c_default;
void default_value(void)
{
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	466b      	mov	r3, sp
 80030a8:	461d      	mov	r5, r3
	uint8_t curent_conf[nb_parametre];
 80030aa:	4b58      	ldr	r3, [pc, #352]	; (800320c <default_value+0x16c>)
 80030ac:	781c      	ldrb	r4, [r3, #0]
 80030ae:	4623      	mov	r3, r4
 80030b0:	3b01      	subs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]
 80030b4:	b2e0      	uxtb	r0, r4
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	f04f 0200 	mov.w	r2, #0
 80030be:	f04f 0300 	mov.w	r3, #0
 80030c2:	00cb      	lsls	r3, r1, #3
 80030c4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030c8:	00c2      	lsls	r2, r0, #3
 80030ca:	b2e0      	uxtb	r0, r4
 80030cc:	f04f 0100 	mov.w	r1, #0
 80030d0:	f04f 0200 	mov.w	r2, #0
 80030d4:	f04f 0300 	mov.w	r3, #0
 80030d8:	00cb      	lsls	r3, r1, #3
 80030da:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80030de:	00c2      	lsls	r2, r0, #3
 80030e0:	4623      	mov	r3, r4
 80030e2:	3307      	adds	r3, #7
 80030e4:	08db      	lsrs	r3, r3, #3
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	ebad 0d03 	sub.w	sp, sp, r3
 80030ec:	466b      	mov	r3, sp
 80030ee:	3300      	adds	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
	uint8_t count2 = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	76fb      	strb	r3, [r7, #27]
	ee_init();
 80030f6:	f7ff fce7 	bl	8002ac8 <ee_init>
	ee_read(0, sizeof(curent_conf), curent_conf);
 80030fa:	4621      	mov	r1, r4
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	461a      	mov	r2, r3
 8003100:	2000      	movs	r0, #0
 8003102:	f7ff fd27 	bl	8002b54 <ee_read>
	for (int i = 0; i <= sizeof(curent_conf); i++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e00b      	b.n	8003124 <default_value+0x84>
	{
		if (curent_conf[i] == 255)
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	4413      	add	r3, r2
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2bff      	cmp	r3, #255	; 0xff
 8003116:	d102      	bne.n	800311e <default_value+0x7e>
		{
			count2++;
 8003118:	7efb      	ldrb	r3, [r7, #27]
 800311a:	3301      	adds	r3, #1
 800311c:	76fb      	strb	r3, [r7, #27]
	for (int i = 0; i <= sizeof(curent_conf); i++)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
 8003124:	4622      	mov	r2, r4
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	429a      	cmp	r2, r3
 800312a:	d2ef      	bcs.n	800310c <default_value+0x6c>
		}
	}
	if (count2 > 0)
 800312c:	7efb      	ldrb	r3, [r7, #27]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d067      	beq.n	8003202 <default_value+0x162>
	{
		c_default.tps_immo = 1;
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <default_value+0x170>)
 8003134:	2201      	movs	r2, #1
 8003136:	701a      	strb	r2, [r3, #0]
		c_default.tps_PerteDeVerticalite = 2;
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <default_value+0x170>)
 800313a:	2202      	movs	r2, #2
 800313c:	705a      	strb	r2, [r3, #1]
		c_default.tps_GPS_ON = 3;
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <default_value+0x170>)
 8003140:	2203      	movs	r2, #3
 8003142:	709a      	strb	r2, [r3, #2]
		c_default.tps_GPS_OFF = 4;
 8003144:	4b32      	ldr	r3, [pc, #200]	; (8003210 <default_value+0x170>)
 8003146:	2204      	movs	r2, #4
 8003148:	70da      	strb	r2, [r3, #3]
		c_default.tps_Alarme = 5;
 800314a:	4b31      	ldr	r3, [pc, #196]	; (8003210 <default_value+0x170>)
 800314c:	2205      	movs	r2, #5
 800314e:	711a      	strb	r2, [r3, #4]
		c_default.chute_Actif = 6;
 8003150:	4b2f      	ldr	r3, [pc, #188]	; (8003210 <default_value+0x170>)
 8003152:	2206      	movs	r2, #6
 8003154:	715a      	strb	r2, [r3, #5]
		c_default.malaise_Actif = 7;
 8003156:	4b2e      	ldr	r3, [pc, #184]	; (8003210 <default_value+0x170>)
 8003158:	2207      	movs	r2, #7
 800315a:	719a      	strb	r2, [r3, #6]
		c_default.com_sigfox = 8;
 800315c:	4b2c      	ldr	r3, [pc, #176]	; (8003210 <default_value+0x170>)
 800315e:	2208      	movs	r2, #8
 8003160:	71da      	strb	r2, [r3, #7]
		c_default.com_LoRa = 9;
 8003162:	4b2b      	ldr	r3, [pc, #172]	; (8003210 <default_value+0x170>)
 8003164:	2209      	movs	r2, #9
 8003166:	721a      	strb	r2, [r3, #8]
		c_default.GPS_Actif = 99;
 8003168:	4b29      	ldr	r3, [pc, #164]	; (8003210 <default_value+0x170>)
 800316a:	2263      	movs	r2, #99	; 0x63
 800316c:	725a      	strb	r2, [r3, #9]
		c_default.Immo_Actif = 11;
 800316e:	4b28      	ldr	r3, [pc, #160]	; (8003210 <default_value+0x170>)
 8003170:	220b      	movs	r2, #11
 8003172:	729a      	strb	r2, [r3, #10]
		c_default.Verti_Actif = 12;
 8003174:	4b26      	ldr	r3, [pc, #152]	; (8003210 <default_value+0x170>)
 8003176:	220c      	movs	r2, #12
 8003178:	72da      	strb	r2, [r3, #11]
		c_default.Sensibilite_chute = 13;
 800317a:	4b25      	ldr	r3, [pc, #148]	; (8003210 <default_value+0x170>)
 800317c:	220d      	movs	r2, #13
 800317e:	731a      	strb	r2, [r3, #12]
		c_default.tps_chute = 14;
 8003180:	4b23      	ldr	r3, [pc, #140]	; (8003210 <default_value+0x170>)
 8003182:	220e      	movs	r2, #14
 8003184:	735a      	strb	r2, [r3, #13]
		c_default.Angle = 15;
 8003186:	4b22      	ldr	r3, [pc, #136]	; (8003210 <default_value+0x170>)
 8003188:	220f      	movs	r2, #15
 800318a:	739a      	strb	r2, [r3, #14]
		uint8_t data2[] =
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 800318c:	4b20      	ldr	r3, [pc, #128]	; (8003210 <default_value+0x170>)
 800318e:	781b      	ldrb	r3, [r3, #0]
		uint8_t data2[] =
 8003190:	703b      	strb	r3, [r7, #0]
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 8003192:	4b1f      	ldr	r3, [pc, #124]	; (8003210 <default_value+0x170>)
 8003194:	785b      	ldrb	r3, [r3, #1]
		uint8_t data2[] =
 8003196:	707b      	strb	r3, [r7, #1]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 8003198:	4b1d      	ldr	r3, [pc, #116]	; (8003210 <default_value+0x170>)
 800319a:	789b      	ldrb	r3, [r3, #2]
		uint8_t data2[] =
 800319c:	70bb      	strb	r3, [r7, #2]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 800319e:	4b1c      	ldr	r3, [pc, #112]	; (8003210 <default_value+0x170>)
 80031a0:	78db      	ldrb	r3, [r3, #3]
		uint8_t data2[] =
 80031a2:	70fb      	strb	r3, [r7, #3]
				c_default.tps_Alarme, c_default.chute_Actif,
 80031a4:	4b1a      	ldr	r3, [pc, #104]	; (8003210 <default_value+0x170>)
 80031a6:	791b      	ldrb	r3, [r3, #4]
		uint8_t data2[] =
 80031a8:	713b      	strb	r3, [r7, #4]
				c_default.tps_Alarme, c_default.chute_Actif,
 80031aa:	4b19      	ldr	r3, [pc, #100]	; (8003210 <default_value+0x170>)
 80031ac:	795b      	ldrb	r3, [r3, #5]
		uint8_t data2[] =
 80031ae:	717b      	strb	r3, [r7, #5]
				c_default.malaise_Actif, c_default.com_sigfox,
 80031b0:	4b17      	ldr	r3, [pc, #92]	; (8003210 <default_value+0x170>)
 80031b2:	799b      	ldrb	r3, [r3, #6]
		uint8_t data2[] =
 80031b4:	71bb      	strb	r3, [r7, #6]
				c_default.malaise_Actif, c_default.com_sigfox,
 80031b6:	4b16      	ldr	r3, [pc, #88]	; (8003210 <default_value+0x170>)
 80031b8:	79db      	ldrb	r3, [r3, #7]
		uint8_t data2[] =
 80031ba:	71fb      	strb	r3, [r7, #7]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <default_value+0x170>)
 80031be:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t data2[] =
 80031c0:	723b      	strb	r3, [r7, #8]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031c2:	4b13      	ldr	r3, [pc, #76]	; (8003210 <default_value+0x170>)
 80031c4:	7a5b      	ldrb	r3, [r3, #9]
		uint8_t data2[] =
 80031c6:	727b      	strb	r3, [r7, #9]
				c_default.com_LoRa, c_default.GPS_Actif, c_default.Immo_Actif,
 80031c8:	4b11      	ldr	r3, [pc, #68]	; (8003210 <default_value+0x170>)
 80031ca:	7a9b      	ldrb	r3, [r3, #10]
		uint8_t data2[] =
 80031cc:	72bb      	strb	r3, [r7, #10]
				c_default.Verti_Actif, c_default.Sensibilite_chute,
 80031ce:	4b10      	ldr	r3, [pc, #64]	; (8003210 <default_value+0x170>)
 80031d0:	7adb      	ldrb	r3, [r3, #11]
		uint8_t data2[] =
 80031d2:	72fb      	strb	r3, [r7, #11]
				c_default.Verti_Actif, c_default.Sensibilite_chute,
 80031d4:	4b0e      	ldr	r3, [pc, #56]	; (8003210 <default_value+0x170>)
 80031d6:	7b1b      	ldrb	r3, [r3, #12]
		uint8_t data2[] =
 80031d8:	733b      	strb	r3, [r7, #12]
				c_default.tps_chute, c_default.Angle };
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <default_value+0x170>)
 80031dc:	7b5b      	ldrb	r3, [r3, #13]
		uint8_t data2[] =
 80031de:	737b      	strb	r3, [r7, #13]
				c_default.tps_chute, c_default.Angle };
 80031e0:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <default_value+0x170>)
 80031e2:	7b9b      	ldrb	r3, [r3, #14]
		uint8_t data2[] =
 80031e4:	73bb      	strb	r3, [r7, #14]
		ee_writeToRam(0, sizeof(data2), data2);
 80031e6:	463b      	mov	r3, r7
 80031e8:	461a      	mov	r2, r3
 80031ea:	210f      	movs	r1, #15
 80031ec:	2000      	movs	r0, #0
 80031ee:	f7ff fdcb 	bl	8002d88 <ee_writeToRam>
		ee_commit();
 80031f2:	f7ff fdeb 	bl	8002dcc <ee_commit>
		vibration_LBL(3, 200, 1000);
 80031f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80031fa:	21c8      	movs	r1, #200	; 0xc8
 80031fc:	2003      	movs	r0, #3
 80031fe:	f006 fb33 	bl	8009868 <vibration_LBL>
 8003202:	46ad      	mov	sp, r5
	}
}
 8003204:	bf00      	nop
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bdb0      	pop	{r4, r5, r7, pc}
 800320c:	20000778 	.word	0x20000778
 8003210:	200010c4 	.word	0x200010c4

08003214 <Load_configuration_value>:

extern struct config_data c1;
void Load_configuration_value(void)
{
 8003214:	b5b0      	push	{r4, r5, r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	466b      	mov	r3, sp
 800321c:	461d      	mov	r5, r3
	uint8_t curent_conf2[nb_parametre];
 800321e:	4b36      	ldr	r3, [pc, #216]	; (80032f8 <Load_configuration_value+0xe4>)
 8003220:	781c      	ldrb	r4, [r3, #0]
 8003222:	4623      	mov	r3, r4
 8003224:	3b01      	subs	r3, #1
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	b2e0      	uxtb	r0, r4
 800322a:	f04f 0100 	mov.w	r1, #0
 800322e:	f04f 0200 	mov.w	r2, #0
 8003232:	f04f 0300 	mov.w	r3, #0
 8003236:	00cb      	lsls	r3, r1, #3
 8003238:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800323c:	00c2      	lsls	r2, r0, #3
 800323e:	b2e0      	uxtb	r0, r4
 8003240:	f04f 0100 	mov.w	r1, #0
 8003244:	f04f 0200 	mov.w	r2, #0
 8003248:	f04f 0300 	mov.w	r3, #0
 800324c:	00cb      	lsls	r3, r1, #3
 800324e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003252:	00c2      	lsls	r2, r0, #3
 8003254:	4623      	mov	r3, r4
 8003256:	3307      	adds	r3, #7
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	ebad 0d03 	sub.w	sp, sp, r3
 8003260:	466b      	mov	r3, sp
 8003262:	3300      	adds	r3, #0
 8003264:	603b      	str	r3, [r7, #0]
	ee_init();
 8003266:	f7ff fc2f 	bl	8002ac8 <ee_init>
	ee_read(0, sizeof(curent_conf2), curent_conf2);
 800326a:	4621      	mov	r1, r4
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	2000      	movs	r0, #0
 8003272:	f7ff fc6f 	bl	8002b54 <ee_read>
	c1.tps_immo = curent_conf2[0];
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	781a      	ldrb	r2, [r3, #0]
 800327a:	4b20      	ldr	r3, [pc, #128]	; (80032fc <Load_configuration_value+0xe8>)
 800327c:	701a      	strb	r2, [r3, #0]
	c1.tps_PerteDeVerticalite = curent_conf2[1];
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	785a      	ldrb	r2, [r3, #1]
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <Load_configuration_value+0xe8>)
 8003284:	705a      	strb	r2, [r3, #1]
	c1.tps_GPS_ON = curent_conf2[2];
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	789a      	ldrb	r2, [r3, #2]
 800328a:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <Load_configuration_value+0xe8>)
 800328c:	709a      	strb	r2, [r3, #2]
	c1.tps_GPS_OFF = curent_conf2[3];
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	78da      	ldrb	r2, [r3, #3]
 8003292:	4b1a      	ldr	r3, [pc, #104]	; (80032fc <Load_configuration_value+0xe8>)
 8003294:	70da      	strb	r2, [r3, #3]
	c1.tps_Alarme = curent_conf2[4];
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	791a      	ldrb	r2, [r3, #4]
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <Load_configuration_value+0xe8>)
 800329c:	711a      	strb	r2, [r3, #4]
	c1.chute_Actif = curent_conf2[5];
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	795a      	ldrb	r2, [r3, #5]
 80032a2:	4b16      	ldr	r3, [pc, #88]	; (80032fc <Load_configuration_value+0xe8>)
 80032a4:	715a      	strb	r2, [r3, #5]
	c1.malaise_Actif = curent_conf2[6];
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	799a      	ldrb	r2, [r3, #6]
 80032aa:	4b14      	ldr	r3, [pc, #80]	; (80032fc <Load_configuration_value+0xe8>)
 80032ac:	719a      	strb	r2, [r3, #6]
	c1.com_sigfox = curent_conf2[7];
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	79da      	ldrb	r2, [r3, #7]
 80032b2:	4b12      	ldr	r3, [pc, #72]	; (80032fc <Load_configuration_value+0xe8>)
 80032b4:	71da      	strb	r2, [r3, #7]
	c1.com_LoRa = curent_conf2[8];
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7a1a      	ldrb	r2, [r3, #8]
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <Load_configuration_value+0xe8>)
 80032bc:	721a      	strb	r2, [r3, #8]
	c1.GPS_Actif = curent_conf2[9];
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	7a5a      	ldrb	r2, [r3, #9]
 80032c2:	4b0e      	ldr	r3, [pc, #56]	; (80032fc <Load_configuration_value+0xe8>)
 80032c4:	725a      	strb	r2, [r3, #9]
	c1.Immo_Actif = curent_conf2[10];
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	7a9a      	ldrb	r2, [r3, #10]
 80032ca:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <Load_configuration_value+0xe8>)
 80032cc:	729a      	strb	r2, [r3, #10]
	c1.Verti_Actif = curent_conf2[11];
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7ada      	ldrb	r2, [r3, #11]
 80032d2:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <Load_configuration_value+0xe8>)
 80032d4:	72da      	strb	r2, [r3, #11]
	c1.Sensibilite_chute = curent_conf2[12];
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	7b1a      	ldrb	r2, [r3, #12]
 80032da:	4b08      	ldr	r3, [pc, #32]	; (80032fc <Load_configuration_value+0xe8>)
 80032dc:	731a      	strb	r2, [r3, #12]
	c1.tps_chute = curent_conf2[13];
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	7b5a      	ldrb	r2, [r3, #13]
 80032e2:	4b06      	ldr	r3, [pc, #24]	; (80032fc <Load_configuration_value+0xe8>)
 80032e4:	735a      	strb	r2, [r3, #13]
	c1.Angle = curent_conf2[14];
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	7b9a      	ldrb	r2, [r3, #14]
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <Load_configuration_value+0xe8>)
 80032ec:	739a      	strb	r2, [r3, #14]
 80032ee:	46ad      	mov	sp, r5
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bdb0      	pop	{r4, r5, r7, pc}
 80032f8:	20000778 	.word	0x20000778
 80032fc:	200010b4 	.word	0x200010b4

08003300 <OuChaIsel>:
#include "hes_gpio_h3.h"

// function :  set output * to 1 (param. : 1) or to 0  (param. : 0)

// function :  set output OuChaIsel to 1 (param. : 1) or to 0  (param. : 0)
void OuChaIsel(int outputValue) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d105      	bne.n	800331a <OuChaIsel+0x1a>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_SET);
 800330e:	2201      	movs	r2, #1
 8003310:	2120      	movs	r1, #32
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <OuChaIsel+0x2c>)
 8003314:	f008 f8ee 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
  }
}
 8003318:	e004      	b.n	8003324 <OuChaIsel+0x24>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
 800331a:	2200      	movs	r2, #0
 800331c:	2120      	movs	r1, #32
 800331e:	4803      	ldr	r0, [pc, #12]	; (800332c <OuChaIsel+0x2c>)
 8003320:	f008 f8e8 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003324:	bf00      	nop
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	48000400 	.word	0x48000400

08003330 <OutDone1>:

// function :  set output OutDone1 to 1 (param. : 1) or to 0  (param. : 0)
void OutDone1(int outputValue) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d105      	bne.n	800334a <OutDone1+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_SET);
 800333e:	2201      	movs	r2, #1
 8003340:	2110      	movs	r1, #16
 8003342:	4806      	ldr	r0, [pc, #24]	; (800335c <OutDone1+0x2c>)
 8003344:	f008 f8d6 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
  }
}
 8003348:	e004      	b.n	8003354 <OutDone1+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
 800334a:	2200      	movs	r2, #0
 800334c:	2110      	movs	r1, #16
 800334e:	4803      	ldr	r0, [pc, #12]	; (800335c <OutDone1+0x2c>)
 8003350:	f008 f8d0 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	48000400 	.word	0x48000400

08003360 <OutDone2>:

// function :  set output OuDone2 to 1 (param. : 1) or to 0  (param. : 0)
void OutDone2(int outputValue) {
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d105      	bne.n	800337a <OutDone2+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_SET);
 800336e:	2201      	movs	r2, #1
 8003370:	2108      	movs	r1, #8
 8003372:	4806      	ldr	r0, [pc, #24]	; (800338c <OutDone2+0x2c>)
 8003374:	f008 f8be 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
  }
}
 8003378:	e004      	b.n	8003384 <OutDone2+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
 800337a:	2200      	movs	r2, #0
 800337c:	2108      	movs	r1, #8
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <OutDone2+0x2c>)
 8003380:	f008 f8b8 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	48000400 	.word	0x48000400

08003390 <OutDwmRst>:

// function :  set output OutDwmRst to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmRst(int outputValue) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d107      	bne.n	80033ae <OutDwmRst+0x1e>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_SET);
 800339e:	2201      	movs	r2, #1
 80033a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033a8:	f008 f8a4 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
  }
}
 80033ac:	e006      	b.n	80033bc <OutDwmRst+0x2c>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
 80033ae:	2200      	movs	r2, #0
 80033b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b8:	f008 f89c 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80033bc:	bf00      	nop
 80033be:	3708      	adds	r7, #8
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}

080033c4 <OutDwmWu>:

// function :  set output OutDwmWu to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmWu(int outputValue) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d106      	bne.n	80033e0 <OutDwmWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_SET);
 80033d2:	2201      	movs	r2, #1
 80033d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033d8:	4806      	ldr	r0, [pc, #24]	; (80033f4 <OutDwmWu+0x30>)
 80033da:	f008 f88b 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
  }
}
 80033de:	e005      	b.n	80033ec <OutDwmWu+0x28>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
 80033e0:	2200      	movs	r2, #0
 80033e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e6:	4803      	ldr	r0, [pc, #12]	; (80033f4 <OutDwmWu+0x30>)
 80033e8:	f008 f884 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	48000400 	.word	0x48000400

080033f8 <OutOledWu>:
}
*/

// for L433
// function :  set output OutOledWu to 1 (param. : 1) or to 0  (param. : 0)
void OutOledWu(int outputValue) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d106      	bne.n	8003414 <OutOledWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_SET);
 8003406:	2201      	movs	r2, #1
 8003408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340c:	4806      	ldr	r0, [pc, #24]	; (8003428 <OutOledWu+0x30>)
 800340e:	f008 f871 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003412:	e005      	b.n	8003420 <OutOledWu+0x28>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
 8003414:	2200      	movs	r2, #0
 8003416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800341a:	4803      	ldr	r0, [pc, #12]	; (8003428 <OutOledWu+0x30>)
 800341c:	f008 f86a 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	48000400 	.word	0x48000400

0800342c <OutLoraWu>:

// function :  set output OutLoraWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLoraWu(int outputValue) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d105      	bne.n	8003446 <OutLoraWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	2104      	movs	r1, #4
 800343e:	4806      	ldr	r0, [pc, #24]	; (8003458 <OutLoraWu+0x2c>)
 8003440:	f008 f858 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003444:	e004      	b.n	8003450 <OutLoraWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
 8003446:	2200      	movs	r2, #0
 8003448:	2104      	movs	r1, #4
 800344a:	4803      	ldr	r0, [pc, #12]	; (8003458 <OutLoraWu+0x2c>)
 800344c:	f008 f852 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	48000400 	.word	0x48000400

0800345c <OutGpsRst>:

// function :  set output OutGpsRst to 1 (param. : 1) or to 0  (param. : 0)
void OutGpsRst(int outputValue) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d105      	bne.n	8003476 <OutGpsRst+0x1a>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_SET);
 800346a:	2201      	movs	r2, #1
 800346c:	2102      	movs	r1, #2
 800346e:	4806      	ldr	r0, [pc, #24]	; (8003488 <OutGpsRst+0x2c>)
 8003470:	f008 f840 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
  }
}
 8003474:	e004      	b.n	8003480 <OutGpsRst+0x24>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
 8003476:	2200      	movs	r2, #0
 8003478:	2102      	movs	r1, #2
 800347a:	4803      	ldr	r0, [pc, #12]	; (8003488 <OutGpsRst+0x2c>)
 800347c:	f008 f83a 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	48000400 	.word	0x48000400

0800348c <OutLedWu>:

// function :  set output OutLedWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLedWu(int outputValue) {
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d105      	bne.n	80034a6 <OutLedWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_SET);
 800349a:	2201      	movs	r2, #1
 800349c:	2101      	movs	r1, #1
 800349e:	4806      	ldr	r0, [pc, #24]	; (80034b8 <OutLedWu+0x2c>)
 80034a0:	f008 f828 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
  }
}
 80034a4:	e004      	b.n	80034b0 <OutLedWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
 80034a6:	2200      	movs	r2, #0
 80034a8:	2101      	movs	r1, #1
 80034aa:	4803      	ldr	r0, [pc, #12]	; (80034b8 <OutLedWu+0x2c>)
 80034ac:	f008 f822 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	48000400 	.word	0x48000400

080034bc <OutMotorWu>:
    HAL_GPIO_WritePin(GPIOA,GAZ_WU_Pin, GPIO_PIN_RESET);
  }
}

// function :  set output OutMotorWu to 1 (param. : 1) or to 0  (param. : 0)
void OutMotorWu(int outputValue) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	if (VIBOK==1)
	{
  if (outputValue==1) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d106      	bne.n	80034d8 <OutMotorWu+0x1c>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_SET);
 80034ca:	2201      	movs	r2, #1
 80034cc:	2108      	movs	r1, #8
 80034ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d2:	f008 f80f 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
  }
}
}
 80034d6:	e005      	b.n	80034e4 <OutMotorWu+0x28>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
 80034d8:	2200      	movs	r2, #0
 80034da:	2108      	movs	r1, #8
 80034dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034e0:	f008 f808 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <OutOledRst>:

// function :  set output OutOledRst to 1 (param. : 1) or to 0  (param. : 0)
void OutOledRst(int outputValue) {
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d106      	bne.n	8003508 <OutOledRst+0x1c>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_SET);
 80034fa:	2201      	movs	r2, #1
 80034fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003500:	4806      	ldr	r0, [pc, #24]	; (800351c <OutOledRst+0x30>)
 8003502:	f007 fff7 	bl	800b4f4 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
  }
}
 8003506:	e005      	b.n	8003514 <OutOledRst+0x28>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
 8003508:	2200      	movs	r2, #0
 800350a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800350e:	4803      	ldr	r0, [pc, #12]	; (800351c <OutOledRst+0x30>)
 8003510:	f007 fff0 	bl	800b4f4 <HAL_GPIO_WritePin>
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	48000800 	.word	0x48000800

08003520 <InOn>:

// function :  read binary value of input * (param. : 1 for high value or param. : 0 for low value)

// function :  read binary value of input InOn (param. : 1 for high value or param. : 0 for low value)
int InOn(void) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_ON_Pin)) == 0)
 800352a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800352e:	4806      	ldr	r0, [pc, #24]	; (8003548 <InOn+0x28>)
 8003530:	f007 ffc8 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <InOn+0x1e>
	{
		stateBP = 1 ; 
 800353a:	2301      	movs	r3, #1
 800353c:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 800353e:	687b      	ldr	r3, [r7, #4]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	48000400 	.word	0x48000400

0800354c <InSOS>:

// function :  read binary value of input InSOS (param. : 1 for high value or param. : 0 for low value)
int InSOS(void) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 8003552:	2300      	movs	r3, #0
 8003554:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_SOS_Pin)) == 0)
 8003556:	f44f 7100 	mov.w	r1, #512	; 0x200
 800355a:	4806      	ldr	r0, [pc, #24]	; (8003574 <InSOS+0x28>)
 800355c:	f007 ffb2 	bl	800b4c4 <HAL_GPIO_ReadPin>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <InSOS+0x1e>
	{
		stateBP = 1 ; 
 8003566:	2301      	movs	r3, #1
 8003568:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 800356a:	687b      	ldr	r3, [r7, #4]
}
 800356c:	4618      	mov	r0, r3
 800356e:	3708      	adds	r7, #8
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	48000400 	.word	0x48000400

08003578 <OutBuzOn>:

// function : start Buzzer  
void OutBuzOn() {
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
	if (BUZOK==1){
HAL_TIM_PWM_Start(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 800357c:	2100      	movs	r1, #0
 800357e:	4802      	ldr	r0, [pc, #8]	; (8003588 <OutBuzOn+0x10>)
 8003580:	f00b ff14 	bl	800f3ac <HAL_TIM_PWM_Start>
	}
}
 8003584:	bf00      	nop
 8003586:	bd80      	pop	{r7, pc}
 8003588:	2000324c 	.word	0x2000324c

0800358c <OutBuzOff>:

// function : stop Buzzer 
void OutBuzOff() {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
		if (BUZOK==1){
HAL_TIM_PWM_Stop(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 8003590:	2100      	movs	r1, #0
 8003592:	4802      	ldr	r0, [pc, #8]	; (800359c <OutBuzOff+0x10>)
 8003594:	f00b ffe8 	bl	800f568 <HAL_TIM_PWM_Stop>
		}
}
 8003598:	bf00      	nop
 800359a:	bd80      	pop	{r7, pc}
 800359c:	2000324c 	.word	0x2000324c

080035a0 <GpsStop>:

#include "hes_gps.h"

void GpsStop(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
	
	OutGpsRst(1);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f7ff ff58 	bl	800345c <OutGpsRst>
HAL_Delay(1);
 80035ac:	2001      	movs	r0, #1
 80035ae:	f006 ff11 	bl	800a3d4 <HAL_Delay>
	 // hexadecimal messages to stop GPS
 uint8_t stop_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x16, 0x74};
 80035b2:	4a11      	ldr	r2, [pc, #68]	; (80035f8 <GpsStop+0x58>)
 80035b4:	f107 030c 	add.w	r3, r7, #12
 80035b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 uint8_t stop_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};
 80035be:	4a0f      	ldr	r2, [pc, #60]	; (80035fc <GpsStop+0x5c>)
 80035c0:	1d3b      	adds	r3, r7, #4
 80035c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035c6:	e883 0003 	stmia.w	r3, {r0, r1}
 

  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps1, sizeof(stop_gps1));
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	220c      	movs	r2, #12
 80035d0:	4619      	mov	r1, r3
 80035d2:	480b      	ldr	r0, [pc, #44]	; (8003600 <GpsStop+0x60>)
 80035d4:	f00c ff8e 	bl	80104f4 <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 80035d8:	2014      	movs	r0, #20
 80035da:	f006 fefb 	bl	800a3d4 <HAL_Delay>
  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps2, sizeof(stop_gps2));
 80035de:	1d3b      	adds	r3, r7, #4
 80035e0:	2208      	movs	r2, #8
 80035e2:	4619      	mov	r1, r3
 80035e4:	4806      	ldr	r0, [pc, #24]	; (8003600 <GpsStop+0x60>)
 80035e6:	f00c ff85 	bl	80104f4 <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 80035ea:	2014      	movs	r0, #20
 80035ec:	f006 fef2 	bl	800a3d4 <HAL_Delay>
  //OutGpsRst(0);
}
 80035f0:	bf00      	nop
 80035f2:	3718      	adds	r7, #24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	08019bac 	.word	0x08019bac
 80035fc:	08019bb8 	.word	0x08019bb8
 8003600:	200033f8 	.word	0x200033f8

08003604 <CheckSum>:
3E 89 // check
*/


void CheckSum(uint8_t tab[], uint8_t size)
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	460b      	mov	r3, r1
 800360e:	70fb      	strb	r3, [r7, #3]
	uint8_t CK_A = 0, CK_B = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	73fb      	strb	r3, [r7, #15]
 8003614:	2300      	movs	r3, #0
 8003616:	73bb      	strb	r3, [r7, #14]
	int i;
	for( i = 2; i < size-2; i++)
 8003618:	2302      	movs	r3, #2
 800361a:	60bb      	str	r3, [r7, #8]
 800361c:	e00d      	b.n	800363a <CheckSum+0x36>
	{
		CK_A = CK_A + tab[i];
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	781a      	ldrb	r2, [r3, #0]
 8003626:	7bfb      	ldrb	r3, [r7, #15]
 8003628:	4413      	add	r3, r2
 800362a:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 800362c:	7bba      	ldrb	r2, [r7, #14]
 800362e:	7bfb      	ldrb	r3, [r7, #15]
 8003630:	4413      	add	r3, r2
 8003632:	73bb      	strb	r3, [r7, #14]
	for( i = 2; i < size-2; i++)
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	3301      	adds	r3, #1
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	3b02      	subs	r3, #2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbec      	blt.n	800361e <CheckSum+0x1a>
	}
	tab[i] = CK_A;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	701a      	strb	r2, [r3, #0]
	i++;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	3301      	adds	r3, #1
 8003652:	60bb      	str	r3, [r7, #8]
	tab[i] = CK_B;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	7bba      	ldrb	r2, [r7, #14]
 800365c:	701a      	strb	r2, [r3, #0]
}
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <GpsStart>:

void GpsStart(void) {
 800366c:	b590      	push	{r4, r7, lr}
 800366e:	b0b7      	sub	sp, #220	; 0xdc
 8003670:	af00      	add	r7, sp, #0

  // hexadecimal messages to start GPS
uint8_t start_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x17, 0x76}; //UBX-CFG-RST -> 04 -> hardware reset
 8003672:	4a63      	ldr	r2, [pc, #396]	; (8003800 <GpsStart+0x194>)
 8003674:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003678:	ca07      	ldmia	r2, {r0, r1, r2}
 800367a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
uint8_t start_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};	// Poll receiver
 800367e:	4a61      	ldr	r2, [pc, #388]	; (8003804 <GpsStart+0x198>)
 8003680:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003684:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003688:	e883 0003 	stmia.w	r3, {r0, r1}

 
uint8_t RMC_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X04, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X3F};
 800368c:	4b5e      	ldr	r3, [pc, #376]	; (8003808 <GpsStart+0x19c>)
 800368e:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8003692:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003694:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t VTG_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X05, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X04, 0X46};
 8003698:	4b5c      	ldr	r3, [pc, #368]	; (800380c <GpsStart+0x1a0>)
 800369a:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 800369e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X02, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X01, 0X31};
 80036a4:	4b5a      	ldr	r3, [pc, #360]	; (8003810 <GpsStart+0x1a4>)
 80036a6:	f107 0494 	add.w	r4, r7, #148	; 0x94
 80036aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSV_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X03, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X02, 0X38};
 80036b0:	4b58      	ldr	r3, [pc, #352]	; (8003814 <GpsStart+0x1a8>)
 80036b2:	f107 0484 	add.w	r4, r7, #132	; 0x84
 80036b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GLL_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X01, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X2A};
 80036bc:	4b56      	ldr	r3, [pc, #344]	; (8003818 <GpsStart+0x1ac>)
 80036be:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80036c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
// char GGA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XFF, 0X23};
uint8_t GGA_On[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X01, 0X01, 0X00, 0X00, 0X00, 0X01, 0X2C};
 80036c8:	4b54      	ldr	r3, [pc, #336]	; (800381c <GpsStart+0x1b0>)
 80036ca:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80036ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t ZDA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X08, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X07, 0X5B};
 80036d4:	4b52      	ldr	r3, [pc, #328]	; (8003820 <GpsStart+0x1b4>)
 80036d6:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80036da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

uint8_t POWER_MODE_ECO[] = { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x5B};
 80036e0:	4b50      	ldr	r3, [pc, #320]	; (8003824 <GpsStart+0x1b8>)
 80036e2:	f107 0444 	add.w	r4, r7, #68	; 0x44
 80036e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 

//Power Save Mode (PSM) allows a reduction in system power consumption by selectively switchingparts of the receiver on and off. It is selected using the message UBX-CFG-RXM and configured using UBX-CFG-PM2. It is recommended to use UBX-CFG-PMS instead if available (only supported inprotocol versions 18+) as it provides a simplified interface; see section Power mode setup fordetails
//CAM-M8Q-0-10  = >  SPG 3.01  => 18.00
uint8_t GNSS_Selection[] = { 0XB5, 0X62, 0X06, 0X3E, 0X3C,
 80036ec:	4a4e      	ldr	r2, [pc, #312]	; (8003828 <GpsStart+0x1bc>)
 80036ee:	463b      	mov	r3, r7
 80036f0:	4611      	mov	r1, r2
 80036f2:	2244      	movs	r2, #68	; 0x44
 80036f4:	4618      	mov	r0, r3
 80036f6:	f013 f847 	bl	8016788 <memcpy>
		0X00, 0X00};




CheckSum(GNSS_Selection, sizeof(GNSS_Selection));
 80036fa:	463b      	mov	r3, r7
 80036fc:	2144      	movs	r1, #68	; 0x44
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff80 	bl	8003604 <CheckSum>

CheckSum(POWER_MODE_ECO, sizeof(POWER_MODE_ECO));
 8003704:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003708:	2110      	movs	r1, #16
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff7a 	bl	8003604 <CheckSum>


OutGpsRst(1);
 8003710:	2001      	movs	r0, #1
 8003712:	f7ff fea3 	bl	800345c <OutGpsRst>
HAL_Delay(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f006 fe5c 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps1, sizeof(start_gps1));
 800371c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003720:	220c      	movs	r2, #12
 8003722:	4619      	mov	r1, r3
 8003724:	4841      	ldr	r0, [pc, #260]	; (800382c <GpsStart+0x1c0>)
 8003726:	f00c fee5 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800372a:	201e      	movs	r0, #30
 800372c:	f006 fe52 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps2, sizeof(start_gps2));
 8003730:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003734:	2208      	movs	r2, #8
 8003736:	4619      	mov	r1, r3
 8003738:	483c      	ldr	r0, [pc, #240]	; (800382c <GpsStart+0x1c0>)
 800373a:	f00c fedb 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800373e:	201e      	movs	r0, #30
 8003740:	f006 fe48 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, RMC_Off,sizeof(RMC_Off));
 8003744:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003748:	2210      	movs	r2, #16
 800374a:	4619      	mov	r1, r3
 800374c:	4837      	ldr	r0, [pc, #220]	; (800382c <GpsStart+0x1c0>)
 800374e:	f00c fed1 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003752:	201e      	movs	r0, #30
 8003754:	f006 fe3e 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, VTG_Off,sizeof(VTG_Off));
 8003758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375c:	2210      	movs	r2, #16
 800375e:	4619      	mov	r1, r3
 8003760:	4832      	ldr	r0, [pc, #200]	; (800382c <GpsStart+0x1c0>)
 8003762:	f00c fec7 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003766:	201e      	movs	r0, #30
 8003768:	f006 fe34 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSA_Off,sizeof(GSA_Off));
 800376c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003770:	2210      	movs	r2, #16
 8003772:	4619      	mov	r1, r3
 8003774:	482d      	ldr	r0, [pc, #180]	; (800382c <GpsStart+0x1c0>)
 8003776:	f00c febd 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800377a:	201e      	movs	r0, #30
 800377c:	f006 fe2a 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSV_Off,sizeof(GSV_Off));
 8003780:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003784:	2210      	movs	r2, #16
 8003786:	4619      	mov	r1, r3
 8003788:	4828      	ldr	r0, [pc, #160]	; (800382c <GpsStart+0x1c0>)
 800378a:	f00c feb3 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 800378e:	201e      	movs	r0, #30
 8003790:	f006 fe20 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GLL_Off,sizeof(GLL_Off));
 8003794:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003798:	2210      	movs	r2, #16
 800379a:	4619      	mov	r1, r3
 800379c:	4823      	ldr	r0, [pc, #140]	; (800382c <GpsStart+0x1c0>)
 800379e:	f00c fea9 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037a2:	201e      	movs	r0, #30
 80037a4:	f006 fe16 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, ZDA_Off,sizeof(ZDA_Off));
 80037a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037ac:	2210      	movs	r2, #16
 80037ae:	4619      	mov	r1, r3
 80037b0:	481e      	ldr	r0, [pc, #120]	; (800382c <GpsStart+0x1c0>)
 80037b2:	f00c fe9f 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037b6:	201e      	movs	r0, #30
 80037b8:	f006 fe0c 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GGA_On,sizeof(GGA_On));
 80037bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037c0:	2210      	movs	r2, #16
 80037c2:	4619      	mov	r1, r3
 80037c4:	4819      	ldr	r0, [pc, #100]	; (800382c <GpsStart+0x1c0>)
 80037c6:	f00c fe95 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037ca:	201e      	movs	r0, #30
 80037cc:	f006 fe02 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GNSS_Selection,sizeof(GNSS_Selection));
 80037d0:	463b      	mov	r3, r7
 80037d2:	2244      	movs	r2, #68	; 0x44
 80037d4:	4619      	mov	r1, r3
 80037d6:	4815      	ldr	r0, [pc, #84]	; (800382c <GpsStart+0x1c0>)
 80037d8:	f00c fe8c 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037dc:	201e      	movs	r0, #30
 80037de:	f006 fdf9 	bl	800a3d4 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, POWER_MODE_ECO, sizeof(POWER_MODE_ECO));
 80037e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80037e6:	2210      	movs	r2, #16
 80037e8:	4619      	mov	r1, r3
 80037ea:	4810      	ldr	r0, [pc, #64]	; (800382c <GpsStart+0x1c0>)
 80037ec:	f00c fe82 	bl	80104f4 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 80037f0:	201e      	movs	r0, #30
 80037f2:	f006 fdef 	bl	800a3d4 <HAL_Delay>


}
 80037f6:	bf00      	nop
 80037f8:	37dc      	adds	r7, #220	; 0xdc
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd90      	pop	{r4, r7, pc}
 80037fe:	bf00      	nop
 8003800:	08019bc0 	.word	0x08019bc0
 8003804:	08019bb8 	.word	0x08019bb8
 8003808:	08019bcc 	.word	0x08019bcc
 800380c:	08019bdc 	.word	0x08019bdc
 8003810:	08019bec 	.word	0x08019bec
 8003814:	08019bfc 	.word	0x08019bfc
 8003818:	08019c0c 	.word	0x08019c0c
 800381c:	08019c1c 	.word	0x08019c1c
 8003820:	08019c2c 	.word	0x08019c2c
 8003824:	08019c3c 	.word	0x08019c3c
 8003828:	08019c4c 	.word	0x08019c4c
 800382c:	200033f8 	.word	0x200033f8

08003830 <Init_IMU>:
extern HAL_StatusTypeDef I2C1_OK;

extern uint8_t IMU_nodata;

void Init_IMU(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af04      	add	r7, sp, #16

	IMU_nodata = 0;
 8003836:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <Init_IMU+0x90>)
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]

#ifdef MC3413
	uint8_t check = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	71fb      	strb	r3, [r7, #7]
	uint8_t Data;

	Data = 0x00; // switch to standby mode be able to write in the registers
 8003840:	2300      	movs	r3, #0
 8003842:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MC3413, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8003844:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003848:	9302      	str	r3, [sp, #8]
 800384a:	2301      	movs	r3, #1
 800384c:	9301      	str	r3, [sp, #4]
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	2301      	movs	r3, #1
 8003854:	2207      	movs	r2, #7
 8003856:	2198      	movs	r1, #152	; 0x98
 8003858:	481a      	ldr	r0, [pc, #104]	; (80038c4 <Init_IMU+0x94>)
 800385a:	f007 ffe7 	bl	800b82c <HAL_I2C_Mem_Write>

	// Set DATA RATE of 1KHz by writing SMPLRT_DIV register // gyro
	Data = 0x09;
 800385e:	2309      	movs	r3, #9
 8003860:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MC3413, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	2301      	movs	r3, #1
 800386a:	9301      	str	r3, [sp, #4]
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2301      	movs	r3, #1
 8003872:	2208      	movs	r2, #8
 8003874:	2198      	movs	r1, #152	; 0x98
 8003876:	4813      	ldr	r0, [pc, #76]	; (80038c4 <Init_IMU+0x94>)
 8003878:	f007 ffd8 	bl	800b82c <HAL_I2C_Mem_Write>

	Data = 0x23; // 0xX3 : 10 bits , 0x12 : 8 bits, 0x00 : 6 bits
 800387c:	2323      	movs	r3, #35	; 0x23
 800387e:	71bb      	strb	r3, [r7, #6]
 	HAL_I2C_Mem_Write(&hi2c1, MC3413 , OUTCFG_REG, 1, &Data, 1, 1000);
 8003880:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003884:	9302      	str	r3, [sp, #8]
 8003886:	2301      	movs	r3, #1
 8003888:	9301      	str	r3, [sp, #4]
 800388a:	1dbb      	adds	r3, r7, #6
 800388c:	9300      	str	r3, [sp, #0]
 800388e:	2301      	movs	r3, #1
 8003890:	2220      	movs	r2, #32
 8003892:	2198      	movs	r1, #152	; 0x98
 8003894:	480b      	ldr	r0, [pc, #44]	; (80038c4 <Init_IMU+0x94>)
 8003896:	f007 ffc9 	bl	800b82c <HAL_I2C_Mem_Write>

	//HAL_I2C_Mem_Read (&hi2c1, MPU3413_ADDR, PWR_MGMT_1_REG, 1, &check, 1, 1000);
	Data = 0x01; // goes in wake state, normal behaviour, config is already done
 800389a:	2301      	movs	r3, #1
 800389c:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&hi2c1, MC3413, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 800389e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038a2:	9302      	str	r3, [sp, #8]
 80038a4:	2301      	movs	r3, #1
 80038a6:	9301      	str	r3, [sp, #4]
 80038a8:	1dbb      	adds	r3, r7, #6
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	2301      	movs	r3, #1
 80038ae:	2207      	movs	r2, #7
 80038b0:	2198      	movs	r1, #152	; 0x98
 80038b2:	4804      	ldr	r0, [pc, #16]	; (80038c4 <Init_IMU+0x94>)
 80038b4:	f007 ffba 	bl	800b82c <HAL_I2C_Mem_Write>
	buffer2[1] = 0x18;
	HAL_I2C_Master_Transmit(&hi2c1, 0x32, buffer2, 2, 20); // x032

#endif

}
 80038b8:	bf00      	nop
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	20000b80 	.word	0x20000b80
 80038c4:	20001d30 	.word	0x20001d30

080038c8 <Measure_IMU>:

extern uint8_t IMU_Count = 0;

void Measure_IMU(uint8_t buffer6[])
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af04      	add	r7, sp, #16
 80038ce:	6078      	str	r0, [r7, #4]
	if (I2C1_OK == HAL_OK)
 80038d0:	4b3a      	ldr	r3, [pc, #232]	; (80039bc <Measure_IMU+0xf4>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d132      	bne.n	800393e <Measure_IMU+0x76>
	{

#ifdef MC3413
		I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x0D, 1, &buffer6[0], 1, 10);   // xMSB
 80038d8:	230a      	movs	r3, #10
 80038da:	9302      	str	r3, [sp, #8]
 80038dc:	2301      	movs	r3, #1
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	2301      	movs	r3, #1
 80038e6:	220d      	movs	r2, #13
 80038e8:	2198      	movs	r1, #152	; 0x98
 80038ea:	4835      	ldr	r0, [pc, #212]	; (80039c0 <Measure_IMU+0xf8>)
 80038ec:	f008 f8b2 	bl	800ba54 <HAL_I2C_Mem_Read>
 80038f0:	4603      	mov	r3, r0
 80038f2:	461a      	mov	r2, r3
 80038f4:	4b31      	ldr	r3, [pc, #196]	; (80039bc <Measure_IMU+0xf4>)
 80038f6:	701a      	strb	r2, [r3, #0]
	//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2A, 1, &buffer6[2], 1, 10);   // yLSB
	I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x0F, 1, &buffer6[2], 1, 10);   // yMSB
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	3302      	adds	r3, #2
 80038fc:	220a      	movs	r2, #10
 80038fe:	9202      	str	r2, [sp, #8]
 8003900:	2201      	movs	r2, #1
 8003902:	9201      	str	r2, [sp, #4]
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	2301      	movs	r3, #1
 8003908:	220f      	movs	r2, #15
 800390a:	2198      	movs	r1, #152	; 0x98
 800390c:	482c      	ldr	r0, [pc, #176]	; (80039c0 <Measure_IMU+0xf8>)
 800390e:	f008 f8a1 	bl	800ba54 <HAL_I2C_Mem_Read>
 8003912:	4603      	mov	r3, r0
 8003914:	461a      	mov	r2, r3
 8003916:	4b29      	ldr	r3, [pc, #164]	; (80039bc <Measure_IMU+0xf4>)
 8003918:	701a      	strb	r2, [r3, #0]
	//HAL_I2C_Mem_Read(&hi2c1, MPU3413_ADDR, 0x12, 1, &buffer6[4], 1, 10);   // zLSB
	I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x11, 1, &buffer6[4], 1, 10);   // zMSB
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	220a      	movs	r2, #10
 8003920:	9202      	str	r2, [sp, #8]
 8003922:	2201      	movs	r2, #1
 8003924:	9201      	str	r2, [sp, #4]
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	2301      	movs	r3, #1
 800392a:	2211      	movs	r2, #17
 800392c:	2198      	movs	r1, #152	; 0x98
 800392e:	4824      	ldr	r0, [pc, #144]	; (80039c0 <Measure_IMU+0xf8>)
 8003930:	f008 f890 	bl	800ba54 <HAL_I2C_Mem_Read>
 8003934:	4603      	mov	r3, r0
 8003936:	461a      	mov	r2, r3
 8003938:	4b20      	ldr	r3, [pc, #128]	; (80039bc <Measure_IMU+0xf4>)
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e005      	b.n	800394a <Measure_IMU+0x82>
#endif

	}
	else
	{
		HAL_Delay(10);
 800393e:	200a      	movs	r0, #10
 8003940:	f006 fd48 	bl	800a3d4 <HAL_Delay>
		I2C1_OK = HAL_OK;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <Measure_IMU+0xf4>)
 8003946:	2200      	movs	r2, #0
 8003948:	701a      	strb	r2, [r3, #0]

//acceleration_mg[0]  = ((float)	(((int8_t) buffer6[1]))) / 32; 	
//acceleration_mg[1]  = ((float)	(	((int8_t) buffer6[3])) )/ 32; 		
//acceleration_mg[2]  = ((float)	(	((int8_t) buffer6[5]))) / 32; 	

	if (IMU_Count < 200 && IMU_nodata < 100)
 800394a:	4b1e      	ldr	r3, [pc, #120]	; (80039c4 <Measure_IMU+0xfc>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2bc7      	cmp	r3, #199	; 0xc7
 8003950:	d82c      	bhi.n	80039ac <Measure_IMU+0xe4>
 8003952:	4b1d      	ldr	r3, [pc, #116]	; (80039c8 <Measure_IMU+0x100>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b63      	cmp	r3, #99	; 0x63
 8003958:	d828      	bhi.n	80039ac <Measure_IMU+0xe4>
	{
		IMU_Count++;
 800395a:	4b1a      	ldr	r3, [pc, #104]	; (80039c4 <Measure_IMU+0xfc>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b18      	ldr	r3, [pc, #96]	; (80039c4 <Measure_IMU+0xfc>)
 8003964:	701a      	strb	r2, [r3, #0]
		if (buffer6[0] == 0 && buffer6[1] == 0 && buffer6[2] == 0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d11e      	bne.n	80039ac <Measure_IMU+0xe4>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	3301      	adds	r3, #1
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d119      	bne.n	80039ac <Measure_IMU+0xe4>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3302      	adds	r3, #2
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d114      	bne.n	80039ac <Measure_IMU+0xe4>
				&& buffer6[3] == 0 && buffer6[4] == 0 && buffer6[5] == 0)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	3303      	adds	r3, #3
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <Measure_IMU+0xe4>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	3304      	adds	r3, #4
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10a      	bne.n	80039ac <Measure_IMU+0xe4>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3305      	adds	r3, #5
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <Measure_IMU+0xe4>
			IMU_nodata++;
 80039a0:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <Measure_IMU+0x100>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <Measure_IMU+0x100>)
 80039aa:	701a      	strb	r2, [r3, #0]
	}

	imuMsr2floatG_y_bit_res16bit(buffer6); // compute norm of acceleration and Y axis acceleation
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f80d 	bl	80039cc <imuMsr2floatG_y_bit_res16bit>

}
 80039b2:	bf00      	nop
 80039b4:	3708      	adds	r7, #8
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}
 80039ba:	bf00      	nop
 80039bc:	20000b68 	.word	0x20000b68
 80039c0:	20001d30 	.word	0x20001d30
 80039c4:	20000ad6 	.word	0x20000ad6
 80039c8:	20000b80 	.word	0x20000b80

080039cc <imuMsr2floatG_y_bit_res16bit>:

extern float acc[4];

void imuMsr2floatG_y_bit_res16bit(uint8_t buffer6[])
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]

accy = (uint16_t) (((acc[0])+4)*255)/ 8;  // y to top
#endif

#ifdef MC3413
acc[0]  = ((float)	(((int8_t) buffer6[0]))) / 64;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	b25b      	sxtb	r3, r3
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039e2:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003ae8 <imuMsr2floatG_y_bit_res16bit+0x11c>
 80039e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80039ea:	4b40      	ldr	r3, [pc, #256]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 80039ec:	edc3 7a00 	vstr	s15, [r3]
acc[1]  = ((float)	(((int8_t) buffer6[2]))) / 64;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3302      	adds	r3, #2
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	b25b      	sxtb	r3, r3
 80039f8:	ee07 3a90 	vmov	s15, r3
 80039fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a00:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003ae8 <imuMsr2floatG_y_bit_res16bit+0x11c>
 8003a04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a08:	4b38      	ldr	r3, [pc, #224]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a0a:	edc3 7a01 	vstr	s15, [r3, #4]
acc[2]  = ((float)	(((int8_t) buffer6[4]))) / 64;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	b25b      	sxtb	r3, r3
 8003a16:	ee07 3a90 	vmov	s15, r3
 8003a1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a1e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8003ae8 <imuMsr2floatG_y_bit_res16bit+0x11c>
 8003a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003a26:	4b31      	ldr	r3, [pc, #196]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a28:	edc3 7a02 	vstr	s15, [r3, #8]

accy = (uint16_t) (((-acc[0])+4)*255)/ 8;  // y to top
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003a36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a3a:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003af0 <imuMsr2floatG_y_bit_res16bit+0x124>
 8003a3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a46:	ee17 3a90 	vmov	r3, s15
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	08db      	lsrs	r3, r3, #3
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	4b28      	ldr	r3, [pc, #160]	; (8003af4 <imuMsr2floatG_y_bit_res16bit+0x128>)
 8003a52:	801a      	strh	r2, [r3, #0]
	acc[2] = ((float) (((int8_t) buffer6[5]))) / 32;

	accy = (uint16_t) (((-acc[1]) + 4) * 255) / 8;  // y to top
#endif

	acc[3] = sqrt(acc[0] * acc[0] + acc[1] * acc[1] + acc[2] * acc[2]); //computation of result acceleration
 8003a54:	4b25      	ldr	r3, [pc, #148]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a56:	ed93 7a00 	vldr	s14, [r3]
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a5c:	edd3 7a00 	vldr	s15, [r3]
 8003a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a64:	4b21      	ldr	r3, [pc, #132]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a66:	edd3 6a01 	vldr	s13, [r3, #4]
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a6c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a78:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a7a:	edd3 6a02 	vldr	s13, [r3, #8]
 8003a7e:	4b1b      	ldr	r3, [pc, #108]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003a80:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a8c:	ee17 0a90 	vmov	r0, s15
 8003a90:	f7fc fd5a 	bl	8000548 <__aeabi_f2d>
 8003a94:	4602      	mov	r2, r0
 8003a96:	460b      	mov	r3, r1
 8003a98:	ec43 2b10 	vmov	d0, r2, r3
 8003a9c:	f015 fea2 	bl	80197e4 <sqrt>
 8003aa0:	ec53 2b10 	vmov	r2, r3, d0
 8003aa4:	4610      	mov	r0, r2
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	f7fd f89e 	bl	8000be8 <__aeabi_d2f>
 8003aac:	4603      	mov	r3, r0
 8003aae:	4a0f      	ldr	r2, [pc, #60]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003ab0:	60d3      	str	r3, [r2, #12]

	accres = (uint16_t) (((acc[3] + 4) * 255) / 8);
 8003ab2:	4b0e      	ldr	r3, [pc, #56]	; (8003aec <imuMsr2floatG_y_bit_res16bit+0x120>)
 8003ab4:	edd3 7a03 	vldr	s15, [r3, #12]
 8003ab8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003abc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003ac0:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003af0 <imuMsr2floatG_y_bit_res16bit+0x124>
 8003ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ac8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8003acc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad4:	ee17 3a90 	vmov	r3, s15
 8003ad8:	b29a      	uxth	r2, r3
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <imuMsr2floatG_y_bit_res16bit+0x12c>)
 8003adc:	801a      	strh	r2, [r3, #0]
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	42800000 	.word	0x42800000
 8003aec:	20001ec4 	.word	0x20001ec4
 8003af0:	437f0000 	.word	0x437f0000
 8003af4:	20002644 	.word	0x20002644
 8003af8:	200024d0 	.word	0x200024d0

08003afc <LedOff>:
#include "hes_led.h"

void LedOff(int TabGen[]) {
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af02      	add	r7, sp, #8
 8003b02:	6078      	str	r0, [r7, #4]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	33ec      	adds	r3, #236	; 0xec
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d12e      	bne.n	8003b6c <LedOff+0x70>
	{	
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	33ec      	adds	r3, #236	; 0xec
 8003b12:	2201      	movs	r2, #1
 8003b14:	601a      	str	r2, [r3, #0]

  uint8_t buffer[3];

  OutLedWu(1);
 8003b16:	2001      	movs	r0, #1
 8003b18:	f7ff fcb8 	bl	800348c <OutLedWu>

  buffer[0] = 0x20;
 8003b1c:	2320      	movs	r3, #32
 8003b1e:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x40;
 8003b20:	2340      	movs	r3, #64	; 0x40
 8003b22:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0x60;
 8003b24:	2360      	movs	r3, #96	; 0x60
 8003b26:	73bb      	strb	r3, [r7, #14]
	//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8003b28:	f107 020c 	add.w	r2, r7, #12
 8003b2c:	230a      	movs	r3, #10
 8003b2e:	9300      	str	r3, [sp, #0]
 8003b30:	2303      	movs	r3, #3
 8003b32:	219a      	movs	r1, #154	; 0x9a
 8003b34:	480f      	ldr	r0, [pc, #60]	; (8003b74 <LedOff+0x78>)
 8003b36:	f007 fd85 	bl	800b644 <HAL_I2C_Master_Transmit>

  buffer[0] = 0x80;
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0xA0;
 8003b3e:	23a0      	movs	r3, #160	; 0xa0
 8003b40:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0xC0;
 8003b42:	23c0      	movs	r3, #192	; 0xc0
 8003b44:	73bb      	strb	r3, [r7, #14]
		
	HAL_Delay(1);
 8003b46:	2001      	movs	r0, #1
 8003b48:	f006 fc44 	bl	800a3d4 <HAL_Delay>

  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8003b4c:	f107 020c 	add.w	r2, r7, #12
 8003b50:	230a      	movs	r3, #10
 8003b52:	9300      	str	r3, [sp, #0]
 8003b54:	2303      	movs	r3, #3
 8003b56:	219a      	movs	r1, #154	; 0x9a
 8003b58:	4806      	ldr	r0, [pc, #24]	; (8003b74 <LedOff+0x78>)
 8003b5a:	f007 fd73 	bl	800b644 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1);
  OutLedWu(0);
 8003b5e:	2000      	movs	r0, #0
 8003b60:	f7ff fc94 	bl	800348c <OutLedWu>
		
		TabGen[LOCK_I2C1] = 0; 
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	33ec      	adds	r3, #236	; 0xec
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
	}
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20001d30 	.word	0x20001d30

08003b78 <LedOn>:

void LedOn(int red, int green, int blue, int TabGen[]) 
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af02      	add	r7, sp, #8
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	33ec      	adds	r3, #236	; 0xec
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d137      	bne.n	8003c00 <LedOn+0x88>
	{	

		
	TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	33ec      	adds	r3, #236	; 0xec
 8003b94:	2201      	movs	r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
		
  uint8_t buffer[3];
	
	OutLedWu(1);
 8003b98:	2001      	movs	r0, #1
 8003b9a:	f7ff fc77 	bl	800348c <OutLedWu>


    buffer[0] = 0x20;
 8003b9e:	2320      	movs	r3, #32
 8003ba0:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x40;
 8003ba2:	2340      	movs	r3, #64	; 0x40
 8003ba4:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x60;
 8003ba6:	2360      	movs	r3, #96	; 0x60
 8003ba8:	75bb      	strb	r3, [r7, #22]


  buffer[0] = buffer[0] + ((uint8_t)(red / 8));
 8003baa:	7d3a      	ldrb	r2, [r7, #20]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	da00      	bge.n	8003bb4 <LedOn+0x3c>
 8003bb2:	3307      	adds	r3, #7
 8003bb4:	10db      	asrs	r3, r3, #3
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	4413      	add	r3, r2
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	753b      	strb	r3, [r7, #20]
  buffer[1] = buffer[1] + ((uint8_t)(green / 8));
 8003bbe:	7d7a      	ldrb	r2, [r7, #21]
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	da00      	bge.n	8003bc8 <LedOn+0x50>
 8003bc6:	3307      	adds	r3, #7
 8003bc8:	10db      	asrs	r3, r3, #3
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	4413      	add	r3, r2
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	757b      	strb	r3, [r7, #21]
  buffer[2] = buffer[2] + ((uint8_t)(blue / 8));
 8003bd2:	7dba      	ldrb	r2, [r7, #22]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	da00      	bge.n	8003bdc <LedOn+0x64>
 8003bda:	3307      	adds	r3, #7
 8003bdc:	10db      	asrs	r3, r3, #3
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	4413      	add	r3, r2
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	75bb      	strb	r3, [r7, #22]
		//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A , buffer, 3,10);
 8003be6:	f107 0214 	add.w	r2, r7, #20
 8003bea:	230a      	movs	r3, #10
 8003bec:	9300      	str	r3, [sp, #0]
 8003bee:	2303      	movs	r3, #3
 8003bf0:	219a      	movs	r1, #154	; 0x9a
 8003bf2:	4805      	ldr	r0, [pc, #20]	; (8003c08 <LedOn+0x90>)
 8003bf4:	f007 fd26 	bl	800b644 <HAL_I2C_Master_Transmit>
		//HAL_Delay(1);
		TabGen[LOCK_I2C1] = 0; // I2C locked for interrupt on TIM7
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	33ec      	adds	r3, #236	; 0xec
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]
	}
  //HAL_I2C_Master_Transmit(&hi2c1,0x47<<1,0x01,1,10);
 8003c00:	bf00      	nop
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20001d30 	.word	0x20001d30

08003c0c <PowerSave>:
#include "hes_powersave.h"


int PowerSave(void) {
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0

  int powerSave = 0 ; 
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
	
	 if (InOn() == 0)
 8003c16:	f7ff fc83 	bl	8003520 <InOn>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10a      	bne.n	8003c36 <PowerSave+0x2a>
	 {
		 OutDone1(1); //Start Powersave part 1
 8003c20:	2001      	movs	r0, #1
 8003c22:	f7ff fb85 	bl	8003330 <OutDone1>
		 OutDone2(0); //Start Powersave part 2
 8003c26:	2000      	movs	r0, #0
 8003c28:	f7ff fb9a 	bl	8003360 <OutDone2>
		 powerSave = 1;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	607b      	str	r3, [r7, #4]
		 HAL_Delay(100);
 8003c30:	2064      	movs	r0, #100	; 0x64
 8003c32:	f006 fbcf 	bl	800a3d4 <HAL_Delay>
	}

  return powerSave ;
 8003c36:	687b      	ldr	r3, [r7, #4]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	3708      	adds	r7, #8
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}

08003c40 <ScreenOn>:
  OutOledRst(1);
	HAL_Delay(1);
}


void ScreenOn() {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(0);
	else
	{
		OutOledWu(1);
 8003c44:	2001      	movs	r0, #1
 8003c46:	f7ff fbd7 	bl	80033f8 <OutOledWu>
		OutOledRst(1);
 8003c4a:	2001      	movs	r0, #1
 8003c4c:	f7ff fc4e 	bl	80034ec <OutOledRst>
		OutOledWu(0);
 8003c50:	2000      	movs	r0, #0
 8003c52:	f7ff fbd1 	bl	80033f8 <OutOledWu>
		HAL_Delay(1);
 8003c56:	2001      	movs	r0, #1
 8003c58:	f006 fbbc 	bl	800a3d4 <HAL_Delay>
		OutOledRst(1);
 8003c5c:	2001      	movs	r0, #1
 8003c5e:	f7ff fc45 	bl	80034ec <OutOledRst>
		HAL_Delay(1);
 8003c62:	2001      	movs	r0, #1
 8003c64:	f006 fbb6 	bl	800a3d4 <HAL_Delay>
	}
}
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <ScreenOff>:

void ScreenOff() {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(1);
	else
	{
	  OutOledWu(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f7ff fbc1 	bl	80033f8 <OutOledWu>
		OutOledRst(0);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7ff fc38 	bl	80034ec <OutOledRst>
	}
}
 8003c7c:	bf00      	nop
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <InitTaskState>:
#include "hes_sequencer.h"

void InitTaskState(uint32_t Tab[], uint32_t nbDelay) {
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]

  Tab[0] = 1; // On / Off
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]
  Tab[1] = nbDelay; // NbDelay
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	3304      	adds	r3, #4
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	601a      	str	r2, [r3, #0]
  Tab[2] = 1; // currentState
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
  Tab[3] = 0; // previousState
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	330c      	adds	r3, #12
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
  Tab[4] = 0; // currentDelay
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	3310      	adds	r3, #16
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <TaskState>:

int TaskState(uint32_t Tab[]) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b084      	sub	sp, #16
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  // currentState  <= Tab[2]; // init : 1
  // previousState <= Tab[3]; // init : 0
  // delayGo       <= Tab[4]; // init : 0

  uint32_t millis;
  int state = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  if (Tab[0] == 1) 
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d13e      	bne.n	8003d4e <TaskState+0x92>
	{ // if doOn
    millis = HAL_GetTick();
 8003cd0:	f006 fb74 	bl	800a3bc <HAL_GetTick>
 8003cd4:	60b8      	str	r0, [r7, #8]
    if (Tab[2] == Tab[3]) 
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d12a      	bne.n	8003d3c <TaskState+0x80>
		{                                 // if (previousState == currentState)
      if ((millis - Tab[4]) >= Tab[((size_t)(Tab[2] + 4))]) //  if ( (millis - delayGo) >= Tab[currentState + 4] )
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	3310      	adds	r3, #16
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	1ad2      	subs	r2, r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3308      	adds	r3, #8
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	440b      	add	r3, r1
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d324      	bcc.n	8003d4e <TaskState+0x92>
      {
        state = Tab[2];      // state = currentState
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3308      	adds	r3, #8
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	60fb      	str	r3, [r7, #12]
        Tab[2] = Tab[2] + 1; // currentState = currentState + 1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3308      	adds	r3, #8
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	3308      	adds	r3, #8
 8003d16:	3201      	adds	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]
        if (Tab[2] > Tab[1]) // if (currentState > nbDelay )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d911      	bls.n	8003d4e <TaskState+0x92>
        {
          Tab[2] = 1; // currentState  = 1 ;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	2201      	movs	r2, #1
 8003d30:	601a      	str	r2, [r3, #0]
          Tab[3] = 0; // previousState = 0 ;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	330c      	adds	r3, #12
 8003d36:	2200      	movs	r2, #0
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e008      	b.n	8003d4e <TaskState+0x92>
        }
      }
    } 
		else 
		{
      Tab[4] = millis; // delayGo  <= millis
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3310      	adds	r3, #16
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	601a      	str	r2, [r3, #0]
      Tab[3] = Tab[2]; // previousState <= currentState
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	330c      	adds	r3, #12
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	6892      	ldr	r2, [r2, #8]
 8003d4c:	601a      	str	r2, [r3, #0]
    }
  }
  return state;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <WakeUpNemeusLS>:
//##############################################################
// Nemeus module 
//##############################################################

void WakeUpNemeusLS(void) 
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	OutLoraWu(1);
 8003d5c:	2001      	movs	r0, #1
 8003d5e:	f7ff fb65 	bl	800342c <OutLoraWu>
	HAL_Delay(3);
 8003d62:	2003      	movs	r0, #3
 8003d64:	f006 fb36 	bl	800a3d4 <HAL_Delay>
	OutLoraWu(0);
 8003d68:	2000      	movs	r0, #0
 8003d6a:	f7ff fb5f 	bl	800342c <OutLoraWu>
}
 8003d6e:	bf00      	nop
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <RebootNemeusLS>:

extern uint8_t DUAL_STATE_LS;

void RebootNemeusLS(int TabGen[]) 
{
 8003d74:	b590      	push	{r4, r7, lr}
 8003d76:	b0a1      	sub	sp, #132	; 0x84
 8003d78:	af1e      	add	r7, sp, #120	; 0x78
 8003d7a:	6078      	str	r0, [r7, #4]
		//SendMess("\n", NEMEUS_UART_PORT);
		SendMess("AT+GA=DIND,1,8401\n", NEMEUS_UART_PORT);
 8003d7c:	4c0a      	ldr	r4, [pc, #40]	; (8003da8 <RebootNemeusLS+0x34>)
 8003d7e:	4668      	mov	r0, sp
 8003d80:	f104 030c 	add.w	r3, r4, #12
 8003d84:	2278      	movs	r2, #120	; 0x78
 8003d86:	4619      	mov	r1, r3
 8003d88:	f012 fcfe 	bl	8016788 <memcpy>
 8003d8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003d90:	4806      	ldr	r0, [pc, #24]	; (8003dac <RebootNemeusLS+0x38>)
 8003d92:	f000 fa9b 	bl	80042cc <SendMess>
		//SendMess("AT+SF=?\n");
		//SendMess("AT+MAC=RDEVUID\n"); // DevEui
		//SendMess("AT+MAC=RAPPUID\n"); //AppEui
		//SendMess("AT+MAC=RAPPKEY\n", NEMEUS_UART_PORT); //AppKey
		HAL_Delay(2000);
 8003d96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d9a:	f006 fb1b 	bl	800a3d4 <HAL_Delay>


}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd90      	pop	{r4, r7, pc}
 8003da6:	bf00      	nop
 8003da8:	2000347c 	.word	0x2000347c
 8003dac:	08019c90 	.word	0x08019c90

08003db0 <LoraWanOn>:
// LoraWan, to Objenious or similar
//##############################################################

// Activate the LoraWan layer
void LoraWanOn(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
		SendMess("AT+MAC=SDR,SF12BW125,10,001F,0,0\n", NEMEUS_UART_PORT);  // active lorawan
		HAL_Delay(200);
		SendMess("AT+MAC=ON,3,A,1\n", NEMEUS_UART_PORT);  // active lorawan

	}
}
 8003db4:	bf00      	nop
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <SendOnLora>:
	}
}

// Send a message when you finally joined LoraWan network
void SendOnLora(void)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	af00      	add	r7, sp, #0
	if(LORAWANOK == 1)
	{
		HAL_Delay(1000);
		SendMess("AT+MAC=SNDBIN,000000000000,6,2,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
	}
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <SendMessLoraWan>:

// Send a string of hexa using LoraWan, to objenious
void SendMessLoraWan(char buffer_lorawan[])
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b08d      	sub	sp, #52	; 0x34
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
		sprintf(buffer_all,"AT+MAC=SNDBIN,%s,3,2,0\n", buffer_lorawan);  // %s,buffersig
		SendMess(buffer_all, NEMEUS_UART_PORT);
		HAL_Delay(1000);

	}
}
 8003dd4:	bf00      	nop
 8003dd6:	3734      	adds	r7, #52	; 0x34
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <SigfoxOn>:
	}
}

// Turn on Sigfox layer
void SigfoxOn(void)
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b09f      	sub	sp, #124	; 0x7c
 8003de4:	af1e      	add	r7, sp, #120	; 0x78
	if (SIGFOXOK == 1)
	{
		//SendMess("AT+GA= DIND,1,880201\n", NEMEUS_UART_PORT);

		SendMess("AT+SF=ON\n", NEMEUS_UART_PORT);
 8003de6:	4c0a      	ldr	r4, [pc, #40]	; (8003e10 <SigfoxOn+0x30>)
 8003de8:	4668      	mov	r0, sp
 8003dea:	f104 030c 	add.w	r3, r4, #12
 8003dee:	2278      	movs	r2, #120	; 0x78
 8003df0:	4619      	mov	r1, r3
 8003df2:	f012 fcc9 	bl	8016788 <memcpy>
 8003df6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003dfa:	4806      	ldr	r0, [pc, #24]	; (8003e14 <SigfoxOn+0x34>)
 8003dfc:	f000 fa66 	bl	80042cc <SendMess>
		HAL_Delay(1000);
 8003e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e04:	f006 fae6 	bl	800a3d4 <HAL_Delay>
	}
}
 8003e08:	bf00      	nop
 8003e0a:	3704      	adds	r7, #4
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd90      	pop	{r4, r7, pc}
 8003e10:	2000347c 	.word	0x2000347c
 8003e14:	08019d08 	.word	0x08019d08

08003e18 <SendMessSigfox>:

// Send a string of hexa using Sigfox
void SendMessSigfox(char buffer_sig[], int TabGen[]) 
{
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b0ae      	sub	sp, #184	; 0xb8
 8003e1c:	af1e      	add	r7, sp, #120	; 0x78
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
	if (SIGFOXOK == 1)
	{
		char buffer_all[50];

		if (strlen(buffer_sig) < 10)
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7fc f9d4 	bl	80001d0 <strlen>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b09      	cmp	r3, #9
 8003e2c:	d806      	bhi.n	8003e3c <SendMessSigfox+0x24>
			sprintf(buffer_all,"AT+SF=SNDBIN,100000000000,0\n"); // ERROR // should wait 5s before using nemeus module
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	490f      	ldr	r1, [pc, #60]	; (8003e70 <SendMessSigfox+0x58>)
 8003e34:	4618      	mov	r0, r3
 8003e36:	f013 f995 	bl	8017164 <siprintf>
 8003e3a:	e006      	b.n	8003e4a <SendMessSigfox+0x32>
		else
			sprintf(buffer_all,"AT+SF=SNDBIN,%s,0\n", buffer_sig); // ERROR // should wait 5s before using nemeus module
 8003e3c:	f107 030c 	add.w	r3, r7, #12
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	490c      	ldr	r1, [pc, #48]	; (8003e74 <SendMessSigfox+0x5c>)
 8003e44:	4618      	mov	r0, r3
 8003e46:	f013 f98d 	bl	8017164 <siprintf>
		
		SendMess(buffer_all, NEMEUS_UART_PORT);		//AT+SF=SNDB / IN,1050d4f / 7499298001 / 100,0\n"
 8003e4a:	4c0b      	ldr	r4, [pc, #44]	; (8003e78 <SendMessSigfox+0x60>)
 8003e4c:	f107 050c 	add.w	r5, r7, #12
 8003e50:	4668      	mov	r0, sp
 8003e52:	f104 030c 	add.w	r3, r4, #12
 8003e56:	2278      	movs	r2, #120	; 0x78
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f012 fc95 	bl	8016788 <memcpy>
 8003e5e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003e62:	4628      	mov	r0, r5
 8003e64:	f000 fa32 	bl	80042cc <SendMess>
	}
}
 8003e68:	bf00      	nop
 8003e6a:	3740      	adds	r7, #64	; 0x40
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e70:	08019d14 	.word	0x08019d14
 8003e74:	08019d34 	.word	0x08019d34
 8003e78:	2000347c 	.word	0x2000347c

08003e7c <SendOnMessSigfox>:

//Message sent at startup
void SendOnMessSigfox(uint8_t b_downlink)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b0a1      	sub	sp, #132	; 0x84
 8003e80:	af1e      	add	r7, sp, #120	; 0x78
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]
	if (SIGFOXOK == 1)
	{	
		HAL_Delay(500);
 8003e86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e8a:	f006 faa3 	bl	800a3d4 <HAL_Delay>
		if (b_downlink == 1)
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10d      	bne.n	8003eb0 <SendOnMessSigfox+0x34>
			SendMess("AT+SF=SNDBIN,000000000000,1\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
 8003e94:	4c0f      	ldr	r4, [pc, #60]	; (8003ed4 <SendOnMessSigfox+0x58>)
 8003e96:	4668      	mov	r0, sp
 8003e98:	f104 030c 	add.w	r3, r4, #12
 8003e9c:	2278      	movs	r2, #120	; 0x78
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	f012 fc72 	bl	8016788 <memcpy>
 8003ea4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ea8:	480b      	ldr	r0, [pc, #44]	; (8003ed8 <SendOnMessSigfox+0x5c>)
 8003eaa:	f000 fa0f 	bl	80042cc <SendMess>
		else
			SendMess("AT+SF=SNDBIN,FFFFFFFFFFFF,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
	}
}
 8003eae:	e00c      	b.n	8003eca <SendOnMessSigfox+0x4e>
			SendMess("AT+SF=SNDBIN,FFFFFFFFFFFF,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
 8003eb0:	4c08      	ldr	r4, [pc, #32]	; (8003ed4 <SendOnMessSigfox+0x58>)
 8003eb2:	4668      	mov	r0, sp
 8003eb4:	f104 030c 	add.w	r3, r4, #12
 8003eb8:	2278      	movs	r2, #120	; 0x78
 8003eba:	4619      	mov	r1, r3
 8003ebc:	f012 fc64 	bl	8016788 <memcpy>
 8003ec0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8003ec4:	4805      	ldr	r0, [pc, #20]	; (8003edc <SendOnMessSigfox+0x60>)
 8003ec6:	f000 fa01 	bl	80042cc <SendMess>
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd90      	pop	{r4, r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000347c 	.word	0x2000347c
 8003ed8:	08019d48 	.word	0x08019d48
 8003edc:	08019d68 	.word	0x08019d68

08003ee0 <BuildMessGPS>:

}


void BuildMessGPS(char buffer_sig[], int TabGen[], float TabFloatValue[], uint32_t TabGpsTimer[])
{  
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	b0ad      	sub	sp, #180	; 0xb4
 8003ee4:	af0e      	add	r7, sp, #56	; 0x38
 8003ee6:	6378      	str	r0, [r7, #52]	; 0x34
 8003ee8:	6339      	str	r1, [r7, #48]	; 0x30
 8003eea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eec:	62bb      	str	r3, [r7, #40]	; 0x28
	
	char b1;
	char b2; 
  char buffer1 ;
	int signe_value = -1 ;
 8003eee:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef2:	673b      	str	r3, [r7, #112]	; 0x70
	int elapsed_time_GPS = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
	int val1byte = 0 ;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	667b      	str	r3, [r7, #100]	; 0x64
	int val2byte = 0 ;
 8003efc:	2300      	movs	r3, #0
 8003efe:	66bb      	str	r3, [r7, #104]	; 0x68
	int val3to7byte = 0 ;
 8003f00:	2300      	movs	r3, #0
 8003f02:	663b      	str	r3, [r7, #96]	; 0x60
	int val8to12byte = 0 ;
 8003f04:	2300      	movs	r3, #0
 8003f06:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t buffer = 0x00 ;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char buffer_long[5] ;
	char buffer_lat2[5] ;
	char buffer_long2[5] ;
	char buffer_last_gps[3];
	
	if (TabFloatValue[LONGI] > 0)	{		signe_value = 1 ;	}
 8003f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f10:	3318      	adds	r3, #24
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1e:	dd01      	ble.n	8003f24 <BuildMessGPS+0x44>
 8003f20:	2301      	movs	r3, #1
 8003f22:	673b      	str	r3, [r7, #112]	; 0x70
//malaise + 8
//malaise - 9



	if (TabGen[SIG_ALERT] == ALERT_SOS)
 8003f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f26:	33e0      	adds	r3, #224	; 0xe0
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d110      	bne.n	8003f50 <BuildMessGPS+0x70>
	{	if (signe_value == 1) {  b1 = '0' ;b2='0';}	else	{  b1 = '1' ;b2='0';}	}
 8003f2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d106      	bne.n	8003f42 <BuildMessGPS+0x62>
 8003f34:	2330      	movs	r3, #48	; 0x30
 8003f36:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f3a:	2330      	movs	r3, #48	; 0x30
 8003f3c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f40:	e0cb      	b.n	80040da <BuildMessGPS+0x1fa>
 8003f42:	2331      	movs	r3, #49	; 0x31
 8003f44:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f48:	2330      	movs	r3, #48	; 0x30
 8003f4a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f4e:	e0c4      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_FALL)
 8003f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f52:	33e0      	adds	r3, #224	; 0xe0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b0d      	cmp	r3, #13
 8003f58:	d110      	bne.n	8003f7c <BuildMessGPS+0x9c>
	{	if (signe_value == 1) {  b1 = '2' ;b2='0';}	else	{  b1 = '3' ;b2='0';}	}
 8003f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d106      	bne.n	8003f6e <BuildMessGPS+0x8e>
 8003f60:	2332      	movs	r3, #50	; 0x32
 8003f62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f66:	2330      	movs	r3, #48	; 0x30
 8003f68:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f6c:	e0b5      	b.n	80040da <BuildMessGPS+0x1fa>
 8003f6e:	2333      	movs	r3, #51	; 0x33
 8003f70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f74:	2330      	movs	r3, #48	; 0x30
 8003f76:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f7a:	e0ae      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_LOWBAT)
 8003f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7e:	33e0      	adds	r3, #224	; 0xe0
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b06      	cmp	r3, #6
 8003f84:	d110      	bne.n	8003fa8 <BuildMessGPS+0xc8>
	{	if (signe_value == 1) {  b1 = '4' ;b2='0';}	else	{  b1 = '5' ;b2='0';}	}
 8003f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d106      	bne.n	8003f9a <BuildMessGPS+0xba>
 8003f8c:	2334      	movs	r3, #52	; 0x34
 8003f8e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003f92:	2330      	movs	r3, #48	; 0x30
 8003f94:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003f98:	e09f      	b.n	80040da <BuildMessGPS+0x1fa>
 8003f9a:	2335      	movs	r3, #53	; 0x35
 8003f9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fa0:	2330      	movs	r3, #48	; 0x30
 8003fa2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003fa6:	e098      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_MALAISE)
 8003fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003faa:	33e0      	adds	r3, #224	; 0xe0
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d110      	bne.n	8003fd4 <BuildMessGPS+0xf4>
	{	if (signe_value == 1) {  b1 = '8' ;b2='0';}	else	{  b1 = '9' ;b2='0';}	}
 8003fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <BuildMessGPS+0xe6>
 8003fb8:	2338      	movs	r3, #56	; 0x38
 8003fba:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fbe:	2330      	movs	r3, #48	; 0x30
 8003fc0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003fc4:	e089      	b.n	80040da <BuildMessGPS+0x1fa>
 8003fc6:	2339      	movs	r3, #57	; 0x39
 8003fc8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fcc:	2330      	movs	r3, #48	; 0x30
 8003fce:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003fd2:	e082      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_O2)
 8003fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd6:	33e0      	adds	r3, #224	; 0xe0
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b09      	cmp	r3, #9
 8003fdc:	d110      	bne.n	8004000 <BuildMessGPS+0x120>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='0';}	else	{  b1 = 'A' ;b2='1';}	}
 8003fde:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d106      	bne.n	8003ff2 <BuildMessGPS+0x112>
 8003fe4:	2341      	movs	r3, #65	; 0x41
 8003fe6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003fea:	2330      	movs	r3, #48	; 0x30
 8003fec:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003ff0:	e073      	b.n	80040da <BuildMessGPS+0x1fa>
 8003ff2:	2341      	movs	r3, #65	; 0x41
 8003ff4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003ff8:	2331      	movs	r3, #49	; 0x31
 8003ffa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8003ffe:	e06c      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVME)
 8004000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004002:	33e0      	adds	r3, #224	; 0xe0
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b07      	cmp	r3, #7
 8004008:	d110      	bne.n	800402c <BuildMessGPS+0x14c>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='2';}	else	{  b1 = 'A' ;b2='3';}	}
 800400a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800400c:	2b01      	cmp	r3, #1
 800400e:	d106      	bne.n	800401e <BuildMessGPS+0x13e>
 8004010:	2341      	movs	r3, #65	; 0x41
 8004012:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004016:	2332      	movs	r3, #50	; 0x32
 8004018:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800401c:	e05d      	b.n	80040da <BuildMessGPS+0x1fa>
 800401e:	2341      	movs	r3, #65	; 0x41
 8004020:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004024:	2333      	movs	r3, #51	; 0x33
 8004026:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800402a:	e056      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVLCT)
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	33e0      	adds	r3, #224	; 0xe0
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b08      	cmp	r3, #8
 8004034:	d110      	bne.n	8004058 <BuildMessGPS+0x178>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='4';}	else	{  b1 = 'A' ;b2='5';}	}
 8004036:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <BuildMessGPS+0x16a>
 800403c:	2341      	movs	r3, #65	; 0x41
 800403e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004042:	2334      	movs	r3, #52	; 0x34
 8004044:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004048:	e047      	b.n	80040da <BuildMessGPS+0x1fa>
 800404a:	2341      	movs	r3, #65	; 0x41
 800404c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004050:	2335      	movs	r3, #53	; 0x35
 8004052:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004056:	e040      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVME)
 8004058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405a:	33e0      	adds	r3, #224	; 0xe0
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b0a      	cmp	r3, #10
 8004060:	d110      	bne.n	8004084 <BuildMessGPS+0x1a4>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='6';}	else	{  b1 = 'A' ;b2='7';}	}
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004064:	2b01      	cmp	r3, #1
 8004066:	d106      	bne.n	8004076 <BuildMessGPS+0x196>
 8004068:	2341      	movs	r3, #65	; 0x41
 800406a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800406e:	2336      	movs	r3, #54	; 0x36
 8004070:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004074:	e031      	b.n	80040da <BuildMessGPS+0x1fa>
 8004076:	2341      	movs	r3, #65	; 0x41
 8004078:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800407c:	2337      	movs	r3, #55	; 0x37
 800407e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004082:	e02a      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVLCT)
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	33e0      	adds	r3, #224	; 0xe0
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b0b      	cmp	r3, #11
 800408c:	d110      	bne.n	80040b0 <BuildMessGPS+0x1d0>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='8';}	else	{  b1 = 'A' ;b2='9';}	}
 800408e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004090:	2b01      	cmp	r3, #1
 8004092:	d106      	bne.n	80040a2 <BuildMessGPS+0x1c2>
 8004094:	2341      	movs	r3, #65	; 0x41
 8004096:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800409a:	2338      	movs	r3, #56	; 0x38
 800409c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80040a0:	e01b      	b.n	80040da <BuildMessGPS+0x1fa>
 80040a2:	2341      	movs	r3, #65	; 0x41
 80040a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040a8:	2339      	movs	r3, #57	; 0x39
 80040aa:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80040ae:	e014      	b.n	80040da <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_EX)
 80040b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040b2:	33e0      	adds	r3, #224	; 0xe0
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d10f      	bne.n	80040da <BuildMessGPS+0x1fa>
	{	if (signe_value == 1) {  b1 = 'B' ;b2='0';}	else	{  b1 = 'B' ;b2='1';}	}
 80040ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d106      	bne.n	80040ce <BuildMessGPS+0x1ee>
 80040c0:	2342      	movs	r3, #66	; 0x42
 80040c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040c6:	2330      	movs	r3, #48	; 0x30
 80040c8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80040cc:	e005      	b.n	80040da <BuildMessGPS+0x1fa>
 80040ce:	2342      	movs	r3, #66	; 0x42
 80040d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80040d4:	2331      	movs	r3, #49	; 0x31
 80040d6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	
	
	

	val2byte = TabGen[BAT_VALUE] / 10 ;
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	33a8      	adds	r3, #168	; 0xa8
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a75      	ldr	r2, [pc, #468]	; (80042b8 <BuildMessGPS+0x3d8>)
 80040e2:	fb82 1203 	smull	r1, r2, r2, r3
 80040e6:	1092      	asrs	r2, r2, #2
 80040e8:	17db      	asrs	r3, r3, #31
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte > 9)
 80040ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040f0:	2b09      	cmp	r3, #9
 80040f2:	dd01      	ble.n	80040f8 <BuildMessGPS+0x218>
	{val2byte = 9 ;}
 80040f4:	2309      	movs	r3, #9
 80040f6:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte < 0)
 80040f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	da01      	bge.n	8004102 <BuildMessGPS+0x222>
	{val2byte = 0 ;}
 80040fe:	2300      	movs	r3, #0
 8004100:	66bb      	str	r3, [r7, #104]	; 0x68

	val3to7byte = (int) (    roundf ( (float) ( fabs(TabFloatValue[LATI] * 10000)  )  ) );
 8004102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004104:	3314      	adds	r3, #20
 8004106:	edd3 7a00 	vldr	s15, [r3]
 800410a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80042bc <BuildMessGPS+0x3dc>
 800410e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004112:	eef0 7ae7 	vabs.f32	s15, s15
 8004116:	eeb0 0a67 	vmov.f32	s0, s15
 800411a:	f015 fb3d 	bl	8019798 <roundf>
 800411e:	eef0 7a40 	vmov.f32	s15, s0
 8004122:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004126:	ee17 3a90 	vmov	r3, s15
 800412a:	663b      	str	r3, [r7, #96]	; 0x60
	val8to12byte = (int) ( roundf ( (float) ( fabs(TabFloatValue[LONGI] * 100000)  ) )  );
 800412c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412e:	3318      	adds	r3, #24
 8004130:	edd3 7a00 	vldr	s15, [r3]
 8004134:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80042c0 <BuildMessGPS+0x3e0>
 8004138:	ee67 7a87 	vmul.f32	s15, s15, s14
 800413c:	eef0 7ae7 	vabs.f32	s15, s15
 8004140:	eeb0 0a67 	vmov.f32	s0, s15
 8004144:	f015 fb28 	bl	8019798 <roundf>
 8004148:	eef0 7a40 	vmov.f32	s15, s0
 800414c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004150:	ee17 3a90 	vmov	r3, s15
 8004154:	65fb      	str	r3, [r7, #92]	; 0x5c

	buffer = (uint8_t) ( val1byte * 16 + val2byte );
 8004156:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004158:	b2db      	uxtb	r3, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	b2da      	uxtb	r2, r3
 800415e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004160:	b2db      	uxtb	r3, r3
 8004162:	4413      	add	r3, r2
 8004164:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	elapsed_time_GPS = (int)((HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000 + 1) ;
 8004168:	f006 f928 	bl	800a3bc <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004170:	3308      	adds	r3, #8
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	4a53      	ldr	r2, [pc, #332]	; (80042c4 <BuildMessGPS+0x3e4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	0b9b      	lsrs	r3, r3, #14
 800417e:	3301      	adds	r3, #1
 8004180:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (TabGpsTimer[LAST_UPDATE_GPS] == 0)
 8004182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004184:	3308      	adds	r3, #8
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d101      	bne.n	8004190 <BuildMessGPS+0x2b0>
		elapsed_time_GPS = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	//elapsed_time_GPS = 8*60-1;
	if (elapsed_time_GPS > 8 * 60)  // 0x1E0  max, more than 8 hours => 0xFFF
 8004190:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004192:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004196:	dd02      	ble.n	800419e <BuildMessGPS+0x2be>
		elapsed_time_GPS = 4095; // 0xFFF
 8004198:	f640 73ff 	movw	r3, #4095	; 0xfff
 800419c:	66fb      	str	r3, [r7, #108]	; 0x6c
	

	//elapsed_time_GPS = 8*60-1;
	decimal2hexa(val3to7byte, buffer_lat, 5);
 800419e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041a0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80041a4:	2205      	movs	r2, #5
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 f8ae 	bl	8004308 <decimal2hexa>
	decimal2hexa(val8to12byte, buffer_long, 5);
 80041ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ae:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80041b2:	2205      	movs	r2, #5
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 f8a7 	bl	8004308 <decimal2hexa>
	decimal2hexa(elapsed_time_GPS, buffer_last_gps, 3); 
 80041ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041bc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80041c0:	2203      	movs	r2, #3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 f8a0 	bl	8004308 <decimal2hexa>
	


	buffer_lat2[0] = buffer_lat[0];
 80041c8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80041cc:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer_lat2[1] = buffer_lat[1];
 80041d0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80041d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer_lat2[2] = buffer_lat[2];
 80041d8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80041dc:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer_lat2[3] = buffer_lat[3];
 80041e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80041e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer_lat2[4] = buffer_lat[4];
 80041e8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80041ec:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer_long2[0]  = buffer_long[0];
 80041f0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80041f4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer_long2[1]  = buffer_long[1];
 80041f8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80041fc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer_long2[2]  = buffer_long[2];
 8004200:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8004204:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer_long2[3]  = buffer_long[3];
 8004208:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800420c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer_long2[4]  = buffer_long[4];
 8004210:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004214:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40



	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004218:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 800421c:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
	b1, b2,  //15
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004220:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004224:	461d      	mov	r5, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004226:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800422a:	461e      	mov	r6, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 800422c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004230:	627b      	str	r3, [r7, #36]	; 0x24
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004232:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004236:	623b      	str	r3, [r7, #32]
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8004238:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800423c:	61fb      	str	r3, [r7, #28]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800423e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004242:	61bb      	str	r3, [r7, #24]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004244:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004248:	617b      	str	r3, [r7, #20]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800424a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800424e:	613b      	str	r3, [r7, #16]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004250:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004254:	60fb      	str	r3, [r7, #12]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8004256:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800425a:	60bb      	str	r3, [r7, #8]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 800425c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004260:	607b      	str	r3, [r7, #4]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 8004262:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004266:	461c      	mov	r4, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 8004268:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800426c:	461a      	mov	r2, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 800426e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004270:	f503 738a 	add.w	r3, r3, #276	; 0x114
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	930d      	str	r3, [sp, #52]	; 0x34
 8004278:	920c      	str	r2, [sp, #48]	; 0x30
 800427a:	940b      	str	r4, [sp, #44]	; 0x2c
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	920a      	str	r2, [sp, #40]	; 0x28
 8004280:	68ba      	ldr	r2, [r7, #8]
 8004282:	9209      	str	r2, [sp, #36]	; 0x24
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	9208      	str	r2, [sp, #32]
 8004288:	693a      	ldr	r2, [r7, #16]
 800428a:	9207      	str	r2, [sp, #28]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	9206      	str	r2, [sp, #24]
 8004290:	69ba      	ldr	r2, [r7, #24]
 8004292:	9205      	str	r2, [sp, #20]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	9204      	str	r2, [sp, #16]
 8004298:	6a3a      	ldr	r2, [r7, #32]
 800429a:	9203      	str	r2, [sp, #12]
 800429c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	9601      	str	r6, [sp, #4]
 80042a2:	9500      	str	r5, [sp, #0]
 80042a4:	4603      	mov	r3, r0
 80042a6:	460a      	mov	r2, r1
 80042a8:	4907      	ldr	r1, [pc, #28]	; (80042c8 <BuildMessGPS+0x3e8>)
 80042aa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80042ac:	f012 ff5a 	bl	8017164 <siprintf>


	if(LORAWANOK == 1 && SIGFOXOK == 1)
		buffer_sig[15] = '2';

}
 80042b0:	bf00      	nop
 80042b2:	377c      	adds	r7, #124	; 0x7c
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b8:	66666667 	.word	0x66666667
 80042bc:	461c4000 	.word	0x461c4000
 80042c0:	47c35000 	.word	0x47c35000
 80042c4:	45e7b273 	.word	0x45e7b273
 80042c8:	08019e98 	.word	0x08019e98

080042cc <SendMess>:
//##############################################################



void SendMess(char *char_in, UART_HandleTypeDef huart)
{
 80042cc:	b084      	sub	sp, #16
 80042ce:	b580      	push	{r7, lr}
 80042d0:	b084      	sub	sp, #16
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	f107 001c 	add.w	r0, r7, #28
 80042da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t Timeout_local = 1000;
 80042de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e2:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&NEMEUS_UART_PORT,((uint8_t *)char_in),sizeof(*char_in)-1,Timeout_local  );
	
	HAL_UART_Transmit(&huart,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7fb ff73 	bl	80001d0 <strlen>
 80042ea:	4603      	mov	r3, r0
 80042ec:	b29a      	uxth	r2, r3
 80042ee:	f107 001c 	add.w	r0, r7, #28
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6879      	ldr	r1, [r7, #4]
 80042f6:	f00c f869 	bl	80103cc <HAL_UART_Transmit>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004304:	b004      	add	sp, #16
 8004306:	4770      	bx	lr

08004308 <decimal2hexa>:
	HAL_UART_Transmit(&huart1,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
}


void decimal2hexa(unsigned int decimal,char hexa[],unsigned int size_char)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
   static char const hexaset[] = "0123456789ABCDEF";
   //unsigned int quotient = decimal;
   unsigned int size = size_char;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	617b      	str	r3, [r7, #20]
	
	for(unsigned int i=0;i<size_char;i++)
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
 800431c:	e007      	b.n	800432e <decimal2hexa+0x26>
	{
		hexa[i] = '0';
 800431e:	68ba      	ldr	r2, [r7, #8]
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	2230      	movs	r2, #48	; 0x30
 8004326:	701a      	strb	r2, [r3, #0]
	for(unsigned int i=0;i<size_char;i++)
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3301      	adds	r3, #1
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	429a      	cmp	r2, r3
 8004334:	d3f3      	bcc.n	800431e <decimal2hexa+0x16>
	}

	do
	{
		 size--;
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3b01      	subs	r3, #1
 800433a:	617b      	str	r3, [r7, #20]
		 hexa[size] = hexaset[decimal % 16];
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	68b9      	ldr	r1, [r7, #8]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	440b      	add	r3, r1
 8004348:	4907      	ldr	r1, [pc, #28]	; (8004368 <decimal2hexa+0x60>)
 800434a:	5c8a      	ldrb	r2, [r1, r2]
 800434c:	701a      	strb	r2, [r3, #0]
		 decimal /= 16;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
	}
	while(decimal != 0);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ed      	bne.n	8004336 <decimal2hexa+0x2e>
}
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	371c      	adds	r7, #28
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	0801a070 	.word	0x0801a070

0800436c <TaskBigScreen>:
}

void TaskBigScreen(uint32_t Tab[], int TabAlert[], int TabGen[],
		float TabFloatValue[], uint32_t TabGpsTimer[], uint32_t TabAlertAll[],
		char name[])
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b096      	sub	sp, #88	; 0x58
 8004370:	af06      	add	r7, sp, #24
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
 8004378:	603b      	str	r3, [r7, #0]
	char str_h2S[10];
	char str_o2[10];
	char str_co[10];
	char str_ex[10];

	if (TabGen[SCREENSTATE] == 1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	33d0      	adds	r3, #208	; 0xd0
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d148      	bne.n	8004416 <TaskBigScreen+0xaa>
	{
		switch (TaskState(Tab))
 8004384:	68f8      	ldr	r0, [r7, #12]
 8004386:	f7ff fc99 	bl	8003cbc <TaskState>
 800438a:	4603      	mov	r3, r0
 800438c:	2b03      	cmp	r3, #3
 800438e:	d037      	beq.n	8004400 <TaskBigScreen+0x94>
 8004390:	2b03      	cmp	r3, #3
 8004392:	dc47      	bgt.n	8004424 <TaskBigScreen+0xb8>
 8004394:	2b01      	cmp	r3, #1
 8004396:	d002      	beq.n	800439e <TaskBigScreen+0x32>
 8004398:	2b02      	cmp	r3, #2
 800439a:	d026      	beq.n	80043ea <TaskBigScreen+0x7e>
			}
			break;
		}
	}

}
 800439c:	e042      	b.n	8004424 <TaskBigScreen+0xb8>
			if (TabGen[TYPE_ALERT] == NONE_ALERT)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	3390      	adds	r3, #144	; 0x90
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d138      	bne.n	800441a <TaskBigScreen+0xae>
				status_GPS = (uint8_t) TabGen[STATUT_GPS];
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	33a0      	adds	r3, #160	; 0xa0
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b1e      	ldr	r3, [pc, #120]	; (800442c <TaskBigScreen+0xc0>)
 80043b2:	701a      	strb	r2, [r3, #0]
				batteryLevel = (uint8_t) TabGen[BAT_VALUE];
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	33a8      	adds	r3, #168	; 0xa8
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	4b1c      	ldr	r3, [pc, #112]	; (8004430 <TaskBigScreen+0xc4>)
 80043be:	701a      	strb	r2, [r3, #0]
				display_dco(TabFloatValue, TabAlert, TabGen, TabGpsTimer, name,
 80043c0:	f107 0310 	add.w	r3, r7, #16
 80043c4:	9304      	str	r3, [sp, #16]
 80043c6:	f107 031c 	add.w	r3, r7, #28
 80043ca:	9303      	str	r3, [sp, #12]
 80043cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043d0:	9302      	str	r3, [sp, #8]
 80043d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80043d6:	9301      	str	r3, [sp, #4]
 80043d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	68b9      	ldr	r1, [r7, #8]
 80043e2:	6838      	ldr	r0, [r7, #0]
 80043e4:	f7fd fa14 	bl	8001810 <display_dco>
			break;
 80043e8:	e017      	b.n	800441a <TaskBigScreen+0xae>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3390      	adds	r3, #144	; 0x90
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d014      	beq.n	800441e <TaskBigScreen+0xb2>
				display_AlerteDanger(TabGen, TabAlertAll, 0);
 80043f4:	2200      	movs	r2, #0
 80043f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f7fd fcaf 	bl	8001d5c <display_AlerteDanger>
			break;
 80043fe:	e00e      	b.n	800441e <TaskBigScreen+0xb2>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3390      	adds	r3, #144	; 0x90
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00b      	beq.n	8004422 <TaskBigScreen+0xb6>
				display_AlerteDanger(TabGen, TabAlertAll, 1);
 800440a:	2201      	movs	r2, #1
 800440c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fca4 	bl	8001d5c <display_AlerteDanger>
			break;
 8004414:	e005      	b.n	8004422 <TaskBigScreen+0xb6>
	}
 8004416:	bf00      	nop
 8004418:	e004      	b.n	8004424 <TaskBigScreen+0xb8>
			break;
 800441a:	bf00      	nop
 800441c:	e002      	b.n	8004424 <TaskBigScreen+0xb8>
			break;
 800441e:	bf00      	nop
 8004420:	e000      	b.n	8004424 <TaskBigScreen+0xb8>
			break;
 8004422:	bf00      	nop
}
 8004424:	bf00      	nop
 8004426:	3740      	adds	r7, #64	; 0x40
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	20000b6b 	.word	0x20000b6b
 8004430:	20000b6a 	.word	0x20000b6a

08004434 <TaskLedBlinking>:

void TaskLedBlinking(uint32_t Tab[], int TabGen[])
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
	if (TabGen[CHARGEC] == 1)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	33ac      	adds	r3, #172	; 0xac
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d112      	bne.n	800446e <TaskLedBlinking+0x3a>
	{
		if (TabGen[BAT_VALUE] >= 100)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	33a8      	adds	r3, #168	; 0xa8
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b63      	cmp	r3, #99	; 0x63
 8004450:	dd06      	ble.n	8004460 <TaskLedBlinking+0x2c>
			LedOn(0, 100, 0, TabGen);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	2164      	movs	r1, #100	; 0x64
 8004458:	2000      	movs	r0, #0
 800445a:	f7ff fb8d 	bl	8003b78 <LedOn>

		default:
			break;
		}
	}
}
 800445e:	e029      	b.n	80044b4 <TaskLedBlinking+0x80>
			LedOn(100, 0, 0, TabGen);
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	2100      	movs	r1, #0
 8004466:	2064      	movs	r0, #100	; 0x64
 8004468:	f7ff fb86 	bl	8003b78 <LedOn>
}
 800446c:	e022      	b.n	80044b4 <TaskLedBlinking+0x80>
		switch (TaskState(Tab))
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fc24 	bl	8003cbc <TaskState>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d002      	beq.n	8004480 <TaskLedBlinking+0x4c>
 800447a:	2b02      	cmp	r3, #2
 800447c:	d00d      	beq.n	800449a <TaskLedBlinking+0x66>
			break;
 800447e:	e019      	b.n	80044b4 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR0], TabGen[LEDV0], TabGen[LEDB0], TabGen);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	33c0      	adds	r3, #192	; 0xc0
 8004484:	6818      	ldr	r0, [r3, #0]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	33c4      	adds	r3, #196	; 0xc4
 800448a:	6819      	ldr	r1, [r3, #0]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	33c8      	adds	r3, #200	; 0xc8
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f7ff fb70 	bl	8003b78 <LedOn>
			break;
 8004498:	e00c      	b.n	80044b4 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR], TabGen[LEDV], TabGen[LEDB], TabGen);
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	33b4      	adds	r3, #180	; 0xb4
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	33b8      	adds	r3, #184	; 0xb8
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	33bc      	adds	r3, #188	; 0xbc
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	f7ff fb63 	bl	8003b78 <LedOn>
			break;
 80044b2:	bf00      	nop
}
 80044b4:	bf00      	nop
 80044b6:	3708      	adds	r7, #8
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <TaskUpdateUpperLed>:

void TaskUpdateUpperLed(uint32_t Tab[], int TabGen[])
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]

	switch (TaskState(Tab))
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fbf8 	bl	8003cbc <TaskState>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	f040 80b5 	bne.w	800463e <TaskUpdateUpperLed+0x182>
	{
	case 1:
		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	33ac      	adds	r3, #172	; 0xac
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d004      	beq.n	80044e8 <TaskUpdateUpperLed+0x2c>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	33b0      	adds	r3, #176	; 0xb0
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d11c      	bne.n	8004522 <TaskUpdateUpperLed+0x66>
				&& (TabGen[BAT_VALUE] < 100))
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	33a8      	adds	r3, #168	; 0xa8
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2b63      	cmp	r3, #99	; 0x63
 80044f0:	dc17      	bgt.n	8004522 <TaskUpdateUpperLed+0x66>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 50;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	33b4      	adds	r3, #180	; 0xb4
 80044f6:	2232      	movs	r2, #50	; 0x32
 80044f8:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 0;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	33b8      	adds	r3, #184	; 0xb8
 80044fe:	2200      	movs	r2, #0
 8004500:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	33bc      	adds	r3, #188	; 0xbc
 8004506:	2200      	movs	r2, #0
 8004508:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 50;
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	33c0      	adds	r3, #192	; 0xc0
 800450e:	2232      	movs	r2, #50	; 0x32
 8004510:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	33c4      	adds	r3, #196	; 0xc4
 8004516:	2200      	movs	r2, #0
 8004518:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	33c8      	adds	r3, #200	; 0xc8
 800451e:	2200      	movs	r2, #0
 8004520:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
				TabGen[LEDB0] = 0;
			}
		}

		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	33ac      	adds	r3, #172	; 0xac
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d004      	beq.n	8004536 <TaskUpdateUpperLed+0x7a>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	33b0      	adds	r3, #176	; 0xb0
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d11c      	bne.n	8004570 <TaskUpdateUpperLed+0xb4>
				&& (TabGen[BAT_VALUE] == 100))
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	33a8      	adds	r3, #168	; 0xa8
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b64      	cmp	r3, #100	; 0x64
 800453e:	d117      	bne.n	8004570 <TaskUpdateUpperLed+0xb4>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 0;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	33b4      	adds	r3, #180	; 0xb4
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 50;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	33b8      	adds	r3, #184	; 0xb8
 800454c:	2232      	movs	r2, #50	; 0x32
 800454e:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	33bc      	adds	r3, #188	; 0xbc
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 0;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	33c0      	adds	r3, #192	; 0xc0
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 50;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	33c4      	adds	r3, #196	; 0xc4
 8004564:	2232      	movs	r2, #50	; 0x32
 8004566:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	33c8      	adds	r3, #200	; 0xc8
 800456c:	2200      	movs	r2, #0
 800456e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 250;
				TabGen[LEDB0] = 0;
			}
		}

		if ((TabGen[CHARGEC] == 0) && (TabGen[EOC] == 0))
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	33ac      	adds	r3, #172	; 0xac
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d163      	bne.n	8004642 <TaskUpdateUpperLed+0x186>
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	33b0      	adds	r3, #176	; 0xb0
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d15e      	bne.n	8004642 <TaskUpdateUpperLed+0x186>
		{
			if ((TabGen[BAT_VALUE] >= 50))
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	33a8      	adds	r3, #168	; 0xa8
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2b31      	cmp	r3, #49	; 0x31
 800458c:	dd17      	ble.n	80045be <TaskUpdateUpperLed+0x102>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 0;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	33b4      	adds	r3, #180	; 0xb4
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 50;
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	33b8      	adds	r3, #184	; 0xb8
 800459a:	2232      	movs	r2, #50	; 0x32
 800459c:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	33bc      	adds	r3, #188	; 0xbc
 80045a2:	2200      	movs	r2, #0
 80045a4:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	33c0      	adds	r3, #192	; 0xc0
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	33c4      	adds	r3, #196	; 0xc4
 80045b2:	2200      	movs	r2, #0
 80045b4:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	33c8      	adds	r3, #200	; 0xc8
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if ((TabGen[BAT_VALUE] < 50) && (TabGen[BAT_VALUE] >= 20))
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	33a8      	adds	r3, #168	; 0xa8
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2b31      	cmp	r3, #49	; 0x31
 80045c6:	dc1c      	bgt.n	8004602 <TaskUpdateUpperLed+0x146>
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	33a8      	adds	r3, #168	; 0xa8
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b13      	cmp	r3, #19
 80045d0:	dd17      	ble.n	8004602 <TaskUpdateUpperLed+0x146>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 127;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	33b4      	adds	r3, #180	; 0xb4
 80045d6:	227f      	movs	r2, #127	; 0x7f
 80045d8:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 10;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	33b8      	adds	r3, #184	; 0xb8
 80045de:	220a      	movs	r2, #10
 80045e0:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	33bc      	adds	r3, #188	; 0xbc
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	33c0      	adds	r3, #192	; 0xc0
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	33c4      	adds	r3, #196	; 0xc4
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	33c8      	adds	r3, #200	; 0xc8
 80045fe:	2200      	movs	r2, #0
 8004600:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if (TabGen[BAT_VALUE] < 20)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	33a8      	adds	r3, #168	; 0xa8
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b13      	cmp	r3, #19
 800460a:	dc1a      	bgt.n	8004642 <TaskUpdateUpperLed+0x186>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 100;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	33b4      	adds	r3, #180	; 0xb4
 8004610:	2264      	movs	r2, #100	; 0x64
 8004612:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 0;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	33b8      	adds	r3, #184	; 0xb8
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	33bc      	adds	r3, #188	; 0xbc
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	33c0      	adds	r3, #192	; 0xc0
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	33c4      	adds	r3, #196	; 0xc4
 8004630:	2200      	movs	r2, #0
 8004632:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	33c8      	adds	r3, #200	; 0xc8
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
				}
			}
		}

		break;
 800463c:	e001      	b.n	8004642 <TaskUpdateUpperLed+0x186>

	default:
		break;
 800463e:	bf00      	nop
 8004640:	e000      	b.n	8004644 <TaskUpdateUpperLed+0x188>
		break;
 8004642:	bf00      	nop
	}
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <TaskCharger>:
//		break;
//	}
//}

void TaskCharger(int TabGen[])
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	60fb      	str	r3, [r7, #12]
	int bmsCharge = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	60bb      	str	r3, [r7, #8]
	//*bmsEOC_out = InEOC();
	//*bmsCharge_out = InCHG();

	// by I2C

	if (TabGen[LOCK_I2C1] == 0) // I2C available
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	33ec      	adds	r3, #236	; 0xec
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10f      	bne.n	8004686 <TaskCharger+0x3a>
	{
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	33ec      	adds	r3, #236	; 0xec
 800466a:	2201      	movs	r2, #1
 800466c:	601a      	str	r2, [r3, #0]

		//HAL_Delay(1);
		chargerRead(&bmsEOC, &bmsCharge, TabGen);
 800466e:	f107 0108 	add.w	r1, r7, #8
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4618      	mov	r0, r3
 800467a:	f7fe f889 	bl	8002790 <chargerRead>
		//HAL_Delay(1);

		TabGen[LOCK_I2C1] = 0;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	33ec      	adds	r3, #236	; 0xec
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
	}

	TabGen[EOC] = bmsEOC;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	33b0      	adds	r3, #176	; 0xb0
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	601a      	str	r2, [r3, #0]
	TabGen[CHARGEC] = bmsCharge;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	33ac      	adds	r3, #172	; 0xac
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	601a      	str	r2, [r3, #0]

}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <TaskReadBat>:
//		break;
//	} 
//}

void TaskReadBat(int TabGen[])
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b084      	sub	sp, #16
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
	int percent;

	ReadBat(&percent, 1, 1, TabGen);
 80046a6:	f107 000c 	add.w	r0, r7, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	2101      	movs	r1, #1
 80046b0:	f7fe f8aa 	bl	8002808 <ReadBat>
	TabGen[BAT_VALUE] = percent;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	33a8      	adds	r3, #168	; 0xa8
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	601a      	str	r2, [r3, #0]
}
 80046bc:	bf00      	nop
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <TaskExtButton>:

extern uint32_t low_bat_shutdown;

void TaskExtButton(int TabGen[])
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]

	int i = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
	int butOn = 1;
 80046d0:	2301      	movs	r3, #1
 80046d2:	60bb      	str	r3, [r7, #8]

	if ((TabGen[NS_ON] > 30 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)) // >3s
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3358      	adds	r3, #88	; 0x58
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b1e      	cmp	r3, #30
 80046dc:	dc05      	bgt.n	80046ea <TaskExtButton+0x26>
 80046de:	4ba3      	ldr	r3, [pc, #652]	; (800496c <TaskExtButton+0x2a8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4aa3      	ldr	r2, [pc, #652]	; (8004970 <TaskExtButton+0x2ac>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	f240 813c 	bls.w	8004962 <TaskExtButton+0x29e>
	{
		PowerVib(100);
 80046ea:	2064      	movs	r0, #100	; 0x64
 80046ec:	f7fe f83f 	bl	800276e <PowerVib>

//		ScreenMessExt3s();
		display_wait(1);
 80046f0:	2001      	movs	r0, #1
 80046f2:	f7fd fd47 	bl	8002184 <display_wait>

		i = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80046fa:	e00f      	b.n	800471c <TaskExtButton+0x58>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80046fc:	200a      	movs	r0, #10
 80046fe:	f005 fe69 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 8004702:	f7fe ff0d 	bl	8003520 <InOn>
 8004706:	4603      	mov	r3, r0
 8004708:	2b01      	cmp	r3, #1
 800470a:	d102      	bne.n	8004712 <TaskExtButton+0x4e>
			{
				butOn = 1;
 800470c:	2301      	movs	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	e001      	b.n	8004716 <TaskExtButton+0x52>
			}
			else
			{
				butOn = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3301      	adds	r3, #1
 800471a:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2b31      	cmp	r3, #49	; 0x31
 8004720:	dc07      	bgt.n	8004732 <TaskExtButton+0x6e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d0e9      	beq.n	80046fc <TaskExtButton+0x38>
 8004728:	4b90      	ldr	r3, [pc, #576]	; (800496c <TaskExtButton+0x2a8>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a90      	ldr	r2, [pc, #576]	; (8004970 <TaskExtButton+0x2ac>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d8e4      	bhi.n	80046fc <TaskExtButton+0x38>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d004      	beq.n	8004742 <TaskExtButton+0x7e>
 8004738:	4b8c      	ldr	r3, [pc, #560]	; (800496c <TaskExtButton+0x2a8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a8c      	ldr	r2, [pc, #560]	; (8004970 <TaskExtButton+0x2ac>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d902      	bls.n	8004748 <TaskExtButton+0x84>
		{
			//ScreenMessExt2s();
			display_wait(2);
 8004742:	2002      	movs	r0, #2
 8004744:	f7fd fd1e 	bl	8002184 <display_wait>

		}
		i = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800474c:	e00f      	b.n	800476e <TaskExtButton+0xaa>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 800474e:	200a      	movs	r0, #10
 8004750:	f005 fe40 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 8004754:	f7fe fee4 	bl	8003520 <InOn>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d102      	bne.n	8004764 <TaskExtButton+0xa0>
			{
				butOn = 1;
 800475e:	2301      	movs	r3, #1
 8004760:	60bb      	str	r3, [r7, #8]
 8004762:	e001      	b.n	8004768 <TaskExtButton+0xa4>
			}
			else
			{
				butOn = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3301      	adds	r3, #1
 800476c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b31      	cmp	r3, #49	; 0x31
 8004772:	dc07      	bgt.n	8004784 <TaskExtButton+0xc0>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1e9      	bne.n	800474e <TaskExtButton+0x8a>
 800477a:	4b7c      	ldr	r3, [pc, #496]	; (800496c <TaskExtButton+0x2a8>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a7c      	ldr	r2, [pc, #496]	; (8004970 <TaskExtButton+0x2ac>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d8e4      	bhi.n	800474e <TaskExtButton+0x8a>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d004      	beq.n	8004794 <TaskExtButton+0xd0>
 800478a:	4b78      	ldr	r3, [pc, #480]	; (800496c <TaskExtButton+0x2a8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a78      	ldr	r2, [pc, #480]	; (8004970 <TaskExtButton+0x2ac>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d902      	bls.n	800479a <TaskExtButton+0xd6>
		{
			//ScreenMessExt1s();
			display_wait(3);
 8004794:	2003      	movs	r0, #3
 8004796:	f7fd fcf5 	bl	8002184 <display_wait>
		}
		i = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 800479e:	e00f      	b.n	80047c0 <TaskExtButton+0xfc>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80047a0:	200a      	movs	r0, #10
 80047a2:	f005 fe17 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 80047a6:	f7fe febb 	bl	8003520 <InOn>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d102      	bne.n	80047b6 <TaskExtButton+0xf2>
			{
				butOn = 1;
 80047b0:	2301      	movs	r3, #1
 80047b2:	60bb      	str	r3, [r7, #8]
 80047b4:	e001      	b.n	80047ba <TaskExtButton+0xf6>
			}
			else
			{
				butOn = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b31      	cmp	r3, #49	; 0x31
 80047c4:	dc07      	bgt.n	80047d6 <TaskExtButton+0x112>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d0e9      	beq.n	80047a0 <TaskExtButton+0xdc>
 80047cc:	4b67      	ldr	r3, [pc, #412]	; (800496c <TaskExtButton+0x2a8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a67      	ldr	r2, [pc, #412]	; (8004970 <TaskExtButton+0x2ac>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d8e4      	bhi.n	80047a0 <TaskExtButton+0xdc>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d004      	beq.n	80047e6 <TaskExtButton+0x122>
 80047dc:	4b63      	ldr	r3, [pc, #396]	; (800496c <TaskExtButton+0x2a8>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a63      	ldr	r2, [pc, #396]	; (8004970 <TaskExtButton+0x2ac>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d902      	bls.n	80047ec <TaskExtButton+0x128>
		{
			//ScreenMessExt1s();
			display_wait(4);
 80047e6:	2004      	movs	r0, #4
 80047e8:	f7fd fccc 	bl	8002184 <display_wait>
		}
		i = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80047f0:	e00f      	b.n	8004812 <TaskExtButton+0x14e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80047f2:	200a      	movs	r0, #10
 80047f4:	f005 fdee 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 80047f8:	f7fe fe92 	bl	8003520 <InOn>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d102      	bne.n	8004808 <TaskExtButton+0x144>
			{
				butOn = 1;
 8004802:	2301      	movs	r3, #1
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	e001      	b.n	800480c <TaskExtButton+0x148>
			}
			else
			{
				butOn = 0;
 8004808:	2300      	movs	r3, #0
 800480a:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	3301      	adds	r3, #1
 8004810:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b31      	cmp	r3, #49	; 0x31
 8004816:	dc07      	bgt.n	8004828 <TaskExtButton+0x164>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d0e9      	beq.n	80047f2 <TaskExtButton+0x12e>
 800481e:	4b53      	ldr	r3, [pc, #332]	; (800496c <TaskExtButton+0x2a8>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a53      	ldr	r2, [pc, #332]	; (8004970 <TaskExtButton+0x2ac>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d8e4      	bhi.n	80047f2 <TaskExtButton+0x12e>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d004      	beq.n	8004838 <TaskExtButton+0x174>
 800482e:	4b4f      	ldr	r3, [pc, #316]	; (800496c <TaskExtButton+0x2a8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a4f      	ldr	r2, [pc, #316]	; (8004970 <TaskExtButton+0x2ac>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d902      	bls.n	800483e <TaskExtButton+0x17a>
		{
			//ScreenMessExt1s();
			display_wait(5);
 8004838:	2005      	movs	r0, #5
 800483a:	f7fd fca3 	bl	8002184 <display_wait>
		}
		i = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004842:	e00f      	b.n	8004864 <TaskExtButton+0x1a0>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8004844:	200a      	movs	r0, #10
 8004846:	f005 fdc5 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 800484a:	f7fe fe69 	bl	8003520 <InOn>
 800484e:	4603      	mov	r3, r0
 8004850:	2b01      	cmp	r3, #1
 8004852:	d102      	bne.n	800485a <TaskExtButton+0x196>
			{
				butOn = 1;
 8004854:	2301      	movs	r3, #1
 8004856:	60bb      	str	r3, [r7, #8]
 8004858:	e001      	b.n	800485e <TaskExtButton+0x19a>
			}
			else
			{
				butOn = 0;
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3301      	adds	r3, #1
 8004862:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b31      	cmp	r3, #49	; 0x31
 8004868:	dc07      	bgt.n	800487a <TaskExtButton+0x1b6>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d0e9      	beq.n	8004844 <TaskExtButton+0x180>
 8004870:	4b3e      	ldr	r3, [pc, #248]	; (800496c <TaskExtButton+0x2a8>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a3e      	ldr	r2, [pc, #248]	; (8004970 <TaskExtButton+0x2ac>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d8e4      	bhi.n	8004844 <TaskExtButton+0x180>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d004      	beq.n	800488a <TaskExtButton+0x1c6>
 8004880:	4b3a      	ldr	r3, [pc, #232]	; (800496c <TaskExtButton+0x2a8>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a3a      	ldr	r2, [pc, #232]	; (8004970 <TaskExtButton+0x2ac>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d902      	bls.n	8004890 <TaskExtButton+0x1cc>
		{
			//ScreenMessExt1s();
			display_wait(6);
 800488a:	2006      	movs	r0, #6
 800488c:	f7fd fc7a 	bl	8002184 <display_wait>
		}
		i = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8004894:	e00f      	b.n	80048b6 <TaskExtButton+0x1f2>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8004896:	200a      	movs	r0, #10
 8004898:	f005 fd9c 	bl	800a3d4 <HAL_Delay>
			if ((InOn() == 1))
 800489c:	f7fe fe40 	bl	8003520 <InOn>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <TaskExtButton+0x1e8>
			{
				butOn = 1;
 80048a6:	2301      	movs	r3, #1
 80048a8:	60bb      	str	r3, [r7, #8]
 80048aa:	e001      	b.n	80048b0 <TaskExtButton+0x1ec>
			}
			else
			{
				butOn = 0;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b31      	cmp	r3, #49	; 0x31
 80048ba:	dc07      	bgt.n	80048cc <TaskExtButton+0x208>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d0e9      	beq.n	8004896 <TaskExtButton+0x1d2>
 80048c2:	4b2a      	ldr	r3, [pc, #168]	; (800496c <TaskExtButton+0x2a8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a2a      	ldr	r2, [pc, #168]	; (8004970 <TaskExtButton+0x2ac>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d8e4      	bhi.n	8004896 <TaskExtButton+0x1d2>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d004      	beq.n	80048dc <TaskExtButton+0x218>
 80048d2:	4b26      	ldr	r3, [pc, #152]	; (800496c <TaskExtButton+0x2a8>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a26      	ldr	r2, [pc, #152]	; (8004970 <TaskExtButton+0x2ac>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d902      	bls.n	80048e2 <TaskExtButton+0x21e>
		{
			//ScreenMessExt1s();
			display_wait(7);
 80048dc:	2007      	movs	r0, #7
 80048de:	f7fd fc51 	bl	8002184 <display_wait>
		}
		i = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80048e6:	e007      	b.n	80048f8 <TaskExtButton+0x234>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80048e8:	200a      	movs	r0, #10
 80048ea:	f005 fd73 	bl	800a3d4 <HAL_Delay>
			//}
			//else
			//{
			//butOn = 0;
			//}
			i = i + 1;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	3301      	adds	r3, #1
 80048f2:	60fb      	str	r3, [r7, #12]
			butOn = 1; // Even if you stop pressing the ON/OFF button, device will turn off while showing "Extinction"
 80048f4:	2301      	movs	r3, #1
 80048f6:	60bb      	str	r3, [r7, #8]
		while ((i < 50)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b31      	cmp	r3, #49	; 0x31
 80048fc:	dc07      	bgt.n	800490e <TaskExtButton+0x24a>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d0f1      	beq.n	80048e8 <TaskExtButton+0x224>
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <TaskExtButton+0x2a8>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a19      	ldr	r2, [pc, #100]	; (8004970 <TaskExtButton+0x2ac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d8ec      	bhi.n	80048e8 <TaskExtButton+0x224>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d004      	beq.n	800491e <TaskExtButton+0x25a>
 8004914:	4b15      	ldr	r3, [pc, #84]	; (800496c <TaskExtButton+0x2a8>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a15      	ldr	r2, [pc, #84]	; (8004970 <TaskExtButton+0x2ac>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d921      	bls.n	8004962 <TaskExtButton+0x29e>
		{
			//ScreenMessExtOnly();
			display_wait(8);
 800491e:	2008      	movs	r0, #8
 8004920:	f7fd fc30 	bl	8002184 <display_wait>

			PowerVib(100);
 8004924:	2064      	movs	r0, #100	; 0x64
 8004926:	f7fd ff22 	bl	800276e <PowerVib>
			HAL_Delay(500);
 800492a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800492e:	f005 fd51 	bl	800a3d4 <HAL_Delay>
			LedOff(TabGen);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f7ff f8e2 	bl	8003afc <LedOff>
			//ScreenMessEmpty();
			display_Print("");
 8004938:	480e      	ldr	r0, [pc, #56]	; (8004974 <TaskExtButton+0x2b0>)
 800493a:	f7fd fd75 	bl	8002428 <display_Print>
			//HAL_Delay(2000);
			TabGen[STOPDEVICE] = 1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	33cc      	adds	r3, #204	; 0xcc
 8004942:	2201      	movs	r2, #1
 8004944:	601a      	str	r2, [r3, #0]
			//  HAL_Delay(1);
			//  OutDone(1);
			//  HAL_Delay(1);
			//  OutDone(0);
			//  HAL_Delay(1000);
			HAL_Delay(2000);
 8004946:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800494a:	f005 fd43 	bl	800a3d4 <HAL_Delay>
			OutDone1(1); //Start Powersave part 1
 800494e:	2001      	movs	r0, #1
 8004950:	f7fe fcee 	bl	8003330 <OutDone1>
			OutDone2(0); //Start Powersave part 2
 8004954:	2000      	movs	r0, #0
 8004956:	f7fe fd03 	bl	8003360 <OutDone2>
			//powerSave = 1;
			HAL_Delay(1000);
 800495a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800495e:	f005 fd39 	bl	800a3d4 <HAL_Delay>
		}
	}
}
 8004962:	bf00      	nop
 8004964:	3710      	adds	r7, #16
 8004966:	46bd      	mov	sp, r7
 8004968:	bd80      	pop	{r7, pc}
 800496a:	bf00      	nop
 800496c:	20000b64 	.word	0x20000b64
 8004970:	000186a0 	.word	0x000186a0
 8004974:	08019ee0 	.word	0x08019ee0

08004978 <TaskFallTest>:

void TaskFallTest(int TabAlert[], int TabGen[])
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]

	int fallBrutal = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	60fb      	str	r3, [r7, #12]

	if ((TabGen[FALL_DELAY] == 0) && (TabAlert[ALERT_FALL] == 0)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	3328      	adds	r3, #40	; 0x28
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d14a      	bne.n	8004a26 <TaskFallTest+0xae>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3334      	adds	r3, #52	; 0x34
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d145      	bne.n	8004a26 <TaskFallTest+0xae>
			&& (TabAlert[ALERT_MALAISE] == 0))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3308      	adds	r3, #8
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d140      	bne.n	8004a26 <TaskFallTest+0xae>
	{
		if (TabGen[FALL_COND_3] == 1)
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	3378      	adds	r3, #120	; 0x78
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d112      	bne.n	80049d4 <TaskFallTest+0x5c>
		{
			TabGen[FALL_COND_3] = 0;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	3378      	adds	r3, #120	; 0x78
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]
			uint8_t z = 0;
 80049b6:	2300      	movs	r3, #0
 80049b8:	72fb      	strb	r3, [r7, #11]
			z = test_chute(ar_full, y_full);
 80049ba:	492a      	ldr	r1, [pc, #168]	; (8004a64 <TaskFallTest+0xec>)
 80049bc:	482a      	ldr	r0, [pc, #168]	; (8004a68 <TaskFallTest+0xf0>)
 80049be:	f7fe fa51 	bl	8002e64 <test_chute>
 80049c2:	4603      	mov	r3, r0
 80049c4:	72fb      	strb	r3, [r7, #11]
//			for ( int k = 0; k < 400 ; k++) // on teste si on a un grand pic qui va caract�riser surement une chute pas besoin de v�rifier l'angle
//			{
//				if (ar_full[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			if (z == 1)
 80049c6:	7afb      	ldrb	r3, [r7, #11]
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d103      	bne.n	80049d4 <TaskFallTest+0x5c>
			{
				TabGen[FALL_DELAY] = 1;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	3328      	adds	r3, #40	; 0x28
 80049d0:	2201      	movs	r2, #1
 80049d2:	601a      	str	r2, [r3, #0]
			}
		}
		if (TabGen[FALL_COND_4] == 1)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	337c      	adds	r3, #124	; 0x7c
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d112      	bne.n	8004a04 <TaskFallTest+0x8c>
		{
			uint8_t z = 0;
 80049de:	2300      	movs	r3, #0
 80049e0:	72bb      	strb	r3, [r7, #10]
			z = test_chute(arr, yy);
 80049e2:	4922      	ldr	r1, [pc, #136]	; (8004a6c <TaskFallTest+0xf4>)
 80049e4:	4822      	ldr	r0, [pc, #136]	; (8004a70 <TaskFallTest+0xf8>)
 80049e6:	f7fe fa3d 	bl	8002e64 <test_chute>
 80049ea:	4603      	mov	r3, r0
 80049ec:	72bb      	strb	r3, [r7, #10]
//			{
//				if (arr[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			//z= test_chute(ar_full,y_full);
			if (z == 1)
 80049ee:	7abb      	ldrb	r3, [r7, #10]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d103      	bne.n	80049fc <TaskFallTest+0x84>
			{
				TabGen[FALL_DELAY] = 1;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	3328      	adds	r3, #40	; 0x28
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]
			}
			TabGen[FALL_COND_4] = 0;
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	337c      	adds	r3, #124	; 0x7c
 8004a00:	2200      	movs	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
		}
		if (fallBrutal == 1)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d10d      	bne.n	8004a26 <TaskFallTest+0xae>
		{
			fallBrutal = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
			TabAlert[ALERT_FALL] = 1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	3334      	adds	r3, #52	; 0x34
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	332c      	adds	r3, #44	; 0x2c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	3328      	adds	r3, #40	; 0x28
 8004a22:	2200      	movs	r2, #0
 8004a24:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[FALL_DELAY] == 1) && (TabAlert[ALERT_FALL] == 0))
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	3328      	adds	r3, #40	; 0x28
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d115      	bne.n	8004a5c <TaskFallTest+0xe4>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3334      	adds	r3, #52	; 0x34
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d110      	bne.n	8004a5c <TaskFallTest+0xe4>
	{
		if (TabGen[FALL_UP_DELAY] == 1)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	332c      	adds	r3, #44	; 0x2c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10b      	bne.n	8004a5c <TaskFallTest+0xe4>
		{
			TabAlert[ALERT_FALL] = 1;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3334      	adds	r3, #52	; 0x34
 8004a48:	2201      	movs	r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	332c      	adds	r3, #44	; 0x2c
 8004a50:	2200      	movs	r2, #0
 8004a52:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	3328      	adds	r3, #40	; 0x28
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]
		}
	}

}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	200030b8 	.word	0x200030b8
 8004a68:	20002828 	.word	0x20002828
 8004a6c:	20002ee8 	.word	0x20002ee8
 8004a70:	200021b0 	.word	0x200021b0

08004a74 <TaskAlertAll>:

void TaskAlertAll(int TabAlert[], int TabGen[], uint32_t TabAlertAll[],
		float TabFloatValue[]) // int *sosRelach, uint32_t *OnLength, uint32_t *On_nb_sample, int *sigSend, char lcd_buf1[], char lcd_buf2[], uint32_t  *nS_malaise, uint32_t  *nS_immo, uint32_t  *nS_fall, int *h2sAlerte, int *COAlerte, int *sos, int *fallmalaise, int *send_mess, uint32_t *SOS_nb_sample, uint32_t *alert_t0, uint32_t *alert_duration, uint32_t *sosLength, int *malaise, int *fall, int *alert_on, int *alert_on_previous, int *gps_on, int *buz_on, int *ledAlert)
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b087      	sub	sp, #28
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	607a      	str	r2, [r7, #4]
 8004a80:	603b      	str	r3, [r7, #0]
//#define NB_GAZ_END    11

//uint8_t charuart[11];
	uint32_t millis2;

	millis2 = HAL_GetTick();
 8004a82:	f005 fc9b 	bl	800a3bc <HAL_GetTick>
 8004a86:	6138      	str	r0, [r7, #16]

//char bufferSig[30];

	if (TabGen[ALERT_ON] == 0)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f040 80fe 	bne.w	8004c8e <TaskAlertAll+0x21a>
	{
		if (TabAlert[ALERT_SOS] == 1)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d104      	bne.n	8004aa6 <TaskAlertAll+0x32>
		{
			TabGen[TYPE_ALERT] = ALERT_SOS;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	3390      	adds	r3, #144	; 0x90
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	e0f3      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_FALL] == 1
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3334      	adds	r3, #52	; 0x34
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d113      	bne.n	8004ad8 <TaskAlertAll+0x64>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004ab0:	f005 fc84 	bl	800a3bc <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d908      	bls.n	8004ad8 <TaskAlertAll+0x64>
		{
			TabGen[TYPE_ALERT] = ALERT_FALL;
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	3390      	adds	r3, #144	; 0x90
 8004aca:	220d      	movs	r2, #13
 8004acc:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	693a      	ldr	r2, [r7, #16]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e0da      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_MALAISE] == 1
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	3308      	adds	r3, #8
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d113      	bne.n	8004b0a <TaskAlertAll+0x96>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004ae2:	f005 fc6b 	bl	800a3bc <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3308      	adds	r3, #8
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	1ad3      	subs	r3, r2, r3
 8004af0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d908      	bls.n	8004b0a <TaskAlertAll+0x96>
		{
			TabGen[TYPE_ALERT] = ALERT_MALAISE;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3390      	adds	r3, #144	; 0x90
 8004afc:	2202      	movs	r2, #2
 8004afe:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3308      	adds	r3, #8
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	e0c1      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_EX] == 1)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3330      	adds	r3, #48	; 0x30
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d113      	bne.n	8004b3c <TaskAlertAll+0xc8>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004b14:	f005 fc52 	bl	800a3bc <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d908      	bls.n	8004b3c <TaskAlertAll+0xc8>
		{
			TabGen[TYPE_ALERT] = ALERT_EX;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	3390      	adds	r3, #144	; 0x90
 8004b2e:	220c      	movs	r2, #12
 8004b30:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3308      	adds	r3, #8
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e0a8      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_O2] == 1)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	3324      	adds	r3, #36	; 0x24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d113      	bne.n	8004b6e <TaskAlertAll+0xfa>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004b46:	f005 fc39 	bl	800a3bc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3308      	adds	r3, #8
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d908      	bls.n	8004b6e <TaskAlertAll+0xfa>
		{
			TabGen[TYPE_ALERT] = ALERT_O2;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	3390      	adds	r3, #144	; 0x90
 8004b60:	2209      	movs	r2, #9
 8004b62:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3308      	adds	r3, #8
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	e08f      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVME] == 1)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3328      	adds	r3, #40	; 0x28
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d113      	bne.n	8004ba0 <TaskAlertAll+0x12c>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004b78:	f005 fc20 	bl	800a3bc <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	3308      	adds	r3, #8
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	1ad3      	subs	r3, r2, r3
 8004b86:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d908      	bls.n	8004ba0 <TaskAlertAll+0x12c>
		{
			TabGen[TYPE_ALERT] = ALERT_COVME;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3390      	adds	r3, #144	; 0x90
 8004b92:	220a      	movs	r2, #10
 8004b94:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e076      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVME] == 1)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	331c      	adds	r3, #28
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d113      	bne.n	8004bd2 <TaskAlertAll+0x15e>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004baa:	f005 fc07 	bl	800a3bc <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3308      	adds	r3, #8
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d908      	bls.n	8004bd2 <TaskAlertAll+0x15e>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVME;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	3390      	adds	r3, #144	; 0x90
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3308      	adds	r3, #8
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	e05d      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVLCT] == 1)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	332c      	adds	r3, #44	; 0x2c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d113      	bne.n	8004c04 <TaskAlertAll+0x190>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004bdc:	f005 fbee 	bl	800a3bc <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	3308      	adds	r3, #8
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d908      	bls.n	8004c04 <TaskAlertAll+0x190>
		{
			TabGen[TYPE_ALERT] = ALERT_COVLCT;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3390      	adds	r3, #144	; 0x90
 8004bf6:	220b      	movs	r2, #11
 8004bf8:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3308      	adds	r3, #8
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	601a      	str	r2, [r3, #0]
 8004c02:	e044      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVLCT] == 1)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3320      	adds	r3, #32
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d113      	bne.n	8004c36 <TaskAlertAll+0x1c2>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8004c0e:	f005 fbd5 	bl	800a3bc <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3308      	adds	r3, #8
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f64e 2260 	movw	r2, #60000	; 0xea60
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d908      	bls.n	8004c36 <TaskAlertAll+0x1c2>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVLCT;
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	3390      	adds	r3, #144	; 0x90
 8004c28:	2208      	movs	r2, #8
 8004c2a:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3308      	adds	r3, #8
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	e02b      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_SONO] == 1)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	330c      	adds	r3, #12
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d104      	bne.n	8004c4a <TaskAlertAll+0x1d6>
		{
			TabGen[TYPE_ALERT] = ALERT_SONO;
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3390      	adds	r3, #144	; 0x90
 8004c44:	2203      	movs	r2, #3
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	e021      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_COL] == 1)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3310      	adds	r3, #16
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d104      	bne.n	8004c5e <TaskAlertAll+0x1ea>
		{
			TabGen[TYPE_ALERT] = ALERT_COL;
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3390      	adds	r3, #144	; 0x90
 8004c58:	2204      	movs	r2, #4
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	e017      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_DIST] == 1)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	3314      	adds	r3, #20
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d104      	bne.n	8004c72 <TaskAlertAll+0x1fe>
		{
			TabGen[TYPE_ALERT] = ALERT_DIST;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	3390      	adds	r3, #144	; 0x90
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	601a      	str	r2, [r3, #0]
 8004c70:	e00d      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_LOWBAT] == 1)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	3318      	adds	r3, #24
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d104      	bne.n	8004c86 <TaskAlertAll+0x212>
		{
			TabGen[TYPE_ALERT] = ALERT_LOWBAT;
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3390      	adds	r3, #144	; 0x90
 8004c80:	2206      	movs	r2, #6
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	e003      	b.n	8004c8e <TaskAlertAll+0x21a>
		}
		else
		{
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	3390      	adds	r3, #144	; 0x90
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[TYPE_ALERT] != NONE_ALERT) && (TabGen[ALERT_ON] == 0))
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	3390      	adds	r3, #144	; 0x90
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d077      	beq.n	8004d88 <TaskAlertAll+0x314>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d173      	bne.n	8004d88 <TaskAlertAll+0x314>
	{
		TabAlertAll[ALL_TIM_1] = HAL_GetTick(); // beg. timer
 8004ca0:	f005 fb8c 	bl	800a3bc <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_ON] = 1;
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2201      	movs	r2, #1
 8004cae:	601a      	str	r2, [r3, #0]
		TabGen[GPS_ON] = 1;
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	601a      	str	r2, [r3, #0]
		// Big Led Blinking (major)
		if ((TabAlert[ALERT_FALL] == 1) || (TabAlert[ALERT_MALAISE] == 1)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3334      	adds	r3, #52	; 0x34
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d027      	beq.n	8004d12 <TaskAlertAll+0x29e>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d022      	beq.n	8004d12 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_SOS] == 1) || (TabAlert[ALERT_EX] == 1)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d01d      	beq.n	8004d12 <TaskAlertAll+0x29e>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3330      	adds	r3, #48	; 0x30
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d018      	beq.n	8004d12 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_O2] == 1) || (TabAlert[ALERT_COVLCT] == 1)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3324      	adds	r3, #36	; 0x24
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d013      	beq.n	8004d12 <TaskAlertAll+0x29e>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	332c      	adds	r3, #44	; 0x2c
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d00e      	beq.n	8004d12 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_H2SVLCT] == 1) || (TabAlert[ALERT_COL] == 1)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	3320      	adds	r3, #32
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d009      	beq.n	8004d12 <TaskAlertAll+0x29e>
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	3310      	adds	r3, #16
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d004      	beq.n	8004d12 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_DIST])) // Big Alert
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3314      	adds	r3, #20
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d013      	beq.n	8004d3a <TaskAlertAll+0x2c6>
		{
			TabGen[BUZ_ON_FAST] = 1;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	3308      	adds	r3, #8
 8004d16:	2201      	movs	r2, #1
 8004d18:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_FAST] = 1;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	330c      	adds	r3, #12
 8004d1e:	2201      	movs	r2, #1
 8004d20:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_FAST] = 1;
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	3310      	adds	r3, #16
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 8004d2a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d2e:	2203      	movs	r2, #3
 8004d30:	495c      	ldr	r1, [pc, #368]	; (8004ea4 <TaskAlertAll+0x430>)
 8004d32:	485d      	ldr	r0, [pc, #372]	; (8004ea8 <TaskAlertAll+0x434>)
 8004d34:	f00b fb4a 	bl	80103cc <HAL_UART_Transmit>
 8004d38:	e026      	b.n	8004d88 <TaskAlertAll+0x314>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

		}
		else if ((TabAlert[ALERT_COVME] == 1) || (TabAlert[ALERT_H2SVME] == 1)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3328      	adds	r3, #40	; 0x28
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d00e      	beq.n	8004d62 <TaskAlertAll+0x2ee>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	331c      	adds	r3, #28
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d009      	beq.n	8004d62 <TaskAlertAll+0x2ee>
				|| (TabAlert[ALERT_SONO] == 1) || (TabAlert[ALERT_LOWBAT]))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	330c      	adds	r3, #12
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d004      	beq.n	8004d62 <TaskAlertAll+0x2ee>
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	3318      	adds	r3, #24
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <TaskAlertAll+0x314>
		{
			TabGen[BUZ_ON_SLOW] = 1;
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	3314      	adds	r3, #20
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_SLOW] = 1;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	3318      	adds	r3, #24
 8004d6e:	2201      	movs	r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_SLOW] = 1;
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	331c      	adds	r3, #28
 8004d76:	2201      	movs	r2, #1
 8004d78:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 8004d7a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004d7e:	2203      	movs	r2, #3
 8004d80:	4948      	ldr	r1, [pc, #288]	; (8004ea4 <TaskAlertAll+0x430>)
 8004d82:	4849      	ldr	r0, [pc, #292]	; (8004ea8 <TaskAlertAll+0x434>)
 8004d84:	f00b fb22 	bl	80103cc <HAL_UART_Transmit>

		}

	}

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 8004d88:	2300      	movs	r3, #0
 8004d8a:	617b      	str	r3, [r7, #20]
 8004d8c:	e008      	b.n	8004da0 <TaskAlertAll+0x32c>
	{
		TabAlert[i_fct] = 0;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4413      	add	r3, r2
 8004d96:	2200      	movs	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	617b      	str	r3, [r7, #20]
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	2b0d      	cmp	r3, #13
 8004da4:	ddf3      	ble.n	8004d8e <TaskAlertAll+0x31a>
	}

	if (TabGen[ALERT_ON] == 1)  // if Alert Actually
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d176      	bne.n	8004e9c <TaskAlertAll+0x428>
	{
		if (TabGen[SOS_PUSH_LONG] == 1) // if long punch on SOS or ON/off button
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	3320      	adds	r3, #32
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d137      	bne.n	8004e28 <TaskAlertAll+0x3b4>
		{
			TabGen[ALERT_ON] = 0;     // clear alert
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	333c      	adds	r3, #60	; 0x3c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	601a      	str	r2, [r3, #0]
			TabGen[NS_IMMO] = 0;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3340      	adds	r3, #64	; 0x40
 8004dca:	2200      	movs	r2, #0
 8004dcc:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3320      	adds	r3, #32
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	3390      	adds	r3, #144	; 0x90
 8004dda:	2200      	movs	r2, #0
 8004ddc:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",
 8004dde:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004de2:	2203      	movs	r2, #3
 8004de4:	4931      	ldr	r1, [pc, #196]	; (8004eac <TaskAlertAll+0x438>)
 8004de6:	4830      	ldr	r0, [pc, #192]	; (8004ea8 <TaskAlertAll+0x434>)
 8004de8:	f00b faf0 	bl	80103cc <HAL_UART_Transmit>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500); // A periodicité, B fréquence, C on/off

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f103 0408 	add.w	r4, r3, #8
 8004df2:	f005 fae3 	bl	800a3bc <HAL_GetTick>
 8004df6:	4603      	mov	r3, r0
 8004df8:	6023      	str	r3, [r4, #0]

			TabFloatValue[O2_VALUE] = 21;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <TaskAlertAll+0x43c>)
 8004e00:	601a      	str	r2, [r3, #0]
			TabFloatValue[CO_VALUE] = 0;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	3308      	adds	r3, #8
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
			TabFloatValue[EX_VALUE] = 0;
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	330c      	adds	r3, #12
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]
			TabFloatValue[H2S_VALUE] = 0;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f04f 0200 	mov.w	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
			TabFloatValue[DB_VALUE] = 0;
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	3310      	adds	r3, #16
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]

		}

		if ((HAL_GetTick() - TabAlertAll[ALL_TIM_1]) > (SIGDURATION * 1000)) // if timer to cancel alert is over
 8004e28:	f005 fac8 	bl	800a3bc <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f247 5230 	movw	r2, #30000	; 0x7530
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d92f      	bls.n	8004e9c <TaskAlertAll+0x428>
		{
			TabGen[NS_MALAISE] = 0;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	333c      	adds	r3, #60	; 0x3c
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_PENDING] = 1;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]

			if (SIGFOXOK == 1)
			{

				TabGen[SIGFOX_SEND] = 1;   // send sigfox mess
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3324      	adds	r3, #36	; 0x24
 8004e52:	2201      	movs	r2, #1
 8004e54:	601a      	str	r2, [r3, #0]
			if (LORAP2POK == 1)
			{
				TabGen[LORAP2P_SEND] = 1; // send lora mess
			}

			TabGen[SIG_ALERT] = TabGen[TYPE_ALERT];
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	33e0      	adds	r3, #224	; 0xe0
 8004e5a:	68ba      	ldr	r2, [r7, #8]
 8004e5c:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8004e60:	601a      	str	r2, [r3, #0]

			TabGen[NS_IMMO] = 0;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3340      	adds	r3, #64	; 0x40
 8004e66:	2200      	movs	r2, #0
 8004e68:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_ON] = 0;     // clear alert
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	3320      	adds	r3, #32
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	3390      	adds	r3, #144	; 0x90
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",
 8004e80:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004e84:	2203      	movs	r2, #3
 8004e86:	4909      	ldr	r1, [pc, #36]	; (8004eac <TaskAlertAll+0x438>)
 8004e88:	4807      	ldr	r0, [pc, #28]	; (8004ea8 <TaskAlertAll+0x434>)
 8004e8a:	f00b fa9f 	bl	80103cc <HAL_UART_Transmit>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f103 0408 	add.w	r4, r3, #8
 8004e94:	f005 fa92 	bl	800a3bc <HAL_GetTick>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	6023      	str	r3, [r4, #0]
		}
	}

}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd90      	pop	{r4, r7, pc}
 8004ea4:	08019ee4 	.word	0x08019ee4
 8004ea8:	20003374 	.word	0x20003374
 8004eac:	08019ef0 	.word	0x08019ef0
 8004eb0:	41a80000 	.word	0x41a80000

08004eb4 <TaskOnScreen>:

extern uint8_t REBOOT_FROM_WATCHDOG;

void TaskOnScreen(int TabGen[], uint32_t *Timer_screen)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b082      	sub	sp, #8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
//		display_InitBis();
//		TabGen[SCREENSTATE] = 1;
//		TabGen[SCREENSTATEON] = 0 ;
//	}

	if ((TabGen[RE_ON_SCREEN] == 1) || (TabGen[TYPE_ALERT] != NONE_ALERT))
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3350      	adds	r3, #80	; 0x50
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d004      	beq.n	8004ed2 <TaskOnScreen+0x1e>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3390      	adds	r3, #144	; 0x90
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d016      	beq.n	8004f00 <TaskOnScreen+0x4c>
	{

		TabGen[RE_ON_SCREEN] = 0;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3350      	adds	r3, #80	; 0x50
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
		*Timer_screen = HAL_GetTick() - 1;
 8004eda:	f005 fa6f 	bl	800a3bc <HAL_GetTick>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	601a      	str	r2, [r3, #0]
		if (TabGen[SCREENSTATE] == 0)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	33d0      	adds	r3, #208	; 0xd0
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d107      	bne.n	8004f00 <TaskOnScreen+0x4c>
		{
			ScreenOn();
 8004ef0:	f7fe fea6 	bl	8003c40 <ScreenOn>
			display_InitBis();
 8004ef4:	f7fc fc70 	bl	80017d8 <display_InitBis>
			TabGen[SCREENSTATE] = 1;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	33d0      	adds	r3, #208	; 0xd0
 8004efc:	2201      	movs	r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - *Timer_screen) > (SEC_ONOFF_SCREEN * 1000))
 8004f00:	f005 fa5c 	bl	800a3bc <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d905      	bls.n	8004f20 <TaskOnScreen+0x6c>
	{
		//REBOOT_FROM_WATCHDOG = 0;
		ScreenOff();
 8004f14:	f7fe feaa 	bl	8003c6c <ScreenOff>
		TabGen[SCREENSTATE] = 0;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	33d0      	adds	r3, #208	; 0xd0
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	601a      	str	r2, [r3, #0]
	}
}
 8004f20:	bf00      	nop
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <TaskGPS>:

void TaskGPS(uint8_t RxI[], int TabGen[], uint32_t TabGpsTimer[],
		float TabFloatValue[])
{
 8004f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f2c:	b088      	sub	sp, #32
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	60f8      	str	r0, [r7, #12]
 8004f32:	60b9      	str	r1, [r7, #8]
 8004f34:	607a      	str	r2, [r7, #4]
 8004f36:	603b      	str	r3, [r7, #0]

	float lati = 0;
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	61fb      	str	r3, [r7, #28]
	float longi = 0;
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	61bb      	str	r3, [r7, #24]

	if (GPSOK == 1) // GPS IS ENABLED
	{
		if (TabGen[GPS_ON] == 1)
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	3304      	adds	r3, #4
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	f040 8280 	bne.w	8005450 <TaskGPS+0x528>
		{
//			if ((RxI[0] == '$') && (RxI[1] == 'G') && (RxI[2] == 'N') && (RxI[3] == 'G') && (RxI[4] == 'G') && (RxI[5] == 'A'))
//			{

			if ((RxI[6] == ',') && (RxI[16] == ',') && (RxI[27] == ',')
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	3306      	adds	r3, #6
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b2c      	cmp	r3, #44	; 0x2c
 8004f58:	f040 827a 	bne.w	8005450 <TaskGPS+0x528>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	3310      	adds	r3, #16
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b2c      	cmp	r3, #44	; 0x2c
 8004f64:	f040 8274 	bne.w	8005450 <TaskGPS+0x528>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	331b      	adds	r3, #27
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	2b2c      	cmp	r3, #44	; 0x2c
 8004f70:	f040 826e 	bne.w	8005450 <TaskGPS+0x528>
					&& (RxI[29] == ',') && (RxI[41] == ',') && (RxI[43] == ','))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	331d      	adds	r3, #29
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b2c      	cmp	r3, #44	; 0x2c
 8004f7c:	f040 8268 	bne.w	8005450 <TaskGPS+0x528>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3329      	adds	r3, #41	; 0x29
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2b2c      	cmp	r3, #44	; 0x2c
 8004f88:	f040 8262 	bne.w	8005450 <TaskGPS+0x528>
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	332b      	adds	r3, #43	; 0x2b
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	2b2c      	cmp	r3, #44	; 0x2c
 8004f94:	f040 825c 	bne.w	8005450 <TaskGPS+0x528>
			{
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	3311      	adds	r3, #17
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	4413      	add	r3, r2
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	461a      	mov	r2, r3
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3312      	adds	r3, #18
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	3b30      	subs	r3, #48	; 0x30
 8004fb4:	4413      	add	r3, r2
						+ ((RxI[19] - 48) * pow(10, 6)
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fab4 	bl	8000524 <__aeabi_i2d>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3313      	adds	r3, #19
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	3b30      	subs	r3, #48	; 0x30
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fb faab 	bl	8000524 <__aeabi_i2d>
 8004fce:	a3ec      	add	r3, pc, #944	; (adr r3, 8005380 <TaskGPS+0x458>)
 8004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd4:	f7fb fb10 	bl	80005f8 <__aeabi_dmul>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4690      	mov	r8, r2
 8004fde:	4699      	mov	r9, r3
								+ (RxI[20] - 48) * pow(10, 5)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	781b      	ldrb	r3, [r3, #0]
 8004fe6:	3b30      	subs	r3, #48	; 0x30
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb fa9b 	bl	8000524 <__aeabi_i2d>
 8004fee:	a3e6      	add	r3, pc, #920	; (adr r3, 8005388 <TaskGPS+0x460>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fb00 	bl	80005f8 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb f944 	bl	800028c <__adddf3>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4690      	mov	r8, r2
 800500a:	4699      	mov	r9, r3
								+ (RxI[22] - 48) * pow(10, 4)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	3316      	adds	r3, #22
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	3b30      	subs	r3, #48	; 0x30
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb fa85 	bl	8000524 <__aeabi_i2d>
 800501a:	a3dd      	add	r3, pc, #884	; (adr r3, 8005390 <TaskGPS+0x468>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb faea 	bl	80005f8 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4640      	mov	r0, r8
 800502a:	4649      	mov	r1, r9
 800502c:	f7fb f92e 	bl	800028c <__adddf3>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4690      	mov	r8, r2
 8005036:	4699      	mov	r9, r3
								+ (RxI[23] - 48) * pow(10, 3)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	3317      	adds	r3, #23
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	3b30      	subs	r3, #48	; 0x30
 8005040:	4618      	mov	r0, r3
 8005042:	f7fb fa6f 	bl	8000524 <__aeabi_i2d>
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	4bd3      	ldr	r3, [pc, #844]	; (8005398 <TaskGPS+0x470>)
 800504c:	f7fb fad4 	bl	80005f8 <__aeabi_dmul>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4640      	mov	r0, r8
 8005056:	4649      	mov	r1, r9
 8005058:	f7fb f918 	bl	800028c <__adddf3>
 800505c:	4602      	mov	r2, r0
 800505e:	460b      	mov	r3, r1
 8005060:	4690      	mov	r8, r2
 8005062:	4699      	mov	r9, r3
								+ (RxI[24] - 48) * pow(10, 2)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	3318      	adds	r3, #24
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	3b30      	subs	r3, #48	; 0x30
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fa59 	bl	8000524 <__aeabi_i2d>
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	4bc9      	ldr	r3, [pc, #804]	; (800539c <TaskGPS+0x474>)
 8005078:	f7fb fabe 	bl	80005f8 <__aeabi_dmul>
 800507c:	4602      	mov	r2, r0
 800507e:	460b      	mov	r3, r1
 8005080:	4640      	mov	r0, r8
 8005082:	4649      	mov	r1, r9
 8005084:	f7fb f902 	bl	800028c <__adddf3>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4690      	mov	r8, r2
 800508e:	4699      	mov	r9, r3
								+ (RxI[25] - 48) * 10 + RxI[26] - 48) * 0.00001
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3319      	adds	r3, #25
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800509a:	4613      	mov	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	4413      	add	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f7fb fa3e 	bl	8000524 <__aeabi_i2d>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4640      	mov	r0, r8
 80050ae:	4649      	mov	r1, r9
 80050b0:	f7fb f8ec 	bl	800028c <__adddf3>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4690      	mov	r8, r2
 80050ba:	4699      	mov	r9, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	331a      	adds	r3, #26
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fb fa2e 	bl	8000524 <__aeabi_i2d>
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4640      	mov	r0, r8
 80050ce:	4649      	mov	r1, r9
 80050d0:	f7fb f8dc 	bl	800028c <__adddf3>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4610      	mov	r0, r2
 80050da:	4619      	mov	r1, r3
 80050dc:	f04f 0200 	mov.w	r2, #0
 80050e0:	4baf      	ldr	r3, [pc, #700]	; (80053a0 <TaskGPS+0x478>)
 80050e2:	f7fb f8d1 	bl	8000288 <__aeabi_dsub>
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	4610      	mov	r0, r2
 80050ec:	4619      	mov	r1, r3
 80050ee:	a3a2      	add	r3, pc, #648	; (adr r3, 8005378 <TaskGPS+0x450>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb fa80 	bl	80005f8 <__aeabi_dmul>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	4610      	mov	r0, r2
 80050fe:	4619      	mov	r1, r3
								/ 60;
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	4ba7      	ldr	r3, [pc, #668]	; (80053a4 <TaskGPS+0x47c>)
 8005106:	f7fb fba1 	bl	800084c <__aeabi_ddiv>
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
						+ ((RxI[19] - 48) * pow(10, 6)
 800510e:	4620      	mov	r0, r4
 8005110:	4629      	mov	r1, r5
 8005112:	f7fb f8bb 	bl	800028c <__adddf3>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	f7fb fd63 	bl	8000be8 <__aeabi_d2f>
 8005122:	4603      	mov	r3, r0
 8005124:	61fb      	str	r3, [r7, #28]
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	331e      	adds	r3, #30
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	3b30      	subs	r3, #48	; 0x30
 800512e:	4618      	mov	r0, r3
 8005130:	f7fb f9f8 	bl	8000524 <__aeabi_i2d>
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	4b98      	ldr	r3, [pc, #608]	; (800539c <TaskGPS+0x474>)
 800513a:	f7fb fa5d 	bl	80005f8 <__aeabi_dmul>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	4614      	mov	r4, r2
 8005144:	461d      	mov	r5, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	331f      	adds	r3, #31
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	4618      	mov	r0, r3
 800515a:	f7fb f9e3 	bl	8000524 <__aeabi_i2d>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	4620      	mov	r0, r4
 8005164:	4629      	mov	r1, r5
 8005166:	f7fb f891 	bl	800028c <__adddf3>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4614      	mov	r4, r2
 8005170:	461d      	mov	r5, r3
						+ (RxI[32] - 48))
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	3320      	adds	r3, #32
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	3b30      	subs	r3, #48	; 0x30
 800517a:	4618      	mov	r0, r3
 800517c:	f7fb f9d2 	bl	8000524 <__aeabi_i2d>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4620      	mov	r0, r4
 8005186:	4629      	mov	r1, r5
 8005188:	f7fb f880 	bl	800028c <__adddf3>
 800518c:	4602      	mov	r2, r0
 800518e:	460b      	mov	r3, r1
 8005190:	4614      	mov	r4, r2
 8005192:	461d      	mov	r5, r3
						+ ((RxI[33] - 48) * pow(10, 6)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3321      	adds	r3, #33	; 0x21
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	3b30      	subs	r3, #48	; 0x30
 800519c:	4618      	mov	r0, r3
 800519e:	f7fb f9c1 	bl	8000524 <__aeabi_i2d>
 80051a2:	a377      	add	r3, pc, #476	; (adr r3, 8005380 <TaskGPS+0x458>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	f7fb fa26 	bl	80005f8 <__aeabi_dmul>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4690      	mov	r8, r2
 80051b2:	4699      	mov	r9, r3
								+ (RxI[34] - 48) * pow(10, 5)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	3322      	adds	r3, #34	; 0x22
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	3b30      	subs	r3, #48	; 0x30
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fb f9b1 	bl	8000524 <__aeabi_i2d>
 80051c2:	a371      	add	r3, pc, #452	; (adr r3, 8005388 <TaskGPS+0x460>)
 80051c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c8:	f7fb fa16 	bl	80005f8 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	f7fb f85a 	bl	800028c <__adddf3>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4690      	mov	r8, r2
 80051de:	4699      	mov	r9, r3
								+ (RxI[36] - 48) * pow(10, 4)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3324      	adds	r3, #36	; 0x24
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	3b30      	subs	r3, #48	; 0x30
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7fb f99b 	bl	8000524 <__aeabi_i2d>
 80051ee:	a368      	add	r3, pc, #416	; (adr r3, 8005390 <TaskGPS+0x468>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb fa00 	bl	80005f8 <__aeabi_dmul>
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	4640      	mov	r0, r8
 80051fe:	4649      	mov	r1, r9
 8005200:	f7fb f844 	bl	800028c <__adddf3>
 8005204:	4602      	mov	r2, r0
 8005206:	460b      	mov	r3, r1
 8005208:	4690      	mov	r8, r2
 800520a:	4699      	mov	r9, r3
								+ (RxI[37] - 48) * pow(10, 3)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	3325      	adds	r3, #37	; 0x25
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	3b30      	subs	r3, #48	; 0x30
 8005214:	4618      	mov	r0, r3
 8005216:	f7fb f985 	bl	8000524 <__aeabi_i2d>
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	4b5e      	ldr	r3, [pc, #376]	; (8005398 <TaskGPS+0x470>)
 8005220:	f7fb f9ea 	bl	80005f8 <__aeabi_dmul>
 8005224:	4602      	mov	r2, r0
 8005226:	460b      	mov	r3, r1
 8005228:	4640      	mov	r0, r8
 800522a:	4649      	mov	r1, r9
 800522c:	f7fb f82e 	bl	800028c <__adddf3>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4690      	mov	r8, r2
 8005236:	4699      	mov	r9, r3
								+ (RxI[38] - 48) * pow(10, 2)
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	3326      	adds	r3, #38	; 0x26
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	3b30      	subs	r3, #48	; 0x30
 8005240:	4618      	mov	r0, r3
 8005242:	f7fb f96f 	bl	8000524 <__aeabi_i2d>
 8005246:	f04f 0200 	mov.w	r2, #0
 800524a:	4b54      	ldr	r3, [pc, #336]	; (800539c <TaskGPS+0x474>)
 800524c:	f7fb f9d4 	bl	80005f8 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	4640      	mov	r0, r8
 8005256:	4649      	mov	r1, r9
 8005258:	f7fb f818 	bl	800028c <__adddf3>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4690      	mov	r8, r2
 8005262:	4699      	mov	r9, r3
								+ (RxI[39] - 48) * 10 + RxI[40] - 48) * 0.00001
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3327      	adds	r3, #39	; 0x27
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800526e:	4613      	mov	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4413      	add	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4618      	mov	r0, r3
 8005278:	f7fb f954 	bl	8000524 <__aeabi_i2d>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	f7fb f802 	bl	800028c <__adddf3>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4690      	mov	r8, r2
 800528e:	4699      	mov	r9, r3
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3328      	adds	r3, #40	; 0x28
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	4618      	mov	r0, r3
 8005298:	f7fb f944 	bl	8000524 <__aeabi_i2d>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fa fff2 	bl	800028c <__adddf3>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4610      	mov	r0, r2
 80052ae:	4619      	mov	r1, r3
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	4b3a      	ldr	r3, [pc, #232]	; (80053a0 <TaskGPS+0x478>)
 80052b6:	f7fa ffe7 	bl	8000288 <__aeabi_dsub>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4610      	mov	r0, r2
 80052c0:	4619      	mov	r1, r3
 80052c2:	a32d      	add	r3, pc, #180	; (adr r3, 8005378 <TaskGPS+0x450>)
 80052c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c8:	f7fb f996 	bl	80005f8 <__aeabi_dmul>
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4610      	mov	r0, r2
 80052d2:	4619      	mov	r1, r3
								/ 60;
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <TaskGPS+0x47c>)
 80052da:	f7fb fab7 	bl	800084c <__aeabi_ddiv>
 80052de:	4602      	mov	r2, r0
 80052e0:	460b      	mov	r3, r1
						+ ((RxI[33] - 48) * pow(10, 6)
 80052e2:	4620      	mov	r0, r4
 80052e4:	4629      	mov	r1, r5
 80052e6:	f7fa ffd1 	bl	800028c <__adddf3>
 80052ea:	4602      	mov	r2, r0
 80052ec:	460b      	mov	r3, r1
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	f7fb fc79 	bl	8000be8 <__aeabi_d2f>
 80052f6:	4603      	mov	r3, r0
 80052f8:	61bb      	str	r3, [r7, #24]
				if (RxI[28] == 'S')
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	331c      	adds	r3, #28
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b53      	cmp	r3, #83	; 0x53
 8005302:	d105      	bne.n	8005310 <TaskGPS+0x3e8>
				{
					lati = -lati;
 8005304:	edd7 7a07 	vldr	s15, [r7, #28]
 8005308:	eef1 7a67 	vneg.f32	s15, s15
 800530c:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				if (RxI[42] == 'W')
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	332a      	adds	r3, #42	; 0x2a
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b57      	cmp	r3, #87	; 0x57
 8005318:	d105      	bne.n	8005326 <TaskGPS+0x3fe>
				{
					longi = -longi;
 800531a:	edd7 7a06 	vldr	s15, [r7, #24]
 800531e:	eef1 7a67 	vneg.f32	s15, s15
 8005322:	edc7 7a06 	vstr	s15, [r7, #24]
				}
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 8005326:	edd7 7a07 	vldr	s15, [r7, #28]
 800532a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80053a8 <TaskGPS+0x480>
 800532e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	dc00      	bgt.n	800533a <TaskGPS+0x412>
				}
			}
			//	}
		}
	}
}
 8005338:	e08a      	b.n	8005450 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 800533a:	edd7 7a07 	vldr	s15, [r7, #28]
 800533e:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80053ac <TaskGPS+0x484>
 8005342:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800534a:	d400      	bmi.n	800534e <TaskGPS+0x426>
}
 800534c:	e080      	b.n	8005450 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 800534e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005352:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8005356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535e:	dc00      	bgt.n	8005362 <TaskGPS+0x43a>
}
 8005360:	e076      	b.n	8005450 <TaskGPS+0x528>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 8005362:	edd7 7a06 	vldr	s15, [r7, #24]
 8005366:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800536a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800536e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005372:	d41d      	bmi.n	80053b0 <TaskGPS+0x488>
}
 8005374:	e06c      	b.n	8005450 <TaskGPS+0x528>
 8005376:	bf00      	nop
 8005378:	88e368f1 	.word	0x88e368f1
 800537c:	3ee4f8b5 	.word	0x3ee4f8b5
 8005380:	00000000 	.word	0x00000000
 8005384:	412e8480 	.word	0x412e8480
 8005388:	00000000 	.word	0x00000000
 800538c:	40f86a00 	.word	0x40f86a00
 8005390:	00000000 	.word	0x00000000
 8005394:	40c38800 	.word	0x40c38800
 8005398:	408f4000 	.word	0x408f4000
 800539c:	40590000 	.word	0x40590000
 80053a0:	40480000 	.word	0x40480000
 80053a4:	404e0000 	.word	0x404e0000
 80053a8:	420c0000 	.word	0x420c0000
 80053ac:	42700000 	.word	0x42700000
					int sat = 0;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
					if (RxI[46] >= '0' && RxI[46] <= '9' && RxI[47] >= '0'
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	332e      	adds	r3, #46	; 0x2e
 80053b8:	781b      	ldrb	r3, [r3, #0]
 80053ba:	2b2f      	cmp	r3, #47	; 0x2f
 80053bc:	d921      	bls.n	8005402 <TaskGPS+0x4da>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	332e      	adds	r3, #46	; 0x2e
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b39      	cmp	r3, #57	; 0x39
 80053c6:	d81c      	bhi.n	8005402 <TaskGPS+0x4da>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	332f      	adds	r3, #47	; 0x2f
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b2f      	cmp	r3, #47	; 0x2f
 80053d0:	d917      	bls.n	8005402 <TaskGPS+0x4da>
							&& RxI[47] <= '9')
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	332f      	adds	r3, #47	; 0x2f
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b39      	cmp	r3, #57	; 0x39
 80053da:	d812      	bhi.n	8005402 <TaskGPS+0x4da>
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	332e      	adds	r3, #46	; 0x2e
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80053e6:	4613      	mov	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	4413      	add	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	461a      	mov	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	332f      	adds	r3, #47	; 0x2f
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	441a      	add	r2, r3
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
								- '0';
 80053fe:	3a30      	subs	r2, #48	; 0x30
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 8005400:	601a      	str	r2, [r3, #0]
					TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick();
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f103 0408 	add.w	r4, r3, #8
 8005408:	f004 ffd8 	bl	800a3bc <HAL_GetTick>
 800540c:	4603      	mov	r3, r0
 800540e:	6023      	str	r3, [r4, #0]
					TabFloatValue[LATI] = lati;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3314      	adds	r3, #20
 8005414:	69fa      	ldr	r2, [r7, #28]
 8005416:	601a      	str	r2, [r3, #0]
					TabFloatValue[LONGI] = longi;
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3318      	adds	r3, #24
 800541c:	69ba      	ldr	r2, [r7, #24]
 800541e:	601a      	str	r2, [r3, #0]
					TabGen[STATUT_GPS] = 1;
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	33a0      	adds	r3, #160	; 0xa0
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]
					if (TabGen[GPS_GOOD] == 0)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	33e4      	adds	r3, #228	; 0xe4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10e      	bne.n	8005450 <TaskGPS+0x528>
						TabGpsTimer[GPS_FIRST_START] = HAL_GetTick();//- (GPSDURA * 60 * 1000) + (GPSSTOP * 60 * 1000) ;  //LAST CHANGE 18h10-07/10
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	1d1c      	adds	r4, r3, #4
 8005436:	f004 ffc1 	bl	800a3bc <HAL_GetTick>
 800543a:	4603      	mov	r3, r0
 800543c:	6023      	str	r3, [r4, #0]
						TabGen[GPS_GOOD] = 1;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	33e4      	adds	r3, #228	; 0xe4
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
						TabGen[GPS_DURATION] = 1;
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
}
 8005450:	bf00      	nop
 8005452:	3720      	adds	r7, #32
 8005454:	46bd      	mov	sp, r7
 8005456:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800545a:	bf00      	nop

0800545c <TaskSendSigfox>:
extern IWDG_HandleTypeDef hiwdg;

//Sigfox to antenna
void TaskSendSigfox(int TabGen[], float TabFloatValue[], uint32_t TabTimer[],
		char WifiName[])
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08e      	sub	sp, #56	; 0x38
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
 8005468:	603b      	str	r3, [r7, #0]
	char bufferSig[40];

	if ((SIGFOXOK == 1) && (TabGen[SIGFOX_SEND] == 1))
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	3324      	adds	r3, #36	; 0x24
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d14e      	bne.n	8005512 <TaskSendSigfox+0xb6>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8005474:	4829      	ldr	r0, [pc, #164]	; (800551c <TaskSendSigfox+0xc0>)
 8005476:	f006 ff00 	bl	800c27a <HAL_IWDG_Refresh>
		RebootNemeusLS(TabGen); // Override duty cycle limitation, must wait 9 min before sending another message
 800547a:	68f8      	ldr	r0, [r7, #12]
 800547c:	f7fe fc7a 	bl	8003d74 <RebootNemeusLS>

		TabGen[RE_ON_SCREEN] = 1;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	3350      	adds	r3, #80	; 0x50
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]

		display_SendMess();
 8005488:	f7fc fd7e 	bl	8001f88 <display_SendMess>
		SigfoxOn();
 800548c:	f7fe fca8 	bl	8003de0 <SigfoxOn>

		OutBuzOff();
 8005490:	f7fe f87c 	bl	800358c <OutBuzOff>
		OutMotorWu(0);
 8005494:	2000      	movs	r0, #0
 8005496:	f7fe f811 	bl	80034bc <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2200      	movs	r2, #0
 800549e:	2100      	movs	r1, #0
 80054a0:	2000      	movs	r0, #0
 80054a2:	f7fe fb69 	bl	8003b78 <LedOn>
		if (WIFI == 1)
			BuildMessWifi(bufferSig, TabGen, TabFloatValue, TabTimer, WifiName);
		else
			BuildMessGPS(bufferSig, TabGen, TabFloatValue, TabTimer);
 80054a6:	f107 0010 	add.w	r0, r7, #16
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	68f9      	ldr	r1, [r7, #12]
 80054b0:	f7fe fd16 	bl	8003ee0 <BuildMessGPS>

		HAL_IWDG_Refresh(&hiwdg);
 80054b4:	4819      	ldr	r0, [pc, #100]	; (800551c <TaskSendSigfox+0xc0>)
 80054b6:	f006 fee0 	bl	800c27a <HAL_IWDG_Refresh>

		SendMessSigfox(bufferSig, TabGen);
 80054ba:	f107 0310 	add.w	r3, r7, #16
 80054be:	68f9      	ldr	r1, [r7, #12]
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe fca9 	bl	8003e18 <SendMessSigfox>

		HAL_Delay(5000);
 80054c6:	f241 3088 	movw	r0, #5000	; 0x1388
 80054ca:	f004 ff83 	bl	800a3d4 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80054ce:	4813      	ldr	r0, [pc, #76]	; (800551c <TaskSendSigfox+0xc0>)
 80054d0:	f006 fed3 	bl	800c27a <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80054d4:	f241 3088 	movw	r0, #5000	; 0x1388
 80054d8:	f004 ff7c 	bl	800a3d4 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80054dc:	480f      	ldr	r0, [pc, #60]	; (800551c <TaskSendSigfox+0xc0>)
 80054de:	f006 fecc 	bl	800c27a <HAL_IWDG_Refresh>

		TabGen[SIGFOX_SEND] = 0;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3324      	adds	r3, #36	; 0x24
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
		TabGen[LORA_SEND] = 0;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		TabGen[ID_ALERT] = 0;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f503 738a 	add.w	r3, r3, #276	; 0x114
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_PENDING] = 0;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
		RebootNemeusLS(TabGen);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f7fe fc33 	bl	8003d74 <RebootNemeusLS>
		SigfoxOn();
 800550e:	f7fe fc67 	bl	8003de0 <SigfoxOn>
	}
}
 8005512:	bf00      	nop
 8005514:	3738      	adds	r7, #56	; 0x38
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20001d7c 	.word	0x20001d7c

08005520 <TaskSendDUAL>:

//Sigfox to antenna
void TaskSendDUAL(int TabGen[], float TabFloatValue[], uint32_t TabTimer[],
		char WifiName[])
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08e      	sub	sp, #56	; 0x38
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
 800552c:	603b      	str	r3, [r7, #0]
	char bufferDual[40];

	if (TabGen[DUAL_SEND] == 1)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d177      	bne.n	800562a <TaskSendDUAL+0x10a>
	{
		srand(HAL_GetTick());
 800553a:	f004 ff3f 	bl	800a3bc <HAL_GetTick>
 800553e:	4603      	mov	r3, r0
 8005540:	4618      	mov	r0, r3
 8005542:	f011 fda1 	bl	8017088 <srand>
		TabGen[ID_ALERT] = (rand() % 98) + 1;
 8005546:	f011 fdcd 	bl	80170e4 <rand>
 800554a:	4602      	mov	r2, r0
 800554c:	4b39      	ldr	r3, [pc, #228]	; (8005634 <TaskSendDUAL+0x114>)
 800554e:	fb83 1302 	smull	r1, r3, r3, r2
 8005552:	1159      	asrs	r1, r3, #5
 8005554:	17d3      	asrs	r3, r2, #31
 8005556:	1acb      	subs	r3, r1, r3
 8005558:	2162      	movs	r1, #98	; 0x62
 800555a:	fb01 f303 	mul.w	r3, r1, r3
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	f502 728a 	add.w	r2, r2, #276	; 0x114
 8005566:	3301      	adds	r3, #1
 8005568:	6013      	str	r3, [r2, #0]
		display_SendMess();
 800556a:	f7fc fd0d 	bl	8001f88 <display_SendMess>
		TabGen[RE_ON_SCREEN] = 1;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	3350      	adds	r3, #80	; 0x50
 8005572:	2201      	movs	r2, #1
 8005574:	601a      	str	r2, [r3, #0]
		OutBuzOff();
 8005576:	f7fe f809 	bl	800358c <OutBuzOff>
		OutMotorWu(0);
 800557a:	2000      	movs	r0, #0
 800557c:	f7fd ff9e 	bl	80034bc <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	2100      	movs	r1, #0
 8005586:	2000      	movs	r0, #0
 8005588:	f7fe faf6 	bl	8003b78 <LedOn>
		if (WIFI == 1)
			BuildMessWifi(bufferDual, TabGen, TabFloatValue, TabTimer,
					WifiName);
		else
			BuildMessGPS(bufferDual, TabGen, TabFloatValue, TabTimer);
 800558c:	f107 0010 	add.w	r0, r7, #16
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	68f9      	ldr	r1, [r7, #12]
 8005596:	f7fe fca3 	bl	8003ee0 <BuildMessGPS>

		SendMessLoraWan(bufferDual);
 800559a:	f107 0310 	add.w	r3, r7, #16
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe fc14 	bl	8003dcc <SendMessLoraWan>
		RebootNemeusLS(TabGen);
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7fe fbe5 	bl	8003d74 <RebootNemeusLS>
		HAL_Delay(5000);
 80055aa:	f241 3088 	movw	r0, #5000	; 0x1388
 80055ae:	f004 ff11 	bl	800a3d4 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80055b2:	4821      	ldr	r0, [pc, #132]	; (8005638 <TaskSendDUAL+0x118>)
 80055b4:	f006 fe61 	bl	800c27a <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80055b8:	f241 3088 	movw	r0, #5000	; 0x1388
 80055bc:	f004 ff0a 	bl	800a3d4 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80055c0:	481d      	ldr	r0, [pc, #116]	; (8005638 <TaskSendDUAL+0x118>)
 80055c2:	f006 fe5a 	bl	800c27a <HAL_IWDG_Refresh>

		RebootNemeusLS(TabGen); // Override duty cycle limitation, must wait 9 min before sending another message
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f7fe fbd4 	bl	8003d74 <RebootNemeusLS>
		SigfoxOn();
 80055cc:	f7fe fc08 	bl	8003de0 <SigfoxOn>

		HAL_IWDG_Refresh(&hiwdg);
 80055d0:	4819      	ldr	r0, [pc, #100]	; (8005638 <TaskSendDUAL+0x118>)
 80055d2:	f006 fe52 	bl	800c27a <HAL_IWDG_Refresh>
		SendMessSigfox(bufferDual, TabGen);
 80055d6:	f107 0310 	add.w	r3, r7, #16
 80055da:	68f9      	ldr	r1, [r7, #12]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe fc1b 	bl	8003e18 <SendMessSigfox>

		HAL_Delay(5000);
 80055e2:	f241 3088 	movw	r0, #5000	; 0x1388
 80055e6:	f004 fef5 	bl	800a3d4 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80055ea:	4813      	ldr	r0, [pc, #76]	; (8005638 <TaskSendDUAL+0x118>)
 80055ec:	f006 fe45 	bl	800c27a <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80055f0:	f241 3088 	movw	r0, #5000	; 0x1388
 80055f4:	f004 feee 	bl	800a3d4 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80055f8:	480f      	ldr	r0, [pc, #60]	; (8005638 <TaskSendDUAL+0x118>)
 80055fa:	f006 fe3e 	bl	800c27a <HAL_IWDG_Refresh>

		TabGen[DUAL_SEND] = 0;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005604:	2200      	movs	r2, #0
 8005606:	601a      	str	r2, [r3, #0]
		TabGen[ID_ALERT] = 0;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_PENDING] = 0;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]
		RebootNemeusLS(TabGen);
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f7fe fba9 	bl	8003d74 <RebootNemeusLS>
		SigfoxOn();
 8005622:	f7fe fbdd 	bl	8003de0 <SigfoxOn>
		LoraWanOn();
 8005626:	f7fe fbc3 	bl	8003db0 <LoraWanOn>
	}
}
 800562a:	bf00      	nop
 800562c:	3738      	adds	r7, #56	; 0x38
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	5397829d 	.word	0x5397829d
 8005638:	20001d7c 	.word	0x20001d7c

0800563c <TaskButtonManager>:

	}
}

void TaskButtonManager(int TabGen[], int TabAlert[])
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
	//if (TabGen[I_READ_BUTTON] == 10)  // button management
	//{
	if (InOn() == 1)
 8005646:	f7fd ff6b 	bl	8003520 <InOn>
 800564a:	4603      	mov	r3, r0
 800564c:	2b01      	cmp	r3, #1
 800564e:	d12a      	bne.n	80056a6 <TaskButtonManager+0x6a>
	{
		if (TabGen[ALERT_ON] == 0) // EJ : button on to update GPS
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d103      	bne.n	8005660 <TaskButtonManager+0x24>
		{
			TabGen[FORCE_GPS] = 1;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	33f0      	adds	r3, #240	; 0xf0
 800565c:	2201      	movs	r2, #1
 800565e:	601a      	str	r2, [r3, #0]
//					TabGen[STATUT_GPS] = 0 ;
//					TabGen[GPS_GOOD] = 0 ;
		}

		TabGen[RE_ON_SCREEN] = 1;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	3350      	adds	r3, #80	; 0x50
 8005664:	2201      	movs	r2, #1
 8005666:	601a      	str	r2, [r3, #0]
		TabGen[ON_ON] = 1;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3354      	adds	r3, #84	; 0x54
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON]++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3358      	adds	r3, #88	; 0x58
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	3201      	adds	r2, #1
 8005678:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_ON] > (ON_TOUCH * 100))
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	3358      	adds	r3, #88	; 0x58
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2bc8      	cmp	r3, #200	; 0xc8
 8005682:	dd18      	ble.n	80056b6 <TaskButtonManager+0x7a>
		{
			if (TabGen[ALERT_ON] == 1)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d107      	bne.n	800569c <TaskButtonManager+0x60>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3320      	adds	r3, #32
 8005690:	2201      	movs	r2, #1
 8005692:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	333c      	adds	r3, #60	; 0x3c
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
			}
			TabGen[NS_SOS] = 0;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3360      	adds	r3, #96	; 0x60
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	e007      	b.n	80056b6 <TaskButtonManager+0x7a>
		}
	}
	else
	{
		TabGen[ON_ON] = 0;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3354      	adds	r3, #84	; 0x54
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON] = 0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	3358      	adds	r3, #88	; 0x58
 80056b2:	2200      	movs	r2, #0
 80056b4:	601a      	str	r2, [r3, #0]
	}

	if (InSOS() == 1)
 80056b6:	f7fd ff49 	bl	800354c <InSOS>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d140      	bne.n	8005742 <TaskButtonManager+0x106>
	{
		TabGen[FORCE_GPS] = 1;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	33f0      	adds	r3, #240	; 0xf0
 80056c4:	2201      	movs	r2, #1
 80056c6:	601a      	str	r2, [r3, #0]

		TabGen[RE_ON_SCREEN] = 1;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	3350      	adds	r3, #80	; 0x50
 80056cc:	2201      	movs	r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	335c      	adds	r3, #92	; 0x5c
 80056d4:	2201      	movs	r2, #1
 80056d6:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS]++;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3360      	adds	r3, #96	; 0x60
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	3201      	adds	r2, #1
 80056e0:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_SOS] > (SOS_TOUCH))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3360      	adds	r3, #96	; 0x60
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	dd36      	ble.n	800575a <TaskButtonManager+0x11e>
		{
			if (TabGen[ALERT_ON] == 1 && TabGen[SOS_RELEACH] == 1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d110      	bne.n	8005716 <TaskButtonManager+0xda>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	3364      	adds	r3, #100	; 0x64
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d10b      	bne.n	8005716 <TaskButtonManager+0xda>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3320      	adds	r3, #32
 8005702:	2201      	movs	r2, #1
 8005704:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	333c      	adds	r3, #60	; 0x3c
 800570a:	2200      	movs	r2, #0
 800570c:	601a      	str	r2, [r3, #0]
				TabGen[NS_SOS] = 0;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	3360      	adds	r3, #96	; 0x60
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
			}

			if (TabGen[NS_SOS] > (SOS_TOUCH * 100))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	3360      	adds	r3, #96	; 0x60
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b64      	cmp	r3, #100	; 0x64
 800571e:	dd1c      	ble.n	800575a <TaskButtonManager+0x11e>
			{
				if (TabGen[ALERT_ON] == 0)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d118      	bne.n	800575a <TaskButtonManager+0x11e>
				{

					TabAlert[ALERT_SOS] = 1;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	3304      	adds	r3, #4
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]
					TabGen[NS_SOS] = 0;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3360      	adds	r3, #96	; 0x60
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]
					TabGen[SOS_RELEACH] = 0;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	3364      	adds	r3, #100	; 0x64
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
 8005740:	e00b      	b.n	800575a <TaskButtonManager+0x11e>
//				TabGen[NS_SOS] = 0 ;
//			}
	}
	else
	{
		TabGen[SOS_RELEACH] = 1;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	3364      	adds	r3, #100	; 0x64
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 0;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	335c      	adds	r3, #92	; 0x5c
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS] = 0;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	3360      	adds	r3, #96	; 0x60
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
	}
	TabGen[I_READ_BUTTON] = 0;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	334c      	adds	r3, #76	; 0x4c
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]

	if ((TabGen[ON_ON] == 1) || (TabGen[SOS_ON] == 1))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	3354      	adds	r3, #84	; 0x54
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d004      	beq.n	8005776 <TaskButtonManager+0x13a>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	335c      	adds	r3, #92	; 0x5c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d11b      	bne.n	80057ae <TaskButtonManager+0x172>
	{

		if (TabGen[CHARGEC] == 0)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	33ac      	adds	r3, #172	; 0xac
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <TaskButtonManager+0x150>
			LedOn(50, 0, 0, TabGen);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	2100      	movs	r1, #0
 8005786:	2032      	movs	r0, #50	; 0x32
 8005788:	f7fe f9f6 	bl	8003b78 <LedOn>

		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	33ac      	adds	r3, #172	; 0xac
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d117      	bne.n	80057c6 <TaskButtonManager+0x18a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3354      	adds	r3, #84	; 0x54
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d112      	bne.n	80057c6 <TaskButtonManager+0x18a>
			LedOn(50, 0, 0, TabGen);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	2100      	movs	r1, #0
 80057a6:	2032      	movs	r0, #50	; 0x32
 80057a8:	f7fe f9e6 	bl	8003b78 <LedOn>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 80057ac:	e00b      	b.n	80057c6 <TaskButtonManager+0x18a>
	}
	else
	{
		if (TabGen[CHARGEC] == 0)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	33ac      	adds	r3, #172	; 0xac
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d107      	bne.n	80057c8 <TaskButtonManager+0x18c>
			LedOn(0, 0, 0, TabGen);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	2100      	movs	r1, #0
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fe f9da 	bl	8003b78 <LedOn>
	 else
	 {
	 TabGen[I_READ_BUTTON]++ ;
	 }*/

}
 80057c4:	e000      	b.n	80057c8 <TaskButtonManager+0x18c>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 80057c6:	bf00      	nop
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <TaskAlertManager>:

void TaskAlertManager(int TabGen[], int *i_led)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	if (TabGen[ALERT_ON] == 1) // if there is an alert
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d16e      	bne.n	80058c0 <TaskAlertManager+0xf0>
	{
		if ((TabGen[BUZ_ON_FAST] == 1) && (TabGen[LED_ON_FAST] == 1)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	3308      	adds	r3, #8
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d12f      	bne.n	800584c <TaskAlertManager+0x7c>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	330c      	adds	r3, #12
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d12a      	bne.n	800584c <TaskAlertManager+0x7c>
				&& (TabGen[VIB_ON_FAST] == 1)) // fast vibration, blinking, and noise mode
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	3310      	adds	r3, #16
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d125      	bne.n	800584c <TaskAlertManager+0x7c>
		{
			if (*i_led == 1)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <TaskAlertManager+0x44>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	22c8      	movs	r2, #200	; 0xc8
 800580c:	21c8      	movs	r1, #200	; 0xc8
 800580e:	20fa      	movs	r0, #250	; 0xfa
 8005810:	f7fe f9b2 	bl	8003b78 <LedOn>
#ifndef debug_sound_vibration
				OutBuzOn();			// buzzer on  // EJ : stop sound for debug
				OutMotorWu(1);				// vibration on
#endif
			}
			if (*i_led == 10)   // after 100 ms
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2b0a      	cmp	r3, #10
 800581a:	d10a      	bne.n	8005832 <TaskAlertManager+0x62>
			{
				LedOn(0, 0, 0, TabGen); // turn led off
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	2100      	movs	r1, #0
 8005822:	2000      	movs	r0, #0
 8005824:	f7fe f9a8 	bl	8003b78 <LedOn>
				OutBuzOff();		// buzzer off
 8005828:	f7fd feb0 	bl	800358c <OutBuzOff>
				OutMotorWu(0);	// vibration on
 800582c:	2000      	movs	r0, #0
 800582e:	f7fd fe45 	bl	80034bc <OutMotorWu>
			}
			if (*i_led == 100) // every 1 sec
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b64      	cmp	r3, #100	; 0x64
 8005838:	d102      	bne.n	8005840 <TaskAlertManager+0x70>
			{
				*i_led = 0;     // restart
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	1c5a      	adds	r2, r3, #1
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e039      	b.n	80058c0 <TaskAlertManager+0xf0>
		}
		else if ((TabGen[BUZ_ON_SLOW] == 1) && (TabGen[LED_ON_SLOW] == 1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3314      	adds	r3, #20
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d134      	bne.n	80058c0 <TaskAlertManager+0xf0>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	3318      	adds	r3, #24
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b01      	cmp	r3, #1
 800585e:	d12f      	bne.n	80058c0 <TaskAlertManager+0xf0>
				&& (TabGen[VIB_ON_SLOW] == 1)) // slow vibration, blinking, and noise mode
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	331c      	adds	r3, #28
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d12a      	bne.n	80058c0 <TaskAlertManager+0xf0>
		{
			if (*i_led == 1)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d10a      	bne.n	8005888 <TaskAlertManager+0xb8>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	22c8      	movs	r2, #200	; 0xc8
 8005876:	21c8      	movs	r1, #200	; 0xc8
 8005878:	20fa      	movs	r0, #250	; 0xfa
 800587a:	f7fe f97d 	bl	8003b78 <LedOn>
				OutBuzOn();						// buzzer on
 800587e:	f7fd fe7b 	bl	8003578 <OutBuzOn>
				OutMotorWu(1);				// vibration on
 8005882:	2001      	movs	r0, #1
 8005884:	f7fd fe1a 	bl	80034bc <OutMotorWu>
			}
			if (*i_led == 10) 		// after 100 ms
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b0a      	cmp	r3, #10
 800588e:	d10a      	bne.n	80058a6 <TaskAlertManager+0xd6>
			{
				LedOn(0, 0, 0, TabGen); 	// turn led off
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	2100      	movs	r1, #0
 8005896:	2000      	movs	r0, #0
 8005898:	f7fe f96e 	bl	8003b78 <LedOn>
				OutBuzOff();			// buzzer off
 800589c:	f7fd fe76 	bl	800358c <OutBuzOff>
				OutMotorWu(0);		// vibration off
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7fd fe0b 	bl	80034bc <OutMotorWu>
			}
			if (*i_led == 1000) 	// every 10 sec
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ae:	d102      	bne.n	80058b6 <TaskAlertManager+0xe6>
			{
				*i_led = 0; 			// restart
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	601a      	str	r2, [r3, #0]
		}
	}
	if ((TabGen[ALERT_ON_PREVIOUS] == 1) && (TabGen[ALERT_ON] == 0))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3348      	adds	r3, #72	; 0x48
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d12a      	bne.n	8005920 <TaskAlertManager+0x150>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d126      	bne.n	8005920 <TaskAlertManager+0x150>
	{
		LedOn(0, 0, 0, TabGen);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2100      	movs	r1, #0
 80058d8:	2000      	movs	r0, #0
 80058da:	f7fe f94d 	bl	8003b78 <LedOn>
		OutBuzOff();
 80058de:	f7fd fe55 	bl	800358c <OutBuzOff>
		OutMotorWu(0);
 80058e2:	2000      	movs	r0, #0
 80058e4:	f7fd fdea 	bl	80034bc <OutMotorWu>
		TabGen[ALERT_ON_PREVIOUS] = 0;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3348      	adds	r3, #72	; 0x48
 80058ec:	2200      	movs	r2, #0
 80058ee:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3368      	adds	r3, #104	; 0x68
 80058f4:	2200      	movs	r2, #0
 80058f6:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	336c      	adds	r3, #108	; 0x6c
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	3370      	adds	r3, #112	; 0x70
 8005904:	2200      	movs	r2, #0
 8005906:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	3374      	adds	r3, #116	; 0x74
 800590c:	2201      	movs	r2, #1
 800590e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	3378      	adds	r3, #120	; 0x78
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	337c      	adds	r3, #124	; 0x7c
 800591c:	2200      	movs	r2, #0
 800591e:	601a      	str	r2, [r3, #0]

	}

	if ((TabGen[ALERT_ON_PREVIOUS] == 0) && (TabGen[ALERT_ON] == 1))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3348      	adds	r3, #72	; 0x48
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d11f      	bne.n	800596a <TaskAlertManager+0x19a>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d11b      	bne.n	800596a <TaskAlertManager+0x19a>
	{
		TabGen[ALERT_ON_PREVIOUS] = 1;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	3348      	adds	r3, #72	; 0x48
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3368      	adds	r3, #104	; 0x68
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	336c      	adds	r3, #108	; 0x6c
 8005946:	2200      	movs	r2, #0
 8005948:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	3370      	adds	r3, #112	; 0x70
 800594e:	2200      	movs	r2, #0
 8005950:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3374      	adds	r3, #116	; 0x74
 8005956:	2201      	movs	r2, #1
 8005958:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	3378      	adds	r3, #120	; 0x78
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	337c      	adds	r3, #124	; 0x7c
 8005966:	2200      	movs	r2, #0
 8005968:	601a      	str	r2, [r3, #0]
	}
}
 800596a:	bf00      	nop
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <TaskFallManager>:

void TaskFallManager(uint16_t ar[], uint8_t y[], uint16_t accres, uint8_t accy,
		int TabGen[])
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	4611      	mov	r1, r2
 8005980:	461a      	mov	r2, r3
 8005982:	460b      	mov	r3, r1
 8005984:	80fb      	strh	r3, [r7, #6]
 8005986:	4613      	mov	r3, r2
 8005988:	717b      	strb	r3, [r7, #5]
	uint16_t i_full;

	if (TabGen[FALL_IND_1] < 200 && TabGen[FALL_COND_2])
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	3368      	adds	r3, #104	; 0x68
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	2bc7      	cmp	r3, #199	; 0xc7
 8005992:	dc19      	bgt.n	80059c8 <TaskFallManager+0x54>
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	3374      	adds	r3, #116	; 0x74
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d014      	beq.n	80059c8 <TaskFallManager+0x54>
	{ // teste2 est initialis� en true ce if s'execute une seule fois pour remplie les 200 premiers elements du tableau
		ar[TabGen[FALL_IND_1]] = accres;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	3368      	adds	r3, #104	; 0x68
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	005b      	lsls	r3, r3, #1
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	88fa      	ldrh	r2, [r7, #6]
 80059ac:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	3368      	adds	r3, #104	; 0x68
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	461a      	mov	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4413      	add	r3, r2
 80059ba:	797a      	ldrb	r2, [r7, #5]
 80059bc:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	3368      	adds	r3, #104	; 0x68
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	3201      	adds	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]
	}

	if ((TabGen[FALL_IND_1] == 200) && (TabGen[FALL_COND_2]))
 80059c8:	6a3b      	ldr	r3, [r7, #32]
 80059ca:	3368      	adds	r3, #104	; 0x68
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2bc8      	cmp	r3, #200	; 0xc8
 80059d0:	d10c      	bne.n	80059ec <TaskFallManager+0x78>
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	3374      	adds	r3, #116	; 0x74
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d007      	beq.n	80059ec <TaskFallManager+0x78>
	{ // lorsque les 2OO premieres elements sont remplis dans le 1er tableau la valeur de test2 sera false donc le 1er if ne devient plus activ�
		TabGen[FALL_COND_1] = 1; //la variable test va nous permettre de savoir que les 200 premiers element du tableau sont bien remplis
 80059dc:	6a3b      	ldr	r3, [r7, #32]
 80059de:	3370      	adds	r3, #112	; 0x70
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 0;
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	3374      	adds	r3, #116	; 0x74
 80059e8:	2200      	movs	r2, #0
 80059ea:	601a      	str	r2, [r3, #0]
	}

	// notez bien que les 2 tableaux sont d�phas� dans le temps par 2s.
	if (TabGen[FALL_COND_1] && 200 <= TabGen[FALL_IND_1]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	3370      	adds	r3, #112	; 0x70
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d06f      	beq.n	8005ad6 <TaskFallManager+0x162>
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	3368      	adds	r3, #104	; 0x68
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2bc7      	cmp	r3, #199	; 0xc7
 80059fe:	dd6a      	ble.n	8005ad6 <TaskFallManager+0x162>
			&& TabGen[FALL_IND_1] <= 399 && 0 <= TabGen[FALL_IND_2]
 8005a00:	6a3b      	ldr	r3, [r7, #32]
 8005a02:	3368      	adds	r3, #104	; 0x68
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005a0a:	da64      	bge.n	8005ad6 <TaskFallManager+0x162>
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	336c      	adds	r3, #108	; 0x6c
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	db5f      	blt.n	8005ad6 <TaskFallManager+0x162>
			&& TabGen[FALL_IND_2] <= 199)
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	336c      	adds	r3, #108	; 0x6c
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2bc7      	cmp	r3, #199	; 0xc7
 8005a1e:	dc5a      	bgt.n	8005ad6 <TaskFallManager+0x162>
	{ // cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		ar[TabGen[FALL_IND_1]] = accres;
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	3368      	adds	r3, #104	; 0x68
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	88fa      	ldrh	r2, [r7, #6]
 8005a2e:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	3368      	adds	r3, #104	; 0x68
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	797a      	ldrb	r2, [r7, #5]
 8005a3e:	701a      	strb	r2, [r3, #0]
		arr[TabGen[FALL_IND_2]] = ar[TabGen[FALL_IND_1]];
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	3368      	adds	r3, #104	; 0x68
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	441a      	add	r2, r3
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	336c      	adds	r3, #108	; 0x6c
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	8811      	ldrh	r1, [r2, #0]
 8005a54:	4a5b      	ldr	r2, [pc, #364]	; (8005bc4 <TaskFallManager+0x250>)
 8005a56:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = y[TabGen[FALL_IND_1]];
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	3368      	adds	r3, #104	; 0x68
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	441a      	add	r2, r3
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	336c      	adds	r3, #108	; 0x6c
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	7811      	ldrb	r1, [r2, #0]
 8005a6e:	4a56      	ldr	r2, [pc, #344]	; (8005bc8 <TaskFallManager+0x254>)
 8005a70:	54d1      	strb	r1, [r2, r3]
		TabGen[FALL_IND_2]++;
 8005a72:	6a3b      	ldr	r3, [r7, #32]
 8005a74:	336c      	adds	r3, #108	; 0x6c
 8005a76:	681a      	ldr	r2, [r3, #0]
 8005a78:	3201      	adds	r2, #1
 8005a7a:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	3368      	adds	r3, #104	; 0x68
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	3201      	adds	r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_1] == 400)
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	3368      	adds	r3, #104	; 0x68
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005a90:	d121      	bne.n	8005ad6 <TaskFallManager+0x162>
		{
			for (i_full = 0; i_full < 400; i_full++)
 8005a92:	2300      	movs	r3, #0
 8005a94:	82fb      	strh	r3, [r7, #22]
 8005a96:	e012      	b.n	8005abe <TaskFallManager+0x14a>
			{
				ar_full[i_full] = ar[i_full];
 8005a98:	8afb      	ldrh	r3, [r7, #22]
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	441a      	add	r2, r3
 8005aa0:	8afb      	ldrh	r3, [r7, #22]
 8005aa2:	8811      	ldrh	r1, [r2, #0]
 8005aa4:	4a49      	ldr	r2, [pc, #292]	; (8005bcc <TaskFallManager+0x258>)
 8005aa6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = y[i_full];
 8005aaa:	8afb      	ldrh	r3, [r7, #22]
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	441a      	add	r2, r3
 8005ab0:	8afb      	ldrh	r3, [r7, #22]
 8005ab2:	7811      	ldrb	r1, [r2, #0]
 8005ab4:	4a46      	ldr	r2, [pc, #280]	; (8005bd0 <TaskFallManager+0x25c>)
 8005ab6:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 8005ab8:	8afb      	ldrh	r3, [r7, #22]
 8005aba:	3301      	adds	r3, #1
 8005abc:	82fb      	strh	r3, [r7, #22]
 8005abe:	8afb      	ldrh	r3, [r7, #22]
 8005ac0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005ac4:	d3e8      	bcc.n	8005a98 <TaskFallManager+0x124>
			}
			TabGen[FALL_IND_1] = 0;
 8005ac6:	6a3b      	ldr	r3, [r7, #32]
 8005ac8:	3368      	adds	r3, #104	; 0x68
 8005aca:	2200      	movs	r2, #0
 8005acc:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_3] = 1;
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	3378      	adds	r3, #120	; 0x78
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
		}
	}

	if (TabGen[FALL_COND_1] && 0 <= TabGen[FALL_IND_1]
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	3370      	adds	r3, #112	; 0x70
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d06a      	beq.n	8005bb6 <TaskFallManager+0x242>
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	3368      	adds	r3, #104	; 0x68
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db65      	blt.n	8005bb6 <TaskFallManager+0x242>
			&& TabGen[FALL_IND_1] <= 199 && 200 <= TabGen[FALL_IND_2]
 8005aea:	6a3b      	ldr	r3, [r7, #32]
 8005aec:	3368      	adds	r3, #104	; 0x68
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2bc7      	cmp	r3, #199	; 0xc7
 8005af2:	dc60      	bgt.n	8005bb6 <TaskFallManager+0x242>
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	336c      	adds	r3, #108	; 0x6c
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2bc7      	cmp	r3, #199	; 0xc7
 8005afc:	dd5b      	ble.n	8005bb6 <TaskFallManager+0x242>
			&& TabGen[FALL_IND_2] <= 399)
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	336c      	adds	r3, #108	; 0x6c
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005b08:	da55      	bge.n	8005bb6 <TaskFallManager+0x242>
	{ //	cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		arr[TabGen[FALL_IND_2]] = accres;
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	336c      	adds	r3, #108	; 0x6c
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	492c      	ldr	r1, [pc, #176]	; (8005bc4 <TaskFallManager+0x250>)
 8005b12:	88fa      	ldrh	r2, [r7, #6]
 8005b14:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = accy;
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	336c      	adds	r3, #108	; 0x6c
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	492a      	ldr	r1, [pc, #168]	; (8005bc8 <TaskFallManager+0x254>)
 8005b20:	797a      	ldrb	r2, [r7, #5]
 8005b22:	54ca      	strb	r2, [r1, r3]
		ar[TabGen[FALL_IND_1]] = arr[TabGen[FALL_IND_2]];
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	336c      	adds	r3, #108	; 0x6c
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	3368      	adds	r3, #104	; 0x68
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	005b      	lsls	r3, r3, #1
 8005b32:	68f9      	ldr	r1, [r7, #12]
 8005b34:	440b      	add	r3, r1
 8005b36:	4923      	ldr	r1, [pc, #140]	; (8005bc4 <TaskFallManager+0x250>)
 8005b38:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8005b3c:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = yy[TabGen[FALL_IND_2]];
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	336c      	adds	r3, #108	; 0x6c
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	3368      	adds	r3, #104	; 0x68
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	440b      	add	r3, r1
 8005b50:	491d      	ldr	r1, [pc, #116]	; (8005bc8 <TaskFallManager+0x254>)
 8005b52:	5c8a      	ldrb	r2, [r1, r2]
 8005b54:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_2]++;
 8005b56:	6a3b      	ldr	r3, [r7, #32]
 8005b58:	336c      	adds	r3, #108	; 0x6c
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	3201      	adds	r2, #1
 8005b5e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	3368      	adds	r3, #104	; 0x68
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	3201      	adds	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_2] == 400)
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	336c      	adds	r3, #108	; 0x6c
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005b74:	d11f      	bne.n	8005bb6 <TaskFallManager+0x242>
		{
			for (i_full = 0; i_full < 400; i_full++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	82fb      	strh	r3, [r7, #22]
 8005b7a:	e010      	b.n	8005b9e <TaskFallManager+0x22a>
			{
				ar_full[i_full] = arr[i_full];
 8005b7c:	8afa      	ldrh	r2, [r7, #22]
 8005b7e:	8afb      	ldrh	r3, [r7, #22]
 8005b80:	4910      	ldr	r1, [pc, #64]	; (8005bc4 <TaskFallManager+0x250>)
 8005b82:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8005b86:	4a11      	ldr	r2, [pc, #68]	; (8005bcc <TaskFallManager+0x258>)
 8005b88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = yy[i_full];
 8005b8c:	8afa      	ldrh	r2, [r7, #22]
 8005b8e:	8afb      	ldrh	r3, [r7, #22]
 8005b90:	490d      	ldr	r1, [pc, #52]	; (8005bc8 <TaskFallManager+0x254>)
 8005b92:	5c89      	ldrb	r1, [r1, r2]
 8005b94:	4a0e      	ldr	r2, [pc, #56]	; (8005bd0 <TaskFallManager+0x25c>)
 8005b96:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 8005b98:	8afb      	ldrh	r3, [r7, #22]
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	82fb      	strh	r3, [r7, #22]
 8005b9e:	8afb      	ldrh	r3, [r7, #22]
 8005ba0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005ba4:	d3ea      	bcc.n	8005b7c <TaskFallManager+0x208>
			}
			TabGen[FALL_IND_2] = 0;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	336c      	adds	r3, #108	; 0x6c
 8005baa:	2200      	movs	r2, #0
 8005bac:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_4] = 1;
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	337c      	adds	r3, #124	; 0x7c
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
		}
	}
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	200021b0 	.word	0x200021b0
 8005bc8:	20002ee8 	.word	0x20002ee8
 8005bcc:	20002828 	.word	0x20002828
 8005bd0:	200030b8 	.word	0x200030b8

08005bd4 <Task_Read_Nemeus>:
extern uint32_t time_network_rep;
extern uint8_t network_state;
extern uint8_t DUAL_STATE_LS;

void Task_Read_Nemeus(void)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
// SIGFOX
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'S')
 8005bda:	4b55      	ldr	r3, [pc, #340]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b2b      	cmp	r3, #43	; 0x2b
 8005be0:	f040 80db 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
 8005be4:	4b52      	ldr	r3, [pc, #328]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005be6:	785b      	ldrb	r3, [r3, #1]
 8005be8:	2b53      	cmp	r3, #83	; 0x53
 8005bea:	f040 80d6 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[2] == 'F') && (Rx_bufferNemeus[3] == ':')
 8005bee:	4b50      	ldr	r3, [pc, #320]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005bf0:	789b      	ldrb	r3, [r3, #2]
 8005bf2:	2b46      	cmp	r3, #70	; 0x46
 8005bf4:	f040 80d1 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
 8005bf8:	4b4d      	ldr	r3, [pc, #308]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005bfa:	78db      	ldrb	r3, [r3, #3]
 8005bfc:	2b3a      	cmp	r3, #58	; 0x3a
 8005bfe:	f040 80cc 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[4] == ' '))
 8005c02:	4b4b      	ldr	r3, [pc, #300]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c04:	791b      	ldrb	r3, [r3, #4]
 8005c06:	2b20      	cmp	r3, #32
 8005c08:	f040 80c7 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
	{
		if ( //
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 8005c0c:	4b48      	ldr	r3, [pc, #288]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c0e:	795b      	ldrb	r3, [r3, #5]
		if ( //
 8005c10:	2b53      	cmp	r3, #83	; 0x53
 8005c12:	d102      	bne.n	8005c1a <Task_Read_Nemeus+0x46>
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 8005c14:	4b46      	ldr	r3, [pc, #280]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c16:	799b      	ldrb	r3, [r3, #6]
 8005c18:	2b4e      	cmp	r3, #78	; 0x4e
		{
			//TabGen[SIGFOX_STATE] = 10;
		}

		if ( //
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 8005c1a:	4b45      	ldr	r3, [pc, #276]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c1c:	795b      	ldrb	r3, [r3, #5]
		if ( //
 8005c1e:	2b52      	cmp	r3, #82	; 0x52
 8005c20:	f040 80bb 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 8005c24:	4b42      	ldr	r3, [pc, #264]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c26:	799b      	ldrb	r3, [r3, #6]
 8005c28:	2b43      	cmp	r3, #67	; 0x43
 8005c2a:	f040 80b6 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[7] == 'V') && (Rx_bufferNemeus[8] == 'B')
 8005c2e:	4b40      	ldr	r3, [pc, #256]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c30:	79db      	ldrb	r3, [r3, #7]
 8005c32:	2b56      	cmp	r3, #86	; 0x56
 8005c34:	f040 80b1 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
 8005c38:	4b3d      	ldr	r3, [pc, #244]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c3a:	7a1b      	ldrb	r3, [r3, #8]
 8005c3c:	2b42      	cmp	r3, #66	; 0x42
 8005c3e:	f040 80ac 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[9] == 'I') && (Rx_bufferNemeus[10] == 'N'))
 8005c42:	4b3b      	ldr	r3, [pc, #236]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c44:	7a5b      	ldrb	r3, [r3, #9]
 8005c46:	2b49      	cmp	r3, #73	; 0x49
 8005c48:	f040 80a7 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
 8005c4c:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c4e:	7a9b      	ldrb	r3, [r3, #10]
 8005c50:	2b4e      	cmp	r3, #78	; 0x4e
 8005c52:	f040 80a2 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
		{
			if (  //
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c58:	7b1b      	ldrb	r3, [r3, #12]
			if (  //
 8005c5a:	2b31      	cmp	r3, #49	; 0x31
 8005c5c:	f040 809d 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 8005c60:	4b33      	ldr	r3, [pc, #204]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c62:	7b5b      	ldrb	r3, [r3, #13]
 8005c64:	2b32      	cmp	r3, #50	; 0x32
 8005c66:	f040 8098 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[14] == '3')
 8005c6a:	4b31      	ldr	r3, [pc, #196]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c6c:	7b9b      	ldrb	r3, [r3, #14]
 8005c6e:	2b33      	cmp	r3, #51	; 0x33
 8005c70:	f040 8093 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[15] == '4'))
 8005c74:	4b2e      	ldr	r3, [pc, #184]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c76:	7bdb      	ldrb	r3, [r3, #15]
 8005c78:	2b34      	cmp	r3, #52	; 0x34
 8005c7a:	f040 808e 	bne.w	8005d9a <Task_Read_Nemeus+0x1c6>
			{
				uint8_t nbcomma = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	73fb      	strb	r3, [r7, #15]
				uint8_t nbchar = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73bb      	strb	r3, [r7, #14]

				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 8005c86:	e00a      	b.n	8005c9e <Task_Read_Nemeus+0xca>
				{
					if (Rx_bufferNemeus[nbchar] == ',')
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	4a29      	ldr	r2, [pc, #164]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005c8c:	5cd3      	ldrb	r3, [r2, r3]
 8005c8e:	2b2c      	cmp	r3, #44	; 0x2c
 8005c90:	d102      	bne.n	8005c98 <Task_Read_Nemeus+0xc4>
						nbcomma++;
 8005c92:	7bfb      	ldrb	r3, [r7, #15]
 8005c94:	3301      	adds	r3, #1
 8005c96:	73fb      	strb	r3, [r7, #15]
					nbchar++;
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	73bb      	strb	r3, [r7, #14]
				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d802      	bhi.n	8005caa <Task_Read_Nemeus+0xd6>
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	2bc8      	cmp	r3, #200	; 0xc8
 8005ca8:	d9ee      	bls.n	8005c88 <Task_Read_Nemeus+0xb4>
				}

				if (Rx_bufferNemeus[nbchar] == '-') // RSSI AVAILABLE
 8005caa:	7bbb      	ldrb	r3, [r7, #14]
 8005cac:	4a20      	ldr	r2, [pc, #128]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005cae:	5cd3      	ldrb	r3, [r2, r3]
 8005cb0:	2b2d      	cmp	r3, #45	; 0x2d
 8005cb2:	d172      	bne.n	8005d9a <Task_Read_Nemeus+0x1c6>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005cb4:	2064      	movs	r0, #100	; 0x64
 8005cb6:	f7fc fd5a 	bl	800276e <PowerVib>
#endif

					if (DUAL_STATE_LS == ACK_SF_PENDING)
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <Task_Read_Nemeus+0x160>)
 8005cbc:	781b      	ldrb	r3, [r3, #0]
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d10a      	bne.n	8005cd8 <Task_Read_Nemeus+0x104>
					{
						//SendOnMessSigfox(1);
						TabTimer[ACK_TIMER] = HAL_GetTick();
 8005cc2:	f004 fb7b 	bl	800a3bc <HAL_GetTick>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <Task_Read_Nemeus+0x164>)
 8005cca:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8005ccc:	4b1b      	ldr	r3, [pc, #108]	; (8005d3c <Task_Read_Nemeus+0x168>)
 8005cce:	2201      	movs	r2, #1
 8005cd0:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 8005cd2:	4b18      	ldr	r3, [pc, #96]	; (8005d34 <Task_Read_Nemeus+0x160>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	701a      	strb	r2, [r3, #0]

					}

					if (DUAL_STATE_LS == ACK_SF_PENDING_2)
 8005cd8:	4b16      	ldr	r3, [pc, #88]	; (8005d34 <Task_Read_Nemeus+0x160>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b06      	cmp	r3, #6
 8005cde:	d10c      	bne.n	8005cfa <Task_Read_Nemeus+0x126>
					{
						TabTimer[ACK_TIMER] = HAL_GetTick();
 8005ce0:	f004 fb6c 	bl	800a3bc <HAL_GetTick>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	4a14      	ldr	r2, [pc, #80]	; (8005d38 <Task_Read_Nemeus+0x164>)
 8005ce8:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <Task_Read_Nemeus+0x168>)
 8005cec:	2201      	movs	r2, #1
 8005cee:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 8005cf0:	4b10      	ldr	r3, [pc, #64]	; (8005d34 <Task_Read_Nemeus+0x160>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]
						LoraWanOn();
 8005cf6:	f7fe f85b 	bl	8003db0 <LoraWanOn>
					}

					//RebootNemeusLS(TabGen);

					if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	3303      	adds	r3, #3
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005d00:	5cd3      	ldrb	r3, [r2, r3]
 8005d02:	2b2e      	cmp	r3, #46	; 0x2e
 8005d04:	d11c      	bne.n	8005d40 <Task_Read_Nemeus+0x16c>
					{
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	4a09      	ldr	r2, [pc, #36]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005d0c:	5cd3      	ldrb	r3, [r2, r3]
 8005d0e:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
								- '0') * 10
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	4619      	mov	r1, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0');
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	3302      	adds	r3, #2
 8005d20:	4a03      	ldr	r2, [pc, #12]	; (8005d30 <Task_Read_Nemeus+0x15c>)
 8005d22:	5cd3      	ldrb	r3, [r2, r3]
 8005d24:	3b30      	subs	r3, #48	; 0x30
 8005d26:	440b      	add	r3, r1
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 8005d28:	4a04      	ldr	r2, [pc, #16]	; (8005d3c <Task_Read_Nemeus+0x168>)
 8005d2a:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8005d2e:	e034      	b.n	8005d9a <Task_Read_Nemeus+0x1c6>
 8005d30:	20002734 	.word	0x20002734
 8005d34:	20000b69 	.word	0x20000b69
 8005d38:	200027fc 	.word	0x200027fc
 8005d3c:	200024d4 	.word	0x200024d4
					}
					else // 3 digits => -XXX.XX
					{
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	3301      	adds	r3, #1
 8005d44:	4a98      	ldr	r2, [pc, #608]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005d46:	5cd3      	ldrb	r3, [r2, r3]
								- '0') * 100
 8005d48:	3b30      	subs	r3, #48	; 0x30
 8005d4a:	2264      	movs	r2, #100	; 0x64
 8005d4c:	fb02 f103 	mul.w	r1, r2, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	3302      	adds	r3, #2
 8005d54:	4a94      	ldr	r2, [pc, #592]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005d56:	5cd3      	ldrb	r3, [r2, r3]
 8005d58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	005b      	lsls	r3, r3, #1
 8005d64:	18ca      	adds	r2, r1, r3
								+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 8005d66:	7bbb      	ldrb	r3, [r7, #14]
 8005d68:	3303      	adds	r3, #3
 8005d6a:	498f      	ldr	r1, [pc, #572]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005d6c:	5ccb      	ldrb	r3, [r1, r3]
 8005d6e:	3b30      	subs	r3, #48	; 0x30
 8005d70:	4413      	add	r3, r2
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 8005d72:	425b      	negs	r3, r3
 8005d74:	4a8d      	ldr	r2, [pc, #564]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005d76:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

						if (TabGen[SIGFOX_RSSI] <= -150
 8005d7a:	4b8c      	ldr	r3, [pc, #560]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005d7c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005d80:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8005d84:	da09      	bge.n	8005d9a <Task_Read_Nemeus+0x1c6>
								&& TabGen[SIGFOX_RSSI] >= -10)
 8005d86:	4b89      	ldr	r3, [pc, #548]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005d88:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8005d8c:	f113 0f0a 	cmn.w	r3, #10
 8005d90:	db03      	blt.n	8005d9a <Task_Read_Nemeus+0x1c6>
						{
							TabGen[SIGFOX_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 8005d92:	4b86      	ldr	r3, [pc, #536]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			}
		}
	}

	// LORA (Orange or Objenious)
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'M')
 8005d9a:	4b83      	ldr	r3, [pc, #524]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b2b      	cmp	r3, #43	; 0x2b
 8005da0:	f040 817e 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
 8005da4:	4b80      	ldr	r3, [pc, #512]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005da6:	785b      	ldrb	r3, [r3, #1]
 8005da8:	2b4d      	cmp	r3, #77	; 0x4d
 8005daa:	f040 8179 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[2] == 'A') && (Rx_bufferNemeus[3] == 'C')
 8005dae:	4b7e      	ldr	r3, [pc, #504]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005db0:	789b      	ldrb	r3, [r3, #2]
 8005db2:	2b41      	cmp	r3, #65	; 0x41
 8005db4:	f040 8174 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
 8005db8:	4b7b      	ldr	r3, [pc, #492]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dba:	78db      	ldrb	r3, [r3, #3]
 8005dbc:	2b43      	cmp	r3, #67	; 0x43
 8005dbe:	f040 816f 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[4] == ':'))
 8005dc2:	4b79      	ldr	r3, [pc, #484]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dc4:	791b      	ldrb	r3, [r3, #4]
 8005dc6:	2b3a      	cmp	r3, #58	; 0x3a
 8005dc8:	f040 816a 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
	{
		if ((Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'D')
 8005dcc:	4b76      	ldr	r3, [pc, #472]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dce:	799b      	ldrb	r3, [r3, #6]
 8005dd0:	2b52      	cmp	r3, #82	; 0x52
 8005dd2:	d155      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
 8005dd4:	4b74      	ldr	r3, [pc, #464]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dd6:	79db      	ldrb	r3, [r3, #7]
 8005dd8:	2b44      	cmp	r3, #68	; 0x44
 8005dda:	d151      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[8] == 'E') && (Rx_bufferNemeus[9] == 'V')
 8005ddc:	4b72      	ldr	r3, [pc, #456]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dde:	7a1b      	ldrb	r3, [r3, #8]
 8005de0:	2b45      	cmp	r3, #69	; 0x45
 8005de2:	d14d      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
 8005de4:	4b70      	ldr	r3, [pc, #448]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005de6:	7a5b      	ldrb	r3, [r3, #9]
 8005de8:	2b56      	cmp	r3, #86	; 0x56
 8005dea:	d149      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[10] == 'A') && (Rx_bufferNemeus[11] == 'D'))
 8005dec:	4b6e      	ldr	r3, [pc, #440]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dee:	7a9b      	ldrb	r3, [r3, #10]
 8005df0:	2b41      	cmp	r3, #65	; 0x41
 8005df2:	d145      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
 8005df4:	4b6c      	ldr	r3, [pc, #432]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005df6:	7adb      	ldrb	r3, [r3, #11]
 8005df8:	2b44      	cmp	r3, #68	; 0x44
 8005dfa:	d141      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
		{
			if (  //
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 8005dfc:	4b6a      	ldr	r3, [pc, #424]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005dfe:	7bdb      	ldrb	r3, [r3, #15]
			if (  //
 8005e00:	2b30      	cmp	r3, #48	; 0x30
 8005e02:	d11b      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 8005e04:	4b68      	ldr	r3, [pc, #416]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e06:	7c1b      	ldrb	r3, [r3, #16]
 8005e08:	2b30      	cmp	r3, #48	; 0x30
 8005e0a:	d117      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[17] != '0')
 8005e0c:	4b66      	ldr	r3, [pc, #408]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e0e:	7c5b      	ldrb	r3, [r3, #17]
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	d113      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[18] != '0')
 8005e14:	4b64      	ldr	r3, [pc, #400]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e16:	7c9b      	ldrb	r3, [r3, #18]
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d10f      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[19] != '0')
 8005e1c:	4b62      	ldr	r3, [pc, #392]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e1e:	7cdb      	ldrb	r3, [r3, #19]
 8005e20:	2b30      	cmp	r3, #48	; 0x30
 8005e22:	d10b      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[20] != '0')
 8005e24:	4b60      	ldr	r3, [pc, #384]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e26:	7d1b      	ldrb	r3, [r3, #20]
 8005e28:	2b30      	cmp	r3, #48	; 0x30
 8005e2a:	d107      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[21] != '0')
 8005e2c:	4b5e      	ldr	r3, [pc, #376]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e2e:	7d5b      	ldrb	r3, [r3, #21]
 8005e30:	2b30      	cmp	r3, #48	; 0x30
 8005e32:	d103      	bne.n	8005e3c <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[22] != '0'))
 8005e34:	4b5c      	ldr	r3, [pc, #368]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e36:	7d9b      	ldrb	r3, [r3, #22]
 8005e38:	2b30      	cmp	r3, #48	; 0x30
 8005e3a:	d021      	beq.n	8005e80 <Task_Read_Nemeus+0x2ac>
			{
				// --'UN'SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 8005e3c:	4b5b      	ldr	r3, [pc, #364]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005e3e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d11c      	bne.n	8005e80 <Task_Read_Nemeus+0x2ac>
				{
					HAL_Delay(500);
 8005e46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e4a:	f004 fac3 	bl	800a3d4 <HAL_Delay>
					SendOnLora();
 8005e4e:	f7fd ffb6 	bl	8003dbe <SendOnLora>

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005e52:	2064      	movs	r0, #100	; 0x64
 8005e54:	f7fc fc8b 	bl	800276e <PowerVib>
#endif
					AskJoinTimeLoraWan = HAL_GetTick();
 8005e58:	f004 fab0 	bl	800a3bc <HAL_GetTick>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	4a54      	ldr	r2, [pc, #336]	; (8005fb0 <Task_Read_Nemeus+0x3dc>)
 8005e60:	6013      	str	r3, [r2, #0]

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8005e62:	f004 faab 	bl	800a3bc <HAL_GetTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	4a52      	ldr	r2, [pc, #328]	; (8005fb4 <Task_Read_Nemeus+0x3e0>)
 8005e6a:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8005e6c:	4b4f      	ldr	r3, [pc, #316]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005e6e:	2201      	movs	r2, #1
 8005e70:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 8005e72:	4b4e      	ldr	r3, [pc, #312]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005e74:	2202      	movs	r2, #2
 8005e76:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 8005e7a:	4b4f      	ldr	r3, [pc, #316]	; (8005fb8 <Task_Read_Nemeus+0x3e4>)
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		if ((Rx_bufferNemeus[14] == ',' && Rx_bufferNemeus[6] != 'R')
 8005e80:	4b49      	ldr	r3, [pc, #292]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e82:	7b9b      	ldrb	r3, [r3, #14]
 8005e84:	2b2c      	cmp	r3, #44	; 0x2c
 8005e86:	d103      	bne.n	8005e90 <Task_Read_Nemeus+0x2bc>
 8005e88:	4b47      	ldr	r3, [pc, #284]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e8a:	799b      	ldrb	r3, [r3, #6]
 8005e8c:	2b52      	cmp	r3, #82	; 0x52
 8005e8e:	d103      	bne.n	8005e98 <Task_Read_Nemeus+0x2c4>
				|| GA_Nem == 1)
 8005e90:	4b4a      	ldr	r3, [pc, #296]	; (8005fbc <Task_Read_Nemeus+0x3e8>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d141      	bne.n	8005f1c <Task_Read_Nemeus+0x348>
		{
			if (  //
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 8005e98:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005e9a:	799b      	ldrb	r3, [r3, #6]
			if (  //
 8005e9c:	2b30      	cmp	r3, #48	; 0x30
 8005e9e:	d11b      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 8005ea0:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005ea2:	79db      	ldrb	r3, [r3, #7]
 8005ea4:	2b30      	cmp	r3, #48	; 0x30
 8005ea6:	d117      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[8] != '0')
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005eaa:	7a1b      	ldrb	r3, [r3, #8]
 8005eac:	2b30      	cmp	r3, #48	; 0x30
 8005eae:	d113      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[9] != '0')
 8005eb0:	4b3d      	ldr	r3, [pc, #244]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005eb2:	7a5b      	ldrb	r3, [r3, #9]
 8005eb4:	2b30      	cmp	r3, #48	; 0x30
 8005eb6:	d10f      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[10] != '0')
 8005eb8:	4b3b      	ldr	r3, [pc, #236]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005eba:	7a9b      	ldrb	r3, [r3, #10]
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d10b      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[11] != '0')
 8005ec0:	4b39      	ldr	r3, [pc, #228]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005ec2:	7adb      	ldrb	r3, [r3, #11]
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d107      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[12] != '0')
 8005ec8:	4b37      	ldr	r3, [pc, #220]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005eca:	7b1b      	ldrb	r3, [r3, #12]
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d103      	bne.n	8005ed8 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[13] != '0'))
 8005ed0:	4b35      	ldr	r3, [pc, #212]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005ed2:	7b5b      	ldrb	r3, [r3, #13]
 8005ed4:	2b30      	cmp	r3, #48	; 0x30
 8005ed6:	d021      	beq.n	8005f1c <Task_Read_Nemeus+0x348>
			{
				// SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 8005ed8:	4b34      	ldr	r3, [pc, #208]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005eda:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d11c      	bne.n	8005f1c <Task_Read_Nemeus+0x348>
				{
					HAL_Delay(500);
 8005ee2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005ee6:	f004 fa75 	bl	800a3d4 <HAL_Delay>
					SendOnLora();
 8005eea:	f7fd ff68 	bl	8003dbe <SendOnLora>

					AskJoinTimeLoraWan = HAL_GetTick();
 8005eee:	f004 fa65 	bl	800a3bc <HAL_GetTick>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4a2e      	ldr	r2, [pc, #184]	; (8005fb0 <Task_Read_Nemeus+0x3dc>)
 8005ef6:	6013      	str	r3, [r2, #0]

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005ef8:	2064      	movs	r0, #100	; 0x64
 8005efa:	f7fc fc38 	bl	800276e <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8005efe:	f004 fa5d 	bl	800a3bc <HAL_GetTick>
 8005f02:	4603      	mov	r3, r0
 8005f04:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <Task_Read_Nemeus+0x3e0>)
 8005f06:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8005f08:	4b28      	ldr	r3, [pc, #160]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 8005f0e:	4b27      	ldr	r3, [pc, #156]	; (8005fac <Task_Read_Nemeus+0x3d8>)
 8005f10:	2202      	movs	r2, #2
 8005f12:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 8005f16:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <Task_Read_Nemeus+0x3e4>)
 8005f18:	2202      	movs	r2, #2
 8005f1a:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if ( //
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 8005f1c:	4b22      	ldr	r3, [pc, #136]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f1e:	799b      	ldrb	r3, [r3, #6]
		if ( //
 8005f20:	2b52      	cmp	r3, #82	; 0x52
 8005f22:	f040 80bd 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 8005f26:	4b20      	ldr	r3, [pc, #128]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f28:	79db      	ldrb	r3, [r3, #7]
 8005f2a:	2b43      	cmp	r3, #67	; 0x43
 8005f2c:	f040 80b8 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[8] == 'V') && (Rx_bufferNemeus[9] == 'B')
 8005f30:	4b1d      	ldr	r3, [pc, #116]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f32:	7a1b      	ldrb	r3, [r3, #8]
 8005f34:	2b56      	cmp	r3, #86	; 0x56
 8005f36:	f040 80b3 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
 8005f3a:	4b1b      	ldr	r3, [pc, #108]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f3c:	7a5b      	ldrb	r3, [r3, #9]
 8005f3e:	2b42      	cmp	r3, #66	; 0x42
 8005f40:	f040 80ae 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[10] == 'I') && (Rx_bufferNemeus[11] == 'N'))
 8005f44:	4b18      	ldr	r3, [pc, #96]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f46:	7a9b      	ldrb	r3, [r3, #10]
 8005f48:	2b49      	cmp	r3, #73	; 0x49
 8005f4a:	f040 80a9 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
 8005f4e:	4b16      	ldr	r3, [pc, #88]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f50:	7adb      	ldrb	r3, [r3, #11]
 8005f52:	2b4e      	cmp	r3, #78	; 0x4e
 8005f54:	f040 80a4 	bne.w	80060a0 <Task_Read_Nemeus+0x4cc>
		{

			uint8_t nbcomma = 0;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	737b      	strb	r3, [r7, #13]
			uint8_t nbchar = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	733b      	strb	r3, [r7, #12]
			uint8_t pending_downlink = 0;
 8005f60:	2300      	movs	r3, #0
 8005f62:	70fb      	strb	r3, [r7, #3]

			// PARSING ',' to look for RSSI
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8005f64:	e012      	b.n	8005f8c <Task_Read_Nemeus+0x3b8>
			{
				if (Rx_bufferNemeus[nbchar] == ',')
 8005f66:	7b3b      	ldrb	r3, [r7, #12]
 8005f68:	4a0f      	ldr	r2, [pc, #60]	; (8005fa8 <Task_Read_Nemeus+0x3d4>)
 8005f6a:	5cd3      	ldrb	r3, [r2, r3]
 8005f6c:	2b2c      	cmp	r3, #44	; 0x2c
 8005f6e:	d102      	bne.n	8005f76 <Task_Read_Nemeus+0x3a2>
					nbcomma++;
 8005f70:	7b7b      	ldrb	r3, [r7, #13]
 8005f72:	3301      	adds	r3, #1
 8005f74:	737b      	strb	r3, [r7, #13]
				if (nbcomma == 2)
 8005f76:	7b7b      	ldrb	r3, [r7, #13]
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	d104      	bne.n	8005f86 <Task_Read_Nemeus+0x3b2>
					if (nbchar + 1 == 't')
 8005f7c:	7b3b      	ldrb	r3, [r7, #12]
 8005f7e:	2b73      	cmp	r3, #115	; 0x73
 8005f80:	d101      	bne.n	8005f86 <Task_Read_Nemeus+0x3b2>
						pending_downlink = 1; // not use, never true
 8005f82:	2301      	movs	r3, #1
 8005f84:	70fb      	strb	r3, [r7, #3]

				nbchar++;
 8005f86:	7b3b      	ldrb	r3, [r7, #12]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	733b      	strb	r3, [r7, #12]
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8005f8c:	7b7b      	ldrb	r3, [r7, #13]
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d802      	bhi.n	8005f98 <Task_Read_Nemeus+0x3c4>
 8005f92:	7b3b      	ldrb	r3, [r7, #12]
 8005f94:	2bc8      	cmp	r3, #200	; 0xc8
 8005f96:	d9e6      	bls.n	8005f66 <Task_Read_Nemeus+0x392>
			}

			// TESTING LORA SUCCESSFUL, TIME TO TEST SIGFOX
			if (DUAL_STATE_LS == ACK_LORA_PENDING)
 8005f98:	4b07      	ldr	r3, [pc, #28]	; (8005fb8 <Task_Read_Nemeus+0x3e4>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d122      	bne.n	8005fe6 <Task_Read_Nemeus+0x412>
			{
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	60bb      	str	r3, [r7, #8]
 8005fa4:	e014      	b.n	8005fd0 <Task_Read_Nemeus+0x3fc>
 8005fa6:	bf00      	nop
 8005fa8:	20002734 	.word	0x20002734
 8005fac:	200024d4 	.word	0x200024d4
 8005fb0:	20000b84 	.word	0x20000b84
 8005fb4:	200027fc 	.word	0x200027fc
 8005fb8:	20000b69 	.word	0x20000b69
 8005fbc:	20000b72 	.word	0x20000b72
				{
					Rx_Nemeus[i_fct] = 0;
 8005fc0:	4a43      	ldr	r2, [pc, #268]	; (80060d0 <Task_Read_Nemeus+0x4fc>)
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	2bc7      	cmp	r3, #199	; 0xc7
 8005fd4:	ddf4      	ble.n	8005fc0 <Task_Read_Nemeus+0x3ec>
				}

				DUAL_STATE_LS = SF_DELAY_ON;
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <Task_Read_Nemeus+0x500>)
 8005fd8:	2203      	movs	r2, #3
 8005fda:	701a      	strb	r2, [r3, #0]
				AskJoinTimeLoraWan = HAL_GetTick();
 8005fdc:	f004 f9ee 	bl	800a3bc <HAL_GetTick>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4a3d      	ldr	r2, [pc, #244]	; (80060d8 <Task_Read_Nemeus+0x504>)
 8005fe4:	6013      	str	r3, [r2, #0]

			}

			// IF THERE IS A '-' IT MEANS THE MESSAGE IS RECEIVED FROM AN ANTENNA
			if (Rx_bufferNemeus[nbchar] == '-')	//if (Rx_Nemeus[22] == '-')
 8005fe6:	7b3b      	ldrb	r3, [r7, #12]
 8005fe8:	4a3c      	ldr	r2, [pc, #240]	; (80060dc <Task_Read_Nemeus+0x508>)
 8005fea:	5cd3      	ldrb	r3, [r2, r3]
 8005fec:	2b2d      	cmp	r3, #45	; 0x2d
 8005fee:	d157      	bne.n	80060a0 <Task_Read_Nemeus+0x4cc>
//						TabGen[ALERT_PENDING] = 0;
//						TabGen[SIGFOX_SEND] = 0;
//						TabGen[ALERT_PENDING] = 0;
//					}

				if (TabGen[LORAWAN_RSSI] == 0)
 8005ff0:	4b3b      	ldr	r3, [pc, #236]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 8005ff2:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <Task_Read_Nemeus+0x43c>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8005ffa:	2064      	movs	r0, #100	; 0x64
 8005ffc:	f7fc fbb7 	bl	800276e <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 8006000:	f004 f9dc 	bl	800a3bc <HAL_GetTick>
 8006004:	4603      	mov	r3, r0
 8006006:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <Task_Read_Nemeus+0x510>)
 8006008:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 800600a:	4b35      	ldr	r3, [pc, #212]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 800600c:	2201      	movs	r2, #1
 800600e:	651a      	str	r2, [r3, #80]	; 0x50
				}

				if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 8006010:	7b3b      	ldrb	r3, [r7, #12]
 8006012:	3303      	adds	r3, #3
 8006014:	4a31      	ldr	r2, [pc, #196]	; (80060dc <Task_Read_Nemeus+0x508>)
 8006016:	5cd3      	ldrb	r3, [r2, r3]
 8006018:	2b2e      	cmp	r3, #46	; 0x2e
 800601a:	d114      	bne.n	8006046 <Task_Read_Nemeus+0x472>
				{
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 800601c:	7b3b      	ldrb	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	4a2e      	ldr	r2, [pc, #184]	; (80060dc <Task_Read_Nemeus+0x508>)
 8006022:	5cd3      	ldrb	r3, [r2, r3]
 8006024:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
							* 10 + (Rx_bufferNemeus[nbchar + 2] - '0');
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	4619      	mov	r1, r3
 8006032:	7b3b      	ldrb	r3, [r7, #12]
 8006034:	3302      	adds	r3, #2
 8006036:	4a29      	ldr	r2, [pc, #164]	; (80060dc <Task_Read_Nemeus+0x508>)
 8006038:	5cd3      	ldrb	r3, [r2, r3]
 800603a:	3b30      	subs	r3, #48	; 0x30
 800603c:	440b      	add	r3, r1
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 800603e:	4a28      	ldr	r2, [pc, #160]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 8006040:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 8006044:	e02c      	b.n	80060a0 <Task_Read_Nemeus+0x4cc>
				}
				else // 3 digits => -XXX.XX
				{
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 8006046:	7b3b      	ldrb	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <Task_Read_Nemeus+0x508>)
 800604c:	5cd3      	ldrb	r3, [r2, r3]
 800604e:	3b30      	subs	r3, #48	; 0x30
							* 100 + (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 8006050:	2264      	movs	r2, #100	; 0x64
 8006052:	fb02 f103 	mul.w	r1, r2, r3
 8006056:	7b3b      	ldrb	r3, [r7, #12]
 8006058:	3302      	adds	r3, #2
 800605a:	4a20      	ldr	r2, [pc, #128]	; (80060dc <Task_Read_Nemeus+0x508>)
 800605c:	5cd3      	ldrb	r3, [r2, r3]
 800605e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	005b      	lsls	r3, r3, #1
 800606a:	18ca      	adds	r2, r1, r3
							+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 800606c:	7b3b      	ldrb	r3, [r7, #12]
 800606e:	3303      	adds	r3, #3
 8006070:	491a      	ldr	r1, [pc, #104]	; (80060dc <Task_Read_Nemeus+0x508>)
 8006072:	5ccb      	ldrb	r3, [r1, r3]
 8006074:	3b30      	subs	r3, #48	; 0x30
 8006076:	4413      	add	r3, r2
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 8006078:	425b      	negs	r3, r3
 800607a:	4a19      	ldr	r2, [pc, #100]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 800607c:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c

					if (TabGen[LORAWAN_RSSI] <= -150
 8006080:	4b17      	ldr	r3, [pc, #92]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 8006082:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006086:	f113 0f95 	cmn.w	r3, #149	; 0x95
 800608a:	da09      	bge.n	80060a0 <Task_Read_Nemeus+0x4cc>
							&& TabGen[LORAWAN_RSSI] >= -10)
 800608c:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 800608e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8006092:	f113 0f0a 	cmn.w	r3, #10
 8006096:	db03      	blt.n	80060a0 <Task_Read_Nemeus+0x4cc>
					{
						TabGen[LORAWAN_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 8006098:	4b11      	ldr	r3, [pc, #68]	; (80060e0 <Task_Read_Nemeus+0x50c>)
 800609a:	2200      	movs	r2, #0
 800609c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
//				}
		}
	}

	// CLEAR DMA BUFFER
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 80060a0:	2300      	movs	r3, #0
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	e00c      	b.n	80060c0 <Task_Read_Nemeus+0x4ec>
	{
		Rx_Nemeus[i_fct] = 0;
 80060a6:	4a0a      	ldr	r2, [pc, #40]	; (80060d0 <Task_Read_Nemeus+0x4fc>)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4413      	add	r3, r2
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]
		Rx_bufferNemeus[i_fct] = 0;
 80060b0:	4a0a      	ldr	r2, [pc, #40]	; (80060dc <Task_Read_Nemeus+0x508>)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	2200      	movs	r2, #0
 80060b8:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3301      	adds	r3, #1
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2bc7      	cmp	r3, #199	; 0xc7
 80060c4:	ddef      	ble.n	80060a6 <Task_Read_Nemeus+0x4d2>
	}
}
 80060c6:	bf00      	nop
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20001d98 	.word	0x20001d98
 80060d4:	20000b69 	.word	0x20000b69
 80060d8:	20000b84 	.word	0x20000b84
 80060dc:	20002734 	.word	0x20002734
 80060e0:	200024d4 	.word	0x200024d4
 80060e4:	200027fc 	.word	0x200027fc

080060e8 <Battery_Charger_Management>:
extern volatile uint8_t Flag[];
extern uint8_t USB_In_Event;
extern float TabFloatValue[];

void Battery_Charger_Management(void)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b082      	sub	sp, #8
 80060ec:	af00      	add	r7, sp, #0
	if (Flag[F_CHARGER] == 1)
 80060ee:	4ba4      	ldr	r3, [pc, #656]	; (8006380 <Battery_Charger_Management+0x298>)
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d165      	bne.n	80061c4 <Battery_Charger_Management+0xdc>
	{
		Flag[F_CHARGER] = 0;
 80060f8:	4ba1      	ldr	r3, [pc, #644]	; (8006380 <Battery_Charger_Management+0x298>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	705a      	strb	r2, [r3, #1]
		TaskCharger(TabGen);
 80060fe:	48a1      	ldr	r0, [pc, #644]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006100:	f7fe faa4 	bl	800464c <TaskCharger>
		if (TabGen[CHARGEC] == 0)
 8006104:	4b9f      	ldr	r3, [pc, #636]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800610a:	2b00      	cmp	r3, #0
 800610c:	d127      	bne.n	800615e <Battery_Charger_Management+0x76>
		{
			if (USB_In_Event == 1)
 800610e:	4b9e      	ldr	r3, [pc, #632]	; (8006388 <Battery_Charger_Management+0x2a0>)
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d123      	bne.n	800615e <Battery_Charger_Management+0x76>
			{
				USB_In_Event = 0;
 8006116:	4b9c      	ldr	r3, [pc, #624]	; (8006388 <Battery_Charger_Management+0x2a0>)
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 800611c:	4b99      	ldr	r3, [pc, #612]	; (8006384 <Battery_Charger_Management+0x29c>)
 800611e:	2201      	movs	r2, #1
 8006120:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 8006122:	2032      	movs	r0, #50	; 0x32
 8006124:	f7fc fb23 	bl	800276e <PowerVib>

				TabGen[ALERT_ON] = 0; // clear alert
 8006128:	4b96      	ldr	r3, [pc, #600]	; (8006384 <Battery_Charger_Management+0x29c>)
 800612a:	2200      	movs	r2, #0
 800612c:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 800612e:	4b95      	ldr	r3, [pc, #596]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006130:	2200      	movs	r2, #0
 8006132:	63da      	str	r2, [r3, #60]	; 0x3c
				TabGen[NS_IMMO] = 0;
 8006134:	4b93      	ldr	r3, [pc, #588]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
				for (uint8_t i = 0; i < NB_ALERT; i++)
 800613a:	2300      	movs	r3, #0
 800613c:	71fb      	strb	r3, [r7, #7]
 800613e:	e007      	b.n	8006150 <Battery_Charger_Management+0x68>
					TabAlert[i] = 0;
 8006140:	79fb      	ldrb	r3, [r7, #7]
 8006142:	4a92      	ldr	r2, [pc, #584]	; (800638c <Battery_Charger_Management+0x2a4>)
 8006144:	2100      	movs	r1, #0
 8006146:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i = 0; i < NB_ALERT; i++)
 800614a:	79fb      	ldrb	r3, [r7, #7]
 800614c:	3301      	adds	r3, #1
 800614e:	71fb      	strb	r3, [r7, #7]
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	2b0d      	cmp	r3, #13
 8006154:	d9f4      	bls.n	8006140 <Battery_Charger_Management+0x58>
				TabGen[TYPE_ALERT] = NONE_ALERT;
 8006156:	4b8b      	ldr	r3, [pc, #556]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006158:	2200      	movs	r2, #0
 800615a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			}
		}
		if (TabGen[CHARGEC] == 1)
 800615e:	4b89      	ldr	r3, [pc, #548]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006164:	2b01      	cmp	r3, #1
 8006166:	d12d      	bne.n	80061c4 <Battery_Charger_Management+0xdc>
		{
			if (USB_In_Event == 0)
 8006168:	4b87      	ldr	r3, [pc, #540]	; (8006388 <Battery_Charger_Management+0x2a0>)
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d108      	bne.n	8006182 <Battery_Charger_Management+0x9a>
			{
				USB_In_Event = 1;
 8006170:	4b85      	ldr	r3, [pc, #532]	; (8006388 <Battery_Charger_Management+0x2a0>)
 8006172:	2201      	movs	r2, #1
 8006174:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 8006176:	4b83      	ldr	r3, [pc, #524]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006178:	2201      	movs	r2, #1
 800617a:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 800617c:	2032      	movs	r0, #50	; 0x32
 800617e:	f7fc faf6 	bl	800276e <PowerVib>
			}
			TabGen[ALERT_ON] = 0; // clear alert
 8006182:	4b80      	ldr	r3, [pc, #512]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006184:	2200      	movs	r2, #0
 8006186:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 8006188:	4b7e      	ldr	r3, [pc, #504]	; (8006384 <Battery_Charger_Management+0x29c>)
 800618a:	2200      	movs	r2, #0
 800618c:	63da      	str	r2, [r3, #60]	; 0x3c
			TabGen[NS_IMMO] = 0;
 800618e:	4b7d      	ldr	r3, [pc, #500]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006190:	2200      	movs	r2, #0
 8006192:	641a      	str	r2, [r3, #64]	; 0x40
			for (uint8_t i = 0; i < NB_ALERT; i++)
 8006194:	2300      	movs	r3, #0
 8006196:	71bb      	strb	r3, [r7, #6]
 8006198:	e007      	b.n	80061aa <Battery_Charger_Management+0xc2>
				TabAlert[i] = 0;
 800619a:	79bb      	ldrb	r3, [r7, #6]
 800619c:	4a7b      	ldr	r2, [pc, #492]	; (800638c <Battery_Charger_Management+0x2a4>)
 800619e:	2100      	movs	r1, #0
 80061a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t i = 0; i < NB_ALERT; i++)
 80061a4:	79bb      	ldrb	r3, [r7, #6]
 80061a6:	3301      	adds	r3, #1
 80061a8:	71bb      	strb	r3, [r7, #6]
 80061aa:	79bb      	ldrb	r3, [r7, #6]
 80061ac:	2b0d      	cmp	r3, #13
 80061ae:	d9f4      	bls.n	800619a <Battery_Charger_Management+0xb2>
			TabGen[TYPE_ALERT] = NONE_ALERT;
 80061b0:	4b74      	ldr	r3, [pc, #464]	; (8006384 <Battery_Charger_Management+0x29c>)
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 80061b8:	4b75      	ldr	r3, [pc, #468]	; (8006390 <Battery_Charger_Management+0x2a8>)
 80061ba:	4a76      	ldr	r2, [pc, #472]	; (8006394 <Battery_Charger_Management+0x2ac>)
 80061bc:	4971      	ldr	r1, [pc, #452]	; (8006384 <Battery_Charger_Management+0x29c>)
 80061be:	4873      	ldr	r0, [pc, #460]	; (800638c <Battery_Charger_Management+0x2a4>)
 80061c0:	f7fe fc58 	bl	8004a74 <TaskAlertAll>
		}
	}

#ifndef BATT//debug_sound_vibration
	if (Flag[F_BATTERY] == 1)
 80061c4:	4b6e      	ldr	r3, [pc, #440]	; (8006380 <Battery_Charger_Management+0x298>)
 80061c6:	789b      	ldrb	r3, [r3, #2]
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	f040 80b8 	bne.w	8006340 <Battery_Charger_Management+0x258>
	{
		Flag[F_BATTERY] = 0;
 80061d0:	4b6b      	ldr	r3, [pc, #428]	; (8006380 <Battery_Charger_Management+0x298>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	709a      	strb	r2, [r3, #2]
		TaskReadBat(TabGen);
 80061d6:	486b      	ldr	r0, [pc, #428]	; (8006384 <Battery_Charger_Management+0x29c>)
 80061d8:	f7fe fa61 	bl	800469e <TaskReadBat>
		// Battery level between 15 - 20, do nothing
		if (TabGen[BAT_VALUE] > 15 && TabGen[BAT_VALUE] < 20)
 80061dc:	4b69      	ldr	r3, [pc, #420]	; (8006384 <Battery_Charger_Management+0x29c>)
 80061de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061e2:	2b0f      	cmp	r3, #15
 80061e4:	dd10      	ble.n	8006208 <Battery_Charger_Management+0x120>
 80061e6:	4b67      	ldr	r3, [pc, #412]	; (8006384 <Battery_Charger_Management+0x29c>)
 80061e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80061ec:	2b13      	cmp	r3, #19
 80061ee:	dc0b      	bgt.n	8006208 <Battery_Charger_Management+0x120>
		{
			batt_20 = 1; //
 80061f0:	4b69      	ldr	r3, [pc, #420]	; (8006398 <Battery_Charger_Management+0x2b0>)
 80061f2:	2201      	movs	r2, #1
 80061f4:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 80061f6:	4b69      	ldr	r3, [pc, #420]	; (800639c <Battery_Charger_Management+0x2b4>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 80061fc:	4b68      	ldr	r3, [pc, #416]	; (80063a0 <Battery_Charger_Management+0x2b8>)
 80061fe:	2200      	movs	r2, #0
 8006200:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 8006202:	4b68      	ldr	r3, [pc, #416]	; (80063a4 <Battery_Charger_Management+0x2bc>)
 8006204:	2200      	movs	r2, #0
 8006206:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 10 - 15. If the battery was previously above 15 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] > 10 && TabGen[BAT_VALUE] < 15)
 8006208:	4b5e      	ldr	r3, [pc, #376]	; (8006384 <Battery_Charger_Management+0x29c>)
 800620a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800620e:	2b0a      	cmp	r3, #10
 8006210:	dd2b      	ble.n	800626a <Battery_Charger_Management+0x182>
 8006212:	4b5c      	ldr	r3, [pc, #368]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006214:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006218:	2b0e      	cmp	r3, #14
 800621a:	dc26      	bgt.n	800626a <Battery_Charger_Management+0x182>
		{
			if (batt_20 == 1)
 800621c:	4b5e      	ldr	r3, [pc, #376]	; (8006398 <Battery_Charger_Management+0x2b0>)
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d116      	bne.n	8006252 <Battery_Charger_Management+0x16a>
			{
				PowerBuzVib(100);
 8006224:	2064      	movs	r0, #100	; 0x64
 8006226:	f7fc fa8d 	bl	8002744 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 800622a:	4b56      	ldr	r3, [pc, #344]	; (8006384 <Battery_Charger_Management+0x29c>)
 800622c:	2200      	movs	r2, #0
 800622e:	2100      	movs	r1, #0
 8006230:	20fa      	movs	r0, #250	; 0xfa
 8006232:	f7fd fca1 	bl	8003b78 <LedOn>
				HAL_Delay(50);
 8006236:	2032      	movs	r0, #50	; 0x32
 8006238:	f004 f8cc 	bl	800a3d4 <HAL_Delay>
				PowerBuzVib(100);
 800623c:	2064      	movs	r0, #100	; 0x64
 800623e:	f7fc fa81 	bl	8002744 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 8006242:	4b50      	ldr	r3, [pc, #320]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006244:	2201      	movs	r2, #1
 8006246:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 8006248:	f004 f8b8 	bl	800a3bc <HAL_GetTick>
 800624c:	4603      	mov	r3, r0
 800624e:	4a56      	ldr	r2, [pc, #344]	; (80063a8 <Battery_Charger_Management+0x2c0>)
 8006250:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 8006252:	4b51      	ldr	r3, [pc, #324]	; (8006398 <Battery_Charger_Management+0x2b0>)
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
			batt_15 = 1; //
 8006258:	4b50      	ldr	r3, [pc, #320]	; (800639c <Battery_Charger_Management+0x2b4>)
 800625a:	2201      	movs	r2, #1
 800625c:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 800625e:	4b50      	ldr	r3, [pc, #320]	; (80063a0 <Battery_Charger_Management+0x2b8>)
 8006260:	2200      	movs	r2, #0
 8006262:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 8006264:	4b4f      	ldr	r3, [pc, #316]	; (80063a4 <Battery_Charger_Management+0x2bc>)
 8006266:	2200      	movs	r2, #0
 8006268:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 5 - 10. If the battery was previously above 10 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] > 5 && TabGen[BAT_VALUE] < 10)
 800626a:	4b46      	ldr	r3, [pc, #280]	; (8006384 <Battery_Charger_Management+0x29c>)
 800626c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006270:	2b05      	cmp	r3, #5
 8006272:	dd2b      	ble.n	80062cc <Battery_Charger_Management+0x1e4>
 8006274:	4b43      	ldr	r3, [pc, #268]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006276:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800627a:	2b09      	cmp	r3, #9
 800627c:	dc26      	bgt.n	80062cc <Battery_Charger_Management+0x1e4>
		{
			if (batt_15 == 1)
 800627e:	4b47      	ldr	r3, [pc, #284]	; (800639c <Battery_Charger_Management+0x2b4>)
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d116      	bne.n	80062b4 <Battery_Charger_Management+0x1cc>
			{
				PowerBuzVib(100);
 8006286:	2064      	movs	r0, #100	; 0x64
 8006288:	f7fc fa5c 	bl	8002744 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 800628c:	4b3d      	ldr	r3, [pc, #244]	; (8006384 <Battery_Charger_Management+0x29c>)
 800628e:	2200      	movs	r2, #0
 8006290:	2100      	movs	r1, #0
 8006292:	20fa      	movs	r0, #250	; 0xfa
 8006294:	f7fd fc70 	bl	8003b78 <LedOn>
				HAL_Delay(50);
 8006298:	2032      	movs	r0, #50	; 0x32
 800629a:	f004 f89b 	bl	800a3d4 <HAL_Delay>
				PowerBuzVib(100);
 800629e:	2064      	movs	r0, #100	; 0x64
 80062a0:	f7fc fa50 	bl	8002744 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 80062a4:	4b37      	ldr	r3, [pc, #220]	; (8006384 <Battery_Charger_Management+0x29c>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 80062aa:	f004 f887 	bl	800a3bc <HAL_GetTick>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4a3d      	ldr	r2, [pc, #244]	; (80063a8 <Battery_Charger_Management+0x2c0>)
 80062b2:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 80062b4:	4b38      	ldr	r3, [pc, #224]	; (8006398 <Battery_Charger_Management+0x2b0>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 80062ba:	4b38      	ldr	r3, [pc, #224]	; (800639c <Battery_Charger_Management+0x2b4>)
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
			batt_10 = 1; //
 80062c0:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <Battery_Charger_Management+0x2b8>)
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 80062c6:	4b37      	ldr	r3, [pc, #220]	; (80063a4 <Battery_Charger_Management+0x2bc>)
 80062c8:	2200      	movs	r2, #0
 80062ca:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 0 - 5. If the battery was previously above 5 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] < 5)
 80062cc:	4b2d      	ldr	r3, [pc, #180]	; (8006384 <Battery_Charger_Management+0x29c>)
 80062ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80062d2:	2b04      	cmp	r3, #4
 80062d4:	dc34      	bgt.n	8006340 <Battery_Charger_Management+0x258>
		{
			if (batt_10 == 1)
 80062d6:	4b32      	ldr	r3, [pc, #200]	; (80063a0 <Battery_Charger_Management+0x2b8>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d116      	bne.n	800630c <Battery_Charger_Management+0x224>
			{
				PowerBuzVib(100);
 80062de:	2064      	movs	r0, #100	; 0x64
 80062e0:	f7fc fa30 	bl	8002744 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 80062e4:	4b27      	ldr	r3, [pc, #156]	; (8006384 <Battery_Charger_Management+0x29c>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	2100      	movs	r1, #0
 80062ea:	20fa      	movs	r0, #250	; 0xfa
 80062ec:	f7fd fc44 	bl	8003b78 <LedOn>
				HAL_Delay(50);
 80062f0:	2032      	movs	r0, #50	; 0x32
 80062f2:	f004 f86f 	bl	800a3d4 <HAL_Delay>
				PowerBuzVib(100);
 80062f6:	2064      	movs	r0, #100	; 0x64
 80062f8:	f7fc fa24 	bl	8002744 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 80062fc:	4b21      	ldr	r3, [pc, #132]	; (8006384 <Battery_Charger_Management+0x29c>)
 80062fe:	2201      	movs	r2, #1
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 8006302:	f004 f85b 	bl	800a3bc <HAL_GetTick>
 8006306:	4603      	mov	r3, r0
 8006308:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <Battery_Charger_Management+0x2c0>)
 800630a:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 800630c:	4b22      	ldr	r3, [pc, #136]	; (8006398 <Battery_Charger_Management+0x2b0>)
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 8006312:	4b22      	ldr	r3, [pc, #136]	; (800639c <Battery_Charger_Management+0x2b4>)
 8006314:	2200      	movs	r2, #0
 8006316:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 8006318:	4b21      	ldr	r3, [pc, #132]	; (80063a0 <Battery_Charger_Management+0x2b8>)
 800631a:	2200      	movs	r2, #0
 800631c:	701a      	strb	r2, [r3, #0]
			batt_5 = 1; //
 800631e:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <Battery_Charger_Management+0x2bc>)
 8006320:	2201      	movs	r2, #1
 8006322:	701a      	strb	r2, [r3, #0]
			if (TabGen[CHARGEC] == 0)
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006326:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800632a:	2b00      	cmp	r3, #0
 800632c:	d105      	bne.n	800633a <Battery_Charger_Management+0x252>
			{
				low_bat_shutdown++;
 800632e:	4b1f      	ldr	r3, [pc, #124]	; (80063ac <Battery_Charger_Management+0x2c4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a1d      	ldr	r2, [pc, #116]	; (80063ac <Battery_Charger_Management+0x2c4>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	e002      	b.n	8006340 <Battery_Charger_Management+0x258>
			}
			else
				low_bat_shutdown = 0;
 800633a:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <Battery_Charger_Management+0x2c4>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
		}
	}
	if (TabGen[BAT_VALUE] == 255)
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006342:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006346:	2bff      	cmp	r3, #255	; 0xff
 8006348:	d115      	bne.n	8006376 <Battery_Charger_Management+0x28e>
	{
		if (TabGen[CHARGEC] == 0)
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <Battery_Charger_Management+0x29c>)
 800634c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006350:	2b00      	cmp	r3, #0
 8006352:	d105      	bne.n	8006360 <Battery_Charger_Management+0x278>
		{
			low_bat_shutdown++;
 8006354:	4b15      	ldr	r3, [pc, #84]	; (80063ac <Battery_Charger_Management+0x2c4>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3301      	adds	r3, #1
 800635a:	4a14      	ldr	r2, [pc, #80]	; (80063ac <Battery_Charger_Management+0x2c4>)
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	e002      	b.n	8006366 <Battery_Charger_Management+0x27e>
		}
		else
			low_bat_shutdown = 0;
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <Battery_Charger_Management+0x2c4>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]

		if (low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT - 10)
 8006366:	4b11      	ldr	r3, [pc, #68]	; (80063ac <Battery_Charger_Management+0x2c4>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a11      	ldr	r2, [pc, #68]	; (80063b0 <Battery_Charger_Management+0x2c8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d902      	bls.n	8006376 <Battery_Charger_Management+0x28e>
			TabGen[RE_ON_SCREEN] = 1;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <Battery_Charger_Management+0x29c>)
 8006372:	2201      	movs	r2, #1
 8006374:	651a      	str	r2, [r3, #80]	; 0x50
	}

#endif
}
 8006376:	bf00      	nop
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20002bc4 	.word	0x20002bc4
 8006384:	200024d4 	.word	0x200024d4
 8006388:	20000b6e 	.word	0x20000b6e
 800638c:	20003078 	.word	0x20003078
 8006390:	20002b68 	.word	0x20002b68
 8006394:	20001ed4 	.word	0x20001ed4
 8006398:	20000b60 	.word	0x20000b60
 800639c:	20000b61 	.word	0x20000b61
 80063a0:	20000b62 	.word	0x20000b62
 80063a4:	20000b63 	.word	0x20000b63
 80063a8:	200027fc 	.word	0x200027fc
 80063ac:	20000b64 	.word	0x20000b64
 80063b0:	00018696 	.word	0x00018696

080063b4 <GPS_Management>:

void GPS_Management(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
	if (TabGen[FORCE_GPS] == 1)
 80063b8:	4b34      	ldr	r3, [pc, #208]	; (800648c <GPS_Management+0xd8>)
 80063ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d106      	bne.n	80063d0 <GPS_Management+0x1c>
	{
		TabGen[GPS_ON] = 1;
 80063c2:	4b32      	ldr	r3, [pc, #200]	; (800648c <GPS_Management+0xd8>)
 80063c4:	2201      	movs	r2, #1
 80063c6:	605a      	str	r2, [r3, #4]
		TabGen[FORCE_GPS] = 0;
 80063c8:	4b30      	ldr	r3, [pc, #192]	; (800648c <GPS_Management+0xd8>)
 80063ca:	2200      	movs	r2, #0
 80063cc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	}

	// STEP 1
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 0)) // IF GPS MUST BE ON BUT WASN'T ALREADY
 80063d0:	4b2e      	ldr	r3, [pc, #184]	; (800648c <GPS_Management+0xd8>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d11e      	bne.n	8006416 <GPS_Management+0x62>
 80063d8:	4b2c      	ldr	r3, [pc, #176]	; (800648c <GPS_Management+0xd8>)
 80063da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d119      	bne.n	8006416 <GPS_Management+0x62>
	{
		// GPS is on, first start.
		TabGen[GPS_ON_PREVIOUS] = 1;
 80063e2:	4b2a      	ldr	r3, [pc, #168]	; (800648c <GPS_Management+0xd8>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		TabTimer[GPS_FIRST_START] = millis;
 80063ea:	4b29      	ldr	r3, [pc, #164]	; (8006490 <GPS_Management+0xdc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a29      	ldr	r2, [pc, #164]	; (8006494 <GPS_Management+0xe0>)
 80063f0:	6053      	str	r3, [r2, #4]
		GpsStart();
 80063f2:	f7fd f93b 	bl	800366c <GpsStart>
		TabGen[GPS_GOOD] = 0;
 80063f6:	4b25      	ldr	r3, [pc, #148]	; (800648c <GPS_Management+0xd8>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		if (millis - TabTimer[LAST_UPDATE_GPS] > 10 * 60 * 1000)
 80063fe:	4b24      	ldr	r3, [pc, #144]	; (8006490 <GPS_Management+0xdc>)
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <GPS_Management+0xe0>)
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	4a23      	ldr	r2, [pc, #140]	; (8006498 <GPS_Management+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d903      	bls.n	8006416 <GPS_Management+0x62>
			TabGen[GPS_DURATION] = 10;
 800640e:	4b1f      	ldr	r3, [pc, #124]	; (800648c <GPS_Management+0xd8>)
 8006410:	220a      	movs	r2, #10
 8006412:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	// STEP 2
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 1)) // IF GPS IS ON ALREADY
 8006416:	4b1d      	ldr	r3, [pc, #116]	; (800648c <GPS_Management+0xd8>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	2b01      	cmp	r3, #1
 800641c:	d11f      	bne.n	800645e <GPS_Management+0xaa>
 800641e:	4b1b      	ldr	r3, [pc, #108]	; (800648c <GPS_Management+0xd8>)
 8006420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d11a      	bne.n	800645e <GPS_Management+0xaa>
	{
		if ((millis - TabTimer[GPS_FIRST_START])
 8006428:	4b19      	ldr	r3, [pc, #100]	; (8006490 <GPS_Management+0xdc>)
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	4b19      	ldr	r3, [pc, #100]	; (8006494 <GPS_Management+0xe0>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	1ad3      	subs	r3, r2, r3
				> (TabGen[GPS_DURATION] * 60 * 1000)) // in minutes
 8006432:	4a16      	ldr	r2, [pc, #88]	; (800648c <GPS_Management+0xd8>)
 8006434:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 8006438:	f64e 2160 	movw	r1, #60000	; 0xea60
 800643c:	fb01 f202 	mul.w	r2, r1, r2
		if ((millis - TabTimer[GPS_FIRST_START])
 8006440:	4293      	cmp	r3, r2
 8006442:	d90c      	bls.n	800645e <GPS_Management+0xaa>
		{
			TabGen[GPS_ON] = 0;
 8006444:	4b11      	ldr	r3, [pc, #68]	; (800648c <GPS_Management+0xd8>)
 8006446:	2200      	movs	r2, #0
 8006448:	605a      	str	r2, [r3, #4]
			TabGen[GPS_ON_PREVIOUS] = 0;
 800644a:	4b10      	ldr	r3, [pc, #64]	; (800648c <GPS_Management+0xd8>)
 800644c:	2200      	movs	r2, #0
 800644e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			TabTimer[GPS_REPEAT_START] = millis;
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <GPS_Management+0xdc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <GPS_Management+0xe0>)
 8006458:	6013      	str	r3, [r2, #0]
			GpsStop();
 800645a:	f7fd f8a1 	bl	80035a0 <GpsStop>
		}
	}

	// STEP 3
	if ((TabGen[GPS_ON] == 0) && (TabGen[GPS_ON_PREVIOUS] == 0))
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <GPS_Management+0xd8>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d110      	bne.n	8006488 <GPS_Management+0xd4>
 8006466:	4b09      	ldr	r3, [pc, #36]	; (800648c <GPS_Management+0xd8>)
 8006468:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <GPS_Management+0xd4>
	{
		// GPS is not on => turn it on
		if ((millis - TabTimer[GPS_REPEAT_START]) > (GPSREPEAT * 60 * 1000)) // in minutes
 8006470:	4b07      	ldr	r3, [pc, #28]	; (8006490 <GPS_Management+0xdc>)
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	4b07      	ldr	r3, [pc, #28]	; (8006494 <GPS_Management+0xe0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	1ad3      	subs	r3, r2, r3
 800647a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800647e:	4293      	cmp	r3, r2
 8006480:	d902      	bls.n	8006488 <GPS_Management+0xd4>
		{
			TabGen[GPS_ON] = 1;
 8006482:	4b02      	ldr	r3, [pc, #8]	; (800648c <GPS_Management+0xd8>)
 8006484:	2201      	movs	r2, #1
 8006486:	605a      	str	r2, [r3, #4]
		}
	}
}
 8006488:	bf00      	nop
 800648a:	bd80      	pop	{r7, pc}
 800648c:	200024d4 	.word	0x200024d4
 8006490:	20000b5c 	.word	0x20000b5c
 8006494:	200027fc 	.word	0x200027fc
 8006498:	000927c0 	.word	0x000927c0

0800649c <Task_USB_Configuration>:

extern uint8_t nb_parametre;
extern uint8_t received_data[64];
extern struct config_data c1;
void Task_USB_Configuration(void)
{
 800649c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a0:	b0be      	sub	sp, #248	; 0xf8
 80064a2:	af0e      	add	r7, sp, #56	; 0x38
	uint8_t len = sizeof(received_data);
 80064a4:	2340      	movs	r3, #64	; 0x40
 80064a6:	f887 30ba 	strb.w	r3, [r7, #186]	; 0xba
	uint8_t count = 0;
 80064aa:	2300      	movs	r3, #0
 80064ac:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb

	if (len > 0)
 80064b0:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 8322 	beq.w	8006afe <Task_USB_Configuration+0x662>
	{
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 80064ba:	e004      	b.n	80064c6 <Task_USB_Configuration+0x2a>
				&& (count < len))
		{
			count++;
 80064bc:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80064c0:	3301      	adds	r3, #1
 80064c2:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 80064c6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80064ca:	4aa0      	ldr	r2, [pc, #640]	; (800674c <Task_USB_Configuration+0x2b0>)
 80064cc:	5cd3      	ldrb	r3, [r2, r3]
 80064ce:	2b72      	cmp	r3, #114	; 0x72
 80064d0:	d00b      	beq.n	80064ea <Task_USB_Configuration+0x4e>
 80064d2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80064d6:	4a9d      	ldr	r2, [pc, #628]	; (800674c <Task_USB_Configuration+0x2b0>)
 80064d8:	5cd3      	ldrb	r3, [r2, r3]
 80064da:	2b77      	cmp	r3, #119	; 0x77
 80064dc:	d005      	beq.n	80064ea <Task_USB_Configuration+0x4e>
				&& (count < len))
 80064de:	f897 20bb 	ldrb.w	r2, [r7, #187]	; 0xbb
 80064e2:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d3e8      	bcc.n	80064bc <Task_USB_Configuration+0x20>
		}
		if ((received_data[count] == 'r') && (received_data[count + 1] == 'e')
 80064ea:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80064ee:	4a97      	ldr	r2, [pc, #604]	; (800674c <Task_USB_Configuration+0x2b0>)
 80064f0:	5cd3      	ldrb	r3, [r2, r3]
 80064f2:	2b72      	cmp	r3, #114	; 0x72
 80064f4:	f040 80c8 	bne.w	8006688 <Task_USB_Configuration+0x1ec>
 80064f8:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80064fc:	3301      	adds	r3, #1
 80064fe:	4a93      	ldr	r2, [pc, #588]	; (800674c <Task_USB_Configuration+0x2b0>)
 8006500:	5cd3      	ldrb	r3, [r2, r3]
 8006502:	2b65      	cmp	r3, #101	; 0x65
 8006504:	f040 80c0 	bne.w	8006688 <Task_USB_Configuration+0x1ec>
				&& (received_data[count + 2] == 'a')
 8006508:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800650c:	3302      	adds	r3, #2
 800650e:	4a8f      	ldr	r2, [pc, #572]	; (800674c <Task_USB_Configuration+0x2b0>)
 8006510:	5cd3      	ldrb	r3, [r2, r3]
 8006512:	2b61      	cmp	r3, #97	; 0x61
 8006514:	f040 80b8 	bne.w	8006688 <Task_USB_Configuration+0x1ec>
				&& (received_data[count + 3] == 'd'))
 8006518:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800651c:	3303      	adds	r3, #3
 800651e:	4a8b      	ldr	r2, [pc, #556]	; (800674c <Task_USB_Configuration+0x2b0>)
 8006520:	5cd3      	ldrb	r3, [r2, r3]
 8006522:	2b64      	cmp	r3, #100	; 0x64
 8006524:	f040 80b0 	bne.w	8006688 <Task_USB_Configuration+0x1ec>
		{
 8006528:	466b      	mov	r3, sp
 800652a:	4698      	mov	r8, r3
			uint8_t buffer[] = "ID SIGFOX + Vbat";
 800652c:	4b88      	ldr	r3, [pc, #544]	; (8006750 <Task_USB_Configuration+0x2b4>)
 800652e:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8006532:	461d      	mov	r5, r3
 8006534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	7023      	strb	r3, [r4, #0]
			uint8_t send_buffer2[nb_parametre];
 800653c:	4b85      	ldr	r3, [pc, #532]	; (8006754 <Task_USB_Configuration+0x2b8>)
 800653e:	781c      	ldrb	r4, [r3, #0]
 8006540:	4623      	mov	r3, r4
 8006542:	3b01      	subs	r3, #1
 8006544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006548:	b2e0      	uxtb	r0, r4
 800654a:	f04f 0100 	mov.w	r1, #0
 800654e:	f04f 0200 	mov.w	r2, #0
 8006552:	f04f 0300 	mov.w	r3, #0
 8006556:	00cb      	lsls	r3, r1, #3
 8006558:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800655c:	00c2      	lsls	r2, r0, #3
 800655e:	b2e0      	uxtb	r0, r4
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	f04f 0200 	mov.w	r2, #0
 8006568:	f04f 0300 	mov.w	r3, #0
 800656c:	00cb      	lsls	r3, r1, #3
 800656e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006572:	00c2      	lsls	r2, r0, #3
 8006574:	4623      	mov	r3, r4
 8006576:	3307      	adds	r3, #7
 8006578:	08db      	lsrs	r3, r3, #3
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	ebad 0d03 	sub.w	sp, sp, r3
 8006580:	ab0e      	add	r3, sp, #56	; 0x38
 8006582:	3300      	adds	r3, #0
 8006584:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			uint8_t send_buffer3[64];
			CDC_Transmit_FS(buffer, sizeof(buffer));
 8006588:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800658c:	2111      	movs	r1, #17
 800658e:	4618      	mov	r0, r3
 8006590:	f7fb f8c0 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 8006594:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 8006598:	461a      	mov	r2, r3
 800659a:	2100      	movs	r1, #0
 800659c:	486b      	ldr	r0, [pc, #428]	; (800674c <Task_USB_Configuration+0x2b0>)
 800659e:	f010 f901 	bl	80167a4 <memset>
			vibration_LBL(1, 0, 200);
 80065a2:	22c8      	movs	r2, #200	; 0xc8
 80065a4:	2100      	movs	r1, #0
 80065a6:	2001      	movs	r0, #1
 80065a8:	f003 f95e 	bl	8009868 <vibration_LBL>
			ee_init();
 80065ac:	f7fc fa8c 	bl	8002ac8 <ee_init>
			ee_read(0, sizeof(send_buffer2), send_buffer2);
 80065b0:	4621      	mov	r1, r4
 80065b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065b6:	461a      	mov	r2, r3
 80065b8:	2000      	movs	r0, #0
 80065ba:	f7fc facb 	bl	8002b54 <ee_read>
			sprintf(send_buffer3,
					"CONFIG,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d",
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 80065be:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065c2:	781b      	ldrb	r3, [r3, #0]
			sprintf(send_buffer3,
 80065c4:	469c      	mov	ip, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 80065c6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065ca:	785b      	ldrb	r3, [r3, #1]
			sprintf(send_buffer3,
 80065cc:	469e      	mov	lr, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 80065ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065d2:	789b      	ldrb	r3, [r3, #2]
			sprintf(send_buffer3,
 80065d4:	461c      	mov	r4, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 80065d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065da:	78db      	ldrb	r3, [r3, #3]
			sprintf(send_buffer3,
 80065dc:	461d      	mov	r5, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 80065de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065e2:	791b      	ldrb	r3, [r3, #4]
			sprintf(send_buffer3,
 80065e4:	461e      	mov	r6, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 80065e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065ea:	795b      	ldrb	r3, [r3, #5]
			sprintf(send_buffer3,
 80065ec:	61fb      	str	r3, [r7, #28]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 80065ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065f2:	799b      	ldrb	r3, [r3, #6]
			sprintf(send_buffer3,
 80065f4:	61bb      	str	r3, [r7, #24]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 80065f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80065fa:	79db      	ldrb	r3, [r3, #7]
			sprintf(send_buffer3,
 80065fc:	617b      	str	r3, [r7, #20]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 80065fe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006602:	7a1b      	ldrb	r3, [r3, #8]
			sprintf(send_buffer3,
 8006604:	613b      	str	r3, [r7, #16]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8006606:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800660a:	7a5b      	ldrb	r3, [r3, #9]
			sprintf(send_buffer3,
 800660c:	60fb      	str	r3, [r7, #12]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 800660e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006612:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(send_buffer3,
 8006614:	60bb      	str	r3, [r7, #8]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8006616:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800661a:	7adb      	ldrb	r3, [r3, #11]
			sprintf(send_buffer3,
 800661c:	607b      	str	r3, [r7, #4]
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 800661e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006622:	7b1b      	ldrb	r3, [r3, #12]
			sprintf(send_buffer3,
 8006624:	4619      	mov	r1, r3
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 8006626:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800662a:	7b5b      	ldrb	r3, [r3, #13]
			sprintf(send_buffer3,
 800662c:	461a      	mov	r2, r3
					send_buffer2[12], send_buffer2[13], send_buffer2[14]);
 800662e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006632:	7b9b      	ldrb	r3, [r3, #14]
			sprintf(send_buffer3,
 8006634:	f107 0020 	add.w	r0, r7, #32
 8006638:	930c      	str	r3, [sp, #48]	; 0x30
 800663a:	920b      	str	r2, [sp, #44]	; 0x2c
 800663c:	910a      	str	r1, [sp, #40]	; 0x28
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	9209      	str	r2, [sp, #36]	; 0x24
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	9208      	str	r2, [sp, #32]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	9207      	str	r2, [sp, #28]
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	9206      	str	r2, [sp, #24]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	9205      	str	r2, [sp, #20]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	9204      	str	r2, [sp, #16]
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	9602      	str	r6, [sp, #8]
 800665c:	9501      	str	r5, [sp, #4]
 800665e:	9400      	str	r4, [sp, #0]
 8006660:	4673      	mov	r3, lr
 8006662:	4662      	mov	r2, ip
 8006664:	493c      	ldr	r1, [pc, #240]	; (8006758 <Task_USB_Configuration+0x2bc>)
 8006666:	f010 fd7d 	bl	8017164 <siprintf>
			CDC_Transmit_FS(send_buffer3, strlen(send_buffer3));
 800666a:	f107 0320 	add.w	r3, r7, #32
 800666e:	4618      	mov	r0, r3
 8006670:	f7f9 fdae 	bl	80001d0 <strlen>
 8006674:	4602      	mov	r2, r0
 8006676:	f107 0320 	add.w	r3, r7, #32
 800667a:	4611      	mov	r1, r2
 800667c:	4618      	mov	r0, r3
 800667e:	f7fb f849 	bl	8001714 <CDC_Transmit_FS>
 8006682:	46c5      	mov	sp, r8
		{
 8006684:	bf00      	nop
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
			CDC_Transmit_FS(send_buffer, strlen(send_buffer));
		}
	}
}
 8006686:	e23a      	b.n	8006afe <Task_USB_Configuration+0x662>
		else if ((received_data[count] == 'w')
 8006688:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800668c:	4a2f      	ldr	r2, [pc, #188]	; (800674c <Task_USB_Configuration+0x2b0>)
 800668e:	5cd3      	ldrb	r3, [r2, r3]
 8006690:	2b77      	cmp	r3, #119	; 0x77
 8006692:	f040 8234 	bne.w	8006afe <Task_USB_Configuration+0x662>
				&& (received_data[count + 1] == 'r')
 8006696:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 800669a:	3301      	adds	r3, #1
 800669c:	4a2b      	ldr	r2, [pc, #172]	; (800674c <Task_USB_Configuration+0x2b0>)
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	2b72      	cmp	r3, #114	; 0x72
 80066a2:	f040 822c 	bne.w	8006afe <Task_USB_Configuration+0x662>
				&& (received_data[count + 2] == 'i')
 80066a6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80066aa:	3302      	adds	r3, #2
 80066ac:	4a27      	ldr	r2, [pc, #156]	; (800674c <Task_USB_Configuration+0x2b0>)
 80066ae:	5cd3      	ldrb	r3, [r2, r3]
 80066b0:	2b69      	cmp	r3, #105	; 0x69
 80066b2:	f040 8224 	bne.w	8006afe <Task_USB_Configuration+0x662>
				&& (received_data[count + 3] == 't')
 80066b6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80066ba:	3303      	adds	r3, #3
 80066bc:	4a23      	ldr	r2, [pc, #140]	; (800674c <Task_USB_Configuration+0x2b0>)
 80066be:	5cd3      	ldrb	r3, [r2, r3]
 80066c0:	2b74      	cmp	r3, #116	; 0x74
 80066c2:	f040 821c 	bne.w	8006afe <Task_USB_Configuration+0x662>
				&& (received_data[count + 4] == 'e'))
 80066c6:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80066ca:	3304      	adds	r3, #4
 80066cc:	4a1f      	ldr	r2, [pc, #124]	; (800674c <Task_USB_Configuration+0x2b0>)
 80066ce:	5cd3      	ldrb	r3, [r2, r3]
 80066d0:	2b65      	cmp	r3, #101	; 0x65
 80066d2:	f040 8214 	bne.w	8006afe <Task_USB_Configuration+0x662>
		{
 80066d6:	466b      	mov	r3, sp
 80066d8:	4698      	mov	r8, r3
			vibration_LBL(1, 0, 200);
 80066da:	22c8      	movs	r2, #200	; 0xc8
 80066dc:	2100      	movs	r1, #0
 80066de:	2001      	movs	r0, #1
 80066e0:	f003 f8c2 	bl	8009868 <vibration_LBL>
			int tabint[nb_parametre];
 80066e4:	4b1b      	ldr	r3, [pc, #108]	; (8006754 <Task_USB_Configuration+0x2b8>)
 80066e6:	781c      	ldrb	r4, [r3, #0]
 80066e8:	4623      	mov	r3, r4
 80066ea:	3b01      	subs	r3, #1
 80066ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066f0:	b2e0      	uxtb	r0, r4
 80066f2:	f04f 0100 	mov.w	r1, #0
 80066f6:	f04f 0200 	mov.w	r2, #0
 80066fa:	f04f 0300 	mov.w	r3, #0
 80066fe:	014b      	lsls	r3, r1, #5
 8006700:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006704:	0142      	lsls	r2, r0, #5
 8006706:	b2e0      	uxtb	r0, r4
 8006708:	f04f 0100 	mov.w	r1, #0
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	014b      	lsls	r3, r1, #5
 8006716:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800671a:	0142      	lsls	r2, r0, #5
 800671c:	4623      	mov	r3, r4
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	3307      	adds	r3, #7
 8006722:	08db      	lsrs	r3, r3, #3
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	ebad 0d03 	sub.w	sp, sp, r3
 800672a:	ab0e      	add	r3, sp, #56	; 0x38
 800672c:	3303      	adds	r3, #3
 800672e:	089b      	lsrs	r3, r3, #2
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			unsigned char i = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
			config_data_received = strtok(received_data, ",");
 800673c:	4907      	ldr	r1, [pc, #28]	; (800675c <Task_USB_Configuration+0x2c0>)
 800673e:	4803      	ldr	r0, [pc, #12]	; (800674c <Task_USB_Configuration+0x2b0>)
 8006740:	f010 fd40 	bl	80171c4 <strtok>
 8006744:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			while (config_data_received != NULL)
 8006748:	e052      	b.n	80067f0 <Task_USB_Configuration+0x354>
 800674a:	bf00      	nop
 800674c:	200014bc 	.word	0x200014bc
 8006750:	08019f74 	.word	0x08019f74
 8006754:	20000778 	.word	0x20000778
 8006758:	08019f18 	.word	0x08019f18
 800675c:	08019f6c 	.word	0x08019f6c
			{
 8006760:	466b      	mov	r3, sp
 8006762:	461d      	mov	r5, r3
				unsigned char tabtemp2[nb_parametre];
 8006764:	4bab      	ldr	r3, [pc, #684]	; (8006a14 <Task_USB_Configuration+0x578>)
 8006766:	781c      	ldrb	r4, [r3, #0]
 8006768:	4623      	mov	r3, r4
 800676a:	3b01      	subs	r3, #1
 800676c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006770:	b2e0      	uxtb	r0, r4
 8006772:	f04f 0100 	mov.w	r1, #0
 8006776:	f04f 0200 	mov.w	r2, #0
 800677a:	f04f 0300 	mov.w	r3, #0
 800677e:	00cb      	lsls	r3, r1, #3
 8006780:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8006784:	00c2      	lsls	r2, r0, #3
 8006786:	b2e0      	uxtb	r0, r4
 8006788:	f04f 0100 	mov.w	r1, #0
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	f04f 0300 	mov.w	r3, #0
 8006794:	00cb      	lsls	r3, r1, #3
 8006796:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800679a:	00c2      	lsls	r2, r0, #3
 800679c:	4623      	mov	r3, r4
 800679e:	3307      	adds	r3, #7
 80067a0:	08db      	lsrs	r3, r3, #3
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	ebad 0d03 	sub.w	sp, sp, r3
 80067a8:	ab0e      	add	r3, sp, #56	; 0x38
 80067aa:	3300      	adds	r3, #0
 80067ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
				sprintf(tabtemp2, "%s", config_data_received);
 80067b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067b8:	4997      	ldr	r1, [pc, #604]	; (8006a18 <Task_USB_Configuration+0x57c>)
 80067ba:	4618      	mov	r0, r3
 80067bc:	f010 fcd2 	bl	8017164 <siprintf>
				tabint[i] = atoi(tabtemp2);
 80067c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80067c4:	f897 40b9 	ldrb.w	r4, [r7, #185]	; 0xb9
 80067c8:	4618      	mov	r0, r3
 80067ca:	f00f ffaf 	bl	801672c <atoi>
 80067ce:	4602      	mov	r2, r0
 80067d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067d4:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				config_data_received = strtok(NULL, ",");
 80067d8:	4990      	ldr	r1, [pc, #576]	; (8006a1c <Task_USB_Configuration+0x580>)
 80067da:	2000      	movs	r0, #0
 80067dc:	f010 fcf2 	bl	80171c4 <strtok>
 80067e0:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
				i++;
 80067e4:	f897 30b9 	ldrb.w	r3, [r7, #185]	; 0xb9
 80067e8:	3301      	adds	r3, #1
 80067ea:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
 80067ee:	46ad      	mov	sp, r5
			while (config_data_received != NULL)
 80067f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d1b3      	bne.n	8006760 <Task_USB_Configuration+0x2c4>
			c1.tps_immo = tabint[1];
 80067f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	4b87      	ldr	r3, [pc, #540]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006802:	701a      	strb	r2, [r3, #0]
			c1.tps_PerteDeVerticalite = tabint[2];
 8006804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	b2da      	uxtb	r2, r3
 800680c:	4b84      	ldr	r3, [pc, #528]	; (8006a20 <Task_USB_Configuration+0x584>)
 800680e:	705a      	strb	r2, [r3, #1]
			c1.tps_GPS_ON = tabint[3];
 8006810:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	b2da      	uxtb	r2, r3
 8006818:	4b81      	ldr	r3, [pc, #516]	; (8006a20 <Task_USB_Configuration+0x584>)
 800681a:	709a      	strb	r2, [r3, #2]
			c1.tps_GPS_OFF = tabint[4];
 800681c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	b2da      	uxtb	r2, r3
 8006824:	4b7e      	ldr	r3, [pc, #504]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006826:	70da      	strb	r2, [r3, #3]
			c1.tps_Alarme = tabint[5];
 8006828:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	b2da      	uxtb	r2, r3
 8006830:	4b7b      	ldr	r3, [pc, #492]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006832:	711a      	strb	r2, [r3, #4]
			c1.chute_Actif = tabint[6];
 8006834:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	b2da      	uxtb	r2, r3
 800683c:	4b78      	ldr	r3, [pc, #480]	; (8006a20 <Task_USB_Configuration+0x584>)
 800683e:	715a      	strb	r2, [r3, #5]
			c1.malaise_Actif = tabint[7];
 8006840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006844:	69db      	ldr	r3, [r3, #28]
 8006846:	b2da      	uxtb	r2, r3
 8006848:	4b75      	ldr	r3, [pc, #468]	; (8006a20 <Task_USB_Configuration+0x584>)
 800684a:	719a      	strb	r2, [r3, #6]
			c1.com_sigfox = tabint[8];
 800684c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006850:	6a1b      	ldr	r3, [r3, #32]
 8006852:	b2da      	uxtb	r2, r3
 8006854:	4b72      	ldr	r3, [pc, #456]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006856:	71da      	strb	r2, [r3, #7]
			c1.com_LoRa = tabint[9];
 8006858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800685c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685e:	b2da      	uxtb	r2, r3
 8006860:	4b6f      	ldr	r3, [pc, #444]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006862:	721a      	strb	r2, [r3, #8]
			c1.GPS_Actif = tabint[10];
 8006864:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800686a:	b2da      	uxtb	r2, r3
 800686c:	4b6c      	ldr	r3, [pc, #432]	; (8006a20 <Task_USB_Configuration+0x584>)
 800686e:	725a      	strb	r2, [r3, #9]
			c1.Immo_Actif = tabint[11];
 8006870:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006876:	b2da      	uxtb	r2, r3
 8006878:	4b69      	ldr	r3, [pc, #420]	; (8006a20 <Task_USB_Configuration+0x584>)
 800687a:	729a      	strb	r2, [r3, #10]
			c1.Verti_Actif = tabint[12];
 800687c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006882:	b2da      	uxtb	r2, r3
 8006884:	4b66      	ldr	r3, [pc, #408]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006886:	72da      	strb	r2, [r3, #11]
			c1.Sensibilite_chute = tabint[13];
 8006888:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800688c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800688e:	b2da      	uxtb	r2, r3
 8006890:	4b63      	ldr	r3, [pc, #396]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006892:	731a      	strb	r2, [r3, #12]
			c1.tps_chute = tabint[14];
 8006894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800689a:	b2da      	uxtb	r2, r3
 800689c:	4b60      	ldr	r3, [pc, #384]	; (8006a20 <Task_USB_Configuration+0x584>)
 800689e:	735a      	strb	r2, [r3, #13]
			c1.Angle = tabint[15];
 80068a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80068a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	4b5d      	ldr	r3, [pc, #372]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068aa:	739a      	strb	r2, [r3, #14]
			uint8_t buffer[] = "config ok";
 80068ac:	4a5d      	ldr	r2, [pc, #372]	; (8006a24 <Task_USB_Configuration+0x588>)
 80068ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80068b4:	c303      	stmia	r3!, {r0, r1}
 80068b6:	801a      	strh	r2, [r3, #0]
			CDC_Transmit_FS(buffer, sizeof(buffer));
 80068b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80068bc:	210a      	movs	r1, #10
 80068be:	4618      	mov	r0, r3
 80068c0:	f7fa ff28 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 80068c4:	f897 30ba 	ldrb.w	r3, [r7, #186]	; 0xba
 80068c8:	461a      	mov	r2, r3
 80068ca:	2100      	movs	r1, #0
 80068cc:	4856      	ldr	r0, [pc, #344]	; (8006a28 <Task_USB_Configuration+0x58c>)
 80068ce:	f00f ff69 	bl	80167a4 <memset>
			ee_init();
 80068d2:	f7fc f8f9 	bl	8002ac8 <ee_init>
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 80068d6:	4b52      	ldr	r3, [pc, #328]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
			uint8_t d[] =
 80068da:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 80068de:	4b50      	ldr	r3, [pc, #320]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068e0:	785b      	ldrb	r3, [r3, #1]
			uint8_t d[] =
 80068e2:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 80068e6:	4b4e      	ldr	r3, [pc, #312]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068e8:	789b      	ldrb	r3, [r3, #2]
			uint8_t d[] =
 80068ea:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 80068ee:	4b4c      	ldr	r3, [pc, #304]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068f0:	78db      	ldrb	r3, [r3, #3]
			uint8_t d[] =
 80068f2:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 80068f6:	4b4a      	ldr	r3, [pc, #296]	; (8006a20 <Task_USB_Configuration+0x584>)
 80068f8:	791b      	ldrb	r3, [r3, #4]
			uint8_t d[] =
 80068fa:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif,
 80068fe:	4b48      	ldr	r3, [pc, #288]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006900:	795b      	ldrb	r3, [r3, #5]
			uint8_t d[] =
 8006902:	f887 3075 	strb.w	r3, [r7, #117]	; 0x75
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 8006906:	4b46      	ldr	r3, [pc, #280]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006908:	799b      	ldrb	r3, [r3, #6]
			uint8_t d[] =
 800690a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 800690e:	4b44      	ldr	r3, [pc, #272]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006910:	79db      	ldrb	r3, [r3, #7]
			uint8_t d[] =
 8006912:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 8006916:	4b42      	ldr	r3, [pc, #264]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006918:	7a1b      	ldrb	r3, [r3, #8]
			uint8_t d[] =
 800691a:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78
					c1.malaise_Actif, c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif,
 800691e:	4b40      	ldr	r3, [pc, #256]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006920:	7a5b      	ldrb	r3, [r3, #9]
			uint8_t d[] =
 8006922:	f887 3079 	strb.w	r3, [r7, #121]	; 0x79
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 8006926:	4b3e      	ldr	r3, [pc, #248]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006928:	7a9b      	ldrb	r3, [r3, #10]
			uint8_t d[] =
 800692a:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 800692e:	4b3c      	ldr	r3, [pc, #240]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006930:	7adb      	ldrb	r3, [r3, #11]
			uint8_t d[] =
 8006932:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
					c1.Immo_Actif, c1.Verti_Actif, c1.Sensibilite_chute,
 8006936:	4b3a      	ldr	r3, [pc, #232]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006938:	7b1b      	ldrb	r3, [r3, #12]
			uint8_t d[] =
 800693a:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
					c1.tps_chute, c1.Angle};
 800693e:	4b38      	ldr	r3, [pc, #224]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006940:	7b5b      	ldrb	r3, [r3, #13]
			uint8_t d[] =
 8006942:	f887 307d 	strb.w	r3, [r7, #125]	; 0x7d
					c1.tps_chute, c1.Angle};
 8006946:	4b36      	ldr	r3, [pc, #216]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006948:	7b9b      	ldrb	r3, [r3, #14]
			uint8_t d[] =
 800694a:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
			ee_read(0, sizeof(d), dr);
 800694e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006952:	461a      	mov	r2, r3
 8006954:	210f      	movs	r1, #15
 8006956:	2000      	movs	r0, #0
 8006958:	f7fc f8fc 	bl	8002b54 <ee_read>
			if ((c1.tps_immo != dr[0]) || (c1.tps_PerteDeVerticalite != dr[1])
 800695c:	4b30      	ldr	r3, [pc, #192]	; (8006a20 <Task_USB_Configuration+0x584>)
 800695e:	781a      	ldrb	r2, [r3, #0]
 8006960:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8006964:	429a      	cmp	r2, r3
 8006966:	d161      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 8006968:	4b2d      	ldr	r3, [pc, #180]	; (8006a20 <Task_USB_Configuration+0x584>)
 800696a:	785a      	ldrb	r2, [r3, #1]
 800696c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8006970:	429a      	cmp	r2, r3
 8006972:	d15b      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.tps_GPS_ON != dr[2]) || (c1.tps_GPS_OFF != dr[3])
 8006974:	4b2a      	ldr	r3, [pc, #168]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006976:	789a      	ldrb	r2, [r3, #2]
 8006978:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800697c:	429a      	cmp	r2, r3
 800697e:	d155      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 8006980:	4b27      	ldr	r3, [pc, #156]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006982:	78da      	ldrb	r2, [r3, #3]
 8006984:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006988:	429a      	cmp	r2, r3
 800698a:	d14f      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.tps_Alarme != dr[4]) || (c1.chute_Actif != dr[5])
 800698c:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <Task_USB_Configuration+0x584>)
 800698e:	791a      	ldrb	r2, [r3, #4]
 8006990:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8006994:	429a      	cmp	r2, r3
 8006996:	d149      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 8006998:	4b21      	ldr	r3, [pc, #132]	; (8006a20 <Task_USB_Configuration+0x584>)
 800699a:	795a      	ldrb	r2, [r3, #5]
 800699c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80069a0:	429a      	cmp	r2, r3
 80069a2:	d143      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.malaise_Actif != dr[6]) || (c1.com_sigfox != dr[7])
 80069a4:	4b1e      	ldr	r3, [pc, #120]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069a6:	799a      	ldrb	r2, [r3, #6]
 80069a8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d13d      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 80069b0:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069b2:	79da      	ldrb	r2, [r3, #7]
 80069b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d137      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.com_LoRa != dr[8]) || (c1.GPS_Actif != dr[9])
 80069bc:	4b18      	ldr	r3, [pc, #96]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069be:	7a1a      	ldrb	r2, [r3, #8]
 80069c0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d131      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069ca:	7a5a      	ldrb	r2, [r3, #9]
 80069cc:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d12b      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.Immo_Actif != dr[10]) || (c1.Verti_Actif != dr[11])
 80069d4:	4b12      	ldr	r3, [pc, #72]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069d6:	7a9a      	ldrb	r2, [r3, #10]
 80069d8:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
 80069dc:	429a      	cmp	r2, r3
 80069de:	d125      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 80069e0:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069e2:	7ada      	ldrb	r2, [r3, #11]
 80069e4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d11f      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.Sensibilite_chute != dr[12])
 80069ec:	4b0c      	ldr	r3, [pc, #48]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069ee:	7b1a      	ldrb	r2, [r3, #12]
 80069f0:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d119      	bne.n	8006a2c <Task_USB_Configuration+0x590>
					|| (c1.tps_chute != dr[13]) || (c1.Angle != dr[14]))
 80069f8:	4b09      	ldr	r3, [pc, #36]	; (8006a20 <Task_USB_Configuration+0x584>)
 80069fa:	7b5a      	ldrb	r2, [r3, #13]
 80069fc:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d113      	bne.n	8006a2c <Task_USB_Configuration+0x590>
 8006a04:	4b06      	ldr	r3, [pc, #24]	; (8006a20 <Task_USB_Configuration+0x584>)
 8006a06:	7b9a      	ldrb	r2, [r3, #14]
 8006a08:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d01b      	beq.n	8006a48 <Task_USB_Configuration+0x5ac>
 8006a10:	e00c      	b.n	8006a2c <Task_USB_Configuration+0x590>
 8006a12:	bf00      	nop
 8006a14:	20000778 	.word	0x20000778
 8006a18:	08019f70 	.word	0x08019f70
 8006a1c:	08019f6c 	.word	0x08019f6c
 8006a20:	200010b4 	.word	0x200010b4
 8006a24:	08019f88 	.word	0x08019f88
 8006a28:	200014bc 	.word	0x200014bc
				ee_writeToRam(0, sizeof(d), d);
 8006a2c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006a30:	461a      	mov	r2, r3
 8006a32:	210f      	movs	r1, #15
 8006a34:	2000      	movs	r0, #0
 8006a36:	f7fc f9a7 	bl	8002d88 <ee_writeToRam>
				ee_commit();
 8006a3a:	f7fc f9c7 	bl	8002dcc <ee_commit>
				vibration_LBL(2, 200, 200);
 8006a3e:	22c8      	movs	r2, #200	; 0xc8
 8006a40:	21c8      	movs	r1, #200	; 0xc8
 8006a42:	2002      	movs	r0, #2
 8006a44:	f002 ff10 	bl	8009868 <vibration_LBL>
			ee_read(0, sizeof(d), dr);
 8006a48:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	210f      	movs	r1, #15
 8006a50:	2000      	movs	r0, #0
 8006a52:	f7fc f87f 	bl	8002b54 <ee_read>
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a56:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
			sprintf(send_buffer,
 8006a5a:	469c      	mov	ip, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a5c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
			sprintf(send_buffer,
 8006a60:	469e      	mov	lr, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a62:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
			sprintf(send_buffer,
 8006a66:	461c      	mov	r4, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a68:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
			sprintf(send_buffer,
 8006a6c:	461d      	mov	r5, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a6e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
			sprintf(send_buffer,
 8006a72:	461e      	mov	r6, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a74:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
			sprintf(send_buffer,
 8006a78:	61fb      	str	r3, [r7, #28]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a7a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
			sprintf(send_buffer,
 8006a7e:	61bb      	str	r3, [r7, #24]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8006a80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
			sprintf(send_buffer,
 8006a84:	617b      	str	r3, [r7, #20]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006a86:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
			sprintf(send_buffer,
 8006a8a:	613b      	str	r3, [r7, #16]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006a8c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
			sprintf(send_buffer,
 8006a90:	60fb      	str	r3, [r7, #12]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006a92:	f897 306a 	ldrb.w	r3, [r7, #106]	; 0x6a
			sprintf(send_buffer,
 8006a96:	60bb      	str	r3, [r7, #8]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006a98:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
			sprintf(send_buffer,
 8006a9c:	607b      	str	r3, [r7, #4]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006a9e:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
			sprintf(send_buffer,
 8006aa2:	4619      	mov	r1, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006aa4:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
			sprintf(send_buffer,
 8006aa8:	461a      	mov	r2, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14]);
 8006aaa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
			sprintf(send_buffer,
 8006aae:	f107 0020 	add.w	r0, r7, #32
 8006ab2:	930c      	str	r3, [sp, #48]	; 0x30
 8006ab4:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ab6:	910a      	str	r1, [sp, #40]	; 0x28
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	9209      	str	r2, [sp, #36]	; 0x24
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	9208      	str	r2, [sp, #32]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	9207      	str	r2, [sp, #28]
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	9206      	str	r2, [sp, #24]
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	9205      	str	r2, [sp, #20]
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	9204      	str	r2, [sp, #16]
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	9303      	str	r3, [sp, #12]
 8006ad4:	9602      	str	r6, [sp, #8]
 8006ad6:	9501      	str	r5, [sp, #4]
 8006ad8:	9400      	str	r4, [sp, #0]
 8006ada:	4673      	mov	r3, lr
 8006adc:	4662      	mov	r2, ip
 8006ade:	490a      	ldr	r1, [pc, #40]	; (8006b08 <Task_USB_Configuration+0x66c>)
 8006ae0:	f010 fb40 	bl	8017164 <siprintf>
			CDC_Transmit_FS(send_buffer, strlen(send_buffer));
 8006ae4:	f107 0320 	add.w	r3, r7, #32
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7f9 fb71 	bl	80001d0 <strlen>
 8006aee:	4602      	mov	r2, r0
 8006af0:	f107 0320 	add.w	r3, r7, #32
 8006af4:	4611      	mov	r1, r2
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fa fe0c 	bl	8001714 <CDC_Transmit_FS>
 8006afc:	46c5      	mov	sp, r8
}
 8006afe:	bf00      	nop
 8006b00:	37c0      	adds	r7, #192	; 0xc0
 8006b02:	46bd      	mov	sp, r7
 8006b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b08:	08019f18 	.word	0x08019f18

08006b0c <u8g2_DrawHXBM>:
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b086      	sub	sp, #24
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	4608      	mov	r0, r1
 8006b16:	4611      	mov	r1, r2
 8006b18:	461a      	mov	r2, r3
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	70fb      	strb	r3, [r7, #3]
 8006b1e:	460b      	mov	r3, r1
 8006b20:	70bb      	strb	r3, [r7, #2]
 8006b22:	4613      	mov	r3, r2
 8006b24:	707b      	strb	r3, [r7, #1]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8006b2c:	73bb      	strb	r3, [r7, #14]
 8006b2e:	7bbb      	ldrb	r3, [r7, #14]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	bf0c      	ite	eq
 8006b34:	2301      	moveq	r3, #1
 8006b36:	2300      	movne	r3, #0
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	737b      	strb	r3, [r7, #13]
 8006b3c:	78fa      	ldrb	r2, [r7, #3]
 8006b3e:	787b      	ldrb	r3, [r7, #1]
 8006b40:	4413      	add	r3, r2
 8006b42:	b2d8      	uxtb	r0, r3
 8006b44:	78bb      	ldrb	r3, [r7, #2]
 8006b46:	3301      	adds	r3, #1
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	78ba      	ldrb	r2, [r7, #2]
 8006b4c:	78f9      	ldrb	r1, [r7, #3]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4603      	mov	r3, r0
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f001 f853 	bl	8007bfe <u8g2_IsIntersection>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d040      	beq.n	8006be0 <u8g2_DrawHXBM+0xd4>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	73fb      	strb	r3, [r7, #15]
 8006b62:	e035      	b.n	8006bd0 <u8g2_DrawHXBM+0xc4>
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	781a      	ldrb	r2, [r3, #0]
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	b2db      	uxtb	r3, r3
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d00c      	beq.n	8006b8c <u8g2_DrawHXBM+0x80>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	7bba      	ldrb	r2, [r7, #14]
 8006b76:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8006b7a:	78ba      	ldrb	r2, [r7, #2]
 8006b7c:	78f9      	ldrb	r1, [r7, #3]
 8006b7e:	2300      	movs	r3, #0
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	2301      	movs	r3, #1
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 ff84 	bl	8007a92 <u8g2_DrawHVLine>
 8006b8a:	e010      	b.n	8006bae <u8g2_DrawHXBM+0xa2>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10b      	bne.n	8006bae <u8g2_DrawHXBM+0xa2>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	7b7a      	ldrb	r2, [r7, #13]
 8006b9a:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8006b9e:	78ba      	ldrb	r2, [r7, #2]
 8006ba0:	78f9      	ldrb	r1, [r7, #3]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 ff72 	bl	8007a92 <u8g2_DrawHVLine>
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	70fb      	strb	r3, [r7, #3]
 8006bb4:	7bfb      	ldrb	r3, [r7, #15]
 8006bb6:	005b      	lsls	r3, r3, #1
 8006bb8:	73fb      	strb	r3, [r7, #15]
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <u8g2_DrawHXBM+0xbe>
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	73fb      	strb	r3, [r7, #15]
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	61bb      	str	r3, [r7, #24]
 8006bca:	787b      	ldrb	r3, [r7, #1]
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	707b      	strb	r3, [r7, #1]
 8006bd0:	787b      	ldrb	r3, [r7, #1]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1c6      	bne.n	8006b64 <u8g2_DrawHXBM+0x58>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	7bba      	ldrb	r2, [r7, #14]
 8006bda:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8006bde:	e000      	b.n	8006be2 <u8g2_DrawHXBM+0xd6>
 8006be0:	bf00      	nop
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}

08006be8 <u8g2_DrawXBM>:
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b086      	sub	sp, #24
 8006bec:	af02      	add	r7, sp, #8
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	4611      	mov	r1, r2
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	70fb      	strb	r3, [r7, #3]
 8006bfa:	460b      	mov	r3, r1
 8006bfc:	70bb      	strb	r3, [r7, #2]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	707b      	strb	r3, [r7, #1]
 8006c02:	787b      	ldrb	r3, [r7, #1]
 8006c04:	73fb      	strb	r3, [r7, #15]
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	3307      	adds	r3, #7
 8006c0a:	73fb      	strb	r3, [r7, #15]
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	08db      	lsrs	r3, r3, #3
 8006c10:	73fb      	strb	r3, [r7, #15]
 8006c12:	78fa      	ldrb	r2, [r7, #3]
 8006c14:	787b      	ldrb	r3, [r7, #1]
 8006c16:	4413      	add	r3, r2
 8006c18:	b2d8      	uxtb	r0, r3
 8006c1a:	78ba      	ldrb	r2, [r7, #2]
 8006c1c:	7e3b      	ldrb	r3, [r7, #24]
 8006c1e:	4413      	add	r3, r2
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	78ba      	ldrb	r2, [r7, #2]
 8006c24:	78f9      	ldrb	r1, [r7, #3]
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	4603      	mov	r3, r0
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 ffe7 	bl	8007bfe <u8g2_IsIntersection>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d017      	beq.n	8006c66 <u8g2_DrawXBM+0x7e>
 8006c36:	e012      	b.n	8006c5e <u8g2_DrawXBM+0x76>
 8006c38:	7878      	ldrb	r0, [r7, #1]
 8006c3a:	78ba      	ldrb	r2, [r7, #2]
 8006c3c:	78f9      	ldrb	r1, [r7, #3]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	4603      	mov	r3, r0
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff ff61 	bl	8006b0c <u8g2_DrawHXBM>
 8006c4a:	7bfb      	ldrb	r3, [r7, #15]
 8006c4c:	69fa      	ldr	r2, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	61fb      	str	r3, [r7, #28]
 8006c52:	78bb      	ldrb	r3, [r7, #2]
 8006c54:	3301      	adds	r3, #1
 8006c56:	70bb      	strb	r3, [r7, #2]
 8006c58:	7e3b      	ldrb	r3, [r7, #24]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	763b      	strb	r3, [r7, #24]
 8006c5e:	7e3b      	ldrb	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1e9      	bne.n	8006c38 <u8g2_DrawXBM+0x50>
 8006c64:	e000      	b.n	8006c68 <u8g2_DrawXBM+0x80>
 8006c66:	bf00      	nop
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <u8g2_ClearBuffer>:
 8006c6e:	b580      	push	{r7, lr}
 8006c70:	b084      	sub	sp, #16
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	7c1b      	ldrb	r3, [r3, #16]
 8006c7c:	60fb      	str	r3, [r7, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c84:	461a      	mov	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	fb02 f303 	mul.w	r3, r2, r3
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	60fb      	str	r3, [r7, #12]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c98:	68fa      	ldr	r2, [r7, #12]
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f00f fd81 	bl	80167a4 <memset>
 8006ca2:	bf00      	nop
 8006ca4:	3710      	adds	r7, #16
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <u8g2_send_tile_row>:
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b086      	sub	sp, #24
 8006cae:	af02      	add	r7, sp, #8
 8006cb0:	6078      	str	r0, [r7, #4]
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	70fb      	strb	r3, [r7, #3]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	70bb      	strb	r3, [r7, #2]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	7c1b      	ldrb	r3, [r3, #16]
 8006cc0:	73fb      	strb	r3, [r7, #15]
 8006cc2:	78fb      	ldrb	r3, [r7, #3]
 8006cc4:	81bb      	strh	r3, [r7, #12]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cca:	60bb      	str	r3, [r7, #8]
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	89ba      	ldrh	r2, [r7, #12]
 8006cd2:	fb12 f303 	smulbb	r3, r2, r3
 8006cd6:	81bb      	strh	r3, [r7, #12]
 8006cd8:	89bb      	ldrh	r3, [r7, #12]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	81bb      	strh	r3, [r7, #12]
 8006cde:	89bb      	ldrh	r3, [r7, #12]
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	60bb      	str	r3, [r7, #8]
 8006ce6:	7bf9      	ldrb	r1, [r7, #15]
 8006ce8:	78ba      	ldrb	r2, [r7, #2]
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	2100      	movs	r1, #0
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f001 fc95 	bl	8008622 <u8x8_DrawTile>
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <u8g2_send_buffer>:
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	2300      	movs	r3, #0
 8006d0a:	73fb      	strb	r3, [r7, #15]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d12:	737b      	strb	r3, [r7, #13]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d1a:	73bb      	strb	r3, [r7, #14]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	7c5b      	ldrb	r3, [r3, #17]
 8006d22:	733b      	strb	r3, [r7, #12]
 8006d24:	7bba      	ldrb	r2, [r7, #14]
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7ff ffbd 	bl	8006caa <u8g2_send_tile_row>
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	3301      	adds	r3, #1
 8006d34:	73fb      	strb	r3, [r7, #15]
 8006d36:	7bbb      	ldrb	r3, [r7, #14]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	73bb      	strb	r3, [r7, #14]
 8006d3c:	7bfa      	ldrb	r2, [r7, #15]
 8006d3e:	7b7b      	ldrb	r3, [r7, #13]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d203      	bcs.n	8006d4c <u8g2_send_buffer+0x4c>
 8006d44:	7bba      	ldrb	r2, [r7, #14]
 8006d46:	7b3b      	ldrb	r3, [r7, #12]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d3eb      	bcc.n	8006d24 <u8g2_send_buffer+0x24>
 8006d4c:	bf00      	nop
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <u8g2_SetBufferCurrTileRow>:
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	70fb      	strb	r3, [r7, #3]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	78fa      	ldrb	r2, [r7, #3]
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	4798      	blx	r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <u8g2_FirstPage>:
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d002      	beq.n	8006d9c <u8g2_FirstPage+0x18>
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f7ff ff69 	bl	8006c6e <u8g2_ClearBuffer>
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f7ff ffd8 	bl	8006d54 <u8g2_SetBufferCurrTileRow>
 8006da4:	bf00      	nop
 8006da6:	3708      	adds	r7, #8
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <u8g2_NextPage>:
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7ff ffa3 	bl	8006d00 <u8g2_send_buffer>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc0:	73fb      	strb	r3, [r7, #15]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	4413      	add	r3, r2
 8006dcc:	73fb      	strb	r3, [r7, #15]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	7c5b      	ldrb	r3, [r3, #17]
 8006dd4:	7bfa      	ldrb	r2, [r7, #15]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d304      	bcc.n	8006de4 <u8g2_NextPage+0x38>
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fc72 	bl	80086c4 <u8x8_RefreshDisplay>
 8006de0:	2300      	movs	r3, #0
 8006de2:	e00d      	b.n	8006e00 <u8g2_NextPage+0x54>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d002      	beq.n	8006df4 <u8g2_NextPage+0x48>
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ff3d 	bl	8006c6e <u8g2_ClearBuffer>
 8006df4:	7bfb      	ldrb	r3, [r7, #15]
 8006df6:	4619      	mov	r1, r3
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f7ff ffab 	bl	8006d54 <u8g2_SetBufferCurrTileRow>
 8006dfe:	2301      	movs	r3, #1
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <u8g2_ClearDisplay>:
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f7ff ffb7 	bl	8006d84 <u8g2_FirstPage>
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f7ff ffc8 	bl	8006dac <u8g2_NextPage>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d1f9      	bne.n	8006e16 <u8g2_ClearDisplay+0xe>
 8006e22:	2100      	movs	r1, #0
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f7ff ff95 	bl	8006d54 <u8g2_SetBufferCurrTileRow>
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
	...

08006e34 <u8g2_m_16_4_1>:
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	701a      	strb	r2, [r3, #0]
 8006e42:	4b03      	ldr	r3, [pc, #12]	; (8006e50 <u8g2_m_16_4_1+0x1c>)
 8006e44:	4618      	mov	r0, r3
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000ad8 	.word	0x20000ad8

08006e54 <u8g2_Setup_ssd1306_i2c_128x32_univision_1>:
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b088      	sub	sp, #32
 8006e58:	af02      	add	r7, sp, #8
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	607a      	str	r2, [r7, #4]
 8006e60:	603b      	str	r3, [r7, #0]
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	9300      	str	r3, [sp, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a0b      	ldr	r2, [pc, #44]	; (8006e98 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x44>)
 8006e6a:	490c      	ldr	r1, [pc, #48]	; (8006e9c <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x48>)
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f001 fc8d 	bl	800878c <u8x8_Setup>
 8006e72:	f107 0313 	add.w	r3, r7, #19
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ffdc 	bl	8006e34 <u8g2_m_16_4_1>
 8006e7c:	6178      	str	r0, [r7, #20]
 8006e7e:	7cfa      	ldrb	r2, [r7, #19]
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	4b06      	ldr	r3, [pc, #24]	; (8006ea0 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x4c>)
 8006e86:	6979      	ldr	r1, [r7, #20]
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f000 ffa1 	bl	8007dd0 <u8g2_SetupBuffer>
 8006e8e:	bf00      	nop
 8006e90:	3718      	adds	r7, #24
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	080082d5 	.word	0x080082d5
 8006e9c:	08008541 	.word	0x08008541
 8006ea0:	08007c55 	.word	0x08007c55

08006ea4 <u8g2_font_get_byte>:
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	607b      	str	r3, [r7, #4]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <u8g2_font_get_word>:
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
 8006ed4:	78fb      	ldrb	r3, [r7, #3]
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	607b      	str	r3, [r7, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	81fb      	strh	r3, [r7, #14]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	607b      	str	r3, [r7, #4]
 8006ee8:	89fb      	ldrh	r3, [r7, #14]
 8006eea:	021b      	lsls	r3, r3, #8
 8006eec:	81fb      	strh	r3, [r7, #14]
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	89fb      	ldrh	r3, [r7, #14]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	81fb      	strh	r3, [r7, #14]
 8006efa:	89fb      	ldrh	r3, [r7, #14]
 8006efc:	4618      	mov	r0, r3
 8006efe:	3714      	adds	r7, #20
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr

08006f08 <u8g2_read_font_info>:
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
 8006f12:	2100      	movs	r1, #0
 8006f14:	6838      	ldr	r0, [r7, #0]
 8006f16:	f7ff ffc5 	bl	8006ea4 <u8g2_font_get_byte>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	701a      	strb	r2, [r3, #0]
 8006f22:	2101      	movs	r1, #1
 8006f24:	6838      	ldr	r0, [r7, #0]
 8006f26:	f7ff ffbd 	bl	8006ea4 <u8g2_font_get_byte>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	705a      	strb	r2, [r3, #1]
 8006f32:	2102      	movs	r1, #2
 8006f34:	6838      	ldr	r0, [r7, #0]
 8006f36:	f7ff ffb5 	bl	8006ea4 <u8g2_font_get_byte>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	709a      	strb	r2, [r3, #2]
 8006f42:	2103      	movs	r1, #3
 8006f44:	6838      	ldr	r0, [r7, #0]
 8006f46:	f7ff ffad 	bl	8006ea4 <u8g2_font_get_byte>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	70da      	strb	r2, [r3, #3]
 8006f52:	2104      	movs	r1, #4
 8006f54:	6838      	ldr	r0, [r7, #0]
 8006f56:	f7ff ffa5 	bl	8006ea4 <u8g2_font_get_byte>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	461a      	mov	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	711a      	strb	r2, [r3, #4]
 8006f62:	2105      	movs	r1, #5
 8006f64:	6838      	ldr	r0, [r7, #0]
 8006f66:	f7ff ff9d 	bl	8006ea4 <u8g2_font_get_byte>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	715a      	strb	r2, [r3, #5]
 8006f72:	2106      	movs	r1, #6
 8006f74:	6838      	ldr	r0, [r7, #0]
 8006f76:	f7ff ff95 	bl	8006ea4 <u8g2_font_get_byte>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	719a      	strb	r2, [r3, #6]
 8006f82:	2107      	movs	r1, #7
 8006f84:	6838      	ldr	r0, [r7, #0]
 8006f86:	f7ff ff8d 	bl	8006ea4 <u8g2_font_get_byte>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	71da      	strb	r2, [r3, #7]
 8006f92:	2108      	movs	r1, #8
 8006f94:	6838      	ldr	r0, [r7, #0]
 8006f96:	f7ff ff85 	bl	8006ea4 <u8g2_font_get_byte>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	721a      	strb	r2, [r3, #8]
 8006fa2:	2109      	movs	r1, #9
 8006fa4:	6838      	ldr	r0, [r7, #0]
 8006fa6:	f7ff ff7d 	bl	8006ea4 <u8g2_font_get_byte>
 8006faa:	4603      	mov	r3, r0
 8006fac:	b25a      	sxtb	r2, r3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	725a      	strb	r2, [r3, #9]
 8006fb2:	210a      	movs	r1, #10
 8006fb4:	6838      	ldr	r0, [r7, #0]
 8006fb6:	f7ff ff75 	bl	8006ea4 <u8g2_font_get_byte>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	b25a      	sxtb	r2, r3
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	729a      	strb	r2, [r3, #10]
 8006fc2:	210b      	movs	r1, #11
 8006fc4:	6838      	ldr	r0, [r7, #0]
 8006fc6:	f7ff ff6d 	bl	8006ea4 <u8g2_font_get_byte>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	b25a      	sxtb	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	72da      	strb	r2, [r3, #11]
 8006fd2:	210c      	movs	r1, #12
 8006fd4:	6838      	ldr	r0, [r7, #0]
 8006fd6:	f7ff ff65 	bl	8006ea4 <u8g2_font_get_byte>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	b25a      	sxtb	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	731a      	strb	r2, [r3, #12]
 8006fe2:	210d      	movs	r1, #13
 8006fe4:	6838      	ldr	r0, [r7, #0]
 8006fe6:	f7ff ff5d 	bl	8006ea4 <u8g2_font_get_byte>
 8006fea:	4603      	mov	r3, r0
 8006fec:	b25a      	sxtb	r2, r3
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	735a      	strb	r2, [r3, #13]
 8006ff2:	210e      	movs	r1, #14
 8006ff4:	6838      	ldr	r0, [r7, #0]
 8006ff6:	f7ff ff55 	bl	8006ea4 <u8g2_font_get_byte>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	b25a      	sxtb	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	739a      	strb	r2, [r3, #14]
 8007002:	210f      	movs	r1, #15
 8007004:	6838      	ldr	r0, [r7, #0]
 8007006:	f7ff ff4d 	bl	8006ea4 <u8g2_font_get_byte>
 800700a:	4603      	mov	r3, r0
 800700c:	b25a      	sxtb	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	73da      	strb	r2, [r3, #15]
 8007012:	2110      	movs	r1, #16
 8007014:	6838      	ldr	r0, [r7, #0]
 8007016:	f7ff ff45 	bl	8006ea4 <u8g2_font_get_byte>
 800701a:	4603      	mov	r3, r0
 800701c:	b25a      	sxtb	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	741a      	strb	r2, [r3, #16]
 8007022:	2111      	movs	r1, #17
 8007024:	6838      	ldr	r0, [r7, #0]
 8007026:	f7ff ff4f 	bl	8006ec8 <u8g2_font_get_word>
 800702a:	4603      	mov	r3, r0
 800702c:	461a      	mov	r2, r3
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	825a      	strh	r2, [r3, #18]
 8007032:	2113      	movs	r1, #19
 8007034:	6838      	ldr	r0, [r7, #0]
 8007036:	f7ff ff47 	bl	8006ec8 <u8g2_font_get_word>
 800703a:	4603      	mov	r3, r0
 800703c:	461a      	mov	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	829a      	strh	r2, [r3, #20]
 8007042:	2115      	movs	r1, #21
 8007044:	6838      	ldr	r0, [r7, #0]
 8007046:	f7ff ff3f 	bl	8006ec8 <u8g2_font_get_word>
 800704a:	4603      	mov	r3, r0
 800704c:	461a      	mov	r2, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	82da      	strh	r2, [r3, #22]
 8007052:	bf00      	nop
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <u8g2_font_decode_get_unsigned_bits>:
 800705a:	b480      	push	{r7}
 800705c:	b085      	sub	sp, #20
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	460b      	mov	r3, r1
 8007064:	70fb      	strb	r3, [r7, #3]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7a9b      	ldrb	r3, [r3, #10]
 800706a:	737b      	strb	r3, [r7, #13]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	73fb      	strb	r3, [r7, #15]
 8007074:	7bfa      	ldrb	r2, [r7, #15]
 8007076:	7b7b      	ldrb	r3, [r7, #13]
 8007078:	fa42 f303 	asr.w	r3, r2, r3
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	7b7b      	ldrb	r3, [r7, #13]
 8007080:	73bb      	strb	r3, [r7, #14]
 8007082:	7bba      	ldrb	r2, [r7, #14]
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	4413      	add	r3, r2
 8007088:	73bb      	strb	r3, [r7, #14]
 800708a:	7bbb      	ldrb	r3, [r7, #14]
 800708c:	2b07      	cmp	r3, #7
 800708e:	d91a      	bls.n	80070c6 <u8g2_font_decode_get_unsigned_bits+0x6c>
 8007090:	2308      	movs	r3, #8
 8007092:	733b      	strb	r3, [r7, #12]
 8007094:	7b3a      	ldrb	r2, [r7, #12]
 8007096:	7b7b      	ldrb	r3, [r7, #13]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	733b      	strb	r3, [r7, #12]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	7b3b      	ldrb	r3, [r7, #12]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	b25a      	sxtb	r2, r3
 80070b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	b25b      	sxtb	r3, r3
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	7bbb      	ldrb	r3, [r7, #14]
 80070c2:	3b08      	subs	r3, #8
 80070c4:	73bb      	strb	r3, [r7, #14]
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	43db      	mvns	r3, r3
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	4013      	ands	r3, r2
 80070da:	73fb      	strb	r3, [r7, #15]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7bba      	ldrb	r2, [r7, #14]
 80070e0:	729a      	strb	r2, [r3, #10]
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	4618      	mov	r0, r3
 80070e6:	3714      	adds	r7, #20
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr

080070f0 <u8g2_font_decode_get_signed_bits>:
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b084      	sub	sp, #16
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	460b      	mov	r3, r1
 80070fa:	70fb      	strb	r3, [r7, #3]
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f7ff ffaa 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 8007106:	4603      	mov	r3, r0
 8007108:	73fb      	strb	r3, [r7, #15]
 800710a:	2301      	movs	r3, #1
 800710c:	73bb      	strb	r3, [r7, #14]
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	3b01      	subs	r3, #1
 8007112:	70fb      	strb	r3, [r7, #3]
 8007114:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8007118:	78fb      	ldrb	r3, [r7, #3]
 800711a:	fa02 f303 	lsl.w	r3, r2, r3
 800711e:	73bb      	strb	r3, [r7, #14]
 8007120:	7bfa      	ldrb	r2, [r7, #15]
 8007122:	7bbb      	ldrb	r3, [r7, #14]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	73fb      	strb	r3, [r7, #15]
 800712a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <u8g2_add_vector_y>:
 8007136:	b490      	push	{r4, r7}
 8007138:	b082      	sub	sp, #8
 800713a:	af00      	add	r7, sp, #0
 800713c:	4604      	mov	r4, r0
 800713e:	4608      	mov	r0, r1
 8007140:	4611      	mov	r1, r2
 8007142:	461a      	mov	r2, r3
 8007144:	4623      	mov	r3, r4
 8007146:	71fb      	strb	r3, [r7, #7]
 8007148:	4603      	mov	r3, r0
 800714a:	71bb      	strb	r3, [r7, #6]
 800714c:	460b      	mov	r3, r1
 800714e:	717b      	strb	r3, [r7, #5]
 8007150:	4613      	mov	r3, r2
 8007152:	713b      	strb	r3, [r7, #4]
 8007154:	793b      	ldrb	r3, [r7, #4]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d010      	beq.n	800717c <u8g2_add_vector_y+0x46>
 800715a:	2b02      	cmp	r3, #2
 800715c:	dc13      	bgt.n	8007186 <u8g2_add_vector_y+0x50>
 800715e:	2b00      	cmp	r3, #0
 8007160:	d002      	beq.n	8007168 <u8g2_add_vector_y+0x32>
 8007162:	2b01      	cmp	r3, #1
 8007164:	d005      	beq.n	8007172 <u8g2_add_vector_y+0x3c>
 8007166:	e00e      	b.n	8007186 <u8g2_add_vector_y+0x50>
 8007168:	797a      	ldrb	r2, [r7, #5]
 800716a:	79fb      	ldrb	r3, [r7, #7]
 800716c:	4413      	add	r3, r2
 800716e:	71fb      	strb	r3, [r7, #7]
 8007170:	e00e      	b.n	8007190 <u8g2_add_vector_y+0x5a>
 8007172:	79ba      	ldrb	r2, [r7, #6]
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	4413      	add	r3, r2
 8007178:	71fb      	strb	r3, [r7, #7]
 800717a:	e009      	b.n	8007190 <u8g2_add_vector_y+0x5a>
 800717c:	797b      	ldrb	r3, [r7, #5]
 800717e:	79fa      	ldrb	r2, [r7, #7]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	e004      	b.n	8007190 <u8g2_add_vector_y+0x5a>
 8007186:	79bb      	ldrb	r3, [r7, #6]
 8007188:	79fa      	ldrb	r2, [r7, #7]
 800718a:	1ad3      	subs	r3, r2, r3
 800718c:	71fb      	strb	r3, [r7, #7]
 800718e:	bf00      	nop
 8007190:	79fb      	ldrb	r3, [r7, #7]
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bc90      	pop	{r4, r7}
 800719a:	4770      	bx	lr

0800719c <u8g2_add_vector_x>:
 800719c:	b490      	push	{r4, r7}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	461a      	mov	r2, r3
 80071aa:	4623      	mov	r3, r4
 80071ac:	71fb      	strb	r3, [r7, #7]
 80071ae:	4603      	mov	r3, r0
 80071b0:	71bb      	strb	r3, [r7, #6]
 80071b2:	460b      	mov	r3, r1
 80071b4:	717b      	strb	r3, [r7, #5]
 80071b6:	4613      	mov	r3, r2
 80071b8:	713b      	strb	r3, [r7, #4]
 80071ba:	793b      	ldrb	r3, [r7, #4]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d010      	beq.n	80071e2 <u8g2_add_vector_x+0x46>
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	dc13      	bgt.n	80071ec <u8g2_add_vector_x+0x50>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d002      	beq.n	80071ce <u8g2_add_vector_x+0x32>
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d005      	beq.n	80071d8 <u8g2_add_vector_x+0x3c>
 80071cc:	e00e      	b.n	80071ec <u8g2_add_vector_x+0x50>
 80071ce:	79ba      	ldrb	r2, [r7, #6]
 80071d0:	79fb      	ldrb	r3, [r7, #7]
 80071d2:	4413      	add	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]
 80071d6:	e00e      	b.n	80071f6 <u8g2_add_vector_x+0x5a>
 80071d8:	797b      	ldrb	r3, [r7, #5]
 80071da:	79fa      	ldrb	r2, [r7, #7]
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	71fb      	strb	r3, [r7, #7]
 80071e0:	e009      	b.n	80071f6 <u8g2_add_vector_x+0x5a>
 80071e2:	79bb      	ldrb	r3, [r7, #6]
 80071e4:	79fa      	ldrb	r2, [r7, #7]
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	71fb      	strb	r3, [r7, #7]
 80071ea:	e004      	b.n	80071f6 <u8g2_add_vector_x+0x5a>
 80071ec:	797a      	ldrb	r2, [r7, #5]
 80071ee:	79fb      	ldrb	r3, [r7, #7]
 80071f0:	4413      	add	r3, r2
 80071f2:	71fb      	strb	r3, [r7, #7]
 80071f4:	bf00      	nop
 80071f6:	79fb      	ldrb	r3, [r7, #7]
 80071f8:	4618      	mov	r0, r3
 80071fa:	3708      	adds	r7, #8
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bc90      	pop	{r4, r7}
 8007200:	4770      	bx	lr

08007202 <u8g2_font_decode_len>:
 8007202:	b580      	push	{r7, lr}
 8007204:	b088      	sub	sp, #32
 8007206:	af02      	add	r7, sp, #8
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
 800720e:	4613      	mov	r3, r2
 8007210:	70bb      	strb	r3, [r7, #2]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3358      	adds	r3, #88	; 0x58
 8007216:	613b      	str	r3, [r7, #16]
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	75fb      	strb	r3, [r7, #23]
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8007222:	757b      	strb	r3, [r7, #21]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	f993 3007 	ldrsb.w	r3, [r3, #7]
 800722a:	753b      	strb	r3, [r7, #20]
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007232:	73fb      	strb	r3, [r7, #15]
 8007234:	7bfa      	ldrb	r2, [r7, #15]
 8007236:	7d7b      	ldrb	r3, [r7, #21]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	73fb      	strb	r3, [r7, #15]
 800723c:	7bfb      	ldrb	r3, [r7, #15]
 800723e:	75bb      	strb	r3, [r7, #22]
 8007240:	7dfa      	ldrb	r2, [r7, #23]
 8007242:	7bfb      	ldrb	r3, [r7, #15]
 8007244:	429a      	cmp	r2, r3
 8007246:	d201      	bcs.n	800724c <u8g2_font_decode_len+0x4a>
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	75bb      	strb	r3, [r7, #22]
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	791b      	ldrb	r3, [r3, #4]
 8007250:	73bb      	strb	r3, [r7, #14]
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	795b      	ldrb	r3, [r3, #5]
 8007256:	737b      	strb	r3, [r7, #13]
 8007258:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800725c:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	7b9b      	ldrb	r3, [r3, #14]
 8007264:	7bb8      	ldrb	r0, [r7, #14]
 8007266:	f7ff ff99 	bl	800719c <u8g2_add_vector_x>
 800726a:	4603      	mov	r3, r0
 800726c:	73bb      	strb	r3, [r7, #14]
 800726e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8007272:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	7b9b      	ldrb	r3, [r3, #14]
 800727a:	7b78      	ldrb	r0, [r7, #13]
 800727c:	f7ff ff5b 	bl	8007136 <u8g2_add_vector_y>
 8007280:	4603      	mov	r3, r0
 8007282:	737b      	strb	r3, [r7, #13]
 8007284:	78bb      	ldrb	r3, [r7, #2]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00f      	beq.n	80072aa <u8g2_font_decode_len+0xa8>
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	7b1a      	ldrb	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	7b9b      	ldrb	r3, [r3, #14]
 8007298:	7db8      	ldrb	r0, [r7, #22]
 800729a:	7b7a      	ldrb	r2, [r7, #13]
 800729c:	7bb9      	ldrb	r1, [r7, #14]
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fbf5 	bl	8007a92 <u8g2_DrawHVLine>
 80072a8:	e012      	b.n	80072d0 <u8g2_font_decode_len+0xce>
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	7adb      	ldrb	r3, [r3, #11]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d10e      	bne.n	80072d0 <u8g2_font_decode_len+0xce>
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	7b5a      	ldrb	r2, [r3, #13]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	7b9b      	ldrb	r3, [r3, #14]
 80072c0:	7db8      	ldrb	r0, [r7, #22]
 80072c2:	7b7a      	ldrb	r2, [r7, #13]
 80072c4:	7bb9      	ldrb	r1, [r7, #14]
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	4603      	mov	r3, r0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fbe1 	bl	8007a92 <u8g2_DrawHVLine>
 80072d0:	7dfa      	ldrb	r2, [r7, #23]
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d309      	bcc.n	80072ec <u8g2_font_decode_len+0xea>
 80072d8:	7dfa      	ldrb	r2, [r7, #23]
 80072da:	7bfb      	ldrb	r3, [r7, #15]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	75fb      	strb	r3, [r7, #23]
 80072e0:	2300      	movs	r3, #0
 80072e2:	757b      	strb	r3, [r7, #21]
 80072e4:	7d3b      	ldrb	r3, [r7, #20]
 80072e6:	3301      	adds	r3, #1
 80072e8:	753b      	strb	r3, [r7, #20]
 80072ea:	e79f      	b.n	800722c <u8g2_font_decode_len+0x2a>
 80072ec:	bf00      	nop
 80072ee:	7d7a      	ldrb	r2, [r7, #21]
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
 80072f2:	4413      	add	r3, r2
 80072f4:	757b      	strb	r3, [r7, #21]
 80072f6:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	719a      	strb	r2, [r3, #6]
 80072fe:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	71da      	strb	r2, [r3, #7]
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <u8g2_font_setup_decode>:
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3358      	adds	r3, #88	; 0x58
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	601a      	str	r2, [r3, #0]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	729a      	strb	r2, [r3, #10]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8007330:	4619      	mov	r1, r3
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f7ff fe91 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 8007338:	4603      	mov	r3, r0
 800733a:	b25a      	sxtb	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	721a      	strb	r2, [r3, #8]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8007346:	4619      	mov	r1, r3
 8007348:	68f8      	ldr	r0, [r7, #12]
 800734a:	f7ff fe86 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 800734e:	4603      	mov	r3, r0
 8007350:	b25a      	sxtb	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	725a      	strb	r2, [r3, #9]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	731a      	strb	r2, [r3, #12]
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	7b1b      	ldrb	r3, [r3, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	461a      	mov	r2, r3
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	735a      	strb	r2, [r3, #13]
 8007374:	bf00      	nop
 8007376:	3710      	adds	r7, #16
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <u8g2_font_decode_glyph>:
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	3358      	adds	r3, #88	; 0x58
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f7ff ffbd 	bl	800730e <u8g2_font_setup_decode>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 80073a2:	4619      	mov	r1, r3
 80073a4:	6938      	ldr	r0, [r7, #16]
 80073a6:	f7ff fea3 	bl	80070f0 <u8g2_font_decode_get_signed_bits>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 80073b4:	4619      	mov	r1, r3
 80073b6:	6938      	ldr	r0, [r7, #16]
 80073b8:	f7ff fe9a 	bl	80070f0 <u8g2_font_decode_get_signed_bits>
 80073bc:	4603      	mov	r3, r0
 80073be:	737b      	strb	r3, [r7, #13]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80073c6:	4619      	mov	r1, r3
 80073c8:	6938      	ldr	r0, [r7, #16]
 80073ca:	f7ff fe91 	bl	80070f0 <u8g2_font_decode_get_signed_bits>
 80073ce:	4603      	mov	r3, r0
 80073d0:	733b      	strb	r3, [r7, #12]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	f340 80cf 	ble.w	800757c <u8g2_font_decode_glyph+0x200>
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	7918      	ldrb	r0, [r3, #4]
 80073e2:	7bfa      	ldrb	r2, [r7, #15]
 80073e4:	7b7b      	ldrb	r3, [r7, #13]
 80073e6:	4413      	add	r3, r2
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	425b      	negs	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	b25a      	sxtb	r2, r3
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	7b9b      	ldrb	r3, [r3, #14]
 80073f4:	f997 100e 	ldrsb.w	r1, [r7, #14]
 80073f8:	f7ff fed0 	bl	800719c <u8g2_add_vector_x>
 80073fc:	4603      	mov	r3, r0
 80073fe:	461a      	mov	r2, r3
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	711a      	strb	r2, [r3, #4]
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	7958      	ldrb	r0, [r3, #5]
 8007408:	7bfa      	ldrb	r2, [r7, #15]
 800740a:	7b7b      	ldrb	r3, [r7, #13]
 800740c:	4413      	add	r3, r2
 800740e:	b2db      	uxtb	r3, r3
 8007410:	425b      	negs	r3, r3
 8007412:	b2db      	uxtb	r3, r3
 8007414:	b25a      	sxtb	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	7b9b      	ldrb	r3, [r3, #14]
 800741a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 800741e:	f7ff fe8a 	bl	8007136 <u8g2_add_vector_y>
 8007422:	4603      	mov	r3, r0
 8007424:	461a      	mov	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	715a      	strb	r2, [r3, #5]
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	791b      	ldrb	r3, [r3, #4]
 800742e:	75fb      	strb	r3, [r7, #23]
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	795b      	ldrb	r3, [r3, #5]
 8007434:	757b      	strb	r3, [r7, #21]
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	75bb      	strb	r3, [r7, #22]
 800743a:	7d7b      	ldrb	r3, [r7, #21]
 800743c:	753b      	strb	r3, [r7, #20]
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	7b9b      	ldrb	r3, [r3, #14]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d852      	bhi.n	80074ec <u8g2_font_decode_glyph+0x170>
 8007446:	a201      	add	r2, pc, #4	; (adr r2, 800744c <u8g2_font_decode_glyph+0xd0>)
 8007448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744c:	0800745d 	.word	0x0800745d
 8007450:	08007475 	.word	0x08007475
 8007454:	08007499 	.word	0x08007499
 8007458:	080074c9 	.word	0x080074c9
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007462:	b2da      	uxtb	r2, r3
 8007464:	7dbb      	ldrb	r3, [r7, #22]
 8007466:	4413      	add	r3, r2
 8007468:	75bb      	strb	r3, [r7, #22]
 800746a:	7bfa      	ldrb	r2, [r7, #15]
 800746c:	7d3b      	ldrb	r3, [r7, #20]
 800746e:	4413      	add	r3, r2
 8007470:	753b      	strb	r3, [r7, #20]
 8007472:	e03b      	b.n	80074ec <u8g2_font_decode_glyph+0x170>
 8007474:	7bfb      	ldrb	r3, [r7, #15]
 8007476:	7dfa      	ldrb	r2, [r7, #23]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	75fb      	strb	r3, [r7, #23]
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	3301      	adds	r3, #1
 8007480:	75fb      	strb	r3, [r7, #23]
 8007482:	7dbb      	ldrb	r3, [r7, #22]
 8007484:	3301      	adds	r3, #1
 8007486:	75bb      	strb	r3, [r7, #22]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800748e:	b2da      	uxtb	r2, r3
 8007490:	7d3b      	ldrb	r3, [r7, #20]
 8007492:	4413      	add	r3, r2
 8007494:	753b      	strb	r3, [r7, #20]
 8007496:	e029      	b.n	80074ec <u8g2_font_decode_glyph+0x170>
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800749e:	b2db      	uxtb	r3, r3
 80074a0:	7dfa      	ldrb	r2, [r7, #23]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	75fb      	strb	r3, [r7, #23]
 80074a6:	7dfb      	ldrb	r3, [r7, #23]
 80074a8:	3301      	adds	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
 80074ac:	7dbb      	ldrb	r3, [r7, #22]
 80074ae:	3301      	adds	r3, #1
 80074b0:	75bb      	strb	r3, [r7, #22]
 80074b2:	7bfb      	ldrb	r3, [r7, #15]
 80074b4:	7d7a      	ldrb	r2, [r7, #21]
 80074b6:	1ad3      	subs	r3, r2, r3
 80074b8:	757b      	strb	r3, [r7, #21]
 80074ba:	7d7b      	ldrb	r3, [r7, #21]
 80074bc:	3301      	adds	r3, #1
 80074be:	757b      	strb	r3, [r7, #21]
 80074c0:	7d3b      	ldrb	r3, [r7, #20]
 80074c2:	3301      	adds	r3, #1
 80074c4:	753b      	strb	r3, [r7, #20]
 80074c6:	e011      	b.n	80074ec <u8g2_font_decode_glyph+0x170>
 80074c8:	7bfa      	ldrb	r2, [r7, #15]
 80074ca:	7dbb      	ldrb	r3, [r7, #22]
 80074cc:	4413      	add	r3, r2
 80074ce:	75bb      	strb	r3, [r7, #22]
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	7d7a      	ldrb	r2, [r7, #21]
 80074da:	1ad3      	subs	r3, r2, r3
 80074dc:	757b      	strb	r3, [r7, #21]
 80074de:	7d7b      	ldrb	r3, [r7, #21]
 80074e0:	3301      	adds	r3, #1
 80074e2:	757b      	strb	r3, [r7, #21]
 80074e4:	7d3b      	ldrb	r3, [r7, #20]
 80074e6:	3301      	adds	r3, #1
 80074e8:	753b      	strb	r3, [r7, #20]
 80074ea:	bf00      	nop
 80074ec:	7db8      	ldrb	r0, [r7, #22]
 80074ee:	7d7a      	ldrb	r2, [r7, #21]
 80074f0:	7df9      	ldrb	r1, [r7, #23]
 80074f2:	7d3b      	ldrb	r3, [r7, #20]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4603      	mov	r3, r0
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fb80 	bl	8007bfe <u8g2_IsIntersection>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d102      	bne.n	800750a <u8g2_font_decode_glyph+0x18e>
 8007504:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007508:	e03a      	b.n	8007580 <u8g2_font_decode_glyph+0x204>
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	2200      	movs	r2, #0
 800750e:	719a      	strb	r2, [r3, #6]
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	2200      	movs	r2, #0
 8007514:	71da      	strb	r2, [r3, #7]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 800751c:	4619      	mov	r1, r3
 800751e:	6938      	ldr	r0, [r7, #16]
 8007520:	f7ff fd9b 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 8007524:	4603      	mov	r3, r0
 8007526:	72fb      	strb	r3, [r7, #11]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800752e:	4619      	mov	r1, r3
 8007530:	6938      	ldr	r0, [r7, #16]
 8007532:	f7ff fd92 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 8007536:	4603      	mov	r3, r0
 8007538:	72bb      	strb	r3, [r7, #10]
 800753a:	7afb      	ldrb	r3, [r7, #11]
 800753c:	2200      	movs	r2, #0
 800753e:	4619      	mov	r1, r3
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff fe5e 	bl	8007202 <u8g2_font_decode_len>
 8007546:	7abb      	ldrb	r3, [r7, #10]
 8007548:	2201      	movs	r2, #1
 800754a:	4619      	mov	r1, r3
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7ff fe58 	bl	8007202 <u8g2_font_decode_len>
 8007552:	2101      	movs	r1, #1
 8007554:	6938      	ldr	r0, [r7, #16]
 8007556:	f7ff fd80 	bl	800705a <u8g2_font_decode_get_unsigned_bits>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1ec      	bne.n	800753a <u8g2_font_decode_glyph+0x1be>
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8007566:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800756a:	429a      	cmp	r2, r3
 800756c:	dd00      	ble.n	8007570 <u8g2_font_decode_glyph+0x1f4>
 800756e:	e7d2      	b.n	8007516 <u8g2_font_decode_glyph+0x19a>
 8007570:	bf00      	nop
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	7b1a      	ldrb	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 800757c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007580:	4618      	mov	r0, r3
 8007582:	3718      	adds	r7, #24
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <u8g2_font_get_glyph_data>:
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	807b      	strh	r3, [r7, #2]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007598:	617b      	str	r3, [r7, #20]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	3317      	adds	r3, #23
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	887b      	ldrh	r3, [r7, #2]
 80075a2:	2bff      	cmp	r3, #255	; 0xff
 80075a4:	d82a      	bhi.n	80075fc <u8g2_font_get_glyph_data+0x74>
 80075a6:	887b      	ldrh	r3, [r7, #2]
 80075a8:	2b60      	cmp	r3, #96	; 0x60
 80075aa:	d907      	bls.n	80075bc <u8g2_font_get_glyph_data+0x34>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80075b2:	461a      	mov	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	4413      	add	r3, r2
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e009      	b.n	80075d0 <u8g2_font_get_glyph_data+0x48>
 80075bc:	887b      	ldrh	r3, [r7, #2]
 80075be:	2b40      	cmp	r3, #64	; 0x40
 80075c0:	d906      	bls.n	80075d0 <u8g2_font_get_glyph_data+0x48>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80075c8:	461a      	mov	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	4413      	add	r3, r2
 80075ce:	617b      	str	r3, [r7, #20]
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	3301      	adds	r3, #1
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04e      	beq.n	8007678 <u8g2_font_get_glyph_data+0xf0>
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	887a      	ldrh	r2, [r7, #2]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d102      	bne.n	80075ec <u8g2_font_get_glyph_data+0x64>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	3302      	adds	r3, #2
 80075ea:	e049      	b.n	8007680 <u8g2_font_get_glyph_data+0xf8>
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3301      	adds	r3, #1
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	4413      	add	r3, r2
 80075f8:	617b      	str	r3, [r7, #20]
 80075fa:	e7e9      	b.n	80075d0 <u8g2_font_get_glyph_data+0x48>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8007602:	461a      	mov	r2, r3
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	4413      	add	r3, r2
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	613b      	str	r3, [r7, #16]
 800760e:	2100      	movs	r1, #0
 8007610:	6938      	ldr	r0, [r7, #16]
 8007612:	f7ff fc59 	bl	8006ec8 <u8g2_font_get_word>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	4413      	add	r3, r2
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	2102      	movs	r1, #2
 8007622:	6938      	ldr	r0, [r7, #16]
 8007624:	f7ff fc50 	bl	8006ec8 <u8g2_font_get_word>
 8007628:	4603      	mov	r3, r0
 800762a:	81fb      	strh	r3, [r7, #14]
 800762c:	693b      	ldr	r3, [r7, #16]
 800762e:	3304      	adds	r3, #4
 8007630:	613b      	str	r3, [r7, #16]
 8007632:	89fa      	ldrh	r2, [r7, #14]
 8007634:	887b      	ldrh	r3, [r7, #2]
 8007636:	429a      	cmp	r2, r3
 8007638:	d3e9      	bcc.n	800760e <u8g2_font_get_glyph_data+0x86>
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	81fb      	strh	r3, [r7, #14]
 8007640:	89fb      	ldrh	r3, [r7, #14]
 8007642:	021b      	lsls	r3, r3, #8
 8007644:	81fb      	strh	r3, [r7, #14]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	3301      	adds	r3, #1
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	b29a      	uxth	r2, r3
 800764e:	89fb      	ldrh	r3, [r7, #14]
 8007650:	4313      	orrs	r3, r2
 8007652:	81fb      	strh	r3, [r7, #14]
 8007654:	89fb      	ldrh	r3, [r7, #14]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d010      	beq.n	800767c <u8g2_font_get_glyph_data+0xf4>
 800765a:	89fa      	ldrh	r2, [r7, #14]
 800765c:	887b      	ldrh	r3, [r7, #2]
 800765e:	429a      	cmp	r2, r3
 8007660:	d102      	bne.n	8007668 <u8g2_font_get_glyph_data+0xe0>
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	3303      	adds	r3, #3
 8007666:	e00b      	b.n	8007680 <u8g2_font_get_glyph_data+0xf8>
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	3302      	adds	r3, #2
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	461a      	mov	r2, r3
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4413      	add	r3, r2
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e7e0      	b.n	800763a <u8g2_font_get_glyph_data+0xb2>
 8007678:	bf00      	nop
 800767a:	e000      	b.n	800767e <u8g2_font_get_glyph_data+0xf6>
 800767c:	bf00      	nop
 800767e:	2300      	movs	r3, #0
 8007680:	4618      	mov	r0, r3
 8007682:	3718      	adds	r7, #24
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <u8g2_font_draw_glyph>:
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	4608      	mov	r0, r1
 8007692:	4611      	mov	r1, r2
 8007694:	461a      	mov	r2, r3
 8007696:	4603      	mov	r3, r0
 8007698:	70fb      	strb	r3, [r7, #3]
 800769a:	460b      	mov	r3, r1
 800769c:	70bb      	strb	r3, [r7, #2]
 800769e:	4613      	mov	r3, r2
 80076a0:	803b      	strh	r3, [r7, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	73fb      	strb	r3, [r7, #15]
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	78fa      	ldrb	r2, [r7, #3]
 80076aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	78ba      	ldrb	r2, [r7, #2]
 80076b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80076b6:	883b      	ldrh	r3, [r7, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ff64 	bl	8007588 <u8g2_font_get_glyph_data>
 80076c0:	60b8      	str	r0, [r7, #8]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <u8g2_font_draw_glyph+0x4c>
 80076c8:	68b9      	ldr	r1, [r7, #8]
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fe56 	bl	800737c <u8g2_font_decode_glyph>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73fb      	strb	r3, [r7, #15]
 80076d4:	7bfb      	ldrb	r3, [r7, #15]
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <u8g2_DrawGlyph>:
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	4608      	mov	r0, r1
 80076ea:	4611      	mov	r1, r2
 80076ec:	461a      	mov	r2, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	70fb      	strb	r3, [r7, #3]
 80076f2:	460b      	mov	r3, r1
 80076f4:	70bb      	strb	r3, [r7, #2]
 80076f6:	4613      	mov	r3, r2
 80076f8:	803b      	strh	r3, [r7, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8007700:	2b03      	cmp	r3, #3
 8007702:	d833      	bhi.n	800776c <u8g2_DrawGlyph+0x8c>
 8007704:	a201      	add	r2, pc, #4	; (adr r2, 800770c <u8g2_DrawGlyph+0x2c>)
 8007706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800770a:	bf00      	nop
 800770c:	0800771d 	.word	0x0800771d
 8007710:	08007731 	.word	0x08007731
 8007714:	08007745 	.word	0x08007745
 8007718:	08007759 	.word	0x08007759
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
 8007724:	4603      	mov	r3, r0
 8007726:	461a      	mov	r2, r3
 8007728:	78bb      	ldrb	r3, [r7, #2]
 800772a:	4413      	add	r3, r2
 800772c:	70bb      	strb	r3, [r7, #2]
 800772e:	e01d      	b.n	800776c <u8g2_DrawGlyph+0x8c>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	4798      	blx	r3
 8007738:	4603      	mov	r3, r0
 800773a:	461a      	mov	r2, r3
 800773c:	78fb      	ldrb	r3, [r7, #3]
 800773e:	1a9b      	subs	r3, r3, r2
 8007740:	70fb      	strb	r3, [r7, #3]
 8007742:	e013      	b.n	800776c <u8g2_DrawGlyph+0x8c>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	4798      	blx	r3
 800774c:	4603      	mov	r3, r0
 800774e:	461a      	mov	r2, r3
 8007750:	78bb      	ldrb	r3, [r7, #2]
 8007752:	1a9b      	subs	r3, r3, r2
 8007754:	70bb      	strb	r3, [r7, #2]
 8007756:	e009      	b.n	800776c <u8g2_DrawGlyph+0x8c>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	4798      	blx	r3
 8007760:	4603      	mov	r3, r0
 8007762:	461a      	mov	r2, r3
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	4413      	add	r3, r2
 8007768:	70fb      	strb	r3, [r7, #3]
 800776a:	bf00      	nop
 800776c:	883b      	ldrh	r3, [r7, #0]
 800776e:	78ba      	ldrb	r2, [r7, #2]
 8007770:	78f9      	ldrb	r1, [r7, #3]
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ff88 	bl	8007688 <u8g2_font_draw_glyph>
 8007778:	4603      	mov	r3, r0
 800777a:	4618      	mov	r0, r3
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop

08007784 <u8g2_draw_string>:
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	607b      	str	r3, [r7, #4]
 800778e:	460b      	mov	r3, r1
 8007790:	72fb      	strb	r3, [r7, #11]
 8007792:	4613      	mov	r3, r2
 8007794:	72bb      	strb	r3, [r7, #10]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 fc6e 	bl	8008078 <u8x8_utf8_init>
 800779c:	2300      	movs	r3, #0
 800779e:	75fb      	strb	r3, [r7, #23]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	7812      	ldrb	r2, [r2, #0]
 80077a8:	4611      	mov	r1, r2
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	4798      	blx	r3
 80077ae:	4603      	mov	r3, r0
 80077b0:	82bb      	strh	r3, [r7, #20]
 80077b2:	8abb      	ldrh	r3, [r7, #20]
 80077b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d038      	beq.n	800782e <u8g2_draw_string+0xaa>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	3301      	adds	r3, #1
 80077c0:	607b      	str	r3, [r7, #4]
 80077c2:	8abb      	ldrh	r3, [r7, #20]
 80077c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d0e9      	beq.n	80077a0 <u8g2_draw_string+0x1c>
 80077cc:	8abb      	ldrh	r3, [r7, #20]
 80077ce:	7aba      	ldrb	r2, [r7, #10]
 80077d0:	7af9      	ldrb	r1, [r7, #11]
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f7ff ff84 	bl	80076e0 <u8g2_DrawGlyph>
 80077d8:	4603      	mov	r3, r0
 80077da:	74fb      	strb	r3, [r7, #19]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80077e2:	2b03      	cmp	r3, #3
 80077e4:	d81e      	bhi.n	8007824 <u8g2_draw_string+0xa0>
 80077e6:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <u8g2_draw_string+0x68>)
 80077e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	08007807 	.word	0x08007807
 80077f4:	08007811 	.word	0x08007811
 80077f8:	0800781b 	.word	0x0800781b
 80077fc:	7afa      	ldrb	r2, [r7, #11]
 80077fe:	7cfb      	ldrb	r3, [r7, #19]
 8007800:	4413      	add	r3, r2
 8007802:	72fb      	strb	r3, [r7, #11]
 8007804:	e00e      	b.n	8007824 <u8g2_draw_string+0xa0>
 8007806:	7aba      	ldrb	r2, [r7, #10]
 8007808:	7cfb      	ldrb	r3, [r7, #19]
 800780a:	4413      	add	r3, r2
 800780c:	72bb      	strb	r3, [r7, #10]
 800780e:	e009      	b.n	8007824 <u8g2_draw_string+0xa0>
 8007810:	7afa      	ldrb	r2, [r7, #11]
 8007812:	7cfb      	ldrb	r3, [r7, #19]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	72fb      	strb	r3, [r7, #11]
 8007818:	e004      	b.n	8007824 <u8g2_draw_string+0xa0>
 800781a:	7aba      	ldrb	r2, [r7, #10]
 800781c:	7cfb      	ldrb	r3, [r7, #19]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	72bb      	strb	r3, [r7, #10]
 8007822:	bf00      	nop
 8007824:	7dfa      	ldrb	r2, [r7, #23]
 8007826:	7cfb      	ldrb	r3, [r7, #19]
 8007828:	4413      	add	r3, r2
 800782a:	75fb      	strb	r3, [r7, #23]
 800782c:	e7b8      	b.n	80077a0 <u8g2_draw_string+0x1c>
 800782e:	bf00      	nop
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop

0800783c <u8g2_DrawStr>:
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	607b      	str	r3, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	72fb      	strb	r3, [r7, #11]
 800784a:	4613      	mov	r3, r2
 800784c:	72bb      	strb	r3, [r7, #10]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a06      	ldr	r2, [pc, #24]	; (800786c <u8g2_DrawStr+0x30>)
 8007852:	605a      	str	r2, [r3, #4]
 8007854:	7aba      	ldrb	r2, [r7, #10]
 8007856:	7af9      	ldrb	r1, [r7, #11]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ff92 	bl	8007784 <u8g2_draw_string>
 8007860:	4603      	mov	r3, r0
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	08008095 	.word	0x08008095

08007870 <u8g2_UpdateRefHeight>:
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	2b00      	cmp	r3, #0
 800787e:	d05d      	beq.n	800793c <u8g2_UpdateRefHeight+0xcc>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d04d      	beq.n	800793e <u8g2_UpdateRefHeight+0xce>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d11c      	bne.n	80078e6 <u8g2_UpdateRefHeight+0x76>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 80078b8:	429a      	cmp	r2, r3
 80078ba:	da05      	bge.n	80078c8 <u8g2_UpdateRefHeight+0x58>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 80078d4:	429a      	cmp	r2, r3
 80078d6:	dd32      	ble.n	800793e <u8g2_UpdateRefHeight+0xce>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 80078e4:	e02b      	b.n	800793e <u8g2_UpdateRefHeight+0xce>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 80078ec:	461a      	mov	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80078f4:	4619      	mov	r1, r3
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 80078fc:	440b      	add	r3, r1
 80078fe:	429a      	cmp	r2, r3
 8007900:	da0d      	bge.n	800791e <u8g2_UpdateRefHeight+0xae>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8007908:	b2da      	uxtb	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4413      	add	r3, r2
 8007914:	b2db      	uxtb	r3, r3
 8007916:	b25a      	sxtb	r2, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 800792a:	429a      	cmp	r2, r3
 800792c:	dd07      	ble.n	800793e <u8g2_UpdateRefHeight+0xce>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 800793a:	e000      	b.n	800793e <u8g2_UpdateRefHeight+0xce>
 800793c:	bf00      	nop
 800793e:	370c      	adds	r7, #12
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr

08007948 <u8g2_font_calc_vref_font>:
 8007948:	b480      	push	{r7}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	2300      	movs	r3, #0
 8007952:	4618      	mov	r0, r3
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <u8g2_SetFontPosBaseline>:
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	4a04      	ldr	r2, [pc, #16]	; (800797c <u8g2_SetFontPosBaseline+0x1c>)
 800796c:	655a      	str	r2, [r3, #84]	; 0x54
 800796e:	bf00      	nop
 8007970:	370c      	adds	r7, #12
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	08007949 	.word	0x08007949

08007980 <u8g2_SetFont>:
 8007980:	b580      	push	{r7, lr}
 8007982:	b082      	sub	sp, #8
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	429a      	cmp	r2, r3
 8007992:	d00b      	beq.n	80079ac <u8g2_SetFont+0x2c>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	651a      	str	r2, [r3, #80]	; 0x50
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3368      	adds	r3, #104	; 0x68
 800799e:	6839      	ldr	r1, [r7, #0]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fab1 	bl	8006f08 <u8g2_read_font_info>
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7ff ff62 	bl	8007870 <u8g2_UpdateRefHeight>
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <u8g2_clip_intersection2>:
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	4611      	mov	r1, r2
 80079c0:	461a      	mov	r2, r3
 80079c2:	460b      	mov	r3, r1
 80079c4:	71fb      	strb	r3, [r7, #7]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71bb      	strb	r3, [r7, #6]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	75fb      	strb	r3, [r7, #23]
 80079d0:	7dfb      	ldrb	r3, [r7, #23]
 80079d2:	75bb      	strb	r3, [r7, #22]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	7dbb      	ldrb	r3, [r7, #22]
 80079da:	4413      	add	r3, r2
 80079dc:	75bb      	strb	r3, [r7, #22]
 80079de:	7dfa      	ldrb	r2, [r7, #23]
 80079e0:	7dbb      	ldrb	r3, [r7, #22]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d90b      	bls.n	80079fe <u8g2_clip_intersection2+0x4a>
 80079e6:	7dfa      	ldrb	r2, [r7, #23]
 80079e8:	79bb      	ldrb	r3, [r7, #6]
 80079ea:	429a      	cmp	r2, r3
 80079ec:	d205      	bcs.n	80079fa <u8g2_clip_intersection2+0x46>
 80079ee:	79bb      	ldrb	r3, [r7, #6]
 80079f0:	75bb      	strb	r3, [r7, #22]
 80079f2:	7dbb      	ldrb	r3, [r7, #22]
 80079f4:	3b01      	subs	r3, #1
 80079f6:	75bb      	strb	r3, [r7, #22]
 80079f8:	e001      	b.n	80079fe <u8g2_clip_intersection2+0x4a>
 80079fa:	79fb      	ldrb	r3, [r7, #7]
 80079fc:	75fb      	strb	r3, [r7, #23]
 80079fe:	7dfa      	ldrb	r2, [r7, #23]
 8007a00:	79bb      	ldrb	r3, [r7, #6]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d301      	bcc.n	8007a0a <u8g2_clip_intersection2+0x56>
 8007a06:	2300      	movs	r3, #0
 8007a08:	e01c      	b.n	8007a44 <u8g2_clip_intersection2+0x90>
 8007a0a:	7dba      	ldrb	r2, [r7, #22]
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d801      	bhi.n	8007a16 <u8g2_clip_intersection2+0x62>
 8007a12:	2300      	movs	r3, #0
 8007a14:	e016      	b.n	8007a44 <u8g2_clip_intersection2+0x90>
 8007a16:	7dfa      	ldrb	r2, [r7, #23]
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d201      	bcs.n	8007a22 <u8g2_clip_intersection2+0x6e>
 8007a1e:	79fb      	ldrb	r3, [r7, #7]
 8007a20:	75fb      	strb	r3, [r7, #23]
 8007a22:	7dba      	ldrb	r2, [r7, #22]
 8007a24:	79bb      	ldrb	r3, [r7, #6]
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d901      	bls.n	8007a2e <u8g2_clip_intersection2+0x7a>
 8007a2a:	79bb      	ldrb	r3, [r7, #6]
 8007a2c:	75bb      	strb	r3, [r7, #22]
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	7dfa      	ldrb	r2, [r7, #23]
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	7dba      	ldrb	r2, [r7, #22]
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	75bb      	strb	r3, [r7, #22]
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	7dba      	ldrb	r2, [r7, #22]
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	2301      	movs	r3, #1
 8007a44:	4618      	mov	r0, r3
 8007a46:	371c      	adds	r7, #28
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <u8g2_draw_hv_line_2dir>:
 8007a50:	b590      	push	{r4, r7, lr}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af02      	add	r7, sp, #8
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	4608      	mov	r0, r1
 8007a5a:	4611      	mov	r1, r2
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	4603      	mov	r3, r0
 8007a60:	70fb      	strb	r3, [r7, #3]
 8007a62:	460b      	mov	r3, r1
 8007a64:	70bb      	strb	r3, [r7, #2]
 8007a66:	4613      	mov	r3, r2
 8007a68:	707b      	strb	r3, [r7, #1]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a70:	78ba      	ldrb	r2, [r7, #2]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	70bb      	strb	r3, [r7, #2]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8007a7a:	7878      	ldrb	r0, [r7, #1]
 8007a7c:	78ba      	ldrb	r2, [r7, #2]
 8007a7e:	78f9      	ldrb	r1, [r7, #3]
 8007a80:	7e3b      	ldrb	r3, [r7, #24]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4603      	mov	r3, r0
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	47a0      	blx	r4
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd90      	pop	{r4, r7, pc}

08007a92 <u8g2_DrawHVLine>:
 8007a92:	b590      	push	{r4, r7, lr}
 8007a94:	b085      	sub	sp, #20
 8007a96:	af02      	add	r7, sp, #8
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	4608      	mov	r0, r1
 8007a9c:	4611      	mov	r1, r2
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	4603      	mov	r3, r0
 8007aa2:	70fb      	strb	r3, [r7, #3]
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	70bb      	strb	r3, [r7, #2]
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	707b      	strb	r3, [r7, #1]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d06d      	beq.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007ab6:	787b      	ldrb	r3, [r7, #1]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d06a      	beq.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007abc:	787b      	ldrb	r3, [r7, #1]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d918      	bls.n	8007af4 <u8g2_DrawHVLine+0x62>
 8007ac2:	7e3b      	ldrb	r3, [r7, #24]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d109      	bne.n	8007adc <u8g2_DrawHVLine+0x4a>
 8007ac8:	78fa      	ldrb	r2, [r7, #3]
 8007aca:	787b      	ldrb	r3, [r7, #1]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	70fb      	strb	r3, [r7, #3]
 8007ad2:	78fb      	ldrb	r3, [r7, #3]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	70fb      	strb	r3, [r7, #3]
 8007ada:	e00b      	b.n	8007af4 <u8g2_DrawHVLine+0x62>
 8007adc:	7e3b      	ldrb	r3, [r7, #24]
 8007ade:	2b03      	cmp	r3, #3
 8007ae0:	d108      	bne.n	8007af4 <u8g2_DrawHVLine+0x62>
 8007ae2:	78ba      	ldrb	r2, [r7, #2]
 8007ae4:	787b      	ldrb	r3, [r7, #1]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	70bb      	strb	r3, [r7, #2]
 8007aec:	78bb      	ldrb	r3, [r7, #2]
 8007aee:	3301      	adds	r3, #1
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	70bb      	strb	r3, [r7, #2]
 8007af4:	7e3b      	ldrb	r3, [r7, #24]
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	763b      	strb	r3, [r7, #24]
 8007afc:	7e3b      	ldrb	r3, [r7, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d119      	bne.n	8007b36 <u8g2_DrawHVLine+0xa4>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007b08:	78bb      	ldrb	r3, [r7, #2]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d838      	bhi.n	8007b80 <u8g2_DrawHVLine+0xee>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007b14:	78bb      	ldrb	r3, [r7, #2]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d934      	bls.n	8007b84 <u8g2_DrawHVLine+0xf2>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007b26:	1c79      	adds	r1, r7, #1
 8007b28:	1cf8      	adds	r0, r7, #3
 8007b2a:	f7ff ff43 	bl	80079b4 <u8g2_clip_intersection2>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d119      	bne.n	8007b68 <u8g2_DrawHVLine+0xd6>
 8007b34:	e02d      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d822      	bhi.n	8007b88 <u8g2_DrawHVLine+0xf6>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007b48:	78fb      	ldrb	r3, [r7, #3]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d91e      	bls.n	8007b8c <u8g2_DrawHVLine+0xfa>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007b5a:	1c79      	adds	r1, r7, #1
 8007b5c:	1cb8      	adds	r0, r7, #2
 8007b5e:	f7ff ff29 	bl	80079b4 <u8g2_clip_intersection2>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d013      	beq.n	8007b90 <u8g2_DrawHVLine+0xfe>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b6c:	689c      	ldr	r4, [r3, #8]
 8007b6e:	78f9      	ldrb	r1, [r7, #3]
 8007b70:	78ba      	ldrb	r2, [r7, #2]
 8007b72:	7878      	ldrb	r0, [r7, #1]
 8007b74:	7e3b      	ldrb	r3, [r7, #24]
 8007b76:	9300      	str	r3, [sp, #0]
 8007b78:	4603      	mov	r3, r0
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	47a0      	blx	r4
 8007b7e:	e008      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b80:	bf00      	nop
 8007b82:	e006      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b84:	bf00      	nop
 8007b86:	e004      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b88:	bf00      	nop
 8007b8a:	e002      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b8c:	bf00      	nop
 8007b8e:	e000      	b.n	8007b92 <u8g2_DrawHVLine+0x100>
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd90      	pop	{r4, r7, pc}

08007b98 <u8g2_is_intersection_decision_tree>:
 8007b98:	b490      	push	{r4, r7}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	4608      	mov	r0, r1
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4623      	mov	r3, r4
 8007ba8:	71fb      	strb	r3, [r7, #7]
 8007baa:	4603      	mov	r3, r0
 8007bac:	71bb      	strb	r3, [r7, #6]
 8007bae:	460b      	mov	r3, r1
 8007bb0:	717b      	strb	r3, [r7, #5]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	713b      	strb	r3, [r7, #4]
 8007bb6:	797a      	ldrb	r2, [r7, #5]
 8007bb8:	79bb      	ldrb	r3, [r7, #6]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d20d      	bcs.n	8007bda <u8g2_is_intersection_decision_tree+0x42>
 8007bbe:	793a      	ldrb	r2, [r7, #4]
 8007bc0:	79fb      	ldrb	r3, [r7, #7]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d901      	bls.n	8007bca <u8g2_is_intersection_decision_tree+0x32>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e014      	b.n	8007bf4 <u8g2_is_intersection_decision_tree+0x5c>
 8007bca:	797a      	ldrb	r2, [r7, #5]
 8007bcc:	793b      	ldrb	r3, [r7, #4]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	d901      	bls.n	8007bd6 <u8g2_is_intersection_decision_tree+0x3e>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e00e      	b.n	8007bf4 <u8g2_is_intersection_decision_tree+0x5c>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	e00c      	b.n	8007bf4 <u8g2_is_intersection_decision_tree+0x5c>
 8007bda:	793a      	ldrb	r2, [r7, #4]
 8007bdc:	79fb      	ldrb	r3, [r7, #7]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d907      	bls.n	8007bf2 <u8g2_is_intersection_decision_tree+0x5a>
 8007be2:	797a      	ldrb	r2, [r7, #5]
 8007be4:	793b      	ldrb	r3, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d901      	bls.n	8007bee <u8g2_is_intersection_decision_tree+0x56>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e002      	b.n	8007bf4 <u8g2_is_intersection_decision_tree+0x5c>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	e000      	b.n	8007bf4 <u8g2_is_intersection_decision_tree+0x5c>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3708      	adds	r7, #8
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc90      	pop	{r4, r7}
 8007bfc:	4770      	bx	lr

08007bfe <u8g2_IsIntersection>:
 8007bfe:	b580      	push	{r7, lr}
 8007c00:	b082      	sub	sp, #8
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
 8007c06:	4608      	mov	r0, r1
 8007c08:	4611      	mov	r1, r2
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	70fb      	strb	r3, [r7, #3]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70bb      	strb	r3, [r7, #2]
 8007c14:	4613      	mov	r3, r2
 8007c16:	707b      	strb	r3, [r7, #1]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 8007c24:	7c3b      	ldrb	r3, [r7, #16]
 8007c26:	78ba      	ldrb	r2, [r7, #2]
 8007c28:	f7ff ffb6 	bl	8007b98 <u8g2_is_intersection_decision_tree>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d101      	bne.n	8007c36 <u8g2_IsIntersection+0x38>
 8007c32:	2300      	movs	r3, #0
 8007c34:	e00a      	b.n	8007c4c <u8g2_IsIntersection+0x4e>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 8007c42:	787b      	ldrb	r3, [r7, #1]
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	f7ff ffa7 	bl	8007b98 <u8g2_is_intersection_decision_tree>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	3708      	adds	r7, #8
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}

08007c54 <u8g2_ll_hvline_vertical_top_lsb>:
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
 8007c5c:	4608      	mov	r0, r1
 8007c5e:	4611      	mov	r1, r2
 8007c60:	461a      	mov	r2, r3
 8007c62:	4603      	mov	r3, r0
 8007c64:	70fb      	strb	r3, [r7, #3]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70bb      	strb	r3, [r7, #2]
 8007c6a:	4613      	mov	r3, r2
 8007c6c:	707b      	strb	r3, [r7, #1]
 8007c6e:	78bb      	ldrb	r3, [r7, #2]
 8007c70:	74fb      	strb	r3, [r7, #19]
 8007c72:	7cfb      	ldrb	r3, [r7, #19]
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	74fb      	strb	r3, [r7, #19]
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	743b      	strb	r3, [r7, #16]
 8007c7e:	7c3a      	ldrb	r2, [r7, #16]
 8007c80:	7cfb      	ldrb	r3, [r7, #19]
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	743b      	strb	r3, [r7, #16]
 8007c88:	2300      	movs	r3, #0
 8007c8a:	74bb      	strb	r3, [r7, #18]
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	747b      	strb	r3, [r7, #17]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d801      	bhi.n	8007c9e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
 8007c9a:	7c3b      	ldrb	r3, [r7, #16]
 8007c9c:	74bb      	strb	r3, [r7, #18]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d001      	beq.n	8007cac <u8g2_ll_hvline_vertical_top_lsb+0x58>
 8007ca8:	7c3b      	ldrb	r3, [r7, #16]
 8007caa:	747b      	strb	r3, [r7, #17]
 8007cac:	78bb      	ldrb	r3, [r7, #2]
 8007cae:	81fb      	strh	r3, [r7, #14]
 8007cb0:	89fb      	ldrh	r3, [r7, #14]
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	81fb      	strh	r3, [r7, #14]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	7c1b      	ldrb	r3, [r3, #16]
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	89fa      	ldrh	r2, [r7, #14]
 8007cc2:	fb12 f303 	smulbb	r3, r2, r3
 8007cc6:	81fb      	strh	r3, [r7, #14]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	89fb      	ldrh	r3, [r7, #14]
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4413      	add	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4413      	add	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]
 8007cde:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d117      	bne.n	8007d16 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	781a      	ldrb	r2, [r3, #0]
 8007cea:	7cbb      	ldrb	r3, [r7, #18]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	701a      	strb	r2, [r3, #0]
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	781a      	ldrb	r2, [r3, #0]
 8007cf8:	7c7b      	ldrb	r3, [r7, #17]
 8007cfa:	4053      	eors	r3, r2
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	3301      	adds	r3, #1
 8007d06:	617b      	str	r3, [r7, #20]
 8007d08:	787b      	ldrb	r3, [r7, #1]
 8007d0a:	3b01      	subs	r3, #1
 8007d0c:	707b      	strb	r3, [r7, #1]
 8007d0e:	787b      	ldrb	r3, [r7, #1]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e8      	bne.n	8007ce6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
 8007d14:	e039      	b.n	8007d8a <u8g2_ll_hvline_vertical_top_lsb+0x136>
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	781a      	ldrb	r2, [r3, #0]
 8007d1a:	7cbb      	ldrb	r3, [r7, #18]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	b2da      	uxtb	r2, r3
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	781a      	ldrb	r2, [r3, #0]
 8007d28:	7c7b      	ldrb	r3, [r7, #17]
 8007d2a:	4053      	eors	r3, r2
 8007d2c:	b2da      	uxtb	r2, r3
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	701a      	strb	r2, [r3, #0]
 8007d32:	7cfb      	ldrb	r3, [r7, #19]
 8007d34:	3301      	adds	r3, #1
 8007d36:	74fb      	strb	r3, [r7, #19]
 8007d38:	7cfb      	ldrb	r3, [r7, #19]
 8007d3a:	f003 0307 	and.w	r3, r3, #7
 8007d3e:	74fb      	strb	r3, [r7, #19]
 8007d40:	787b      	ldrb	r3, [r7, #1]
 8007d42:	3b01      	subs	r3, #1
 8007d44:	707b      	strb	r3, [r7, #1]
 8007d46:	7cfb      	ldrb	r3, [r7, #19]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d115      	bne.n	8007d78 <u8g2_ll_hvline_vertical_top_lsb+0x124>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d52:	461a      	mov	r2, r3
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	4413      	add	r3, r2
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d801      	bhi.n	8007d68 <u8g2_ll_hvline_vertical_top_lsb+0x114>
 8007d64:	2301      	movs	r3, #1
 8007d66:	74bb      	strb	r3, [r7, #18]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d008      	beq.n	8007d84 <u8g2_ll_hvline_vertical_top_lsb+0x130>
 8007d72:	2301      	movs	r3, #1
 8007d74:	747b      	strb	r3, [r7, #17]
 8007d76:	e005      	b.n	8007d84 <u8g2_ll_hvline_vertical_top_lsb+0x130>
 8007d78:	7cbb      	ldrb	r3, [r7, #18]
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	74bb      	strb	r3, [r7, #18]
 8007d7e:	7c7b      	ldrb	r3, [r7, #17]
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	747b      	strb	r3, [r7, #17]
 8007d84:	787b      	ldrb	r3, [r7, #1]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d1c5      	bne.n	8007d16 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
 8007d8a:	bf00      	nop
 8007d8c:	371c      	adds	r7, #28
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <u8g2_SetMaxClipWindow>:
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	22ff      	movs	r2, #255	; 0xff
 8007db2:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	22ff      	movs	r2, #255	; 0xff
 8007dba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	4798      	blx	r3
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <u8g2_SetupBuffer>:
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	60f8      	str	r0, [r7, #12]
 8007dd8:	60b9      	str	r1, [r7, #8]
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	4613      	mov	r3, r2
 8007dde:	71fb      	strb	r3, [r7, #7]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2200      	movs	r2, #0
 8007de4:	651a      	str	r2, [r3, #80]	; 0x50
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	631a      	str	r2, [r3, #48]	; 0x30
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	639a      	str	r2, [r3, #56]	; 0x38
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	79fa      	ldrb	r2, [r7, #7]
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	635a      	str	r2, [r3, #52]	; 0x34
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	4798      	blx	r3
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f7ff ffaf 	bl	8007d96 <u8g2_SetMaxClipWindow>
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f7ff fd91 	bl	8007960 <u8g2_SetFontPosBaseline>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}

08007e4e <u8g2_update_dimension_common>:
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60bb      	str	r3, [r7, #8]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	73fb      	strb	r3, [r7, #15]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	7bfa      	ldrb	r2, [r7, #15]
 8007e6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	7c1b      	ldrb	r3, [r3, #16]
 8007e76:	73fb      	strb	r3, [r7, #15]
 8007e78:	7bfb      	ldrb	r3, [r7, #15]
 8007e7a:	2b1f      	cmp	r3, #31
 8007e7c:	d901      	bls.n	8007e82 <u8g2_update_dimension_common+0x34>
 8007e7e:	231f      	movs	r3, #31
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	73fb      	strb	r3, [r7, #15]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	7bfa      	ldrb	r2, [r7, #15]
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	73fb      	strb	r3, [r7, #15]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	7bfa      	ldrb	r2, [r7, #15]
 8007ea2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	687a      	ldr	r2, [r7, #4]
 8007eb2:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 8007eb6:	4413      	add	r3, r2
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	7c52      	ldrb	r2, [r2, #17]
 8007ebc:	4293      	cmp	r3, r2
 8007ebe:	dd06      	ble.n	8007ece <u8g2_update_dimension_common+0x80>
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	7c5a      	ldrb	r2, [r3, #17]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eca:	1ad3      	subs	r3, r2, r3
 8007ecc:	73fb      	strb	r3, [r7, #15]
 8007ece:	7bfb      	ldrb	r3, [r7, #15]
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	73fb      	strb	r3, [r7, #15]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	b2da      	uxtb	r2, r3
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	22f0      	movs	r2, #240	; 0xf0
 8007f02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	8a9b      	ldrh	r3, [r3, #20]
 8007f0a:	2bf0      	cmp	r3, #240	; 0xf0
 8007f0c:	d805      	bhi.n	8007f1a <u8g2_update_dimension_common+0xcc>
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	8a9b      	ldrh	r3, [r3, #20]
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	8adb      	ldrh	r3, [r3, #22]
 8007f1e:	b2da      	uxtb	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <u8g2_apply_clip_window>:
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af02      	add	r7, sp, #8
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007f52:	9300      	str	r3, [sp, #0]
 8007f54:	4603      	mov	r3, r0
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f7ff fe51 	bl	8007bfe <u8g2_IsIntersection>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <u8g2_apply_clip_window+0x3a>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007f6a:	e03b      	b.n	8007fe4 <u8g2_apply_clip_window+0xb2>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d205      	bcs.n	8007f90 <u8g2_apply_clip_window+0x5e>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d905      	bls.n	8007fac <u8g2_apply_clip_window+0x7a>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d205      	bcs.n	8007fc8 <u8g2_apply_clip_window+0x96>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d905      	bls.n	8007fe4 <u8g2_apply_clip_window+0xb2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8007fe4:	bf00      	nop
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <u8g2_update_dimension_r0>:
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7ff ff2a 	bl	8007e4e <u8g2_update_dimension_common>
 8007ffa:	bf00      	nop
 8007ffc:	3708      	adds	r7, #8
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <u8g2_update_page_win_r0>:
 8008002:	b580      	push	{r7, lr}
 8008004:	b082      	sub	sp, #8
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f7ff ff7b 	bl	8007f32 <u8g2_apply_clip_window>
 800803c:	bf00      	nop
 800803e:	3708      	adds	r7, #8
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <u8g2_draw_l90_r0>:
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	4608      	mov	r0, r1
 800804e:	4611      	mov	r1, r2
 8008050:	461a      	mov	r2, r3
 8008052:	4603      	mov	r3, r0
 8008054:	70fb      	strb	r3, [r7, #3]
 8008056:	460b      	mov	r3, r1
 8008058:	70bb      	strb	r3, [r7, #2]
 800805a:	4613      	mov	r3, r2
 800805c:	707b      	strb	r3, [r7, #1]
 800805e:	7878      	ldrb	r0, [r7, #1]
 8008060:	78ba      	ldrb	r2, [r7, #2]
 8008062:	78f9      	ldrb	r1, [r7, #3]
 8008064:	7c3b      	ldrb	r3, [r7, #16]
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	4603      	mov	r3, r0
 800806a:	6878      	ldr	r0, [r7, #4]
 800806c:	f7ff fcf0 	bl	8007a50 <u8g2_draw_hv_line_2dir>
 8008070:	bf00      	nop
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}

08008078 <u8x8_utf8_init>:
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <u8x8_ascii_next>:
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
 80080a0:	78fb      	ldrb	r3, [r7, #3]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d002      	beq.n	80080ac <u8x8_ascii_next+0x18>
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	2b0a      	cmp	r3, #10
 80080aa:	d102      	bne.n	80080b2 <u8x8_ascii_next+0x1e>
 80080ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80080b0:	e001      	b.n	80080b6 <u8x8_ascii_next+0x22>
 80080b2:	78fb      	ldrb	r3, [r7, #3]
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	4618      	mov	r0, r3
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr

080080c2 <u8x8_byte_SendBytes>:
 80080c2:	b590      	push	{r4, r7, lr}
 80080c4:	b085      	sub	sp, #20
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	60f8      	str	r0, [r7, #12]
 80080ca:	460b      	mov	r3, r1
 80080cc:	607a      	str	r2, [r7, #4]
 80080ce:	72fb      	strb	r3, [r7, #11]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	691c      	ldr	r4, [r3, #16]
 80080d4:	7afa      	ldrb	r2, [r7, #11]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2117      	movs	r1, #23
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	47a0      	blx	r4
 80080de:	4603      	mov	r3, r0
 80080e0:	4618      	mov	r0, r3
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd90      	pop	{r4, r7, pc}

080080e8 <u8x8_byte_SendByte>:
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
 80080f0:	460b      	mov	r3, r1
 80080f2:	70fb      	strb	r3, [r7, #3]
 80080f4:	1cfb      	adds	r3, r7, #3
 80080f6:	461a      	mov	r2, r3
 80080f8:	2101      	movs	r1, #1
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ffe1 	bl	80080c2 <u8x8_byte_SendBytes>
 8008100:	4603      	mov	r3, r0
 8008102:	4618      	mov	r0, r3
 8008104:	3708      	adds	r7, #8
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <u8x8_byte_StartTransfer>:
 800810a:	b590      	push	{r4, r7, lr}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691c      	ldr	r4, [r3, #16]
 8008116:	2300      	movs	r3, #0
 8008118:	2200      	movs	r2, #0
 800811a:	2118      	movs	r1, #24
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	47a0      	blx	r4
 8008120:	4603      	mov	r3, r0
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	bd90      	pop	{r4, r7, pc}

0800812a <u8x8_byte_EndTransfer>:
 800812a:	b590      	push	{r4, r7, lr}
 800812c:	b083      	sub	sp, #12
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691c      	ldr	r4, [r3, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	2200      	movs	r2, #0
 800813a:	2119      	movs	r1, #25
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	47a0      	blx	r4
 8008140:	4603      	mov	r3, r0
 8008142:	4618      	mov	r0, r3
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	bd90      	pop	{r4, r7, pc}

0800814a <u8x8_cad_SendCmd>:
 800814a:	b590      	push	{r4, r7, lr}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
 8008152:	460b      	mov	r3, r1
 8008154:	70fb      	strb	r3, [r7, #3]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68dc      	ldr	r4, [r3, #12]
 800815a:	78fa      	ldrb	r2, [r7, #3]
 800815c:	2300      	movs	r3, #0
 800815e:	2115      	movs	r1, #21
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	47a0      	blx	r4
 8008164:	4603      	mov	r3, r0
 8008166:	4618      	mov	r0, r3
 8008168:	370c      	adds	r7, #12
 800816a:	46bd      	mov	sp, r7
 800816c:	bd90      	pop	{r4, r7, pc}

0800816e <u8x8_cad_SendArg>:
 800816e:	b590      	push	{r4, r7, lr}
 8008170:	b083      	sub	sp, #12
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
 8008176:	460b      	mov	r3, r1
 8008178:	70fb      	strb	r3, [r7, #3]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68dc      	ldr	r4, [r3, #12]
 800817e:	78fa      	ldrb	r2, [r7, #3]
 8008180:	2300      	movs	r3, #0
 8008182:	2116      	movs	r1, #22
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	47a0      	blx	r4
 8008188:	4603      	mov	r3, r0
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	bd90      	pop	{r4, r7, pc}

08008192 <u8x8_cad_SendData>:
 8008192:	b590      	push	{r4, r7, lr}
 8008194:	b085      	sub	sp, #20
 8008196:	af00      	add	r7, sp, #0
 8008198:	60f8      	str	r0, [r7, #12]
 800819a:	460b      	mov	r3, r1
 800819c:	607a      	str	r2, [r7, #4]
 800819e:	72fb      	strb	r3, [r7, #11]
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	68dc      	ldr	r4, [r3, #12]
 80081a4:	7afa      	ldrb	r2, [r7, #11]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2117      	movs	r1, #23
 80081aa:	68f8      	ldr	r0, [r7, #12]
 80081ac:	47a0      	blx	r4
 80081ae:	4603      	mov	r3, r0
 80081b0:	4618      	mov	r0, r3
 80081b2:	3714      	adds	r7, #20
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd90      	pop	{r4, r7, pc}

080081b8 <u8x8_cad_StartTransfer>:
 80081b8:	b590      	push	{r4, r7, lr}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	68dc      	ldr	r4, [r3, #12]
 80081c4:	2300      	movs	r3, #0
 80081c6:	2200      	movs	r2, #0
 80081c8:	2118      	movs	r1, #24
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	47a0      	blx	r4
 80081ce:	4603      	mov	r3, r0
 80081d0:	4618      	mov	r0, r3
 80081d2:	370c      	adds	r7, #12
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd90      	pop	{r4, r7, pc}

080081d8 <u8x8_cad_EndTransfer>:
 80081d8:	b590      	push	{r4, r7, lr}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	68dc      	ldr	r4, [r3, #12]
 80081e4:	2300      	movs	r3, #0
 80081e6:	2200      	movs	r2, #0
 80081e8:	2119      	movs	r1, #25
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	47a0      	blx	r4
 80081ee:	4603      	mov	r3, r0
 80081f0:	4618      	mov	r0, r3
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd90      	pop	{r4, r7, pc}

080081f8 <u8x8_cad_SendSequence>:
 80081f8:	b590      	push	{r4, r7, lr}
 80081fa:	b085      	sub	sp, #20
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	3301      	adds	r3, #1
 800820c:	603b      	str	r3, [r7, #0]
 800820e:	7bfb      	ldrb	r3, [r7, #15]
 8008210:	2bfe      	cmp	r3, #254	; 0xfe
 8008212:	d031      	beq.n	8008278 <u8x8_cad_SendSequence+0x80>
 8008214:	2bfe      	cmp	r3, #254	; 0xfe
 8008216:	dc3d      	bgt.n	8008294 <u8x8_cad_SendSequence+0x9c>
 8008218:	2b19      	cmp	r3, #25
 800821a:	dc3b      	bgt.n	8008294 <u8x8_cad_SendSequence+0x9c>
 800821c:	2b18      	cmp	r3, #24
 800821e:	da23      	bge.n	8008268 <u8x8_cad_SendSequence+0x70>
 8008220:	2b16      	cmp	r3, #22
 8008222:	dc02      	bgt.n	800822a <u8x8_cad_SendSequence+0x32>
 8008224:	2b15      	cmp	r3, #21
 8008226:	da03      	bge.n	8008230 <u8x8_cad_SendSequence+0x38>
 8008228:	e034      	b.n	8008294 <u8x8_cad_SendSequence+0x9c>
 800822a:	2b17      	cmp	r3, #23
 800822c:	d00e      	beq.n	800824c <u8x8_cad_SendSequence+0x54>
 800822e:	e031      	b.n	8008294 <u8x8_cad_SendSequence+0x9c>
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	73bb      	strb	r3, [r7, #14]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68dc      	ldr	r4, [r3, #12]
 800823a:	7bba      	ldrb	r2, [r7, #14]
 800823c:	7bf9      	ldrb	r1, [r7, #15]
 800823e:	2300      	movs	r3, #0
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	47a0      	blx	r4
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	603b      	str	r3, [r7, #0]
 800824a:	e022      	b.n	8008292 <u8x8_cad_SendSequence+0x9a>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	73bb      	strb	r3, [r7, #14]
 8008252:	f107 030e 	add.w	r3, r7, #14
 8008256:	461a      	mov	r2, r3
 8008258:	2101      	movs	r1, #1
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7ff ff99 	bl	8008192 <u8x8_cad_SendData>
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	3301      	adds	r3, #1
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	e014      	b.n	8008292 <u8x8_cad_SendSequence+0x9a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68dc      	ldr	r4, [r3, #12]
 800826c:	7bf9      	ldrb	r1, [r7, #15]
 800826e:	2300      	movs	r3, #0
 8008270:	2200      	movs	r2, #0
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	47a0      	blx	r4
 8008276:	e00c      	b.n	8008292 <u8x8_cad_SendSequence+0x9a>
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	73bb      	strb	r3, [r7, #14]
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	461a      	mov	r2, r3
 8008282:	2129      	movs	r1, #41	; 0x29
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 fa2c 	bl	80086e2 <u8x8_gpio_call>
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	603b      	str	r3, [r7, #0]
 8008290:	bf00      	nop
 8008292:	e7b6      	b.n	8008202 <u8x8_cad_SendSequence+0xa>
 8008294:	bf00      	nop
 8008296:	3714      	adds	r7, #20
 8008298:	46bd      	mov	sp, r7
 800829a:	bd90      	pop	{r4, r7, pc}

0800829c <u8x8_i2c_data_transfer>:
 800829c:	b590      	push	{r4, r7, lr}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7ff ff2d 	bl	800810a <u8x8_byte_StartTransfer>
 80082b0:	2140      	movs	r1, #64	; 0x40
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff ff18 	bl	80080e8 <u8x8_byte_SendByte>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	691c      	ldr	r4, [r3, #16]
 80082bc:	7afa      	ldrb	r2, [r7, #11]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	2117      	movs	r1, #23
 80082c2:	68f8      	ldr	r0, [r7, #12]
 80082c4:	47a0      	blx	r4
 80082c6:	68f8      	ldr	r0, [r7, #12]
 80082c8:	f7ff ff2f 	bl	800812a <u8x8_byte_EndTransfer>
 80082cc:	bf00      	nop
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd90      	pop	{r4, r7, pc}

080082d4 <u8x8_cad_ssd13xx_fast_i2c>:
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b087      	sub	sp, #28
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	460b      	mov	r3, r1
 80082e0:	72fb      	strb	r3, [r7, #11]
 80082e2:	4613      	mov	r3, r2
 80082e4:	72bb      	strb	r3, [r7, #10]
 80082e6:	7afb      	ldrb	r3, [r7, #11]
 80082e8:	3b14      	subs	r3, #20
 80082ea:	2b05      	cmp	r3, #5
 80082ec:	d86e      	bhi.n	80083cc <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80082ee:	a201      	add	r2, pc, #4	; (adr r2, 80082f4 <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80082f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f4:	0800838b 	.word	0x0800838b
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	0800833b 	.word	0x0800833b
 8008300:	08008347 	.word	0x08008347
 8008304:	080083af 	.word	0x080083af
 8008308:	080083b7 	.word	0x080083b7
 800830c:	4b33      	ldr	r3, [pc, #204]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <u8x8_cad_ssd13xx_fast_i2c+0x46>
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f7ff ff08 	bl	800812a <u8x8_byte_EndTransfer>
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff fef5 	bl	800810a <u8x8_byte_StartTransfer>
 8008320:	2100      	movs	r1, #0
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f7ff fee0 	bl	80080e8 <u8x8_byte_SendByte>
 8008328:	7abb      	ldrb	r3, [r7, #10]
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff fedb 	bl	80080e8 <u8x8_byte_SendByte>
 8008332:	4b2a      	ldr	r3, [pc, #168]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008334:	2201      	movs	r2, #1
 8008336:	701a      	strb	r2, [r3, #0]
 8008338:	e04a      	b.n	80083d0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
 800833a:	7abb      	ldrb	r3, [r7, #10]
 800833c:	4619      	mov	r1, r3
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7ff fed2 	bl	80080e8 <u8x8_byte_SendByte>
 8008344:	e044      	b.n	80083d0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
 8008346:	4b25      	ldr	r3, [pc, #148]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d002      	beq.n	8008354 <u8x8_cad_ssd13xx_fast_i2c+0x80>
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff feeb 	bl	800812a <u8x8_byte_EndTransfer>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	617b      	str	r3, [r7, #20]
 8008358:	e00a      	b.n	8008370 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
 800835a:	697a      	ldr	r2, [r7, #20]
 800835c:	2118      	movs	r1, #24
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f7ff ff9c 	bl	800829c <u8x8_i2c_data_transfer>
 8008364:	7abb      	ldrb	r3, [r7, #10]
 8008366:	3b18      	subs	r3, #24
 8008368:	72bb      	strb	r3, [r7, #10]
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	3318      	adds	r3, #24
 800836e:	617b      	str	r3, [r7, #20]
 8008370:	7abb      	ldrb	r3, [r7, #10]
 8008372:	2b18      	cmp	r3, #24
 8008374:	d8f1      	bhi.n	800835a <u8x8_cad_ssd13xx_fast_i2c+0x86>
 8008376:	7abb      	ldrb	r3, [r7, #10]
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4619      	mov	r1, r3
 800837c:	68f8      	ldr	r0, [r7, #12]
 800837e:	f7ff ff8d 	bl	800829c <u8x8_i2c_data_transfer>
 8008382:	4b16      	ldr	r3, [pc, #88]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8008384:	2200      	movs	r2, #0
 8008386:	701a      	strb	r2, [r3, #0]
 8008388:	e022      	b.n	80083d0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008390:	2bff      	cmp	r3, #255	; 0xff
 8008392:	d103      	bne.n	800839c <u8x8_cad_ssd13xx_fast_i2c+0xc8>
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2278      	movs	r2, #120	; 0x78
 8008398:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	691c      	ldr	r4, [r3, #16]
 80083a0:	7aba      	ldrb	r2, [r7, #10]
 80083a2:	7af9      	ldrb	r1, [r7, #11]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	47a0      	blx	r4
 80083aa:	4603      	mov	r3, r0
 80083ac:	e011      	b.n	80083d2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
 80083ae:	4b0b      	ldr	r3, [pc, #44]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083b0:	2200      	movs	r2, #0
 80083b2:	701a      	strb	r2, [r3, #0]
 80083b4:	e00c      	b.n	80083d0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d002      	beq.n	80083c4 <u8x8_cad_ssd13xx_fast_i2c+0xf0>
 80083be:	68f8      	ldr	r0, [r7, #12]
 80083c0:	f7ff feb3 	bl	800812a <u8x8_byte_EndTransfer>
 80083c4:	4b05      	ldr	r3, [pc, #20]	; (80083dc <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80083c6:	2200      	movs	r2, #0
 80083c8:	701a      	strb	r2, [r3, #0]
 80083ca:	e001      	b.n	80083d0 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
 80083cc:	2300      	movs	r3, #0
 80083ce:	e000      	b.n	80083d2 <u8x8_cad_ssd13xx_fast_i2c+0xfe>
 80083d0:	2301      	movs	r3, #1
 80083d2:	4618      	mov	r0, r3
 80083d4:	371c      	adds	r7, #28
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd90      	pop	{r4, r7, pc}
 80083da:	bf00      	nop
 80083dc:	20000b58 	.word	0x20000b58

080083e0 <u8x8_d_ssd1306_128x32_generic>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	607b      	str	r3, [r7, #4]
 80083ea:	460b      	mov	r3, r1
 80083ec:	72fb      	strb	r3, [r7, #11]
 80083ee:	4613      	mov	r3, r2
 80083f0:	72bb      	strb	r3, [r7, #10]
 80083f2:	7afb      	ldrb	r3, [r7, #11]
 80083f4:	3b0a      	subs	r3, #10
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	f200 8090 	bhi.w	800851c <u8x8_d_ssd1306_128x32_generic+0x13c>
 80083fc:	a201      	add	r2, pc, #4	; (adr r2, 8008404 <u8x8_d_ssd1306_128x32_generic+0x24>)
 80083fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008402:	bf00      	nop
 8008404:	0800841d 	.word	0x0800841d
 8008408:	0800842d 	.word	0x0800842d
 800840c:	0800851d 	.word	0x0800851d
 8008410:	08008447 	.word	0x08008447
 8008414:	08008479 	.word	0x08008479
 8008418:	08008499 	.word	0x08008499
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f000 f8c3 	bl	80085a8 <u8x8_d_helper_display_init>
 8008422:	4942      	ldr	r1, [pc, #264]	; (800852c <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff fee7 	bl	80081f8 <u8x8_cad_SendSequence>
 800842a:	e079      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 800842c:	7abb      	ldrb	r3, [r7, #10]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d104      	bne.n	800843c <u8x8_d_ssd1306_128x32_generic+0x5c>
 8008432:	493f      	ldr	r1, [pc, #252]	; (8008530 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f7ff fedf 	bl	80081f8 <u8x8_cad_SendSequence>
 800843a:	e071      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 800843c:	493d      	ldr	r1, [pc, #244]	; (8008534 <u8x8_d_ssd1306_128x32_generic+0x154>)
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f7ff feda 	bl	80081f8 <u8x8_cad_SendSequence>
 8008444:	e06c      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 8008446:	7abb      	ldrb	r3, [r7, #10]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d10a      	bne.n	8008462 <u8x8_d_ssd1306_128x32_generic+0x82>
 800844c:	493a      	ldr	r1, [pc, #232]	; (8008538 <u8x8_d_ssd1306_128x32_generic+0x158>)
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f7ff fed2 	bl	80081f8 <u8x8_cad_SendSequence>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	7c9a      	ldrb	r2, [r3, #18]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8008460:	e05e      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 8008462:	4936      	ldr	r1, [pc, #216]	; (800853c <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8008464:	68f8      	ldr	r0, [r7, #12]
 8008466:	f7ff fec7 	bl	80081f8 <u8x8_cad_SendSequence>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	7cda      	ldrb	r2, [r3, #19]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8008476:	e053      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 8008478:	68f8      	ldr	r0, [r7, #12]
 800847a:	f7ff fe9d 	bl	80081b8 <u8x8_cad_StartTransfer>
 800847e:	2181      	movs	r1, #129	; 0x81
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f7ff fe62 	bl	800814a <u8x8_cad_SendCmd>
 8008486:	7abb      	ldrb	r3, [r7, #10]
 8008488:	4619      	mov	r1, r3
 800848a:	68f8      	ldr	r0, [r7, #12]
 800848c:	f7ff fe6f 	bl	800816e <u8x8_cad_SendArg>
 8008490:	68f8      	ldr	r0, [r7, #12]
 8008492:	f7ff fea1 	bl	80081d8 <u8x8_cad_EndTransfer>
 8008496:	e043      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f7ff fe8d 	bl	80081b8 <u8x8_cad_StartTransfer>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	795b      	ldrb	r3, [r3, #5]
 80084a2:	75fb      	strb	r3, [r7, #23]
 80084a4:	7dfb      	ldrb	r3, [r7, #23]
 80084a6:	00db      	lsls	r3, r3, #3
 80084a8:	75fb      	strb	r3, [r7, #23]
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	4413      	add	r3, r2
 80084b4:	75fb      	strb	r3, [r7, #23]
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
 80084b8:	091b      	lsrs	r3, r3, #4
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f043 0310 	orr.w	r3, r3, #16
 80084c0:	b2db      	uxtb	r3, r3
 80084c2:	4619      	mov	r1, r3
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f7ff fe40 	bl	800814a <u8x8_cad_SendCmd>
 80084ca:	7dfb      	ldrb	r3, [r7, #23]
 80084cc:	f003 030f 	and.w	r3, r3, #15
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	4619      	mov	r1, r3
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f7ff fe38 	bl	800814a <u8x8_cad_SendCmd>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	799b      	ldrb	r3, [r3, #6]
 80084de:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	4619      	mov	r1, r3
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fe2f 	bl	800814a <u8x8_cad_SendCmd>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	791b      	ldrb	r3, [r3, #4]
 80084f0:	75bb      	strb	r3, [r7, #22]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	613b      	str	r3, [r7, #16]
 80084f8:	7dbb      	ldrb	r3, [r7, #22]
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	b2db      	uxtb	r3, r3
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	4619      	mov	r1, r3
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f7ff fe45 	bl	8008192 <u8x8_cad_SendData>
 8008508:	7abb      	ldrb	r3, [r7, #10]
 800850a:	3b01      	subs	r3, #1
 800850c:	72bb      	strb	r3, [r7, #10]
 800850e:	7abb      	ldrb	r3, [r7, #10]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d1eb      	bne.n	80084ec <u8x8_d_ssd1306_128x32_generic+0x10c>
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f7ff fe5f 	bl	80081d8 <u8x8_cad_EndTransfer>
 800851a:	e001      	b.n	8008520 <u8x8_d_ssd1306_128x32_generic+0x140>
 800851c:	2300      	movs	r3, #0
 800851e:	e000      	b.n	8008522 <u8x8_d_ssd1306_128x32_generic+0x142>
 8008520:	2301      	movs	r3, #1
 8008522:	4618      	mov	r0, r3
 8008524:	3718      	adds	r7, #24
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	0801b4cc 	.word	0x0801b4cc
 8008530:	0801b504 	.word	0x0801b504
 8008534:	0801b50c 	.word	0x0801b50c
 8008538:	0801b514 	.word	0x0801b514
 800853c:	0801b51c 	.word	0x0801b51c

08008540 <u8x8_d_ssd1306_128x32_univision>:
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	460b      	mov	r3, r1
 800854c:	72fb      	strb	r3, [r7, #11]
 800854e:	4613      	mov	r3, r2
 8008550:	72bb      	strb	r3, [r7, #10]
 8008552:	7afb      	ldrb	r3, [r7, #11]
 8008554:	2b09      	cmp	r3, #9
 8008556:	d105      	bne.n	8008564 <u8x8_d_ssd1306_128x32_univision+0x24>
 8008558:	4908      	ldr	r1, [pc, #32]	; (800857c <u8x8_d_ssd1306_128x32_univision+0x3c>)
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f810 	bl	8008580 <u8x8_d_helper_display_setup_memory>
 8008560:	2301      	movs	r3, #1
 8008562:	e006      	b.n	8008572 <u8x8_d_ssd1306_128x32_univision+0x32>
 8008564:	7aba      	ldrb	r2, [r7, #10]
 8008566:	7af9      	ldrb	r1, [r7, #11]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff ff38 	bl	80083e0 <u8x8_d_ssd1306_128x32_generic>
 8008570:	4603      	mov	r3, r0
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	0801b524 	.word	0x0801b524

08008580 <u8x8_d_helper_display_setup_memory>:
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
 8008588:	6039      	str	r1, [r7, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	601a      	str	r2, [r3, #0]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	7c9a      	ldrb	r2, [r3, #18]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <u8x8_d_helper_display_init>:
 80085a8:	b590      	push	{r4, r7, lr}
 80085aa:	b083      	sub	sp, #12
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	695c      	ldr	r4, [r3, #20]
 80085b4:	2300      	movs	r3, #0
 80085b6:	2200      	movs	r2, #0
 80085b8:	2128      	movs	r1, #40	; 0x28
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	47a0      	blx	r4
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	68dc      	ldr	r4, [r3, #12]
 80085c2:	2300      	movs	r3, #0
 80085c4:	2200      	movs	r2, #0
 80085c6:	2114      	movs	r1, #20
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	47a0      	blx	r4
 80085cc:	2201      	movs	r2, #1
 80085ce:	214b      	movs	r1, #75	; 0x4b
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f886 	bl	80086e2 <u8x8_gpio_call>
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	791b      	ldrb	r3, [r3, #4]
 80085dc:	461a      	mov	r2, r3
 80085de:	2129      	movs	r1, #41	; 0x29
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f87e 	bl	80086e2 <u8x8_gpio_call>
 80085e6:	2200      	movs	r2, #0
 80085e8:	214b      	movs	r1, #75	; 0x4b
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 f879 	bl	80086e2 <u8x8_gpio_call>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	791b      	ldrb	r3, [r3, #4]
 80085f6:	461a      	mov	r2, r3
 80085f8:	2129      	movs	r1, #41	; 0x29
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f871 	bl	80086e2 <u8x8_gpio_call>
 8008600:	2201      	movs	r2, #1
 8008602:	214b      	movs	r1, #75	; 0x4b
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f000 f86c 	bl	80086e2 <u8x8_gpio_call>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	795b      	ldrb	r3, [r3, #5]
 8008610:	461a      	mov	r2, r3
 8008612:	2129      	movs	r1, #41	; 0x29
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f000 f864 	bl	80086e2 <u8x8_gpio_call>
 800861a:	bf00      	nop
 800861c:	370c      	adds	r7, #12
 800861e:	46bd      	mov	sp, r7
 8008620:	bd90      	pop	{r4, r7, pc}

08008622 <u8x8_DrawTile>:
 8008622:	b590      	push	{r4, r7, lr}
 8008624:	b085      	sub	sp, #20
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	4608      	mov	r0, r1
 800862c:	4611      	mov	r1, r2
 800862e:	461a      	mov	r2, r3
 8008630:	4603      	mov	r3, r0
 8008632:	70fb      	strb	r3, [r7, #3]
 8008634:	460b      	mov	r3, r1
 8008636:	70bb      	strb	r3, [r7, #2]
 8008638:	4613      	mov	r3, r2
 800863a:	707b      	strb	r3, [r7, #1]
 800863c:	78fb      	ldrb	r3, [r7, #3]
 800863e:	737b      	strb	r3, [r7, #13]
 8008640:	78bb      	ldrb	r3, [r7, #2]
 8008642:	73bb      	strb	r3, [r7, #14]
 8008644:	787b      	ldrb	r3, [r7, #1]
 8008646:	733b      	strb	r3, [r7, #12]
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	60bb      	str	r3, [r7, #8]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	689c      	ldr	r4, [r3, #8]
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	2201      	movs	r2, #1
 8008656:	210f      	movs	r1, #15
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	47a0      	blx	r4
 800865c:	4603      	mov	r3, r0
 800865e:	4618      	mov	r0, r3
 8008660:	3714      	adds	r7, #20
 8008662:	46bd      	mov	sp, r7
 8008664:	bd90      	pop	{r4, r7, pc}

08008666 <u8x8_SetupMemory>:
 8008666:	b590      	push	{r4, r7, lr}
 8008668:	b083      	sub	sp, #12
 800866a:	af00      	add	r7, sp, #0
 800866c:	6078      	str	r0, [r7, #4]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689c      	ldr	r4, [r3, #8]
 8008672:	2300      	movs	r3, #0
 8008674:	2200      	movs	r2, #0
 8008676:	2109      	movs	r1, #9
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	47a0      	blx	r4
 800867c:	bf00      	nop
 800867e:	370c      	adds	r7, #12
 8008680:	46bd      	mov	sp, r7
 8008682:	bd90      	pop	{r4, r7, pc}

08008684 <u8x8_InitDisplay>:
 8008684:	b590      	push	{r4, r7, lr}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689c      	ldr	r4, [r3, #8]
 8008690:	2300      	movs	r3, #0
 8008692:	2200      	movs	r2, #0
 8008694:	210a      	movs	r1, #10
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	47a0      	blx	r4
 800869a:	bf00      	nop
 800869c:	370c      	adds	r7, #12
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd90      	pop	{r4, r7, pc}

080086a2 <u8x8_SetPowerSave>:
 80086a2:	b590      	push	{r4, r7, lr}
 80086a4:	b083      	sub	sp, #12
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	460b      	mov	r3, r1
 80086ac:	70fb      	strb	r3, [r7, #3]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	689c      	ldr	r4, [r3, #8]
 80086b2:	78fa      	ldrb	r2, [r7, #3]
 80086b4:	2300      	movs	r3, #0
 80086b6:	210b      	movs	r1, #11
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	47a0      	blx	r4
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd90      	pop	{r4, r7, pc}

080086c4 <u8x8_RefreshDisplay>:
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689c      	ldr	r4, [r3, #8]
 80086d0:	2300      	movs	r3, #0
 80086d2:	2200      	movs	r2, #0
 80086d4:	2110      	movs	r1, #16
 80086d6:	6878      	ldr	r0, [r7, #4]
 80086d8:	47a0      	blx	r4
 80086da:	bf00      	nop
 80086dc:	370c      	adds	r7, #12
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd90      	pop	{r4, r7, pc}

080086e2 <u8x8_gpio_call>:
 80086e2:	b590      	push	{r4, r7, lr}
 80086e4:	b083      	sub	sp, #12
 80086e6:	af00      	add	r7, sp, #0
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	460b      	mov	r3, r1
 80086ec:	70fb      	strb	r3, [r7, #3]
 80086ee:	4613      	mov	r3, r2
 80086f0:	70bb      	strb	r3, [r7, #2]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	695c      	ldr	r4, [r3, #20]
 80086f6:	78ba      	ldrb	r2, [r7, #2]
 80086f8:	78f9      	ldrb	r1, [r7, #3]
 80086fa:	2300      	movs	r3, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	47a0      	blx	r4
 8008700:	bf00      	nop
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	bd90      	pop	{r4, r7, pc}

08008708 <u8x8_dummy_cb>:
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	607b      	str	r3, [r7, #4]
 8008712:	460b      	mov	r3, r1
 8008714:	72fb      	strb	r3, [r7, #11]
 8008716:	4613      	mov	r3, r2
 8008718:	72bb      	strb	r3, [r7, #10]
 800871a:	2300      	movs	r3, #0
 800871c:	4618      	mov	r0, r3
 800871e:	3714      	adds	r7, #20
 8008720:	46bd      	mov	sp, r7
 8008722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008726:	4770      	bx	lr

08008728 <u8x8_SetupDefaults>:
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a13      	ldr	r2, [pc, #76]	; (8008788 <u8x8_SetupDefaults+0x60>)
 800873a:	609a      	str	r2, [r3, #8]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a12      	ldr	r2, [pc, #72]	; (8008788 <u8x8_SetupDefaults+0x60>)
 8008740:	60da      	str	r2, [r3, #12]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a10      	ldr	r2, [pc, #64]	; (8008788 <u8x8_SetupDefaults+0x60>)
 8008746:	611a      	str	r2, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a0f      	ldr	r2, [pc, #60]	; (8008788 <u8x8_SetupDefaults+0x60>)
 800874c:	615a      	str	r2, [r3, #20]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2200      	movs	r2, #0
 800876a:	619a      	str	r2, [r3, #24]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	22ff      	movs	r2, #255	; 0xff
 8008770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	22ff      	movs	r2, #255	; 0xff
 8008778:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr
 8008788:	08008709 	.word	0x08008709

0800878c <u8x8_Setup>:
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
 8008798:	603b      	str	r3, [r7, #0]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f7ff ffc4 	bl	8008728 <u8x8_SetupDefaults>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	68ba      	ldr	r2, [r7, #8]
 80087a4:	609a      	str	r2, [r3, #8]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	60da      	str	r2, [r3, #12]
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	683a      	ldr	r2, [r7, #0]
 80087b0:	611a      	str	r2, [r3, #16]
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	69ba      	ldr	r2, [r7, #24]
 80087b6:	615a      	str	r2, [r3, #20]
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7ff ff54 	bl	8008666 <u8x8_SetupMemory>
 80087be:	bf00      	nop
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b082      	sub	sp, #8
 80087cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80087ce:	4b14      	ldr	r3, [pc, #80]	; (8008820 <MX_DMA_Init+0x58>)
 80087d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d2:	4a13      	ldr	r2, [pc, #76]	; (8008820 <MX_DMA_Init+0x58>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	6493      	str	r3, [r2, #72]	; 0x48
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <MX_DMA_Init+0x58>)
 80087dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087de:	f003 0301 	and.w	r3, r3, #1
 80087e2:	607b      	str	r3, [r7, #4]
 80087e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80087e6:	2200      	movs	r2, #0
 80087e8:	2100      	movs	r1, #0
 80087ea:	200d      	movs	r0, #13
 80087ec:	f001 fef1 	bl	800a5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80087f0:	200d      	movs	r0, #13
 80087f2:	f001 ff0a 	bl	800a60a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80087f6:	2200      	movs	r2, #0
 80087f8:	2100      	movs	r1, #0
 80087fa:	200f      	movs	r0, #15
 80087fc:	f001 fee9 	bl	800a5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8008800:	200f      	movs	r0, #15
 8008802:	f001 ff02 	bl	800a60a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8008806:	2200      	movs	r2, #0
 8008808:	2100      	movs	r1, #0
 800880a:	2010      	movs	r0, #16
 800880c:	f001 fee1 	bl	800a5d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8008810:	2010      	movs	r0, #16
 8008812:	f001 fefa 	bl	800a60a <HAL_NVIC_EnableIRQ>

}
 8008816:	bf00      	nop
 8008818:	3708      	adds	r7, #8
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	40021000 	.word	0x40021000

08008824 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08a      	sub	sp, #40	; 0x28
 8008828:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800882a:	f107 0314 	add.w	r3, r7, #20
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	605a      	str	r2, [r3, #4]
 8008834:	609a      	str	r2, [r3, #8]
 8008836:	60da      	str	r2, [r3, #12]
 8008838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800883a:	4b6d      	ldr	r3, [pc, #436]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 800883c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800883e:	4a6c      	ldr	r2, [pc, #432]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008840:	f043 0304 	orr.w	r3, r3, #4
 8008844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008846:	4b6a      	ldr	r3, [pc, #424]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884a:	f003 0304 	and.w	r3, r3, #4
 800884e:	613b      	str	r3, [r7, #16]
 8008850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008852:	4b67      	ldr	r3, [pc, #412]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008856:	4a66      	ldr	r2, [pc, #408]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800885c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800885e:	4b64      	ldr	r3, [pc, #400]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008866:	60fb      	str	r3, [r7, #12]
 8008868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800886a:	4b61      	ldr	r3, [pc, #388]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 800886c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800886e:	4a60      	ldr	r2, [pc, #384]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008870:	f043 0301 	orr.w	r3, r3, #1
 8008874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008876:	4b5e      	ldr	r3, [pc, #376]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	60bb      	str	r3, [r7, #8]
 8008880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008882:	4b5b      	ldr	r3, [pc, #364]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008886:	4a5a      	ldr	r2, [pc, #360]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008888:	f043 0302 	orr.w	r3, r3, #2
 800888c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800888e:	4b58      	ldr	r3, [pc, #352]	; (80089f0 <MX_GPIO_Init+0x1cc>)
 8008890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	607b      	str	r3, [r7, #4]
 8008898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 800889a:	2200      	movs	r2, #0
 800889c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80088a0:	4854      	ldr	r0, [pc, #336]	; (80089f4 <MX_GPIO_Init+0x1d0>)
 80088a2:	f002 fe27 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_WU_Pin|GAZ_WU_Pin|DWM_RST_Pin, GPIO_PIN_RESET);
 80088a6:	2200      	movs	r2, #0
 80088a8:	f44f 71c4 	mov.w	r1, #392	; 0x188
 80088ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088b0:	f002 fe20 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_WU_Pin|LORA_WU_Pin|DWM_WU_Pin|DONE_2_Pin
 80088b4:	2200      	movs	r2, #0
 80088b6:	f248 013d 	movw	r1, #32829	; 0x803d
 80088ba:	484f      	ldr	r0, [pc, #316]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 80088bc:	f002 fe1a 	bl	800b4f4 <HAL_GPIO_WritePin>
                          |DONE_1_Pin|CHA_ISEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPS_RST_Pin|OLED_WU_Pin, GPIO_PIN_SET);
 80088c0:	2201      	movs	r2, #1
 80088c2:	f241 0102 	movw	r1, #4098	; 0x1002
 80088c6:	484c      	ldr	r0, [pc, #304]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 80088c8:	f002 fe14 	bl	800b4f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 80088cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088d2:	2301      	movs	r3, #1
 80088d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088d6:	2302      	movs	r3, #2
 80088d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088da:	2300      	movs	r3, #0
 80088dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 80088de:	f107 0314 	add.w	r3, r7, #20
 80088e2:	4619      	mov	r1, r3
 80088e4:	4843      	ldr	r0, [pc, #268]	; (80089f4 <MX_GPIO_Init+0x1d0>)
 80088e6:	f002 fb99 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80088ea:	2333      	movs	r3, #51	; 0x33
 80088ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80088ee:	2303      	movs	r3, #3
 80088f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f2:	2300      	movs	r3, #0
 80088f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088f6:	f107 0314 	add.w	r3, r7, #20
 80088fa:	4619      	mov	r1, r3
 80088fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008900:	f002 fb8c 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_WU_Pin|GAZ_WU_Pin;
 8008904:	2388      	movs	r3, #136	; 0x88
 8008906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008908:	2301      	movs	r3, #1
 800890a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800890c:	2300      	movs	r3, #0
 800890e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008910:	2300      	movs	r3, #0
 8008912:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008914:	f107 0314 	add.w	r3, r7, #20
 8008918:	4619      	mov	r1, r3
 800891a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800891e:	f002 fb7d 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_WU_Pin|LORA_WU_Pin;
 8008922:	2305      	movs	r3, #5
 8008924:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008926:	2301      	movs	r3, #1
 8008928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800892a:	2302      	movs	r3, #2
 800892c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800892e:	2300      	movs	r3, #0
 8008930:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008932:	f107 0314 	add.w	r3, r7, #20
 8008936:	4619      	mov	r1, r3
 8008938:	482f      	ldr	r0, [pc, #188]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 800893a:	f002 fb6f 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|OLED_WU_Pin;
 800893e:	f241 0302 	movw	r3, #4098	; 0x1002
 8008942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008944:	2301      	movs	r3, #1
 8008946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008948:	2301      	movs	r3, #1
 800894a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800894c:	2300      	movs	r3, #0
 800894e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008950:	f107 0314 	add.w	r3, r7, #20
 8008954:	4619      	mov	r1, r3
 8008956:	4828      	ldr	r0, [pc, #160]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 8008958:	f002 fb60 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DWM_WU_Pin|DONE_2_Pin|DONE_1_Pin;
 800895c:	f248 0318 	movw	r3, #32792	; 0x8018
 8008960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008962:	2301      	movs	r3, #1
 8008964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008966:	2300      	movs	r3, #0
 8008968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800896a:	2300      	movs	r3, #0
 800896c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800896e:	f107 0314 	add.w	r3, r7, #20
 8008972:	4619      	mov	r1, r3
 8008974:	4820      	ldr	r0, [pc, #128]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 8008976:	f002 fb51 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DWM_RST_Pin;
 800897a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800897e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008980:	2301      	movs	r3, #1
 8008982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008984:	2302      	movs	r3, #2
 8008986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008988:	2300      	movs	r3, #0
 800898a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DWM_RST_GPIO_Port, &GPIO_InitStruct);
 800898c:	f107 0314 	add.w	r3, r7, #20
 8008990:	4619      	mov	r1, r3
 8008992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008996:	f002 fb41 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHA_ISEL_Pin;
 800899a:	2320      	movs	r3, #32
 800899c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800899e:	2301      	movs	r3, #1
 80089a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80089a6:	2302      	movs	r3, #2
 80089a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHA_ISEL_GPIO_Port, &GPIO_InitStruct);
 80089aa:	f107 0314 	add.w	r3, r7, #20
 80089ae:	4619      	mov	r1, r3
 80089b0:	4811      	ldr	r0, [pc, #68]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 80089b2:	f002 fb33 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80089b6:	2308      	movs	r3, #8
 80089b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80089ba:	2303      	movs	r3, #3
 80089bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089be:	2300      	movs	r3, #0
 80089c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80089c2:	f107 0314 	add.w	r3, r7, #20
 80089c6:	4619      	mov	r1, r3
 80089c8:	480c      	ldr	r0, [pc, #48]	; (80089fc <MX_GPIO_Init+0x1d8>)
 80089ca:	f002 fb27 	bl	800b01c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BP_ON_Pin|BP_SOS_Pin;
 80089ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089d8:	2301      	movs	r3, #1
 80089da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089dc:	f107 0314 	add.w	r3, r7, #20
 80089e0:	4619      	mov	r1, r3
 80089e2:	4805      	ldr	r0, [pc, #20]	; (80089f8 <MX_GPIO_Init+0x1d4>)
 80089e4:	f002 fb1a 	bl	800b01c <HAL_GPIO_Init>

}
 80089e8:	bf00      	nop
 80089ea:	3728      	adds	r7, #40	; 0x28
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}
 80089f0:	40021000 	.word	0x40021000
 80089f4:	48000800 	.word	0x48000800
 80089f8:	48000400 	.word	0x48000400
 80089fc:	48001c00 	.word	0x48001c00

08008a00 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008a04:	4b1b      	ldr	r3, [pc, #108]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a06:	4a1c      	ldr	r2, [pc, #112]	; (8008a78 <MX_I2C1_Init+0x78>)
 8008a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 8008a0a:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a0c:	4a1b      	ldr	r2, [pc, #108]	; (8008a7c <MX_I2C1_Init+0x7c>)
 8008a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8008a10:	4b18      	ldr	r3, [pc, #96]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a16:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a18:	2201      	movs	r2, #1
 8008a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a1c:	4b15      	ldr	r3, [pc, #84]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a1e:	2200      	movs	r2, #0
 8008a20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008a28:	4b12      	ldr	r3, [pc, #72]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a30:	2200      	movs	r2, #0
 8008a32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008a34:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a36:	2200      	movs	r2, #0
 8008a38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008a3a:	480e      	ldr	r0, [pc, #56]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a3c:	f002 fd72 	bl	800b524 <HAL_I2C_Init>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d001      	beq.n	8008a4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8008a46:	f000 ff67 	bl	8009918 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	4809      	ldr	r0, [pc, #36]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a4e:	f003 fb37 	bl	800c0c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d001      	beq.n	8008a5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8008a58:	f000 ff5e 	bl	8009918 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8008a5c:	2100      	movs	r1, #0
 8008a5e:	4805      	ldr	r0, [pc, #20]	; (8008a74 <MX_I2C1_Init+0x74>)
 8008a60:	f003 fb79 	bl	800c156 <HAL_I2CEx_ConfigDigitalFilter>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8008a6a:	f000 ff55 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008a6e:	bf00      	nop
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20001d30 	.word	0x20001d30
 8008a78:	40005400 	.word	0x40005400
 8008a7c:	00303d5b 	.word	0x00303d5b

08008a80 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008a84:	4b1b      	ldr	r3, [pc, #108]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008a86:	4a1c      	ldr	r2, [pc, #112]	; (8008af8 <MX_I2C2_Init+0x78>)
 8008a88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 8008a8a:	4b1a      	ldr	r3, [pc, #104]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008a8c:	4a1b      	ldr	r2, [pc, #108]	; (8008afc <MX_I2C2_Init+0x7c>)
 8008a8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8008a90:	4b18      	ldr	r3, [pc, #96]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008a92:	2200      	movs	r2, #0
 8008a94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008a96:	4b17      	ldr	r3, [pc, #92]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008a98:	2201      	movs	r2, #1
 8008a9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008a9c:	4b15      	ldr	r3, [pc, #84]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8008aa2:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8008aa8:	4b12      	ldr	r3, [pc, #72]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008aaa:	2200      	movs	r2, #0
 8008aac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008aae:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008ab4:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008aba:	480e      	ldr	r0, [pc, #56]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008abc:	f002 fd32 	bl	800b524 <HAL_I2C_Init>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d001      	beq.n	8008aca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8008ac6:	f000 ff27 	bl	8009918 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8008aca:	2100      	movs	r1, #0
 8008acc:	4809      	ldr	r0, [pc, #36]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008ace:	f003 faf7 	bl	800c0c0 <HAL_I2CEx_ConfigAnalogFilter>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d001      	beq.n	8008adc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8008ad8:	f000 ff1e 	bl	8009918 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8008adc:	2100      	movs	r1, #0
 8008ade:	4805      	ldr	r0, [pc, #20]	; (8008af4 <MX_I2C2_Init+0x74>)
 8008ae0:	f003 fb39 	bl	800c156 <HAL_I2CEx_ConfigDigitalFilter>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8008aea:	f000 ff15 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008aee:	bf00      	nop
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop
 8008af4:	20001ce4 	.word	0x20001ce4
 8008af8:	40005800 	.word	0x40005800
 8008afc:	0010061a 	.word	0x0010061a

08008b00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b08c      	sub	sp, #48	; 0x30
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b08:	f107 031c 	add.w	r3, r7, #28
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	605a      	str	r2, [r3, #4]
 8008b12:	609a      	str	r2, [r3, #8]
 8008b14:	60da      	str	r2, [r3, #12]
 8008b16:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a2e      	ldr	r2, [pc, #184]	; (8008bd8 <HAL_I2C_MspInit+0xd8>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d128      	bne.n	8008b74 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b22:	4b2e      	ldr	r3, [pc, #184]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b26:	4a2d      	ldr	r2, [pc, #180]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b28:	f043 0302 	orr.w	r3, r3, #2
 8008b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b2e:	4b2b      	ldr	r3, [pc, #172]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 8008b3a:	23c0      	movs	r3, #192	; 0xc0
 8008b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b3e:	2312      	movs	r3, #18
 8008b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008b42:	2301      	movs	r3, #1
 8008b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b46:	2303      	movs	r3, #3
 8008b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b4e:	f107 031c 	add.w	r3, r7, #28
 8008b52:	4619      	mov	r1, r3
 8008b54:	4822      	ldr	r0, [pc, #136]	; (8008be0 <HAL_I2C_MspInit+0xe0>)
 8008b56:	f002 fa61 	bl	800b01c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008b5a:	4b20      	ldr	r3, [pc, #128]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b5e:	4a1f      	ldr	r2, [pc, #124]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b64:	6593      	str	r3, [r2, #88]	; 0x58
 8008b66:	4b1d      	ldr	r3, [pc, #116]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8008b72:	e02d      	b.n	8008bd0 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1a      	ldr	r2, [pc, #104]	; (8008be4 <HAL_I2C_MspInit+0xe4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d128      	bne.n	8008bd0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b7e:	4b17      	ldr	r3, [pc, #92]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b82:	4a16      	ldr	r2, [pc, #88]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b84:	f043 0302 	orr.w	r3, r3, #2
 8008b88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008b8a:	4b14      	ldr	r3, [pc, #80]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b8e:	f003 0302 	and.w	r3, r3, #2
 8008b92:	613b      	str	r3, [r7, #16]
 8008b94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL2_OLED_Pin|SDA2_OLED_Pin;
 8008b96:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8008b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b9c:	2312      	movs	r3, #18
 8008b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ba4:	2303      	movs	r3, #3
 8008ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008ba8:	2304      	movs	r3, #4
 8008baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bac:	f107 031c 	add.w	r3, r7, #28
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	480b      	ldr	r0, [pc, #44]	; (8008be0 <HAL_I2C_MspInit+0xe0>)
 8008bb4:	f002 fa32 	bl	800b01c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008bb8:	4b08      	ldr	r3, [pc, #32]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbc:	4a07      	ldr	r2, [pc, #28]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008bbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008bc2:	6593      	str	r3, [r2, #88]	; 0x58
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <HAL_I2C_MspInit+0xdc>)
 8008bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bcc:	60fb      	str	r3, [r7, #12]
 8008bce:	68fb      	ldr	r3, [r7, #12]
}
 8008bd0:	bf00      	nop
 8008bd2:	3730      	adds	r7, #48	; 0x30
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	40005400 	.word	0x40005400
 8008bdc:	40021000 	.word	0x40021000
 8008be0:	48000400 	.word	0x48000400
 8008be4:	40005800 	.word	0x40005800

08008be8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <MX_IWDG_Init+0x34>)
 8008bee:	4a0c      	ldr	r2, [pc, #48]	; (8008c20 <MX_IWDG_Init+0x38>)
 8008bf0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <MX_IWDG_Init+0x34>)
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8008bf8:	4b08      	ldr	r3, [pc, #32]	; (8008c1c <MX_IWDG_Init+0x34>)
 8008bfa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8008bfe:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3750;
 8008c00:	4b06      	ldr	r3, [pc, #24]	; (8008c1c <MX_IWDG_Init+0x34>)
 8008c02:	f640 62a6 	movw	r2, #3750	; 0xea6
 8008c06:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8008c08:	4804      	ldr	r0, [pc, #16]	; (8008c1c <MX_IWDG_Init+0x34>)
 8008c0a:	f003 faf0 	bl	800c1ee <HAL_IWDG_Init>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d001      	beq.n	8008c18 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8008c14:	f000 fe80 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8008c18:	bf00      	nop
 8008c1a:	bd80      	pop	{r7, pc}
 8008c1c:	20001d7c 	.word	0x20001d7c
 8008c20:	40003000 	.word	0x40003000

08008c24 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b0f2      	sub	sp, #456	; 0x1c8
 8008c28:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	//EE_Status ee_status = EE_OK;
	int powersave = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

	uint32_t upperLedTab[LTAB + 2]; // Tab[0]  <= 1 for ON or 0 for OFF
	upperLedTab[LTABD + 1] = 20;		// dt1 before task 1
 8008c30:	2314      	movs	r3, #20
 8008c32:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	upperLedTab[LTABD + 2] = 9980;	// dt2 after	task 1
 8008c36:	f242 63fc 	movw	r3, #9980	; 0x26fc
 8008c3a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
	InitTaskState(upperLedTab, 2);
 8008c3e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8008c42:	2102      	movs	r1, #2
 8008c44:	4618      	mov	r0, r3
 8008c46:	f7fb f81b 	bl	8003c80 <InitTaskState>

	uint32_t sosTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	sosTab[LTABD + 1] = 10;		// dt1 before task 1
 8008c4a:	230a      	movs	r3, #10
 8008c4c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	InitTaskState(sosTab, 1);
 8008c50:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008c54:	2101      	movs	r1, #1
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fb f812 	bl	8003c80 <InitTaskState>

	// for REGAZ
	uint32_t ScreenTab[LTAB + 3]; // Tab[0] <= 1 for ON or 0 for OFF
	ScreenTab[LTABD + 1] = 50;	 // dt1 before task 1
 8008c5c:	2332      	movs	r3, #50	; 0x32
 8008c5e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	ScreenTab[LTABD + 2] = 300;	 // dt1 before task 2
 8008c62:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008c66:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	ScreenTab[LTABD + 3] = 50;	 // dt1 before task 3
 8008c6a:	2332      	movs	r3, #50	; 0x32
 8008c6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	InitTaskState(ScreenTab, 3);
 8008c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8008c74:	2103      	movs	r1, #3
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fb f802 	bl	8003c80 <InitTaskState>

	uint32_t BatTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	BatTab[LTABD + 1] = 5000;		 // dt1 before task 1
 8008c7c:	f241 3388 	movw	r3, #5000	; 0x1388
 8008c80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	InitTaskState(BatTab, 1);
 8008c84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008c88:	2101      	movs	r1, #1
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fa fff8 	bl	8003c80 <InitTaskState>

	uint32_t chargerTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	chargerTab[LTABD + 1] = 500;		// dt1 before task 1     // EJ : was 500
 8008c90:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8008c94:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	InitTaskState(chargerTab, 1);
 8008c98:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008c9c:	2101      	movs	r1, #1
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f7fa ffee 	bl	8003c80 <InitTaskState>

	uint32_t updateLedTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	updateLedTab[LTABD + 1] = 100;	 // dt1 before task 1
 8008ca4:	2364      	movs	r3, #100	; 0x64
 8008ca6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	InitTaskState(updateLedTab, 1);
 8008caa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8008cae:	2101      	movs	r1, #1
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fa ffe5 	bl	8003c80 <InitTaskState>

	uint32_t Timer_screen;
	uint32_t TimerLastLoraMessage = 0;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	uint32_t TimerLastSigfoxMessage = 0;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

	/*!-----END DCO AJOUT----!*/

	/*!--------DCO AJOUT----------------!*/

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008cc8:	e00a      	b.n	8008ce0 <main+0xbc>
	{
		TabAlert[i_fct] = 0;
 8008cca:	4a97      	ldr	r2, [pc, #604]	; (8008f28 <main+0x304>)
 8008ccc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 8008cd6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008cda:	3301      	adds	r3, #1
 8008cdc:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8008ce0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8008ce4:	2b0d      	cmp	r3, #13
 8008ce6:	ddf0      	ble.n	8008cca <main+0xa6>
	}
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008cee:	e00a      	b.n	8008d06 <main+0xe2>
	{
		TabGen[i_fct] = 0;
 8008cf0:	4a8e      	ldr	r2, [pc, #568]	; (8008f2c <main+0x308>)
 8008cf2:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008cf6:	2100      	movs	r1, #0
 8008cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 8008cfc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008d00:	3301      	adds	r3, #1
 8008d02:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8008d06:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8008d0a:	2b5a      	cmp	r3, #90	; 0x5a
 8008d0c:	ddf0      	ble.n	8008cf0 <main+0xcc>
	}
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008d14:	e00a      	b.n	8008d2c <main+0x108>
	{
		TabTimer[i_fct] = 0;
 8008d16:	4a86      	ldr	r2, [pc, #536]	; (8008f30 <main+0x30c>)
 8008d18:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008d1c:	2100      	movs	r1, #0
 8008d1e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 8008d22:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008d26:	3301      	adds	r3, #1
 8008d28:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8008d2c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8008d30:	2b05      	cmp	r3, #5
 8008d32:	ddf0      	ble.n	8008d16 <main+0xf2>
	}
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 8008d34:	2300      	movs	r3, #0
 8008d36:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008d3a:	e00c      	b.n	8008d56 <main+0x132>
	{
		TabFloatValue[i_fct] = 0;
 8008d3c:	4a7d      	ldr	r2, [pc, #500]	; (8008f34 <main+0x310>)
 8008d3e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008d42:	009b      	lsls	r3, r3, #2
 8008d44:	4413      	add	r3, r2
 8008d46:	f04f 0200 	mov.w	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 8008d4c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008d50:	3301      	adds	r3, #1
 8008d52:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008d56:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8008d5a:	2b16      	cmp	r3, #22
 8008d5c:	ddee      	ble.n	8008d3c <main+0x118>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008d5e:	2300      	movs	r3, #0
 8008d60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008d64:	e00a      	b.n	8008d7c <main+0x158>
	{
		TabDist[i_fct] = 0;
 8008d66:	4a74      	ldr	r2, [pc, #464]	; (8008f38 <main+0x314>)
 8008d68:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008d72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008d76:	3301      	adds	r3, #1
 8008d78:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8008d7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8008d80:	2b04      	cmp	r3, #4
 8008d82:	ddf0      	ble.n	8008d66 <main+0x142>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008d84:	2300      	movs	r3, #0
 8008d86:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008d8a:	e00a      	b.n	8008da2 <main+0x17e>
	{
		Rx_bufferNemeus[i_fct] = 0;
 8008d8c:	4a6b      	ldr	r2, [pc, #428]	; (8008f3c <main+0x318>)
 8008d8e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008d92:	4413      	add	r3, r2
 8008d94:	2200      	movs	r2, #0
 8008d96:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 8008d98:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008da2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8008da6:	2b04      	cmp	r3, #4
 8008da8:	ddf0      	ble.n	8008d8c <main+0x168>
	}
	TabGen[NMAXS_MALAISE] = SEC_DETECT_MALAISE * 100; // duration of malaise on sample (100 Hz) x [s] ;
 8008daa:	4b60      	ldr	r3, [pc, #384]	; (8008f2c <main+0x308>)
 8008dac:	f64e 2260 	movw	r2, #60000	; 0xea60
 8008db0:	631a      	str	r2, [r3, #48]	; 0x30
	TabGen[NMAXS_IMMO] = SEC_DETECT_IMMO * 100; // duration of immo on sample (100 Hz) x [s] ;
 8008db2:	4b5e      	ldr	r3, [pc, #376]	; (8008f2c <main+0x308>)
 8008db4:	4a62      	ldr	r2, [pc, #392]	; (8008f40 <main+0x31c>)
 8008db6:	635a      	str	r2, [r3, #52]	; 0x34
	TabGen[NMAXS_FALL] = SEC_DETECT_FALL * 100; // duration of fall on sample (100 Hz) x [s] ;
 8008db8:	4b5c      	ldr	r3, [pc, #368]	; (8008f2c <main+0x308>)
 8008dba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8008dbe:	639a      	str	r2, [r3, #56]	; 0x38
	TabGen[FALL_COND_2] = 1;
 8008dc0:	4b5a      	ldr	r3, [pc, #360]	; (8008f2c <main+0x308>)
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	675a      	str	r2, [r3, #116]	; 0x74
	TabGen[GPS_START_IT] = 1;
 8008dc6:	4b59      	ldr	r3, [pc, #356]	; (8008f2c <main+0x308>)
 8008dc8:	2201      	movs	r2, #1
 8008dca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TabGen[TYPE_ALERT] = NONE_ALERT;
 8008dce:	4b57      	ldr	r3, [pc, #348]	; (8008f2c <main+0x308>)
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	TabGen[BAT_VALUE] = 100;
 8008dd6:	4b55      	ldr	r3, [pc, #340]	; (8008f2c <main+0x308>)
 8008dd8:	2264      	movs	r2, #100	; 0x64
 8008dda:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	TabGen[SCREENSTATE] = 1;
 8008dde:	4b53      	ldr	r3, [pc, #332]	; (8008f2c <main+0x308>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008de6:	f001 fa80 	bl	800a2ea <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8008dea:	f000 fc3b 	bl	8009664 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 8008dee:	f7ff fd19 	bl	8008824 <MX_GPIO_Init>

	if (InOn() == 1 && bootloader(3) == 1)
 8008df2:	f7fa fb95 	bl	8003520 <InOn>
 8008df6:	4603      	mov	r3, r0
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d14a      	bne.n	8008e92 <main+0x26e>
 8008dfc:	2003      	movs	r0, #3
 8008dfe:	f7fa f92f 	bl	8003060 <bootloader>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d144      	bne.n	8008e92 <main+0x26e>
	{
		GPIO_InitTypeDef GPIO_InitStruct =
 8008e08:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	609a      	str	r2, [r3, #8]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	611a      	str	r2, [r3, #16]
		{ 0 };
		USB_DFU();
 8008e18:	f00c fe8a 	bl	8015b30 <USB_DFU>
		OutDone1(0); //Stop Powersave part 1
 8008e1c:	2000      	movs	r0, #0
 8008e1e:	f7fa fa87 	bl	8003330 <OutDone1>
		OutDone2(1); //Stop Powersave part 2
 8008e22:	2001      	movs	r0, #1
 8008e24:	f7fa fa9c 	bl	8003360 <OutDone2>

		/*Configure GPIO pins : PAPin PAPin */

		LedOn(0, 0, 100, TabGen);
 8008e28:	4b40      	ldr	r3, [pc, #256]	; (8008f2c <main+0x308>)
 8008e2a:	2264      	movs	r2, #100	; 0x64
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	2000      	movs	r0, #0
 8008e30:	f7fa fea2 	bl	8003b78 <LedOn>
		HAL_GPIO_DeInit(GPIOA, MOTOR_WU_Pin);
 8008e34:	2108      	movs	r1, #8
 8008e36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e3a:	f002 fa69 	bl	800b310 <HAL_GPIO_DeInit>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8008e3e:	4b41      	ldr	r3, [pc, #260]	; (8008f44 <main+0x320>)
 8008e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e42:	4a40      	ldr	r2, [pc, #256]	; (8008f44 <main+0x320>)
 8008e44:	f043 0301 	orr.w	r3, r3, #1
 8008e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e4a:	4b3e      	ldr	r3, [pc, #248]	; (8008f44 <main+0x320>)
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008e56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
		HAL_GPIO_WritePin(GPIOA, MOTOR_WU_Pin, GPIO_PIN_SET);
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	2108      	movs	r1, #8
 8008e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e62:	f002 fb47 	bl	800b4f4 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = MOTOR_WU_Pin;
 8008e66:	2308      	movs	r3, #8
 8008e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8008e72:	2302      	movs	r3, #2
 8008e74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8008e82:	4619      	mov	r1, r3
 8008e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e88:	f002 f8c8 	bl	800b01c <HAL_GPIO_Init>

		jumpToBootloader();
 8008e8c:	f000 fd0a 	bl	80098a4 <jumpToBootloader>
	{
 8008e90:	e015      	b.n	8008ebe <main+0x29a>
	}
	else
	{
		HAL_MspInit();
 8008e92:	f000 fd49 	bl	8009928 <HAL_MspInit>
		MX_DMA_Init();
 8008e96:	f7ff fc97 	bl	80087c8 <MX_DMA_Init>
		MX_I2C1_Init();
 8008e9a:	f7ff fdb1 	bl	8008a00 <MX_I2C1_Init>
		MX_I2C2_Init();
 8008e9e:	f7ff fdef 	bl	8008a80 <MX_I2C2_Init>
		MX_USART1_UART_Init();
 8008ea2:	f001 f80f 	bl	8009ec4 <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 8008ea6:	f001 f83d 	bl	8009f24 <MX_USART2_UART_Init>
		MX_USART3_UART_Init();
 8008eaa:	f001 f86b 	bl	8009f84 <MX_USART3_UART_Init>
		MX_TIM7_Init();
 8008eae:	f000 fee3 	bl	8009c78 <MX_TIM7_Init>
		MX_TIM16_Init();
 8008eb2:	f000 ff17 	bl	8009ce4 <MX_TIM16_Init>
		MX_IWDG_Init();
 8008eb6:	f7ff fe97 	bl	8008be8 <MX_IWDG_Init>
		Hes_USB_Config_Mode();
 8008eba:	f00c fe09 	bl	8015ad0 <Hes_USB_Config_Mode>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GAZ_WU_GPIO_Port, GAZ_WU_Pin, GPIO_PIN_SET);
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	2180      	movs	r1, #128	; 0x80
 8008ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008ec6:	f002 fb15 	bl	800b4f4 <HAL_GPIO_WritePin>
	OuChaIsel(0);
 8008eca:	2000      	movs	r0, #0
 8008ecc:	f7fa fa18 	bl	8003300 <OuChaIsel>

	OutDone1(0); //Stop Powersave part 1
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	f7fa fa2d 	bl	8003330 <OutDone1>
	OutDone2(1); //Stop Powersave part 2
 8008ed6:	2001      	movs	r0, #1
 8008ed8:	f7fa fa42 	bl	8003360 <OutDone2>
	HAL_Delay(1);
 8008edc:	2001      	movs	r0, #1
 8008ede:	f001 fa79 	bl	800a3d4 <HAL_Delay>
	OutLedWu(1);
 8008ee2:	2001      	movs	r0, #1
 8008ee4:	f7fa fad2 	bl	800348c <OutLedWu>

	TabGen[GPS_DURATION] = 10;
 8008ee8:	4b10      	ldr	r3, [pc, #64]	; (8008f2c <main+0x308>)
 8008eea:	220a      	movs	r2, #10
 8008eec:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	LedChargeIndic(TabGen);
 8008ef0:	480e      	ldr	r0, [pc, #56]	; (8008f2c <main+0x308>)
 8008ef2:	f7fa f822 	bl	8002f3a <LedChargeIndic>

	if (RCC->CSR & 1 << RCC_CSR_IWDGRSTF_Pos)
 8008ef6:	4b13      	ldr	r3, [pc, #76]	; (8008f44 <main+0x320>)
 8008ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008efc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d023      	beq.n	8008f4c <main+0x328>
	{

		__HAL_RCC_CLEAR_RESET_FLAGS();
 8008f04:	4b0f      	ldr	r3, [pc, #60]	; (8008f44 <main+0x320>)
 8008f06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f0a:	4a0e      	ldr	r2, [pc, #56]	; (8008f44 <main+0x320>)
 8008f0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008f10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		OutDone1(0); //Stop Powersave part 1
 8008f14:	2000      	movs	r0, #0
 8008f16:	f7fa fa0b 	bl	8003330 <OutDone1>
		OutDone2(1); //Stop Powersave part 2
 8008f1a:	2001      	movs	r0, #1
 8008f1c:	f7fa fa20 	bl	8003360 <OutDone2>

		REBOOT_FROM_WATCHDOG = 1;
 8008f20:	4b09      	ldr	r3, [pc, #36]	; (8008f48 <main+0x324>)
 8008f22:	2201      	movs	r2, #1
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e015      	b.n	8008f54 <main+0x330>
 8008f28:	20003078 	.word	0x20003078
 8008f2c:	200024d4 	.word	0x200024d4
 8008f30:	200027fc 	.word	0x200027fc
 8008f34:	20002b68 	.word	0x20002b68
 8008f38:	20001fa8 	.word	0x20001fa8
 8008f3c:	20002734 	.word	0x20002734
 8008f40:	00015f90 	.word	0x00015f90
 8008f44:	40021000 	.word	0x40021000
 8008f48:	20000b59 	.word	0x20000b59
	}
	else
		powersave = PowerSave();
 8008f4c:	f7fa fe5e 	bl	8003c0c <PowerSave>
 8008f50:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
	//RCC_GetFlagStatus(RCC_FLAG_IWDGRST);

	//LBL
	default_value();
 8008f54:	f7fa f8a4 	bl	80030a0 <default_value>
	Load_configuration_value();
 8008f58:	f7fa f95c 	bl	8003214 <Load_configuration_value>

	if (powersave == 0)
 8008f5c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d108      	bne.n	8008f76 <main+0x352>
	{

		HAL_Delay(2);
 8008f64:	2002      	movs	r0, #2
 8008f66:	f001 fa35 	bl	800a3d4 <HAL_Delay>
		LedOn(0, 0, 50, TabGen);
 8008f6a:	4bb4      	ldr	r3, [pc, #720]	; (800923c <main+0x618>)
 8008f6c:	2232      	movs	r2, #50	; 0x32
 8008f6e:	2100      	movs	r1, #0
 8008f70:	2000      	movs	r0, #0
 8008f72:	f7fa fe01 	bl	8003b78 <LedOn>
			PowerBuzVib(100);
#endif

	}

	HAL_TIM_Base_Start_IT(&htim7);
 8008f76:	48b2      	ldr	r0, [pc, #712]	; (8009240 <main+0x61c>)
 8008f78:	f006 f962 	bl	800f240 <HAL_TIM_Base_Start_IT>

	ScreenOn();
 8008f7c:	f7fa fe60 	bl	8003c40 <ScreenOn>
	display_Init(!REBOOT_FROM_WATCHDOG);
 8008f80:	4bb0      	ldr	r3, [pc, #704]	; (8009244 <main+0x620>)
 8008f82:	781b      	ldrb	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	bf0c      	ite	eq
 8008f88:	2301      	moveq	r3, #1
 8008f8a:	2300      	movne	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7f8 fbf8 	bl	8001784 <display_Init>
	{
		GpsStop();
	}
	else
	{
		TabGen[GPS_ON] = 1;
 8008f94:	4ba9      	ldr	r3, [pc, #676]	; (800923c <main+0x618>)
 8008f96:	2201      	movs	r2, #1
 8008f98:	605a      	str	r2, [r3, #4]
	}

	// IMU INITIALISATION

	Init_IMU();
 8008f9a:	f7fa fc49 	bl	8003830 <Init_IMU>

	/*!--------DCO AJOUT----------------!*/

	OutDwmRst(0);
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	f7fa f9f6 	bl	8003390 <OutDwmRst>
	OutDwmWu(0);
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f7fa fa0d 	bl	80033c4 <OutDwmWu>

	/*!--------DCO AJOUT----------------!*/

	if (SUEZ == 0)
	{
		WakeUpNemeusLS();
 8008faa:	f7fa fed5 	bl	8003d58 <WakeUpNemeusLS>
		RebootNemeusLS(TabGen);
 8008fae:	48a3      	ldr	r0, [pc, #652]	; (800923c <main+0x618>)
 8008fb0:	f7fa fee0 	bl	8003d74 <RebootNemeusLS>

		if (SIGFOXOK == 1 && TabGen[SIGFOX_STATE] == 0 && LORAWANOK == 0)
 8008fb4:	4ba1      	ldr	r3, [pc, #644]	; (800923c <main+0x618>)
 8008fb6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d116      	bne.n	8008fec <main+0x3c8>
		{
			SigfoxOn();
 8008fbe:	f7fa ff0f 	bl	8003de0 <SigfoxOn>
			TimerLastSigfoxMessage = HAL_GetTick();
 8008fc2:	f001 f9fb 	bl	800a3bc <HAL_GetTick>
 8008fc6:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
			TabGen[SIGFOX_STATE] = 1;
 8008fca:	4b9c      	ldr	r3, [pc, #624]	; (800923c <main+0x618>)
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			SendOnMessSigfox(!REBOOT_FROM_WATCHDOG);
 8008fd2:	4b9c      	ldr	r3, [pc, #624]	; (8009244 <main+0x620>)
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	bf0c      	ite	eq
 8008fda:	2301      	moveq	r3, #1
 8008fdc:	2300      	movne	r3, #0
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fa ff4b 	bl	8003e7c <SendOnMessSigfox>
			DUAL_STATE_LS = ACK_SF_PENDING;
 8008fe6:	4b98      	ldr	r3, [pc, #608]	; (8009248 <main+0x624>)
 8008fe8:	2204      	movs	r2, #4
 8008fea:	701a      	strb	r2, [r3, #0]

			AskJoinTimeLoraWan = HAL_GetTick();
			TabGen[LORAWAN_STATE] = LW_WAIT_JOIN;
			DUAL_STATE_LS = LW_JOIN_PENDING;
		}
		TimerLastSigfoxMessage = HAL_GetTick();
 8008fec:	f001 f9e6 	bl	800a3bc <HAL_GetTick>
 8008ff0:	f8c7 0188 	str.w	r0, [r7, #392]	; 0x188
				ContinuousRxLora();
			}
		}
	}

	HAL_TIM_Base_Start_IT(&htim7);
 8008ff4:	4892      	ldr	r0, [pc, #584]	; (8009240 <main+0x61c>)
 8008ff6:	f006 f923 	bl	800f240 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	f001 f9ea 	bl	800a3d4 <HAL_Delay>
	if (GPSOK == 1)
	{
		TabGen[GPS_ON] = 1;
 8009000:	4b8e      	ldr	r3, [pc, #568]	; (800923c <main+0x618>)
 8009002:	2201      	movs	r2, #1
 8009004:	605a      	str	r2, [r3, #4]
	}
	Timer_screen = HAL_GetTick();
 8009006:	f001 f9d9 	bl	800a3bc <HAL_GetTick>
 800900a:	4603      	mov	r3, r0
 800900c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	if (REBOOT_FROM_WATCHDOG == 0)
		PowerBuzVib(100);
	//PowerBuz(100);
#endif

	timeBeforeDMA_SF = HAL_GetTick();
 8009010:	f001 f9d4 	bl	800a3bc <HAL_GetTick>
 8009014:	4603      	mov	r3, r0
 8009016:	4a8d      	ldr	r2, [pc, #564]	; (800924c <main+0x628>)
 8009018:	6013      	str	r3, [r2, #0]
		//WifiName "NoName";
	}

	if (DMA_GPS_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart2, Rx_datagps, MAXITGPS);
 800901a:	2264      	movs	r2, #100	; 0x64
 800901c:	498c      	ldr	r1, [pc, #560]	; (8009250 <main+0x62c>)
 800901e:	488d      	ldr	r0, [pc, #564]	; (8009254 <main+0x630>)
 8009020:	f007 fac4 	bl	80105ac <HAL_UART_Receive_DMA>
		HAL_UART_Receive_DMA(&huart1, Rx_RAK811, MAXITRAK);
	}

	if (DMA_NEMEUS_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart3, Rx_Nemeus, MAXITNEMEUS);
 8009024:	22c8      	movs	r2, #200	; 0xc8
 8009026:	498c      	ldr	r1, [pc, #560]	; (8009258 <main+0x634>)
 8009028:	488c      	ldr	r0, [pc, #560]	; (800925c <main+0x638>)
 800902a:	f007 fabf 	bl	80105ac <HAL_UART_Receive_DMA>
	/* ----------------------------------WHILE BEGIN---------------------------------------------*/

	while (1)
	{

		uint32_t Time_Now = HAL_GetTick();
 800902e:	f001 f9c5 	bl	800a3bc <HAL_GetTick>
 8009032:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
		millis = HAL_GetTick();
 8009036:	f001 f9c1 	bl	800a3bc <HAL_GetTick>
 800903a:	4603      	mov	r3, r0
 800903c:	4a88      	ldr	r2, [pc, #544]	; (8009260 <main+0x63c>)
 800903e:	6013      	str	r3, [r2, #0]

		HAL_IWDG_Refresh(&hiwdg);
 8009040:	4888      	ldr	r0, [pc, #544]	; (8009264 <main+0x640>)
 8009042:	f003 f91a 	bl	800c27a <HAL_IWDG_Refresh>
			ComputeAlerteGaz(TabAlert, TabFloatValue);
		}

// ##########################GPS################################################

		if (TabGen[GPS_GOOD] == 1)
 8009046:	4b7d      	ldr	r3, [pc, #500]	; (800923c <main+0x618>)
 8009048:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800904c:	2b01      	cmp	r3, #1
 800904e:	d10b      	bne.n	8009068 <main+0x444>
		{
			if (millis - TabTimer[LAST_UPDATE_GPS] < 15 * 60 * 1000)
 8009050:	4b83      	ldr	r3, [pc, #524]	; (8009260 <main+0x63c>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	4b84      	ldr	r3, [pc, #528]	; (8009268 <main+0x644>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	4a84      	ldr	r2, [pc, #528]	; (800926c <main+0x648>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d803      	bhi.n	8009068 <main+0x444>
				TabGen[GPS_DURATION] = GPSDURA;
 8009060:	4b76      	ldr	r3, [pc, #472]	; (800923c <main+0x618>)
 8009062:	2205      	movs	r2, #5
 8009064:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}

		if (GPSOK == 1) // GPS IS ENABLED
		{
			GPS_Management();
 8009068:	f7fd f9a4 	bl	80063b4 <GPS_Management>
				TaskSendLoraWan(TabGen, TabFloatValue, TabTimer);
				//TimerLastLoraMessage = HAL_GetTick();
			}
		}

		if (TabGen[DUAL_SEND] == 1)
 800906c:	4b73      	ldr	r3, [pc, #460]	; (800923c <main+0x618>)
 800906e:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8009072:	2b01      	cmp	r3, #1
 8009074:	d105      	bne.n	8009082 <main+0x45e>
			TaskSendDUAL(TabGen, TabFloatValue, TabTimer, WifiName);
 8009076:	4b7e      	ldr	r3, [pc, #504]	; (8009270 <main+0x64c>)
 8009078:	4a7b      	ldr	r2, [pc, #492]	; (8009268 <main+0x644>)
 800907a:	497e      	ldr	r1, [pc, #504]	; (8009274 <main+0x650>)
 800907c:	486f      	ldr	r0, [pc, #444]	; (800923c <main+0x618>)
 800907e:	f7fc fa4f 	bl	8005520 <TaskSendDUAL>

		if (SIGFOXOK == 1)
		{
			if (TabGen[ALERT_PENDING] == 1 && TabGen[SIGFOX_SEND] == 1)
 8009082:	4b6e      	ldr	r3, [pc, #440]	; (800923c <main+0x618>)
 8009084:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009088:	2b01      	cmp	r3, #1
 800908a:	d109      	bne.n	80090a0 <main+0x47c>
 800908c:	4b6b      	ldr	r3, [pc, #428]	; (800923c <main+0x618>)
 800908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009090:	2b01      	cmp	r3, #1
 8009092:	d105      	bne.n	80090a0 <main+0x47c>
				TaskSendSigfox(TabGen, TabFloatValue, TabTimer, WifiName);
 8009094:	4b76      	ldr	r3, [pc, #472]	; (8009270 <main+0x64c>)
 8009096:	4a74      	ldr	r2, [pc, #464]	; (8009268 <main+0x644>)
 8009098:	4976      	ldr	r1, [pc, #472]	; (8009274 <main+0x650>)
 800909a:	4868      	ldr	r0, [pc, #416]	; (800923c <main+0x618>)
 800909c:	f7fc f9de 	bl	800545c <TaskSendSigfox>
			}
		}			
		#endif			

		// ########################## MESSAGE MANAGEMENT END ##############################
		Task_USB_Configuration();
 80090a0:	f7fd f9fc 	bl	800649c <Task_USB_Configuration>

		TaskExtButton(TabGen);
 80090a4:	4865      	ldr	r0, [pc, #404]	; (800923c <main+0x618>)
 80090a6:	f7fb fb0d 	bl	80046c4 <TaskExtButton>

		TaskFallTest(TabAlert, TabGen);
 80090aa:	4964      	ldr	r1, [pc, #400]	; (800923c <main+0x618>)
 80090ac:	4872      	ldr	r0, [pc, #456]	; (8009278 <main+0x654>)
 80090ae:	f7fb fc63 	bl	8004978 <TaskFallTest>

		TaskUpdateUpperLed(updateLedTab, TabGen); // bug +
 80090b2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80090b6:	4961      	ldr	r1, [pc, #388]	; (800923c <main+0x618>)
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fb f9ff 	bl	80044bc <TaskUpdateUpperLed>

		TaskLedBlinking(upperLedTab, TabGen);
 80090be:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80090c2:	495e      	ldr	r1, [pc, #376]	; (800923c <main+0x618>)
 80090c4:	4618      	mov	r0, r3
 80090c6:	f7fb f9b5 	bl	8004434 <TaskLedBlinking>

		TaskOnScreen(TabGen, &Timer_screen);
 80090ca:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80090ce:	4619      	mov	r1, r3
 80090d0:	485a      	ldr	r0, [pc, #360]	; (800923c <main+0x618>)
 80090d2:	f7fb feef 	bl	8004eb4 <TaskOnScreen>

		TaskBigScreen(ScreenTab, TabAlert, TabGen, TabFloatValue, TabTimer,
 80090d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80090da:	4b65      	ldr	r3, [pc, #404]	; (8009270 <main+0x64c>)
 80090dc:	9302      	str	r3, [sp, #8]
 80090de:	4b67      	ldr	r3, [pc, #412]	; (800927c <main+0x658>)
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	4b61      	ldr	r3, [pc, #388]	; (8009268 <main+0x644>)
 80090e4:	9300      	str	r3, [sp, #0]
 80090e6:	4b63      	ldr	r3, [pc, #396]	; (8009274 <main+0x650>)
 80090e8:	4a54      	ldr	r2, [pc, #336]	; (800923c <main+0x618>)
 80090ea:	4963      	ldr	r1, [pc, #396]	; (8009278 <main+0x654>)
 80090ec:	f7fb f93e 	bl	800436c <TaskBigScreen>
				TabAlertAll, WifiName);

		if (TabGen[CHARGEC] == 0)
 80090f0:	4b52      	ldr	r3, [pc, #328]	; (800923c <main+0x618>)
 80090f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d105      	bne.n	8009106 <main+0x4e2>
			TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 80090fa:	4b5e      	ldr	r3, [pc, #376]	; (8009274 <main+0x650>)
 80090fc:	4a5f      	ldr	r2, [pc, #380]	; (800927c <main+0x658>)
 80090fe:	494f      	ldr	r1, [pc, #316]	; (800923c <main+0x618>)
 8009100:	485d      	ldr	r0, [pc, #372]	; (8009278 <main+0x654>)
 8009102:	f7fb fcb7 	bl	8004a74 <TaskAlertAll>

		Battery_Charger_Management();
 8009106:	f7fc ffef 	bl	80060e8 <Battery_Charger_Management>
//			Flag[F_CHARGER] = 1;
//			Battery_Charger_Management();
//		}

		// EVERY 100 HZ
		if (Flag[F_100HZ] == 1)
 800910a:	4b5d      	ldr	r3, [pc, #372]	; (8009280 <main+0x65c>)
 800910c:	78db      	ldrb	r3, [r3, #3]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	2b01      	cmp	r3, #1
 8009112:	d122      	bne.n	800915a <main+0x536>
		{

			Flag[F_100HZ] = 0;
 8009114:	4b5a      	ldr	r3, [pc, #360]	; (8009280 <main+0x65c>)
 8009116:	2200      	movs	r2, #0
 8009118:	70da      	strb	r2, [r3, #3]

			if (TabGen[ALERT_ON] == 0)
 800911a:	4b48      	ldr	r3, [pc, #288]	; (800923c <main+0x618>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d11b      	bne.n	800915a <main+0x536>
			{
				if (TabGen[LOCK_I2C1] == 0)  // check I2C1 is available
 8009122:	4b46      	ldr	r3, [pc, #280]	; (800923c <main+0x618>)
 8009124:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8009128:	2b00      	cmp	r3, #0
 800912a:	d116      	bne.n	800915a <main+0x536>
				{
					Measure_IMU(buffer6); // read 6x register of IMU
 800912c:	4855      	ldr	r0, [pc, #340]	; (8009284 <main+0x660>)
 800912e:	f7fa fbcb 	bl	80038c8 <Measure_IMU>

					TaskAlertAcc(accy, accres, TabAlert, TabGen); // check Alert for Malaise and Immo
 8009132:	4b55      	ldr	r3, [pc, #340]	; (8009288 <main+0x664>)
 8009134:	881b      	ldrh	r3, [r3, #0]
 8009136:	b2d8      	uxtb	r0, r3
 8009138:	4b54      	ldr	r3, [pc, #336]	; (800928c <main+0x668>)
 800913a:	8819      	ldrh	r1, [r3, #0]
 800913c:	4b3f      	ldr	r3, [pc, #252]	; (800923c <main+0x618>)
 800913e:	4a4e      	ldr	r2, [pc, #312]	; (8009278 <main+0x654>)
 8009140:	f7f9 ff4f 	bl	8002fe2 <TaskAlertAcc>

					TaskFallManager(ar, y, accres, accy, TabGen);
 8009144:	4b51      	ldr	r3, [pc, #324]	; (800928c <main+0x668>)
 8009146:	881a      	ldrh	r2, [r3, #0]
 8009148:	4b4f      	ldr	r3, [pc, #316]	; (8009288 <main+0x664>)
 800914a:	881b      	ldrh	r3, [r3, #0]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	493b      	ldr	r1, [pc, #236]	; (800923c <main+0x618>)
 8009150:	9100      	str	r1, [sp, #0]
 8009152:	494f      	ldr	r1, [pc, #316]	; (8009290 <main+0x66c>)
 8009154:	484f      	ldr	r0, [pc, #316]	; (8009294 <main+0x670>)
 8009156:	f7fc fc0d 	bl	8005974 <TaskFallManager>
			Repeater_Link_Management();
		}

		if (DMA_GPS_ON == 1 && GPSOK == 1)
		{
			uint8_t buffer[MAXITGPS] =
 800915a:	1d3b      	adds	r3, r7, #4
 800915c:	2200      	movs	r2, #0
 800915e:	601a      	str	r2, [r3, #0]
 8009160:	3304      	adds	r3, #4
 8009162:	2260      	movs	r2, #96	; 0x60
 8009164:	2100      	movs	r1, #0
 8009166:	4618      	mov	r0, r3
 8009168:	f00d fb1c 	bl	80167a4 <memset>
			{ 0 };
			if (Time_Now % 1000 == 0 && once_gps == 1)
 800916c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8009170:	4b49      	ldr	r3, [pc, #292]	; (8009298 <main+0x674>)
 8009172:	fba3 1302 	umull	r1, r3, r3, r2
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800917c:	fb01 f303 	mul.w	r3, r1, r3
 8009180:	1ad3      	subs	r3, r2, r3
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 80d0 	bne.w	8009328 <main+0x704>
 8009188:	4b44      	ldr	r3, [pc, #272]	; (800929c <main+0x678>)
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b01      	cmp	r3, #1
 800918e:	f040 80cb 	bne.w	8009328 <main+0x704>
			{
				once_gps = 0;
 8009192:	4b42      	ldr	r3, [pc, #264]	; (800929c <main+0x678>)
 8009194:	2200      	movs	r2, #0
 8009196:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 8009198:	2300      	movs	r3, #0
 800919a:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				for (uint8_t y = 0; y < MAXITGPS; y++)
 800919e:	2300      	movs	r3, #0
 80091a0:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80091a4:	e00c      	b.n	80091c0 <main+0x59c>
				{
					buffer[y] = Rx_datagps[y];
 80091a6:	f897 21ad 	ldrb.w	r2, [r7, #429]	; 0x1ad
 80091aa:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80091ae:	4928      	ldr	r1, [pc, #160]	; (8009250 <main+0x62c>)
 80091b0:	5c89      	ldrb	r1, [r1, r2]
 80091b2:	1d3a      	adds	r2, r7, #4
 80091b4:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 80091b6:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80091ba:	3301      	adds	r3, #1
 80091bc:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
 80091c0:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 80091c4:	2b63      	cmp	r3, #99	; 0x63
 80091c6:	d9ee      	bls.n	80091a6 <main+0x582>
				}

				while (i < MAXITGPS)
 80091c8:	e08b      	b.n	80092e2 <main+0x6be>
				{
					if (buffer[i] == '$')
 80091ca:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80091ce:	1d3a      	adds	r2, r7, #4
 80091d0:	5cd3      	ldrb	r3, [r2, r3]
 80091d2:	2b24      	cmp	r3, #36	; 0x24
 80091d4:	f040 8080 	bne.w	80092d8 <main+0x6b4>
					{
						uint8_t y = 0;
 80091d8:	2300      	movs	r3, #0
 80091da:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
						Rx_Buffergps[y++] = buffer[i++];
 80091de:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80091e2:	1c5a      	adds	r2, r3, #1
 80091e4:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
 80091e8:	4619      	mov	r1, r3
 80091ea:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80091ee:	1c5a      	adds	r2, r3, #1
 80091f0:	f887 21af 	strb.w	r2, [r7, #431]	; 0x1af
 80091f4:	461a      	mov	r2, r3
 80091f6:	1d3b      	adds	r3, r7, #4
 80091f8:	5c59      	ldrb	r1, [r3, r1]
 80091fa:	4b29      	ldr	r3, [pc, #164]	; (80092a0 <main+0x67c>)
 80091fc:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITGPS; y++)
 80091fe:	e067      	b.n	80092d0 <main+0x6ac>
						{
							if (buffer[i] != '\r')
 8009200:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009204:	1d3a      	adds	r2, r7, #4
 8009206:	5cd3      	ldrb	r3, [r2, r3]
 8009208:	2b0d      	cmp	r3, #13
 800920a:	d058      	beq.n	80092be <main+0x69a>
							{
								if (i == MAXITGPS && y < MAXITGPS)
 800920c:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009210:	2b64      	cmp	r3, #100	; 0x64
 8009212:	d106      	bne.n	8009222 <main+0x5fe>
 8009214:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009218:	2b63      	cmp	r3, #99	; 0x63
 800921a:	d802      	bhi.n	8009222 <main+0x5fe>
									i = 0; // wrapping the circular buffer
 800921c:	2300      	movs	r3, #0
 800921e:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae

								Rx_Buffergps[y] = buffer[i++];
 8009222:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 8009226:	1c5a      	adds	r2, r3, #1
 8009228:	f887 21ae 	strb.w	r2, [r7, #430]	; 0x1ae
 800922c:	4619      	mov	r1, r3
 800922e:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 8009232:	1d3a      	adds	r2, r7, #4
 8009234:	5c51      	ldrb	r1, [r2, r1]
 8009236:	4a1a      	ldr	r2, [pc, #104]	; (80092a0 <main+0x67c>)
 8009238:	54d1      	strb	r1, [r2, r3]
 800923a:	e044      	b.n	80092c6 <main+0x6a2>
 800923c:	200024d4 	.word	0x200024d4
 8009240:	20003298 	.word	0x20003298
 8009244:	20000b59 	.word	0x20000b59
 8009248:	20000b69 	.word	0x20000b69
 800924c:	20000774 	.word	0x20000774
 8009250:	20001e60 	.word	0x20001e60
 8009254:	200033f8 	.word	0x200033f8
 8009258:	20001d98 	.word	0x20001d98
 800925c:	2000347c 	.word	0x2000347c
 8009260:	20000b5c 	.word	0x20000b5c
 8009264:	20001d7c 	.word	0x20001d7c
 8009268:	200027fc 	.word	0x200027fc
 800926c:	000dbb9f 	.word	0x000dbb9f
 8009270:	20002b48 	.word	0x20002b48
 8009274:	20002b68 	.word	0x20002b68
 8009278:	20003078 	.word	0x20003078
 800927c:	20001ed4 	.word	0x20001ed4
 8009280:	20002bc4 	.word	0x20002bc4
 8009284:	200030b0 	.word	0x200030b0
 8009288:	20002644 	.word	0x20002644
 800928c:	200024d0 	.word	0x200024d0
 8009290:	20002020 	.word	0x20002020
 8009294:	20002bc8 	.word	0x20002bc8
 8009298:	10624dd3 	.word	0x10624dd3
 800929c:	20000779 	.word	0x20000779
 80092a0:	20001ee0 	.word	0x20001ee0
							}
							else
							{
								for (y; y < MAXITGPS; y++)
								{
									Rx_Buffergps[y] = 0;
 80092a4:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80092a8:	4ab6      	ldr	r2, [pc, #728]	; (8009584 <main+0x960>)
 80092aa:	2100      	movs	r1, #0
 80092ac:	54d1      	strb	r1, [r2, r3]
									i = MAXITGPS;
 80092ae:	2364      	movs	r3, #100	; 0x64
 80092b0:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
								for (y; y < MAXITGPS; y++)
 80092b4:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80092b8:	3301      	adds	r3, #1
 80092ba:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 80092be:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80092c2:	2b63      	cmp	r3, #99	; 0x63
 80092c4:	d9ee      	bls.n	80092a4 <main+0x680>
						for (y; y < MAXITGPS; y++)
 80092c6:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80092ca:	3301      	adds	r3, #1
 80092cc:	f887 31af 	strb.w	r3, [r7, #431]	; 0x1af
 80092d0:	f897 31af 	ldrb.w	r3, [r7, #431]	; 0x1af
 80092d4:	2b63      	cmp	r3, #99	; 0x63
 80092d6:	d993      	bls.n	8009200 <main+0x5dc>
								}
							}
						}
					}
					i++;
 80092d8:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80092dc:	3301      	adds	r3, #1
 80092de:	f887 31ae 	strb.w	r3, [r7, #430]	; 0x1ae
				while (i < MAXITGPS)
 80092e2:	f897 31ae 	ldrb.w	r3, [r7, #430]	; 0x1ae
 80092e6:	2b63      	cmp	r3, #99	; 0x63
 80092e8:	f67f af6f 	bls.w	80091ca <main+0x5a6>
				}
				TaskGPS(Rx_Buffergps, TabGen, TabTimer, TabFloatValue);
 80092ec:	4ba6      	ldr	r3, [pc, #664]	; (8009588 <main+0x964>)
 80092ee:	4aa7      	ldr	r2, [pc, #668]	; (800958c <main+0x968>)
 80092f0:	49a7      	ldr	r1, [pc, #668]	; (8009590 <main+0x96c>)
 80092f2:	48a4      	ldr	r0, [pc, #656]	; (8009584 <main+0x960>)
 80092f4:	f7fb fe18 	bl	8004f28 <TaskGPS>

				for (uint8_t y = 0; y < MAXITGPS; y++)
 80092f8:	2300      	movs	r3, #0
 80092fa:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 80092fe:	e00e      	b.n	800931e <main+0x6fa>
				{
					Rx_datagps[y] = 0;
 8009300:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009304:	4aa3      	ldr	r2, [pc, #652]	; (8009594 <main+0x970>)
 8009306:	2100      	movs	r1, #0
 8009308:	54d1      	strb	r1, [r2, r3]
					Rx_Buffergps[y] = 0;
 800930a:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 800930e:	4a9d      	ldr	r2, [pc, #628]	; (8009584 <main+0x960>)
 8009310:	2100      	movs	r1, #0
 8009312:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 8009314:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009318:	3301      	adds	r3, #1
 800931a:	f887 31b0 	strb.w	r3, [r7, #432]	; 0x1b0
 800931e:	f897 31b0 	ldrb.w	r3, [r7, #432]	; 0x1b0
 8009322:	2b63      	cmp	r3, #99	; 0x63
 8009324:	d9ec      	bls.n	8009300 <main+0x6dc>
			{
 8009326:	e002      	b.n	800932e <main+0x70a>
				}
			}
			else
				once_gps = 1;
 8009328:	4b9b      	ldr	r3, [pc, #620]	; (8009598 <main+0x974>)
 800932a:	2201      	movs	r2, #1
 800932c:	701a      	strb	r2, [r3, #0]
		}

		if (DMA_NEMEUS_ON == 1)
		{
			uint8_t save_pos_start = MAXITNEMEUS;
 800932e:	23c8      	movs	r3, #200	; 0xc8
 8009330:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
			uint8_t save_pos_end = MAXITNEMEUS;
 8009334:	23c8      	movs	r3, #200	; 0xc8
 8009336:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
			uint8_t copy = 0;
 800933a:	2300      	movs	r3, #0
 800933c:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3

			if (Time_Now % 1000 == 0 && once_nem == 1)
 8009340:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8009344:	4b95      	ldr	r3, [pc, #596]	; (800959c <main+0x978>)
 8009346:	fba3 1302 	umull	r1, r3, r3, r2
 800934a:	099b      	lsrs	r3, r3, #6
 800934c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	f040 8177 	bne.w	800964a <main+0xa26>
 800935c:	4b90      	ldr	r3, [pc, #576]	; (80095a0 <main+0x97c>)
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	2b01      	cmp	r3, #1
 8009362:	f040 8172 	bne.w	800964a <main+0xa26>
			{
				once_nem = 0;
 8009366:	4b8e      	ldr	r3, [pc, #568]	; (80095a0 <main+0x97c>)
 8009368:	2200      	movs	r2, #0
 800936a:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 800936c:	2300      	movs	r3, #0
 800936e:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
				uint8_t buffer[MAXITNEMEUS] =
 8009372:	1d3b      	adds	r3, r7, #4
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	3304      	adds	r3, #4
 800937a:	22c4      	movs	r2, #196	; 0xc4
 800937c:	2100      	movs	r1, #0
 800937e:	4618      	mov	r0, r3
 8009380:	f00d fa10 	bl	80167a4 <memset>
				{ 0 };
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 8009384:	2300      	movs	r3, #0
 8009386:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 800938a:	e00c      	b.n	80093a6 <main+0x782>
				{
					buffer[y] = Rx_Nemeus[y];
 800938c:	f897 21b5 	ldrb.w	r2, [r7, #437]	; 0x1b5
 8009390:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8009394:	4983      	ldr	r1, [pc, #524]	; (80095a4 <main+0x980>)
 8009396:	5c89      	ldrb	r1, [r1, r2]
 8009398:	1d3a      	adds	r2, r7, #4
 800939a:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 800939c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80093a0:	3301      	adds	r3, #1
 80093a2:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 80093a6:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80093aa:	2bc7      	cmp	r3, #199	; 0xc7
 80093ac:	d9ee      	bls.n	800938c <main+0x768>
				}

				while (i < MAXITNEMEUS)
 80093ae:	e123      	b.n	80095f8 <main+0x9d4>
				{
					if (buffer[i] == '+')
 80093b0:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093b4:	1d3a      	adds	r2, r7, #4
 80093b6:	5cd3      	ldrb	r3, [r2, r3]
 80093b8:	2b2b      	cmp	r3, #43	; 0x2b
 80093ba:	d159      	bne.n	8009470 <main+0x84c>
					{
						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'M'))
 80093bc:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093c0:	2bc6      	cmp	r3, #198	; 0xc6
 80093c2:	d806      	bhi.n	80093d2 <main+0x7ae>
 80093c4:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093c8:	3301      	adds	r3, #1
 80093ca:	1d3a      	adds	r2, r7, #4
 80093cc:	5cd3      	ldrb	r3, [r2, r3]
 80093ce:	2b4d      	cmp	r3, #77	; 0x4d
 80093d0:	d007      	beq.n	80093e2 <main+0x7be>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'M')))
 80093d2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093d6:	2bc7      	cmp	r3, #199	; 0xc7
 80093d8:	d120      	bne.n	800941c <main+0x7f8>
 80093da:	1d3b      	adds	r3, r7, #4
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	2b4d      	cmp	r3, #77	; 0x4d
 80093e0:	d11c      	bne.n	800941c <main+0x7f8>
						{
							if (buffer[i + 6] == 'R' || buffer[i + 14] == ','
 80093e2:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093e6:	3306      	adds	r3, #6
 80093e8:	1d3a      	adds	r2, r7, #4
 80093ea:	5cd3      	ldrb	r3, [r2, r3]
 80093ec:	2b52      	cmp	r3, #82	; 0x52
 80093ee:	d00a      	beq.n	8009406 <main+0x7e2>
 80093f0:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80093f4:	330e      	adds	r3, #14
 80093f6:	1d3a      	adds	r2, r7, #4
 80093f8:	5cd3      	ldrb	r3, [r2, r3]
 80093fa:	2b2c      	cmp	r3, #44	; 0x2c
 80093fc:	d003      	beq.n	8009406 <main+0x7e2>
									|| GA_Nem == 1)
 80093fe:	4b6a      	ldr	r3, [pc, #424]	; (80095a8 <main+0x984>)
 8009400:	781b      	ldrb	r3, [r3, #0]
 8009402:	2b01      	cmp	r3, #1
 8009404:	d10a      	bne.n	800941c <main+0x7f8>
							{
								copy = 1;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
								if (GA_Nem != 0)
 800940c:	4b66      	ldr	r3, [pc, #408]	; (80095a8 <main+0x984>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d003      	beq.n	800941c <main+0x7f8>
									save_pos_start = i;
 8009414:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009418:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'G'))
 800941c:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009420:	2bc6      	cmp	r3, #198	; 0xc6
 8009422:	d806      	bhi.n	8009432 <main+0x80e>
 8009424:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009428:	3301      	adds	r3, #1
 800942a:	1d3a      	adds	r2, r7, #4
 800942c:	5cd3      	ldrb	r3, [r2, r3]
 800942e:	2b47      	cmp	r3, #71	; 0x47
 8009430:	d007      	beq.n	8009442 <main+0x81e>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'G')))
 8009432:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009436:	2bc7      	cmp	r3, #199	; 0xc7
 8009438:	d11a      	bne.n	8009470 <main+0x84c>
 800943a:	1d3b      	adds	r3, r7, #4
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	2b47      	cmp	r3, #71	; 0x47
 8009440:	d116      	bne.n	8009470 <main+0x84c>
						{
							GA_Nem = 1;
 8009442:	4b59      	ldr	r3, [pc, #356]	; (80095a8 <main+0x984>)
 8009444:	2201      	movs	r2, #1
 8009446:	701a      	strb	r2, [r3, #0]
							save_pos_start = i;
 8009448:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800944c:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
							if (i + 16 < 100 && buffer[i + 16] == '\r')
 8009450:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009454:	2b53      	cmp	r3, #83	; 0x53
 8009456:	d80b      	bhi.n	8009470 <main+0x84c>
 8009458:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800945c:	3310      	adds	r3, #16
 800945e:	1d3a      	adds	r2, r7, #4
 8009460:	5cd3      	ldrb	r3, [r2, r3]
 8009462:	2b0d      	cmp	r3, #13
 8009464:	d104      	bne.n	8009470 <main+0x84c>
							{
								save_pos_end = i + 16;
 8009466:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800946a:	3310      	adds	r3, #16
 800946c:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
							}
						}
					}
					if (buffer[i] == 'R')
 8009470:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009474:	1d3a      	adds	r2, r7, #4
 8009476:	5cd3      	ldrb	r3, [r2, r3]
 8009478:	2b52      	cmp	r3, #82	; 0x52
 800947a:	d148      	bne.n	800950e <main+0x8ea>
					{
						if (buffer[i + 1] == 'R' || buffer[i - 1] == 'E')
 800947c:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009480:	3301      	adds	r3, #1
 8009482:	1d3a      	adds	r2, r7, #4
 8009484:	5cd3      	ldrb	r3, [r2, r3]
 8009486:	2b52      	cmp	r3, #82	; 0x52
 8009488:	d006      	beq.n	8009498 <main+0x874>
 800948a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800948e:	3b01      	subs	r3, #1
 8009490:	1d3a      	adds	r2, r7, #4
 8009492:	5cd3      	ldrb	r3, [r2, r3]
 8009494:	2b45      	cmp	r3, #69	; 0x45
 8009496:	d11b      	bne.n	80094d0 <main+0x8ac>
						{
							if (buffer[i - 11] == 'S' && buffer[i - 10] == 'F')
 8009498:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800949c:	3b0b      	subs	r3, #11
 800949e:	1d3a      	adds	r2, r7, #4
 80094a0:	5cd3      	ldrb	r3, [r2, r3]
 80094a2:	2b53      	cmp	r3, #83	; 0x53
 80094a4:	d114      	bne.n	80094d0 <main+0x8ac>
 80094a6:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094aa:	3b0a      	subs	r3, #10
 80094ac:	1d3a      	adds	r2, r7, #4
 80094ae:	5cd3      	ldrb	r3, [r2, r3]
 80094b0:	2b46      	cmp	r3, #70	; 0x46
 80094b2:	d10d      	bne.n	80094d0 <main+0x8ac>
							{
								//ERROR: End of SF Reception windows
								copy = 2;
 80094b4:	2302      	movs	r3, #2
 80094b6:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
								save_pos_start = i;
 80094ba:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094be:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
								if (DUAL_STATE_LS == ACK_SF_PENDING)
 80094c2:	4b3a      	ldr	r3, [pc, #232]	; (80095ac <main+0x988>)
 80094c4:	781b      	ldrb	r3, [r3, #0]
 80094c6:	2b04      	cmp	r3, #4
 80094c8:	d102      	bne.n	80094d0 <main+0x8ac>
									DUAL_STATE_LS = NO_ACK_SF_RETRY;
 80094ca:	4b38      	ldr	r3, [pc, #224]	; (80095ac <main+0x988>)
 80094cc:	2205      	movs	r2, #5
 80094ce:	701a      	strb	r2, [r3, #0]

							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'C'))
 80094d0:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094d4:	2bc6      	cmp	r3, #198	; 0xc6
 80094d6:	d806      	bhi.n	80094e6 <main+0x8c2>
 80094d8:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094dc:	3301      	adds	r3, #1
 80094de:	1d3a      	adds	r2, r7, #4
 80094e0:	5cd3      	ldrb	r3, [r2, r3]
 80094e2:	2b43      	cmp	r3, #67	; 0x43
 80094e4:	d007      	beq.n	80094f6 <main+0x8d2>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'C')))
 80094e6:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80094ea:	2bc7      	cmp	r3, #199	; 0xc7
 80094ec:	d10f      	bne.n	800950e <main+0x8ea>
 80094ee:	1d3b      	adds	r3, r7, #4
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	2b43      	cmp	r3, #67	; 0x43
 80094f4:	d10b      	bne.n	800950e <main+0x8ea>
						{
							copy = 1;
 80094f6:	2301      	movs	r3, #1
 80094f8:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
							i = i - 5;
 80094fc:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009500:	3b05      	subs	r3, #5
 8009502:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
							save_pos_start = i;
 8009506:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800950a:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
						}
					}

					if (copy == 1)
 800950e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009512:	2b01      	cmp	r3, #1
 8009514:	d16b      	bne.n	80095ee <main+0x9ca>
					{
						uint8_t y = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
						Rx_bufferNemeus[y++] = buffer[i++];
 800951c:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009520:	1c5a      	adds	r2, r3, #1
 8009522:	f887 21b4 	strb.w	r2, [r7, #436]	; 0x1b4
 8009526:	4619      	mov	r1, r3
 8009528:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800952c:	1c5a      	adds	r2, r3, #1
 800952e:	f887 21b6 	strb.w	r2, [r7, #438]	; 0x1b6
 8009532:	461a      	mov	r2, r3
 8009534:	1d3b      	adds	r3, r7, #4
 8009536:	5c59      	ldrb	r1, [r3, r1]
 8009538:	4b1d      	ldr	r3, [pc, #116]	; (80095b0 <main+0x98c>)
 800953a:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITNEMEUS; y++)
 800953c:	e053      	b.n	80095e6 <main+0x9c2>
						{
							if (buffer[i] != '\r')
 800953e:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009542:	1d3a      	adds	r2, r7, #4
 8009544:	5cd3      	ldrb	r3, [r2, r3]
 8009546:	2b0d      	cmp	r3, #13
 8009548:	d017      	beq.n	800957a <main+0x956>
							{
								if (i == MAXITNEMEUS && y < MAXITNEMEUS)
 800954a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800954e:	2bc8      	cmp	r3, #200	; 0xc8
 8009550:	d106      	bne.n	8009560 <main+0x93c>
 8009552:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8009556:	2bc7      	cmp	r3, #199	; 0xc7
 8009558:	d802      	bhi.n	8009560 <main+0x93c>
									i = 0; // wrapping the circular buffer
 800955a:	2300      	movs	r3, #0
 800955c:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4

								Rx_bufferNemeus[y] = buffer[i++];
 8009560:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 8009564:	1c5a      	adds	r2, r3, #1
 8009566:	f887 21b4 	strb.w	r2, [r7, #436]	; 0x1b4
 800956a:	4619      	mov	r1, r3
 800956c:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8009570:	1d3a      	adds	r2, r7, #4
 8009572:	5c51      	ldrb	r1, [r2, r1]
 8009574:	4a0e      	ldr	r2, [pc, #56]	; (80095b0 <main+0x98c>)
 8009576:	54d1      	strb	r1, [r2, r3]
 8009578:	e030      	b.n	80095dc <main+0x9b8>
							}
							else
							{
								save_pos_end = i;
 800957a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800957e:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
								for (y; y < MAXITNEMEUS; y++)
 8009582:	e021      	b.n	80095c8 <main+0x9a4>
 8009584:	20001ee0 	.word	0x20001ee0
 8009588:	20002b68 	.word	0x20002b68
 800958c:	200027fc 	.word	0x200027fc
 8009590:	200024d4 	.word	0x200024d4
 8009594:	20001e60 	.word	0x20001e60
 8009598:	20000779 	.word	0x20000779
 800959c:	10624dd3 	.word	0x10624dd3
 80095a0:	2000077a 	.word	0x2000077a
 80095a4:	20001d98 	.word	0x20001d98
 80095a8:	20000b72 	.word	0x20000b72
 80095ac:	20000b69 	.word	0x20000b69
 80095b0:	20002734 	.word	0x20002734
								{
									Rx_bufferNemeus[y] = 0;
 80095b4:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80095b8:	4a27      	ldr	r2, [pc, #156]	; (8009658 <main+0xa34>)
 80095ba:	2100      	movs	r1, #0
 80095bc:	54d1      	strb	r1, [r2, r3]
								for (y; y < MAXITNEMEUS; y++)
 80095be:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80095c2:	3301      	adds	r3, #1
 80095c4:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80095c8:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80095cc:	2bc7      	cmp	r3, #199	; 0xc7
 80095ce:	d9f1      	bls.n	80095b4 <main+0x990>
								}
								i = MAXITNEMEUS;
 80095d0:	23c8      	movs	r3, #200	; 0xc8
 80095d2:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
								y = MAXITNEMEUS;
 80095d6:	23c8      	movs	r3, #200	; 0xc8
 80095d8:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
						for (y; y < MAXITNEMEUS; y++)
 80095dc:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80095e0:	3301      	adds	r3, #1
 80095e2:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
 80095e6:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 80095ea:	2bc7      	cmp	r3, #199	; 0xc7
 80095ec:	d9a7      	bls.n	800953e <main+0x91a>
							}
						}
					}
					i++;
 80095ee:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80095f2:	3301      	adds	r3, #1
 80095f4:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
				while (i < MAXITNEMEUS)
 80095f8:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 80095fc:	2bc7      	cmp	r3, #199	; 0xc7
 80095fe:	f67f aed7 	bls.w	80093b0 <main+0x78c>
				}
				if (copy == 1)
 8009602:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009606:	2b01      	cmp	r3, #1
 8009608:	d101      	bne.n	800960e <main+0x9ea>
					Task_Read_Nemeus();
 800960a:	f7fc fae3 	bl	8005bd4 <Task_Read_Nemeus>

				if (copy == 1 || copy == 2)
 800960e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8009612:	2b01      	cmp	r3, #1
 8009614:	d003      	beq.n	800961e <main+0x9fa>
 8009616:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800961a:	2b02      	cmp	r3, #2
 800961c:	d119      	bne.n	8009652 <main+0xa2e>
				{
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 800961e:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8009622:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 8009626:	e009      	b.n	800963c <main+0xa18>
					{
						Rx_Nemeus[y] = 0;
 8009628:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800962c:	4a0b      	ldr	r2, [pc, #44]	; (800965c <main+0xa38>)
 800962e:	2100      	movs	r1, #0
 8009630:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 8009632:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8009636:	3301      	adds	r3, #1
 8009638:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
 800963c:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
 8009640:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8009644:	429a      	cmp	r2, r3
 8009646:	d3ef      	bcc.n	8009628 <main+0xa04>
			{
 8009648:	e003      	b.n	8009652 <main+0xa2e>
					}
				}
			}
			else
				once_nem = 1;
 800964a:	4b05      	ldr	r3, [pc, #20]	; (8009660 <main+0xa3c>)
 800964c:	2201      	movs	r2, #1
 800964e:	701a      	strb	r2, [r3, #0]
 8009650:	e4ed      	b.n	800902e <main+0x40a>
			{
 8009652:	bf00      	nop
	{
 8009654:	e4eb      	b.n	800902e <main+0x40a>
 8009656:	bf00      	nop
 8009658:	20002734 	.word	0x20002734
 800965c:	20001d98 	.word	0x20001d98
 8009660:	2000077a 	.word	0x2000077a

08009664 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b0ae      	sub	sp, #184	; 0xb8
 8009668:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800966a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800966e:	2244      	movs	r2, #68	; 0x44
 8009670:	2100      	movs	r1, #0
 8009672:	4618      	mov	r0, r3
 8009674:	f00d f896 	bl	80167a4 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 8009678:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800967c:	2200      	movs	r2, #0
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	605a      	str	r2, [r3, #4]
 8009682:	609a      	str	r2, [r3, #8]
 8009684:	60da      	str	r2, [r3, #12]
 8009686:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 8009688:	463b      	mov	r3, r7
 800968a:	2260      	movs	r2, #96	; 0x60
 800968c:	2100      	movs	r1, #0
 800968e:	4618      	mov	r0, r3
 8009690:	f00d f888 	bl	80167a4 <memset>
	{ 0 };

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8009694:	f004 faf2 	bl	800dc7c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8009698:	4b3a      	ldr	r3, [pc, #232]	; (8009784 <SystemClock_Config+0x120>)
 800969a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800969e:	4a39      	ldr	r2, [pc, #228]	; (8009784 <SystemClock_Config+0x120>)
 80096a0:	f023 0318 	bic.w	r3, r3, #24
 80096a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 80096a8:	233c      	movs	r3, #60	; 0x3c
 80096aa:	677b      	str	r3, [r7, #116]	; 0x74
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80096ac:	2301      	movs	r3, #1
 80096ae:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80096b0:	2301      	movs	r3, #1
 80096b2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80096b6:	2301      	movs	r3, #1
 80096b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80096bc:	2301      	movs	r3, #1
 80096be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80096c2:	2300      	movs	r3, #0
 80096c4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80096c8:	2360      	movs	r3, #96	; 0x60
 80096ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80096ce:	2302      	movs	r3, #2
 80096d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80096d4:	2301      	movs	r3, #1
 80096d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLM = 1;
 80096da:	2301      	movs	r3, #1
 80096dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLN = 16;
 80096e0:	2310      	movs	r3, #16
 80096e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80096e6:	2307      	movs	r3, #7
 80096e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80096ec:	2302      	movs	r3, #2
 80096ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80096f2:	2302      	movs	r3, #2
 80096f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80096f8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80096fc:	4618      	mov	r0, r3
 80096fe:	f004 fbd9 	bl	800deb4 <HAL_RCC_OscConfig>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d001      	beq.n	800970c <SystemClock_Config+0xa8>
	{
		Error_Handler();
 8009708:	f000 f906 	bl	8009918 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800970c:	230f      	movs	r3, #15
 800970e:	663b      	str	r3, [r7, #96]	; 0x60
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009710:	2303      	movs	r3, #3
 8009712:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8009714:	2380      	movs	r3, #128	; 0x80
 8009716:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009718:	2300      	movs	r3, #0
 800971a:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800971c:	2300      	movs	r3, #0
 800971e:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8009720:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8009724:	2100      	movs	r1, #0
 8009726:	4618      	mov	r0, r3
 8009728:	f004 ffe4 	bl	800e6f4 <HAL_RCC_ClockConfig>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d001      	beq.n	8009736 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 8009732:	f000 f8f1 	bl	8009918 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 8009736:	f242 03c7 	movw	r3, #8391	; 0x20c7
 800973a:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1
			| RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800973c:	2300      	movs	r3, #0
 800973e:	623b      	str	r3, [r7, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8009740:	2300      	movs	r3, #0
 8009742:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8009744:	2300      	movs	r3, #0
 8009746:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8009748:	2300      	movs	r3, #0
 800974a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800974c:	2300      	movs	r3, #0
 800974e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009750:	2300      	movs	r3, #0
 8009752:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009754:	463b      	mov	r3, r7
 8009756:	4618      	mov	r0, r3
 8009758:	f005 f9d2 	bl	800eb00 <HAL_RCCEx_PeriphCLKConfig>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <SystemClock_Config+0x102>
	{
		Error_Handler();
 8009762:	f000 f8d9 	bl	8009918 <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8009766:	f44f 7000 	mov.w	r0, #512	; 0x200
 800976a:	f004 faa5 	bl	800dcb8 <HAL_PWREx_ControlVoltageScaling>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <SystemClock_Config+0x114>
	{
		Error_Handler();
 8009774:	f000 f8d0 	bl	8009918 <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8009778:	f005 fc08 	bl	800ef8c <HAL_RCCEx_EnableMSIPLLMode>
}
 800977c:	bf00      	nop
 800977e:	37b8      	adds	r7, #184	; 0xb8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	40021000 	.word	0x40021000

08009788 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ISR function for Timer 7, every 10 ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim7.Instance)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	4b25      	ldr	r3, [pc, #148]	; (800982c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	429a      	cmp	r2, r3
 800979a:	d142      	bne.n	8009822 <HAL_TIM_PeriodElapsedCallback+0x9a>
	{

// loop control			
		if (count_tim7 < time_cnt)    // 1000 = 10 seconds,  100 = 1 second
 800979c:	4b24      	ldr	r3, [pc, #144]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	4b24      	ldr	r3, [pc, #144]	; (8009834 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	429a      	cmp	r2, r3
 80097a6:	d205      	bcs.n	80097b4 <HAL_TIM_PeriodElapsedCallback+0x2c>
			count_tim7++;
 80097a8:	4b21      	ldr	r3, [pc, #132]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3301      	adds	r3, #1
 80097ae:	4a20      	ldr	r2, [pc, #128]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097b0:	6013      	str	r3, [r2, #0]
 80097b2:	e002      	b.n	80097ba <HAL_TIM_PeriodElapsedCallback+0x32>
		else
			count_tim7 = 0;
 80097b4:	4b1e      	ldr	r3, [pc, #120]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	601a      	str	r2, [r3, #0]

		if (count_tim7 % 10 == 2)
 80097ba:	4b1d      	ldr	r3, [pc, #116]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097bc:	6819      	ldr	r1, [r3, #0]
 80097be:	4b1e      	ldr	r3, [pc, #120]	; (8009838 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80097c0:	fba3 2301 	umull	r2, r3, r3, r1
 80097c4:	08da      	lsrs	r2, r3, #3
 80097c6:	4613      	mov	r3, r2
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	4413      	add	r3, r2
 80097cc:	005b      	lsls	r3, r3, #1
 80097ce:	1aca      	subs	r2, r1, r3
 80097d0:	2a02      	cmp	r2, #2
 80097d2:	d102      	bne.n	80097da <HAL_TIM_PeriodElapsedCallback+0x52>
			every_100ms = 1; // not used
 80097d4:	4b19      	ldr	r3, [pc, #100]	; (800983c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80097d6:	2201      	movs	r2, #1
 80097d8:	801a      	strh	r2, [r3, #0]

		if (count_tim7 == 400)      // every 20 seconds, 0 second after startup
 80097da:	4b15      	ldr	r3, [pc, #84]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80097e2:	d103      	bne.n	80097ec <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if (BATTERYOK == 1)
				Flag[F_BATTERY] = 1;
 80097e4:	4b16      	ldr	r3, [pc, #88]	; (8009840 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80097e6:	2201      	movs	r2, #1
 80097e8:	709a      	strb	r2, [r3, #2]
			TaskAlertManager(TabGen, &i_led);

			Flag[F_100HZ] = 1;
		}
	}
}
 80097ea:	e01a      	b.n	8009822 <HAL_TIM_PeriodElapsedCallback+0x9a>
		else if (count_tim7 % 250 == +1) // every 20 seconds, 10 seconds after startup // 2
 80097ec:	4b10      	ldr	r3, [pc, #64]	; (8009830 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80097ee:	681a      	ldr	r2, [r3, #0]
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80097f2:	fba3 1302 	umull	r1, r3, r3, r2
 80097f6:	091b      	lsrs	r3, r3, #4
 80097f8:	21fa      	movs	r1, #250	; 0xfa
 80097fa:	fb01 f303 	mul.w	r3, r1, r3
 80097fe:	1ad3      	subs	r3, r2, r3
 8009800:	2b01      	cmp	r3, #1
 8009802:	d103      	bne.n	800980c <HAL_TIM_PeriodElapsedCallback+0x84>
				Flag[F_CHARGER] = 1;
 8009804:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8009806:	2201      	movs	r2, #1
 8009808:	705a      	strb	r2, [r3, #1]
}
 800980a:	e00a      	b.n	8009822 <HAL_TIM_PeriodElapsedCallback+0x9a>
			TaskButtonManager(TabGen, TabAlert);
 800980c:	490e      	ldr	r1, [pc, #56]	; (8009848 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800980e:	480f      	ldr	r0, [pc, #60]	; (800984c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009810:	f7fb ff14 	bl	800563c <TaskButtonManager>
			TaskAlertManager(TabGen, &i_led);
 8009814:	490e      	ldr	r1, [pc, #56]	; (8009850 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8009818:	f7fb ffda 	bl	80057d0 <TaskAlertManager>
			Flag[F_100HZ] = 1;
 800981c:	4b08      	ldr	r3, [pc, #32]	; (8009840 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800981e:	2201      	movs	r2, #1
 8009820:	70da      	strb	r2, [r3, #3]
}
 8009822:	bf00      	nop
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	20003298 	.word	0x20003298
 8009830:	20000b7c 	.word	0x20000b7c
 8009834:	2000077c 	.word	0x2000077c
 8009838:	cccccccd 	.word	0xcccccccd
 800983c:	20000b70 	.word	0x20000b70
 8009840:	20002bc4 	.word	0x20002bc4
 8009844:	10624dd3 	.word	0x10624dd3
 8009848:	20003078 	.word	0x20003078
 800984c:	200024d4 	.word	0x200024d4
 8009850:	20000b74 	.word	0x20000b74

08009854 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{ // fonction d'interruption qui s'execute chaque 50 caract�re qui se mettent dans Rx_datagps[]
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
//TaskUARTMessage(TabGen, WifiName, TabDist, TabTimer, huart);
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <vibration_LBL>:

}

void vibration_LBL(uint8_t nb_de_vibration, unsigned short pause_vib,
		unsigned short duree_vib)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	4603      	mov	r3, r0
 8009870:	71fb      	strb	r3, [r7, #7]
 8009872:	460b      	mov	r3, r1
 8009874:	80bb      	strh	r3, [r7, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	807b      	strh	r3, [r7, #2]
	while (nb_de_vibration > 0)
 800987a:	e00a      	b.n	8009892 <vibration_LBL+0x2a>
	{
		PowerVib(duree_vib);
 800987c:	887b      	ldrh	r3, [r7, #2]
 800987e:	4618      	mov	r0, r3
 8009880:	f7f8 ff75 	bl	800276e <PowerVib>
		HAL_Delay(pause_vib);
 8009884:	88bb      	ldrh	r3, [r7, #4]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fda4 	bl	800a3d4 <HAL_Delay>
		nb_de_vibration--;
 800988c:	79fb      	ldrb	r3, [r7, #7]
 800988e:	3b01      	subs	r3, #1
 8009890:	71fb      	strb	r3, [r7, #7]
	while (nb_de_vibration > 0)
 8009892:	79fb      	ldrb	r3, [r7, #7]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1f1      	bne.n	800987c <vibration_LBL+0x14>
	}
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
	...

080098a4 <jumpToBootloader>:
typedef void (*pFunction)(void);
pFunction JumpToApplication;
uint32_t JumpAddress;

void jumpToBootloader(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b082      	sub	sp, #8
 80098a8:	af00      	add	r7, sp, #0

	/* Test if user code is programmed starting from address 0x0800C000 */
	/*if(((*(__IO uint32_t*)DFU_BOOTLOADER_ADD) & 0x2FFE0000 ) == 0x20000000)*/
	/* Jump to user application */

	HAL_RCC_DeInit();
 80098aa:	f004 fa6b 	bl	800dd84 <HAL_RCC_DeInit>

	SysTick->CTRL = 0;
 80098ae:	4b15      	ldr	r3, [pc, #84]	; (8009904 <jumpToBootloader+0x60>)
 80098b0:	2200      	movs	r2, #0
 80098b2:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80098b4:	4b13      	ldr	r3, [pc, #76]	; (8009904 <jumpToBootloader+0x60>)
 80098b6:	2200      	movs	r2, #0
 80098b8:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <jumpToBootloader+0x60>)
 80098bc:	2200      	movs	r2, #0
 80098be:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80098c0:	b672      	cpsid	i
}
 80098c2:	bf00      	nop

	__disable_irq();

	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 80098c4:	4b10      	ldr	r3, [pc, #64]	; (8009908 <jumpToBootloader+0x64>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f023 0307 	bic.w	r3, r3, #7
 80098cc:	4a0e      	ldr	r2, [pc, #56]	; (8009908 <jumpToBootloader+0x64>)
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	6013      	str	r3, [r2, #0]

	JumpAddress = *(__IO uint32_t*) (DFU_BOOTLOADER_ADD + 4);
 80098d4:	4b0d      	ldr	r3, [pc, #52]	; (800990c <jumpToBootloader+0x68>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a0d      	ldr	r2, [pc, #52]	; (8009910 <jumpToBootloader+0x6c>)
 80098da:	6013      	str	r3, [r2, #0]
	JumpToApplication = (pFunction) JumpAddress;
 80098dc:	4b0c      	ldr	r3, [pc, #48]	; (8009910 <jumpToBootloader+0x6c>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <jumpToBootloader+0x70>)
 80098e4:	601a      	str	r2, [r3, #0]

	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t*) 0x08000000);
 80098e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f383 8808 	msr	MSP, r3
}
 80098f4:	bf00      	nop
	JumpToApplication();
 80098f6:	4b07      	ldr	r3, [pc, #28]	; (8009914 <jumpToBootloader+0x70>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4798      	blx	r3
}
 80098fc:	bf00      	nop
 80098fe:	3708      	adds	r7, #8
 8009900:	46bd      	mov	sp, r7
 8009902:	bd80      	pop	{r7, pc}
 8009904:	e000e010 	.word	0xe000e010
 8009908:	40010000 	.word	0x40010000
 800990c:	1fff0004 	.word	0x1fff0004
 8009910:	20001d94 	.word	0x20001d94
 8009914:	20002640 	.word	0x20002640

08009918 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800991c:	bf00      	nop
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800992e:	4b0f      	ldr	r3, [pc, #60]	; (800996c <HAL_MspInit+0x44>)
 8009930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009932:	4a0e      	ldr	r2, [pc, #56]	; (800996c <HAL_MspInit+0x44>)
 8009934:	f043 0301 	orr.w	r3, r3, #1
 8009938:	6613      	str	r3, [r2, #96]	; 0x60
 800993a:	4b0c      	ldr	r3, [pc, #48]	; (800996c <HAL_MspInit+0x44>)
 800993c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800993e:	f003 0301 	and.w	r3, r3, #1
 8009942:	607b      	str	r3, [r7, #4]
 8009944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <HAL_MspInit+0x44>)
 8009948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800994a:	4a08      	ldr	r2, [pc, #32]	; (800996c <HAL_MspInit+0x44>)
 800994c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009950:	6593      	str	r3, [r2, #88]	; 0x58
 8009952:	4b06      	ldr	r3, [pc, #24]	; (800996c <HAL_MspInit+0x44>)
 8009954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800995a:	603b      	str	r3, [r7, #0]
 800995c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800995e:	bf00      	nop
 8009960:	370c      	adds	r7, #12
 8009962:	46bd      	mov	sp, r7
 8009964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009968:	4770      	bx	lr
 800996a:	bf00      	nop
 800996c:	40021000 	.word	0x40021000

08009970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009974:	bf00      	nop
 8009976:	46bd      	mov	sp, r7
 8009978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997c:	4770      	bx	lr

0800997e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800997e:	b480      	push	{r7}
 8009980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009982:	e7fe      	b.n	8009982 <HardFault_Handler+0x4>

08009984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009988:	e7fe      	b.n	8009988 <MemManage_Handler+0x4>

0800998a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800998a:	b480      	push	{r7}
 800998c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800998e:	e7fe      	b.n	800998e <BusFault_Handler+0x4>

08009990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009990:	b480      	push	{r7}
 8009992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009994:	e7fe      	b.n	8009994 <UsageFault_Handler+0x4>

08009996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009996:	b480      	push	{r7}
 8009998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800999a:	bf00      	nop
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80099a4:	b480      	push	{r7}
 80099a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80099a8:	bf00      	nop
 80099aa:	46bd      	mov	sp, r7
 80099ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b0:	4770      	bx	lr

080099b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80099b2:	b480      	push	{r7}
 80099b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80099b6:	bf00      	nop
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80099c4:	f000 fce6 	bl	800a394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80099c8:	bf00      	nop
 80099ca:	bd80      	pop	{r7, pc}

080099cc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80099d0:	4802      	ldr	r0, [pc, #8]	; (80099dc <DMA1_Channel3_IRQHandler+0x10>)
 80099d2:	f000 ffcc 	bl	800a96e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80099d6:	bf00      	nop
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	2000332c 	.word	0x2000332c

080099e0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80099e4:	4802      	ldr	r0, [pc, #8]	; (80099f0 <DMA1_Channel5_IRQHandler+0x10>)
 80099e6:	f000 ffc2 	bl	800a96e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80099ea:	bf00      	nop
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	200032e4 	.word	0x200032e4

080099f4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80099f8:	4802      	ldr	r0, [pc, #8]	; (8009a04 <DMA1_Channel6_IRQHandler+0x10>)
 80099fa:	f000 ffb8 	bl	800a96e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80099fe:	bf00      	nop
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop
 8009a04:	20003500 	.word	0x20003500

08009a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8009a0c:	4802      	ldr	r0, [pc, #8]	; (8009a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8009a0e:	f005 fe33 	bl	800f678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	2000324c 	.word	0x2000324c

08009a1c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009a20:	4802      	ldr	r0, [pc, #8]	; (8009a2c <USART1_IRQHandler+0x10>)
 8009a22:	f006 fe07 	bl	8010634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009a26:	bf00      	nop
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20003374 	.word	0x20003374

08009a30 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009a34:	4802      	ldr	r0, [pc, #8]	; (8009a40 <USART2_IRQHandler+0x10>)
 8009a36:	f006 fdfd 	bl	8010634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009a3a:	bf00      	nop
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	200033f8 	.word	0x200033f8

08009a44 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8009a48:	4802      	ldr	r0, [pc, #8]	; (8009a54 <USART3_IRQHandler+0x10>)
 8009a4a:	f006 fdf3 	bl	8010634 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8009a4e:	bf00      	nop
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	2000347c 	.word	0x2000347c

08009a58 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8009a5c:	4802      	ldr	r0, [pc, #8]	; (8009a68 <TIM7_IRQHandler+0x10>)
 8009a5e:	f005 fe0b 	bl	800f678 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8009a62:	bf00      	nop
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	20003298 	.word	0x20003298

08009a6c <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8009a70:	4802      	ldr	r0, [pc, #8]	; (8009a7c <USB_IRQHandler+0x10>)
 8009a72:	f002 fd68 	bl	800c546 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8009a76:	bf00      	nop
 8009a78:	bd80      	pop	{r7, pc}
 8009a7a:	bf00      	nop
 8009a7c:	20003a1c 	.word	0x20003a1c

08009a80 <_getpid>:
 8009a80:	b480      	push	{r7}
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	2301      	movs	r3, #1
 8009a86:	4618      	mov	r0, r3
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8e:	4770      	bx	lr

08009a90 <_kill>:
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
 8009a98:	6039      	str	r1, [r7, #0]
 8009a9a:	f00c fe4b 	bl	8016734 <__errno>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	2216      	movs	r2, #22
 8009aa2:	601a      	str	r2, [r3, #0]
 8009aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <_exit>:
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f7ff ffe7 	bl	8009a90 <_kill>
 8009ac2:	e7fe      	b.n	8009ac2 <_exit+0x12>

08009ac4 <_read>:
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b086      	sub	sp, #24
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	607a      	str	r2, [r7, #4]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	e00a      	b.n	8009aec <_read+0x28>
 8009ad6:	f3af 8000 	nop.w
 8009ada:	4601      	mov	r1, r0
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	1c5a      	adds	r2, r3, #1
 8009ae0:	60ba      	str	r2, [r7, #8]
 8009ae2:	b2ca      	uxtb	r2, r1
 8009ae4:	701a      	strb	r2, [r3, #0]
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	617b      	str	r3, [r7, #20]
 8009aec:	697a      	ldr	r2, [r7, #20]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	429a      	cmp	r2, r3
 8009af2:	dbf0      	blt.n	8009ad6 <_read+0x12>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	3718      	adds	r7, #24
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <_write>:
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b086      	sub	sp, #24
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	60f8      	str	r0, [r7, #12]
 8009b06:	60b9      	str	r1, [r7, #8]
 8009b08:	607a      	str	r2, [r7, #4]
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e009      	b.n	8009b24 <_write+0x26>
 8009b10:	68bb      	ldr	r3, [r7, #8]
 8009b12:	1c5a      	adds	r2, r3, #1
 8009b14:	60ba      	str	r2, [r7, #8]
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	4618      	mov	r0, r3
 8009b1a:	f3af 8000 	nop.w
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	3301      	adds	r3, #1
 8009b22:	617b      	str	r3, [r7, #20]
 8009b24:	697a      	ldr	r2, [r7, #20]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	dbf1      	blt.n	8009b10 <_write+0x12>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <_close>:
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b42:	4618      	mov	r0, r3
 8009b44:	370c      	adds	r7, #12
 8009b46:	46bd      	mov	sp, r7
 8009b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4c:	4770      	bx	lr

08009b4e <_fstat>:
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009b5e:	605a      	str	r2, [r3, #4]
 8009b60:	2300      	movs	r3, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <_isatty>:
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	2301      	movs	r3, #1
 8009b78:	4618      	mov	r0, r3
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <_lseek>:
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	60f8      	str	r0, [r7, #12]
 8009b8c:	60b9      	str	r1, [r7, #8]
 8009b8e:	607a      	str	r2, [r7, #4]
 8009b90:	2300      	movs	r3, #0
 8009b92:	4618      	mov	r0, r3
 8009b94:	3714      	adds	r7, #20
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr
	...

08009ba0 <_sbrk>:
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	4a14      	ldr	r2, [pc, #80]	; (8009bfc <_sbrk+0x5c>)
 8009baa:	4b15      	ldr	r3, [pc, #84]	; (8009c00 <_sbrk+0x60>)
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	617b      	str	r3, [r7, #20]
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	613b      	str	r3, [r7, #16]
 8009bb4:	4b13      	ldr	r3, [pc, #76]	; (8009c04 <_sbrk+0x64>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <_sbrk+0x22>
 8009bbc:	4b11      	ldr	r3, [pc, #68]	; (8009c04 <_sbrk+0x64>)
 8009bbe:	4a12      	ldr	r2, [pc, #72]	; (8009c08 <_sbrk+0x68>)
 8009bc0:	601a      	str	r2, [r3, #0]
 8009bc2:	4b10      	ldr	r3, [pc, #64]	; (8009c04 <_sbrk+0x64>)
 8009bc4:	681a      	ldr	r2, [r3, #0]
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4413      	add	r3, r2
 8009bca:	693a      	ldr	r2, [r7, #16]
 8009bcc:	429a      	cmp	r2, r3
 8009bce:	d207      	bcs.n	8009be0 <_sbrk+0x40>
 8009bd0:	f00c fdb0 	bl	8016734 <__errno>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	220c      	movs	r2, #12
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	f04f 33ff 	mov.w	r3, #4294967295
 8009bde:	e009      	b.n	8009bf4 <_sbrk+0x54>
 8009be0:	4b08      	ldr	r3, [pc, #32]	; (8009c04 <_sbrk+0x64>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	60fb      	str	r3, [r7, #12]
 8009be6:	4b07      	ldr	r3, [pc, #28]	; (8009c04 <_sbrk+0x64>)
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	4a05      	ldr	r2, [pc, #20]	; (8009c04 <_sbrk+0x64>)
 8009bf0:	6013      	str	r3, [r2, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20010000 	.word	0x20010000
 8009c00:	00000800 	.word	0x00000800
 8009c04:	20000b88 	.word	0x20000b88
 8009c08:	20003d20 	.word	0x20003d20

08009c0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009c10:	4b17      	ldr	r3, [pc, #92]	; (8009c70 <SystemInit+0x64>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c16:	4a16      	ldr	r2, [pc, #88]	; (8009c70 <SystemInit+0x64>)
 8009c18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009c1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8009c20:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <SystemInit+0x68>)
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a13      	ldr	r2, [pc, #76]	; (8009c74 <SystemInit+0x68>)
 8009c26:	f043 0301 	orr.w	r3, r3, #1
 8009c2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8009c2c:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <SystemInit+0x68>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <SystemInit+0x68>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a0f      	ldr	r2, [pc, #60]	; (8009c74 <SystemInit+0x68>)
 8009c38:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8009c3c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8009c40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8009c42:	4b0c      	ldr	r3, [pc, #48]	; (8009c74 <SystemInit+0x68>)
 8009c44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c48:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <SystemInit+0x68>)
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <SystemInit+0x68>)
 8009c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c54:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8009c56:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <SystemInit+0x68>)
 8009c58:	2200      	movs	r2, #0
 8009c5a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009c5c:	4b04      	ldr	r3, [pc, #16]	; (8009c70 <SystemInit+0x64>)
 8009c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009c62:	609a      	str	r2, [r3, #8]
#endif
}
 8009c64:	bf00      	nop
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop
 8009c70:	e000ed00 	.word	0xe000ed00
 8009c74:	40021000 	.word	0x40021000

08009c78 <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009c7e:	1d3b      	adds	r3, r7, #4
 8009c80:	2200      	movs	r2, #0
 8009c82:	601a      	str	r2, [r3, #0]
 8009c84:	605a      	str	r2, [r3, #4]
 8009c86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8009c88:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009c8a:	4a15      	ldr	r2, [pc, #84]	; (8009ce0 <MX_TIM7_Init+0x68>)
 8009c8c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10-1;
 8009c8e:	4b13      	ldr	r3, [pc, #76]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009c90:	2209      	movs	r2, #9
 8009c92:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c94:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009c96:	2200      	movs	r2, #0
 8009c98:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16000-1;
 8009c9a:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009c9c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8009ca0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009ca2:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8009ca8:	480c      	ldr	r0, [pc, #48]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009caa:	f005 fa71 	bl	800f190 <HAL_TIM_Base_Init>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d001      	beq.n	8009cb8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8009cb4:	f7ff fe30 	bl	8009918 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8009cc0:	1d3b      	adds	r3, r7, #4
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	4805      	ldr	r0, [pc, #20]	; (8009cdc <MX_TIM7_Init+0x64>)
 8009cc6:	f006 fa37 	bl	8010138 <HAL_TIMEx_MasterConfigSynchronization>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d001      	beq.n	8009cd4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8009cd0:	f7ff fe22 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8009cd4:	bf00      	nop
 8009cd6:	3710      	adds	r7, #16
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}
 8009cdc:	20003298 	.word	0x20003298
 8009ce0:	40001400 	.word	0x40001400

08009ce4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b092      	sub	sp, #72	; 0x48
 8009ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009cea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
 8009cf2:	605a      	str	r2, [r3, #4]
 8009cf4:	609a      	str	r2, [r3, #8]
 8009cf6:	60da      	str	r2, [r3, #12]
 8009cf8:	611a      	str	r2, [r3, #16]
 8009cfa:	615a      	str	r2, [r3, #20]
 8009cfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009cfe:	463b      	mov	r3, r7
 8009d00:	222c      	movs	r2, #44	; 0x2c
 8009d02:	2100      	movs	r1, #0
 8009d04:	4618      	mov	r0, r3
 8009d06:	f00c fd4d 	bl	80167a4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8009d0a:	4b30      	ldr	r3, [pc, #192]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d0c:	4a30      	ldr	r2, [pc, #192]	; (8009dd0 <MX_TIM16_Init+0xec>)
 8009d0e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 400-1;
 8009d10:	4b2e      	ldr	r3, [pc, #184]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d12:	f240 128f 	movw	r2, #399	; 0x18f
 8009d16:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d18:	4b2c      	ldr	r3, [pc, #176]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 8009d1e:	4b2b      	ldr	r3, [pc, #172]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d20:	2209      	movs	r2, #9
 8009d22:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d24:	4b29      	ldr	r3, [pc, #164]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d26:	2200      	movs	r2, #0
 8009d28:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8009d2a:	4b28      	ldr	r3, [pc, #160]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d30:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d32:	2200      	movs	r2, #0
 8009d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8009d36:	4825      	ldr	r0, [pc, #148]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d38:	f005 fa2a 	bl	800f190 <HAL_TIM_Base_Init>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d001      	beq.n	8009d46 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8009d42:	f7ff fde9 	bl	8009918 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8009d46:	4821      	ldr	r0, [pc, #132]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d48:	f005 face 	bl	800f2e8 <HAL_TIM_PWM_Init>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d001      	beq.n	8009d56 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8009d52:	f7ff fde1 	bl	8009918 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d56:	2360      	movs	r3, #96	; 0x60
 8009d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 5;
 8009d5a:	2305      	movs	r3, #5
 8009d5c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009d62:	2300      	movs	r3, #0
 8009d64:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d66:	2300      	movs	r3, #0
 8009d68:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8009d76:	2200      	movs	r2, #0
 8009d78:	4619      	mov	r1, r3
 8009d7a:	4814      	ldr	r0, [pc, #80]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009d7c:	f005 fd9c 	bl	800f8b8 <HAL_TIM_PWM_ConfigChannel>
 8009d80:	4603      	mov	r3, r0
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8009d86:	f7ff fdc7 	bl	8009918 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009d9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009da4:	2300      	movs	r3, #0
 8009da6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8009da8:	463b      	mov	r3, r7
 8009daa:	4619      	mov	r1, r3
 8009dac:	4807      	ldr	r0, [pc, #28]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009dae:	f006 fa29 	bl	8010204 <HAL_TIMEx_ConfigBreakDeadTime>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 8009db8:	f7ff fdae 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8009dbc:	4803      	ldr	r0, [pc, #12]	; (8009dcc <MX_TIM16_Init+0xe8>)
 8009dbe:	f000 f84b 	bl	8009e58 <HAL_TIM_MspPostInit>

}
 8009dc2:	bf00      	nop
 8009dc4:	3748      	adds	r7, #72	; 0x48
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	2000324c 	.word	0x2000324c
 8009dd0:	40014400 	.word	0x40014400

08009dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b084      	sub	sp, #16
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	4a1a      	ldr	r2, [pc, #104]	; (8009e4c <HAL_TIM_Base_MspInit+0x78>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d114      	bne.n	8009e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8009de6:	4b1a      	ldr	r3, [pc, #104]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009dea:	4a19      	ldr	r2, [pc, #100]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009dec:	f043 0320 	orr.w	r3, r3, #32
 8009df0:	6593      	str	r3, [r2, #88]	; 0x58
 8009df2:	4b17      	ldr	r3, [pc, #92]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	60fb      	str	r3, [r7, #12]
 8009dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2100      	movs	r1, #0
 8009e02:	2037      	movs	r0, #55	; 0x37
 8009e04:	f000 fbe5 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8009e08:	2037      	movs	r0, #55	; 0x37
 8009e0a:	f000 fbfe 	bl	800a60a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8009e0e:	e018      	b.n	8009e42 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a0f      	ldr	r2, [pc, #60]	; (8009e54 <HAL_TIM_Base_MspInit+0x80>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d113      	bne.n	8009e42 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8009e1a:	4b0d      	ldr	r3, [pc, #52]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1e:	4a0c      	ldr	r2, [pc, #48]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e24:	6613      	str	r3, [r2, #96]	; 0x60
 8009e26:	4b0a      	ldr	r3, [pc, #40]	; (8009e50 <HAL_TIM_Base_MspInit+0x7c>)
 8009e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e2e:	60bb      	str	r3, [r7, #8]
 8009e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8009e32:	2200      	movs	r2, #0
 8009e34:	2101      	movs	r1, #1
 8009e36:	2019      	movs	r0, #25
 8009e38:	f000 fbcb 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8009e3c:	2019      	movs	r0, #25
 8009e3e:	f000 fbe4 	bl	800a60a <HAL_NVIC_EnableIRQ>
}
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
 8009e4a:	bf00      	nop
 8009e4c:	40001400 	.word	0x40001400
 8009e50:	40021000 	.word	0x40021000
 8009e54:	40014400 	.word	0x40014400

08009e58 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b088      	sub	sp, #32
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e60:	f107 030c 	add.w	r3, r7, #12
 8009e64:	2200      	movs	r2, #0
 8009e66:	601a      	str	r2, [r3, #0]
 8009e68:	605a      	str	r2, [r3, #4]
 8009e6a:	609a      	str	r2, [r3, #8]
 8009e6c:	60da      	str	r2, [r3, #12]
 8009e6e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a11      	ldr	r2, [pc, #68]	; (8009ebc <HAL_TIM_MspPostInit+0x64>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d11c      	bne.n	8009eb4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009e7a:	4b11      	ldr	r3, [pc, #68]	; (8009ec0 <HAL_TIM_MspPostInit+0x68>)
 8009e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7e:	4a10      	ldr	r2, [pc, #64]	; (8009ec0 <HAL_TIM_MspPostInit+0x68>)
 8009e80:	f043 0301 	orr.w	r3, r3, #1
 8009e84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009e86:	4b0e      	ldr	r3, [pc, #56]	; (8009ec0 <HAL_TIM_MspPostInit+0x68>)
 8009e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	60bb      	str	r3, [r7, #8]
 8009e90:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009e92:	2340      	movs	r3, #64	; 0x40
 8009e94:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e96:	2302      	movs	r3, #2
 8009e98:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 8009ea2:	230e      	movs	r3, #14
 8009ea4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ea6:	f107 030c 	add.w	r3, r7, #12
 8009eaa:	4619      	mov	r1, r3
 8009eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009eb0:	f001 f8b4 	bl	800b01c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8009eb4:	bf00      	nop
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	40014400 	.word	0x40014400
 8009ec0:	40021000 	.word	0x40021000

08009ec4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009ec8:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009eca:	4a15      	ldr	r2, [pc, #84]	; (8009f20 <MX_USART1_UART_Init+0x5c>)
 8009ecc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009ece:	4b13      	ldr	r3, [pc, #76]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ed0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009ed4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009ed6:	4b11      	ldr	r3, [pc, #68]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ed8:	2200      	movs	r2, #0
 8009eda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009edc:	4b0f      	ldr	r3, [pc, #60]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ee2:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009ee8:	4b0c      	ldr	r3, [pc, #48]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009eea:	220c      	movs	r2, #12
 8009eec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009eee:	4b0b      	ldr	r3, [pc, #44]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009efa:	4b08      	ldr	r3, [pc, #32]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f00:	4b06      	ldr	r3, [pc, #24]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009f06:	4805      	ldr	r0, [pc, #20]	; (8009f1c <MX_USART1_UART_Init+0x58>)
 8009f08:	f006 fa12 	bl	8010330 <HAL_UART_Init>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8009f12:	f7ff fd01 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009f16:	bf00      	nop
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20003374 	.word	0x20003374
 8009f20:	40013800 	.word	0x40013800

08009f24 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8009f28:	4b14      	ldr	r3, [pc, #80]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f2a:	4a15      	ldr	r2, [pc, #84]	; (8009f80 <MX_USART2_UART_Init+0x5c>)
 8009f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8009f2e:	4b13      	ldr	r3, [pc, #76]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8009f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009f36:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f38:	2200      	movs	r2, #0
 8009f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009f3c:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f3e:	2200      	movs	r2, #0
 8009f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009f42:	4b0e      	ldr	r3, [pc, #56]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009f48:	4b0c      	ldr	r3, [pc, #48]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f4a:	220c      	movs	r2, #12
 8009f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009f4e:	4b0b      	ldr	r3, [pc, #44]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f50:	2200      	movs	r2, #0
 8009f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009f54:	4b09      	ldr	r3, [pc, #36]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f56:	2200      	movs	r2, #0
 8009f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009f5a:	4b08      	ldr	r3, [pc, #32]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f62:	2200      	movs	r2, #0
 8009f64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009f66:	4805      	ldr	r0, [pc, #20]	; (8009f7c <MX_USART2_UART_Init+0x58>)
 8009f68:	f006 f9e2 	bl	8010330 <HAL_UART_Init>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d001      	beq.n	8009f76 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8009f72:	f7ff fcd1 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009f76:	bf00      	nop
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200033f8 	.word	0x200033f8
 8009f80:	40004400 	.word	0x40004400

08009f84 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009f88:	4b14      	ldr	r3, [pc, #80]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009f8a:	4a15      	ldr	r2, [pc, #84]	; (8009fe0 <MX_USART3_UART_Init+0x5c>)
 8009f8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8009f8e:	4b13      	ldr	r3, [pc, #76]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009f90:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8009f94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009f96:	4b11      	ldr	r3, [pc, #68]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009f98:	2200      	movs	r2, #0
 8009f9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009f9c:	4b0f      	ldr	r3, [pc, #60]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009fa2:	4b0e      	ldr	r3, [pc, #56]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009fa8:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009faa:	220c      	movs	r2, #12
 8009fac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009fae:	4b0b      	ldr	r3, [pc, #44]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009fb4:	4b09      	ldr	r3, [pc, #36]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009fba:	4b08      	ldr	r3, [pc, #32]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8009fc0:	4b06      	ldr	r3, [pc, #24]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009fc6:	4805      	ldr	r0, [pc, #20]	; (8009fdc <MX_USART3_UART_Init+0x58>)
 8009fc8:	f006 f9b2 	bl	8010330 <HAL_UART_Init>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8009fd2:	f7ff fca1 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009fd6:	bf00      	nop
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	2000347c 	.word	0x2000347c
 8009fe0:	40004800 	.word	0x40004800

08009fe4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b08e      	sub	sp, #56	; 0x38
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	605a      	str	r2, [r3, #4]
 8009ff6:	609a      	str	r2, [r3, #8]
 8009ff8:	60da      	str	r2, [r3, #12]
 8009ffa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a9a      	ldr	r2, [pc, #616]	; (800a26c <HAL_UART_MspInit+0x288>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d15b      	bne.n	800a0be <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a006:	4b9a      	ldr	r3, [pc, #616]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a00a:	4a99      	ldr	r2, [pc, #612]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a00c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a010:	6613      	str	r3, [r2, #96]	; 0x60
 800a012:	4b97      	ldr	r3, [pc, #604]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a01a:	623b      	str	r3, [r7, #32]
 800a01c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a01e:	4b94      	ldr	r3, [pc, #592]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a022:	4a93      	ldr	r2, [pc, #588]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a024:	f043 0301 	orr.w	r3, r3, #1
 800a028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a02a:	4b91      	ldr	r3, [pc, #580]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a02e:	f003 0301 	and.w	r3, r3, #1
 800a032:	61fb      	str	r3, [r7, #28]
 800a034:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_CARTEGAZ_Pin|RX1_CARTEGAZ_Pin;
 800a036:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a03a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a03c:	2302      	movs	r3, #2
 800a03e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a040:	2300      	movs	r3, #0
 800a042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a044:	2303      	movs	r3, #3
 800a046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a048:	2307      	movs	r3, #7
 800a04a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a04c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a050:	4619      	mov	r1, r3
 800a052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a056:	f000 ffe1 	bl	800b01c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800a05a:	4b86      	ldr	r3, [pc, #536]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a05c:	4a86      	ldr	r2, [pc, #536]	; (800a278 <HAL_UART_MspInit+0x294>)
 800a05e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800a060:	4b84      	ldr	r3, [pc, #528]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a062:	2202      	movs	r2, #2
 800a064:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a066:	4b83      	ldr	r3, [pc, #524]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a06c:	4b81      	ldr	r3, [pc, #516]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a06e:	2200      	movs	r2, #0
 800a070:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a072:	4b80      	ldr	r3, [pc, #512]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a074:	2280      	movs	r2, #128	; 0x80
 800a076:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a078:	4b7e      	ldr	r3, [pc, #504]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a07e:	4b7d      	ldr	r3, [pc, #500]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a080:	2200      	movs	r2, #0
 800a082:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a084:	4b7b      	ldr	r3, [pc, #492]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a086:	2220      	movs	r2, #32
 800a088:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a08a:	4b7a      	ldr	r3, [pc, #488]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a08c:	2200      	movs	r2, #0
 800a08e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a090:	4878      	ldr	r0, [pc, #480]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a092:	f000 fad5 	bl	800a640 <HAL_DMA_Init>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d001      	beq.n	800a0a0 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800a09c:	f7ff fc3c 	bl	8009918 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	4a74      	ldr	r2, [pc, #464]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a0a4:	671a      	str	r2, [r3, #112]	; 0x70
 800a0a6:	4a73      	ldr	r2, [pc, #460]	; (800a274 <HAL_UART_MspInit+0x290>)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	2103      	movs	r1, #3
 800a0b0:	2025      	movs	r0, #37	; 0x25
 800a0b2:	f000 fa8e 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a0b6:	2025      	movs	r0, #37	; 0x25
 800a0b8:	f000 faa7 	bl	800a60a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800a0bc:	e0d1      	b.n	800a262 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART2)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	4a6e      	ldr	r2, [pc, #440]	; (800a27c <HAL_UART_MspInit+0x298>)
 800a0c4:	4293      	cmp	r3, r2
 800a0c6:	d16c      	bne.n	800a1a2 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 800a0c8:	4b69      	ldr	r3, [pc, #420]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0cc:	4a68      	ldr	r2, [pc, #416]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a0d4:	4b66      	ldr	r3, [pc, #408]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0dc:	61bb      	str	r3, [r7, #24]
 800a0de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a0e0:	4b63      	ldr	r3, [pc, #396]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0e4:	4a62      	ldr	r2, [pc, #392]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0e6:	f043 0301 	orr.w	r3, r3, #1
 800a0ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a0ec:	4b60      	ldr	r3, [pc, #384]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	617b      	str	r3, [r7, #20]
 800a0f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin;
 800a0f8:	2304      	movs	r3, #4
 800a0fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a100:	2300      	movs	r3, #0
 800a102:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a104:	2303      	movs	r3, #3
 800a106:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800a108:	2307      	movs	r3, #7
 800a10a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800a10c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a110:	4619      	mov	r1, r3
 800a112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a116:	f000 ff81 	bl	800b01c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX2_GPS_Pin;
 800a11a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a11e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a120:	2302      	movs	r3, #2
 800a122:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a124:	2300      	movs	r3, #0
 800a126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a128:	2303      	movs	r3, #3
 800a12a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800a12c:	2303      	movs	r3, #3
 800a12e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800a130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a134:	4619      	mov	r1, r3
 800a136:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a13a:	f000 ff6f 	bl	800b01c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800a13e:	4b50      	ldr	r3, [pc, #320]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a140:	4a50      	ldr	r2, [pc, #320]	; (800a284 <HAL_UART_MspInit+0x2a0>)
 800a142:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800a144:	4b4e      	ldr	r3, [pc, #312]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a146:	2202      	movs	r2, #2
 800a148:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a14a:	4b4d      	ldr	r3, [pc, #308]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a150:	4b4b      	ldr	r3, [pc, #300]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a152:	2200      	movs	r2, #0
 800a154:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a156:	4b4a      	ldr	r3, [pc, #296]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a158:	2280      	movs	r2, #128	; 0x80
 800a15a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a15c:	4b48      	ldr	r3, [pc, #288]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a15e:	2200      	movs	r2, #0
 800a160:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a162:	4b47      	ldr	r3, [pc, #284]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a164:	2200      	movs	r2, #0
 800a166:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800a168:	4b45      	ldr	r3, [pc, #276]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a16a:	2220      	movs	r2, #32
 800a16c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a16e:	4b44      	ldr	r3, [pc, #272]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a170:	2200      	movs	r2, #0
 800a172:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800a174:	4842      	ldr	r0, [pc, #264]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a176:	f000 fa63 	bl	800a640 <HAL_DMA_Init>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800a180:	f7ff fbca 	bl	8009918 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a3e      	ldr	r2, [pc, #248]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a188:	671a      	str	r2, [r3, #112]	; 0x70
 800a18a:	4a3d      	ldr	r2, [pc, #244]	; (800a280 <HAL_UART_MspInit+0x29c>)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800a190:	2200      	movs	r2, #0
 800a192:	2102      	movs	r1, #2
 800a194:	2026      	movs	r0, #38	; 0x26
 800a196:	f000 fa1c 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800a19a:	2026      	movs	r0, #38	; 0x26
 800a19c:	f000 fa35 	bl	800a60a <HAL_NVIC_EnableIRQ>
}
 800a1a0:	e05f      	b.n	800a262 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	4a38      	ldr	r2, [pc, #224]	; (800a288 <HAL_UART_MspInit+0x2a4>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d15a      	bne.n	800a262 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a1ac:	4b30      	ldr	r3, [pc, #192]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1b0:	4a2f      	ldr	r2, [pc, #188]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1b6:	6593      	str	r3, [r2, #88]	; 0x58
 800a1b8:	4b2d      	ldr	r3, [pc, #180]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1c0:	613b      	str	r3, [r7, #16]
 800a1c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1c4:	4b2a      	ldr	r3, [pc, #168]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1c8:	4a29      	ldr	r2, [pc, #164]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1ca:	f043 0302 	orr.w	r3, r3, #2
 800a1ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1d0:	4b27      	ldr	r3, [pc, #156]	; (800a270 <HAL_UART_MspInit+0x28c>)
 800a1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1d4:	f003 0302 	and.w	r3, r3, #2
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_LORA_Pin|RX3_LORA_Pin;
 800a1dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a1e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a1ee:	2307      	movs	r3, #7
 800a1f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	4824      	ldr	r0, [pc, #144]	; (800a28c <HAL_UART_MspInit+0x2a8>)
 800a1fa:	f000 ff0f 	bl	800b01c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800a1fe:	4b24      	ldr	r3, [pc, #144]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a200:	4a24      	ldr	r2, [pc, #144]	; (800a294 <HAL_UART_MspInit+0x2b0>)
 800a202:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800a204:	4b22      	ldr	r3, [pc, #136]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a206:	2202      	movs	r2, #2
 800a208:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a20a:	4b21      	ldr	r3, [pc, #132]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a20c:	2200      	movs	r2, #0
 800a20e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a210:	4b1f      	ldr	r3, [pc, #124]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a212:	2200      	movs	r2, #0
 800a214:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a216:	4b1e      	ldr	r3, [pc, #120]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a218:	2280      	movs	r2, #128	; 0x80
 800a21a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a21c:	4b1c      	ldr	r3, [pc, #112]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a21e:	2200      	movs	r2, #0
 800a220:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a222:	4b1b      	ldr	r3, [pc, #108]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a224:	2200      	movs	r2, #0
 800a226:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800a228:	4b19      	ldr	r3, [pc, #100]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a22a:	2220      	movs	r2, #32
 800a22c:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800a22e:	4b18      	ldr	r3, [pc, #96]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a230:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a234:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800a236:	4816      	ldr	r0, [pc, #88]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a238:	f000 fa02 	bl	800a640 <HAL_DMA_Init>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <HAL_UART_MspInit+0x262>
      Error_Handler();
 800a242:	f7ff fb69 	bl	8009918 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a11      	ldr	r2, [pc, #68]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a24a:	671a      	str	r2, [r3, #112]	; 0x70
 800a24c:	4a10      	ldr	r2, [pc, #64]	; (800a290 <HAL_UART_MspInit+0x2ac>)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800a252:	2200      	movs	r2, #0
 800a254:	2101      	movs	r1, #1
 800a256:	2027      	movs	r0, #39	; 0x27
 800a258:	f000 f9bb 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800a25c:	2027      	movs	r0, #39	; 0x27
 800a25e:	f000 f9d4 	bl	800a60a <HAL_NVIC_EnableIRQ>
}
 800a262:	bf00      	nop
 800a264:	3738      	adds	r7, #56	; 0x38
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	40013800 	.word	0x40013800
 800a270:	40021000 	.word	0x40021000
 800a274:	200032e4 	.word	0x200032e4
 800a278:	40020058 	.word	0x40020058
 800a27c:	40004400 	.word	0x40004400
 800a280:	20003500 	.word	0x20003500
 800a284:	4002006c 	.word	0x4002006c
 800a288:	40004800 	.word	0x40004800
 800a28c:	48000400 	.word	0x48000400
 800a290:	2000332c 	.word	0x2000332c
 800a294:	40020030 	.word	0x40020030

0800a298 <Reset_Handler>:
 800a298:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a2d0 <LoopForever+0x2>
 800a29c:	f7ff fcb6 	bl	8009c0c <SystemInit>
 800a2a0:	2100      	movs	r1, #0
 800a2a2:	e003      	b.n	800a2ac <LoopCopyDataInit>

0800a2a4 <CopyDataInit>:
 800a2a4:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <LoopForever+0x6>)
 800a2a6:	585b      	ldr	r3, [r3, r1]
 800a2a8:	5043      	str	r3, [r0, r1]
 800a2aa:	3104      	adds	r1, #4

0800a2ac <LoopCopyDataInit>:
 800a2ac:	480a      	ldr	r0, [pc, #40]	; (800a2d8 <LoopForever+0xa>)
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <LoopForever+0xe>)
 800a2b0:	1842      	adds	r2, r0, r1
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d3f6      	bcc.n	800a2a4 <CopyDataInit>
 800a2b6:	4a0a      	ldr	r2, [pc, #40]	; (800a2e0 <LoopForever+0x12>)
 800a2b8:	e002      	b.n	800a2c0 <LoopFillZerobss>

0800a2ba <FillZerobss>:
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f842 3b04 	str.w	r3, [r2], #4

0800a2c0 <LoopFillZerobss>:
 800a2c0:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <LoopForever+0x16>)
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d3f9      	bcc.n	800a2ba <FillZerobss>
 800a2c6:	f00c fa3b 	bl	8016740 <__libc_init_array>
 800a2ca:	f7fe fcab 	bl	8008c24 <main>

0800a2ce <LoopForever>:
 800a2ce:	e7fe      	b.n	800a2ce <LoopForever>
 800a2d0:	20010000 	.word	0x20010000
 800a2d4:	0801ba38 	.word	0x0801ba38
 800a2d8:	20000000 	.word	0x20000000
 800a2dc:	20000a94 	.word	0x20000a94
 800a2e0:	20000a94 	.word	0x20000a94
 800a2e4:	20003d20 	.word	0x20003d20

0800a2e8 <ADC1_IRQHandler>:
 800a2e8:	e7fe      	b.n	800a2e8 <ADC1_IRQHandler>

0800a2ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b082      	sub	sp, #8
 800a2ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a2f4:	2003      	movs	r0, #3
 800a2f6:	f000 f961 	bl	800a5bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	f000 f80e 	bl	800a31c <HAL_InitTick>
 800a300:	4603      	mov	r3, r0
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800a306:	2301      	movs	r3, #1
 800a308:	71fb      	strb	r3, [r7, #7]
 800a30a:	e001      	b.n	800a310 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800a30c:	f7ff fb0c 	bl	8009928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800a310:	79fb      	ldrb	r3, [r7, #7]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3708      	adds	r7, #8
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800a324:	2300      	movs	r3, #0
 800a326:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800a328:	4b17      	ldr	r3, [pc, #92]	; (800a388 <HAL_InitTick+0x6c>)
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d023      	beq.n	800a378 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800a330:	4b16      	ldr	r3, [pc, #88]	; (800a38c <HAL_InitTick+0x70>)
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	4b14      	ldr	r3, [pc, #80]	; (800a388 <HAL_InitTick+0x6c>)
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	4619      	mov	r1, r3
 800a33a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a33e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a342:	fbb2 f3f3 	udiv	r3, r2, r3
 800a346:	4618      	mov	r0, r3
 800a348:	f000 f96d 	bl	800a626 <HAL_SYSTICK_Config>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10f      	bne.n	800a372 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b0f      	cmp	r3, #15
 800a356:	d809      	bhi.n	800a36c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800a358:	2200      	movs	r2, #0
 800a35a:	6879      	ldr	r1, [r7, #4]
 800a35c:	f04f 30ff 	mov.w	r0, #4294967295
 800a360:	f000 f937 	bl	800a5d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a364:	4a0a      	ldr	r2, [pc, #40]	; (800a390 <HAL_InitTick+0x74>)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	e007      	b.n	800a37c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	73fb      	strb	r3, [r7, #15]
 800a370:	e004      	b.n	800a37c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800a372:	2301      	movs	r3, #1
 800a374:	73fb      	strb	r3, [r7, #15]
 800a376:	e001      	b.n	800a37c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800a37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a37e:	4618      	mov	r0, r3
 800a380:	3710      	adds	r7, #16
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000788 	.word	0x20000788
 800a38c:	20000780 	.word	0x20000780
 800a390:	20000784 	.word	0x20000784

0800a394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800a398:	4b06      	ldr	r3, [pc, #24]	; (800a3b4 <HAL_IncTick+0x20>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	461a      	mov	r2, r3
 800a39e:	4b06      	ldr	r3, [pc, #24]	; (800a3b8 <HAL_IncTick+0x24>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4413      	add	r3, r2
 800a3a4:	4a04      	ldr	r2, [pc, #16]	; (800a3b8 <HAL_IncTick+0x24>)
 800a3a6:	6013      	str	r3, [r2, #0]
}
 800a3a8:	bf00      	nop
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop
 800a3b4:	20000788 	.word	0x20000788
 800a3b8:	20003548 	.word	0x20003548

0800a3bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
  return uwTick;
 800a3c0:	4b03      	ldr	r3, [pc, #12]	; (800a3d0 <HAL_GetTick+0x14>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
 800a3ce:	bf00      	nop
 800a3d0:	20003548 	.word	0x20003548

0800a3d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3dc:	f7ff ffee 	bl	800a3bc <HAL_GetTick>
 800a3e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3ec:	d005      	beq.n	800a3fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800a3ee:	4b0a      	ldr	r3, [pc, #40]	; (800a418 <HAL_Delay+0x44>)
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800a3fa:	bf00      	nop
 800a3fc:	f7ff ffde 	bl	800a3bc <HAL_GetTick>
 800a400:	4602      	mov	r2, r0
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	1ad3      	subs	r3, r2, r3
 800a406:	68fa      	ldr	r2, [r7, #12]
 800a408:	429a      	cmp	r2, r3
 800a40a:	d8f7      	bhi.n	800a3fc <HAL_Delay+0x28>
  {
  }
}
 800a40c:	bf00      	nop
 800a40e:	bf00      	nop
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	20000788 	.word	0x20000788

0800a41c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f003 0307 	and.w	r3, r3, #7
 800a42a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a42c:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <__NVIC_SetPriorityGrouping+0x44>)
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a438:	4013      	ands	r3, r2
 800a43a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a444:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a448:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a44c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a44e:	4a04      	ldr	r2, [pc, #16]	; (800a460 <__NVIC_SetPriorityGrouping+0x44>)
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	60d3      	str	r3, [r2, #12]
}
 800a454:	bf00      	nop
 800a456:	3714      	adds	r7, #20
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr
 800a460:	e000ed00 	.word	0xe000ed00

0800a464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a468:	4b04      	ldr	r3, [pc, #16]	; (800a47c <__NVIC_GetPriorityGrouping+0x18>)
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	0a1b      	lsrs	r3, r3, #8
 800a46e:	f003 0307 	and.w	r3, r3, #7
}
 800a472:	4618      	mov	r0, r3
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	e000ed00 	.word	0xe000ed00

0800a480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	4603      	mov	r3, r0
 800a488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a48a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	db0b      	blt.n	800a4aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a492:	79fb      	ldrb	r3, [r7, #7]
 800a494:	f003 021f 	and.w	r2, r3, #31
 800a498:	4907      	ldr	r1, [pc, #28]	; (800a4b8 <__NVIC_EnableIRQ+0x38>)
 800a49a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a49e:	095b      	lsrs	r3, r3, #5
 800a4a0:	2001      	movs	r0, #1
 800a4a2:	fa00 f202 	lsl.w	r2, r0, r2
 800a4a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr
 800a4b6:	bf00      	nop
 800a4b8:	e000e100 	.word	0xe000e100

0800a4bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	6039      	str	r1, [r7, #0]
 800a4c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	db0a      	blt.n	800a4e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	490c      	ldr	r1, [pc, #48]	; (800a508 <__NVIC_SetPriority+0x4c>)
 800a4d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4da:	0112      	lsls	r2, r2, #4
 800a4dc:	b2d2      	uxtb	r2, r2
 800a4de:	440b      	add	r3, r1
 800a4e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a4e4:	e00a      	b.n	800a4fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	4908      	ldr	r1, [pc, #32]	; (800a50c <__NVIC_SetPriority+0x50>)
 800a4ec:	79fb      	ldrb	r3, [r7, #7]
 800a4ee:	f003 030f 	and.w	r3, r3, #15
 800a4f2:	3b04      	subs	r3, #4
 800a4f4:	0112      	lsls	r2, r2, #4
 800a4f6:	b2d2      	uxtb	r2, r2
 800a4f8:	440b      	add	r3, r1
 800a4fa:	761a      	strb	r2, [r3, #24]
}
 800a4fc:	bf00      	nop
 800a4fe:	370c      	adds	r7, #12
 800a500:	46bd      	mov	sp, r7
 800a502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a506:	4770      	bx	lr
 800a508:	e000e100 	.word	0xe000e100
 800a50c:	e000ed00 	.word	0xe000ed00

0800a510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a510:	b480      	push	{r7}
 800a512:	b089      	sub	sp, #36	; 0x24
 800a514:	af00      	add	r7, sp, #0
 800a516:	60f8      	str	r0, [r7, #12]
 800a518:	60b9      	str	r1, [r7, #8]
 800a51a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f003 0307 	and.w	r3, r3, #7
 800a522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a524:	69fb      	ldr	r3, [r7, #28]
 800a526:	f1c3 0307 	rsb	r3, r3, #7
 800a52a:	2b04      	cmp	r3, #4
 800a52c:	bf28      	it	cs
 800a52e:	2304      	movcs	r3, #4
 800a530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	3304      	adds	r3, #4
 800a536:	2b06      	cmp	r3, #6
 800a538:	d902      	bls.n	800a540 <NVIC_EncodePriority+0x30>
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	3b03      	subs	r3, #3
 800a53e:	e000      	b.n	800a542 <NVIC_EncodePriority+0x32>
 800a540:	2300      	movs	r3, #0
 800a542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a544:	f04f 32ff 	mov.w	r2, #4294967295
 800a548:	69bb      	ldr	r3, [r7, #24]
 800a54a:	fa02 f303 	lsl.w	r3, r2, r3
 800a54e:	43da      	mvns	r2, r3
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	401a      	ands	r2, r3
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a558:	f04f 31ff 	mov.w	r1, #4294967295
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	fa01 f303 	lsl.w	r3, r1, r3
 800a562:	43d9      	mvns	r1, r3
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a568:	4313      	orrs	r3, r2
         );
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3724      	adds	r7, #36	; 0x24
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
	...

0800a578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b082      	sub	sp, #8
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3b01      	subs	r3, #1
 800a584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a588:	d301      	bcc.n	800a58e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a58a:	2301      	movs	r3, #1
 800a58c:	e00f      	b.n	800a5ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a58e:	4a0a      	ldr	r2, [pc, #40]	; (800a5b8 <SysTick_Config+0x40>)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3b01      	subs	r3, #1
 800a594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a596:	210f      	movs	r1, #15
 800a598:	f04f 30ff 	mov.w	r0, #4294967295
 800a59c:	f7ff ff8e 	bl	800a4bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a5a0:	4b05      	ldr	r3, [pc, #20]	; (800a5b8 <SysTick_Config+0x40>)
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a5a6:	4b04      	ldr	r3, [pc, #16]	; (800a5b8 <SysTick_Config+0x40>)
 800a5a8:	2207      	movs	r2, #7
 800a5aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a5ac:	2300      	movs	r3, #0
}
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	3708      	adds	r7, #8
 800a5b2:	46bd      	mov	sp, r7
 800a5b4:	bd80      	pop	{r7, pc}
 800a5b6:	bf00      	nop
 800a5b8:	e000e010 	.word	0xe000e010

0800a5bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f7ff ff29 	bl	800a41c <__NVIC_SetPriorityGrouping>
}
 800a5ca:	bf00      	nop
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	4603      	mov	r3, r0
 800a5da:	60b9      	str	r1, [r7, #8]
 800a5dc:	607a      	str	r2, [r7, #4]
 800a5de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a5e4:	f7ff ff3e 	bl	800a464 <__NVIC_GetPriorityGrouping>
 800a5e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	68b9      	ldr	r1, [r7, #8]
 800a5ee:	6978      	ldr	r0, [r7, #20]
 800a5f0:	f7ff ff8e 	bl	800a510 <NVIC_EncodePriority>
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5fa:	4611      	mov	r1, r2
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	f7ff ff5d 	bl	800a4bc <__NVIC_SetPriority>
}
 800a602:	bf00      	nop
 800a604:	3718      	adds	r7, #24
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}

0800a60a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a60a:	b580      	push	{r7, lr}
 800a60c:	b082      	sub	sp, #8
 800a60e:	af00      	add	r7, sp, #0
 800a610:	4603      	mov	r3, r0
 800a612:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a618:	4618      	mov	r0, r3
 800a61a:	f7ff ff31 	bl	800a480 <__NVIC_EnableIRQ>
}
 800a61e:	bf00      	nop
 800a620:	3708      	adds	r7, #8
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}

0800a626 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a626:	b580      	push	{r7, lr}
 800a628:	b082      	sub	sp, #8
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ffa2 	bl	800a578 <SysTick_Config>
 800a634:	4603      	mov	r3, r0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3708      	adds	r7, #8
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a640:	b480      	push	{r7}
 800a642:	b085      	sub	sp, #20
 800a644:	af00      	add	r7, sp, #0
 800a646:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e098      	b.n	800a784 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	461a      	mov	r2, r3
 800a658:	4b4d      	ldr	r3, [pc, #308]	; (800a790 <HAL_DMA_Init+0x150>)
 800a65a:	429a      	cmp	r2, r3
 800a65c:	d80f      	bhi.n	800a67e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	461a      	mov	r2, r3
 800a664:	4b4b      	ldr	r3, [pc, #300]	; (800a794 <HAL_DMA_Init+0x154>)
 800a666:	4413      	add	r3, r2
 800a668:	4a4b      	ldr	r2, [pc, #300]	; (800a798 <HAL_DMA_Init+0x158>)
 800a66a:	fba2 2303 	umull	r2, r3, r2, r3
 800a66e:	091b      	lsrs	r3, r3, #4
 800a670:	009a      	lsls	r2, r3, #2
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a48      	ldr	r2, [pc, #288]	; (800a79c <HAL_DMA_Init+0x15c>)
 800a67a:	641a      	str	r2, [r3, #64]	; 0x40
 800a67c:	e00e      	b.n	800a69c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	461a      	mov	r2, r3
 800a684:	4b46      	ldr	r3, [pc, #280]	; (800a7a0 <HAL_DMA_Init+0x160>)
 800a686:	4413      	add	r3, r2
 800a688:	4a43      	ldr	r2, [pc, #268]	; (800a798 <HAL_DMA_Init+0x158>)
 800a68a:	fba2 2303 	umull	r2, r3, r2, r3
 800a68e:	091b      	lsrs	r3, r3, #4
 800a690:	009a      	lsls	r2, r3, #2
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	4a42      	ldr	r2, [pc, #264]	; (800a7a4 <HAL_DMA_Init+0x164>)
 800a69a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2202      	movs	r2, #2
 800a6a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a6b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a6b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a6c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	691b      	ldr	r3, [r3, #16]
 800a6c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6a1b      	ldr	r3, [r3, #32]
 800a6de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a6e0:	68fa      	ldr	r2, [r7, #12]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6f6:	d039      	beq.n	800a76c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fc:	4a27      	ldr	r2, [pc, #156]	; (800a79c <HAL_DMA_Init+0x15c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d11a      	bne.n	800a738 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a702:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <HAL_DMA_Init+0x168>)
 800a704:	681a      	ldr	r2, [r3, #0]
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a70a:	f003 031c 	and.w	r3, r3, #28
 800a70e:	210f      	movs	r1, #15
 800a710:	fa01 f303 	lsl.w	r3, r1, r3
 800a714:	43db      	mvns	r3, r3
 800a716:	4924      	ldr	r1, [pc, #144]	; (800a7a8 <HAL_DMA_Init+0x168>)
 800a718:	4013      	ands	r3, r2
 800a71a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a71c:	4b22      	ldr	r3, [pc, #136]	; (800a7a8 <HAL_DMA_Init+0x168>)
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6859      	ldr	r1, [r3, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a728:	f003 031c 	and.w	r3, r3, #28
 800a72c:	fa01 f303 	lsl.w	r3, r1, r3
 800a730:	491d      	ldr	r1, [pc, #116]	; (800a7a8 <HAL_DMA_Init+0x168>)
 800a732:	4313      	orrs	r3, r2
 800a734:	600b      	str	r3, [r1, #0]
 800a736:	e019      	b.n	800a76c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800a738:	4b1c      	ldr	r3, [pc, #112]	; (800a7ac <HAL_DMA_Init+0x16c>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a740:	f003 031c 	and.w	r3, r3, #28
 800a744:	210f      	movs	r1, #15
 800a746:	fa01 f303 	lsl.w	r3, r1, r3
 800a74a:	43db      	mvns	r3, r3
 800a74c:	4917      	ldr	r1, [pc, #92]	; (800a7ac <HAL_DMA_Init+0x16c>)
 800a74e:	4013      	ands	r3, r2
 800a750:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800a752:	4b16      	ldr	r3, [pc, #88]	; (800a7ac <HAL_DMA_Init+0x16c>)
 800a754:	681a      	ldr	r2, [r3, #0]
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6859      	ldr	r1, [r3, #4]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a75e:	f003 031c 	and.w	r3, r3, #28
 800a762:	fa01 f303 	lsl.w	r3, r1, r3
 800a766:	4911      	ldr	r1, [pc, #68]	; (800a7ac <HAL_DMA_Init+0x16c>)
 800a768:	4313      	orrs	r3, r2
 800a76a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3714      	adds	r7, #20
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr
 800a790:	40020407 	.word	0x40020407
 800a794:	bffdfff8 	.word	0xbffdfff8
 800a798:	cccccccd 	.word	0xcccccccd
 800a79c:	40020000 	.word	0x40020000
 800a7a0:	bffdfbf8 	.word	0xbffdfbf8
 800a7a4:	40020400 	.word	0x40020400
 800a7a8:	400200a8 	.word	0x400200a8
 800a7ac:	400204a8 	.word	0x400204a8

0800a7b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d101      	bne.n	800a7d0 <HAL_DMA_Start_IT+0x20>
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	e04b      	b.n	800a868 <HAL_DMA_Start_IT+0xb8>
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a7de:	b2db      	uxtb	r3, r3
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d13a      	bne.n	800a85a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	2202      	movs	r2, #2
 800a7e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f022 0201 	bic.w	r2, r2, #1
 800a800:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	68b9      	ldr	r1, [r7, #8]
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f95f 	bl	800aacc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a812:	2b00      	cmp	r3, #0
 800a814:	d008      	beq.n	800a828 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f042 020e 	orr.w	r2, r2, #14
 800a824:	601a      	str	r2, [r3, #0]
 800a826:	e00f      	b.n	800a848 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f022 0204 	bic.w	r2, r2, #4
 800a836:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f042 020a 	orr.w	r2, r2, #10
 800a846:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681a      	ldr	r2, [r3, #0]
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f042 0201 	orr.w	r2, r2, #1
 800a856:	601a      	str	r2, [r3, #0]
 800a858:	e005      	b.n	800a866 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a862:	2302      	movs	r3, #2
 800a864:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a866:	7dfb      	ldrb	r3, [r7, #23]
}
 800a868:	4618      	mov	r0, r3
 800a86a:	3718      	adds	r7, #24
 800a86c:	46bd      	mov	sp, r7
 800a86e:	bd80      	pop	{r7, pc}

0800a870 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a870:	b480      	push	{r7}
 800a872:	b085      	sub	sp, #20
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a878:	2300      	movs	r3, #0
 800a87a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a882:	b2db      	uxtb	r3, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d008      	beq.n	800a89a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2204      	movs	r2, #4
 800a88c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e022      	b.n	800a8e0 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	f022 020e 	bic.w	r2, r2, #14
 800a8a8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f022 0201 	bic.w	r2, r2, #1
 800a8b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8be:	f003 021c 	and.w	r2, r3, #28
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	fa01 f202 	lsl.w	r2, r1, r2
 800a8cc:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2201      	movs	r2, #1
 800a8d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2200      	movs	r2, #0
 800a8da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800a8de:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3714      	adds	r7, #20
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a8fe:	b2db      	uxtb	r3, r3
 800a900:	2b02      	cmp	r3, #2
 800a902:	d005      	beq.n	800a910 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2204      	movs	r2, #4
 800a908:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a90a:	2301      	movs	r3, #1
 800a90c:	73fb      	strb	r3, [r7, #15]
 800a90e:	e029      	b.n	800a964 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f022 020e 	bic.w	r2, r2, #14
 800a91e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	681a      	ldr	r2, [r3, #0]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f022 0201 	bic.w	r2, r2, #1
 800a92e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a934:	f003 021c 	and.w	r2, r3, #28
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a93c:	2101      	movs	r1, #1
 800a93e:	fa01 f202 	lsl.w	r2, r1, r2
 800a942:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2201      	movs	r2, #1
 800a948:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	4798      	blx	r3
    }
  }
  return status;
 800a964:	7bfb      	ldrb	r3, [r7, #15]
}
 800a966:	4618      	mov	r0, r3
 800a968:	3710      	adds	r7, #16
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}

0800a96e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a96e:	b580      	push	{r7, lr}
 800a970:	b084      	sub	sp, #16
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98a:	f003 031c 	and.w	r3, r3, #28
 800a98e:	2204      	movs	r2, #4
 800a990:	409a      	lsls	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	4013      	ands	r3, r2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d026      	beq.n	800a9e8 <HAL_DMA_IRQHandler+0x7a>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f003 0304 	and.w	r3, r3, #4
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d021      	beq.n	800a9e8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f003 0320 	and.w	r3, r3, #32
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d107      	bne.n	800a9c2 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0204 	bic.w	r2, r2, #4
 800a9c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9c6:	f003 021c 	and.w	r2, r3, #28
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ce:	2104      	movs	r1, #4
 800a9d0:	fa01 f202 	lsl.w	r2, r1, r2
 800a9d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d071      	beq.n	800aac2 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800a9e6:	e06c      	b.n	800aac2 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ec:	f003 031c 	and.w	r3, r3, #28
 800a9f0:	2202      	movs	r2, #2
 800a9f2:	409a      	lsls	r2, r3
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d02e      	beq.n	800aa5a <HAL_DMA_IRQHandler+0xec>
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0302 	and.w	r3, r3, #2
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d029      	beq.n	800aa5a <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0320 	and.w	r3, r3, #32
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10b      	bne.n	800aa2c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	681a      	ldr	r2, [r3, #0]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f022 020a 	bic.w	r2, r2, #10
 800aa22:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2201      	movs	r2, #1
 800aa28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa30:	f003 021c 	and.w	r2, r3, #28
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa38:	2102      	movs	r1, #2
 800aa3a:	fa01 f202 	lsl.w	r2, r1, r2
 800aa3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2200      	movs	r2, #0
 800aa44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d038      	beq.n	800aac2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800aa58:	e033      	b.n	800aac2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	f003 031c 	and.w	r3, r3, #28
 800aa62:	2208      	movs	r2, #8
 800aa64:	409a      	lsls	r2, r3
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d02a      	beq.n	800aac4 <HAL_DMA_IRQHandler+0x156>
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	f003 0308 	and.w	r3, r3, #8
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d025      	beq.n	800aac4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 020e 	bic.w	r2, r2, #14
 800aa86:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa8c:	f003 021c 	and.w	r2, r3, #28
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa94:	2101      	movs	r1, #1
 800aa96:	fa01 f202 	lsl.w	r2, r1, r2
 800aa9a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2200      	movs	r2, #0
 800aaae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d004      	beq.n	800aac4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aac2:	bf00      	nop
 800aac4:	bf00      	nop
}
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aacc:	b480      	push	{r7}
 800aace:	b085      	sub	sp, #20
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	60f8      	str	r0, [r7, #12]
 800aad4:	60b9      	str	r1, [r7, #8]
 800aad6:	607a      	str	r2, [r7, #4]
 800aad8:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aade:	f003 021c 	and.w	r2, r3, #28
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae6:	2101      	movs	r1, #1
 800aae8:	fa01 f202 	lsl.w	r2, r1, r2
 800aaec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	2b10      	cmp	r3, #16
 800aafc:	d108      	bne.n	800ab10 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800ab0e:	e007      	b.n	800ab20 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	68ba      	ldr	r2, [r7, #8]
 800ab16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	687a      	ldr	r2, [r7, #4]
 800ab1e:	60da      	str	r2, [r3, #12]
}
 800ab20:	bf00      	nop
 800ab22:	3714      	adds	r7, #20
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b086      	sub	sp, #24
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	60f8      	str	r0, [r7, #12]
 800ab34:	60b9      	str	r1, [r7, #8]
 800ab36:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab3e:	4b2f      	ldr	r3, [pc, #188]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800ab40:	781b      	ldrb	r3, [r3, #0]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <HAL_FLASH_Program+0x1e>
 800ab46:	2302      	movs	r3, #2
 800ab48:	e053      	b.n	800abf2 <HAL_FLASH_Program+0xc6>
 800ab4a:	4b2c      	ldr	r3, [pc, #176]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab50:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab54:	f000 f888 	bl	800ac68 <FLASH_WaitForLastOperation>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d143      	bne.n	800abea <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ab62:	4b26      	ldr	r3, [pc, #152]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800ab64:	2200      	movs	r2, #0
 800ab66:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800ab68:	4b25      	ldr	r3, [pc, #148]	; (800ac00 <HAL_FLASH_Program+0xd4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d009      	beq.n	800ab88 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800ab74:	4b22      	ldr	r3, [pc, #136]	; (800ac00 <HAL_FLASH_Program+0xd4>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4a21      	ldr	r2, [pc, #132]	; (800ac00 <HAL_FLASH_Program+0xd4>)
 800ab7a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab7e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ab80:	4b1e      	ldr	r3, [pc, #120]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800ab82:	2202      	movs	r2, #2
 800ab84:	771a      	strb	r2, [r3, #28]
 800ab86:	e002      	b.n	800ab8e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ab88:	4b1c      	ldr	r3, [pc, #112]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d107      	bne.n	800aba4 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800ab94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab98:	68b8      	ldr	r0, [r7, #8]
 800ab9a:	f000 f8bd 	bl	800ad18 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	613b      	str	r3, [r7, #16]
 800aba2:	e010      	b.n	800abc6 <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b01      	cmp	r3, #1
 800aba8:	d002      	beq.n	800abb0 <HAL_FLASH_Program+0x84>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	2b02      	cmp	r3, #2
 800abae:	d10a      	bne.n	800abc6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	4619      	mov	r1, r3
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	f000 f8d5 	bl	800ad64 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d102      	bne.n	800abc6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800abc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800abc4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800abc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800abca:	f000 f84d 	bl	800ac68 <FLASH_WaitForLastOperation>
 800abce:	4603      	mov	r3, r0
 800abd0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800abd2:	693b      	ldr	r3, [r7, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d006      	beq.n	800abe6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <HAL_FLASH_Program+0xd4>)
 800abda:	695a      	ldr	r2, [r3, #20]
 800abdc:	693b      	ldr	r3, [r7, #16]
 800abde:	43db      	mvns	r3, r3
 800abe0:	4907      	ldr	r1, [pc, #28]	; (800ac00 <HAL_FLASH_Program+0xd4>)
 800abe2:	4013      	ands	r3, r2
 800abe4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800abe6:	f000 f9d5 	bl	800af94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800abea:	4b04      	ldr	r3, [pc, #16]	; (800abfc <HAL_FLASH_Program+0xd0>)
 800abec:	2200      	movs	r2, #0
 800abee:	701a      	strb	r2, [r3, #0]

  return status;
 800abf0:	7dfb      	ldrb	r3, [r7, #23]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3718      	adds	r7, #24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}
 800abfa:	bf00      	nop
 800abfc:	2000078c 	.word	0x2000078c
 800ac00:	40022000 	.word	0x40022000

0800ac04 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ac0e:	4b0b      	ldr	r3, [pc, #44]	; (800ac3c <HAL_FLASH_Unlock+0x38>)
 800ac10:	695b      	ldr	r3, [r3, #20]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	da0b      	bge.n	800ac2e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ac16:	4b09      	ldr	r3, [pc, #36]	; (800ac3c <HAL_FLASH_Unlock+0x38>)
 800ac18:	4a09      	ldr	r2, [pc, #36]	; (800ac40 <HAL_FLASH_Unlock+0x3c>)
 800ac1a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ac1c:	4b07      	ldr	r3, [pc, #28]	; (800ac3c <HAL_FLASH_Unlock+0x38>)
 800ac1e:	4a09      	ldr	r2, [pc, #36]	; (800ac44 <HAL_FLASH_Unlock+0x40>)
 800ac20:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800ac22:	4b06      	ldr	r3, [pc, #24]	; (800ac3c <HAL_FLASH_Unlock+0x38>)
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	da01      	bge.n	800ac2e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	40022000 	.word	0x40022000
 800ac40:	45670123 	.word	0x45670123
 800ac44:	cdef89ab 	.word	0xcdef89ab

0800ac48 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800ac4c:	4b05      	ldr	r3, [pc, #20]	; (800ac64 <HAL_FLASH_Lock+0x1c>)
 800ac4e:	695b      	ldr	r3, [r3, #20]
 800ac50:	4a04      	ldr	r2, [pc, #16]	; (800ac64 <HAL_FLASH_Lock+0x1c>)
 800ac52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac56:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800ac58:	2300      	movs	r3, #0
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	40022000 	.word	0x40022000

0800ac68 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b084      	sub	sp, #16
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800ac70:	f7ff fba4 	bl	800a3bc <HAL_GetTick>
 800ac74:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ac76:	e00d      	b.n	800ac94 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7e:	d009      	beq.n	800ac94 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800ac80:	f7ff fb9c 	bl	800a3bc <HAL_GetTick>
 800ac84:	4602      	mov	r2, r0
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	1ad3      	subs	r3, r2, r3
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d801      	bhi.n	800ac94 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	e036      	b.n	800ad02 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800ac94:	4b1d      	ldr	r3, [pc, #116]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800ac96:	691b      	ldr	r3, [r3, #16]
 800ac98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1eb      	bne.n	800ac78 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800aca0:	4b1a      	ldr	r3, [pc, #104]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800aca2:	691a      	ldr	r2, [r3, #16]
 800aca4:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <FLASH_WaitForLastOperation+0xa8>)
 800aca6:	4013      	ands	r3, r2
 800aca8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800acaa:	68bb      	ldr	r3, [r7, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d01e      	beq.n	800acee <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800acb0:	4b18      	ldr	r3, [pc, #96]	; (800ad14 <FLASH_WaitForLastOperation+0xac>)
 800acb2:	685a      	ldr	r2, [r3, #4]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	4a16      	ldr	r2, [pc, #88]	; (800ad14 <FLASH_WaitForLastOperation+0xac>)
 800acba:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d007      	beq.n	800acd6 <FLASH_WaitForLastOperation+0x6e>
 800acc6:	4b11      	ldr	r3, [pc, #68]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800acc8:	699a      	ldr	r2, [r3, #24]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800acd0:	490e      	ldr	r1, [pc, #56]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800acd2:	4313      	orrs	r3, r2
 800acd4:	618b      	str	r3, [r1, #24]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d004      	beq.n	800acea <FLASH_WaitForLastOperation+0x82>
 800ace0:	4a0a      	ldr	r2, [pc, #40]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800ace8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800acea:	2301      	movs	r3, #1
 800acec:	e009      	b.n	800ad02 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800acee:	4b07      	ldr	r3, [pc, #28]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f003 0301 	and.w	r3, r3, #1
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d002      	beq.n	800ad00 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800acfa:	4b04      	ldr	r3, [pc, #16]	; (800ad0c <FLASH_WaitForLastOperation+0xa4>)
 800acfc:	2201      	movs	r2, #1
 800acfe:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800ad00:	2300      	movs	r3, #0
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	3710      	adds	r7, #16
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	40022000 	.word	0x40022000
 800ad10:	0002c3fa 	.word	0x0002c3fa
 800ad14:	2000078c 	.word	0x2000078c

0800ad18 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b085      	sub	sp, #20
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	60f8      	str	r0, [r7, #12]
 800ad20:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800ad24:	4b0e      	ldr	r3, [pc, #56]	; (800ad60 <FLASH_Program_DoubleWord+0x48>)
 800ad26:	695b      	ldr	r3, [r3, #20]
 800ad28:	4a0d      	ldr	r2, [pc, #52]	; (800ad60 <FLASH_Program_DoubleWord+0x48>)
 800ad2a:	f043 0301 	orr.w	r3, r3, #1
 800ad2e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ad36:	f3bf 8f6f 	isb	sy
}
 800ad3a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800ad3c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad40:	f04f 0200 	mov.w	r2, #0
 800ad44:	f04f 0300 	mov.w	r3, #0
 800ad48:	000a      	movs	r2, r1
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	68f9      	ldr	r1, [r7, #12]
 800ad4e:	3104      	adds	r1, #4
 800ad50:	4613      	mov	r3, r2
 800ad52:	600b      	str	r3, [r1, #0]
}
 800ad54:	bf00      	nop
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr
 800ad60:	40022000 	.word	0x40022000

0800ad64 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b089      	sub	sp, #36	; 0x24
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800ad6e:	2340      	movs	r3, #64	; 0x40
 800ad70:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800ad7a:	4b14      	ldr	r3, [pc, #80]	; (800adcc <FLASH_Program_Fast+0x68>)
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	4a13      	ldr	r2, [pc, #76]	; (800adcc <FLASH_Program_Fast+0x68>)
 800ad80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ad84:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ad86:	f3ef 8310 	mrs	r3, PRIMASK
 800ad8a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ad8c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800ad8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad90:	b672      	cpsid	i
}
 800ad92:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	3304      	adds	r3, #4
 800ada0:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	3304      	adds	r3, #4
 800ada6:	617b      	str	r3, [r7, #20]
    row_index--;
 800ada8:	7ffb      	ldrb	r3, [r7, #31]
 800adaa:	3b01      	subs	r3, #1
 800adac:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800adae:	7ffb      	ldrb	r3, [r7, #31]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1ef      	bne.n	800ad94 <FLASH_Program_Fast+0x30>
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	f383 8810 	msr	PRIMASK, r3
}
 800adbe:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800adc0:	bf00      	nop
 800adc2:	3724      	adds	r7, #36	; 0x24
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr
 800adcc:	40022000 	.word	0x40022000

0800add0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800adda:	4b4b      	ldr	r3, [pc, #300]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	2b01      	cmp	r3, #1
 800ade0:	d101      	bne.n	800ade6 <HAL_FLASHEx_Erase+0x16>
 800ade2:	2302      	movs	r3, #2
 800ade4:	e08b      	b.n	800aefe <HAL_FLASHEx_Erase+0x12e>
 800ade6:	4b48      	ldr	r3, [pc, #288]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ade8:	2201      	movs	r2, #1
 800adea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800adec:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adf0:	f7ff ff3a 	bl	800ac68 <FLASH_WaitForLastOperation>
 800adf4:	4603      	mov	r3, r0
 800adf6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d17b      	bne.n	800aef6 <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800adfe:	4b42      	ldr	r3, [pc, #264]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ae00:	2200      	movs	r2, #0
 800ae02:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800ae04:	4b41      	ldr	r3, [pc, #260]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d019      	beq.n	800ae44 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ae10:	4b3e      	ldr	r3, [pc, #248]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	4a3d      	ldr	r2, [pc, #244]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae16:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ae1a:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800ae1c:	4b3b      	ldr	r3, [pc, #236]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d009      	beq.n	800ae3c <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800ae28:	4b38      	ldr	r3, [pc, #224]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4a37      	ldr	r2, [pc, #220]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae32:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800ae34:	4b34      	ldr	r3, [pc, #208]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ae36:	2203      	movs	r2, #3
 800ae38:	771a      	strb	r2, [r3, #28]
 800ae3a:	e016      	b.n	800ae6a <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800ae3c:	4b32      	ldr	r3, [pc, #200]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ae3e:	2201      	movs	r2, #1
 800ae40:	771a      	strb	r2, [r3, #28]
 800ae42:	e012      	b.n	800ae6a <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800ae44:	4b31      	ldr	r3, [pc, #196]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d009      	beq.n	800ae64 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800ae50:	4b2e      	ldr	r3, [pc, #184]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4a2d      	ldr	r2, [pc, #180]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae5a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800ae5c:	4b2a      	ldr	r3, [pc, #168]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ae5e:	2202      	movs	r2, #2
 800ae60:	771a      	strb	r2, [r3, #28]
 800ae62:	e002      	b.n	800ae6a <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800ae64:	4b28      	ldr	r3, [pc, #160]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800ae66:	2200      	movs	r2, #0
 800ae68:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d111      	bne.n	800ae96 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f000 f84a 	bl	800af10 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae7c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae80:	f7ff fef2 	bl	800ac68 <FLASH_WaitForLastOperation>
 800ae84:	4603      	mov	r3, r0
 800ae86:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800ae88:	4b20      	ldr	r3, [pc, #128]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	4a1f      	ldr	r2, [pc, #124]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800ae8e:	f023 0304 	bic.w	r3, r3, #4
 800ae92:	6153      	str	r3, [r2, #20]
 800ae94:	e02d      	b.n	800aef2 <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	f04f 32ff 	mov.w	r2, #4294967295
 800ae9c:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	60bb      	str	r3, [r7, #8]
 800aea4:	e01d      	b.n	800aee2 <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	68b8      	ldr	r0, [r7, #8]
 800aeae:	f000 f84d 	bl	800af4c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aeb2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aeb6:	f7ff fed7 	bl	800ac68 <FLASH_WaitForLastOperation>
 800aeba:	4603      	mov	r3, r0
 800aebc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800aebe:	4b13      	ldr	r3, [pc, #76]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800aec0:	695b      	ldr	r3, [r3, #20]
 800aec2:	4a12      	ldr	r2, [pc, #72]	; (800af0c <HAL_FLASHEx_Erase+0x13c>)
 800aec4:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800aec8:	f023 0302 	bic.w	r3, r3, #2
 800aecc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800aece:	7bfb      	ldrb	r3, [r7, #15]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d003      	beq.n	800aedc <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	601a      	str	r2, [r3, #0]
          break;
 800aeda:	e00a      	b.n	800aef2 <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	3301      	adds	r3, #1
 800aee0:	60bb      	str	r3, [r7, #8]
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	4413      	add	r3, r2
 800aeec:	68ba      	ldr	r2, [r7, #8]
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d3d9      	bcc.n	800aea6 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800aef2:	f000 f84f 	bl	800af94 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aef6:	4b04      	ldr	r3, [pc, #16]	; (800af08 <HAL_FLASHEx_Erase+0x138>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]

  return status;
 800aefc:	7bfb      	ldrb	r3, [r7, #15]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	2000078c 	.word	0x2000078c
 800af0c:	40022000 	.word	0x40022000

0800af10 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800af10:	b480      	push	{r7}
 800af12:	b083      	sub	sp, #12
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f003 0301 	and.w	r3, r3, #1
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800af22:	4b09      	ldr	r3, [pc, #36]	; (800af48 <FLASH_MassErase+0x38>)
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	4a08      	ldr	r2, [pc, #32]	; (800af48 <FLASH_MassErase+0x38>)
 800af28:	f043 0304 	orr.w	r3, r3, #4
 800af2c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800af2e:	4b06      	ldr	r3, [pc, #24]	; (800af48 <FLASH_MassErase+0x38>)
 800af30:	695b      	ldr	r3, [r3, #20]
 800af32:	4a05      	ldr	r2, [pc, #20]	; (800af48 <FLASH_MassErase+0x38>)
 800af34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af38:	6153      	str	r3, [r2, #20]
}
 800af3a:	bf00      	nop
 800af3c:	370c      	adds	r7, #12
 800af3e:	46bd      	mov	sp, r7
 800af40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af44:	4770      	bx	lr
 800af46:	bf00      	nop
 800af48:	40022000 	.word	0x40022000

0800af4c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800af56:	4b0e      	ldr	r3, [pc, #56]	; (800af90 <FLASH_PageErase+0x44>)
 800af58:	695b      	ldr	r3, [r3, #20]
 800af5a:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	00db      	lsls	r3, r3, #3
 800af62:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800af66:	490a      	ldr	r1, [pc, #40]	; (800af90 <FLASH_PageErase+0x44>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800af6c:	4b08      	ldr	r3, [pc, #32]	; (800af90 <FLASH_PageErase+0x44>)
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	4a07      	ldr	r2, [pc, #28]	; (800af90 <FLASH_PageErase+0x44>)
 800af72:	f043 0302 	orr.w	r3, r3, #2
 800af76:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800af78:	4b05      	ldr	r3, [pc, #20]	; (800af90 <FLASH_PageErase+0x44>)
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	4a04      	ldr	r2, [pc, #16]	; (800af90 <FLASH_PageErase+0x44>)
 800af7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af82:	6153      	str	r3, [r2, #20]
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	40022000 	.word	0x40022000

0800af94 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800af9a:	4b1e      	ldr	r3, [pc, #120]	; (800b014 <FLASH_FlushCaches+0x80>)
 800af9c:	7f1b      	ldrb	r3, [r3, #28]
 800af9e:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800afa0:	79fb      	ldrb	r3, [r7, #7]
 800afa2:	2b01      	cmp	r3, #1
 800afa4:	d002      	beq.n	800afac <FLASH_FlushCaches+0x18>
 800afa6:	79fb      	ldrb	r3, [r7, #7]
 800afa8:	2b03      	cmp	r3, #3
 800afaa:	d111      	bne.n	800afd0 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800afac:	4b1a      	ldr	r3, [pc, #104]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	4a19      	ldr	r2, [pc, #100]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afb6:	6013      	str	r3, [r2, #0]
 800afb8:	4b17      	ldr	r3, [pc, #92]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4a16      	ldr	r2, [pc, #88]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afbe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afc2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afc4:	4b14      	ldr	r3, [pc, #80]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a13      	ldr	r2, [pc, #76]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800afce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800afd0:	79fb      	ldrb	r3, [r7, #7]
 800afd2:	2b02      	cmp	r3, #2
 800afd4:	d002      	beq.n	800afdc <FLASH_FlushCaches+0x48>
 800afd6:	79fb      	ldrb	r3, [r7, #7]
 800afd8:	2b03      	cmp	r3, #3
 800afda:	d111      	bne.n	800b000 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800afdc:	4b0e      	ldr	r3, [pc, #56]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a0d      	ldr	r2, [pc, #52]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afe2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	4b0b      	ldr	r3, [pc, #44]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a0a      	ldr	r2, [pc, #40]	; (800b018 <FLASH_FlushCaches+0x84>)
 800afee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aff2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800aff4:	4b08      	ldr	r3, [pc, #32]	; (800b018 <FLASH_FlushCaches+0x84>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a07      	ldr	r2, [pc, #28]	; (800b018 <FLASH_FlushCaches+0x84>)
 800affa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800affe:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800b000:	4b04      	ldr	r3, [pc, #16]	; (800b014 <FLASH_FlushCaches+0x80>)
 800b002:	2200      	movs	r2, #0
 800b004:	771a      	strb	r2, [r3, #28]
}
 800b006:	bf00      	nop
 800b008:	370c      	adds	r7, #12
 800b00a:	46bd      	mov	sp, r7
 800b00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b010:	4770      	bx	lr
 800b012:	bf00      	nop
 800b014:	2000078c 	.word	0x2000078c
 800b018:	40022000 	.word	0x40022000

0800b01c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b087      	sub	sp, #28
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b02a:	e154      	b.n	800b2d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681a      	ldr	r2, [r3, #0]
 800b030:	2101      	movs	r1, #1
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	fa01 f303 	lsl.w	r3, r1, r3
 800b038:	4013      	ands	r3, r2
 800b03a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	f000 8146 	beq.w	800b2d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d00b      	beq.n	800b064 <HAL_GPIO_Init+0x48>
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	2b02      	cmp	r3, #2
 800b052:	d007      	beq.n	800b064 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b058:	2b11      	cmp	r3, #17
 800b05a:	d003      	beq.n	800b064 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b05c:	683b      	ldr	r3, [r7, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b12      	cmp	r3, #18
 800b062:	d130      	bne.n	800b0c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b06a:	697b      	ldr	r3, [r7, #20]
 800b06c:	005b      	lsls	r3, r3, #1
 800b06e:	2203      	movs	r2, #3
 800b070:	fa02 f303 	lsl.w	r3, r2, r3
 800b074:	43db      	mvns	r3, r3
 800b076:	693a      	ldr	r2, [r7, #16]
 800b078:	4013      	ands	r3, r2
 800b07a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	005b      	lsls	r3, r3, #1
 800b084:	fa02 f303 	lsl.w	r3, r2, r3
 800b088:	693a      	ldr	r2, [r7, #16]
 800b08a:	4313      	orrs	r3, r2
 800b08c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800b09a:	2201      	movs	r2, #1
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a2:	43db      	mvns	r3, r3
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	4013      	ands	r3, r2
 800b0a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	091b      	lsrs	r3, r3, #4
 800b0b0:	f003 0201 	and.w	r2, r3, #1
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ba:	693a      	ldr	r2, [r7, #16]
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	693a      	ldr	r2, [r7, #16]
 800b0c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	68db      	ldr	r3, [r3, #12]
 800b0ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b0cc:	697b      	ldr	r3, [r7, #20]
 800b0ce:	005b      	lsls	r3, r3, #1
 800b0d0:	2203      	movs	r2, #3
 800b0d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0d6:	43db      	mvns	r3, r3
 800b0d8:	693a      	ldr	r2, [r7, #16]
 800b0da:	4013      	ands	r3, r2
 800b0dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	689a      	ldr	r2, [r3, #8]
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	005b      	lsls	r3, r3, #1
 800b0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ea:	693a      	ldr	r2, [r7, #16]
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0xea>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2b12      	cmp	r3, #18
 800b104:	d123      	bne.n	800b14e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	08da      	lsrs	r2, r3, #3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3208      	adds	r2, #8
 800b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800b114:	697b      	ldr	r3, [r7, #20]
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	220f      	movs	r2, #15
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	693a      	ldr	r2, [r7, #16]
 800b126:	4013      	ands	r3, r2
 800b128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	693a      	ldr	r2, [r7, #16]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	08da      	lsrs	r2, r3, #3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3208      	adds	r2, #8
 800b148:	6939      	ldr	r1, [r7, #16]
 800b14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	2203      	movs	r2, #3
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	43db      	mvns	r3, r3
 800b160:	693a      	ldr	r2, [r7, #16]
 800b162:	4013      	ands	r3, r2
 800b164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f003 0203 	and.w	r2, r3, #3
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	693a      	ldr	r2, [r7, #16]
 800b178:	4313      	orrs	r3, r2
 800b17a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	693a      	ldr	r2, [r7, #16]
 800b180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 80a0 	beq.w	800b2d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b190:	4b58      	ldr	r3, [pc, #352]	; (800b2f4 <HAL_GPIO_Init+0x2d8>)
 800b192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b194:	4a57      	ldr	r2, [pc, #348]	; (800b2f4 <HAL_GPIO_Init+0x2d8>)
 800b196:	f043 0301 	orr.w	r3, r3, #1
 800b19a:	6613      	str	r3, [r2, #96]	; 0x60
 800b19c:	4b55      	ldr	r3, [pc, #340]	; (800b2f4 <HAL_GPIO_Init+0x2d8>)
 800b19e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1a0:	f003 0301 	and.w	r3, r3, #1
 800b1a4:	60bb      	str	r3, [r7, #8]
 800b1a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800b1a8:	4a53      	ldr	r2, [pc, #332]	; (800b2f8 <HAL_GPIO_Init+0x2dc>)
 800b1aa:	697b      	ldr	r3, [r7, #20]
 800b1ac:	089b      	lsrs	r3, r3, #2
 800b1ae:	3302      	adds	r3, #2
 800b1b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f003 0303 	and.w	r3, r3, #3
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	220f      	movs	r2, #15
 800b1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c4:	43db      	mvns	r3, r3
 800b1c6:	693a      	ldr	r2, [r7, #16]
 800b1c8:	4013      	ands	r3, r2
 800b1ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b1d2:	d019      	beq.n	800b208 <HAL_GPIO_Init+0x1ec>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a49      	ldr	r2, [pc, #292]	; (800b2fc <HAL_GPIO_Init+0x2e0>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d013      	beq.n	800b204 <HAL_GPIO_Init+0x1e8>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a48      	ldr	r2, [pc, #288]	; (800b300 <HAL_GPIO_Init+0x2e4>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d00d      	beq.n	800b200 <HAL_GPIO_Init+0x1e4>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4a47      	ldr	r2, [pc, #284]	; (800b304 <HAL_GPIO_Init+0x2e8>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d007      	beq.n	800b1fc <HAL_GPIO_Init+0x1e0>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a46      	ldr	r2, [pc, #280]	; (800b308 <HAL_GPIO_Init+0x2ec>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d101      	bne.n	800b1f8 <HAL_GPIO_Init+0x1dc>
 800b1f4:	2304      	movs	r3, #4
 800b1f6:	e008      	b.n	800b20a <HAL_GPIO_Init+0x1ee>
 800b1f8:	2307      	movs	r3, #7
 800b1fa:	e006      	b.n	800b20a <HAL_GPIO_Init+0x1ee>
 800b1fc:	2303      	movs	r3, #3
 800b1fe:	e004      	b.n	800b20a <HAL_GPIO_Init+0x1ee>
 800b200:	2302      	movs	r3, #2
 800b202:	e002      	b.n	800b20a <HAL_GPIO_Init+0x1ee>
 800b204:	2301      	movs	r3, #1
 800b206:	e000      	b.n	800b20a <HAL_GPIO_Init+0x1ee>
 800b208:	2300      	movs	r3, #0
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	f002 0203 	and.w	r2, r2, #3
 800b210:	0092      	lsls	r2, r2, #2
 800b212:	4093      	lsls	r3, r2
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	4313      	orrs	r3, r2
 800b218:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800b21a:	4937      	ldr	r1, [pc, #220]	; (800b2f8 <HAL_GPIO_Init+0x2dc>)
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	089b      	lsrs	r3, r3, #2
 800b220:	3302      	adds	r3, #2
 800b222:	693a      	ldr	r2, [r7, #16]
 800b224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800b228:	4b38      	ldr	r3, [pc, #224]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	43db      	mvns	r3, r3
 800b232:	693a      	ldr	r2, [r7, #16]
 800b234:	4013      	ands	r3, r2
 800b236:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d003      	beq.n	800b24c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800b244:	693a      	ldr	r2, [r7, #16]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	4313      	orrs	r3, r2
 800b24a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800b24c:	4a2f      	ldr	r2, [pc, #188]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800b252:	4b2e      	ldr	r3, [pc, #184]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	43db      	mvns	r3, r3
 800b25c:	693a      	ldr	r2, [r7, #16]
 800b25e:	4013      	ands	r3, r2
 800b260:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d003      	beq.n	800b276 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800b26e:	693a      	ldr	r2, [r7, #16]
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4313      	orrs	r3, r2
 800b274:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800b276:	4a25      	ldr	r2, [pc, #148]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800b27c:	4b23      	ldr	r3, [pc, #140]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	43db      	mvns	r3, r3
 800b286:	693a      	ldr	r2, [r7, #16]
 800b288:	4013      	ands	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d003      	beq.n	800b2a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800b298:	693a      	ldr	r2, [r7, #16]
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800b2a0:	4a1a      	ldr	r2, [pc, #104]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800b2a6:	4b19      	ldr	r3, [pc, #100]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b2a8:	68db      	ldr	r3, [r3, #12]
 800b2aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	43db      	mvns	r3, r3
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	4013      	ands	r3, r2
 800b2b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d003      	beq.n	800b2ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4313      	orrs	r3, r2
 800b2c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800b2ca:	4a10      	ldr	r2, [pc, #64]	; (800b30c <HAL_GPIO_Init+0x2f0>)
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	fa22 f303 	lsr.w	r3, r2, r3
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f47f aea3 	bne.w	800b02c <HAL_GPIO_Init+0x10>
  }
}
 800b2e6:	bf00      	nop
 800b2e8:	bf00      	nop
 800b2ea:	371c      	adds	r7, #28
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr
 800b2f4:	40021000 	.word	0x40021000
 800b2f8:	40010000 	.word	0x40010000
 800b2fc:	48000400 	.word	0x48000400
 800b300:	48000800 	.word	0x48000800
 800b304:	48000c00 	.word	0x48000c00
 800b308:	48001000 	.word	0x48001000
 800b30c:	40010400 	.word	0x40010400

0800b310 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b310:	b480      	push	{r7}
 800b312:	b087      	sub	sp, #28
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800b31a:	2300      	movs	r3, #0
 800b31c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800b31e:	e0b7      	b.n	800b490 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800b320:	2201      	movs	r2, #1
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	fa02 f303 	lsl.w	r3, r2, r3
 800b328:	683a      	ldr	r2, [r7, #0]
 800b32a:	4013      	ands	r3, r2
 800b32c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	f000 80aa 	beq.w	800b48a <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800b336:	4a5d      	ldr	r2, [pc, #372]	; (800b4ac <HAL_GPIO_DeInit+0x19c>)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	089b      	lsrs	r3, r3, #2
 800b33c:	3302      	adds	r3, #2
 800b33e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b342:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	009b      	lsls	r3, r3, #2
 800b34c:	220f      	movs	r2, #15
 800b34e:	fa02 f303 	lsl.w	r3, r2, r3
 800b352:	68fa      	ldr	r2, [r7, #12]
 800b354:	4013      	ands	r3, r2
 800b356:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800b35e:	d019      	beq.n	800b394 <HAL_GPIO_DeInit+0x84>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a53      	ldr	r2, [pc, #332]	; (800b4b0 <HAL_GPIO_DeInit+0x1a0>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d013      	beq.n	800b390 <HAL_GPIO_DeInit+0x80>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a52      	ldr	r2, [pc, #328]	; (800b4b4 <HAL_GPIO_DeInit+0x1a4>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d00d      	beq.n	800b38c <HAL_GPIO_DeInit+0x7c>
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	4a51      	ldr	r2, [pc, #324]	; (800b4b8 <HAL_GPIO_DeInit+0x1a8>)
 800b374:	4293      	cmp	r3, r2
 800b376:	d007      	beq.n	800b388 <HAL_GPIO_DeInit+0x78>
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	4a50      	ldr	r2, [pc, #320]	; (800b4bc <HAL_GPIO_DeInit+0x1ac>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d101      	bne.n	800b384 <HAL_GPIO_DeInit+0x74>
 800b380:	2304      	movs	r3, #4
 800b382:	e008      	b.n	800b396 <HAL_GPIO_DeInit+0x86>
 800b384:	2307      	movs	r3, #7
 800b386:	e006      	b.n	800b396 <HAL_GPIO_DeInit+0x86>
 800b388:	2303      	movs	r3, #3
 800b38a:	e004      	b.n	800b396 <HAL_GPIO_DeInit+0x86>
 800b38c:	2302      	movs	r3, #2
 800b38e:	e002      	b.n	800b396 <HAL_GPIO_DeInit+0x86>
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <HAL_GPIO_DeInit+0x86>
 800b394:	2300      	movs	r3, #0
 800b396:	697a      	ldr	r2, [r7, #20]
 800b398:	f002 0203 	and.w	r2, r2, #3
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	4093      	lsls	r3, r2
 800b3a0:	68fa      	ldr	r2, [r7, #12]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d132      	bne.n	800b40c <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800b3a6:	4b46      	ldr	r3, [pc, #280]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	43db      	mvns	r3, r3
 800b3ae:	4944      	ldr	r1, [pc, #272]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800b3b4:	4b42      	ldr	r3, [pc, #264]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3b6:	685a      	ldr	r2, [r3, #4]
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	43db      	mvns	r3, r3
 800b3bc:	4940      	ldr	r1, [pc, #256]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3be:	4013      	ands	r3, r2
 800b3c0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800b3c2:	4b3f      	ldr	r3, [pc, #252]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	493d      	ldr	r1, [pc, #244]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3cc:	4013      	ands	r3, r2
 800b3ce:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800b3d0:	4b3b      	ldr	r3, [pc, #236]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3d2:	68da      	ldr	r2, [r3, #12]
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	43db      	mvns	r3, r3
 800b3d8:	4939      	ldr	r1, [pc, #228]	; (800b4c0 <HAL_GPIO_DeInit+0x1b0>)
 800b3da:	4013      	ands	r3, r2
 800b3dc:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	f003 0303 	and.w	r3, r3, #3
 800b3e4:	009b      	lsls	r3, r3, #2
 800b3e6:	220f      	movs	r2, #15
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800b3ee:	4a2f      	ldr	r2, [pc, #188]	; (800b4ac <HAL_GPIO_DeInit+0x19c>)
 800b3f0:	697b      	ldr	r3, [r7, #20]
 800b3f2:	089b      	lsrs	r3, r3, #2
 800b3f4:	3302      	adds	r3, #2
 800b3f6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	43da      	mvns	r2, r3
 800b3fe:	482b      	ldr	r0, [pc, #172]	; (800b4ac <HAL_GPIO_DeInit+0x19c>)
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	089b      	lsrs	r3, r3, #2
 800b404:	400a      	ands	r2, r1
 800b406:	3302      	adds	r3, #2
 800b408:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681a      	ldr	r2, [r3, #0]
 800b410:	697b      	ldr	r3, [r7, #20]
 800b412:	005b      	lsls	r3, r3, #1
 800b414:	2103      	movs	r1, #3
 800b416:	fa01 f303 	lsl.w	r3, r1, r3
 800b41a:	431a      	orrs	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	08da      	lsrs	r2, r3, #3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	3208      	adds	r2, #8
 800b428:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	220f      	movs	r2, #15
 800b436:	fa02 f303 	lsl.w	r3, r2, r3
 800b43a:	43db      	mvns	r3, r3
 800b43c:	697a      	ldr	r2, [r7, #20]
 800b43e:	08d2      	lsrs	r2, r2, #3
 800b440:	4019      	ands	r1, r3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3208      	adds	r2, #8
 800b446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	689a      	ldr	r2, [r3, #8]
 800b44e:	697b      	ldr	r3, [r7, #20]
 800b450:	005b      	lsls	r3, r3, #1
 800b452:	2103      	movs	r1, #3
 800b454:	fa01 f303 	lsl.w	r3, r1, r3
 800b458:	43db      	mvns	r3, r3
 800b45a:	401a      	ands	r2, r3
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	685a      	ldr	r2, [r3, #4]
 800b464:	2101      	movs	r1, #1
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	fa01 f303 	lsl.w	r3, r1, r3
 800b46c:	43db      	mvns	r3, r3
 800b46e:	401a      	ands	r2, r3
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	68da      	ldr	r2, [r3, #12]
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	2103      	movs	r1, #3
 800b47e:	fa01 f303 	lsl.w	r3, r1, r3
 800b482:	43db      	mvns	r3, r3
 800b484:	401a      	ands	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	3301      	adds	r3, #1
 800b48e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800b490:	683a      	ldr	r2, [r7, #0]
 800b492:	697b      	ldr	r3, [r7, #20]
 800b494:	fa22 f303 	lsr.w	r3, r2, r3
 800b498:	2b00      	cmp	r3, #0
 800b49a:	f47f af41 	bne.w	800b320 <HAL_GPIO_DeInit+0x10>
  }
}
 800b49e:	bf00      	nop
 800b4a0:	bf00      	nop
 800b4a2:	371c      	adds	r7, #28
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	40010000 	.word	0x40010000
 800b4b0:	48000400 	.word	0x48000400
 800b4b4:	48000800 	.word	0x48000800
 800b4b8:	48000c00 	.word	0x48000c00
 800b4bc:	48001000 	.word	0x48001000
 800b4c0:	40010400 	.word	0x40010400

0800b4c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b4c4:	b480      	push	{r7}
 800b4c6:	b085      	sub	sp, #20
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	460b      	mov	r3, r1
 800b4ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	691a      	ldr	r2, [r3, #16]
 800b4d4:	887b      	ldrh	r3, [r7, #2]
 800b4d6:	4013      	ands	r3, r2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d002      	beq.n	800b4e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b4dc:	2301      	movs	r3, #1
 800b4de:	73fb      	strb	r3, [r7, #15]
 800b4e0:	e001      	b.n	800b4e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr

0800b4f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b083      	sub	sp, #12
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	807b      	strh	r3, [r7, #2]
 800b500:	4613      	mov	r3, r2
 800b502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b504:	787b      	ldrb	r3, [r7, #1]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d003      	beq.n	800b512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800b50a:	887a      	ldrh	r2, [r7, #2]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800b510:	e002      	b.n	800b518 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800b512:	887a      	ldrh	r2, [r7, #2]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b082      	sub	sp, #8
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d101      	bne.n	800b536 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b532:	2301      	movs	r3, #1
 800b534:	e081      	b.n	800b63a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d106      	bne.n	800b550 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f7fd fad8 	bl	8008b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2224      	movs	r2, #36	; 0x24
 800b554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	f022 0201 	bic.w	r2, r2, #1
 800b566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	685a      	ldr	r2, [r3, #4]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800b574:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	689a      	ldr	r2, [r3, #8]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b584:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d107      	bne.n	800b59e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	689a      	ldr	r2, [r3, #8]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b59a:	609a      	str	r2, [r3, #8]
 800b59c:	e006      	b.n	800b5ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	689a      	ldr	r2, [r3, #8]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800b5aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	68db      	ldr	r3, [r3, #12]
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d104      	bne.n	800b5be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	6812      	ldr	r2, [r2, #0]
 800b5c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b5cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	68da      	ldr	r2, [r3, #12]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b5e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	691a      	ldr	r2, [r3, #16]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	695b      	ldr	r3, [r3, #20]
 800b5ea:	ea42 0103 	orr.w	r1, r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	699b      	ldr	r3, [r3, #24]
 800b5f2:	021a      	lsls	r2, r3, #8
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	430a      	orrs	r2, r1
 800b5fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	69d9      	ldr	r1, [r3, #28]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1a      	ldr	r2, [r3, #32]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	430a      	orrs	r2, r1
 800b60a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f042 0201 	orr.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2200      	movs	r2, #0
 800b620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2220      	movs	r2, #32
 800b626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2200      	movs	r2, #0
 800b62e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3708      	adds	r7, #8
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
	...

0800b644 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af02      	add	r7, sp, #8
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	607a      	str	r2, [r7, #4]
 800b64e:	461a      	mov	r2, r3
 800b650:	460b      	mov	r3, r1
 800b652:	817b      	strh	r3, [r7, #10]
 800b654:	4613      	mov	r3, r2
 800b656:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b65e:	b2db      	uxtb	r3, r3
 800b660:	2b20      	cmp	r3, #32
 800b662:	f040 80da 	bne.w	800b81a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d101      	bne.n	800b674 <HAL_I2C_Master_Transmit+0x30>
 800b670:	2302      	movs	r3, #2
 800b672:	e0d3      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	2201      	movs	r2, #1
 800b678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b67c:	f7fe fe9e 	bl	800a3bc <HAL_GetTick>
 800b680:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	2319      	movs	r3, #25
 800b688:	2201      	movs	r2, #1
 800b68a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f000 fbc6 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	d001      	beq.n	800b69e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800b69a:	2301      	movs	r3, #1
 800b69c:	e0be      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2221      	movs	r2, #33	; 0x21
 800b6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2210      	movs	r2, #16
 800b6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	893a      	ldrh	r2, [r7, #8]
 800b6be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	2bff      	cmp	r3, #255	; 0xff
 800b6ce:	d90e      	bls.n	800b6ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	22ff      	movs	r2, #255	; 0xff
 800b6d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6da:	b2da      	uxtb	r2, r3
 800b6dc:	8979      	ldrh	r1, [r7, #10]
 800b6de:	4b51      	ldr	r3, [pc, #324]	; (800b824 <HAL_I2C_Master_Transmit+0x1e0>)
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f000 fcbc 	bl	800c064 <I2C_TransferConfig>
 800b6ec:	e06c      	b.n	800b7c8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	8979      	ldrh	r1, [r7, #10]
 800b700:	4b48      	ldr	r3, [pc, #288]	; (800b824 <HAL_I2C_Master_Transmit+0x1e0>)
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b708:	68f8      	ldr	r0, [r7, #12]
 800b70a:	f000 fcab 	bl	800c064 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800b70e:	e05b      	b.n	800b7c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b710:	697a      	ldr	r2, [r7, #20]
 800b712:	6a39      	ldr	r1, [r7, #32]
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f000 fbc3 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b71a:	4603      	mov	r3, r0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d001      	beq.n	800b724 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800b720:	2301      	movs	r3, #1
 800b722:	e07b      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b728:	781a      	ldrb	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b73e:	b29b      	uxth	r3, r3
 800b740:	3b01      	subs	r3, #1
 800b742:	b29a      	uxth	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b758:	b29b      	uxth	r3, r3
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d034      	beq.n	800b7c8 <HAL_I2C_Master_Transmit+0x184>
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b762:	2b00      	cmp	r3, #0
 800b764:	d130      	bne.n	800b7c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	9300      	str	r3, [sp, #0]
 800b76a:	6a3b      	ldr	r3, [r7, #32]
 800b76c:	2200      	movs	r2, #0
 800b76e:	2180      	movs	r1, #128	; 0x80
 800b770:	68f8      	ldr	r0, [r7, #12]
 800b772:	f000 fb55 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800b776:	4603      	mov	r3, r0
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d001      	beq.n	800b780 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e04d      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b784:	b29b      	uxth	r3, r3
 800b786:	2bff      	cmp	r3, #255	; 0xff
 800b788:	d90e      	bls.n	800b7a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	22ff      	movs	r2, #255	; 0xff
 800b78e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b794:	b2da      	uxtb	r2, r3
 800b796:	8979      	ldrh	r1, [r7, #10]
 800b798:	2300      	movs	r3, #0
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 fc5f 	bl	800c064 <I2C_TransferConfig>
 800b7a6:	e00f      	b.n	800b7c8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b7b6:	b2da      	uxtb	r2, r3
 800b7b8:	8979      	ldrh	r1, [r7, #10]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	9300      	str	r3, [sp, #0]
 800b7be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fc4e 	bl	800c064 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b7cc:	b29b      	uxth	r3, r3
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d19e      	bne.n	800b710 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b7d2:	697a      	ldr	r2, [r7, #20]
 800b7d4:	6a39      	ldr	r1, [r7, #32]
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f000 fba2 	bl	800bf20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e01a      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	2220      	movs	r2, #32
 800b7ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	6859      	ldr	r1, [r3, #4]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	4b0b      	ldr	r3, [pc, #44]	; (800b828 <HAL_I2C_Master_Transmit+0x1e4>)
 800b7fa:	400b      	ands	r3, r1
 800b7fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	2220      	movs	r2, #32
 800b802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	2200      	movs	r2, #0
 800b80a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2200      	movs	r2, #0
 800b812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b816:	2300      	movs	r3, #0
 800b818:	e000      	b.n	800b81c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800b81a:	2302      	movs	r3, #2
  }
}
 800b81c:	4618      	mov	r0, r3
 800b81e:	3718      	adds	r7, #24
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	80002000 	.word	0x80002000
 800b828:	fe00e800 	.word	0xfe00e800

0800b82c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b088      	sub	sp, #32
 800b830:	af02      	add	r7, sp, #8
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	4608      	mov	r0, r1
 800b836:	4611      	mov	r1, r2
 800b838:	461a      	mov	r2, r3
 800b83a:	4603      	mov	r3, r0
 800b83c:	817b      	strh	r3, [r7, #10]
 800b83e:	460b      	mov	r3, r1
 800b840:	813b      	strh	r3, [r7, #8]
 800b842:	4613      	mov	r3, r2
 800b844:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b20      	cmp	r3, #32
 800b850:	f040 80f9 	bne.w	800ba46 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d002      	beq.n	800b860 <HAL_I2C_Mem_Write+0x34>
 800b85a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d105      	bne.n	800b86c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b866:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e0ed      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b872:	2b01      	cmp	r3, #1
 800b874:	d101      	bne.n	800b87a <HAL_I2C_Mem_Write+0x4e>
 800b876:	2302      	movs	r3, #2
 800b878:	e0e6      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	2201      	movs	r2, #1
 800b87e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b882:	f7fe fd9b 	bl	800a3bc <HAL_GetTick>
 800b886:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	2319      	movs	r3, #25
 800b88e:	2201      	movs	r2, #1
 800b890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b894:	68f8      	ldr	r0, [r7, #12]
 800b896:	f000 fac3 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800b89a:	4603      	mov	r3, r0
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d001      	beq.n	800b8a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e0d1      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2221      	movs	r2, #33	; 0x21
 800b8a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	2240      	movs	r2, #64	; 0x40
 800b8b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6a3a      	ldr	r2, [r7, #32]
 800b8be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b8c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b8cc:	88f8      	ldrh	r0, [r7, #6]
 800b8ce:	893a      	ldrh	r2, [r7, #8]
 800b8d0:	8979      	ldrh	r1, [r7, #10]
 800b8d2:	697b      	ldr	r3, [r7, #20]
 800b8d4:	9301      	str	r3, [sp, #4]
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	9300      	str	r3, [sp, #0]
 800b8da:	4603      	mov	r3, r0
 800b8dc:	68f8      	ldr	r0, [r7, #12]
 800b8de:	f000 f9d3 	bl	800bc88 <I2C_RequestMemoryWrite>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e0a9      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	2bff      	cmp	r3, #255	; 0xff
 800b8fc:	d90e      	bls.n	800b91c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	22ff      	movs	r2, #255	; 0xff
 800b902:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b908:	b2da      	uxtb	r2, r3
 800b90a:	8979      	ldrh	r1, [r7, #10]
 800b90c:	2300      	movs	r3, #0
 800b90e:	9300      	str	r3, [sp, #0]
 800b910:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fba5 	bl	800c064 <I2C_TransferConfig>
 800b91a:	e00f      	b.n	800b93c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b920:	b29a      	uxth	r2, r3
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b92a:	b2da      	uxtb	r2, r3
 800b92c:	8979      	ldrh	r1, [r7, #10]
 800b92e:	2300      	movs	r3, #0
 800b930:	9300      	str	r3, [sp, #0]
 800b932:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b936:	68f8      	ldr	r0, [r7, #12]
 800b938:	f000 fb94 	bl	800c064 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b93c:	697a      	ldr	r2, [r7, #20]
 800b93e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f000 faad 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800b946:	4603      	mov	r3, r0
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d001      	beq.n	800b950 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b94c:	2301      	movs	r3, #1
 800b94e:	e07b      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b954:	781a      	ldrb	r2, [r3, #0]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b960:	1c5a      	adds	r2, r3, #1
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b96a:	b29b      	uxth	r3, r3
 800b96c:	3b01      	subs	r3, #1
 800b96e:	b29a      	uxth	r2, r3
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b978:	3b01      	subs	r3, #1
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b984:	b29b      	uxth	r3, r3
 800b986:	2b00      	cmp	r3, #0
 800b988:	d034      	beq.n	800b9f4 <HAL_I2C_Mem_Write+0x1c8>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d130      	bne.n	800b9f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b992:	697b      	ldr	r3, [r7, #20]
 800b994:	9300      	str	r3, [sp, #0]
 800b996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b998:	2200      	movs	r2, #0
 800b99a:	2180      	movs	r1, #128	; 0x80
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f000 fa3f 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b9a8:	2301      	movs	r3, #1
 800b9aa:	e04d      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	2bff      	cmp	r3, #255	; 0xff
 800b9b4:	d90e      	bls.n	800b9d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	22ff      	movs	r2, #255	; 0xff
 800b9ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9c0:	b2da      	uxtb	r2, r3
 800b9c2:	8979      	ldrh	r1, [r7, #10]
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	9300      	str	r3, [sp, #0]
 800b9c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b9cc:	68f8      	ldr	r0, [r7, #12]
 800b9ce:	f000 fb49 	bl	800c064 <I2C_TransferConfig>
 800b9d2:	e00f      	b.n	800b9f4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9d8:	b29a      	uxth	r2, r3
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9e2:	b2da      	uxtb	r2, r3
 800b9e4:	8979      	ldrh	r1, [r7, #10]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	9300      	str	r3, [sp, #0]
 800b9ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b9ee:	68f8      	ldr	r0, [r7, #12]
 800b9f0:	f000 fb38 	bl	800c064 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d19e      	bne.n	800b93c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b9fe:	697a      	ldr	r2, [r7, #20]
 800ba00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ba02:	68f8      	ldr	r0, [r7, #12]
 800ba04:	f000 fa8c 	bl	800bf20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ba0e:	2301      	movs	r3, #1
 800ba10:	e01a      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2220      	movs	r2, #32
 800ba18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6859      	ldr	r1, [r3, #4]
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	4b0a      	ldr	r3, [pc, #40]	; (800ba50 <HAL_I2C_Mem_Write+0x224>)
 800ba26:	400b      	ands	r3, r1
 800ba28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2220      	movs	r2, #32
 800ba2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	e000      	b.n	800ba48 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ba46:	2302      	movs	r3, #2
  }
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3718      	adds	r7, #24
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	fe00e800 	.word	0xfe00e800

0800ba54 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b088      	sub	sp, #32
 800ba58:	af02      	add	r7, sp, #8
 800ba5a:	60f8      	str	r0, [r7, #12]
 800ba5c:	4608      	mov	r0, r1
 800ba5e:	4611      	mov	r1, r2
 800ba60:	461a      	mov	r2, r3
 800ba62:	4603      	mov	r3, r0
 800ba64:	817b      	strh	r3, [r7, #10]
 800ba66:	460b      	mov	r3, r1
 800ba68:	813b      	strh	r3, [r7, #8]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	2b20      	cmp	r3, #32
 800ba78:	f040 80fd 	bne.w	800bc76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ba7c:	6a3b      	ldr	r3, [r7, #32]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <HAL_I2C_Mem_Read+0x34>
 800ba82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d105      	bne.n	800ba94 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba8e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
 800ba92:	e0f1      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d101      	bne.n	800baa2 <HAL_I2C_Mem_Read+0x4e>
 800ba9e:	2302      	movs	r3, #2
 800baa0:	e0ea      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2201      	movs	r2, #1
 800baa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800baaa:	f7fe fc87 	bl	800a3bc <HAL_GetTick>
 800baae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	9300      	str	r3, [sp, #0]
 800bab4:	2319      	movs	r3, #25
 800bab6:	2201      	movs	r2, #1
 800bab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f000 f9af 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800bac2:	4603      	mov	r3, r0
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d001      	beq.n	800bacc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800bac8:	2301      	movs	r3, #1
 800baca:	e0d5      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2222      	movs	r2, #34	; 0x22
 800bad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	2240      	movs	r2, #64	; 0x40
 800bad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2200      	movs	r2, #0
 800bae0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	6a3a      	ldr	r2, [r7, #32]
 800bae6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800baec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	2200      	movs	r2, #0
 800baf2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800baf4:	88f8      	ldrh	r0, [r7, #6]
 800baf6:	893a      	ldrh	r2, [r7, #8]
 800baf8:	8979      	ldrh	r1, [r7, #10]
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	4603      	mov	r3, r0
 800bb04:	68f8      	ldr	r0, [r7, #12]
 800bb06:	f000 f913 	bl	800bd30 <I2C_RequestMemoryRead>
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d005      	beq.n	800bb1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	2200      	movs	r2, #0
 800bb14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	e0ad      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	2bff      	cmp	r3, #255	; 0xff
 800bb24:	d90e      	bls.n	800bb44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	22ff      	movs	r2, #255	; 0xff
 800bb2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	8979      	ldrh	r1, [r7, #10]
 800bb34:	4b52      	ldr	r3, [pc, #328]	; (800bc80 <HAL_I2C_Mem_Read+0x22c>)
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bb3c:	68f8      	ldr	r0, [r7, #12]
 800bb3e:	f000 fa91 	bl	800c064 <I2C_TransferConfig>
 800bb42:	e00f      	b.n	800bb64 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb52:	b2da      	uxtb	r2, r3
 800bb54:	8979      	ldrh	r1, [r7, #10]
 800bb56:	4b4a      	ldr	r3, [pc, #296]	; (800bc80 <HAL_I2C_Mem_Read+0x22c>)
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f000 fa80 	bl	800c064 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800bb64:	697b      	ldr	r3, [r7, #20]
 800bb66:	9300      	str	r3, [sp, #0]
 800bb68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	2104      	movs	r1, #4
 800bb6e:	68f8      	ldr	r0, [r7, #12]
 800bb70:	f000 f956 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800bb74:	4603      	mov	r3, r0
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d001      	beq.n	800bb7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e07c      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb88:	b2d2      	uxtb	r2, r2
 800bb8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb90:	1c5a      	adds	r2, r3, #1
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	b29a      	uxth	r2, r3
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	3b01      	subs	r3, #1
 800bbaa:	b29a      	uxth	r2, r3
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbb4:	b29b      	uxth	r3, r3
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d034      	beq.n	800bc24 <HAL_I2C_Mem_Read+0x1d0>
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d130      	bne.n	800bc24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	9300      	str	r3, [sp, #0]
 800bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbc8:	2200      	movs	r2, #0
 800bbca:	2180      	movs	r1, #128	; 0x80
 800bbcc:	68f8      	ldr	r0, [r7, #12]
 800bbce:	f000 f927 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d001      	beq.n	800bbdc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e04d      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	2bff      	cmp	r3, #255	; 0xff
 800bbe4:	d90e      	bls.n	800bc04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	22ff      	movs	r2, #255	; 0xff
 800bbea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	8979      	ldrh	r1, [r7, #10]
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f000 fa31 	bl	800c064 <I2C_TransferConfig>
 800bc02:	e00f      	b.n	800bc24 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc08:	b29a      	uxth	r2, r3
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc12:	b2da      	uxtb	r2, r3
 800bc14:	8979      	ldrh	r1, [r7, #10]
 800bc16:	2300      	movs	r3, #0
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 fa20 	bl	800c064 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bc28:	b29b      	uxth	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d19a      	bne.n	800bb64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bc2e:	697a      	ldr	r2, [r7, #20]
 800bc30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc32:	68f8      	ldr	r0, [r7, #12]
 800bc34:	f000 f974 	bl	800bf20 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d001      	beq.n	800bc42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	e01a      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2220      	movs	r2, #32
 800bc48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6859      	ldr	r1, [r3, #4]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b0b      	ldr	r3, [pc, #44]	; (800bc84 <HAL_I2C_Mem_Read+0x230>)
 800bc56:	400b      	ands	r3, r1
 800bc58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2220      	movs	r2, #32
 800bc5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2200      	movs	r2, #0
 800bc66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	e000      	b.n	800bc78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800bc76:	2302      	movs	r3, #2
  }
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	80002400 	.word	0x80002400
 800bc84:	fe00e800 	.word	0xfe00e800

0800bc88 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	4608      	mov	r0, r1
 800bc92:	4611      	mov	r1, r2
 800bc94:	461a      	mov	r2, r3
 800bc96:	4603      	mov	r3, r0
 800bc98:	817b      	strh	r3, [r7, #10]
 800bc9a:	460b      	mov	r3, r1
 800bc9c:	813b      	strh	r3, [r7, #8]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	8979      	ldrh	r1, [r7, #10]
 800bca8:	4b20      	ldr	r3, [pc, #128]	; (800bd2c <I2C_RequestMemoryWrite+0xa4>)
 800bcaa:	9300      	str	r3, [sp, #0]
 800bcac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bcb0:	68f8      	ldr	r0, [r7, #12]
 800bcb2:	f000 f9d7 	bl	800c064 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcb6:	69fa      	ldr	r2, [r7, #28]
 800bcb8:	69b9      	ldr	r1, [r7, #24]
 800bcba:	68f8      	ldr	r0, [r7, #12]
 800bcbc:	f000 f8f0 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800bcc6:	2301      	movs	r3, #1
 800bcc8:	e02c      	b.n	800bd24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bcca:	88fb      	ldrh	r3, [r7, #6]
 800bccc:	2b01      	cmp	r3, #1
 800bcce:	d105      	bne.n	800bcdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcd0:	893b      	ldrh	r3, [r7, #8]
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	629a      	str	r2, [r3, #40]	; 0x28
 800bcda:	e015      	b.n	800bd08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bcdc:	893b      	ldrh	r3, [r7, #8]
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	b29b      	uxth	r3, r3
 800bce2:	b2da      	uxtb	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bcea:	69fa      	ldr	r2, [r7, #28]
 800bcec:	69b9      	ldr	r1, [r7, #24]
 800bcee:	68f8      	ldr	r0, [r7, #12]
 800bcf0:	f000 f8d6 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e012      	b.n	800bd24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bcfe:	893b      	ldrh	r3, [r7, #8]
 800bd00:	b2da      	uxtb	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800bd08:	69fb      	ldr	r3, [r7, #28]
 800bd0a:	9300      	str	r3, [sp, #0]
 800bd0c:	69bb      	ldr	r3, [r7, #24]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	2180      	movs	r1, #128	; 0x80
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f000 f884 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d001      	beq.n	800bd22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	e000      	b.n	800bd24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800bd22:	2300      	movs	r3, #0
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	80002000 	.word	0x80002000

0800bd30 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b086      	sub	sp, #24
 800bd34:	af02      	add	r7, sp, #8
 800bd36:	60f8      	str	r0, [r7, #12]
 800bd38:	4608      	mov	r0, r1
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4603      	mov	r3, r0
 800bd40:	817b      	strh	r3, [r7, #10]
 800bd42:	460b      	mov	r3, r1
 800bd44:	813b      	strh	r3, [r7, #8]
 800bd46:	4613      	mov	r3, r2
 800bd48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bd4a:	88fb      	ldrh	r3, [r7, #6]
 800bd4c:	b2da      	uxtb	r2, r3
 800bd4e:	8979      	ldrh	r1, [r7, #10]
 800bd50:	4b20      	ldr	r3, [pc, #128]	; (800bdd4 <I2C_RequestMemoryRead+0xa4>)
 800bd52:	9300      	str	r3, [sp, #0]
 800bd54:	2300      	movs	r3, #0
 800bd56:	68f8      	ldr	r0, [r7, #12]
 800bd58:	f000 f984 	bl	800c064 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd5c:	69fa      	ldr	r2, [r7, #28]
 800bd5e:	69b9      	ldr	r1, [r7, #24]
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f000 f89d 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd66:	4603      	mov	r3, r0
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d001      	beq.n	800bd70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e02c      	b.n	800bdca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bd70:	88fb      	ldrh	r3, [r7, #6]
 800bd72:	2b01      	cmp	r3, #1
 800bd74:	d105      	bne.n	800bd82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bd76:	893b      	ldrh	r3, [r7, #8]
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	629a      	str	r2, [r3, #40]	; 0x28
 800bd80:	e015      	b.n	800bdae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bd82:	893b      	ldrh	r3, [r7, #8]
 800bd84:	0a1b      	lsrs	r3, r3, #8
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bd90:	69fa      	ldr	r2, [r7, #28]
 800bd92:	69b9      	ldr	r1, [r7, #24]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 f883 	bl	800bea0 <I2C_WaitOnTXISFlagUntilTimeout>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e012      	b.n	800bdca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bda4:	893b      	ldrh	r3, [r7, #8]
 800bda6:	b2da      	uxtb	r2, r3
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	9300      	str	r3, [sp, #0]
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	2140      	movs	r1, #64	; 0x40
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f000 f831 	bl	800be20 <I2C_WaitOnFlagUntilTimeout>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d001      	beq.n	800bdc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	e000      	b.n	800bdca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3710      	adds	r7, #16
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	bd80      	pop	{r7, pc}
 800bdd2:	bf00      	nop
 800bdd4:	80002000 	.word	0x80002000

0800bdd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	699b      	ldr	r3, [r3, #24]
 800bde6:	f003 0302 	and.w	r3, r3, #2
 800bdea:	2b02      	cmp	r3, #2
 800bdec:	d103      	bne.n	800bdf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	f003 0301 	and.w	r3, r3, #1
 800be00:	2b01      	cmp	r3, #1
 800be02:	d007      	beq.n	800be14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	699a      	ldr	r2, [r3, #24]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f042 0201 	orr.w	r2, r2, #1
 800be12:	619a      	str	r2, [r3, #24]
  }
}
 800be14:	bf00      	nop
 800be16:	370c      	adds	r7, #12
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	603b      	str	r3, [r7, #0]
 800be2c:	4613      	mov	r3, r2
 800be2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be30:	e022      	b.n	800be78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be38:	d01e      	beq.n	800be78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be3a:	f7fe fabf 	bl	800a3bc <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	683a      	ldr	r2, [r7, #0]
 800be46:	429a      	cmp	r2, r3
 800be48:	d302      	bcc.n	800be50 <I2C_WaitOnFlagUntilTimeout+0x30>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d113      	bne.n	800be78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be54:	f043 0220 	orr.w	r2, r3, #32
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2220      	movs	r2, #32
 800be60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	2200      	movs	r2, #0
 800be68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	2200      	movs	r2, #0
 800be70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800be74:	2301      	movs	r3, #1
 800be76:	e00f      	b.n	800be98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	699a      	ldr	r2, [r3, #24]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	4013      	ands	r3, r2
 800be82:	68ba      	ldr	r2, [r7, #8]
 800be84:	429a      	cmp	r2, r3
 800be86:	bf0c      	ite	eq
 800be88:	2301      	moveq	r3, #1
 800be8a:	2300      	movne	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	461a      	mov	r2, r3
 800be90:	79fb      	ldrb	r3, [r7, #7]
 800be92:	429a      	cmp	r2, r3
 800be94:	d0cd      	beq.n	800be32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800be96:	2300      	movs	r3, #0
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}

0800bea0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	60f8      	str	r0, [r7, #12]
 800bea8:	60b9      	str	r1, [r7, #8]
 800beaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800beac:	e02c      	b.n	800bf08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	68b9      	ldr	r1, [r7, #8]
 800beb2:	68f8      	ldr	r0, [r7, #12]
 800beb4:	f000 f870 	bl	800bf98 <I2C_IsAcknowledgeFailed>
 800beb8:	4603      	mov	r3, r0
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d001      	beq.n	800bec2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bebe:	2301      	movs	r3, #1
 800bec0:	e02a      	b.n	800bf18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bec8:	d01e      	beq.n	800bf08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800beca:	f7fe fa77 	bl	800a3bc <HAL_GetTick>
 800bece:	4602      	mov	r2, r0
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	1ad3      	subs	r3, r2, r3
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d302      	bcc.n	800bee0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d113      	bne.n	800bf08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee4:	f043 0220 	orr.w	r2, r3, #32
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	2220      	movs	r2, #32
 800bef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bef4:	68fb      	ldr	r3, [r7, #12]
 800bef6:	2200      	movs	r2, #0
 800bef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800bf04:	2301      	movs	r3, #1
 800bf06:	e007      	b.n	800bf18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	699b      	ldr	r3, [r3, #24]
 800bf0e:	f003 0302 	and.w	r3, r3, #2
 800bf12:	2b02      	cmp	r3, #2
 800bf14:	d1cb      	bne.n	800beae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bf16:	2300      	movs	r3, #0
}
 800bf18:	4618      	mov	r0, r3
 800bf1a:	3710      	adds	r7, #16
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}

0800bf20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b084      	sub	sp, #16
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	60f8      	str	r0, [r7, #12]
 800bf28:	60b9      	str	r1, [r7, #8]
 800bf2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf2c:	e028      	b.n	800bf80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	68b9      	ldr	r1, [r7, #8]
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f000 f830 	bl	800bf98 <I2C_IsAcknowledgeFailed>
 800bf38:	4603      	mov	r3, r0
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e026      	b.n	800bf90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf42:	f7fe fa3b 	bl	800a3bc <HAL_GetTick>
 800bf46:	4602      	mov	r2, r0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	68ba      	ldr	r2, [r7, #8]
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d302      	bcc.n	800bf58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d113      	bne.n	800bf80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5c:	f043 0220 	orr.w	r2, r3, #32
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2220      	movs	r2, #32
 800bf68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	2200      	movs	r2, #0
 800bf70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	e007      	b.n	800bf90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	699b      	ldr	r3, [r3, #24]
 800bf86:	f003 0320 	and.w	r3, r3, #32
 800bf8a:	2b20      	cmp	r3, #32
 800bf8c:	d1cf      	bne.n	800bf2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bf8e:	2300      	movs	r3, #0
}
 800bf90:	4618      	mov	r0, r3
 800bf92:	3710      	adds	r7, #16
 800bf94:	46bd      	mov	sp, r7
 800bf96:	bd80      	pop	{r7, pc}

0800bf98 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	f003 0310 	and.w	r3, r3, #16
 800bfae:	2b10      	cmp	r3, #16
 800bfb0:	d151      	bne.n	800c056 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bfb2:	e022      	b.n	800bffa <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfba:	d01e      	beq.n	800bffa <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bfbc:	f7fe f9fe 	bl	800a3bc <HAL_GetTick>
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	1ad3      	subs	r3, r2, r3
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d302      	bcc.n	800bfd2 <I2C_IsAcknowledgeFailed+0x3a>
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d113      	bne.n	800bffa <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfd6:	f043 0220 	orr.w	r2, r3, #32
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2220      	movs	r2, #32
 800bfe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2200      	movs	r2, #0
 800bfea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	2200      	movs	r2, #0
 800bff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800bff6:	2301      	movs	r3, #1
 800bff8:	e02e      	b.n	800c058 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	f003 0320 	and.w	r3, r3, #32
 800c004:	2b20      	cmp	r3, #32
 800c006:	d1d5      	bne.n	800bfb4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	2210      	movs	r2, #16
 800c00e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2220      	movs	r2, #32
 800c016:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800c018:	68f8      	ldr	r0, [r7, #12]
 800c01a:	f7ff fedd 	bl	800bdd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	6859      	ldr	r1, [r3, #4]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	4b0d      	ldr	r3, [pc, #52]	; (800c060 <I2C_IsAcknowledgeFailed+0xc8>)
 800c02a:	400b      	ands	r3, r1
 800c02c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c032:	f043 0204 	orr.w	r2, r3, #4
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2220      	movs	r2, #32
 800c03e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2200      	movs	r2, #0
 800c04e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e000      	b.n	800c058 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3710      	adds	r7, #16
 800c05c:	46bd      	mov	sp, r7
 800c05e:	bd80      	pop	{r7, pc}
 800c060:	fe00e800 	.word	0xfe00e800

0800c064 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	607b      	str	r3, [r7, #4]
 800c06e:	460b      	mov	r3, r1
 800c070:	817b      	strh	r3, [r7, #10]
 800c072:	4613      	mov	r3, r2
 800c074:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	685a      	ldr	r2, [r3, #4]
 800c07c:	69bb      	ldr	r3, [r7, #24]
 800c07e:	0d5b      	lsrs	r3, r3, #21
 800c080:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800c084:	4b0d      	ldr	r3, [pc, #52]	; (800c0bc <I2C_TransferConfig+0x58>)
 800c086:	430b      	orrs	r3, r1
 800c088:	43db      	mvns	r3, r3
 800c08a:	ea02 0103 	and.w	r1, r2, r3
 800c08e:	897b      	ldrh	r3, [r7, #10]
 800c090:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800c094:	7a7b      	ldrb	r3, [r7, #9]
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c09c:	431a      	orrs	r2, r3
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	431a      	orrs	r2, r3
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	431a      	orrs	r2, r3
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800c0ae:	bf00      	nop
 800c0b0:	3714      	adds	r7, #20
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	03ff63ff 	.word	0x03ff63ff

0800c0c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0d0:	b2db      	uxtb	r3, r3
 800c0d2:	2b20      	cmp	r3, #32
 800c0d4:	d138      	bne.n	800c148 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d101      	bne.n	800c0e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c0e0:	2302      	movs	r3, #2
 800c0e2:	e032      	b.n	800c14a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2201      	movs	r2, #1
 800c0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2224      	movs	r2, #36	; 0x24
 800c0f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f022 0201 	bic.w	r2, r2, #1
 800c102:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c112:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6819      	ldr	r1, [r3, #0]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	430a      	orrs	r2, r1
 800c122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	681a      	ldr	r2, [r3, #0]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f042 0201 	orr.w	r2, r2, #1
 800c132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2220      	movs	r2, #32
 800c138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c144:	2300      	movs	r3, #0
 800c146:	e000      	b.n	800c14a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c148:	2302      	movs	r3, #2
  }
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	370c      	adds	r7, #12
 800c14e:	46bd      	mov	sp, r7
 800c150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c154:	4770      	bx	lr

0800c156 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c156:	b480      	push	{r7}
 800c158:	b085      	sub	sp, #20
 800c15a:	af00      	add	r7, sp, #0
 800c15c:	6078      	str	r0, [r7, #4]
 800c15e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c166:	b2db      	uxtb	r3, r3
 800c168:	2b20      	cmp	r3, #32
 800c16a:	d139      	bne.n	800c1e0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c172:	2b01      	cmp	r3, #1
 800c174:	d101      	bne.n	800c17a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c176:	2302      	movs	r3, #2
 800c178:	e033      	b.n	800c1e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2201      	movs	r2, #1
 800c17e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2224      	movs	r2, #36	; 0x24
 800c186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	681a      	ldr	r2, [r3, #0]
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f022 0201 	bic.w	r2, r2, #1
 800c198:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c1a8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	021b      	lsls	r3, r3, #8
 800c1ae:	68fa      	ldr	r2, [r7, #12]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68fa      	ldr	r2, [r7, #12]
 800c1ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	681a      	ldr	r2, [r3, #0]
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f042 0201 	orr.w	r2, r2, #1
 800c1ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2220      	movs	r2, #32
 800c1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e000      	b.n	800c1e2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c1e0:	2302      	movs	r3, #2
  }
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3714      	adds	r7, #20
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b084      	sub	sp, #16
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d101      	bne.n	800c200 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	e038      	b.n	800c272 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c208:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f245 5255 	movw	r2, #21845	; 0x5555
 800c212:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	6852      	ldr	r2, [r2, #4]
 800c21c:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	6892      	ldr	r2, [r2, #8]
 800c226:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c228:	f7fe f8c8 	bl	800a3bc <HAL_GetTick>
 800c22c:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800c22e:	e008      	b.n	800c242 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c230:	f7fe f8c4 	bl	800a3bc <HAL_GetTick>
 800c234:	4602      	mov	r2, r0
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	1ad3      	subs	r3, r2, r3
 800c23a:	2b30      	cmp	r3, #48	; 0x30
 800c23c:	d901      	bls.n	800c242 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800c23e:	2303      	movs	r3, #3
 800c240:	e017      	b.n	800c272 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	68db      	ldr	r3, [r3, #12]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d1f1      	bne.n	800c230 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	691a      	ldr	r2, [r3, #16]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	68db      	ldr	r3, [r3, #12]
 800c256:	429a      	cmp	r2, r3
 800c258:	d005      	beq.n	800c266 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	68d2      	ldr	r2, [r2, #12]
 800c262:	611a      	str	r2, [r3, #16]
 800c264:	e004      	b.n	800c270 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c26e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3710      	adds	r7, #16
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c27a:	b480      	push	{r7}
 800c27c:	b083      	sub	sp, #12
 800c27e:	af00      	add	r7, sp, #0
 800c280:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c28a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	370c      	adds	r7, #12
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr

0800c29a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c29a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c29c:	b08b      	sub	sp, #44	; 0x2c
 800c29e:	af06      	add	r7, sp, #24
 800c2a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d101      	bne.n	800c2ac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	e104      	b.n	800c4b6 <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800c2b2:	b2db      	uxtb	r3, r3
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d106      	bne.n	800c2c6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f009 fe39 	bl	8015f38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2203      	movs	r2, #3
 800c2ca:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f005 f9a5 	bl	8011622 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	603b      	str	r3, [r7, #0]
 800c2de:	687e      	ldr	r6, [r7, #4]
 800c2e0:	466d      	mov	r5, sp
 800c2e2:	f106 0410 	add.w	r4, r6, #16
 800c2e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c2e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	602b      	str	r3, [r5, #0]
 800c2ee:	1d33      	adds	r3, r6, #4
 800c2f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2f2:	6838      	ldr	r0, [r7, #0]
 800c2f4:	f005 f96d 	bl	80115d2 <USB_CoreInit>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d005      	beq.n	800c30a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2202      	movs	r2, #2
 800c302:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	e0d5      	b.n	800c4b6 <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	2100      	movs	r1, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f005 f9a1 	bl	8011658 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c316:	2300      	movs	r3, #0
 800c318:	73fb      	strb	r3, [r7, #15]
 800c31a:	e04c      	b.n	800c3b6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c31c:	7bfb      	ldrb	r3, [r7, #15]
 800c31e:	6879      	ldr	r1, [r7, #4]
 800c320:	1c5a      	adds	r2, r3, #1
 800c322:	4613      	mov	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4413      	add	r3, r2
 800c328:	00db      	lsls	r3, r3, #3
 800c32a:	440b      	add	r3, r1
 800c32c:	3301      	adds	r3, #1
 800c32e:	2201      	movs	r2, #1
 800c330:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c332:	7bfb      	ldrb	r3, [r7, #15]
 800c334:	6879      	ldr	r1, [r7, #4]
 800c336:	1c5a      	adds	r2, r3, #1
 800c338:	4613      	mov	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4413      	add	r3, r2
 800c33e:	00db      	lsls	r3, r3, #3
 800c340:	440b      	add	r3, r1
 800c342:	7bfa      	ldrb	r2, [r7, #15]
 800c344:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c346:	7bfa      	ldrb	r2, [r7, #15]
 800c348:	7bfb      	ldrb	r3, [r7, #15]
 800c34a:	b298      	uxth	r0, r3
 800c34c:	6879      	ldr	r1, [r7, #4]
 800c34e:	4613      	mov	r3, r2
 800c350:	009b      	lsls	r3, r3, #2
 800c352:	4413      	add	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	440b      	add	r3, r1
 800c358:	3336      	adds	r3, #54	; 0x36
 800c35a:	4602      	mov	r2, r0
 800c35c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c35e:	7bfb      	ldrb	r3, [r7, #15]
 800c360:	6879      	ldr	r1, [r7, #4]
 800c362:	1c5a      	adds	r2, r3, #1
 800c364:	4613      	mov	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	4413      	add	r3, r2
 800c36a:	00db      	lsls	r3, r3, #3
 800c36c:	440b      	add	r3, r1
 800c36e:	3303      	adds	r3, #3
 800c370:	2200      	movs	r2, #0
 800c372:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c374:	7bfa      	ldrb	r2, [r7, #15]
 800c376:	6879      	ldr	r1, [r7, #4]
 800c378:	4613      	mov	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4413      	add	r3, r2
 800c37e:	00db      	lsls	r3, r3, #3
 800c380:	440b      	add	r3, r1
 800c382:	3338      	adds	r3, #56	; 0x38
 800c384:	2200      	movs	r2, #0
 800c386:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c388:	7bfa      	ldrb	r2, [r7, #15]
 800c38a:	6879      	ldr	r1, [r7, #4]
 800c38c:	4613      	mov	r3, r2
 800c38e:	009b      	lsls	r3, r3, #2
 800c390:	4413      	add	r3, r2
 800c392:	00db      	lsls	r3, r3, #3
 800c394:	440b      	add	r3, r1
 800c396:	333c      	adds	r3, #60	; 0x3c
 800c398:	2200      	movs	r2, #0
 800c39a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c39c:	7bfa      	ldrb	r2, [r7, #15]
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	4613      	mov	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	4413      	add	r3, r2
 800c3a6:	00db      	lsls	r3, r3, #3
 800c3a8:	440b      	add	r3, r1
 800c3aa:	3340      	adds	r3, #64	; 0x40
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3b0:	7bfb      	ldrb	r3, [r7, #15]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	73fb      	strb	r3, [r7, #15]
 800c3b6:	7bfa      	ldrb	r2, [r7, #15]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d3ad      	bcc.n	800c31c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	73fb      	strb	r3, [r7, #15]
 800c3c4:	e044      	b.n	800c450 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c3c6:	7bfa      	ldrb	r2, [r7, #15]
 800c3c8:	6879      	ldr	r1, [r7, #4]
 800c3ca:	4613      	mov	r3, r2
 800c3cc:	009b      	lsls	r3, r3, #2
 800c3ce:	4413      	add	r3, r2
 800c3d0:	00db      	lsls	r3, r3, #3
 800c3d2:	440b      	add	r3, r1
 800c3d4:	f203 1369 	addw	r3, r3, #361	; 0x169
 800c3d8:	2200      	movs	r2, #0
 800c3da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c3dc:	7bfa      	ldrb	r2, [r7, #15]
 800c3de:	6879      	ldr	r1, [r7, #4]
 800c3e0:	4613      	mov	r3, r2
 800c3e2:	009b      	lsls	r3, r3, #2
 800c3e4:	4413      	add	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	440b      	add	r3, r1
 800c3ea:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c3ee:	7bfa      	ldrb	r2, [r7, #15]
 800c3f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c3f2:	7bfa      	ldrb	r2, [r7, #15]
 800c3f4:	6879      	ldr	r1, [r7, #4]
 800c3f6:	4613      	mov	r3, r2
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	440b      	add	r3, r1
 800c400:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800c404:	2200      	movs	r2, #0
 800c406:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c408:	7bfa      	ldrb	r2, [r7, #15]
 800c40a:	6879      	ldr	r1, [r7, #4]
 800c40c:	4613      	mov	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	4413      	add	r3, r2
 800c412:	00db      	lsls	r3, r3, #3
 800c414:	440b      	add	r3, r1
 800c416:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800c41a:	2200      	movs	r2, #0
 800c41c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c41e:	7bfa      	ldrb	r2, [r7, #15]
 800c420:	6879      	ldr	r1, [r7, #4]
 800c422:	4613      	mov	r3, r2
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	4413      	add	r3, r2
 800c428:	00db      	lsls	r3, r3, #3
 800c42a:	440b      	add	r3, r1
 800c42c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800c430:	2200      	movs	r2, #0
 800c432:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c434:	7bfa      	ldrb	r2, [r7, #15]
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	00db      	lsls	r3, r3, #3
 800c440:	440b      	add	r3, r1
 800c442:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800c446:	2200      	movs	r2, #0
 800c448:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	3301      	adds	r3, #1
 800c44e:	73fb      	strb	r3, [r7, #15]
 800c450:	7bfa      	ldrb	r2, [r7, #15]
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	429a      	cmp	r2, r3
 800c458:	d3b5      	bcc.n	800c3c6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	603b      	str	r3, [r7, #0]
 800c460:	687e      	ldr	r6, [r7, #4]
 800c462:	466d      	mov	r5, sp
 800c464:	f106 0410 	add.w	r4, r6, #16
 800c468:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c46a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c46c:	6823      	ldr	r3, [r4, #0]
 800c46e:	602b      	str	r3, [r5, #0]
 800c470:	1d33      	adds	r3, r6, #4
 800c472:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c474:	6838      	ldr	r0, [r7, #0]
 800c476:	f005 f8fc 	bl	8011672 <USB_DevInit>
 800c47a:	4603      	mov	r3, r0
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2202      	movs	r2, #2
 800c484:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e014      	b.n	800c4b6 <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	69db      	ldr	r3, [r3, #28]
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d102      	bne.n	800c4aa <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c4a4:	6878      	ldr	r0, [r7, #4]
 800c4a6:	f001 fbbf 	bl	800dc28 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f007 fa7c 	bl	80139ac <USB_DevDisconnect>

  return HAL_OK;
 800c4b4:	2300      	movs	r3, #0
}
 800c4b6:	4618      	mov	r0, r3
 800c4b8:	3714      	adds	r7, #20
 800c4ba:	46bd      	mov	sp, r7
 800c4bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4be <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c4be:	b580      	push	{r7, lr}
 800c4c0:	b082      	sub	sp, #8
 800c4c2:	af00      	add	r7, sp, #0
 800c4c4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d101      	bne.n	800c4d4 <HAL_PCD_Start+0x16>
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	e012      	b.n	800c4fa <HAL_PCD_Start+0x3c>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f005 f887 	bl	80115f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f007 fa47 	bl	801397e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c4f8:	2300      	movs	r3, #0
}
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	3708      	adds	r7, #8
 800c4fe:	46bd      	mov	sp, r7
 800c500:	bd80      	pop	{r7, pc}

0800c502 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800c502:	b580      	push	{r7, lr}
 800c504:	b082      	sub	sp, #8
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c510:	2b01      	cmp	r3, #1
 800c512:	d101      	bne.n	800c518 <HAL_PCD_Stop+0x16>
 800c514:	2302      	movs	r3, #2
 800c516:	e012      	b.n	800c53e <HAL_PCD_Stop+0x3c>
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	2201      	movs	r2, #1
 800c51c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	4618      	mov	r0, r3
 800c526:	f005 f87c 	bl	8011622 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4618      	mov	r0, r3
 800c530:	f007 fa3c 	bl	80139ac <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2200      	movs	r2, #0
 800c538:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c546:	b580      	push	{r7, lr}
 800c548:	b082      	sub	sp, #8
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4618      	mov	r0, r3
 800c554:	f007 fa3f 	bl	80139d6 <USB_ReadInterrupts>
 800c558:	4603      	mov	r3, r0
 800c55a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c55e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c562:	d102      	bne.n	800c56a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f000 fb5b 	bl	800cc20 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4618      	mov	r0, r3
 800c570:	f007 fa31 	bl	80139d6 <USB_ReadInterrupts>
 800c574:	4603      	mov	r3, r0
 800c576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c57a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c57e:	d112      	bne.n	800c5a6 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c588:	b29a      	uxth	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c592:	b292      	uxth	r2, r2
 800c594:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f009 fd48 	bl	801602e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800c59e:	2100      	movs	r1, #0
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f91e 	bl	800c7e2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f007 fa13 	bl	80139d6 <USB_ReadInterrupts>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c5ba:	d10b      	bne.n	800c5d4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c5c4:	b29a      	uxth	r2, r3
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c5ce:	b292      	uxth	r2, r2
 800c5d0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4618      	mov	r0, r3
 800c5da:	f007 f9fc 	bl	80139d6 <USB_ReadInterrupts>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c5e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5e8:	d10b      	bne.n	800c602 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c5f2:	b29a      	uxth	r2, r3
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5fc:	b292      	uxth	r2, r2
 800c5fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4618      	mov	r0, r3
 800c608:	f007 f9e5 	bl	80139d6 <USB_ReadInterrupts>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c616:	d133      	bne.n	800c680 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c620:	b29a      	uxth	r2, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f022 0204 	bic.w	r2, r2, #4
 800c62a:	b292      	uxth	r2, r2
 800c62c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f022 0208 	bic.w	r2, r2, #8
 800c642:	b292      	uxth	r2, r2
 800c644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d107      	bne.n	800c662 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	2200      	movs	r2, #0
 800c656:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c65a:	2100      	movs	r1, #0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f00a f811 	bl	8016684 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f009 fd1c 	bl	80160a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c67a:	b292      	uxth	r2, r2
 800c67c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	4618      	mov	r0, r3
 800c686:	f007 f9a6 	bl	80139d6 <USB_ReadInterrupts>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c694:	d126      	bne.n	800c6e4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	f042 0208 	orr.w	r2, r2, #8
 800c6a8:	b292      	uxth	r2, r2
 800c6aa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c6b6:	b29a      	uxth	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c6c0:	b292      	uxth	r2, r2
 800c6c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c6ce:	b29a      	uxth	r2, r3
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	f042 0204 	orr.w	r2, r2, #4
 800c6d8:	b292      	uxth	r2, r2
 800c6da:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f009 fcc4 	bl	801606c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	f007 f974 	bl	80139d6 <USB_ReadInterrupts>
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6f4:	2b80      	cmp	r3, #128	; 0x80
 800c6f6:	d13f      	bne.n	800c778 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c70a:	b292      	uxth	r2, r2
 800c70c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d12b      	bne.n	800c772 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c722:	b29a      	uxth	r2, r3
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f042 0204 	orr.w	r2, r2, #4
 800c72c:	b292      	uxth	r2, r2
 800c72e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800c73a:	b29a      	uxth	r2, r3
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f042 0208 	orr.w	r2, r2, #8
 800c744:	b292      	uxth	r2, r2
 800c746:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	089b      	lsrs	r3, r3, #2
 800c75e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c768:	2101      	movs	r1, #1
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f009 ff8a 	bl	8016684 <HAL_PCDEx_LPM_Callback>
 800c770:	e002      	b.n	800c778 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f009 fc7a 	bl	801606c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f007 f92a 	bl	80139d6 <USB_ReadInterrupts>
 800c782:	4603      	mov	r3, r0
 800c784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c78c:	d10e      	bne.n	800c7ac <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c796:	b29a      	uxth	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c7a0:	b292      	uxth	r2, r2
 800c7a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f009 fc33 	bl	8016012 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	f007 f910 	bl	80139d6 <USB_ReadInterrupts>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7c0:	d10b      	bne.n	800c7da <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800c7ca:	b29a      	uxth	r2, r3
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7d4:	b292      	uxth	r2, r2
 800c7d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800c7da:	bf00      	nop
 800c7dc:	3708      	adds	r7, #8
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b082      	sub	sp, #8
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c7f4:	2b01      	cmp	r3, #1
 800c7f6:	d101      	bne.n	800c7fc <HAL_PCD_SetAddress+0x1a>
 800c7f8:	2302      	movs	r3, #2
 800c7fa:	e013      	b.n	800c824 <HAL_PCD_SetAddress+0x42>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	78fa      	ldrb	r2, [r7, #3]
 800c808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	78fa      	ldrb	r2, [r7, #3]
 800c812:	4611      	mov	r1, r2
 800c814:	4618      	mov	r0, r3
 800c816:	f007 f89e 	bl	8013956 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2200      	movs	r2, #0
 800c81e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800c822:	2300      	movs	r3, #0
}
 800c824:	4618      	mov	r0, r3
 800c826:	3708      	adds	r7, #8
 800c828:	46bd      	mov	sp, r7
 800c82a:	bd80      	pop	{r7, pc}

0800c82c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	4608      	mov	r0, r1
 800c836:	4611      	mov	r1, r2
 800c838:	461a      	mov	r2, r3
 800c83a:	4603      	mov	r3, r0
 800c83c:	70fb      	strb	r3, [r7, #3]
 800c83e:	460b      	mov	r3, r1
 800c840:	803b      	strh	r3, [r7, #0]
 800c842:	4613      	mov	r3, r2
 800c844:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c84a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	da0e      	bge.n	800c870 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c852:	78fb      	ldrb	r3, [r7, #3]
 800c854:	f003 0307 	and.w	r3, r3, #7
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	4613      	mov	r3, r2
 800c85c:	009b      	lsls	r3, r3, #2
 800c85e:	4413      	add	r3, r2
 800c860:	00db      	lsls	r3, r3, #3
 800c862:	687a      	ldr	r2, [r7, #4]
 800c864:	4413      	add	r3, r2
 800c866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	2201      	movs	r2, #1
 800c86c:	705a      	strb	r2, [r3, #1]
 800c86e:	e00e      	b.n	800c88e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c870:	78fb      	ldrb	r3, [r7, #3]
 800c872:	f003 0207 	and.w	r2, r3, #7
 800c876:	4613      	mov	r3, r2
 800c878:	009b      	lsls	r3, r3, #2
 800c87a:	4413      	add	r3, r2
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c882:	687a      	ldr	r2, [r7, #4]
 800c884:	4413      	add	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	2200      	movs	r2, #0
 800c88c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c88e:	78fb      	ldrb	r3, [r7, #3]
 800c890:	f003 0307 	and.w	r3, r3, #7
 800c894:	b2da      	uxtb	r2, r3
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800c89a:	883a      	ldrh	r2, [r7, #0]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	78ba      	ldrb	r2, [r7, #2]
 800c8a4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	785b      	ldrb	r3, [r3, #1]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d004      	beq.n	800c8b8 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c8b8:	78bb      	ldrb	r3, [r7, #2]
 800c8ba:	2b02      	cmp	r3, #2
 800c8bc:	d102      	bne.n	800c8c4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2200      	movs	r2, #0
 800c8c2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <HAL_PCD_EP_Open+0xa6>
 800c8ce:	2302      	movs	r3, #2
 800c8d0:	e00e      	b.n	800c8f0 <HAL_PCD_EP_Open+0xc4>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	2201      	movs	r2, #1
 800c8d6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	68f9      	ldr	r1, [r7, #12]
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	f004 fee7 	bl	80116b4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800c8ee:	7afb      	ldrb	r3, [r7, #11]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	da0e      	bge.n	800c92a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c90c:	78fb      	ldrb	r3, [r7, #3]
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	1c5a      	adds	r2, r3, #1
 800c914:	4613      	mov	r3, r2
 800c916:	009b      	lsls	r3, r3, #2
 800c918:	4413      	add	r3, r2
 800c91a:	00db      	lsls	r3, r3, #3
 800c91c:	687a      	ldr	r2, [r7, #4]
 800c91e:	4413      	add	r3, r2
 800c920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2201      	movs	r2, #1
 800c926:	705a      	strb	r2, [r3, #1]
 800c928:	e00e      	b.n	800c948 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c92a:	78fb      	ldrb	r3, [r7, #3]
 800c92c:	f003 0207 	and.w	r2, r3, #7
 800c930:	4613      	mov	r3, r2
 800c932:	009b      	lsls	r3, r3, #2
 800c934:	4413      	add	r3, r2
 800c936:	00db      	lsls	r3, r3, #3
 800c938:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c93c:	687a      	ldr	r2, [r7, #4]
 800c93e:	4413      	add	r3, r2
 800c940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800c948:	78fb      	ldrb	r3, [r7, #3]
 800c94a:	f003 0307 	and.w	r3, r3, #7
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d101      	bne.n	800c962 <HAL_PCD_EP_Close+0x6a>
 800c95e:	2302      	movs	r3, #2
 800c960:	e00e      	b.n	800c980 <HAL_PCD_EP_Close+0x88>
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68f9      	ldr	r1, [r7, #12]
 800c970:	4618      	mov	r0, r3
 800c972:	f005 fa0d 	bl	8011d90 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	2200      	movs	r2, #0
 800c97a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800c97e:	2300      	movs	r3, #0
}
 800c980:	4618      	mov	r0, r3
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	607a      	str	r2, [r7, #4]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	460b      	mov	r3, r1
 800c996:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c998:	7afb      	ldrb	r3, [r7, #11]
 800c99a:	f003 0207 	and.w	r2, r3, #7
 800c99e:	4613      	mov	r3, r2
 800c9a0:	009b      	lsls	r3, r3, #2
 800c9a2:	4413      	add	r3, r2
 800c9a4:	00db      	lsls	r3, r3, #3
 800c9a6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	4413      	add	r3, r2
 800c9ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c9b0:	697b      	ldr	r3, [r7, #20]
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	683a      	ldr	r2, [r7, #0]
 800c9ba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c9c8:	7afb      	ldrb	r3, [r7, #11]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	b2da      	uxtb	r2, r3
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c9d4:	7afb      	ldrb	r3, [r7, #11]
 800c9d6:	f003 0307 	and.w	r3, r3, #7
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d106      	bne.n	800c9ec <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	6979      	ldr	r1, [r7, #20]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f005 fbc0 	bl	801216a <USB_EPStartXfer>
 800c9ea:	e005      	b.n	800c9f8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	6979      	ldr	r1, [r7, #20]
 800c9f2:	4618      	mov	r0, r3
 800c9f4:	f005 fbb9 	bl	801216a <USB_EPStartXfer>
  }

  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3718      	adds	r7, #24
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ca02:	b480      	push	{r7}
 800ca04:	b083      	sub	sp, #12
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	460b      	mov	r3, r1
 800ca0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	f003 0207 	and.w	r2, r3, #7
 800ca14:	6879      	ldr	r1, [r7, #4]
 800ca16:	4613      	mov	r3, r2
 800ca18:	009b      	lsls	r3, r3, #2
 800ca1a:	4413      	add	r3, r2
 800ca1c:	00db      	lsls	r3, r3, #3
 800ca1e:	440b      	add	r3, r1
 800ca20:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800ca24:	681b      	ldr	r3, [r3, #0]
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	370c      	adds	r7, #12
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca30:	4770      	bx	lr

0800ca32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ca32:	b580      	push	{r7, lr}
 800ca34:	b086      	sub	sp, #24
 800ca36:	af00      	add	r7, sp, #0
 800ca38:	60f8      	str	r0, [r7, #12]
 800ca3a:	607a      	str	r2, [r7, #4]
 800ca3c:	603b      	str	r3, [r7, #0]
 800ca3e:	460b      	mov	r3, r1
 800ca40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ca42:	7afb      	ldrb	r3, [r7, #11]
 800ca44:	f003 0307 	and.w	r3, r3, #7
 800ca48:	1c5a      	adds	r2, r3, #1
 800ca4a:	4613      	mov	r3, r2
 800ca4c:	009b      	lsls	r3, r3, #2
 800ca4e:	4413      	add	r3, r2
 800ca50:	00db      	lsls	r3, r3, #3
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	4413      	add	r3, r2
 800ca56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	683a      	ldr	r2, [r7, #0]
 800ca62:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	2201      	movs	r2, #1
 800ca68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	2200      	movs	r2, #0
 800ca76:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ca7e:	7afb      	ldrb	r3, [r7, #11]
 800ca80:	f003 0307 	and.w	r3, r3, #7
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ca8a:	7afb      	ldrb	r3, [r7, #11]
 800ca8c:	f003 0307 	and.w	r3, r3, #7
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d106      	bne.n	800caa2 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	6979      	ldr	r1, [r7, #20]
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f005 fb65 	bl	801216a <USB_EPStartXfer>
 800caa0:	e005      	b.n	800caae <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	6979      	ldr	r1, [r7, #20]
 800caa8:	4618      	mov	r0, r3
 800caaa:	f005 fb5e 	bl	801216a <USB_EPStartXfer>
  }

  return HAL_OK;
 800caae:	2300      	movs	r3, #0
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3718      	adds	r7, #24
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	460b      	mov	r3, r1
 800cac2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cac4:	78fb      	ldrb	r3, [r7, #3]
 800cac6:	f003 0207 	and.w	r2, r3, #7
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	685b      	ldr	r3, [r3, #4]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d901      	bls.n	800cad6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cad2:	2301      	movs	r3, #1
 800cad4:	e04c      	b.n	800cb70 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	da0e      	bge.n	800cafc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cade:	78fb      	ldrb	r3, [r7, #3]
 800cae0:	f003 0307 	and.w	r3, r3, #7
 800cae4:	1c5a      	adds	r2, r3, #1
 800cae6:	4613      	mov	r3, r2
 800cae8:	009b      	lsls	r3, r3, #2
 800caea:	4413      	add	r3, r2
 800caec:	00db      	lsls	r3, r3, #3
 800caee:	687a      	ldr	r2, [r7, #4]
 800caf0:	4413      	add	r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2201      	movs	r2, #1
 800caf8:	705a      	strb	r2, [r3, #1]
 800cafa:	e00c      	b.n	800cb16 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cafc:	78fa      	ldrb	r2, [r7, #3]
 800cafe:	4613      	mov	r3, r2
 800cb00:	009b      	lsls	r3, r3, #2
 800cb02:	4413      	add	r3, r2
 800cb04:	00db      	lsls	r3, r3, #3
 800cb06:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	4413      	add	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2200      	movs	r2, #0
 800cb14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2201      	movs	r2, #1
 800cb1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cb1c:	78fb      	ldrb	r3, [r7, #3]
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	b2da      	uxtb	r2, r3
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800cb2e:	2b01      	cmp	r3, #1
 800cb30:	d101      	bne.n	800cb36 <HAL_PCD_EP_SetStall+0x7e>
 800cb32:	2302      	movs	r3, #2
 800cb34:	e01c      	b.n	800cb70 <HAL_PCD_EP_SetStall+0xb8>
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	2201      	movs	r2, #1
 800cb3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68f9      	ldr	r1, [r7, #12]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f006 fe07 	bl	8013758 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cb4a:	78fb      	ldrb	r3, [r7, #3]
 800cb4c:	f003 0307 	and.w	r3, r3, #7
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d108      	bne.n	800cb66 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681a      	ldr	r2, [r3, #0]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4610      	mov	r0, r2
 800cb62:	f006 ff48 	bl	80139f6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2200      	movs	r2, #0
 800cb6a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	460b      	mov	r3, r1
 800cb82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cb84:	78fb      	ldrb	r3, [r7, #3]
 800cb86:	f003 020f 	and.w	r2, r3, #15
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d901      	bls.n	800cb96 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cb92:	2301      	movs	r3, #1
 800cb94:	e040      	b.n	800cc18 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cb96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da0e      	bge.n	800cbbc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cb9e:	78fb      	ldrb	r3, [r7, #3]
 800cba0:	f003 0307 	and.w	r3, r3, #7
 800cba4:	1c5a      	adds	r2, r3, #1
 800cba6:	4613      	mov	r3, r2
 800cba8:	009b      	lsls	r3, r3, #2
 800cbaa:	4413      	add	r3, r2
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	687a      	ldr	r2, [r7, #4]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	705a      	strb	r2, [r3, #1]
 800cbba:	e00e      	b.n	800cbda <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cbbc:	78fb      	ldrb	r3, [r7, #3]
 800cbbe:	f003 0207 	and.w	r2, r3, #7
 800cbc2:	4613      	mov	r3, r2
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4413      	add	r3, r2
 800cbc8:	00db      	lsls	r3, r3, #3
 800cbca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cbce:	687a      	ldr	r2, [r7, #4]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2200      	movs	r2, #0
 800cbde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	f003 0307 	and.w	r3, r3, #7
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800cbf2:	2b01      	cmp	r3, #1
 800cbf4:	d101      	bne.n	800cbfa <HAL_PCD_EP_ClrStall+0x82>
 800cbf6:	2302      	movs	r3, #2
 800cbf8:	e00e      	b.n	800cc18 <HAL_PCD_EP_ClrStall+0xa0>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2201      	movs	r2, #1
 800cbfe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68f9      	ldr	r1, [r7, #12]
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f006 fdf6 	bl	80137fa <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800cc16:	2300      	movs	r3, #0
}
 800cc18:	4618      	mov	r0, r3
 800cc1a:	3710      	adds	r7, #16
 800cc1c:	46bd      	mov	sp, r7
 800cc1e:	bd80      	pop	{r7, pc}

0800cc20 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b08e      	sub	sp, #56	; 0x38
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800cc28:	e2d6      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cc32:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800cc34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc36:	b2db      	uxtb	r3, r3
 800cc38:	f003 030f 	and.w	r3, r3, #15
 800cc3c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800cc40:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	f040 815b 	bne.w	800cf00 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800cc4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800cc4c:	f003 0310 	and.w	r3, r3, #16
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d150      	bne.n	800ccf6 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	881b      	ldrh	r3, [r3, #0]
 800cc5a:	b29b      	uxth	r3, r3
 800cc5c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800cc60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc64:	81fb      	strh	r3, [r7, #14]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	89fb      	ldrh	r3, [r7, #14]
 800cc6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800cc70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cc74:	b29b      	uxth	r3, r3
 800cc76:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	3328      	adds	r3, #40	; 0x28
 800cc7c:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc86:	b29b      	uxth	r3, r3
 800cc88:	461a      	mov	r2, r3
 800cc8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8c:	781b      	ldrb	r3, [r3, #0]
 800cc8e:	00db      	lsls	r3, r3, #3
 800cc90:	4413      	add	r3, r2
 800cc92:	687a      	ldr	r2, [r7, #4]
 800cc94:	6812      	ldr	r2, [r2, #0]
 800cc96:	4413      	add	r3, r2
 800cc98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800cc9c:	881b      	ldrh	r3, [r3, #0]
 800cc9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800cca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cca8:	695a      	ldr	r2, [r3, #20]
 800ccaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	441a      	add	r2, r3
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccb2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f009 f991 	bl	8015fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ccc2:	b2db      	uxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	f000 8287 	beq.w	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
 800ccca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cccc:	699b      	ldr	r3, [r3, #24]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f040 8282 	bne.w	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cce0:	b2da      	uxtb	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	b292      	uxth	r2, r2
 800cce8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ccf4:	e270      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800ccfc:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	881b      	ldrh	r3, [r3, #0]
 800cd04:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800cd06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cd08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d032      	beq.n	800cd76 <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	781b      	ldrb	r3, [r3, #0]
 800cd20:	00db      	lsls	r3, r3, #3
 800cd22:	4413      	add	r3, r2
 800cd24:	687a      	ldr	r2, [r7, #4]
 800cd26:	6812      	ldr	r2, [r2, #0]
 800cd28:	4413      	add	r3, r2
 800cd2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cd2e:	881b      	ldrh	r3, [r3, #0]
 800cd30:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6818      	ldr	r0, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800cd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd44:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800cd4a:	b29b      	uxth	r3, r3
 800cd4c:	f006 fea1 	bl	8013a92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	881b      	ldrh	r3, [r3, #0]
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	823b      	strh	r3, [r7, #16]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	8a3a      	ldrh	r2, [r7, #16]
 800cd66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd6a:	b292      	uxth	r2, r2
 800cd6c:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f009 f908 	bl	8015f84 <HAL_PCD_SetupStageCallback>
 800cd74:	e230      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800cd76:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f280 822c 	bge.w	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	881b      	ldrh	r3, [r3, #0]
 800cd86:	b29a      	uxth	r2, r3
 800cd88:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cd8c:	4013      	ands	r3, r2
 800cd8e:	83bb      	strh	r3, [r7, #28]
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	8bba      	ldrh	r2, [r7, #28]
 800cd96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd9a:	b292      	uxth	r2, r2
 800cd9c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cda6:	b29b      	uxth	r3, r3
 800cda8:	461a      	mov	r2, r3
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	00db      	lsls	r3, r3, #3
 800cdb0:	4413      	add	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	6812      	ldr	r2, [r2, #0]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cdbc:	881b      	ldrh	r3, [r3, #0]
 800cdbe:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800cdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800cdc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc8:	69db      	ldr	r3, [r3, #28]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d019      	beq.n	800ce02 <PCD_EP_ISR_Handler+0x1e2>
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	695b      	ldr	r3, [r3, #20]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d015      	beq.n	800ce02 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6818      	ldr	r0, [r3, #0]
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	6959      	ldr	r1, [r3, #20]
 800cdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800cde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	f006 fe53 	bl	8013a92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800cdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdee:	695a      	ldr	r2, [r3, #20]
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	441a      	add	r2, r3
 800cdf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f009 f8d3 	bl	8015fa8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	881b      	ldrh	r3, [r3, #0]
 800ce08:	b29b      	uxth	r3, r3
 800ce0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	f040 81e2 	bne.w	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	61bb      	str	r3, [r7, #24]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ce22:	b29b      	uxth	r3, r3
 800ce24:	461a      	mov	r2, r3
 800ce26:	69bb      	ldr	r3, [r7, #24]
 800ce28:	4413      	add	r3, r2
 800ce2a:	61bb      	str	r3, [r7, #24]
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ce32:	617b      	str	r3, [r7, #20]
 800ce34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce36:	691b      	ldr	r3, [r3, #16]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d112      	bne.n	800ce62 <PCD_EP_ISR_Handler+0x242>
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	881b      	ldrh	r3, [r3, #0]
 800ce40:	b29b      	uxth	r3, r3
 800ce42:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ce46:	b29a      	uxth	r2, r3
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	801a      	strh	r2, [r3, #0]
 800ce4c:	697b      	ldr	r3, [r7, #20]
 800ce4e:	881b      	ldrh	r3, [r3, #0]
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ce56:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ce5a:	b29a      	uxth	r2, r3
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	801a      	strh	r2, [r3, #0]
 800ce60:	e02f      	b.n	800cec2 <PCD_EP_ISR_Handler+0x2a2>
 800ce62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce64:	691b      	ldr	r3, [r3, #16]
 800ce66:	2b3e      	cmp	r3, #62	; 0x3e
 800ce68:	d813      	bhi.n	800ce92 <PCD_EP_ISR_Handler+0x272>
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	085b      	lsrs	r3, r3, #1
 800ce70:	633b      	str	r3, [r7, #48]	; 0x30
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	691b      	ldr	r3, [r3, #16]
 800ce76:	f003 0301 	and.w	r3, r3, #1
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d002      	beq.n	800ce84 <PCD_EP_ISR_Handler+0x264>
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	3301      	adds	r3, #1
 800ce82:	633b      	str	r3, [r7, #48]	; 0x30
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	029b      	lsls	r3, r3, #10
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	697b      	ldr	r3, [r7, #20]
 800ce8e:	801a      	strh	r2, [r3, #0]
 800ce90:	e017      	b.n	800cec2 <PCD_EP_ISR_Handler+0x2a2>
 800ce92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	095b      	lsrs	r3, r3, #5
 800ce98:	633b      	str	r3, [r7, #48]	; 0x30
 800ce9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	f003 031f 	and.w	r3, r3, #31
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d102      	bne.n	800ceac <PCD_EP_ISR_Handler+0x28c>
 800cea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	633b      	str	r3, [r7, #48]	; 0x30
 800ceac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	029b      	lsls	r3, r3, #10
 800ceb2:	b29b      	uxth	r3, r3
 800ceb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ceb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800cebc:	b29a      	uxth	r2, r3
 800cebe:	697b      	ldr	r3, [r7, #20]
 800cec0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	881b      	ldrh	r3, [r3, #0]
 800cec8:	b29b      	uxth	r3, r3
 800ceca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ced2:	827b      	strh	r3, [r7, #18]
 800ced4:	8a7b      	ldrh	r3, [r7, #18]
 800ced6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ceda:	827b      	strh	r3, [r7, #18]
 800cedc:	8a7b      	ldrh	r3, [r7, #18]
 800cede:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800cee2:	827b      	strh	r3, [r7, #18]
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	8a7b      	ldrh	r3, [r7, #18]
 800ceea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ceee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cef6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	8013      	strh	r3, [r2, #0]
 800cefe:	e16b      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	461a      	mov	r2, r3
 800cf06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	4413      	add	r3, r2
 800cf0e:	881b      	ldrh	r3, [r3, #0]
 800cf10:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800cf12:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f280 80e4 	bge.w	800d0e4 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	461a      	mov	r2, r3
 800cf22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cf26:	009b      	lsls	r3, r3, #2
 800cf28:	4413      	add	r3, r2
 800cf2a:	881b      	ldrh	r3, [r3, #0]
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	f640 738f 	movw	r3, #3983	; 0xf8f
 800cf32:	4013      	ands	r3, r2
 800cf34:	853b      	strh	r3, [r7, #40]	; 0x28
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	461a      	mov	r2, r3
 800cf3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800cf40:	009b      	lsls	r3, r3, #2
 800cf42:	4413      	add	r3, r2
 800cf44:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cf46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cf4a:	b292      	uxth	r2, r2
 800cf4c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800cf4e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800cf52:	4613      	mov	r3, r2
 800cf54:	009b      	lsls	r3, r3, #2
 800cf56:	4413      	add	r3, r2
 800cf58:	00db      	lsls	r3, r3, #3
 800cf5a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800cf5e:	687a      	ldr	r2, [r7, #4]
 800cf60:	4413      	add	r3, r2
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	7b1b      	ldrb	r3, [r3, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d120      	bne.n	800cfae <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	461a      	mov	r2, r3
 800cf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7a:	781b      	ldrb	r3, [r3, #0]
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	4413      	add	r3, r2
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	6812      	ldr	r2, [r2, #0]
 800cf84:	4413      	add	r3, r2
 800cf86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800cf8a:	881b      	ldrh	r3, [r3, #0]
 800cf8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800cf90:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800cf92:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	f000 8083 	beq.w	800d0a0 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	6818      	ldr	r0, [r3, #0]
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	6959      	ldr	r1, [r3, #20]
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	88da      	ldrh	r2, [r3, #6]
 800cfa6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cfa8:	f006 fd73 	bl	8013a92 <USB_ReadPMA>
 800cfac:	e078      	b.n	800d0a0 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800cfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfb0:	78db      	ldrb	r3, [r3, #3]
 800cfb2:	2b02      	cmp	r3, #2
 800cfb4:	d108      	bne.n	800cfc8 <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800cfb6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800cfb8:	461a      	mov	r2, r3
 800cfba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 f919 	bl	800d1f4 <HAL_PCD_EP_DB_Receive>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	86fb      	strh	r3, [r7, #54]	; 0x36
 800cfc6:	e06b      	b.n	800d0a0 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	461a      	mov	r2, r3
 800cfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfd0:	781b      	ldrb	r3, [r3, #0]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	4413      	add	r3, r2
 800cfd6:	881b      	ldrh	r3, [r3, #0]
 800cfd8:	b29b      	uxth	r3, r3
 800cfda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cfde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cfe2:	847b      	strh	r3, [r7, #34]	; 0x22
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	461a      	mov	r2, r3
 800cfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfec:	781b      	ldrb	r3, [r3, #0]
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	441a      	add	r2, r3
 800cff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800cff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800cffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d000:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d004:	b29b      	uxth	r3, r3
 800d006:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	461a      	mov	r2, r3
 800d00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d010:	781b      	ldrb	r3, [r3, #0]
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	4413      	add	r3, r2
 800d016:	881b      	ldrh	r3, [r3, #0]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d01f      	beq.n	800d062 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d02a:	b29b      	uxth	r3, r3
 800d02c:	461a      	mov	r2, r3
 800d02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	00db      	lsls	r3, r3, #3
 800d034:	4413      	add	r3, r2
 800d036:	687a      	ldr	r2, [r7, #4]
 800d038:	6812      	ldr	r2, [r2, #0]
 800d03a:	4413      	add	r3, r2
 800d03c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d040:	881b      	ldrh	r3, [r3, #0]
 800d042:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d046:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800d048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d028      	beq.n	800d0a0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6818      	ldr	r0, [r3, #0]
 800d052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d054:	6959      	ldr	r1, [r3, #20]
 800d056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d058:	891a      	ldrh	r2, [r3, #8]
 800d05a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d05c:	f006 fd19 	bl	8013a92 <USB_ReadPMA>
 800d060:	e01e      	b.n	800d0a0 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d06a:	b29b      	uxth	r3, r3
 800d06c:	461a      	mov	r2, r3
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	4413      	add	r3, r2
 800d076:	687a      	ldr	r2, [r7, #4]
 800d078:	6812      	ldr	r2, [r2, #0]
 800d07a:	4413      	add	r3, r2
 800d07c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d080:	881b      	ldrh	r3, [r3, #0]
 800d082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d086:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800d088:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d008      	beq.n	800d0a0 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6818      	ldr	r0, [r3, #0]
 800d092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d094:	6959      	ldr	r1, [r3, #20]
 800d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d098:	895a      	ldrh	r2, [r3, #10]
 800d09a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d09c:	f006 fcf9 	bl	8013a92 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0a2:	69da      	ldr	r2, [r3, #28]
 800d0a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0a6:	441a      	add	r2, r3
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ae:	695a      	ldr	r2, [r3, #20]
 800d0b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d0b2:	441a      	add	r2, r3
 800d0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0b6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ba:	699b      	ldr	r3, [r3, #24]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d004      	beq.n	800d0ca <PCD_EP_ISR_Handler+0x4aa>
 800d0c0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c4:	691b      	ldr	r3, [r3, #16]
 800d0c6:	429a      	cmp	r2, r3
 800d0c8:	d206      	bcs.n	800d0d8 <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f008 ff69 	bl	8015fa8 <HAL_PCD_DataOutStageCallback>
 800d0d6:	e005      	b.n	800d0e4 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f005 f843 	bl	801216a <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d0e4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d0e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d074      	beq.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800d0ee:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d0f2:	1c5a      	adds	r2, r3, #1
 800d0f4:	4613      	mov	r3, r2
 800d0f6:	009b      	lsls	r3, r3, #2
 800d0f8:	4413      	add	r3, r2
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	687a      	ldr	r2, [r7, #4]
 800d0fe:	4413      	add	r3, r2
 800d100:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	461a      	mov	r2, r3
 800d108:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d10c:	009b      	lsls	r3, r3, #2
 800d10e:	4413      	add	r3, r2
 800d110:	881b      	ldrh	r3, [r3, #0]
 800d112:	b29b      	uxth	r3, r3
 800d114:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800d118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d11c:	843b      	strh	r3, [r7, #32]
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	461a      	mov	r2, r3
 800d124:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d128:	009b      	lsls	r3, r3, #2
 800d12a:	441a      	add	r2, r3
 800d12c:	8c3b      	ldrh	r3, [r7, #32]
 800d12e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d132:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d136:	b29b      	uxth	r3, r3
 800d138:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800d13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d13c:	78db      	ldrb	r3, [r3, #3]
 800d13e:	2b02      	cmp	r3, #2
 800d140:	d144      	bne.n	800d1cc <PCD_EP_ISR_Handler+0x5ac>
 800d142:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d13f      	bne.n	800d1cc <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d154:	b29b      	uxth	r3, r3
 800d156:	461a      	mov	r2, r3
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	781b      	ldrb	r3, [r3, #0]
 800d15c:	00db      	lsls	r3, r3, #3
 800d15e:	4413      	add	r3, r2
 800d160:	687a      	ldr	r2, [r7, #4]
 800d162:	6812      	ldr	r2, [r2, #0]
 800d164:	4413      	add	r3, r2
 800d166:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d16a:	881b      	ldrh	r3, [r3, #0]
 800d16c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d170:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	699a      	ldr	r2, [r3, #24]
 800d176:	8bfb      	ldrh	r3, [r7, #30]
 800d178:	429a      	cmp	r2, r3
 800d17a:	d906      	bls.n	800d18a <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800d17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17e:	699a      	ldr	r2, [r3, #24]
 800d180:	8bfb      	ldrh	r3, [r7, #30]
 800d182:	1ad2      	subs	r2, r2, r3
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	619a      	str	r2, [r3, #24]
 800d188:	e002      	b.n	800d190 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	2200      	movs	r2, #0
 800d18e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800d190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d192:	699b      	ldr	r3, [r3, #24]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d106      	bne.n	800d1a6 <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	4619      	mov	r1, r3
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f008 ff1d 	bl	8015fde <HAL_PCD_DataInStageCallback>
 800d1a4:	e018      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	695a      	ldr	r2, [r3, #20]
 800d1aa:	8bfb      	ldrh	r3, [r7, #30]
 800d1ac:	441a      	add	r2, r3
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b4:	69da      	ldr	r2, [r3, #28]
 800d1b6:	8bfb      	ldrh	r3, [r7, #30]
 800d1b8:	441a      	add	r2, r3
 800d1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f004 ffd0 	bl	801216a <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800d1ca:	e005      	b.n	800d1d8 <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800d1cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f917 	bl	800d406 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	b21b      	sxth	r3, r3
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f6ff ad20 	blt.w	800cc2a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800d1ea:	2300      	movs	r3, #0
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3738      	adds	r7, #56	; 0x38
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b088      	sub	sp, #32
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	60f8      	str	r0, [r7, #12]
 800d1fc:	60b9      	str	r1, [r7, #8]
 800d1fe:	4613      	mov	r3, r2
 800d200:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d202:	88fb      	ldrh	r3, [r7, #6]
 800d204:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d07c      	beq.n	800d306 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d214:	b29b      	uxth	r3, r3
 800d216:	461a      	mov	r2, r3
 800d218:	68bb      	ldr	r3, [r7, #8]
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	00db      	lsls	r3, r3, #3
 800d21e:	4413      	add	r3, r2
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	6812      	ldr	r2, [r2, #0]
 800d224:	4413      	add	r3, r2
 800d226:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d22a:	881b      	ldrh	r3, [r3, #0]
 800d22c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d230:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	699a      	ldr	r2, [r3, #24]
 800d236:	8b7b      	ldrh	r3, [r7, #26]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d306      	bcc.n	800d24a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800d23c:	68bb      	ldr	r3, [r7, #8]
 800d23e:	699a      	ldr	r2, [r3, #24]
 800d240:	8b7b      	ldrh	r3, [r7, #26]
 800d242:	1ad2      	subs	r2, r2, r3
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	619a      	str	r2, [r3, #24]
 800d248:	e002      	b.n	800d250 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	2200      	movs	r2, #0
 800d24e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	699b      	ldr	r3, [r3, #24]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d123      	bne.n	800d2a0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	461a      	mov	r2, r3
 800d25e:	68bb      	ldr	r3, [r7, #8]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	881b      	ldrh	r3, [r3, #0]
 800d268:	b29b      	uxth	r3, r3
 800d26a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d26e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d272:	833b      	strh	r3, [r7, #24]
 800d274:	8b3b      	ldrh	r3, [r7, #24]
 800d276:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d27a:	833b      	strh	r3, [r7, #24]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	461a      	mov	r2, r3
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	441a      	add	r2, r3
 800d28a:	8b3b      	ldrh	r3, [r7, #24]
 800d28c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d290:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d294:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d2a0:	88fb      	ldrh	r3, [r7, #6]
 800d2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d01f      	beq.n	800d2ea <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	461a      	mov	r2, r3
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	781b      	ldrb	r3, [r3, #0]
 800d2b4:	009b      	lsls	r3, r3, #2
 800d2b6:	4413      	add	r3, r2
 800d2b8:	881b      	ldrh	r3, [r3, #0]
 800d2ba:	b29b      	uxth	r3, r3
 800d2bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d2c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2c4:	82fb      	strh	r3, [r7, #22]
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	781b      	ldrb	r3, [r3, #0]
 800d2d0:	009b      	lsls	r3, r3, #2
 800d2d2:	441a      	add	r2, r3
 800d2d4:	8afb      	ldrh	r3, [r7, #22]
 800d2d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d2de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d2e2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d2ea:	8b7b      	ldrh	r3, [r7, #26]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	f000 8085 	beq.w	800d3fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	6818      	ldr	r0, [r3, #0]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	6959      	ldr	r1, [r3, #20]
 800d2fa:	68bb      	ldr	r3, [r7, #8]
 800d2fc:	891a      	ldrh	r2, [r3, #8]
 800d2fe:	8b7b      	ldrh	r3, [r7, #26]
 800d300:	f006 fbc7 	bl	8013a92 <USB_ReadPMA>
 800d304:	e07a      	b.n	800d3fc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d30e:	b29b      	uxth	r3, r3
 800d310:	461a      	mov	r2, r3
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	00db      	lsls	r3, r3, #3
 800d318:	4413      	add	r3, r2
 800d31a:	68fa      	ldr	r2, [r7, #12]
 800d31c:	6812      	ldr	r2, [r2, #0]
 800d31e:	4413      	add	r3, r2
 800d320:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d32a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800d32c:	68bb      	ldr	r3, [r7, #8]
 800d32e:	699a      	ldr	r2, [r3, #24]
 800d330:	8b7b      	ldrh	r3, [r7, #26]
 800d332:	429a      	cmp	r2, r3
 800d334:	d306      	bcc.n	800d344 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	699a      	ldr	r2, [r3, #24]
 800d33a:	8b7b      	ldrh	r3, [r7, #26]
 800d33c:	1ad2      	subs	r2, r2, r3
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	619a      	str	r2, [r3, #24]
 800d342:	e002      	b.n	800d34a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2200      	movs	r2, #0
 800d348:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d123      	bne.n	800d39a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	461a      	mov	r2, r3
 800d358:	68bb      	ldr	r3, [r7, #8]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	4413      	add	r3, r2
 800d360:	881b      	ldrh	r3, [r3, #0]
 800d362:	b29b      	uxth	r3, r3
 800d364:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d36c:	83fb      	strh	r3, [r7, #30]
 800d36e:	8bfb      	ldrh	r3, [r7, #30]
 800d370:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800d374:	83fb      	strh	r3, [r7, #30]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	461a      	mov	r2, r3
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	009b      	lsls	r3, r3, #2
 800d382:	441a      	add	r2, r3
 800d384:	8bfb      	ldrh	r3, [r7, #30]
 800d386:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d38a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d38e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d396:	b29b      	uxth	r3, r3
 800d398:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d11f      	bne.n	800d3e4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d3ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3be:	83bb      	strh	r3, [r7, #28]
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	461a      	mov	r2, r3
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	441a      	add	r2, r3
 800d3ce:	8bbb      	ldrh	r3, [r7, #28]
 800d3d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d3dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800d3e0:	b29b      	uxth	r3, r3
 800d3e2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800d3e4:	8b7b      	ldrh	r3, [r7, #26]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d008      	beq.n	800d3fc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6818      	ldr	r0, [r3, #0]
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	6959      	ldr	r1, [r3, #20]
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	895a      	ldrh	r2, [r3, #10]
 800d3f6:	8b7b      	ldrh	r3, [r7, #26]
 800d3f8:	f006 fb4b 	bl	8013a92 <USB_ReadPMA>
    }
  }

  return count;
 800d3fc:	8b7b      	ldrh	r3, [r7, #26]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3720      	adds	r7, #32
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b0a2      	sub	sp, #136	; 0x88
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	60f8      	str	r0, [r7, #12]
 800d40e:	60b9      	str	r1, [r7, #8]
 800d410:	4613      	mov	r3, r2
 800d412:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d414:	88fb      	ldrh	r3, [r7, #6]
 800d416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 81c5 	beq.w	800d7aa <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d428:	b29b      	uxth	r3, r3
 800d42a:	461a      	mov	r2, r3
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	00db      	lsls	r3, r3, #3
 800d432:	4413      	add	r3, r2
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	6812      	ldr	r2, [r2, #0]
 800d438:	4413      	add	r3, r2
 800d43a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d43e:	881b      	ldrh	r3, [r3, #0]
 800d440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d444:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800d448:	68bb      	ldr	r3, [r7, #8]
 800d44a:	699a      	ldr	r2, [r3, #24]
 800d44c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d450:	429a      	cmp	r2, r3
 800d452:	d907      	bls.n	800d464 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800d454:	68bb      	ldr	r3, [r7, #8]
 800d456:	699a      	ldr	r2, [r3, #24]
 800d458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d45c:	1ad2      	subs	r2, r2, r3
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	619a      	str	r2, [r3, #24]
 800d462:	e002      	b.n	800d46a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2200      	movs	r2, #0
 800d468:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	f040 80b9 	bne.w	800d5e6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	785b      	ldrb	r3, [r3, #1]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d126      	bne.n	800d4ca <HAL_PCD_EP_DB_Transmit+0xc4>
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	62bb      	str	r3, [r7, #40]	; 0x28
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	461a      	mov	r2, r3
 800d48e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d490:	4413      	add	r3, r2
 800d492:	62bb      	str	r3, [r7, #40]	; 0x28
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	00da      	lsls	r2, r3, #3
 800d49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49c:	4413      	add	r3, r2
 800d49e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
 800d4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d4ae:	b29a      	uxth	r2, r3
 800d4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b2:	801a      	strh	r2, [r3, #0]
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	881b      	ldrh	r3, [r3, #0]
 800d4b8:	b29b      	uxth	r3, r3
 800d4ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d4be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d4c2:	b29a      	uxth	r2, r3
 800d4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c6:	801a      	strh	r2, [r3, #0]
 800d4c8:	e01a      	b.n	800d500 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	785b      	ldrb	r3, [r3, #1]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d116      	bne.n	800d500 <HAL_PCD_EP_DB_Transmit+0xfa>
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	633b      	str	r3, [r7, #48]	; 0x30
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d4e0:	b29b      	uxth	r3, r3
 800d4e2:	461a      	mov	r2, r3
 800d4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e6:	4413      	add	r3, r2
 800d4e8:	633b      	str	r3, [r7, #48]	; 0x30
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	00da      	lsls	r2, r3, #3
 800d4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d4f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	623b      	str	r3, [r7, #32]
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	785b      	ldrb	r3, [r3, #1]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d126      	bne.n	800d55c <HAL_PCD_EP_DB_Transmit+0x156>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	61bb      	str	r3, [r7, #24]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	461a      	mov	r2, r3
 800d520:	69bb      	ldr	r3, [r7, #24]
 800d522:	4413      	add	r3, r2
 800d524:	61bb      	str	r3, [r7, #24]
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	781b      	ldrb	r3, [r3, #0]
 800d52a:	00da      	lsls	r2, r3, #3
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	4413      	add	r3, r2
 800d530:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d534:	617b      	str	r3, [r7, #20]
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	881b      	ldrh	r3, [r3, #0]
 800d53a:	b29b      	uxth	r3, r3
 800d53c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d540:	b29a      	uxth	r2, r3
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	801a      	strh	r2, [r3, #0]
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	881b      	ldrh	r3, [r3, #0]
 800d54a:	b29b      	uxth	r3, r3
 800d54c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d550:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d554:	b29a      	uxth	r2, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	801a      	strh	r2, [r3, #0]
 800d55a:	e017      	b.n	800d58c <HAL_PCD_EP_DB_Transmit+0x186>
 800d55c:	68bb      	ldr	r3, [r7, #8]
 800d55e:	785b      	ldrb	r3, [r3, #1]
 800d560:	2b01      	cmp	r3, #1
 800d562:	d113      	bne.n	800d58c <HAL_PCD_EP_DB_Transmit+0x186>
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	461a      	mov	r2, r3
 800d570:	6a3b      	ldr	r3, [r7, #32]
 800d572:	4413      	add	r3, r2
 800d574:	623b      	str	r3, [r7, #32]
 800d576:	68bb      	ldr	r3, [r7, #8]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	00da      	lsls	r2, r3, #3
 800d57c:	6a3b      	ldr	r3, [r7, #32]
 800d57e:	4413      	add	r3, r2
 800d580:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d584:	61fb      	str	r3, [r7, #28]
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	2200      	movs	r2, #0
 800d58a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	4619      	mov	r1, r3
 800d592:	68f8      	ldr	r0, [r7, #12]
 800d594:	f008 fd23 	bl	8015fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d598:	88fb      	ldrh	r3, [r7, #6]
 800d59a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f000 82d2 	beq.w	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	781b      	ldrb	r3, [r3, #0]
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	b29b      	uxth	r3, r3
 800d5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5be:	827b      	strh	r3, [r7, #18]
 800d5c0:	68fb      	ldr	r3, [r7, #12]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	009b      	lsls	r3, r3, #2
 800d5cc:	441a      	add	r2, r3
 800d5ce:	8a7b      	ldrh	r3, [r7, #18]
 800d5d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d5d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d5d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5e0:	b29b      	uxth	r3, r3
 800d5e2:	8013      	strh	r3, [r2, #0]
 800d5e4:	e2b0      	b.n	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800d5e6:	88fb      	ldrh	r3, [r7, #6]
 800d5e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d021      	beq.n	800d634 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	781b      	ldrb	r3, [r3, #0]
 800d5fa:	009b      	lsls	r3, r3, #2
 800d5fc:	4413      	add	r3, r2
 800d5fe:	881b      	ldrh	r3, [r3, #0]
 800d600:	b29b      	uxth	r3, r3
 800d602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d60a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	461a      	mov	r2, r3
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	441a      	add	r2, r3
 800d61c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800d620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d628:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d630:	b29b      	uxth	r3, r3
 800d632:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d63a:	2b01      	cmp	r3, #1
 800d63c:	f040 8284 	bne.w	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	695a      	ldr	r2, [r3, #20]
 800d644:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d648:	441a      	add	r2, r3
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	69da      	ldr	r2, [r3, #28]
 800d652:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d656:	441a      	add	r2, r3
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d65c:	68bb      	ldr	r3, [r7, #8]
 800d65e:	6a1a      	ldr	r2, [r3, #32]
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	691b      	ldr	r3, [r3, #16]
 800d664:	429a      	cmp	r2, r3
 800d666:	d309      	bcc.n	800d67c <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	691b      	ldr	r3, [r3, #16]
 800d66c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6a1a      	ldr	r2, [r3, #32]
 800d672:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d674:	1ad2      	subs	r2, r2, r3
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	621a      	str	r2, [r3, #32]
 800d67a:	e015      	b.n	800d6a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d107      	bne.n	800d694 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 800d684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d688:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800d68a:	68bb      	ldr	r3, [r7, #8]
 800d68c:	2200      	movs	r2, #0
 800d68e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800d692:	e009      	b.n	800d6a8 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	6a1b      	ldr	r3, [r3, #32]
 800d6a0:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	785b      	ldrb	r3, [r3, #1]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d155      	bne.n	800d75c <HAL_PCD_EP_DB_Transmit+0x356>
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	461a      	mov	r2, r3
 800d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6c4:	4413      	add	r3, r2
 800d6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	00da      	lsls	r2, r3, #3
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d0:	4413      	add	r3, r2
 800d6d2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d6d6:	637b      	str	r3, [r7, #52]	; 0x34
 800d6d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d112      	bne.n	800d704 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800d6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6e0:	881b      	ldrh	r3, [r3, #0]
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d6e8:	b29a      	uxth	r2, r3
 800d6ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6ec:	801a      	strh	r2, [r3, #0]
 800d6ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6f0:	881b      	ldrh	r3, [r3, #0]
 800d6f2:	b29b      	uxth	r3, r3
 800d6f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d6f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d6fc:	b29a      	uxth	r2, r3
 800d6fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d700:	801a      	strh	r2, [r3, #0]
 800d702:	e047      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d706:	2b3e      	cmp	r3, #62	; 0x3e
 800d708:	d811      	bhi.n	800d72e <HAL_PCD_EP_DB_Transmit+0x328>
 800d70a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d70c:	085b      	lsrs	r3, r3, #1
 800d70e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d712:	f003 0301 	and.w	r3, r3, #1
 800d716:	2b00      	cmp	r3, #0
 800d718:	d002      	beq.n	800d720 <HAL_PCD_EP_DB_Transmit+0x31a>
 800d71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d71c:	3301      	adds	r3, #1
 800d71e:	64bb      	str	r3, [r7, #72]	; 0x48
 800d720:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d722:	b29b      	uxth	r3, r3
 800d724:	029b      	lsls	r3, r3, #10
 800d726:	b29a      	uxth	r2, r3
 800d728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d72a:	801a      	strh	r2, [r3, #0]
 800d72c:	e032      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d72e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d730:	095b      	lsrs	r3, r3, #5
 800d732:	64bb      	str	r3, [r7, #72]	; 0x48
 800d734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d736:	f003 031f 	and.w	r3, r3, #31
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d102      	bne.n	800d744 <HAL_PCD_EP_DB_Transmit+0x33e>
 800d73e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d740:	3b01      	subs	r3, #1
 800d742:	64bb      	str	r3, [r7, #72]	; 0x48
 800d744:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d746:	b29b      	uxth	r3, r3
 800d748:	029b      	lsls	r3, r3, #10
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d754:	b29a      	uxth	r2, r3
 800d756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d758:	801a      	strh	r2, [r3, #0]
 800d75a:	e01b      	b.n	800d794 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	785b      	ldrb	r3, [r3, #1]
 800d760:	2b01      	cmp	r3, #1
 800d762:	d117      	bne.n	800d794 <HAL_PCD_EP_DB_Transmit+0x38e>
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	643b      	str	r3, [r7, #64]	; 0x40
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d772:	b29b      	uxth	r3, r3
 800d774:	461a      	mov	r2, r3
 800d776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d778:	4413      	add	r3, r2
 800d77a:	643b      	str	r3, [r7, #64]	; 0x40
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	781b      	ldrb	r3, [r3, #0]
 800d780:	00da      	lsls	r2, r3, #3
 800d782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d784:	4413      	add	r3, r2
 800d786:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d78a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d78c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d78e:	b29a      	uxth	r2, r3
 800d790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d792:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	6959      	ldr	r1, [r3, #20]
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	891a      	ldrh	r2, [r3, #8]
 800d7a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d7a2:	b29b      	uxth	r3, r3
 800d7a4:	f006 f933 	bl	8013a0e <USB_WritePMA>
 800d7a8:	e1ce      	b.n	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d7b2:	b29b      	uxth	r3, r3
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	00db      	lsls	r3, r3, #3
 800d7bc:	4413      	add	r3, r2
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	6812      	ldr	r2, [r2, #0]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d7c8:	881b      	ldrh	r3, [r3, #0]
 800d7ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d7ce:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800d7d2:	68bb      	ldr	r3, [r7, #8]
 800d7d4:	699a      	ldr	r2, [r3, #24]
 800d7d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d7da:	429a      	cmp	r2, r3
 800d7dc:	d307      	bcc.n	800d7ee <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	699a      	ldr	r2, [r3, #24]
 800d7e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d7e6:	1ad2      	subs	r2, r2, r3
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	619a      	str	r2, [r3, #24]
 800d7ec:	e002      	b.n	800d7f4 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	f040 80c4 	bne.w	800d986 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	785b      	ldrb	r3, [r3, #1]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d126      	bne.n	800d854 <HAL_PCD_EP_DB_Transmit+0x44e>
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d814:	b29b      	uxth	r3, r3
 800d816:	461a      	mov	r2, r3
 800d818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d81a:	4413      	add	r3, r2
 800d81c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	00da      	lsls	r2, r3, #3
 800d824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d826:	4413      	add	r3, r2
 800d828:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d82c:	66bb      	str	r3, [r7, #104]	; 0x68
 800d82e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	b29b      	uxth	r3, r3
 800d834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d838:	b29a      	uxth	r2, r3
 800d83a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d83c:	801a      	strh	r2, [r3, #0]
 800d83e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d840:	881b      	ldrh	r3, [r3, #0]
 800d842:	b29b      	uxth	r3, r3
 800d844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d850:	801a      	strh	r2, [r3, #0]
 800d852:	e01a      	b.n	800d88a <HAL_PCD_EP_DB_Transmit+0x484>
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	785b      	ldrb	r3, [r3, #1]
 800d858:	2b01      	cmp	r3, #1
 800d85a:	d116      	bne.n	800d88a <HAL_PCD_EP_DB_Transmit+0x484>
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	677b      	str	r3, [r7, #116]	; 0x74
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	461a      	mov	r2, r3
 800d86e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d870:	4413      	add	r3, r2
 800d872:	677b      	str	r3, [r7, #116]	; 0x74
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	00da      	lsls	r2, r3, #3
 800d87a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d87c:	4413      	add	r3, r2
 800d87e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800d882:	673b      	str	r3, [r7, #112]	; 0x70
 800d884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d886:	2200      	movs	r2, #0
 800d888:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	67bb      	str	r3, [r7, #120]	; 0x78
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	785b      	ldrb	r3, [r3, #1]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d12f      	bne.n	800d8f8 <HAL_PCD_EP_DB_Transmit+0x4f2>
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	461a      	mov	r2, r3
 800d8ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d8b6:	68bb      	ldr	r3, [r7, #8]
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	00da      	lsls	r2, r3, #3
 800d8bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d8c0:	4413      	add	r3, r2
 800d8c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d8c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d8ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8ce:	881b      	ldrh	r3, [r3, #0]
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8dc:	801a      	strh	r2, [r3, #0]
 800d8de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8e2:	881b      	ldrh	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d8ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8f4:	801a      	strh	r2, [r3, #0]
 800d8f6:	e017      	b.n	800d928 <HAL_PCD_EP_DB_Transmit+0x522>
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	785b      	ldrb	r3, [r3, #1]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d113      	bne.n	800d928 <HAL_PCD_EP_DB_Transmit+0x522>
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800d908:	b29b      	uxth	r3, r3
 800d90a:	461a      	mov	r2, r3
 800d90c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d90e:	4413      	add	r3, r2
 800d910:	67bb      	str	r3, [r7, #120]	; 0x78
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	00da      	lsls	r2, r3, #3
 800d918:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d91a:	4413      	add	r3, r2
 800d91c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800d920:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d922:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d924:	2200      	movs	r2, #0
 800d926:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	781b      	ldrb	r3, [r3, #0]
 800d92c:	4619      	mov	r1, r3
 800d92e:	68f8      	ldr	r0, [r7, #12]
 800d930:	f008 fb55 	bl	8015fde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d934:	88fb      	ldrh	r3, [r7, #6]
 800d936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	f040 8104 	bne.w	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	461a      	mov	r2, r3
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	4413      	add	r3, r2
 800d94e:	881b      	ldrh	r3, [r3, #0]
 800d950:	b29b      	uxth	r3, r3
 800d952:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d95a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	461a      	mov	r2, r3
 800d964:	68bb      	ldr	r3, [r7, #8]
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	009b      	lsls	r3, r3, #2
 800d96a:	441a      	add	r2, r3
 800d96c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800d970:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d974:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d978:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d97c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d980:	b29b      	uxth	r3, r3
 800d982:	8013      	strh	r3, [r2, #0]
 800d984:	e0e0      	b.n	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800d986:	88fb      	ldrh	r3, [r7, #6]
 800d988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d121      	bne.n	800d9d4 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	461a      	mov	r2, r3
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d9a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9aa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	461a      	mov	r2, r3
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	781b      	ldrb	r3, [r3, #0]
 800d9b8:	009b      	lsls	r3, r3, #2
 800d9ba:	441a      	add	r2, r3
 800d9bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800d9c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d9c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d9c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800d9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9d0:	b29b      	uxth	r3, r3
 800d9d2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	f040 80b4 	bne.w	800db48 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	695a      	ldr	r2, [r3, #20]
 800d9e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d9e8:	441a      	add	r2, r3
 800d9ea:	68bb      	ldr	r3, [r7, #8]
 800d9ec:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	69da      	ldr	r2, [r3, #28]
 800d9f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d9f6:	441a      	add	r2, r3
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	6a1a      	ldr	r2, [r3, #32]
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	429a      	cmp	r2, r3
 800da06:	d309      	bcc.n	800da1c <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800da08:	68bb      	ldr	r3, [r7, #8]
 800da0a:	691b      	ldr	r3, [r3, #16]
 800da0c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	6a1a      	ldr	r2, [r3, #32]
 800da12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da14:	1ad2      	subs	r2, r2, r3
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	621a      	str	r2, [r3, #32]
 800da1a:	e015      	b.n	800da48 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	6a1b      	ldr	r3, [r3, #32]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d107      	bne.n	800da34 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 800da24:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800da28:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	2200      	movs	r2, #0
 800da2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800da32:	e009      	b.n	800da48 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	6a1b      	ldr	r3, [r3, #32]
 800da38:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	2200      	movs	r2, #0
 800da3e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	2200      	movs	r2, #0
 800da44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	667b      	str	r3, [r7, #100]	; 0x64
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	785b      	ldrb	r3, [r3, #1]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d155      	bne.n	800db02 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800da64:	b29b      	uxth	r3, r3
 800da66:	461a      	mov	r2, r3
 800da68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da6a:	4413      	add	r3, r2
 800da6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da6e:	68bb      	ldr	r3, [r7, #8]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	00da      	lsls	r2, r3, #3
 800da74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da76:	4413      	add	r3, r2
 800da78:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800da7c:	65bb      	str	r3, [r7, #88]	; 0x58
 800da7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da80:	2b00      	cmp	r3, #0
 800da82:	d112      	bne.n	800daaa <HAL_PCD_EP_DB_Transmit+0x6a4>
 800da84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da86:	881b      	ldrh	r3, [r3, #0]
 800da88:	b29b      	uxth	r3, r3
 800da8a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800da8e:	b29a      	uxth	r2, r3
 800da90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da92:	801a      	strh	r2, [r3, #0]
 800da94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da96:	881b      	ldrh	r3, [r3, #0]
 800da98:	b29b      	uxth	r3, r3
 800da9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800da9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800daa2:	b29a      	uxth	r2, r3
 800daa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800daa6:	801a      	strh	r2, [r3, #0]
 800daa8:	e044      	b.n	800db34 <HAL_PCD_EP_DB_Transmit+0x72e>
 800daaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daac:	2b3e      	cmp	r3, #62	; 0x3e
 800daae:	d811      	bhi.n	800dad4 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800dab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	657b      	str	r3, [r7, #84]	; 0x54
 800dab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d002      	beq.n	800dac6 <HAL_PCD_EP_DB_Transmit+0x6c0>
 800dac0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac2:	3301      	adds	r3, #1
 800dac4:	657b      	str	r3, [r7, #84]	; 0x54
 800dac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dac8:	b29b      	uxth	r3, r3
 800daca:	029b      	lsls	r3, r3, #10
 800dacc:	b29a      	uxth	r2, r3
 800dace:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dad0:	801a      	strh	r2, [r3, #0]
 800dad2:	e02f      	b.n	800db34 <HAL_PCD_EP_DB_Transmit+0x72e>
 800dad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad6:	095b      	lsrs	r3, r3, #5
 800dad8:	657b      	str	r3, [r7, #84]	; 0x54
 800dada:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dadc:	f003 031f 	and.w	r3, r3, #31
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d102      	bne.n	800daea <HAL_PCD_EP_DB_Transmit+0x6e4>
 800dae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dae6:	3b01      	subs	r3, #1
 800dae8:	657b      	str	r3, [r7, #84]	; 0x54
 800daea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daec:	b29b      	uxth	r3, r3
 800daee:	029b      	lsls	r3, r3, #10
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800daf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dafa:	b29a      	uxth	r2, r3
 800dafc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dafe:	801a      	strh	r2, [r3, #0]
 800db00:	e018      	b.n	800db34 <HAL_PCD_EP_DB_Transmit+0x72e>
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	785b      	ldrb	r3, [r3, #1]
 800db06:	2b01      	cmp	r3, #1
 800db08:	d114      	bne.n	800db34 <HAL_PCD_EP_DB_Transmit+0x72e>
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800db12:	b29b      	uxth	r3, r3
 800db14:	461a      	mov	r2, r3
 800db16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db18:	4413      	add	r3, r2
 800db1a:	667b      	str	r3, [r7, #100]	; 0x64
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	00da      	lsls	r2, r3, #3
 800db22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db24:	4413      	add	r3, r2
 800db26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800db2a:	663b      	str	r3, [r7, #96]	; 0x60
 800db2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db2e:	b29a      	uxth	r2, r3
 800db30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800db32:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	6818      	ldr	r0, [r3, #0]
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	6959      	ldr	r1, [r3, #20]
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	895a      	ldrh	r2, [r3, #10]
 800db40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db42:	b29b      	uxth	r3, r3
 800db44:	f005 ff63 	bl	8013a0e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	461a      	mov	r2, r3
 800db4e:	68bb      	ldr	r3, [r7, #8]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	009b      	lsls	r3, r3, #2
 800db54:	4413      	add	r3, r2
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	b29b      	uxth	r3, r3
 800db5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800db5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db62:	823b      	strh	r3, [r7, #16]
 800db64:	8a3b      	ldrh	r3, [r7, #16]
 800db66:	f083 0310 	eor.w	r3, r3, #16
 800db6a:	823b      	strh	r3, [r7, #16]
 800db6c:	8a3b      	ldrh	r3, [r7, #16]
 800db6e:	f083 0320 	eor.w	r3, r3, #32
 800db72:	823b      	strh	r3, [r7, #16]
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	461a      	mov	r2, r3
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	781b      	ldrb	r3, [r3, #0]
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	441a      	add	r2, r3
 800db82:	8a3b      	ldrh	r3, [r7, #16]
 800db84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800db88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800db8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800db90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db94:	b29b      	uxth	r3, r3
 800db96:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3788      	adds	r7, #136	; 0x88
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <HAL_PCDEx_PMAConfig>:
 800dba2:	b480      	push	{r7}
 800dba4:	b087      	sub	sp, #28
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	60f8      	str	r0, [r7, #12]
 800dbaa:	607b      	str	r3, [r7, #4]
 800dbac:	460b      	mov	r3, r1
 800dbae:	817b      	strh	r3, [r7, #10]
 800dbb0:	4613      	mov	r3, r2
 800dbb2:	813b      	strh	r3, [r7, #8]
 800dbb4:	897b      	ldrh	r3, [r7, #10]
 800dbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00b      	beq.n	800dbd8 <HAL_PCDEx_PMAConfig+0x36>
 800dbc0:	897b      	ldrh	r3, [r7, #10]
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	1c5a      	adds	r2, r3, #1
 800dbc8:	4613      	mov	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4413      	add	r3, r2
 800dbce:	00db      	lsls	r3, r3, #3
 800dbd0:	68fa      	ldr	r2, [r7, #12]
 800dbd2:	4413      	add	r3, r2
 800dbd4:	617b      	str	r3, [r7, #20]
 800dbd6:	e009      	b.n	800dbec <HAL_PCDEx_PMAConfig+0x4a>
 800dbd8:	897a      	ldrh	r2, [r7, #10]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	4413      	add	r3, r2
 800dbe0:	00db      	lsls	r3, r3, #3
 800dbe2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dbe6:	68fa      	ldr	r2, [r7, #12]
 800dbe8:	4413      	add	r3, r2
 800dbea:	617b      	str	r3, [r7, #20]
 800dbec:	893b      	ldrh	r3, [r7, #8]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d107      	bne.n	800dc02 <HAL_PCDEx_PMAConfig+0x60>
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	731a      	strb	r2, [r3, #12]
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	b29a      	uxth	r2, r3
 800dbfc:	697b      	ldr	r3, [r7, #20]
 800dbfe:	80da      	strh	r2, [r3, #6]
 800dc00:	e00b      	b.n	800dc1a <HAL_PCDEx_PMAConfig+0x78>
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2201      	movs	r2, #1
 800dc06:	731a      	strb	r2, [r3, #12]
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	b29a      	uxth	r2, r3
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	811a      	strh	r2, [r3, #8]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	0c1b      	lsrs	r3, r3, #16
 800dc14:	b29a      	uxth	r2, r3
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	815a      	strh	r2, [r3, #10]
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <HAL_PCDEx_ActivateLPM>:
 800dc28:	b480      	push	{r7}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	60fb      	str	r3, [r7, #12]
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	2200      	movs	r2, #0
 800dc42:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	f043 0301 	orr.w	r3, r3, #1
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800dc60:	b29b      	uxth	r3, r3
 800dc62:	f043 0302 	orr.w	r3, r3, #2
 800dc66:	b29a      	uxth	r2, r3
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800dc6e:	2300      	movs	r3, #0
 800dc70:	4618      	mov	r0, r3
 800dc72:	3714      	adds	r7, #20
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <HAL_PWR_EnableBkUpAccess>:
 800dc7c:	b480      	push	{r7}
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	4b05      	ldr	r3, [pc, #20]	; (800dc98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	4a04      	ldr	r2, [pc, #16]	; (800dc98 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800dc86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc8a:	6013      	str	r3, [r2, #0]
 800dc8c:	bf00      	nop
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc94:	4770      	bx	lr
 800dc96:	bf00      	nop
 800dc98:	40007000 	.word	0x40007000

0800dc9c <HAL_PWREx_GetVoltageRange>:
 800dc9c:	b480      	push	{r7}
 800dc9e:	af00      	add	r7, sp, #0
 800dca0:	4b04      	ldr	r3, [pc, #16]	; (800dcb4 <HAL_PWREx_GetVoltageRange+0x18>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dca8:	4618      	mov	r0, r3
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	40007000 	.word	0x40007000

0800dcb8 <HAL_PWREx_ControlVoltageScaling>:
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcc6:	d130      	bne.n	800dd2a <HAL_PWREx_ControlVoltageScaling+0x72>
 800dcc8:	4b23      	ldr	r3, [pc, #140]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dcd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dcd4:	d038      	beq.n	800dd48 <HAL_PWREx_ControlVoltageScaling+0x90>
 800dcd6:	4b20      	ldr	r3, [pc, #128]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dcde:	4a1e      	ldr	r2, [pc, #120]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dce0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	4b1d      	ldr	r3, [pc, #116]	; (800dd5c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2232      	movs	r2, #50	; 0x32
 800dcec:	fb02 f303 	mul.w	r3, r2, r3
 800dcf0:	4a1b      	ldr	r2, [pc, #108]	; (800dd60 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800dcf2:	fba2 2303 	umull	r2, r3, r2, r3
 800dcf6:	0c9b      	lsrs	r3, r3, #18
 800dcf8:	3301      	adds	r3, #1
 800dcfa:	60fb      	str	r3, [r7, #12]
 800dcfc:	e002      	b.n	800dd04 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800dcfe:	68fb      	ldr	r3, [r7, #12]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	60fb      	str	r3, [r7, #12]
 800dd04:	4b14      	ldr	r3, [pc, #80]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dd06:	695b      	ldr	r3, [r3, #20]
 800dd08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd10:	d102      	bne.n	800dd18 <HAL_PWREx_ControlVoltageScaling+0x60>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d1f2      	bne.n	800dcfe <HAL_PWREx_ControlVoltageScaling+0x46>
 800dd18:	4b0f      	ldr	r3, [pc, #60]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dd1a:	695b      	ldr	r3, [r3, #20]
 800dd1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dd20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd24:	d110      	bne.n	800dd48 <HAL_PWREx_ControlVoltageScaling+0x90>
 800dd26:	2303      	movs	r3, #3
 800dd28:	e00f      	b.n	800dd4a <HAL_PWREx_ControlVoltageScaling+0x92>
 800dd2a:	4b0b      	ldr	r3, [pc, #44]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dd32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd36:	d007      	beq.n	800dd48 <HAL_PWREx_ControlVoltageScaling+0x90>
 800dd38:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dd40:	4a05      	ldr	r2, [pc, #20]	; (800dd58 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800dd42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd46:	6013      	str	r3, [r2, #0]
 800dd48:	2300      	movs	r3, #0
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	3714      	adds	r7, #20
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd54:	4770      	bx	lr
 800dd56:	bf00      	nop
 800dd58:	40007000 	.word	0x40007000
 800dd5c:	20000780 	.word	0x20000780
 800dd60:	431bde83 	.word	0x431bde83

0800dd64 <HAL_PWREx_EnableVddUSB>:
 800dd64:	b480      	push	{r7}
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	4b05      	ldr	r3, [pc, #20]	; (800dd80 <HAL_PWREx_EnableVddUSB+0x1c>)
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	4a04      	ldr	r2, [pc, #16]	; (800dd80 <HAL_PWREx_EnableVddUSB+0x1c>)
 800dd6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dd72:	6053      	str	r3, [r2, #4]
 800dd74:	bf00      	nop
 800dd76:	46bd      	mov	sp, r7
 800dd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7c:	4770      	bx	lr
 800dd7e:	bf00      	nop
 800dd80:	40007000 	.word	0x40007000

0800dd84 <HAL_RCC_DeInit>:
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	4b45      	ldr	r3, [pc, #276]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	4a44      	ldr	r2, [pc, #272]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800dd90:	f043 0301 	orr.w	r3, r3, #1
 800dd94:	6013      	str	r3, [r2, #0]
 800dd96:	f7fc fb11 	bl	800a3bc <HAL_GetTick>
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	e008      	b.n	800ddb0 <HAL_RCC_DeInit+0x2c>
 800dd9e:	f7fc fb0d 	bl	800a3bc <HAL_GetTick>
 800dda2:	4602      	mov	r2, r0
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	1ad3      	subs	r3, r2, r3
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d901      	bls.n	800ddb0 <HAL_RCC_DeInit+0x2c>
 800ddac:	2303      	movs	r3, #3
 800ddae:	e073      	b.n	800de98 <HAL_RCC_DeInit+0x114>
 800ddb0:	4b3b      	ldr	r3, [pc, #236]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	f003 0302 	and.w	r3, r3, #2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d0f0      	beq.n	800dd9e <HAL_RCC_DeInit+0x1a>
 800ddbc:	4b38      	ldr	r3, [pc, #224]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ddc4:	4a36      	ldr	r2, [pc, #216]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800ddc6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800ddca:	6013      	str	r3, [r2, #0]
 800ddcc:	4b34      	ldr	r3, [pc, #208]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800ddce:	2200      	movs	r2, #0
 800ddd0:	609a      	str	r2, [r3, #8]
 800ddd2:	4b34      	ldr	r3, [pc, #208]	; (800dea4 <HAL_RCC_DeInit+0x120>)
 800ddd4:	4a34      	ldr	r2, [pc, #208]	; (800dea8 <HAL_RCC_DeInit+0x124>)
 800ddd6:	601a      	str	r2, [r3, #0]
 800ddd8:	4b34      	ldr	r3, [pc, #208]	; (800deac <HAL_RCC_DeInit+0x128>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	4618      	mov	r0, r3
 800ddde:	f7fc fa9d 	bl	800a31c <HAL_InitTick>
 800dde2:	4603      	mov	r3, r0
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d001      	beq.n	800ddec <HAL_RCC_DeInit+0x68>
 800dde8:	2301      	movs	r3, #1
 800ddea:	e055      	b.n	800de98 <HAL_RCC_DeInit+0x114>
 800ddec:	f7fc fae6 	bl	800a3bc <HAL_GetTick>
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	e00a      	b.n	800de0a <HAL_RCC_DeInit+0x86>
 800ddf4:	f7fc fae2 	bl	800a3bc <HAL_GetTick>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800de02:	4293      	cmp	r3, r2
 800de04:	d901      	bls.n	800de0a <HAL_RCC_DeInit+0x86>
 800de06:	2303      	movs	r3, #3
 800de08:	e046      	b.n	800de98 <HAL_RCC_DeInit+0x114>
 800de0a:	4b25      	ldr	r3, [pc, #148]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	f003 030c 	and.w	r3, r3, #12
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1ee      	bne.n	800ddf4 <HAL_RCC_DeInit+0x70>
 800de16:	4b22      	ldr	r3, [pc, #136]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de18:	681a      	ldr	r2, [r3, #0]
 800de1a:	4921      	ldr	r1, [pc, #132]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de1c:	4b24      	ldr	r3, [pc, #144]	; (800deb0 <HAL_RCC_DeInit+0x12c>)
 800de1e:	4013      	ands	r3, r2
 800de20:	600b      	str	r3, [r1, #0]
 800de22:	f7fc facb 	bl	800a3bc <HAL_GetTick>
 800de26:	6078      	str	r0, [r7, #4]
 800de28:	e008      	b.n	800de3c <HAL_RCC_DeInit+0xb8>
 800de2a:	f7fc fac7 	bl	800a3bc <HAL_GetTick>
 800de2e:	4602      	mov	r2, r0
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	2b02      	cmp	r3, #2
 800de36:	d901      	bls.n	800de3c <HAL_RCC_DeInit+0xb8>
 800de38:	2303      	movs	r3, #3
 800de3a:	e02d      	b.n	800de98 <HAL_RCC_DeInit+0x114>
 800de3c:	4b18      	ldr	r3, [pc, #96]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800de44:	2b00      	cmp	r3, #0
 800de46:	d1f0      	bne.n	800de2a <HAL_RCC_DeInit+0xa6>
 800de48:	4b15      	ldr	r3, [pc, #84]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	60da      	str	r2, [r3, #12]
 800de4e:	4b14      	ldr	r3, [pc, #80]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	4a13      	ldr	r2, [pc, #76]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de54:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de58:	60d3      	str	r3, [r2, #12]
 800de5a:	4b11      	ldr	r3, [pc, #68]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	611a      	str	r2, [r3, #16]
 800de60:	4b0f      	ldr	r3, [pc, #60]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de62:	691b      	ldr	r3, [r3, #16]
 800de64:	4a0e      	ldr	r2, [pc, #56]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de66:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800de6a:	6113      	str	r3, [r2, #16]
 800de6c:	4b0c      	ldr	r3, [pc, #48]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	4a0b      	ldr	r2, [pc, #44]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800de76:	6013      	str	r3, [r2, #0]
 800de78:	4b09      	ldr	r3, [pc, #36]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de7a:	2200      	movs	r2, #0
 800de7c:	619a      	str	r2, [r3, #24]
 800de7e:	4b08      	ldr	r3, [pc, #32]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de80:	f04f 32ff 	mov.w	r2, #4294967295
 800de84:	621a      	str	r2, [r3, #32]
 800de86:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800de8c:	4a04      	ldr	r2, [pc, #16]	; (800dea0 <HAL_RCC_DeInit+0x11c>)
 800de8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800de92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800de96:	2300      	movs	r3, #0
 800de98:	4618      	mov	r0, r3
 800de9a:	3708      	adds	r7, #8
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}
 800dea0:	40021000 	.word	0x40021000
 800dea4:	20000780 	.word	0x20000780
 800dea8:	003d0900 	.word	0x003d0900
 800deac:	20000784 	.word	0x20000784
 800deb0:	fafef4ff 	.word	0xfafef4ff

0800deb4 <HAL_RCC_OscConfig>:
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b088      	sub	sp, #32
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d102      	bne.n	800dec8 <HAL_RCC_OscConfig+0x14>
 800dec2:	2301      	movs	r3, #1
 800dec4:	f000 bc11 	b.w	800e6ea <HAL_RCC_OscConfig+0x836>
 800dec8:	4ba0      	ldr	r3, [pc, #640]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800deca:	689b      	ldr	r3, [r3, #8]
 800decc:	f003 030c 	and.w	r3, r3, #12
 800ded0:	61bb      	str	r3, [r7, #24]
 800ded2:	4b9e      	ldr	r3, [pc, #632]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	f003 0303 	and.w	r3, r3, #3
 800deda:	617b      	str	r3, [r7, #20]
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	f003 0310 	and.w	r3, r3, #16
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	f000 80e4 	beq.w	800e0b2 <HAL_RCC_OscConfig+0x1fe>
 800deea:	69bb      	ldr	r3, [r7, #24]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d007      	beq.n	800df00 <HAL_RCC_OscConfig+0x4c>
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	2b0c      	cmp	r3, #12
 800def4:	f040 808b 	bne.w	800e00e <HAL_RCC_OscConfig+0x15a>
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	2b01      	cmp	r3, #1
 800defc:	f040 8087 	bne.w	800e00e <HAL_RCC_OscConfig+0x15a>
 800df00:	4b92      	ldr	r3, [pc, #584]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d005      	beq.n	800df18 <HAL_RCC_OscConfig+0x64>
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	699b      	ldr	r3, [r3, #24]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d101      	bne.n	800df18 <HAL_RCC_OscConfig+0x64>
 800df14:	2301      	movs	r3, #1
 800df16:	e3e8      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a1a      	ldr	r2, [r3, #32]
 800df1c:	4b8b      	ldr	r3, [pc, #556]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f003 0308 	and.w	r3, r3, #8
 800df24:	2b00      	cmp	r3, #0
 800df26:	d004      	beq.n	800df32 <HAL_RCC_OscConfig+0x7e>
 800df28:	4b88      	ldr	r3, [pc, #544]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df30:	e005      	b.n	800df3e <HAL_RCC_OscConfig+0x8a>
 800df32:	4b86      	ldr	r3, [pc, #536]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df38:	091b      	lsrs	r3, r3, #4
 800df3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df3e:	4293      	cmp	r3, r2
 800df40:	d223      	bcs.n	800df8a <HAL_RCC_OscConfig+0xd6>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6a1b      	ldr	r3, [r3, #32]
 800df46:	4618      	mov	r0, r3
 800df48:	f000 fd7a 	bl	800ea40 <RCC_SetFlashLatencyFromMSIRange>
 800df4c:	4603      	mov	r3, r0
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d001      	beq.n	800df56 <HAL_RCC_OscConfig+0xa2>
 800df52:	2301      	movs	r3, #1
 800df54:	e3c9      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800df56:	4b7d      	ldr	r3, [pc, #500]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	4a7c      	ldr	r2, [pc, #496]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df5c:	f043 0308 	orr.w	r3, r3, #8
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	4b7a      	ldr	r3, [pc, #488]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	4977      	ldr	r1, [pc, #476]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df70:	4313      	orrs	r3, r2
 800df72:	600b      	str	r3, [r1, #0]
 800df74:	4b75      	ldr	r3, [pc, #468]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df76:	685b      	ldr	r3, [r3, #4]
 800df78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	69db      	ldr	r3, [r3, #28]
 800df80:	021b      	lsls	r3, r3, #8
 800df82:	4972      	ldr	r1, [pc, #456]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df84:	4313      	orrs	r3, r2
 800df86:	604b      	str	r3, [r1, #4]
 800df88:	e025      	b.n	800dfd6 <HAL_RCC_OscConfig+0x122>
 800df8a:	4b70      	ldr	r3, [pc, #448]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	4a6f      	ldr	r2, [pc, #444]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df90:	f043 0308 	orr.w	r3, r3, #8
 800df94:	6013      	str	r3, [r2, #0]
 800df96:	4b6d      	ldr	r3, [pc, #436]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6a1b      	ldr	r3, [r3, #32]
 800dfa2:	496a      	ldr	r1, [pc, #424]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	600b      	str	r3, [r1, #0]
 800dfa8:	4b68      	ldr	r3, [pc, #416]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	69db      	ldr	r3, [r3, #28]
 800dfb4:	021b      	lsls	r3, r3, #8
 800dfb6:	4965      	ldr	r1, [pc, #404]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	604b      	str	r3, [r1, #4]
 800dfbc:	69bb      	ldr	r3, [r7, #24]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d109      	bne.n	800dfd6 <HAL_RCC_OscConfig+0x122>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6a1b      	ldr	r3, [r3, #32]
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f000 fd3a 	bl	800ea40 <RCC_SetFlashLatencyFromMSIRange>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	2b00      	cmp	r3, #0
 800dfd0:	d001      	beq.n	800dfd6 <HAL_RCC_OscConfig+0x122>
 800dfd2:	2301      	movs	r3, #1
 800dfd4:	e389      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800dfd6:	f000 fc6f 	bl	800e8b8 <HAL_RCC_GetSysClockFreq>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	4b5b      	ldr	r3, [pc, #364]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800dfde:	689b      	ldr	r3, [r3, #8]
 800dfe0:	091b      	lsrs	r3, r3, #4
 800dfe2:	f003 030f 	and.w	r3, r3, #15
 800dfe6:	495a      	ldr	r1, [pc, #360]	; (800e150 <HAL_RCC_OscConfig+0x29c>)
 800dfe8:	5ccb      	ldrb	r3, [r1, r3]
 800dfea:	f003 031f 	and.w	r3, r3, #31
 800dfee:	fa22 f303 	lsr.w	r3, r2, r3
 800dff2:	4a58      	ldr	r2, [pc, #352]	; (800e154 <HAL_RCC_OscConfig+0x2a0>)
 800dff4:	6013      	str	r3, [r2, #0]
 800dff6:	4b58      	ldr	r3, [pc, #352]	; (800e158 <HAL_RCC_OscConfig+0x2a4>)
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7fc f98e 	bl	800a31c <HAL_InitTick>
 800e000:	4603      	mov	r3, r0
 800e002:	73fb      	strb	r3, [r7, #15]
 800e004:	7bfb      	ldrb	r3, [r7, #15]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d052      	beq.n	800e0b0 <HAL_RCC_OscConfig+0x1fc>
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
 800e00c:	e36d      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	699b      	ldr	r3, [r3, #24]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d032      	beq.n	800e07c <HAL_RCC_OscConfig+0x1c8>
 800e016:	4b4d      	ldr	r3, [pc, #308]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	4a4c      	ldr	r2, [pc, #304]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e01c:	f043 0301 	orr.w	r3, r3, #1
 800e020:	6013      	str	r3, [r2, #0]
 800e022:	f7fc f9cb 	bl	800a3bc <HAL_GetTick>
 800e026:	6138      	str	r0, [r7, #16]
 800e028:	e008      	b.n	800e03c <HAL_RCC_OscConfig+0x188>
 800e02a:	f7fc f9c7 	bl	800a3bc <HAL_GetTick>
 800e02e:	4602      	mov	r2, r0
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	1ad3      	subs	r3, r2, r3
 800e034:	2b02      	cmp	r3, #2
 800e036:	d901      	bls.n	800e03c <HAL_RCC_OscConfig+0x188>
 800e038:	2303      	movs	r3, #3
 800e03a:	e356      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e03c:	4b43      	ldr	r3, [pc, #268]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f003 0302 	and.w	r3, r3, #2
 800e044:	2b00      	cmp	r3, #0
 800e046:	d0f0      	beq.n	800e02a <HAL_RCC_OscConfig+0x176>
 800e048:	4b40      	ldr	r3, [pc, #256]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a3f      	ldr	r2, [pc, #252]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e04e:	f043 0308 	orr.w	r3, r3, #8
 800e052:	6013      	str	r3, [r2, #0]
 800e054:	4b3d      	ldr	r3, [pc, #244]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6a1b      	ldr	r3, [r3, #32]
 800e060:	493a      	ldr	r1, [pc, #232]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e062:	4313      	orrs	r3, r2
 800e064:	600b      	str	r3, [r1, #0]
 800e066:	4b39      	ldr	r3, [pc, #228]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	69db      	ldr	r3, [r3, #28]
 800e072:	021b      	lsls	r3, r3, #8
 800e074:	4935      	ldr	r1, [pc, #212]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e076:	4313      	orrs	r3, r2
 800e078:	604b      	str	r3, [r1, #4]
 800e07a:	e01a      	b.n	800e0b2 <HAL_RCC_OscConfig+0x1fe>
 800e07c:	4b33      	ldr	r3, [pc, #204]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	4a32      	ldr	r2, [pc, #200]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e082:	f023 0301 	bic.w	r3, r3, #1
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	f7fc f998 	bl	800a3bc <HAL_GetTick>
 800e08c:	6138      	str	r0, [r7, #16]
 800e08e:	e008      	b.n	800e0a2 <HAL_RCC_OscConfig+0x1ee>
 800e090:	f7fc f994 	bl	800a3bc <HAL_GetTick>
 800e094:	4602      	mov	r2, r0
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	1ad3      	subs	r3, r2, r3
 800e09a:	2b02      	cmp	r3, #2
 800e09c:	d901      	bls.n	800e0a2 <HAL_RCC_OscConfig+0x1ee>
 800e09e:	2303      	movs	r3, #3
 800e0a0:	e323      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e0a2:	4b2a      	ldr	r3, [pc, #168]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	f003 0302 	and.w	r3, r3, #2
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d1f0      	bne.n	800e090 <HAL_RCC_OscConfig+0x1dc>
 800e0ae:	e000      	b.n	800e0b2 <HAL_RCC_OscConfig+0x1fe>
 800e0b0:	bf00      	nop
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	f003 0301 	and.w	r3, r3, #1
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d073      	beq.n	800e1a6 <HAL_RCC_OscConfig+0x2f2>
 800e0be:	69bb      	ldr	r3, [r7, #24]
 800e0c0:	2b08      	cmp	r3, #8
 800e0c2:	d005      	beq.n	800e0d0 <HAL_RCC_OscConfig+0x21c>
 800e0c4:	69bb      	ldr	r3, [r7, #24]
 800e0c6:	2b0c      	cmp	r3, #12
 800e0c8:	d10e      	bne.n	800e0e8 <HAL_RCC_OscConfig+0x234>
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	2b03      	cmp	r3, #3
 800e0ce:	d10b      	bne.n	800e0e8 <HAL_RCC_OscConfig+0x234>
 800e0d0:	4b1e      	ldr	r3, [pc, #120]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d063      	beq.n	800e1a4 <HAL_RCC_OscConfig+0x2f0>
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d15f      	bne.n	800e1a4 <HAL_RCC_OscConfig+0x2f0>
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	e300      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f0:	d106      	bne.n	800e100 <HAL_RCC_OscConfig+0x24c>
 800e0f2:	4b16      	ldr	r3, [pc, #88]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	4a15      	ldr	r2, [pc, #84]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e0f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e0fc:	6013      	str	r3, [r2, #0]
 800e0fe:	e01d      	b.n	800e13c <HAL_RCC_OscConfig+0x288>
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800e108:	d10c      	bne.n	800e124 <HAL_RCC_OscConfig+0x270>
 800e10a:	4b10      	ldr	r3, [pc, #64]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	4a0f      	ldr	r2, [pc, #60]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e114:	6013      	str	r3, [r2, #0]
 800e116:	4b0d      	ldr	r3, [pc, #52]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	4a0c      	ldr	r2, [pc, #48]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e11c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e120:	6013      	str	r3, [r2, #0]
 800e122:	e00b      	b.n	800e13c <HAL_RCC_OscConfig+0x288>
 800e124:	4b09      	ldr	r3, [pc, #36]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4a08      	ldr	r2, [pc, #32]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e12a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	4b06      	ldr	r3, [pc, #24]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a05      	ldr	r2, [pc, #20]	; (800e14c <HAL_RCC_OscConfig+0x298>)
 800e136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d01b      	beq.n	800e17c <HAL_RCC_OscConfig+0x2c8>
 800e144:	f7fc f93a 	bl	800a3bc <HAL_GetTick>
 800e148:	6138      	str	r0, [r7, #16]
 800e14a:	e010      	b.n	800e16e <HAL_RCC_OscConfig+0x2ba>
 800e14c:	40021000 	.word	0x40021000
 800e150:	0801b53c 	.word	0x0801b53c
 800e154:	20000780 	.word	0x20000780
 800e158:	20000784 	.word	0x20000784
 800e15c:	f7fc f92e 	bl	800a3bc <HAL_GetTick>
 800e160:	4602      	mov	r2, r0
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	2b64      	cmp	r3, #100	; 0x64
 800e168:	d901      	bls.n	800e16e <HAL_RCC_OscConfig+0x2ba>
 800e16a:	2303      	movs	r3, #3
 800e16c:	e2bd      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e16e:	4baf      	ldr	r3, [pc, #700]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e176:	2b00      	cmp	r3, #0
 800e178:	d0f0      	beq.n	800e15c <HAL_RCC_OscConfig+0x2a8>
 800e17a:	e014      	b.n	800e1a6 <HAL_RCC_OscConfig+0x2f2>
 800e17c:	f7fc f91e 	bl	800a3bc <HAL_GetTick>
 800e180:	6138      	str	r0, [r7, #16]
 800e182:	e008      	b.n	800e196 <HAL_RCC_OscConfig+0x2e2>
 800e184:	f7fc f91a 	bl	800a3bc <HAL_GetTick>
 800e188:	4602      	mov	r2, r0
 800e18a:	693b      	ldr	r3, [r7, #16]
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	2b64      	cmp	r3, #100	; 0x64
 800e190:	d901      	bls.n	800e196 <HAL_RCC_OscConfig+0x2e2>
 800e192:	2303      	movs	r3, #3
 800e194:	e2a9      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e196:	4ba5      	ldr	r3, [pc, #660]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d1f0      	bne.n	800e184 <HAL_RCC_OscConfig+0x2d0>
 800e1a2:	e000      	b.n	800e1a6 <HAL_RCC_OscConfig+0x2f2>
 800e1a4:	bf00      	nop
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	f003 0302 	and.w	r3, r3, #2
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d060      	beq.n	800e274 <HAL_RCC_OscConfig+0x3c0>
 800e1b2:	69bb      	ldr	r3, [r7, #24]
 800e1b4:	2b04      	cmp	r3, #4
 800e1b6:	d005      	beq.n	800e1c4 <HAL_RCC_OscConfig+0x310>
 800e1b8:	69bb      	ldr	r3, [r7, #24]
 800e1ba:	2b0c      	cmp	r3, #12
 800e1bc:	d119      	bne.n	800e1f2 <HAL_RCC_OscConfig+0x33e>
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	2b02      	cmp	r3, #2
 800e1c2:	d116      	bne.n	800e1f2 <HAL_RCC_OscConfig+0x33e>
 800e1c4:	4b99      	ldr	r3, [pc, #612]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d005      	beq.n	800e1dc <HAL_RCC_OscConfig+0x328>
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	68db      	ldr	r3, [r3, #12]
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d101      	bne.n	800e1dc <HAL_RCC_OscConfig+0x328>
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e286      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e1dc:	4b93      	ldr	r3, [pc, #588]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e1de:	685b      	ldr	r3, [r3, #4]
 800e1e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	691b      	ldr	r3, [r3, #16]
 800e1e8:	061b      	lsls	r3, r3, #24
 800e1ea:	4990      	ldr	r1, [pc, #576]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	604b      	str	r3, [r1, #4]
 800e1f0:	e040      	b.n	800e274 <HAL_RCC_OscConfig+0x3c0>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d023      	beq.n	800e242 <HAL_RCC_OscConfig+0x38e>
 800e1fa:	4b8c      	ldr	r3, [pc, #560]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	4a8b      	ldr	r2, [pc, #556]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e204:	6013      	str	r3, [r2, #0]
 800e206:	f7fc f8d9 	bl	800a3bc <HAL_GetTick>
 800e20a:	6138      	str	r0, [r7, #16]
 800e20c:	e008      	b.n	800e220 <HAL_RCC_OscConfig+0x36c>
 800e20e:	f7fc f8d5 	bl	800a3bc <HAL_GetTick>
 800e212:	4602      	mov	r2, r0
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	1ad3      	subs	r3, r2, r3
 800e218:	2b02      	cmp	r3, #2
 800e21a:	d901      	bls.n	800e220 <HAL_RCC_OscConfig+0x36c>
 800e21c:	2303      	movs	r3, #3
 800e21e:	e264      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e220:	4b82      	ldr	r3, [pc, #520]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0f0      	beq.n	800e20e <HAL_RCC_OscConfig+0x35a>
 800e22c:	4b7f      	ldr	r3, [pc, #508]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e22e:	685b      	ldr	r3, [r3, #4]
 800e230:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	691b      	ldr	r3, [r3, #16]
 800e238:	061b      	lsls	r3, r3, #24
 800e23a:	497c      	ldr	r1, [pc, #496]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e23c:	4313      	orrs	r3, r2
 800e23e:	604b      	str	r3, [r1, #4]
 800e240:	e018      	b.n	800e274 <HAL_RCC_OscConfig+0x3c0>
 800e242:	4b7a      	ldr	r3, [pc, #488]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4a79      	ldr	r2, [pc, #484]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e248:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e24c:	6013      	str	r3, [r2, #0]
 800e24e:	f7fc f8b5 	bl	800a3bc <HAL_GetTick>
 800e252:	6138      	str	r0, [r7, #16]
 800e254:	e008      	b.n	800e268 <HAL_RCC_OscConfig+0x3b4>
 800e256:	f7fc f8b1 	bl	800a3bc <HAL_GetTick>
 800e25a:	4602      	mov	r2, r0
 800e25c:	693b      	ldr	r3, [r7, #16]
 800e25e:	1ad3      	subs	r3, r2, r3
 800e260:	2b02      	cmp	r3, #2
 800e262:	d901      	bls.n	800e268 <HAL_RCC_OscConfig+0x3b4>
 800e264:	2303      	movs	r3, #3
 800e266:	e240      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e268:	4b70      	ldr	r3, [pc, #448]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e270:	2b00      	cmp	r3, #0
 800e272:	d1f0      	bne.n	800e256 <HAL_RCC_OscConfig+0x3a2>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f003 0308 	and.w	r3, r3, #8
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d03c      	beq.n	800e2fa <HAL_RCC_OscConfig+0x446>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	695b      	ldr	r3, [r3, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d01c      	beq.n	800e2c2 <HAL_RCC_OscConfig+0x40e>
 800e288:	4b68      	ldr	r3, [pc, #416]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e28a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e28e:	4a67      	ldr	r2, [pc, #412]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e290:	f043 0301 	orr.w	r3, r3, #1
 800e294:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e298:	f7fc f890 	bl	800a3bc <HAL_GetTick>
 800e29c:	6138      	str	r0, [r7, #16]
 800e29e:	e008      	b.n	800e2b2 <HAL_RCC_OscConfig+0x3fe>
 800e2a0:	f7fc f88c 	bl	800a3bc <HAL_GetTick>
 800e2a4:	4602      	mov	r2, r0
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b02      	cmp	r3, #2
 800e2ac:	d901      	bls.n	800e2b2 <HAL_RCC_OscConfig+0x3fe>
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e21b      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e2b2:	4b5e      	ldr	r3, [pc, #376]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e2b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2b8:	f003 0302 	and.w	r3, r3, #2
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d0ef      	beq.n	800e2a0 <HAL_RCC_OscConfig+0x3ec>
 800e2c0:	e01b      	b.n	800e2fa <HAL_RCC_OscConfig+0x446>
 800e2c2:	4b5a      	ldr	r3, [pc, #360]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e2c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2c8:	4a58      	ldr	r2, [pc, #352]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e2ca:	f023 0301 	bic.w	r3, r3, #1
 800e2ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800e2d2:	f7fc f873 	bl	800a3bc <HAL_GetTick>
 800e2d6:	6138      	str	r0, [r7, #16]
 800e2d8:	e008      	b.n	800e2ec <HAL_RCC_OscConfig+0x438>
 800e2da:	f7fc f86f 	bl	800a3bc <HAL_GetTick>
 800e2de:	4602      	mov	r2, r0
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	1ad3      	subs	r3, r2, r3
 800e2e4:	2b02      	cmp	r3, #2
 800e2e6:	d901      	bls.n	800e2ec <HAL_RCC_OscConfig+0x438>
 800e2e8:	2303      	movs	r3, #3
 800e2ea:	e1fe      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e2ec:	4b4f      	ldr	r3, [pc, #316]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e2ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e2f2:	f003 0302 	and.w	r3, r3, #2
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1ef      	bne.n	800e2da <HAL_RCC_OscConfig+0x426>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	f003 0304 	and.w	r3, r3, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	f000 80a6 	beq.w	800e454 <HAL_RCC_OscConfig+0x5a0>
 800e308:	2300      	movs	r3, #0
 800e30a:	77fb      	strb	r3, [r7, #31]
 800e30c:	4b47      	ldr	r3, [pc, #284]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e30e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e310:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10d      	bne.n	800e334 <HAL_RCC_OscConfig+0x480>
 800e318:	4b44      	ldr	r3, [pc, #272]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e31a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e31c:	4a43      	ldr	r2, [pc, #268]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e31e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e322:	6593      	str	r3, [r2, #88]	; 0x58
 800e324:	4b41      	ldr	r3, [pc, #260]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e32c:	60bb      	str	r3, [r7, #8]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2301      	movs	r3, #1
 800e332:	77fb      	strb	r3, [r7, #31]
 800e334:	4b3e      	ldr	r3, [pc, #248]	; (800e430 <HAL_RCC_OscConfig+0x57c>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d118      	bne.n	800e372 <HAL_RCC_OscConfig+0x4be>
 800e340:	4b3b      	ldr	r3, [pc, #236]	; (800e430 <HAL_RCC_OscConfig+0x57c>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4a3a      	ldr	r2, [pc, #232]	; (800e430 <HAL_RCC_OscConfig+0x57c>)
 800e346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e34a:	6013      	str	r3, [r2, #0]
 800e34c:	f7fc f836 	bl	800a3bc <HAL_GetTick>
 800e350:	6138      	str	r0, [r7, #16]
 800e352:	e008      	b.n	800e366 <HAL_RCC_OscConfig+0x4b2>
 800e354:	f7fc f832 	bl	800a3bc <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	2b02      	cmp	r3, #2
 800e360:	d901      	bls.n	800e366 <HAL_RCC_OscConfig+0x4b2>
 800e362:	2303      	movs	r3, #3
 800e364:	e1c1      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e366:	4b32      	ldr	r3, [pc, #200]	; (800e430 <HAL_RCC_OscConfig+0x57c>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d0f0      	beq.n	800e354 <HAL_RCC_OscConfig+0x4a0>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	2b01      	cmp	r3, #1
 800e378:	d108      	bne.n	800e38c <HAL_RCC_OscConfig+0x4d8>
 800e37a:	4b2c      	ldr	r3, [pc, #176]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e37c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e380:	4a2a      	ldr	r2, [pc, #168]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e382:	f043 0301 	orr.w	r3, r3, #1
 800e386:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e38a:	e024      	b.n	800e3d6 <HAL_RCC_OscConfig+0x522>
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	2b05      	cmp	r3, #5
 800e392:	d110      	bne.n	800e3b6 <HAL_RCC_OscConfig+0x502>
 800e394:	4b25      	ldr	r3, [pc, #148]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39a:	4a24      	ldr	r2, [pc, #144]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e39c:	f043 0304 	orr.w	r3, r3, #4
 800e3a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e3a4:	4b21      	ldr	r3, [pc, #132]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3aa:	4a20      	ldr	r2, [pc, #128]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3ac:	f043 0301 	orr.w	r3, r3, #1
 800e3b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e3b4:	e00f      	b.n	800e3d6 <HAL_RCC_OscConfig+0x522>
 800e3b6:	4b1d      	ldr	r3, [pc, #116]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3bc:	4a1b      	ldr	r2, [pc, #108]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3be:	f023 0301 	bic.w	r3, r3, #1
 800e3c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e3c6:	4b19      	ldr	r3, [pc, #100]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3cc:	4a17      	ldr	r2, [pc, #92]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3ce:	f023 0304 	bic.w	r3, r3, #4
 800e3d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	689b      	ldr	r3, [r3, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d016      	beq.n	800e40c <HAL_RCC_OscConfig+0x558>
 800e3de:	f7fb ffed 	bl	800a3bc <HAL_GetTick>
 800e3e2:	6138      	str	r0, [r7, #16]
 800e3e4:	e00a      	b.n	800e3fc <HAL_RCC_OscConfig+0x548>
 800e3e6:	f7fb ffe9 	bl	800a3bc <HAL_GetTick>
 800e3ea:	4602      	mov	r2, r0
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	1ad3      	subs	r3, r2, r3
 800e3f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3f4:	4293      	cmp	r3, r2
 800e3f6:	d901      	bls.n	800e3fc <HAL_RCC_OscConfig+0x548>
 800e3f8:	2303      	movs	r3, #3
 800e3fa:	e176      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e3fc:	4b0b      	ldr	r3, [pc, #44]	; (800e42c <HAL_RCC_OscConfig+0x578>)
 800e3fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e402:	f003 0302 	and.w	r3, r3, #2
 800e406:	2b00      	cmp	r3, #0
 800e408:	d0ed      	beq.n	800e3e6 <HAL_RCC_OscConfig+0x532>
 800e40a:	e01a      	b.n	800e442 <HAL_RCC_OscConfig+0x58e>
 800e40c:	f7fb ffd6 	bl	800a3bc <HAL_GetTick>
 800e410:	6138      	str	r0, [r7, #16]
 800e412:	e00f      	b.n	800e434 <HAL_RCC_OscConfig+0x580>
 800e414:	f7fb ffd2 	bl	800a3bc <HAL_GetTick>
 800e418:	4602      	mov	r2, r0
 800e41a:	693b      	ldr	r3, [r7, #16]
 800e41c:	1ad3      	subs	r3, r2, r3
 800e41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e422:	4293      	cmp	r3, r2
 800e424:	d906      	bls.n	800e434 <HAL_RCC_OscConfig+0x580>
 800e426:	2303      	movs	r3, #3
 800e428:	e15f      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e42a:	bf00      	nop
 800e42c:	40021000 	.word	0x40021000
 800e430:	40007000 	.word	0x40007000
 800e434:	4baa      	ldr	r3, [pc, #680]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43a:	f003 0302 	and.w	r3, r3, #2
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d1e8      	bne.n	800e414 <HAL_RCC_OscConfig+0x560>
 800e442:	7ffb      	ldrb	r3, [r7, #31]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d105      	bne.n	800e454 <HAL_RCC_OscConfig+0x5a0>
 800e448:	4ba5      	ldr	r3, [pc, #660]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e44a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e44c:	4aa4      	ldr	r2, [pc, #656]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e44e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e452:	6593      	str	r3, [r2, #88]	; 0x58
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	f003 0320 	and.w	r3, r3, #32
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d03c      	beq.n	800e4da <HAL_RCC_OscConfig+0x626>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e464:	2b00      	cmp	r3, #0
 800e466:	d01c      	beq.n	800e4a2 <HAL_RCC_OscConfig+0x5ee>
 800e468:	4b9d      	ldr	r3, [pc, #628]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e46a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e46e:	4a9c      	ldr	r2, [pc, #624]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e470:	f043 0301 	orr.w	r3, r3, #1
 800e474:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800e478:	f7fb ffa0 	bl	800a3bc <HAL_GetTick>
 800e47c:	6138      	str	r0, [r7, #16]
 800e47e:	e008      	b.n	800e492 <HAL_RCC_OscConfig+0x5de>
 800e480:	f7fb ff9c 	bl	800a3bc <HAL_GetTick>
 800e484:	4602      	mov	r2, r0
 800e486:	693b      	ldr	r3, [r7, #16]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	2b02      	cmp	r3, #2
 800e48c:	d901      	bls.n	800e492 <HAL_RCC_OscConfig+0x5de>
 800e48e:	2303      	movs	r3, #3
 800e490:	e12b      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e492:	4b93      	ldr	r3, [pc, #588]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e494:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e498:	f003 0302 	and.w	r3, r3, #2
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d0ef      	beq.n	800e480 <HAL_RCC_OscConfig+0x5cc>
 800e4a0:	e01b      	b.n	800e4da <HAL_RCC_OscConfig+0x626>
 800e4a2:	4b8f      	ldr	r3, [pc, #572]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e4a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4a8:	4a8d      	ldr	r2, [pc, #564]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e4aa:	f023 0301 	bic.w	r3, r3, #1
 800e4ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800e4b2:	f7fb ff83 	bl	800a3bc <HAL_GetTick>
 800e4b6:	6138      	str	r0, [r7, #16]
 800e4b8:	e008      	b.n	800e4cc <HAL_RCC_OscConfig+0x618>
 800e4ba:	f7fb ff7f 	bl	800a3bc <HAL_GetTick>
 800e4be:	4602      	mov	r2, r0
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	1ad3      	subs	r3, r2, r3
 800e4c4:	2b02      	cmp	r3, #2
 800e4c6:	d901      	bls.n	800e4cc <HAL_RCC_OscConfig+0x618>
 800e4c8:	2303      	movs	r3, #3
 800e4ca:	e10e      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e4cc:	4b84      	ldr	r3, [pc, #528]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e4ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e4d2:	f003 0302 	and.w	r3, r3, #2
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d1ef      	bne.n	800e4ba <HAL_RCC_OscConfig+0x606>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	f000 8102 	beq.w	800e6e8 <HAL_RCC_OscConfig+0x834>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	f040 80c5 	bne.w	800e678 <HAL_RCC_OscConfig+0x7c4>
 800e4ee:	4b7c      	ldr	r3, [pc, #496]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	f003 0203 	and.w	r2, r3, #3
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4fe:	429a      	cmp	r2, r3
 800e500:	d12c      	bne.n	800e55c <HAL_RCC_OscConfig+0x6a8>
 800e502:	697b      	ldr	r3, [r7, #20]
 800e504:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e50c:	3b01      	subs	r3, #1
 800e50e:	011b      	lsls	r3, r3, #4
 800e510:	429a      	cmp	r2, r3
 800e512:	d123      	bne.n	800e55c <HAL_RCC_OscConfig+0x6a8>
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e51e:	021b      	lsls	r3, r3, #8
 800e520:	429a      	cmp	r2, r3
 800e522:	d11b      	bne.n	800e55c <HAL_RCC_OscConfig+0x6a8>
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e52e:	06db      	lsls	r3, r3, #27
 800e530:	429a      	cmp	r2, r3
 800e532:	d113      	bne.n	800e55c <HAL_RCC_OscConfig+0x6a8>
 800e534:	697b      	ldr	r3, [r7, #20]
 800e536:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e53e:	085b      	lsrs	r3, r3, #1
 800e540:	3b01      	subs	r3, #1
 800e542:	055b      	lsls	r3, r3, #21
 800e544:	429a      	cmp	r2, r3
 800e546:	d109      	bne.n	800e55c <HAL_RCC_OscConfig+0x6a8>
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e552:	085b      	lsrs	r3, r3, #1
 800e554:	3b01      	subs	r3, #1
 800e556:	065b      	lsls	r3, r3, #25
 800e558:	429a      	cmp	r2, r3
 800e55a:	d067      	beq.n	800e62c <HAL_RCC_OscConfig+0x778>
 800e55c:	69bb      	ldr	r3, [r7, #24]
 800e55e:	2b0c      	cmp	r3, #12
 800e560:	d062      	beq.n	800e628 <HAL_RCC_OscConfig+0x774>
 800e562:	4b5f      	ldr	r3, [pc, #380]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d001      	beq.n	800e572 <HAL_RCC_OscConfig+0x6be>
 800e56e:	2301      	movs	r3, #1
 800e570:	e0bb      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e572:	4b5b      	ldr	r3, [pc, #364]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a5a      	ldr	r2, [pc, #360]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e578:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e57c:	6013      	str	r3, [r2, #0]
 800e57e:	f7fb ff1d 	bl	800a3bc <HAL_GetTick>
 800e582:	6138      	str	r0, [r7, #16]
 800e584:	e008      	b.n	800e598 <HAL_RCC_OscConfig+0x6e4>
 800e586:	f7fb ff19 	bl	800a3bc <HAL_GetTick>
 800e58a:	4602      	mov	r2, r0
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	1ad3      	subs	r3, r2, r3
 800e590:	2b02      	cmp	r3, #2
 800e592:	d901      	bls.n	800e598 <HAL_RCC_OscConfig+0x6e4>
 800e594:	2303      	movs	r3, #3
 800e596:	e0a8      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e598:	4b51      	ldr	r3, [pc, #324]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d1f0      	bne.n	800e586 <HAL_RCC_OscConfig+0x6d2>
 800e5a4:	4b4e      	ldr	r3, [pc, #312]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5a6:	68da      	ldr	r2, [r3, #12]
 800e5a8:	4b4e      	ldr	r3, [pc, #312]	; (800e6e4 <HAL_RCC_OscConfig+0x830>)
 800e5aa:	4013      	ands	r3, r2
 800e5ac:	687a      	ldr	r2, [r7, #4]
 800e5ae:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800e5b0:	687a      	ldr	r2, [r7, #4]
 800e5b2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e5b4:	3a01      	subs	r2, #1
 800e5b6:	0112      	lsls	r2, r2, #4
 800e5b8:	4311      	orrs	r1, r2
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e5be:	0212      	lsls	r2, r2, #8
 800e5c0:	4311      	orrs	r1, r2
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e5c6:	0852      	lsrs	r2, r2, #1
 800e5c8:	3a01      	subs	r2, #1
 800e5ca:	0552      	lsls	r2, r2, #21
 800e5cc:	4311      	orrs	r1, r2
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800e5d2:	0852      	lsrs	r2, r2, #1
 800e5d4:	3a01      	subs	r2, #1
 800e5d6:	0652      	lsls	r2, r2, #25
 800e5d8:	4311      	orrs	r1, r2
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e5de:	06d2      	lsls	r2, r2, #27
 800e5e0:	430a      	orrs	r2, r1
 800e5e2:	493f      	ldr	r1, [pc, #252]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	60cb      	str	r3, [r1, #12]
 800e5e8:	4b3d      	ldr	r3, [pc, #244]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	4a3c      	ldr	r2, [pc, #240]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5f2:	6013      	str	r3, [r2, #0]
 800e5f4:	4b3a      	ldr	r3, [pc, #232]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5f6:	68db      	ldr	r3, [r3, #12]
 800e5f8:	4a39      	ldr	r2, [pc, #228]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e5fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e5fe:	60d3      	str	r3, [r2, #12]
 800e600:	f7fb fedc 	bl	800a3bc <HAL_GetTick>
 800e604:	6138      	str	r0, [r7, #16]
 800e606:	e008      	b.n	800e61a <HAL_RCC_OscConfig+0x766>
 800e608:	f7fb fed8 	bl	800a3bc <HAL_GetTick>
 800e60c:	4602      	mov	r2, r0
 800e60e:	693b      	ldr	r3, [r7, #16]
 800e610:	1ad3      	subs	r3, r2, r3
 800e612:	2b02      	cmp	r3, #2
 800e614:	d901      	bls.n	800e61a <HAL_RCC_OscConfig+0x766>
 800e616:	2303      	movs	r3, #3
 800e618:	e067      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e61a:	4b31      	ldr	r3, [pc, #196]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0f0      	beq.n	800e608 <HAL_RCC_OscConfig+0x754>
 800e626:	e05f      	b.n	800e6e8 <HAL_RCC_OscConfig+0x834>
 800e628:	2301      	movs	r3, #1
 800e62a:	e05e      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e62c:	4b2c      	ldr	r3, [pc, #176]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e634:	2b00      	cmp	r3, #0
 800e636:	d157      	bne.n	800e6e8 <HAL_RCC_OscConfig+0x834>
 800e638:	4b29      	ldr	r3, [pc, #164]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a28      	ldr	r2, [pc, #160]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e63e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e642:	6013      	str	r3, [r2, #0]
 800e644:	4b26      	ldr	r3, [pc, #152]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e646:	68db      	ldr	r3, [r3, #12]
 800e648:	4a25      	ldr	r2, [pc, #148]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e64a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e64e:	60d3      	str	r3, [r2, #12]
 800e650:	f7fb feb4 	bl	800a3bc <HAL_GetTick>
 800e654:	6138      	str	r0, [r7, #16]
 800e656:	e008      	b.n	800e66a <HAL_RCC_OscConfig+0x7b6>
 800e658:	f7fb feb0 	bl	800a3bc <HAL_GetTick>
 800e65c:	4602      	mov	r2, r0
 800e65e:	693b      	ldr	r3, [r7, #16]
 800e660:	1ad3      	subs	r3, r2, r3
 800e662:	2b02      	cmp	r3, #2
 800e664:	d901      	bls.n	800e66a <HAL_RCC_OscConfig+0x7b6>
 800e666:	2303      	movs	r3, #3
 800e668:	e03f      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e66a:	4b1d      	ldr	r3, [pc, #116]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e672:	2b00      	cmp	r3, #0
 800e674:	d0f0      	beq.n	800e658 <HAL_RCC_OscConfig+0x7a4>
 800e676:	e037      	b.n	800e6e8 <HAL_RCC_OscConfig+0x834>
 800e678:	69bb      	ldr	r3, [r7, #24]
 800e67a:	2b0c      	cmp	r3, #12
 800e67c:	d02d      	beq.n	800e6da <HAL_RCC_OscConfig+0x826>
 800e67e:	4b18      	ldr	r3, [pc, #96]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	4a17      	ldr	r2, [pc, #92]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e684:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e692:	2b00      	cmp	r3, #0
 800e694:	d105      	bne.n	800e6a2 <HAL_RCC_OscConfig+0x7ee>
 800e696:	4b12      	ldr	r3, [pc, #72]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e698:	68db      	ldr	r3, [r3, #12]
 800e69a:	4a11      	ldr	r2, [pc, #68]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e69c:	f023 0303 	bic.w	r3, r3, #3
 800e6a0:	60d3      	str	r3, [r2, #12]
 800e6a2:	4b0f      	ldr	r3, [pc, #60]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e6a4:	68db      	ldr	r3, [r3, #12]
 800e6a6:	4a0e      	ldr	r2, [pc, #56]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e6a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800e6ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e6b0:	60d3      	str	r3, [r2, #12]
 800e6b2:	f7fb fe83 	bl	800a3bc <HAL_GetTick>
 800e6b6:	6138      	str	r0, [r7, #16]
 800e6b8:	e008      	b.n	800e6cc <HAL_RCC_OscConfig+0x818>
 800e6ba:	f7fb fe7f 	bl	800a3bc <HAL_GetTick>
 800e6be:	4602      	mov	r2, r0
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	2b02      	cmp	r3, #2
 800e6c6:	d901      	bls.n	800e6cc <HAL_RCC_OscConfig+0x818>
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	e00e      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e6cc:	4b04      	ldr	r3, [pc, #16]	; (800e6e0 <HAL_RCC_OscConfig+0x82c>)
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d1f0      	bne.n	800e6ba <HAL_RCC_OscConfig+0x806>
 800e6d8:	e006      	b.n	800e6e8 <HAL_RCC_OscConfig+0x834>
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e005      	b.n	800e6ea <HAL_RCC_OscConfig+0x836>
 800e6de:	bf00      	nop
 800e6e0:	40021000 	.word	0x40021000
 800e6e4:	019d808c 	.word	0x019d808c
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3720      	adds	r7, #32
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop

0800e6f4 <HAL_RCC_ClockConfig>:
 800e6f4:	b580      	push	{r7, lr}
 800e6f6:	b084      	sub	sp, #16
 800e6f8:	af00      	add	r7, sp, #0
 800e6fa:	6078      	str	r0, [r7, #4]
 800e6fc:	6039      	str	r1, [r7, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d101      	bne.n	800e708 <HAL_RCC_ClockConfig+0x14>
 800e704:	2301      	movs	r3, #1
 800e706:	e0c8      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e708:	4b66      	ldr	r3, [pc, #408]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	f003 0307 	and.w	r3, r3, #7
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	429a      	cmp	r2, r3
 800e714:	d910      	bls.n	800e738 <HAL_RCC_ClockConfig+0x44>
 800e716:	4b63      	ldr	r3, [pc, #396]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	f023 0207 	bic.w	r2, r3, #7
 800e71e:	4961      	ldr	r1, [pc, #388]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	4313      	orrs	r3, r2
 800e724:	600b      	str	r3, [r1, #0]
 800e726:	4b5f      	ldr	r3, [pc, #380]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	f003 0307 	and.w	r3, r3, #7
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	429a      	cmp	r2, r3
 800e732:	d001      	beq.n	800e738 <HAL_RCC_ClockConfig+0x44>
 800e734:	2301      	movs	r3, #1
 800e736:	e0b0      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	f003 0301 	and.w	r3, r3, #1
 800e740:	2b00      	cmp	r3, #0
 800e742:	d04c      	beq.n	800e7de <HAL_RCC_ClockConfig+0xea>
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685b      	ldr	r3, [r3, #4]
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d107      	bne.n	800e75c <HAL_RCC_ClockConfig+0x68>
 800e74c:	4b56      	ldr	r3, [pc, #344]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e754:	2b00      	cmp	r3, #0
 800e756:	d121      	bne.n	800e79c <HAL_RCC_ClockConfig+0xa8>
 800e758:	2301      	movs	r3, #1
 800e75a:	e09e      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	2b02      	cmp	r3, #2
 800e762:	d107      	bne.n	800e774 <HAL_RCC_ClockConfig+0x80>
 800e764:	4b50      	ldr	r3, [pc, #320]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d115      	bne.n	800e79c <HAL_RCC_ClockConfig+0xa8>
 800e770:	2301      	movs	r3, #1
 800e772:	e092      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d107      	bne.n	800e78c <HAL_RCC_ClockConfig+0x98>
 800e77c:	4b4a      	ldr	r3, [pc, #296]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 0302 	and.w	r3, r3, #2
 800e784:	2b00      	cmp	r3, #0
 800e786:	d109      	bne.n	800e79c <HAL_RCC_ClockConfig+0xa8>
 800e788:	2301      	movs	r3, #1
 800e78a:	e086      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e78c:	4b46      	ldr	r3, [pc, #280]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e794:	2b00      	cmp	r3, #0
 800e796:	d101      	bne.n	800e79c <HAL_RCC_ClockConfig+0xa8>
 800e798:	2301      	movs	r3, #1
 800e79a:	e07e      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e79c:	4b42      	ldr	r3, [pc, #264]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	f023 0203 	bic.w	r2, r3, #3
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	493f      	ldr	r1, [pc, #252]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	608b      	str	r3, [r1, #8]
 800e7ae:	f7fb fe05 	bl	800a3bc <HAL_GetTick>
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	e00a      	b.n	800e7cc <HAL_RCC_ClockConfig+0xd8>
 800e7b6:	f7fb fe01 	bl	800a3bc <HAL_GetTick>
 800e7ba:	4602      	mov	r2, r0
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	1ad3      	subs	r3, r2, r3
 800e7c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d901      	bls.n	800e7cc <HAL_RCC_ClockConfig+0xd8>
 800e7c8:	2303      	movs	r3, #3
 800e7ca:	e066      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e7cc:	4b36      	ldr	r3, [pc, #216]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e7ce:	689b      	ldr	r3, [r3, #8]
 800e7d0:	f003 020c 	and.w	r2, r3, #12
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	009b      	lsls	r3, r3, #2
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d1eb      	bne.n	800e7b6 <HAL_RCC_ClockConfig+0xc2>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f003 0302 	and.w	r3, r3, #2
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d008      	beq.n	800e7fc <HAL_RCC_ClockConfig+0x108>
 800e7ea:	4b2f      	ldr	r3, [pc, #188]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	689b      	ldr	r3, [r3, #8]
 800e7f6:	492c      	ldr	r1, [pc, #176]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e7f8:	4313      	orrs	r3, r2
 800e7fa:	608b      	str	r3, [r1, #8]
 800e7fc:	4b29      	ldr	r3, [pc, #164]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	f003 0307 	and.w	r3, r3, #7
 800e804:	683a      	ldr	r2, [r7, #0]
 800e806:	429a      	cmp	r2, r3
 800e808:	d210      	bcs.n	800e82c <HAL_RCC_ClockConfig+0x138>
 800e80a:	4b26      	ldr	r3, [pc, #152]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	f023 0207 	bic.w	r2, r3, #7
 800e812:	4924      	ldr	r1, [pc, #144]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	4313      	orrs	r3, r2
 800e818:	600b      	str	r3, [r1, #0]
 800e81a:	4b22      	ldr	r3, [pc, #136]	; (800e8a4 <HAL_RCC_ClockConfig+0x1b0>)
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	f003 0307 	and.w	r3, r3, #7
 800e822:	683a      	ldr	r2, [r7, #0]
 800e824:	429a      	cmp	r2, r3
 800e826:	d001      	beq.n	800e82c <HAL_RCC_ClockConfig+0x138>
 800e828:	2301      	movs	r3, #1
 800e82a:	e036      	b.n	800e89a <HAL_RCC_ClockConfig+0x1a6>
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f003 0304 	and.w	r3, r3, #4
 800e834:	2b00      	cmp	r3, #0
 800e836:	d008      	beq.n	800e84a <HAL_RCC_ClockConfig+0x156>
 800e838:	4b1b      	ldr	r3, [pc, #108]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e83a:	689b      	ldr	r3, [r3, #8]
 800e83c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	68db      	ldr	r3, [r3, #12]
 800e844:	4918      	ldr	r1, [pc, #96]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e846:	4313      	orrs	r3, r2
 800e848:	608b      	str	r3, [r1, #8]
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	f003 0308 	and.w	r3, r3, #8
 800e852:	2b00      	cmp	r3, #0
 800e854:	d009      	beq.n	800e86a <HAL_RCC_ClockConfig+0x176>
 800e856:	4b14      	ldr	r3, [pc, #80]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	691b      	ldr	r3, [r3, #16]
 800e862:	00db      	lsls	r3, r3, #3
 800e864:	4910      	ldr	r1, [pc, #64]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e866:	4313      	orrs	r3, r2
 800e868:	608b      	str	r3, [r1, #8]
 800e86a:	f000 f825 	bl	800e8b8 <HAL_RCC_GetSysClockFreq>
 800e86e:	4602      	mov	r2, r0
 800e870:	4b0d      	ldr	r3, [pc, #52]	; (800e8a8 <HAL_RCC_ClockConfig+0x1b4>)
 800e872:	689b      	ldr	r3, [r3, #8]
 800e874:	091b      	lsrs	r3, r3, #4
 800e876:	f003 030f 	and.w	r3, r3, #15
 800e87a:	490c      	ldr	r1, [pc, #48]	; (800e8ac <HAL_RCC_ClockConfig+0x1b8>)
 800e87c:	5ccb      	ldrb	r3, [r1, r3]
 800e87e:	f003 031f 	and.w	r3, r3, #31
 800e882:	fa22 f303 	lsr.w	r3, r2, r3
 800e886:	4a0a      	ldr	r2, [pc, #40]	; (800e8b0 <HAL_RCC_ClockConfig+0x1bc>)
 800e888:	6013      	str	r3, [r2, #0]
 800e88a:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <HAL_RCC_ClockConfig+0x1c0>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fb fd44 	bl	800a31c <HAL_InitTick>
 800e894:	4603      	mov	r3, r0
 800e896:	72fb      	strb	r3, [r7, #11]
 800e898:	7afb      	ldrb	r3, [r7, #11]
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}
 800e8a2:	bf00      	nop
 800e8a4:	40022000 	.word	0x40022000
 800e8a8:	40021000 	.word	0x40021000
 800e8ac:	0801b53c 	.word	0x0801b53c
 800e8b0:	20000780 	.word	0x20000780
 800e8b4:	20000784 	.word	0x20000784

0800e8b8 <HAL_RCC_GetSysClockFreq>:
 800e8b8:	b480      	push	{r7}
 800e8ba:	b089      	sub	sp, #36	; 0x24
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	2300      	movs	r3, #0
 800e8c0:	61fb      	str	r3, [r7, #28]
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	4b3e      	ldr	r3, [pc, #248]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	f003 030c 	and.w	r3, r3, #12
 800e8ce:	613b      	str	r3, [r7, #16]
 800e8d0:	4b3b      	ldr	r3, [pc, #236]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e8d2:	68db      	ldr	r3, [r3, #12]
 800e8d4:	f003 0303 	and.w	r3, r3, #3
 800e8d8:	60fb      	str	r3, [r7, #12]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d005      	beq.n	800e8ec <HAL_RCC_GetSysClockFreq+0x34>
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	2b0c      	cmp	r3, #12
 800e8e4:	d121      	bne.n	800e92a <HAL_RCC_GetSysClockFreq+0x72>
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	2b01      	cmp	r3, #1
 800e8ea:	d11e      	bne.n	800e92a <HAL_RCC_GetSysClockFreq+0x72>
 800e8ec:	4b34      	ldr	r3, [pc, #208]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	f003 0308 	and.w	r3, r3, #8
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d107      	bne.n	800e908 <HAL_RCC_GetSysClockFreq+0x50>
 800e8f8:	4b31      	ldr	r3, [pc, #196]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e8fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e8fe:	0a1b      	lsrs	r3, r3, #8
 800e900:	f003 030f 	and.w	r3, r3, #15
 800e904:	61fb      	str	r3, [r7, #28]
 800e906:	e005      	b.n	800e914 <HAL_RCC_GetSysClockFreq+0x5c>
 800e908:	4b2d      	ldr	r3, [pc, #180]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	091b      	lsrs	r3, r3, #4
 800e90e:	f003 030f 	and.w	r3, r3, #15
 800e912:	61fb      	str	r3, [r7, #28]
 800e914:	4a2b      	ldr	r2, [pc, #172]	; (800e9c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 800e916:	69fb      	ldr	r3, [r7, #28]
 800e918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e91c:	61fb      	str	r3, [r7, #28]
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d10d      	bne.n	800e940 <HAL_RCC_GetSysClockFreq+0x88>
 800e924:	69fb      	ldr	r3, [r7, #28]
 800e926:	61bb      	str	r3, [r7, #24]
 800e928:	e00a      	b.n	800e940 <HAL_RCC_GetSysClockFreq+0x88>
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	2b04      	cmp	r3, #4
 800e92e:	d102      	bne.n	800e936 <HAL_RCC_GetSysClockFreq+0x7e>
 800e930:	4b25      	ldr	r3, [pc, #148]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800e932:	61bb      	str	r3, [r7, #24]
 800e934:	e004      	b.n	800e940 <HAL_RCC_GetSysClockFreq+0x88>
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	2b08      	cmp	r3, #8
 800e93a:	d101      	bne.n	800e940 <HAL_RCC_GetSysClockFreq+0x88>
 800e93c:	4b23      	ldr	r3, [pc, #140]	; (800e9cc <HAL_RCC_GetSysClockFreq+0x114>)
 800e93e:	61bb      	str	r3, [r7, #24]
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	2b0c      	cmp	r3, #12
 800e944:	d134      	bne.n	800e9b0 <HAL_RCC_GetSysClockFreq+0xf8>
 800e946:	4b1e      	ldr	r3, [pc, #120]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f003 0303 	and.w	r3, r3, #3
 800e94e:	60bb      	str	r3, [r7, #8]
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	2b02      	cmp	r3, #2
 800e954:	d003      	beq.n	800e95e <HAL_RCC_GetSysClockFreq+0xa6>
 800e956:	68bb      	ldr	r3, [r7, #8]
 800e958:	2b03      	cmp	r3, #3
 800e95a:	d003      	beq.n	800e964 <HAL_RCC_GetSysClockFreq+0xac>
 800e95c:	e005      	b.n	800e96a <HAL_RCC_GetSysClockFreq+0xb2>
 800e95e:	4b1a      	ldr	r3, [pc, #104]	; (800e9c8 <HAL_RCC_GetSysClockFreq+0x110>)
 800e960:	617b      	str	r3, [r7, #20]
 800e962:	e005      	b.n	800e970 <HAL_RCC_GetSysClockFreq+0xb8>
 800e964:	4b19      	ldr	r3, [pc, #100]	; (800e9cc <HAL_RCC_GetSysClockFreq+0x114>)
 800e966:	617b      	str	r3, [r7, #20]
 800e968:	e002      	b.n	800e970 <HAL_RCC_GetSysClockFreq+0xb8>
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	617b      	str	r3, [r7, #20]
 800e96e:	bf00      	nop
 800e970:	4b13      	ldr	r3, [pc, #76]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e972:	68db      	ldr	r3, [r3, #12]
 800e974:	091b      	lsrs	r3, r3, #4
 800e976:	f003 0307 	and.w	r3, r3, #7
 800e97a:	3301      	adds	r3, #1
 800e97c:	607b      	str	r3, [r7, #4]
 800e97e:	4b10      	ldr	r3, [pc, #64]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	0a1b      	lsrs	r3, r3, #8
 800e984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	fb02 f203 	mul.w	r2, r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	fbb2 f3f3 	udiv	r3, r2, r3
 800e994:	617b      	str	r3, [r7, #20]
 800e996:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800e998:	68db      	ldr	r3, [r3, #12]
 800e99a:	0e5b      	lsrs	r3, r3, #25
 800e99c:	f003 0303 	and.w	r3, r3, #3
 800e9a0:	3301      	adds	r3, #1
 800e9a2:	005b      	lsls	r3, r3, #1
 800e9a4:	603b      	str	r3, [r7, #0]
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e9ae:	61bb      	str	r3, [r7, #24]
 800e9b0:	69bb      	ldr	r3, [r7, #24]
 800e9b2:	4618      	mov	r0, r3
 800e9b4:	3724      	adds	r7, #36	; 0x24
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr
 800e9be:	bf00      	nop
 800e9c0:	40021000 	.word	0x40021000
 800e9c4:	0801b554 	.word	0x0801b554
 800e9c8:	00f42400 	.word	0x00f42400
 800e9cc:	007a1200 	.word	0x007a1200

0800e9d0 <HAL_RCC_GetHCLKFreq>:
 800e9d0:	b480      	push	{r7}
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	4b03      	ldr	r3, [pc, #12]	; (800e9e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	46bd      	mov	sp, r7
 800e9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e0:	4770      	bx	lr
 800e9e2:	bf00      	nop
 800e9e4:	20000780 	.word	0x20000780

0800e9e8 <HAL_RCC_GetPCLK1Freq>:
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	f7ff fff0 	bl	800e9d0 <HAL_RCC_GetHCLKFreq>
 800e9f0:	4602      	mov	r2, r0
 800e9f2:	4b06      	ldr	r3, [pc, #24]	; (800ea0c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e9f4:	689b      	ldr	r3, [r3, #8]
 800e9f6:	0a1b      	lsrs	r3, r3, #8
 800e9f8:	f003 0307 	and.w	r3, r3, #7
 800e9fc:	4904      	ldr	r1, [pc, #16]	; (800ea10 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e9fe:	5ccb      	ldrb	r3, [r1, r3]
 800ea00:	f003 031f 	and.w	r3, r3, #31
 800ea04:	fa22 f303 	lsr.w	r3, r2, r3
 800ea08:	4618      	mov	r0, r3
 800ea0a:	bd80      	pop	{r7, pc}
 800ea0c:	40021000 	.word	0x40021000
 800ea10:	0801b54c 	.word	0x0801b54c

0800ea14 <HAL_RCC_GetPCLK2Freq>:
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	f7ff ffda 	bl	800e9d0 <HAL_RCC_GetHCLKFreq>
 800ea1c:	4602      	mov	r2, r0
 800ea1e:	4b06      	ldr	r3, [pc, #24]	; (800ea38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ea20:	689b      	ldr	r3, [r3, #8]
 800ea22:	0adb      	lsrs	r3, r3, #11
 800ea24:	f003 0307 	and.w	r3, r3, #7
 800ea28:	4904      	ldr	r1, [pc, #16]	; (800ea3c <HAL_RCC_GetPCLK2Freq+0x28>)
 800ea2a:	5ccb      	ldrb	r3, [r1, r3]
 800ea2c:	f003 031f 	and.w	r3, r3, #31
 800ea30:	fa22 f303 	lsr.w	r3, r2, r3
 800ea34:	4618      	mov	r0, r3
 800ea36:	bd80      	pop	{r7, pc}
 800ea38:	40021000 	.word	0x40021000
 800ea3c:	0801b54c 	.word	0x0801b54c

0800ea40 <RCC_SetFlashLatencyFromMSIRange>:
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b086      	sub	sp, #24
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
 800ea48:	2300      	movs	r3, #0
 800ea4a:	613b      	str	r3, [r7, #16]
 800ea4c:	4b2a      	ldr	r3, [pc, #168]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800ea58:	f7ff f920 	bl	800dc9c <HAL_PWREx_GetVoltageRange>
 800ea5c:	6178      	str	r0, [r7, #20]
 800ea5e:	e014      	b.n	800ea8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
 800ea60:	4b25      	ldr	r3, [pc, #148]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea64:	4a24      	ldr	r2, [pc, #144]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ea6a:	6593      	str	r3, [r2, #88]	; 0x58
 800ea6c:	4b22      	ldr	r3, [pc, #136]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea74:	60fb      	str	r3, [r7, #12]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f7ff f910 	bl	800dc9c <HAL_PWREx_GetVoltageRange>
 800ea7c:	6178      	str	r0, [r7, #20]
 800ea7e:	4b1e      	ldr	r3, [pc, #120]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ea82:	4a1d      	ldr	r2, [pc, #116]	; (800eaf8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800ea84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ea88:	6593      	str	r3, [r2, #88]	; 0x58
 800ea8a:	697b      	ldr	r3, [r7, #20]
 800ea8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ea90:	d10b      	bne.n	800eaaa <RCC_SetFlashLatencyFromMSIRange+0x6a>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	2b80      	cmp	r3, #128	; 0x80
 800ea96:	d919      	bls.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2ba0      	cmp	r3, #160	; 0xa0
 800ea9c:	d902      	bls.n	800eaa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	613b      	str	r3, [r7, #16]
 800eaa2:	e013      	b.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	613b      	str	r3, [r7, #16]
 800eaa8:	e010      	b.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2b80      	cmp	r3, #128	; 0x80
 800eaae:	d902      	bls.n	800eab6 <RCC_SetFlashLatencyFromMSIRange+0x76>
 800eab0:	2303      	movs	r3, #3
 800eab2:	613b      	str	r3, [r7, #16]
 800eab4:	e00a      	b.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b80      	cmp	r3, #128	; 0x80
 800eaba:	d102      	bne.n	800eac2 <RCC_SetFlashLatencyFromMSIRange+0x82>
 800eabc:	2302      	movs	r3, #2
 800eabe:	613b      	str	r3, [r7, #16]
 800eac0:	e004      	b.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	2b70      	cmp	r3, #112	; 0x70
 800eac6:	d101      	bne.n	800eacc <RCC_SetFlashLatencyFromMSIRange+0x8c>
 800eac8:	2301      	movs	r3, #1
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f023 0207 	bic.w	r2, r3, #7
 800ead4:	4909      	ldr	r1, [pc, #36]	; (800eafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	4313      	orrs	r3, r2
 800eada:	600b      	str	r3, [r1, #0]
 800eadc:	4b07      	ldr	r3, [pc, #28]	; (800eafc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f003 0307 	and.w	r3, r3, #7
 800eae4:	693a      	ldr	r2, [r7, #16]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d001      	beq.n	800eaee <RCC_SetFlashLatencyFromMSIRange+0xae>
 800eaea:	2301      	movs	r3, #1
 800eaec:	e000      	b.n	800eaf0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 800eaee:	2300      	movs	r3, #0
 800eaf0:	4618      	mov	r0, r3
 800eaf2:	3718      	adds	r7, #24
 800eaf4:	46bd      	mov	sp, r7
 800eaf6:	bd80      	pop	{r7, pc}
 800eaf8:	40021000 	.word	0x40021000
 800eafc:	40022000 	.word	0x40022000

0800eb00 <HAL_RCCEx_PeriphCLKConfig>:
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	2300      	movs	r3, #0
 800eb0a:	74fb      	strb	r3, [r7, #19]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	74bb      	strb	r3, [r7, #18]
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d031      	beq.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800eb24:	d01a      	beq.n	800eb5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800eb26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800eb2a:	d814      	bhi.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d009      	beq.n	800eb44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800eb30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800eb34:	d10f      	bne.n	800eb56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800eb36:	4b5d      	ldr	r3, [pc, #372]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	4a5c      	ldr	r2, [pc, #368]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800eb3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb40:	60d3      	str	r3, [r2, #12]
 800eb42:	e00c      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	3304      	adds	r3, #4
 800eb48:	2100      	movs	r1, #0
 800eb4a:	4618      	mov	r0, r3
 800eb4c:	f000 fa2e 	bl	800efac <RCCEx_PLLSAI1_Config>
 800eb50:	4603      	mov	r3, r0
 800eb52:	74fb      	strb	r3, [r7, #19]
 800eb54:	e003      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800eb56:	2301      	movs	r3, #1
 800eb58:	74fb      	strb	r3, [r7, #19]
 800eb5a:	e000      	b.n	800eb5e <HAL_RCCEx_PeriphCLKConfig+0x5e>
 800eb5c:	bf00      	nop
 800eb5e:	7cfb      	ldrb	r3, [r7, #19]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10b      	bne.n	800eb7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800eb64:	4b51      	ldr	r3, [pc, #324]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800eb66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb72:	494e      	ldr	r1, [pc, #312]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800eb74:	4313      	orrs	r3, r2
 800eb76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800eb7a:	e001      	b.n	800eb80 <HAL_RCCEx_PeriphCLKConfig+0x80>
 800eb7c:	7cfb      	ldrb	r3, [r7, #19]
 800eb7e:	74bb      	strb	r3, [r7, #18]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	f000 809e 	beq.w	800ecca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800eb8e:	2300      	movs	r3, #0
 800eb90:	747b      	strb	r3, [r7, #17]
 800eb92:	4b46      	ldr	r3, [pc, #280]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800eb94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800eb96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d101      	bne.n	800eba2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e000      	b.n	800eba4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800eba2:	2300      	movs	r3, #0
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d00d      	beq.n	800ebc4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800eba8:	4b40      	ldr	r3, [pc, #256]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ebaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebac:	4a3f      	ldr	r2, [pc, #252]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ebae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ebb2:	6593      	str	r3, [r2, #88]	; 0x58
 800ebb4:	4b3d      	ldr	r3, [pc, #244]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ebb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ebb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ebbc:	60bb      	str	r3, [r7, #8]
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	747b      	strb	r3, [r7, #17]
 800ebc4:	4b3a      	ldr	r3, [pc, #232]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a39      	ldr	r2, [pc, #228]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ebca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ebce:	6013      	str	r3, [r2, #0]
 800ebd0:	f7fb fbf4 	bl	800a3bc <HAL_GetTick>
 800ebd4:	60f8      	str	r0, [r7, #12]
 800ebd6:	e009      	b.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ebd8:	f7fb fbf0 	bl	800a3bc <HAL_GetTick>
 800ebdc:	4602      	mov	r2, r0
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	1ad3      	subs	r3, r2, r3
 800ebe2:	2b02      	cmp	r3, #2
 800ebe4:	d902      	bls.n	800ebec <HAL_RCCEx_PeriphCLKConfig+0xec>
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	74fb      	strb	r3, [r7, #19]
 800ebea:	e005      	b.n	800ebf8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
 800ebec:	4b30      	ldr	r3, [pc, #192]	; (800ecb0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d0ef      	beq.n	800ebd8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800ebf8:	7cfb      	ldrb	r3, [r7, #19]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d15a      	bne.n	800ecb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800ebfe:	4b2b      	ldr	r3, [pc, #172]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec08:	617b      	str	r3, [r7, #20]
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d01e      	beq.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec14:	697a      	ldr	r2, [r7, #20]
 800ec16:	429a      	cmp	r2, r3
 800ec18:	d019      	beq.n	800ec4e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800ec1a:	4b24      	ldr	r3, [pc, #144]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ec24:	617b      	str	r3, [r7, #20]
 800ec26:	4b21      	ldr	r3, [pc, #132]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec2c:	4a1f      	ldr	r2, [pc, #124]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ec32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ec36:	4b1d      	ldr	r3, [pc, #116]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec3c:	4a1b      	ldr	r2, [pc, #108]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ec42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ec46:	4a19      	ldr	r2, [pc, #100]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	f003 0301 	and.w	r3, r3, #1
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d016      	beq.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800ec58:	f7fb fbb0 	bl	800a3bc <HAL_GetTick>
 800ec5c:	60f8      	str	r0, [r7, #12]
 800ec5e:	e00b      	b.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800ec60:	f7fb fbac 	bl	800a3bc <HAL_GetTick>
 800ec64:	4602      	mov	r2, r0
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	1ad3      	subs	r3, r2, r3
 800ec6a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec6e:	4293      	cmp	r3, r2
 800ec70:	d902      	bls.n	800ec78 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800ec72:	2303      	movs	r3, #3
 800ec74:	74fb      	strb	r3, [r7, #19]
 800ec76:	e006      	b.n	800ec86 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800ec78:	4b0c      	ldr	r3, [pc, #48]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec7e:	f003 0302 	and.w	r3, r3, #2
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d0ec      	beq.n	800ec60 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ec86:	7cfb      	ldrb	r3, [r7, #19]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d10b      	bne.n	800eca4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800ec8c:	4b07      	ldr	r3, [pc, #28]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec9a:	4904      	ldr	r1, [pc, #16]	; (800ecac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800ec9c:	4313      	orrs	r3, r2
 800ec9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800eca2:	e009      	b.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800eca4:	7cfb      	ldrb	r3, [r7, #19]
 800eca6:	74bb      	strb	r3, [r7, #18]
 800eca8:	e006      	b.n	800ecb8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800ecaa:	bf00      	nop
 800ecac:	40021000 	.word	0x40021000
 800ecb0:	40007000 	.word	0x40007000
 800ecb4:	7cfb      	ldrb	r3, [r7, #19]
 800ecb6:	74bb      	strb	r3, [r7, #18]
 800ecb8:	7c7b      	ldrb	r3, [r7, #17]
 800ecba:	2b01      	cmp	r3, #1
 800ecbc:	d105      	bne.n	800ecca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 800ecbe:	4bb2      	ldr	r3, [pc, #712]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ecc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecc2:	4ab1      	ldr	r2, [pc, #708]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ecc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ecc8:	6593      	str	r3, [r2, #88]	; 0x58
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f003 0301 	and.w	r3, r3, #1
 800ecd2:	2b00      	cmp	r3, #0
 800ecd4:	d00a      	beq.n	800ecec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
 800ecd6:	4bac      	ldr	r3, [pc, #688]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ecd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecdc:	f023 0203 	bic.w	r2, r3, #3
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	6a1b      	ldr	r3, [r3, #32]
 800ece4:	49a8      	ldr	r1, [pc, #672]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ece6:	4313      	orrs	r3, r2
 800ece8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f003 0302 	and.w	r3, r3, #2
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00a      	beq.n	800ed0e <HAL_RCCEx_PeriphCLKConfig+0x20e>
 800ecf8:	4ba3      	ldr	r3, [pc, #652]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ecfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecfe:	f023 020c 	bic.w	r2, r3, #12
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed06:	49a0      	ldr	r1, [pc, #640]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f003 0304 	and.w	r3, r3, #4
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d00a      	beq.n	800ed30 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800ed1a:	4b9b      	ldr	r3, [pc, #620]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed20:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed28:	4997      	ldr	r1, [pc, #604]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f003 0320 	and.w	r3, r3, #32
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d00a      	beq.n	800ed52 <HAL_RCCEx_PeriphCLKConfig+0x252>
 800ed3c:	4b92      	ldr	r3, [pc, #584]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed42:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed4a:	498f      	ldr	r1, [pc, #572]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed4c:	4313      	orrs	r3, r2
 800ed4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00a      	beq.n	800ed74 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800ed5e:	4b8a      	ldr	r3, [pc, #552]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed6c:	4986      	ldr	r1, [pc, #536]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d00a      	beq.n	800ed96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800ed80:	4b81      	ldr	r3, [pc, #516]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed8e:	497e      	ldr	r1, [pc, #504]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ed90:	4313      	orrs	r3, r2
 800ed92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d00a      	beq.n	800edb8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800eda2:	4b79      	ldr	r3, [pc, #484]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800eda4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eda8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edb0:	4975      	ldr	r1, [pc, #468]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800edb2:	4313      	orrs	r3, r2
 800edb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00a      	beq.n	800edda <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800edc4:	4b70      	ldr	r3, [pc, #448]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800edc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800edd2:	496d      	ldr	r1, [pc, #436]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800edd4:	4313      	orrs	r3, r2
 800edd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d00a      	beq.n	800edfc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800ede6:	4b68      	ldr	r3, [pc, #416]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ede8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf4:	4964      	ldr	r1, [pc, #400]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800edf6:	4313      	orrs	r3, r2
 800edf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d028      	beq.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800ee08:	4b5f      	ldr	r3, [pc, #380]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee16:	495c      	ldr	r1, [pc, #368]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee26:	d106      	bne.n	800ee36 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ee28:	4b57      	ldr	r3, [pc, #348]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	4a56      	ldr	r2, [pc, #344]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee32:	60d3      	str	r3, [r2, #12]
 800ee34:	e011      	b.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee3a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee3e:	d10c      	bne.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	3304      	adds	r3, #4
 800ee44:	2101      	movs	r1, #1
 800ee46:	4618      	mov	r0, r3
 800ee48:	f000 f8b0 	bl	800efac <RCCEx_PLLSAI1_Config>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	74fb      	strb	r3, [r7, #19]
 800ee50:	7cfb      	ldrb	r3, [r7, #19]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <HAL_RCCEx_PeriphCLKConfig+0x35a>
 800ee56:	7cfb      	ldrb	r3, [r7, #19]
 800ee58:	74bb      	strb	r3, [r7, #18]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d028      	beq.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800ee66:	4b48      	ldr	r3, [pc, #288]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee6c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee74:	4944      	ldr	r1, [pc, #272]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee76:	4313      	orrs	r3, r2
 800ee78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ee84:	d106      	bne.n	800ee94 <HAL_RCCEx_PeriphCLKConfig+0x394>
 800ee86:	4b40      	ldr	r3, [pc, #256]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	4a3f      	ldr	r2, [pc, #252]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ee8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ee90:	60d3      	str	r3, [r2, #12]
 800ee92:	e011      	b.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ee9c:	d10c      	bne.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	3304      	adds	r3, #4
 800eea2:	2101      	movs	r1, #1
 800eea4:	4618      	mov	r0, r3
 800eea6:	f000 f881 	bl	800efac <RCCEx_PLLSAI1_Config>
 800eeaa:	4603      	mov	r3, r0
 800eeac:	74fb      	strb	r3, [r7, #19]
 800eeae:	7cfb      	ldrb	r3, [r7, #19]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
 800eeb4:	7cfb      	ldrb	r3, [r7, #19]
 800eeb6:	74bb      	strb	r3, [r7, #18]
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d028      	beq.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800eec4:	4b30      	ldr	r3, [pc, #192]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800eec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eed2:	492d      	ldr	r1, [pc, #180]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800eed4:	4313      	orrs	r3, r2
 800eed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eee2:	d106      	bne.n	800eef2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 800eee4:	4b28      	ldr	r3, [pc, #160]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800eee6:	68db      	ldr	r3, [r3, #12]
 800eee8:	4a27      	ldr	r2, [pc, #156]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800eeea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eeee:	60d3      	str	r3, [r2, #12]
 800eef0:	e011      	b.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eef6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eefa:	d10c      	bne.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	3304      	adds	r3, #4
 800ef00:	2101      	movs	r1, #1
 800ef02:	4618      	mov	r0, r3
 800ef04:	f000 f852 	bl	800efac <RCCEx_PLLSAI1_Config>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	74fb      	strb	r3, [r7, #19]
 800ef0c:	7cfb      	ldrb	r3, [r7, #19]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ef12:	7cfb      	ldrb	r3, [r7, #19]
 800ef14:	74bb      	strb	r3, [r7, #18]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d01c      	beq.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800ef22:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ef24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef30:	4915      	ldr	r1, [pc, #84]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ef32:	4313      	orrs	r3, r2
 800ef34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ef40:	d10c      	bne.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	3304      	adds	r3, #4
 800ef46:	2102      	movs	r1, #2
 800ef48:	4618      	mov	r0, r3
 800ef4a:	f000 f82f 	bl	800efac <RCCEx_PLLSAI1_Config>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	74fb      	strb	r3, [r7, #19]
 800ef52:	7cfb      	ldrb	r3, [r7, #19]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d001      	beq.n	800ef5c <HAL_RCCEx_PeriphCLKConfig+0x45c>
 800ef58:	7cfb      	ldrb	r3, [r7, #19]
 800ef5a:	74bb      	strb	r3, [r7, #18]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d00a      	beq.n	800ef7e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800ef68:	4b07      	ldr	r3, [pc, #28]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ef6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ef6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef76:	4904      	ldr	r1, [pc, #16]	; (800ef88 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800ef7e:	7cbb      	ldrb	r3, [r7, #18]
 800ef80:	4618      	mov	r0, r3
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	40021000 	.word	0x40021000

0800ef8c <HAL_RCCEx_EnableMSIPLLMode>:
 800ef8c:	b480      	push	{r7}
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	4b05      	ldr	r3, [pc, #20]	; (800efa8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	4a04      	ldr	r2, [pc, #16]	; (800efa8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800ef96:	f043 0304 	orr.w	r3, r3, #4
 800ef9a:	6013      	str	r3, [r2, #0]
 800ef9c:	bf00      	nop
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop
 800efa8:	40021000 	.word	0x40021000

0800efac <RCCEx_PLLSAI1_Config>:
 800efac:	b580      	push	{r7, lr}
 800efae:	b084      	sub	sp, #16
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
 800efb4:	6039      	str	r1, [r7, #0]
 800efb6:	2300      	movs	r3, #0
 800efb8:	73fb      	strb	r3, [r7, #15]
 800efba:	4b74      	ldr	r3, [pc, #464]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	f003 0303 	and.w	r3, r3, #3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d018      	beq.n	800eff8 <RCCEx_PLLSAI1_Config+0x4c>
 800efc6:	4b71      	ldr	r3, [pc, #452]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800efc8:	68db      	ldr	r3, [r3, #12]
 800efca:	f003 0203 	and.w	r2, r3, #3
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	429a      	cmp	r2, r3
 800efd4:	d10d      	bne.n	800eff2 <RCCEx_PLLSAI1_Config+0x46>
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d009      	beq.n	800eff2 <RCCEx_PLLSAI1_Config+0x46>
 800efde:	4b6b      	ldr	r3, [pc, #428]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	091b      	lsrs	r3, r3, #4
 800efe4:	f003 0307 	and.w	r3, r3, #7
 800efe8:	1c5a      	adds	r2, r3, #1
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d047      	beq.n	800f082 <RCCEx_PLLSAI1_Config+0xd6>
 800eff2:	2301      	movs	r3, #1
 800eff4:	73fb      	strb	r3, [r7, #15]
 800eff6:	e044      	b.n	800f082 <RCCEx_PLLSAI1_Config+0xd6>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b03      	cmp	r3, #3
 800effe:	d018      	beq.n	800f032 <RCCEx_PLLSAI1_Config+0x86>
 800f000:	2b03      	cmp	r3, #3
 800f002:	d825      	bhi.n	800f050 <RCCEx_PLLSAI1_Config+0xa4>
 800f004:	2b01      	cmp	r3, #1
 800f006:	d002      	beq.n	800f00e <RCCEx_PLLSAI1_Config+0x62>
 800f008:	2b02      	cmp	r3, #2
 800f00a:	d009      	beq.n	800f020 <RCCEx_PLLSAI1_Config+0x74>
 800f00c:	e020      	b.n	800f050 <RCCEx_PLLSAI1_Config+0xa4>
 800f00e:	4b5f      	ldr	r3, [pc, #380]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f003 0302 	and.w	r3, r3, #2
 800f016:	2b00      	cmp	r3, #0
 800f018:	d11d      	bne.n	800f056 <RCCEx_PLLSAI1_Config+0xaa>
 800f01a:	2301      	movs	r3, #1
 800f01c:	73fb      	strb	r3, [r7, #15]
 800f01e:	e01a      	b.n	800f056 <RCCEx_PLLSAI1_Config+0xaa>
 800f020:	4b5a      	ldr	r3, [pc, #360]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d116      	bne.n	800f05a <RCCEx_PLLSAI1_Config+0xae>
 800f02c:	2301      	movs	r3, #1
 800f02e:	73fb      	strb	r3, [r7, #15]
 800f030:	e013      	b.n	800f05a <RCCEx_PLLSAI1_Config+0xae>
 800f032:	4b56      	ldr	r3, [pc, #344]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d10f      	bne.n	800f05e <RCCEx_PLLSAI1_Config+0xb2>
 800f03e:	4b53      	ldr	r3, [pc, #332]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f046:	2b00      	cmp	r3, #0
 800f048:	d109      	bne.n	800f05e <RCCEx_PLLSAI1_Config+0xb2>
 800f04a:	2301      	movs	r3, #1
 800f04c:	73fb      	strb	r3, [r7, #15]
 800f04e:	e006      	b.n	800f05e <RCCEx_PLLSAI1_Config+0xb2>
 800f050:	2301      	movs	r3, #1
 800f052:	73fb      	strb	r3, [r7, #15]
 800f054:	e004      	b.n	800f060 <RCCEx_PLLSAI1_Config+0xb4>
 800f056:	bf00      	nop
 800f058:	e002      	b.n	800f060 <RCCEx_PLLSAI1_Config+0xb4>
 800f05a:	bf00      	nop
 800f05c:	e000      	b.n	800f060 <RCCEx_PLLSAI1_Config+0xb4>
 800f05e:	bf00      	nop
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d10d      	bne.n	800f082 <RCCEx_PLLSAI1_Config+0xd6>
 800f066:	4b49      	ldr	r3, [pc, #292]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f068:	68db      	ldr	r3, [r3, #12]
 800f06a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6819      	ldr	r1, [r3, #0]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	685b      	ldr	r3, [r3, #4]
 800f076:	3b01      	subs	r3, #1
 800f078:	011b      	lsls	r3, r3, #4
 800f07a:	430b      	orrs	r3, r1
 800f07c:	4943      	ldr	r1, [pc, #268]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f07e:	4313      	orrs	r3, r2
 800f080:	60cb      	str	r3, [r1, #12]
 800f082:	7bfb      	ldrb	r3, [r7, #15]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d17c      	bne.n	800f182 <RCCEx_PLLSAI1_Config+0x1d6>
 800f088:	4b40      	ldr	r3, [pc, #256]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a3f      	ldr	r2, [pc, #252]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f08e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800f092:	6013      	str	r3, [r2, #0]
 800f094:	f7fb f992 	bl	800a3bc <HAL_GetTick>
 800f098:	60b8      	str	r0, [r7, #8]
 800f09a:	e009      	b.n	800f0b0 <RCCEx_PLLSAI1_Config+0x104>
 800f09c:	f7fb f98e 	bl	800a3bc <HAL_GetTick>
 800f0a0:	4602      	mov	r2, r0
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	1ad3      	subs	r3, r2, r3
 800f0a6:	2b02      	cmp	r3, #2
 800f0a8:	d902      	bls.n	800f0b0 <RCCEx_PLLSAI1_Config+0x104>
 800f0aa:	2303      	movs	r3, #3
 800f0ac:	73fb      	strb	r3, [r7, #15]
 800f0ae:	e005      	b.n	800f0bc <RCCEx_PLLSAI1_Config+0x110>
 800f0b0:	4b36      	ldr	r3, [pc, #216]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d1ef      	bne.n	800f09c <RCCEx_PLLSAI1_Config+0xf0>
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d15f      	bne.n	800f182 <RCCEx_PLLSAI1_Config+0x1d6>
 800f0c2:	683b      	ldr	r3, [r7, #0]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d110      	bne.n	800f0ea <RCCEx_PLLSAI1_Config+0x13e>
 800f0c8:	4b30      	ldr	r3, [pc, #192]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f0ca:	691b      	ldr	r3, [r3, #16]
 800f0cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800f0d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f0d4:	687a      	ldr	r2, [r7, #4]
 800f0d6:	6892      	ldr	r2, [r2, #8]
 800f0d8:	0211      	lsls	r1, r2, #8
 800f0da:	687a      	ldr	r2, [r7, #4]
 800f0dc:	68d2      	ldr	r2, [r2, #12]
 800f0de:	06d2      	lsls	r2, r2, #27
 800f0e0:	430a      	orrs	r2, r1
 800f0e2:	492a      	ldr	r1, [pc, #168]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f0e4:	4313      	orrs	r3, r2
 800f0e6:	610b      	str	r3, [r1, #16]
 800f0e8:	e027      	b.n	800f13a <RCCEx_PLLSAI1_Config+0x18e>
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	d112      	bne.n	800f116 <RCCEx_PLLSAI1_Config+0x16a>
 800f0f0:	4b26      	ldr	r3, [pc, #152]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f0f2:	691b      	ldr	r3, [r3, #16]
 800f0f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800f0f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	6892      	ldr	r2, [r2, #8]
 800f100:	0211      	lsls	r1, r2, #8
 800f102:	687a      	ldr	r2, [r7, #4]
 800f104:	6912      	ldr	r2, [r2, #16]
 800f106:	0852      	lsrs	r2, r2, #1
 800f108:	3a01      	subs	r2, #1
 800f10a:	0552      	lsls	r2, r2, #21
 800f10c:	430a      	orrs	r2, r1
 800f10e:	491f      	ldr	r1, [pc, #124]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f110:	4313      	orrs	r3, r2
 800f112:	610b      	str	r3, [r1, #16]
 800f114:	e011      	b.n	800f13a <RCCEx_PLLSAI1_Config+0x18e>
 800f116:	4b1d      	ldr	r3, [pc, #116]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800f11e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800f122:	687a      	ldr	r2, [r7, #4]
 800f124:	6892      	ldr	r2, [r2, #8]
 800f126:	0211      	lsls	r1, r2, #8
 800f128:	687a      	ldr	r2, [r7, #4]
 800f12a:	6952      	ldr	r2, [r2, #20]
 800f12c:	0852      	lsrs	r2, r2, #1
 800f12e:	3a01      	subs	r2, #1
 800f130:	0652      	lsls	r2, r2, #25
 800f132:	430a      	orrs	r2, r1
 800f134:	4915      	ldr	r1, [pc, #84]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f136:	4313      	orrs	r3, r2
 800f138:	610b      	str	r3, [r1, #16]
 800f13a:	4b14      	ldr	r3, [pc, #80]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	4a13      	ldr	r2, [pc, #76]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f140:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	f7fb f939 	bl	800a3bc <HAL_GetTick>
 800f14a:	60b8      	str	r0, [r7, #8]
 800f14c:	e009      	b.n	800f162 <RCCEx_PLLSAI1_Config+0x1b6>
 800f14e:	f7fb f935 	bl	800a3bc <HAL_GetTick>
 800f152:	4602      	mov	r2, r0
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	1ad3      	subs	r3, r2, r3
 800f158:	2b02      	cmp	r3, #2
 800f15a:	d902      	bls.n	800f162 <RCCEx_PLLSAI1_Config+0x1b6>
 800f15c:	2303      	movs	r3, #3
 800f15e:	73fb      	strb	r3, [r7, #15]
 800f160:	e005      	b.n	800f16e <RCCEx_PLLSAI1_Config+0x1c2>
 800f162:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d0ef      	beq.n	800f14e <RCCEx_PLLSAI1_Config+0x1a2>
 800f16e:	7bfb      	ldrb	r3, [r7, #15]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d106      	bne.n	800f182 <RCCEx_PLLSAI1_Config+0x1d6>
 800f174:	4b05      	ldr	r3, [pc, #20]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f176:	691a      	ldr	r2, [r3, #16]
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	699b      	ldr	r3, [r3, #24]
 800f17c:	4903      	ldr	r1, [pc, #12]	; (800f18c <RCCEx_PLLSAI1_Config+0x1e0>)
 800f17e:	4313      	orrs	r3, r2
 800f180:	610b      	str	r3, [r1, #16]
 800f182:	7bfb      	ldrb	r3, [r7, #15]
 800f184:	4618      	mov	r0, r3
 800f186:	3710      	adds	r7, #16
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	40021000 	.word	0x40021000

0800f190 <HAL_TIM_Base_Init>:
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d101      	bne.n	800f1a2 <HAL_TIM_Base_Init+0x12>
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e049      	b.n	800f236 <HAL_TIM_Base_Init+0xa6>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f1a8:	b2db      	uxtb	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d106      	bne.n	800f1bc <HAL_TIM_Base_Init+0x2c>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f1b6:	6878      	ldr	r0, [r7, #4]
 800f1b8:	f7fa fe0c 	bl	8009dd4 <HAL_TIM_Base_MspInit>
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2202      	movs	r2, #2
 800f1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681a      	ldr	r2, [r3, #0]
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	3304      	adds	r3, #4
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	4610      	mov	r0, r2
 800f1d0:	f000 fcaa 	bl	800fb28 <TIM_Base_SetConfig>
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2201      	movs	r2, #1
 800f1e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2201      	movs	r2, #1
 800f1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2201      	movs	r2, #1
 800f1f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2201      	movs	r2, #1
 800f208:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2201      	movs	r2, #1
 800f210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	2201      	movs	r2, #1
 800f220:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	2201      	movs	r2, #1
 800f228:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2201      	movs	r2, #1
 800f230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f234:	2300      	movs	r3, #0
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
	...

0800f240 <HAL_TIM_Base_Start_IT>:
 800f240:	b480      	push	{r7}
 800f242:	b085      	sub	sp, #20
 800f244:	af00      	add	r7, sp, #0
 800f246:	6078      	str	r0, [r7, #4]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	2b01      	cmp	r3, #1
 800f252:	d001      	beq.n	800f258 <HAL_TIM_Base_Start_IT+0x18>
 800f254:	2301      	movs	r3, #1
 800f256:	e03b      	b.n	800f2d0 <HAL_TIM_Base_Start_IT+0x90>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2202      	movs	r2, #2
 800f25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68da      	ldr	r2, [r3, #12]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	f042 0201 	orr.w	r2, r2, #1
 800f26e:	60da      	str	r2, [r3, #12]
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	4a19      	ldr	r2, [pc, #100]	; (800f2dc <HAL_TIM_Base_Start_IT+0x9c>)
 800f276:	4293      	cmp	r3, r2
 800f278:	d009      	beq.n	800f28e <HAL_TIM_Base_Start_IT+0x4e>
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f282:	d004      	beq.n	800f28e <HAL_TIM_Base_Start_IT+0x4e>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4a15      	ldr	r2, [pc, #84]	; (800f2e0 <HAL_TIM_Base_Start_IT+0xa0>)
 800f28a:	4293      	cmp	r3, r2
 800f28c:	d115      	bne.n	800f2ba <HAL_TIM_Base_Start_IT+0x7a>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	689a      	ldr	r2, [r3, #8]
 800f294:	4b13      	ldr	r3, [pc, #76]	; (800f2e4 <HAL_TIM_Base_Start_IT+0xa4>)
 800f296:	4013      	ands	r3, r2
 800f298:	60fb      	str	r3, [r7, #12]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	2b06      	cmp	r3, #6
 800f29e:	d015      	beq.n	800f2cc <HAL_TIM_Base_Start_IT+0x8c>
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2a6:	d011      	beq.n	800f2cc <HAL_TIM_Base_Start_IT+0x8c>
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	681a      	ldr	r2, [r3, #0]
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	f042 0201 	orr.w	r2, r2, #1
 800f2b6:	601a      	str	r2, [r3, #0]
 800f2b8:	e008      	b.n	800f2cc <HAL_TIM_Base_Start_IT+0x8c>
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	f042 0201 	orr.w	r2, r2, #1
 800f2c8:	601a      	str	r2, [r3, #0]
 800f2ca:	e000      	b.n	800f2ce <HAL_TIM_Base_Start_IT+0x8e>
 800f2cc:	bf00      	nop
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	3714      	adds	r7, #20
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2da:	4770      	bx	lr
 800f2dc:	40012c00 	.word	0x40012c00
 800f2e0:	40014000 	.word	0x40014000
 800f2e4:	00010007 	.word	0x00010007

0800f2e8 <HAL_TIM_PWM_Init>:
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b082      	sub	sp, #8
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	6078      	str	r0, [r7, #4]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d101      	bne.n	800f2fa <HAL_TIM_PWM_Init+0x12>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e049      	b.n	800f38e <HAL_TIM_PWM_Init+0xa6>
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <HAL_TIM_PWM_Init+0x2c>
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	2200      	movs	r2, #0
 800f30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	f000 f841 	bl	800f396 <HAL_TIM_PWM_MspInit>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2202      	movs	r2, #2
 800f318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	3304      	adds	r3, #4
 800f324:	4619      	mov	r1, r3
 800f326:	4610      	mov	r0, r2
 800f328:	f000 fbfe 	bl	800fb28 <TIM_Base_SetConfig>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2201      	movs	r2, #1
 800f338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	2201      	movs	r2, #1
 800f348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2201      	movs	r2, #1
 800f350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	2201      	movs	r2, #1
 800f358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2201      	movs	r2, #1
 800f360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2201      	movs	r2, #1
 800f368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2201      	movs	r2, #1
 800f378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	2201      	movs	r2, #1
 800f380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	2201      	movs	r2, #1
 800f388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800f38c:	2300      	movs	r3, #0
 800f38e:	4618      	mov	r0, r3
 800f390:	3708      	adds	r7, #8
 800f392:	46bd      	mov	sp, r7
 800f394:	bd80      	pop	{r7, pc}

0800f396 <HAL_TIM_PWM_MspInit>:
 800f396:	b480      	push	{r7}
 800f398:	b083      	sub	sp, #12
 800f39a:	af00      	add	r7, sp, #0
 800f39c:	6078      	str	r0, [r7, #4]
 800f39e:	bf00      	nop
 800f3a0:	370c      	adds	r7, #12
 800f3a2:	46bd      	mov	sp, r7
 800f3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a8:	4770      	bx	lr
	...

0800f3ac <HAL_TIM_PWM_Start>:
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b084      	sub	sp, #16
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	6039      	str	r1, [r7, #0]
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d109      	bne.n	800f3d0 <HAL_TIM_PWM_Start+0x24>
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3c2:	b2db      	uxtb	r3, r3
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	bf14      	ite	ne
 800f3c8:	2301      	movne	r3, #1
 800f3ca:	2300      	moveq	r3, #0
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	e03c      	b.n	800f44a <HAL_TIM_PWM_Start+0x9e>
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	2b04      	cmp	r3, #4
 800f3d4:	d109      	bne.n	800f3ea <HAL_TIM_PWM_Start+0x3e>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	2b01      	cmp	r3, #1
 800f3e0:	bf14      	ite	ne
 800f3e2:	2301      	movne	r3, #1
 800f3e4:	2300      	moveq	r3, #0
 800f3e6:	b2db      	uxtb	r3, r3
 800f3e8:	e02f      	b.n	800f44a <HAL_TIM_PWM_Start+0x9e>
 800f3ea:	683b      	ldr	r3, [r7, #0]
 800f3ec:	2b08      	cmp	r3, #8
 800f3ee:	d109      	bne.n	800f404 <HAL_TIM_PWM_Start+0x58>
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	bf14      	ite	ne
 800f3fc:	2301      	movne	r3, #1
 800f3fe:	2300      	moveq	r3, #0
 800f400:	b2db      	uxtb	r3, r3
 800f402:	e022      	b.n	800f44a <HAL_TIM_PWM_Start+0x9e>
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	2b0c      	cmp	r3, #12
 800f408:	d109      	bne.n	800f41e <HAL_TIM_PWM_Start+0x72>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f410:	b2db      	uxtb	r3, r3
 800f412:	2b01      	cmp	r3, #1
 800f414:	bf14      	ite	ne
 800f416:	2301      	movne	r3, #1
 800f418:	2300      	moveq	r3, #0
 800f41a:	b2db      	uxtb	r3, r3
 800f41c:	e015      	b.n	800f44a <HAL_TIM_PWM_Start+0x9e>
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	2b10      	cmp	r3, #16
 800f422:	d109      	bne.n	800f438 <HAL_TIM_PWM_Start+0x8c>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	bf14      	ite	ne
 800f430:	2301      	movne	r3, #1
 800f432:	2300      	moveq	r3, #0
 800f434:	b2db      	uxtb	r3, r3
 800f436:	e008      	b.n	800f44a <HAL_TIM_PWM_Start+0x9e>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	2b01      	cmp	r3, #1
 800f442:	bf14      	ite	ne
 800f444:	2301      	movne	r3, #1
 800f446:	2300      	moveq	r3, #0
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d001      	beq.n	800f452 <HAL_TIM_PWM_Start+0xa6>
 800f44e:	2301      	movs	r3, #1
 800f450:	e07e      	b.n	800f550 <HAL_TIM_PWM_Start+0x1a4>
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d104      	bne.n	800f462 <HAL_TIM_PWM_Start+0xb6>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2202      	movs	r2, #2
 800f45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f460:	e023      	b.n	800f4aa <HAL_TIM_PWM_Start+0xfe>
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	2b04      	cmp	r3, #4
 800f466:	d104      	bne.n	800f472 <HAL_TIM_PWM_Start+0xc6>
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2202      	movs	r2, #2
 800f46c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f470:	e01b      	b.n	800f4aa <HAL_TIM_PWM_Start+0xfe>
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	2b08      	cmp	r3, #8
 800f476:	d104      	bne.n	800f482 <HAL_TIM_PWM_Start+0xd6>
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2202      	movs	r2, #2
 800f47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f480:	e013      	b.n	800f4aa <HAL_TIM_PWM_Start+0xfe>
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	2b0c      	cmp	r3, #12
 800f486:	d104      	bne.n	800f492 <HAL_TIM_PWM_Start+0xe6>
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2202      	movs	r2, #2
 800f48c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f490:	e00b      	b.n	800f4aa <HAL_TIM_PWM_Start+0xfe>
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	2b10      	cmp	r3, #16
 800f496:	d104      	bne.n	800f4a2 <HAL_TIM_PWM_Start+0xf6>
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2202      	movs	r2, #2
 800f49c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4a0:	e003      	b.n	800f4aa <HAL_TIM_PWM_Start+0xfe>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2202      	movs	r2, #2
 800f4a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2201      	movs	r2, #1
 800f4b0:	6839      	ldr	r1, [r7, #0]
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f000 fe1a 	bl	80100ec <TIM_CCxChannelCmd>
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4a26      	ldr	r2, [pc, #152]	; (800f558 <HAL_TIM_PWM_Start+0x1ac>)
 800f4be:	4293      	cmp	r3, r2
 800f4c0:	d009      	beq.n	800f4d6 <HAL_TIM_PWM_Start+0x12a>
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	4a25      	ldr	r2, [pc, #148]	; (800f55c <HAL_TIM_PWM_Start+0x1b0>)
 800f4c8:	4293      	cmp	r3, r2
 800f4ca:	d004      	beq.n	800f4d6 <HAL_TIM_PWM_Start+0x12a>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	4a23      	ldr	r2, [pc, #140]	; (800f560 <HAL_TIM_PWM_Start+0x1b4>)
 800f4d2:	4293      	cmp	r3, r2
 800f4d4:	d101      	bne.n	800f4da <HAL_TIM_PWM_Start+0x12e>
 800f4d6:	2301      	movs	r3, #1
 800f4d8:	e000      	b.n	800f4dc <HAL_TIM_PWM_Start+0x130>
 800f4da:	2300      	movs	r3, #0
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d007      	beq.n	800f4f0 <HAL_TIM_PWM_Start+0x144>
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f4ee:	645a      	str	r2, [r3, #68]	; 0x44
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	4a18      	ldr	r2, [pc, #96]	; (800f558 <HAL_TIM_PWM_Start+0x1ac>)
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d009      	beq.n	800f50e <HAL_TIM_PWM_Start+0x162>
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f502:	d004      	beq.n	800f50e <HAL_TIM_PWM_Start+0x162>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	4a14      	ldr	r2, [pc, #80]	; (800f55c <HAL_TIM_PWM_Start+0x1b0>)
 800f50a:	4293      	cmp	r3, r2
 800f50c:	d115      	bne.n	800f53a <HAL_TIM_PWM_Start+0x18e>
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	689a      	ldr	r2, [r3, #8]
 800f514:	4b13      	ldr	r3, [pc, #76]	; (800f564 <HAL_TIM_PWM_Start+0x1b8>)
 800f516:	4013      	ands	r3, r2
 800f518:	60fb      	str	r3, [r7, #12]
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	2b06      	cmp	r3, #6
 800f51e:	d015      	beq.n	800f54c <HAL_TIM_PWM_Start+0x1a0>
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f526:	d011      	beq.n	800f54c <HAL_TIM_PWM_Start+0x1a0>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	681a      	ldr	r2, [r3, #0]
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f042 0201 	orr.w	r2, r2, #1
 800f536:	601a      	str	r2, [r3, #0]
 800f538:	e008      	b.n	800f54c <HAL_TIM_PWM_Start+0x1a0>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	681a      	ldr	r2, [r3, #0]
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	f042 0201 	orr.w	r2, r2, #1
 800f548:	601a      	str	r2, [r3, #0]
 800f54a:	e000      	b.n	800f54e <HAL_TIM_PWM_Start+0x1a2>
 800f54c:	bf00      	nop
 800f54e:	2300      	movs	r3, #0
 800f550:	4618      	mov	r0, r3
 800f552:	3710      	adds	r7, #16
 800f554:	46bd      	mov	sp, r7
 800f556:	bd80      	pop	{r7, pc}
 800f558:	40012c00 	.word	0x40012c00
 800f55c:	40014000 	.word	0x40014000
 800f560:	40014400 	.word	0x40014400
 800f564:	00010007 	.word	0x00010007

0800f568 <HAL_TIM_PWM_Stop>:
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
 800f570:	6039      	str	r1, [r7, #0]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	2200      	movs	r2, #0
 800f578:	6839      	ldr	r1, [r7, #0]
 800f57a:	4618      	mov	r0, r3
 800f57c:	f000 fdb6 	bl	80100ec <TIM_CCxChannelCmd>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4a39      	ldr	r2, [pc, #228]	; (800f66c <HAL_TIM_PWM_Stop+0x104>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d009      	beq.n	800f59e <HAL_TIM_PWM_Stop+0x36>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a38      	ldr	r2, [pc, #224]	; (800f670 <HAL_TIM_PWM_Stop+0x108>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d004      	beq.n	800f59e <HAL_TIM_PWM_Stop+0x36>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	4a36      	ldr	r2, [pc, #216]	; (800f674 <HAL_TIM_PWM_Stop+0x10c>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d101      	bne.n	800f5a2 <HAL_TIM_PWM_Stop+0x3a>
 800f59e:	2301      	movs	r3, #1
 800f5a0:	e000      	b.n	800f5a4 <HAL_TIM_PWM_Stop+0x3c>
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d017      	beq.n	800f5d8 <HAL_TIM_PWM_Stop+0x70>
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	6a1a      	ldr	r2, [r3, #32]
 800f5ae:	f241 1311 	movw	r3, #4369	; 0x1111
 800f5b2:	4013      	ands	r3, r2
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d10f      	bne.n	800f5d8 <HAL_TIM_PWM_Stop+0x70>
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	6a1a      	ldr	r2, [r3, #32]
 800f5be:	f240 4344 	movw	r3, #1092	; 0x444
 800f5c2:	4013      	ands	r3, r2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d107      	bne.n	800f5d8 <HAL_TIM_PWM_Stop+0x70>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800f5d6:	645a      	str	r2, [r3, #68]	; 0x44
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	6a1a      	ldr	r2, [r3, #32]
 800f5de:	f241 1311 	movw	r3, #4369	; 0x1111
 800f5e2:	4013      	ands	r3, r2
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d10f      	bne.n	800f608 <HAL_TIM_PWM_Stop+0xa0>
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	6a1a      	ldr	r2, [r3, #32]
 800f5ee:	f240 4344 	movw	r3, #1092	; 0x444
 800f5f2:	4013      	ands	r3, r2
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d107      	bne.n	800f608 <HAL_TIM_PWM_Stop+0xa0>
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	681b      	ldr	r3, [r3, #0]
 800f5fc:	681a      	ldr	r2, [r3, #0]
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f022 0201 	bic.w	r2, r2, #1
 800f606:	601a      	str	r2, [r3, #0]
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d104      	bne.n	800f618 <HAL_TIM_PWM_Stop+0xb0>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	2201      	movs	r2, #1
 800f612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f616:	e023      	b.n	800f660 <HAL_TIM_PWM_Stop+0xf8>
 800f618:	683b      	ldr	r3, [r7, #0]
 800f61a:	2b04      	cmp	r3, #4
 800f61c:	d104      	bne.n	800f628 <HAL_TIM_PWM_Stop+0xc0>
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	2201      	movs	r2, #1
 800f622:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f626:	e01b      	b.n	800f660 <HAL_TIM_PWM_Stop+0xf8>
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	2b08      	cmp	r3, #8
 800f62c:	d104      	bne.n	800f638 <HAL_TIM_PWM_Stop+0xd0>
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f636:	e013      	b.n	800f660 <HAL_TIM_PWM_Stop+0xf8>
 800f638:	683b      	ldr	r3, [r7, #0]
 800f63a:	2b0c      	cmp	r3, #12
 800f63c:	d104      	bne.n	800f648 <HAL_TIM_PWM_Stop+0xe0>
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2201      	movs	r2, #1
 800f642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f646:	e00b      	b.n	800f660 <HAL_TIM_PWM_Stop+0xf8>
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	2b10      	cmp	r3, #16
 800f64c:	d104      	bne.n	800f658 <HAL_TIM_PWM_Stop+0xf0>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	2201      	movs	r2, #1
 800f652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f656:	e003      	b.n	800f660 <HAL_TIM_PWM_Stop+0xf8>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f660:	2300      	movs	r3, #0
 800f662:	4618      	mov	r0, r3
 800f664:	3708      	adds	r7, #8
 800f666:	46bd      	mov	sp, r7
 800f668:	bd80      	pop	{r7, pc}
 800f66a:	bf00      	nop
 800f66c:	40012c00 	.word	0x40012c00
 800f670:	40014000 	.word	0x40014000
 800f674:	40014400 	.word	0x40014400

0800f678 <HAL_TIM_IRQHandler>:
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	691b      	ldr	r3, [r3, #16]
 800f686:	f003 0302 	and.w	r3, r3, #2
 800f68a:	2b02      	cmp	r3, #2
 800f68c:	d122      	bne.n	800f6d4 <HAL_TIM_IRQHandler+0x5c>
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68db      	ldr	r3, [r3, #12]
 800f694:	f003 0302 	and.w	r3, r3, #2
 800f698:	2b02      	cmp	r3, #2
 800f69a:	d11b      	bne.n	800f6d4 <HAL_TIM_IRQHandler+0x5c>
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	f06f 0202 	mvn.w	r2, #2
 800f6a4:	611a      	str	r2, [r3, #16]
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	2201      	movs	r2, #1
 800f6aa:	771a      	strb	r2, [r3, #28]
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	699b      	ldr	r3, [r3, #24]
 800f6b2:	f003 0303 	and.w	r3, r3, #3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d003      	beq.n	800f6c2 <HAL_TIM_IRQHandler+0x4a>
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f000 fa16 	bl	800faec <HAL_TIM_IC_CaptureCallback>
 800f6c0:	e005      	b.n	800f6ce <HAL_TIM_IRQHandler+0x56>
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fa08 	bl	800fad8 <HAL_TIM_OC_DelayElapsedCallback>
 800f6c8:	6878      	ldr	r0, [r7, #4]
 800f6ca:	f000 fa19 	bl	800fb00 <HAL_TIM_PWM_PulseFinishedCallback>
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	771a      	strb	r2, [r3, #28]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	691b      	ldr	r3, [r3, #16]
 800f6da:	f003 0304 	and.w	r3, r3, #4
 800f6de:	2b04      	cmp	r3, #4
 800f6e0:	d122      	bne.n	800f728 <HAL_TIM_IRQHandler+0xb0>
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	68db      	ldr	r3, [r3, #12]
 800f6e8:	f003 0304 	and.w	r3, r3, #4
 800f6ec:	2b04      	cmp	r3, #4
 800f6ee:	d11b      	bne.n	800f728 <HAL_TIM_IRQHandler+0xb0>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	f06f 0204 	mvn.w	r2, #4
 800f6f8:	611a      	str	r2, [r3, #16]
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	2202      	movs	r2, #2
 800f6fe:	771a      	strb	r2, [r3, #28]
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	699b      	ldr	r3, [r3, #24]
 800f706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d003      	beq.n	800f716 <HAL_TIM_IRQHandler+0x9e>
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f000 f9ec 	bl	800faec <HAL_TIM_IC_CaptureCallback>
 800f714:	e005      	b.n	800f722 <HAL_TIM_IRQHandler+0xaa>
 800f716:	6878      	ldr	r0, [r7, #4]
 800f718:	f000 f9de 	bl	800fad8 <HAL_TIM_OC_DelayElapsedCallback>
 800f71c:	6878      	ldr	r0, [r7, #4]
 800f71e:	f000 f9ef 	bl	800fb00 <HAL_TIM_PWM_PulseFinishedCallback>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2200      	movs	r2, #0
 800f726:	771a      	strb	r2, [r3, #28]
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	f003 0308 	and.w	r3, r3, #8
 800f732:	2b08      	cmp	r3, #8
 800f734:	d122      	bne.n	800f77c <HAL_TIM_IRQHandler+0x104>
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	68db      	ldr	r3, [r3, #12]
 800f73c:	f003 0308 	and.w	r3, r3, #8
 800f740:	2b08      	cmp	r3, #8
 800f742:	d11b      	bne.n	800f77c <HAL_TIM_IRQHandler+0x104>
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	f06f 0208 	mvn.w	r2, #8
 800f74c:	611a      	str	r2, [r3, #16]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2204      	movs	r2, #4
 800f752:	771a      	strb	r2, [r3, #28]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	69db      	ldr	r3, [r3, #28]
 800f75a:	f003 0303 	and.w	r3, r3, #3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d003      	beq.n	800f76a <HAL_TIM_IRQHandler+0xf2>
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f000 f9c2 	bl	800faec <HAL_TIM_IC_CaptureCallback>
 800f768:	e005      	b.n	800f776 <HAL_TIM_IRQHandler+0xfe>
 800f76a:	6878      	ldr	r0, [r7, #4]
 800f76c:	f000 f9b4 	bl	800fad8 <HAL_TIM_OC_DelayElapsedCallback>
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f000 f9c5 	bl	800fb00 <HAL_TIM_PWM_PulseFinishedCallback>
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	2200      	movs	r2, #0
 800f77a:	771a      	strb	r2, [r3, #28]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	691b      	ldr	r3, [r3, #16]
 800f782:	f003 0310 	and.w	r3, r3, #16
 800f786:	2b10      	cmp	r3, #16
 800f788:	d122      	bne.n	800f7d0 <HAL_TIM_IRQHandler+0x158>
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	f003 0310 	and.w	r3, r3, #16
 800f794:	2b10      	cmp	r3, #16
 800f796:	d11b      	bne.n	800f7d0 <HAL_TIM_IRQHandler+0x158>
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f06f 0210 	mvn.w	r2, #16
 800f7a0:	611a      	str	r2, [r3, #16]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2208      	movs	r2, #8
 800f7a6:	771a      	strb	r2, [r3, #28]
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	69db      	ldr	r3, [r3, #28]
 800f7ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d003      	beq.n	800f7be <HAL_TIM_IRQHandler+0x146>
 800f7b6:	6878      	ldr	r0, [r7, #4]
 800f7b8:	f000 f998 	bl	800faec <HAL_TIM_IC_CaptureCallback>
 800f7bc:	e005      	b.n	800f7ca <HAL_TIM_IRQHandler+0x152>
 800f7be:	6878      	ldr	r0, [r7, #4]
 800f7c0:	f000 f98a 	bl	800fad8 <HAL_TIM_OC_DelayElapsedCallback>
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f99b 	bl	800fb00 <HAL_TIM_PWM_PulseFinishedCallback>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	771a      	strb	r2, [r3, #28]
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	691b      	ldr	r3, [r3, #16]
 800f7d6:	f003 0301 	and.w	r3, r3, #1
 800f7da:	2b01      	cmp	r3, #1
 800f7dc:	d10e      	bne.n	800f7fc <HAL_TIM_IRQHandler+0x184>
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	f003 0301 	and.w	r3, r3, #1
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d107      	bne.n	800f7fc <HAL_TIM_IRQHandler+0x184>
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	f06f 0201 	mvn.w	r2, #1
 800f7f4:	611a      	str	r2, [r3, #16]
 800f7f6:	6878      	ldr	r0, [r7, #4]
 800f7f8:	f7f9 ffc6 	bl	8009788 <HAL_TIM_PeriodElapsedCallback>
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	691b      	ldr	r3, [r3, #16]
 800f802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f806:	2b80      	cmp	r3, #128	; 0x80
 800f808:	d10e      	bne.n	800f828 <HAL_TIM_IRQHandler+0x1b0>
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	68db      	ldr	r3, [r3, #12]
 800f810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f814:	2b80      	cmp	r3, #128	; 0x80
 800f816:	d107      	bne.n	800f828 <HAL_TIM_IRQHandler+0x1b0>
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f820:	611a      	str	r2, [r3, #16]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f000 fd70 	bl	8010308 <HAL_TIMEx_BreakCallback>
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	691b      	ldr	r3, [r3, #16]
 800f82e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f836:	d10e      	bne.n	800f856 <HAL_TIM_IRQHandler+0x1de>
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f842:	2b80      	cmp	r3, #128	; 0x80
 800f844:	d107      	bne.n	800f856 <HAL_TIM_IRQHandler+0x1de>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f84e:	611a      	str	r2, [r3, #16]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	f000 fd63 	bl	801031c <HAL_TIMEx_Break2Callback>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	691b      	ldr	r3, [r3, #16]
 800f85c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f860:	2b40      	cmp	r3, #64	; 0x40
 800f862:	d10e      	bne.n	800f882 <HAL_TIM_IRQHandler+0x20a>
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	68db      	ldr	r3, [r3, #12]
 800f86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f86e:	2b40      	cmp	r3, #64	; 0x40
 800f870:	d107      	bne.n	800f882 <HAL_TIM_IRQHandler+0x20a>
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f87a:	611a      	str	r2, [r3, #16]
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f000 f949 	bl	800fb14 <HAL_TIM_TriggerCallback>
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	691b      	ldr	r3, [r3, #16]
 800f888:	f003 0320 	and.w	r3, r3, #32
 800f88c:	2b20      	cmp	r3, #32
 800f88e:	d10e      	bne.n	800f8ae <HAL_TIM_IRQHandler+0x236>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	68db      	ldr	r3, [r3, #12]
 800f896:	f003 0320 	and.w	r3, r3, #32
 800f89a:	2b20      	cmp	r3, #32
 800f89c:	d107      	bne.n	800f8ae <HAL_TIM_IRQHandler+0x236>
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f06f 0220 	mvn.w	r2, #32
 800f8a6:	611a      	str	r2, [r3, #16]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f000 fd23 	bl	80102f4 <HAL_TIMEx_CommutCallback>
 800f8ae:	bf00      	nop
 800f8b0:	3708      	adds	r7, #8
 800f8b2:	46bd      	mov	sp, r7
 800f8b4:	bd80      	pop	{r7, pc}
	...

0800f8b8 <HAL_TIM_PWM_ConfigChannel>:
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	60f8      	str	r0, [r7, #12]
 800f8c0:	60b9      	str	r1, [r7, #8]
 800f8c2:	607a      	str	r2, [r7, #4]
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f8ca:	2b01      	cmp	r3, #1
 800f8cc:	d101      	bne.n	800f8d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800f8ce:	2302      	movs	r3, #2
 800f8d0:	e0fd      	b.n	800face <HAL_TIM_PWM_ConfigChannel+0x216>
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	2201      	movs	r2, #1
 800f8d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	2b14      	cmp	r3, #20
 800f8de:	f200 80f0 	bhi.w	800fac2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800f8e2:	a201      	add	r2, pc, #4	; (adr r2, 800f8e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800f8e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8e8:	0800f93d 	.word	0x0800f93d
 800f8ec:	0800fac3 	.word	0x0800fac3
 800f8f0:	0800fac3 	.word	0x0800fac3
 800f8f4:	0800fac3 	.word	0x0800fac3
 800f8f8:	0800f97d 	.word	0x0800f97d
 800f8fc:	0800fac3 	.word	0x0800fac3
 800f900:	0800fac3 	.word	0x0800fac3
 800f904:	0800fac3 	.word	0x0800fac3
 800f908:	0800f9bf 	.word	0x0800f9bf
 800f90c:	0800fac3 	.word	0x0800fac3
 800f910:	0800fac3 	.word	0x0800fac3
 800f914:	0800fac3 	.word	0x0800fac3
 800f918:	0800f9ff 	.word	0x0800f9ff
 800f91c:	0800fac3 	.word	0x0800fac3
 800f920:	0800fac3 	.word	0x0800fac3
 800f924:	0800fac3 	.word	0x0800fac3
 800f928:	0800fa41 	.word	0x0800fa41
 800f92c:	0800fac3 	.word	0x0800fac3
 800f930:	0800fac3 	.word	0x0800fac3
 800f934:	0800fac3 	.word	0x0800fac3
 800f938:	0800fa81 	.word	0x0800fa81
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	68b9      	ldr	r1, [r7, #8]
 800f942:	4618      	mov	r0, r3
 800f944:	f000 f954 	bl	800fbf0 <TIM_OC1_SetConfig>
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f042 0208 	orr.w	r2, r2, #8
 800f956:	619a      	str	r2, [r3, #24]
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	699a      	ldr	r2, [r3, #24]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f022 0204 	bic.w	r2, r2, #4
 800f966:	619a      	str	r2, [r3, #24]
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	6999      	ldr	r1, [r3, #24]
 800f96e:	68bb      	ldr	r3, [r7, #8]
 800f970:	691a      	ldr	r2, [r3, #16]
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	430a      	orrs	r2, r1
 800f978:	619a      	str	r2, [r3, #24]
 800f97a:	e0a3      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	68b9      	ldr	r1, [r7, #8]
 800f982:	4618      	mov	r0, r3
 800f984:	f000 f9b0 	bl	800fce8 <TIM_OC2_SetConfig>
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	699a      	ldr	r2, [r3, #24]
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f996:	619a      	str	r2, [r3, #24]
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	699a      	ldr	r2, [r3, #24]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f9a6:	619a      	str	r2, [r3, #24]
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	681b      	ldr	r3, [r3, #0]
 800f9ac:	6999      	ldr	r1, [r3, #24]
 800f9ae:	68bb      	ldr	r3, [r7, #8]
 800f9b0:	691b      	ldr	r3, [r3, #16]
 800f9b2:	021a      	lsls	r2, r3, #8
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	430a      	orrs	r2, r1
 800f9ba:	619a      	str	r2, [r3, #24]
 800f9bc:	e082      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	68b9      	ldr	r1, [r7, #8]
 800f9c4:	4618      	mov	r0, r3
 800f9c6:	f000 fa09 	bl	800fddc <TIM_OC3_SetConfig>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	69da      	ldr	r2, [r3, #28]
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	f042 0208 	orr.w	r2, r2, #8
 800f9d8:	61da      	str	r2, [r3, #28]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	69da      	ldr	r2, [r3, #28]
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	681b      	ldr	r3, [r3, #0]
 800f9e4:	f022 0204 	bic.w	r2, r2, #4
 800f9e8:	61da      	str	r2, [r3, #28]
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	69d9      	ldr	r1, [r3, #28]
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	691a      	ldr	r2, [r3, #16]
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	430a      	orrs	r2, r1
 800f9fa:	61da      	str	r2, [r3, #28]
 800f9fc:	e062      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68b9      	ldr	r1, [r7, #8]
 800fa04:	4618      	mov	r0, r3
 800fa06:	f000 fa61 	bl	800fecc <TIM_OC4_SetConfig>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	69da      	ldr	r2, [r3, #28]
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa18:	61da      	str	r2, [r3, #28]
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	69da      	ldr	r2, [r3, #28]
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fa28:	61da      	str	r2, [r3, #28]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	69d9      	ldr	r1, [r3, #28]
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	021a      	lsls	r2, r3, #8
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	430a      	orrs	r2, r1
 800fa3c:	61da      	str	r2, [r3, #28]
 800fa3e:	e041      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	68b9      	ldr	r1, [r7, #8]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f000 fa9e 	bl	800ff88 <TIM_OC5_SetConfig>
 800fa4c:	68fb      	ldr	r3, [r7, #12]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	f042 0208 	orr.w	r2, r2, #8
 800fa5a:	655a      	str	r2, [r3, #84]	; 0x54
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f022 0204 	bic.w	r2, r2, #4
 800fa6a:	655a      	str	r2, [r3, #84]	; 0x54
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	691a      	ldr	r2, [r3, #16]
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	430a      	orrs	r2, r1
 800fa7c:	655a      	str	r2, [r3, #84]	; 0x54
 800fa7e:	e021      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	68b9      	ldr	r1, [r7, #8]
 800fa86:	4618      	mov	r0, r3
 800fa88:	f000 fad6 	bl	8010038 <TIM_OC6_SetConfig>
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fa9a:	655a      	str	r2, [r3, #84]	; 0x54
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800faaa:	655a      	str	r2, [r3, #84]	; 0x54
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	691b      	ldr	r3, [r3, #16]
 800fab6:	021a      	lsls	r2, r3, #8
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	430a      	orrs	r2, r1
 800fabe:	655a      	str	r2, [r3, #84]	; 0x54
 800fac0:	e000      	b.n	800fac4 <HAL_TIM_PWM_ConfigChannel+0x20c>
 800fac2:	bf00      	nop
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	2200      	movs	r2, #0
 800fac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800facc:	2300      	movs	r3, #0
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop

0800fad8 <HAL_TIM_OC_DelayElapsedCallback>:
 800fad8:	b480      	push	{r7}
 800fada:	b083      	sub	sp, #12
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	bf00      	nop
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <HAL_TIM_IC_CaptureCallback>:
 800faec:	b480      	push	{r7}
 800faee:	b083      	sub	sp, #12
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	bf00      	nop
 800faf6:	370c      	adds	r7, #12
 800faf8:	46bd      	mov	sp, r7
 800fafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafe:	4770      	bx	lr

0800fb00 <HAL_TIM_PWM_PulseFinishedCallback>:
 800fb00:	b480      	push	{r7}
 800fb02:	b083      	sub	sp, #12
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	bf00      	nop
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr

0800fb14 <HAL_TIM_TriggerCallback>:
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
 800fb1c:	bf00      	nop
 800fb1e:	370c      	adds	r7, #12
 800fb20:	46bd      	mov	sp, r7
 800fb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb26:	4770      	bx	lr

0800fb28 <TIM_Base_SetConfig>:
 800fb28:	b480      	push	{r7}
 800fb2a:	b085      	sub	sp, #20
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	6078      	str	r0, [r7, #4]
 800fb30:	6039      	str	r1, [r7, #0]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	4a2a      	ldr	r2, [pc, #168]	; (800fbe4 <TIM_Base_SetConfig+0xbc>)
 800fb3c:	4293      	cmp	r3, r2
 800fb3e:	d003      	beq.n	800fb48 <TIM_Base_SetConfig+0x20>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb46:	d108      	bne.n	800fb5a <TIM_Base_SetConfig+0x32>
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb4e:	60fb      	str	r3, [r7, #12]
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	68fa      	ldr	r2, [r7, #12]
 800fb56:	4313      	orrs	r3, r2
 800fb58:	60fb      	str	r3, [r7, #12]
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a21      	ldr	r2, [pc, #132]	; (800fbe4 <TIM_Base_SetConfig+0xbc>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d00b      	beq.n	800fb7a <TIM_Base_SetConfig+0x52>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb68:	d007      	beq.n	800fb7a <TIM_Base_SetConfig+0x52>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a1e      	ldr	r2, [pc, #120]	; (800fbe8 <TIM_Base_SetConfig+0xc0>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d003      	beq.n	800fb7a <TIM_Base_SetConfig+0x52>
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	4a1d      	ldr	r2, [pc, #116]	; (800fbec <TIM_Base_SetConfig+0xc4>)
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d108      	bne.n	800fb8c <TIM_Base_SetConfig+0x64>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb80:	60fb      	str	r3, [r7, #12]
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	68fa      	ldr	r2, [r7, #12]
 800fb88:	4313      	orrs	r3, r2
 800fb8a:	60fb      	str	r3, [r7, #12]
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	695b      	ldr	r3, [r3, #20]
 800fb96:	4313      	orrs	r3, r2
 800fb98:	60fb      	str	r3, [r7, #12]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	68fa      	ldr	r2, [r7, #12]
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	689a      	ldr	r2, [r3, #8]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	62da      	str	r2, [r3, #44]	; 0x2c
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	681a      	ldr	r2, [r3, #0]
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	629a      	str	r2, [r3, #40]	; 0x28
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a0c      	ldr	r2, [pc, #48]	; (800fbe4 <TIM_Base_SetConfig+0xbc>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d007      	beq.n	800fbc8 <TIM_Base_SetConfig+0xa0>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a0b      	ldr	r2, [pc, #44]	; (800fbe8 <TIM_Base_SetConfig+0xc0>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d003      	beq.n	800fbc8 <TIM_Base_SetConfig+0xa0>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a0a      	ldr	r2, [pc, #40]	; (800fbec <TIM_Base_SetConfig+0xc4>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d103      	bne.n	800fbd0 <TIM_Base_SetConfig+0xa8>
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	691a      	ldr	r2, [r3, #16]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	631a      	str	r2, [r3, #48]	; 0x30
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2201      	movs	r2, #1
 800fbd4:	615a      	str	r2, [r3, #20]
 800fbd6:	bf00      	nop
 800fbd8:	3714      	adds	r7, #20
 800fbda:	46bd      	mov	sp, r7
 800fbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe0:	4770      	bx	lr
 800fbe2:	bf00      	nop
 800fbe4:	40012c00 	.word	0x40012c00
 800fbe8:	40014000 	.word	0x40014000
 800fbec:	40014400 	.word	0x40014400

0800fbf0 <TIM_OC1_SetConfig>:
 800fbf0:	b480      	push	{r7}
 800fbf2:	b087      	sub	sp, #28
 800fbf4:	af00      	add	r7, sp, #0
 800fbf6:	6078      	str	r0, [r7, #4]
 800fbf8:	6039      	str	r1, [r7, #0]
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a1b      	ldr	r3, [r3, #32]
 800fbfe:	f023 0201 	bic.w	r2, r3, #1
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	621a      	str	r2, [r3, #32]
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	6a1b      	ldr	r3, [r3, #32]
 800fc0a:	617b      	str	r3, [r7, #20]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	685b      	ldr	r3, [r3, #4]
 800fc10:	613b      	str	r3, [r7, #16]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	699b      	ldr	r3, [r3, #24]
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fc1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc22:	60fb      	str	r3, [r7, #12]
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	f023 0303 	bic.w	r3, r3, #3
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	68fa      	ldr	r2, [r7, #12]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60fb      	str	r3, [r7, #12]
 800fc36:	697b      	ldr	r3, [r7, #20]
 800fc38:	f023 0302 	bic.w	r3, r3, #2
 800fc3c:	617b      	str	r3, [r7, #20]
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	697a      	ldr	r2, [r7, #20]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	617b      	str	r3, [r7, #20]
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	4a24      	ldr	r2, [pc, #144]	; (800fcdc <TIM_OC1_SetConfig+0xec>)
 800fc4c:	4293      	cmp	r3, r2
 800fc4e:	d007      	beq.n	800fc60 <TIM_OC1_SetConfig+0x70>
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	4a23      	ldr	r2, [pc, #140]	; (800fce0 <TIM_OC1_SetConfig+0xf0>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d003      	beq.n	800fc60 <TIM_OC1_SetConfig+0x70>
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4a22      	ldr	r2, [pc, #136]	; (800fce4 <TIM_OC1_SetConfig+0xf4>)
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	d10c      	bne.n	800fc7a <TIM_OC1_SetConfig+0x8a>
 800fc60:	697b      	ldr	r3, [r7, #20]
 800fc62:	f023 0308 	bic.w	r3, r3, #8
 800fc66:	617b      	str	r3, [r7, #20]
 800fc68:	683b      	ldr	r3, [r7, #0]
 800fc6a:	68db      	ldr	r3, [r3, #12]
 800fc6c:	697a      	ldr	r2, [r7, #20]
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	617b      	str	r3, [r7, #20]
 800fc72:	697b      	ldr	r3, [r7, #20]
 800fc74:	f023 0304 	bic.w	r3, r3, #4
 800fc78:	617b      	str	r3, [r7, #20]
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	4a17      	ldr	r2, [pc, #92]	; (800fcdc <TIM_OC1_SetConfig+0xec>)
 800fc7e:	4293      	cmp	r3, r2
 800fc80:	d007      	beq.n	800fc92 <TIM_OC1_SetConfig+0xa2>
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	4a16      	ldr	r2, [pc, #88]	; (800fce0 <TIM_OC1_SetConfig+0xf0>)
 800fc86:	4293      	cmp	r3, r2
 800fc88:	d003      	beq.n	800fc92 <TIM_OC1_SetConfig+0xa2>
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a15      	ldr	r2, [pc, #84]	; (800fce4 <TIM_OC1_SetConfig+0xf4>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d111      	bne.n	800fcb6 <TIM_OC1_SetConfig+0xc6>
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc98:	613b      	str	r3, [r7, #16]
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fca0:	613b      	str	r3, [r7, #16]
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	695b      	ldr	r3, [r3, #20]
 800fca6:	693a      	ldr	r2, [r7, #16]
 800fca8:	4313      	orrs	r3, r2
 800fcaa:	613b      	str	r3, [r7, #16]
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	699b      	ldr	r3, [r3, #24]
 800fcb0:	693a      	ldr	r2, [r7, #16]
 800fcb2:	4313      	orrs	r3, r2
 800fcb4:	613b      	str	r3, [r7, #16]
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	693a      	ldr	r2, [r7, #16]
 800fcba:	605a      	str	r2, [r3, #4]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68fa      	ldr	r2, [r7, #12]
 800fcc0:	619a      	str	r2, [r3, #24]
 800fcc2:	683b      	ldr	r3, [r7, #0]
 800fcc4:	685a      	ldr	r2, [r3, #4]
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	635a      	str	r2, [r3, #52]	; 0x34
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	697a      	ldr	r2, [r7, #20]
 800fcce:	621a      	str	r2, [r3, #32]
 800fcd0:	bf00      	nop
 800fcd2:	371c      	adds	r7, #28
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	40012c00 	.word	0x40012c00
 800fce0:	40014000 	.word	0x40014000
 800fce4:	40014400 	.word	0x40014400

0800fce8 <TIM_OC2_SetConfig>:
 800fce8:	b480      	push	{r7}
 800fcea:	b087      	sub	sp, #28
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
 800fcf0:	6039      	str	r1, [r7, #0]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	f023 0210 	bic.w	r2, r3, #16
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	621a      	str	r2, [r3, #32]
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	6a1b      	ldr	r3, [r3, #32]
 800fd02:	617b      	str	r3, [r7, #20]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	685b      	ldr	r3, [r3, #4]
 800fd08:	613b      	str	r3, [r7, #16]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	699b      	ldr	r3, [r3, #24]
 800fd0e:	60fb      	str	r3, [r7, #12]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fd16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd1a:	60fb      	str	r3, [r7, #12]
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd22:	60fb      	str	r3, [r7, #12]
 800fd24:	683b      	ldr	r3, [r7, #0]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	021b      	lsls	r3, r3, #8
 800fd2a:	68fa      	ldr	r2, [r7, #12]
 800fd2c:	4313      	orrs	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
 800fd30:	697b      	ldr	r3, [r7, #20]
 800fd32:	f023 0320 	bic.w	r3, r3, #32
 800fd36:	617b      	str	r3, [r7, #20]
 800fd38:	683b      	ldr	r3, [r7, #0]
 800fd3a:	689b      	ldr	r3, [r3, #8]
 800fd3c:	011b      	lsls	r3, r3, #4
 800fd3e:	697a      	ldr	r2, [r7, #20]
 800fd40:	4313      	orrs	r3, r2
 800fd42:	617b      	str	r3, [r7, #20]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	4a22      	ldr	r2, [pc, #136]	; (800fdd0 <TIM_OC2_SetConfig+0xe8>)
 800fd48:	4293      	cmp	r3, r2
 800fd4a:	d10d      	bne.n	800fd68 <TIM_OC2_SetConfig+0x80>
 800fd4c:	697b      	ldr	r3, [r7, #20]
 800fd4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd52:	617b      	str	r3, [r7, #20]
 800fd54:	683b      	ldr	r3, [r7, #0]
 800fd56:	68db      	ldr	r3, [r3, #12]
 800fd58:	011b      	lsls	r3, r3, #4
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	4313      	orrs	r3, r2
 800fd5e:	617b      	str	r3, [r7, #20]
 800fd60:	697b      	ldr	r3, [r7, #20]
 800fd62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd66:	617b      	str	r3, [r7, #20]
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	4a19      	ldr	r2, [pc, #100]	; (800fdd0 <TIM_OC2_SetConfig+0xe8>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d007      	beq.n	800fd80 <TIM_OC2_SetConfig+0x98>
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	4a18      	ldr	r2, [pc, #96]	; (800fdd4 <TIM_OC2_SetConfig+0xec>)
 800fd74:	4293      	cmp	r3, r2
 800fd76:	d003      	beq.n	800fd80 <TIM_OC2_SetConfig+0x98>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4a17      	ldr	r2, [pc, #92]	; (800fdd8 <TIM_OC2_SetConfig+0xf0>)
 800fd7c:	4293      	cmp	r3, r2
 800fd7e:	d113      	bne.n	800fda8 <TIM_OC2_SetConfig+0xc0>
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fd86:	613b      	str	r3, [r7, #16]
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fd8e:	613b      	str	r3, [r7, #16]
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	695b      	ldr	r3, [r3, #20]
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	693a      	ldr	r2, [r7, #16]
 800fd98:	4313      	orrs	r3, r2
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	699b      	ldr	r3, [r3, #24]
 800fda0:	009b      	lsls	r3, r3, #2
 800fda2:	693a      	ldr	r2, [r7, #16]
 800fda4:	4313      	orrs	r3, r2
 800fda6:	613b      	str	r3, [r7, #16]
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	693a      	ldr	r2, [r7, #16]
 800fdac:	605a      	str	r2, [r3, #4]
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	68fa      	ldr	r2, [r7, #12]
 800fdb2:	619a      	str	r2, [r3, #24]
 800fdb4:	683b      	ldr	r3, [r7, #0]
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	639a      	str	r2, [r3, #56]	; 0x38
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	697a      	ldr	r2, [r7, #20]
 800fdc0:	621a      	str	r2, [r3, #32]
 800fdc2:	bf00      	nop
 800fdc4:	371c      	adds	r7, #28
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdcc:	4770      	bx	lr
 800fdce:	bf00      	nop
 800fdd0:	40012c00 	.word	0x40012c00
 800fdd4:	40014000 	.word	0x40014000
 800fdd8:	40014400 	.word	0x40014400

0800fddc <TIM_OC3_SetConfig>:
 800fddc:	b480      	push	{r7}
 800fdde:	b087      	sub	sp, #28
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	6a1b      	ldr	r3, [r3, #32]
 800fdea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	621a      	str	r2, [r3, #32]
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6a1b      	ldr	r3, [r3, #32]
 800fdf6:	617b      	str	r3, [r7, #20]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	685b      	ldr	r3, [r3, #4]
 800fdfc:	613b      	str	r3, [r7, #16]
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	69db      	ldr	r3, [r3, #28]
 800fe02:	60fb      	str	r3, [r7, #12]
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fe0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe0e:	60fb      	str	r3, [r7, #12]
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f023 0303 	bic.w	r3, r3, #3
 800fe16:	60fb      	str	r3, [r7, #12]
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	60fb      	str	r3, [r7, #12]
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe28:	617b      	str	r3, [r7, #20]
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	689b      	ldr	r3, [r3, #8]
 800fe2e:	021b      	lsls	r3, r3, #8
 800fe30:	697a      	ldr	r2, [r7, #20]
 800fe32:	4313      	orrs	r3, r2
 800fe34:	617b      	str	r3, [r7, #20]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	4a21      	ldr	r2, [pc, #132]	; (800fec0 <TIM_OC3_SetConfig+0xe4>)
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d10d      	bne.n	800fe5a <TIM_OC3_SetConfig+0x7e>
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fe44:	617b      	str	r3, [r7, #20]
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	021b      	lsls	r3, r3, #8
 800fe4c:	697a      	ldr	r2, [r7, #20]
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	617b      	str	r3, [r7, #20]
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fe58:	617b      	str	r3, [r7, #20]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	4a18      	ldr	r2, [pc, #96]	; (800fec0 <TIM_OC3_SetConfig+0xe4>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d007      	beq.n	800fe72 <TIM_OC3_SetConfig+0x96>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	4a17      	ldr	r2, [pc, #92]	; (800fec4 <TIM_OC3_SetConfig+0xe8>)
 800fe66:	4293      	cmp	r3, r2
 800fe68:	d003      	beq.n	800fe72 <TIM_OC3_SetConfig+0x96>
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4a16      	ldr	r2, [pc, #88]	; (800fec8 <TIM_OC3_SetConfig+0xec>)
 800fe6e:	4293      	cmp	r3, r2
 800fe70:	d113      	bne.n	800fe9a <TIM_OC3_SetConfig+0xbe>
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fe78:	613b      	str	r3, [r7, #16]
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fe80:	613b      	str	r3, [r7, #16]
 800fe82:	683b      	ldr	r3, [r7, #0]
 800fe84:	695b      	ldr	r3, [r3, #20]
 800fe86:	011b      	lsls	r3, r3, #4
 800fe88:	693a      	ldr	r2, [r7, #16]
 800fe8a:	4313      	orrs	r3, r2
 800fe8c:	613b      	str	r3, [r7, #16]
 800fe8e:	683b      	ldr	r3, [r7, #0]
 800fe90:	699b      	ldr	r3, [r3, #24]
 800fe92:	011b      	lsls	r3, r3, #4
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	4313      	orrs	r3, r2
 800fe98:	613b      	str	r3, [r7, #16]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	693a      	ldr	r2, [r7, #16]
 800fe9e:	605a      	str	r2, [r3, #4]
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	68fa      	ldr	r2, [r7, #12]
 800fea4:	61da      	str	r2, [r3, #28]
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	685a      	ldr	r2, [r3, #4]
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	63da      	str	r2, [r3, #60]	; 0x3c
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	697a      	ldr	r2, [r7, #20]
 800feb2:	621a      	str	r2, [r3, #32]
 800feb4:	bf00      	nop
 800feb6:	371c      	adds	r7, #28
 800feb8:	46bd      	mov	sp, r7
 800feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800febe:	4770      	bx	lr
 800fec0:	40012c00 	.word	0x40012c00
 800fec4:	40014000 	.word	0x40014000
 800fec8:	40014400 	.word	0x40014400

0800fecc <TIM_OC4_SetConfig>:
 800fecc:	b480      	push	{r7}
 800fece:	b087      	sub	sp, #28
 800fed0:	af00      	add	r7, sp, #0
 800fed2:	6078      	str	r0, [r7, #4]
 800fed4:	6039      	str	r1, [r7, #0]
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	6a1b      	ldr	r3, [r3, #32]
 800feda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	621a      	str	r2, [r3, #32]
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	6a1b      	ldr	r3, [r3, #32]
 800fee6:	613b      	str	r3, [r7, #16]
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	685b      	ldr	r3, [r3, #4]
 800feec:	617b      	str	r3, [r7, #20]
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	69db      	ldr	r3, [r3, #28]
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fefa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fefe:	60fb      	str	r3, [r7, #12]
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff06:	60fb      	str	r3, [r7, #12]
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	021b      	lsls	r3, r3, #8
 800ff0e:	68fa      	ldr	r2, [r7, #12]
 800ff10:	4313      	orrs	r3, r2
 800ff12:	60fb      	str	r3, [r7, #12]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff1a:	613b      	str	r3, [r7, #16]
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	031b      	lsls	r3, r3, #12
 800ff22:	693a      	ldr	r2, [r7, #16]
 800ff24:	4313      	orrs	r3, r2
 800ff26:	613b      	str	r3, [r7, #16]
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	4a14      	ldr	r2, [pc, #80]	; (800ff7c <TIM_OC4_SetConfig+0xb0>)
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d007      	beq.n	800ff40 <TIM_OC4_SetConfig+0x74>
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	4a13      	ldr	r2, [pc, #76]	; (800ff80 <TIM_OC4_SetConfig+0xb4>)
 800ff34:	4293      	cmp	r3, r2
 800ff36:	d003      	beq.n	800ff40 <TIM_OC4_SetConfig+0x74>
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	4a12      	ldr	r2, [pc, #72]	; (800ff84 <TIM_OC4_SetConfig+0xb8>)
 800ff3c:	4293      	cmp	r3, r2
 800ff3e:	d109      	bne.n	800ff54 <TIM_OC4_SetConfig+0x88>
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ff46:	617b      	str	r3, [r7, #20]
 800ff48:	683b      	ldr	r3, [r7, #0]
 800ff4a:	695b      	ldr	r3, [r3, #20]
 800ff4c:	019b      	lsls	r3, r3, #6
 800ff4e:	697a      	ldr	r2, [r7, #20]
 800ff50:	4313      	orrs	r3, r2
 800ff52:	617b      	str	r3, [r7, #20]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	697a      	ldr	r2, [r7, #20]
 800ff58:	605a      	str	r2, [r3, #4]
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	68fa      	ldr	r2, [r7, #12]
 800ff5e:	61da      	str	r2, [r3, #28]
 800ff60:	683b      	ldr	r3, [r7, #0]
 800ff62:	685a      	ldr	r2, [r3, #4]
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	641a      	str	r2, [r3, #64]	; 0x40
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	693a      	ldr	r2, [r7, #16]
 800ff6c:	621a      	str	r2, [r3, #32]
 800ff6e:	bf00      	nop
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff78:	4770      	bx	lr
 800ff7a:	bf00      	nop
 800ff7c:	40012c00 	.word	0x40012c00
 800ff80:	40014000 	.word	0x40014000
 800ff84:	40014400 	.word	0x40014400

0800ff88 <TIM_OC5_SetConfig>:
 800ff88:	b480      	push	{r7}
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	6a1b      	ldr	r3, [r3, #32]
 800ff96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	621a      	str	r2, [r3, #32]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a1b      	ldr	r3, [r3, #32]
 800ffa2:	613b      	str	r3, [r7, #16]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685b      	ldr	r3, [r3, #4]
 800ffa8:	617b      	str	r3, [r7, #20]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ffb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	68fa      	ldr	r2, [r7, #12]
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	60fb      	str	r3, [r7, #12]
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ffcc:	613b      	str	r3, [r7, #16]
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	041b      	lsls	r3, r3, #16
 800ffd4:	693a      	ldr	r2, [r7, #16]
 800ffd6:	4313      	orrs	r3, r2
 800ffd8:	613b      	str	r3, [r7, #16]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	4a13      	ldr	r2, [pc, #76]	; (801002c <TIM_OC5_SetConfig+0xa4>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d007      	beq.n	800fff2 <TIM_OC5_SetConfig+0x6a>
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	4a12      	ldr	r2, [pc, #72]	; (8010030 <TIM_OC5_SetConfig+0xa8>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d003      	beq.n	800fff2 <TIM_OC5_SetConfig+0x6a>
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	4a11      	ldr	r2, [pc, #68]	; (8010034 <TIM_OC5_SetConfig+0xac>)
 800ffee:	4293      	cmp	r3, r2
 800fff0:	d109      	bne.n	8010006 <TIM_OC5_SetConfig+0x7e>
 800fff2:	697b      	ldr	r3, [r7, #20]
 800fff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fff8:	617b      	str	r3, [r7, #20]
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	695b      	ldr	r3, [r3, #20]
 800fffe:	021b      	lsls	r3, r3, #8
 8010000:	697a      	ldr	r2, [r7, #20]
 8010002:	4313      	orrs	r3, r2
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	697a      	ldr	r2, [r7, #20]
 801000a:	605a      	str	r2, [r3, #4]
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	68fa      	ldr	r2, [r7, #12]
 8010010:	655a      	str	r2, [r3, #84]	; 0x54
 8010012:	683b      	ldr	r3, [r7, #0]
 8010014:	685a      	ldr	r2, [r3, #4]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	659a      	str	r2, [r3, #88]	; 0x58
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	693a      	ldr	r2, [r7, #16]
 801001e:	621a      	str	r2, [r3, #32]
 8010020:	bf00      	nop
 8010022:	371c      	adds	r7, #28
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr
 801002c:	40012c00 	.word	0x40012c00
 8010030:	40014000 	.word	0x40014000
 8010034:	40014400 	.word	0x40014400

08010038 <TIM_OC6_SetConfig>:
 8010038:	b480      	push	{r7}
 801003a:	b087      	sub	sp, #28
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
 8010040:	6039      	str	r1, [r7, #0]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1b      	ldr	r3, [r3, #32]
 8010046:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	621a      	str	r2, [r3, #32]
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6a1b      	ldr	r3, [r3, #32]
 8010052:	613b      	str	r3, [r7, #16]
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	685b      	ldr	r3, [r3, #4]
 8010058:	617b      	str	r3, [r7, #20]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801005e:	60fb      	str	r3, [r7, #12]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801006a:	60fb      	str	r3, [r7, #12]
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	021b      	lsls	r3, r3, #8
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	4313      	orrs	r3, r2
 8010076:	60fb      	str	r3, [r7, #12]
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801007e:	613b      	str	r3, [r7, #16]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	689b      	ldr	r3, [r3, #8]
 8010084:	051b      	lsls	r3, r3, #20
 8010086:	693a      	ldr	r2, [r7, #16]
 8010088:	4313      	orrs	r3, r2
 801008a:	613b      	str	r3, [r7, #16]
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	4a14      	ldr	r2, [pc, #80]	; (80100e0 <TIM_OC6_SetConfig+0xa8>)
 8010090:	4293      	cmp	r3, r2
 8010092:	d007      	beq.n	80100a4 <TIM_OC6_SetConfig+0x6c>
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	4a13      	ldr	r2, [pc, #76]	; (80100e4 <TIM_OC6_SetConfig+0xac>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d003      	beq.n	80100a4 <TIM_OC6_SetConfig+0x6c>
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	4a12      	ldr	r2, [pc, #72]	; (80100e8 <TIM_OC6_SetConfig+0xb0>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d109      	bne.n	80100b8 <TIM_OC6_SetConfig+0x80>
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80100aa:	617b      	str	r3, [r7, #20]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	695b      	ldr	r3, [r3, #20]
 80100b0:	029b      	lsls	r3, r3, #10
 80100b2:	697a      	ldr	r2, [r7, #20]
 80100b4:	4313      	orrs	r3, r2
 80100b6:	617b      	str	r3, [r7, #20]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	697a      	ldr	r2, [r7, #20]
 80100bc:	605a      	str	r2, [r3, #4]
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	68fa      	ldr	r2, [r7, #12]
 80100c2:	655a      	str	r2, [r3, #84]	; 0x54
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	685a      	ldr	r2, [r3, #4]
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	65da      	str	r2, [r3, #92]	; 0x5c
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	693a      	ldr	r2, [r7, #16]
 80100d0:	621a      	str	r2, [r3, #32]
 80100d2:	bf00      	nop
 80100d4:	371c      	adds	r7, #28
 80100d6:	46bd      	mov	sp, r7
 80100d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100dc:	4770      	bx	lr
 80100de:	bf00      	nop
 80100e0:	40012c00 	.word	0x40012c00
 80100e4:	40014000 	.word	0x40014000
 80100e8:	40014400 	.word	0x40014400

080100ec <TIM_CCxChannelCmd>:
 80100ec:	b480      	push	{r7}
 80100ee:	b087      	sub	sp, #28
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	60f8      	str	r0, [r7, #12]
 80100f4:	60b9      	str	r1, [r7, #8]
 80100f6:	607a      	str	r2, [r7, #4]
 80100f8:	68bb      	ldr	r3, [r7, #8]
 80100fa:	f003 031f 	and.w	r3, r3, #31
 80100fe:	2201      	movs	r2, #1
 8010100:	fa02 f303 	lsl.w	r3, r2, r3
 8010104:	617b      	str	r3, [r7, #20]
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	6a1a      	ldr	r2, [r3, #32]
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	43db      	mvns	r3, r3
 801010e:	401a      	ands	r2, r3
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	621a      	str	r2, [r3, #32]
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	6a1a      	ldr	r2, [r3, #32]
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	f003 031f 	and.w	r3, r3, #31
 801011e:	6879      	ldr	r1, [r7, #4]
 8010120:	fa01 f303 	lsl.w	r3, r1, r3
 8010124:	431a      	orrs	r2, r3
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	621a      	str	r2, [r3, #32]
 801012a:	bf00      	nop
 801012c:	371c      	adds	r7, #28
 801012e:	46bd      	mov	sp, r7
 8010130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010134:	4770      	bx	lr
	...

08010138 <HAL_TIMEx_MasterConfigSynchronization>:
 8010138:	b480      	push	{r7}
 801013a:	b085      	sub	sp, #20
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010148:	2b01      	cmp	r3, #1
 801014a:	d101      	bne.n	8010150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801014c:	2302      	movs	r3, #2
 801014e:	e04f      	b.n	80101f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	2201      	movs	r2, #1
 8010154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	2202      	movs	r2, #2
 801015c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	685b      	ldr	r3, [r3, #4]
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	60bb      	str	r3, [r7, #8]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4a21      	ldr	r2, [pc, #132]	; (80101fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d108      	bne.n	801018c <HAL_TIMEx_MasterConfigSynchronization+0x54>
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010180:	60fb      	str	r3, [r7, #12]
 8010182:	683b      	ldr	r3, [r7, #0]
 8010184:	685b      	ldr	r3, [r3, #4]
 8010186:	68fa      	ldr	r2, [r7, #12]
 8010188:	4313      	orrs	r3, r2
 801018a:	60fb      	str	r3, [r7, #12]
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010192:	60fb      	str	r3, [r7, #12]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	68fa      	ldr	r2, [r7, #12]
 801019a:	4313      	orrs	r3, r2
 801019c:	60fb      	str	r3, [r7, #12]
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	68fa      	ldr	r2, [r7, #12]
 80101a4:	605a      	str	r2, [r3, #4]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	4a14      	ldr	r2, [pc, #80]	; (80101fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80101ac:	4293      	cmp	r3, r2
 80101ae:	d009      	beq.n	80101c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80101b8:	d004      	beq.n	80101c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	4a10      	ldr	r2, [pc, #64]	; (8010200 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80101c0:	4293      	cmp	r3, r2
 80101c2:	d10c      	bne.n	80101de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80101ca:	60bb      	str	r3, [r7, #8]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	68ba      	ldr	r2, [r7, #8]
 80101d2:	4313      	orrs	r3, r2
 80101d4:	60bb      	str	r3, [r7, #8]
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	68ba      	ldr	r2, [r7, #8]
 80101dc:	609a      	str	r2, [r3, #8]
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	2201      	movs	r2, #1
 80101e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80101e6:	687b      	ldr	r3, [r7, #4]
 80101e8:	2200      	movs	r2, #0
 80101ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80101ee:	2300      	movs	r3, #0
 80101f0:	4618      	mov	r0, r3
 80101f2:	3714      	adds	r7, #20
 80101f4:	46bd      	mov	sp, r7
 80101f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fa:	4770      	bx	lr
 80101fc:	40012c00 	.word	0x40012c00
 8010200:	40014000 	.word	0x40014000

08010204 <HAL_TIMEx_ConfigBreakDeadTime>:
 8010204:	b480      	push	{r7}
 8010206:	b085      	sub	sp, #20
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6039      	str	r1, [r7, #0]
 801020e:	2300      	movs	r3, #0
 8010210:	60fb      	str	r3, [r7, #12]
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010218:	2b01      	cmp	r3, #1
 801021a:	d101      	bne.n	8010220 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801021c:	2302      	movs	r3, #2
 801021e:	e060      	b.n	80102e2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801022e:	683b      	ldr	r3, [r7, #0]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	4313      	orrs	r3, r2
 8010234:	60fb      	str	r3, [r7, #12]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	689b      	ldr	r3, [r3, #8]
 8010240:	4313      	orrs	r3, r2
 8010242:	60fb      	str	r3, [r7, #12]
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	685b      	ldr	r3, [r3, #4]
 801024e:	4313      	orrs	r3, r2
 8010250:	60fb      	str	r3, [r7, #12]
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4313      	orrs	r3, r2
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	4313      	orrs	r3, r2
 801026c:	60fb      	str	r3, [r7, #12]
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	695b      	ldr	r3, [r3, #20]
 8010278:	4313      	orrs	r3, r2
 801027a:	60fb      	str	r3, [r7, #12]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010286:	4313      	orrs	r3, r2
 8010288:	60fb      	str	r3, [r7, #12]
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	699b      	ldr	r3, [r3, #24]
 8010294:	041b      	lsls	r3, r3, #16
 8010296:	4313      	orrs	r3, r2
 8010298:	60fb      	str	r3, [r7, #12]
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	4a14      	ldr	r2, [pc, #80]	; (80102f0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80102a0:	4293      	cmp	r3, r2
 80102a2:	d115      	bne.n	80102d0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80102aa:	683b      	ldr	r3, [r7, #0]
 80102ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102ae:	051b      	lsls	r3, r3, #20
 80102b0:	4313      	orrs	r3, r2
 80102b2:	60fb      	str	r3, [r7, #12]
 80102b4:	68fb      	ldr	r3, [r7, #12]
 80102b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	69db      	ldr	r3, [r3, #28]
 80102be:	4313      	orrs	r3, r2
 80102c0:	60fb      	str	r3, [r7, #12]
 80102c2:	68fb      	ldr	r3, [r7, #12]
 80102c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	4313      	orrs	r3, r2
 80102ce:	60fb      	str	r3, [r7, #12]
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	645a      	str	r2, [r3, #68]	; 0x44
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80102e0:	2300      	movs	r3, #0
 80102e2:	4618      	mov	r0, r3
 80102e4:	3714      	adds	r7, #20
 80102e6:	46bd      	mov	sp, r7
 80102e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ec:	4770      	bx	lr
 80102ee:	bf00      	nop
 80102f0:	40012c00 	.word	0x40012c00

080102f4 <HAL_TIMEx_CommutCallback>:
 80102f4:	b480      	push	{r7}
 80102f6:	b083      	sub	sp, #12
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	bf00      	nop
 80102fe:	370c      	adds	r7, #12
 8010300:	46bd      	mov	sp, r7
 8010302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010306:	4770      	bx	lr

08010308 <HAL_TIMEx_BreakCallback>:
 8010308:	b480      	push	{r7}
 801030a:	b083      	sub	sp, #12
 801030c:	af00      	add	r7, sp, #0
 801030e:	6078      	str	r0, [r7, #4]
 8010310:	bf00      	nop
 8010312:	370c      	adds	r7, #12
 8010314:	46bd      	mov	sp, r7
 8010316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031a:	4770      	bx	lr

0801031c <HAL_TIMEx_Break2Callback>:
 801031c:	b480      	push	{r7}
 801031e:	b083      	sub	sp, #12
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
 8010324:	bf00      	nop
 8010326:	370c      	adds	r7, #12
 8010328:	46bd      	mov	sp, r7
 801032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801032e:	4770      	bx	lr

08010330 <HAL_UART_Init>:
 8010330:	b580      	push	{r7, lr}
 8010332:	b082      	sub	sp, #8
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d101      	bne.n	8010342 <HAL_UART_Init+0x12>
 801033e:	2301      	movs	r3, #1
 8010340:	e040      	b.n	80103c4 <HAL_UART_Init+0x94>
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010346:	2b00      	cmp	r3, #0
 8010348:	d106      	bne.n	8010358 <HAL_UART_Init+0x28>
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	2200      	movs	r2, #0
 801034e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f7f9 fe46 	bl	8009fe4 <HAL_UART_MspInit>
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2224      	movs	r2, #36	; 0x24
 801035c:	679a      	str	r2, [r3, #120]	; 0x78
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	681a      	ldr	r2, [r3, #0]
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f022 0201 	bic.w	r2, r2, #1
 801036c:	601a      	str	r2, [r3, #0]
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 fb8c 	bl	8010a8c <UART_SetConfig>
 8010374:	4603      	mov	r3, r0
 8010376:	2b01      	cmp	r3, #1
 8010378:	d101      	bne.n	801037e <HAL_UART_Init+0x4e>
 801037a:	2301      	movs	r3, #1
 801037c:	e022      	b.n	80103c4 <HAL_UART_Init+0x94>
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010382:	2b00      	cmp	r3, #0
 8010384:	d002      	beq.n	801038c <HAL_UART_Init+0x5c>
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 fdb4 	bl	8010ef4 <UART_AdvFeatureConfig>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	685a      	ldr	r2, [r3, #4]
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801039a:	605a      	str	r2, [r3, #4]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	689a      	ldr	r2, [r3, #8]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80103aa:	609a      	str	r2, [r3, #8]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	681a      	ldr	r2, [r3, #0]
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	f042 0201 	orr.w	r2, r2, #1
 80103ba:	601a      	str	r2, [r3, #0]
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f000 fe3b 	bl	8011038 <UART_CheckIdleState>
 80103c2:	4603      	mov	r3, r0
 80103c4:	4618      	mov	r0, r3
 80103c6:	3708      	adds	r7, #8
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}

080103cc <HAL_UART_Transmit>:
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b08a      	sub	sp, #40	; 0x28
 80103d0:	af02      	add	r7, sp, #8
 80103d2:	60f8      	str	r0, [r7, #12]
 80103d4:	60b9      	str	r1, [r7, #8]
 80103d6:	603b      	str	r3, [r7, #0]
 80103d8:	4613      	mov	r3, r2
 80103da:	80fb      	strh	r3, [r7, #6]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80103e0:	2b20      	cmp	r3, #32
 80103e2:	f040 8082 	bne.w	80104ea <HAL_UART_Transmit+0x11e>
 80103e6:	68bb      	ldr	r3, [r7, #8]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d002      	beq.n	80103f2 <HAL_UART_Transmit+0x26>
 80103ec:	88fb      	ldrh	r3, [r7, #6]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d101      	bne.n	80103f6 <HAL_UART_Transmit+0x2a>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e07a      	b.n	80104ec <HAL_UART_Transmit+0x120>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d101      	bne.n	8010404 <HAL_UART_Transmit+0x38>
 8010400:	2302      	movs	r3, #2
 8010402:	e073      	b.n	80104ec <HAL_UART_Transmit+0x120>
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	2201      	movs	r2, #1
 8010408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2221      	movs	r2, #33	; 0x21
 8010418:	679a      	str	r2, [r3, #120]	; 0x78
 801041a:	f7f9 ffcf 	bl	800a3bc <HAL_GetTick>
 801041e:	6178      	str	r0, [r7, #20]
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	88fa      	ldrh	r2, [r7, #6]
 8010424:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	88fa      	ldrh	r2, [r7, #6]
 801042c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	689b      	ldr	r3, [r3, #8]
 8010434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010438:	d108      	bne.n	801044c <HAL_UART_Transmit+0x80>
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	691b      	ldr	r3, [r3, #16]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d104      	bne.n	801044c <HAL_UART_Transmit+0x80>
 8010442:	2300      	movs	r3, #0
 8010444:	61fb      	str	r3, [r7, #28]
 8010446:	68bb      	ldr	r3, [r7, #8]
 8010448:	61bb      	str	r3, [r7, #24]
 801044a:	e003      	b.n	8010454 <HAL_UART_Transmit+0x88>
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	61fb      	str	r3, [r7, #28]
 8010450:	2300      	movs	r3, #0
 8010452:	61bb      	str	r3, [r7, #24]
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	2200      	movs	r2, #0
 8010458:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 801045c:	e02d      	b.n	80104ba <HAL_UART_Transmit+0xee>
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	9300      	str	r3, [sp, #0]
 8010462:	697b      	ldr	r3, [r7, #20]
 8010464:	2200      	movs	r2, #0
 8010466:	2180      	movs	r1, #128	; 0x80
 8010468:	68f8      	ldr	r0, [r7, #12]
 801046a:	f000 fe2e 	bl	80110ca <UART_WaitOnFlagUntilTimeout>
 801046e:	4603      	mov	r3, r0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <HAL_UART_Transmit+0xac>
 8010474:	2303      	movs	r3, #3
 8010476:	e039      	b.n	80104ec <HAL_UART_Transmit+0x120>
 8010478:	69fb      	ldr	r3, [r7, #28]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d10b      	bne.n	8010496 <HAL_UART_Transmit+0xca>
 801047e:	69bb      	ldr	r3, [r7, #24]
 8010480:	881a      	ldrh	r2, [r3, #0]
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801048a:	b292      	uxth	r2, r2
 801048c:	851a      	strh	r2, [r3, #40]	; 0x28
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	3302      	adds	r3, #2
 8010492:	61bb      	str	r3, [r7, #24]
 8010494:	e008      	b.n	80104a8 <HAL_UART_Transmit+0xdc>
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	781a      	ldrb	r2, [r3, #0]
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	b292      	uxth	r2, r2
 80104a0:	851a      	strh	r2, [r3, #40]	; 0x28
 80104a2:	69fb      	ldr	r3, [r7, #28]
 80104a4:	3301      	adds	r3, #1
 80104a6:	61fb      	str	r3, [r7, #28]
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	3b01      	subs	r3, #1
 80104b2:	b29a      	uxth	r2, r3
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d1cb      	bne.n	801045e <HAL_UART_Transmit+0x92>
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2200      	movs	r2, #0
 80104ce:	2140      	movs	r1, #64	; 0x40
 80104d0:	68f8      	ldr	r0, [r7, #12]
 80104d2:	f000 fdfa 	bl	80110ca <UART_WaitOnFlagUntilTimeout>
 80104d6:	4603      	mov	r3, r0
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d001      	beq.n	80104e0 <HAL_UART_Transmit+0x114>
 80104dc:	2303      	movs	r3, #3
 80104de:	e005      	b.n	80104ec <HAL_UART_Transmit+0x120>
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	2220      	movs	r2, #32
 80104e4:	679a      	str	r2, [r3, #120]	; 0x78
 80104e6:	2300      	movs	r3, #0
 80104e8:	e000      	b.n	80104ec <HAL_UART_Transmit+0x120>
 80104ea:	2302      	movs	r3, #2
 80104ec:	4618      	mov	r0, r3
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <HAL_UART_Transmit_IT>:
 80104f4:	b480      	push	{r7}
 80104f6:	b085      	sub	sp, #20
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	4613      	mov	r3, r2
 8010500:	80fb      	strh	r3, [r7, #6]
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010506:	2b20      	cmp	r3, #32
 8010508:	d145      	bne.n	8010596 <HAL_UART_Transmit_IT+0xa2>
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d002      	beq.n	8010516 <HAL_UART_Transmit_IT+0x22>
 8010510:	88fb      	ldrh	r3, [r7, #6]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d101      	bne.n	801051a <HAL_UART_Transmit_IT+0x26>
 8010516:	2301      	movs	r3, #1
 8010518:	e03e      	b.n	8010598 <HAL_UART_Transmit_IT+0xa4>
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8010520:	2b01      	cmp	r3, #1
 8010522:	d101      	bne.n	8010528 <HAL_UART_Transmit_IT+0x34>
 8010524:	2302      	movs	r3, #2
 8010526:	e037      	b.n	8010598 <HAL_UART_Transmit_IT+0xa4>
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	2201      	movs	r2, #1
 801052c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	68ba      	ldr	r2, [r7, #8]
 8010534:	64da      	str	r2, [r3, #76]	; 0x4c
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	88fa      	ldrh	r2, [r7, #6]
 801053a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	88fa      	ldrh	r2, [r7, #6]
 8010542:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8010546:	68fb      	ldr	r3, [r7, #12]
 8010548:	2200      	movs	r2, #0
 801054a:	669a      	str	r2, [r3, #104]	; 0x68
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	2200      	movs	r2, #0
 8010550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010554:	68fb      	ldr	r3, [r7, #12]
 8010556:	2221      	movs	r2, #33	; 0x21
 8010558:	679a      	str	r2, [r3, #120]	; 0x78
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010562:	d107      	bne.n	8010574 <HAL_UART_Transmit_IT+0x80>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	691b      	ldr	r3, [r3, #16]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d103      	bne.n	8010574 <HAL_UART_Transmit_IT+0x80>
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	4a0d      	ldr	r2, [pc, #52]	; (80105a4 <HAL_UART_Transmit_IT+0xb0>)
 8010570:	669a      	str	r2, [r3, #104]	; 0x68
 8010572:	e002      	b.n	801057a <HAL_UART_Transmit_IT+0x86>
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	4a0c      	ldr	r2, [pc, #48]	; (80105a8 <HAL_UART_Transmit_IT+0xb4>)
 8010578:	669a      	str	r2, [r3, #104]	; 0x68
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	681a      	ldr	r2, [r3, #0]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8010590:	601a      	str	r2, [r3, #0]
 8010592:	2300      	movs	r3, #0
 8010594:	e000      	b.n	8010598 <HAL_UART_Transmit_IT+0xa4>
 8010596:	2302      	movs	r3, #2
 8010598:	4618      	mov	r0, r3
 801059a:	3714      	adds	r7, #20
 801059c:	46bd      	mov	sp, r7
 801059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a2:	4770      	bx	lr
 80105a4:	08011511 	.word	0x08011511
 80105a8:	0801149d 	.word	0x0801149d

080105ac <HAL_UART_Receive_DMA>:
 80105ac:	b580      	push	{r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
 80105b2:	60f8      	str	r0, [r7, #12]
 80105b4:	60b9      	str	r1, [r7, #8]
 80105b6:	4613      	mov	r3, r2
 80105b8:	80fb      	strh	r3, [r7, #6]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80105be:	2b20      	cmp	r3, #32
 80105c0:	d131      	bne.n	8010626 <HAL_UART_Receive_DMA+0x7a>
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d002      	beq.n	80105ce <HAL_UART_Receive_DMA+0x22>
 80105c8:	88fb      	ldrh	r3, [r7, #6]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d101      	bne.n	80105d2 <HAL_UART_Receive_DMA+0x26>
 80105ce:	2301      	movs	r3, #1
 80105d0:	e02a      	b.n	8010628 <HAL_UART_Receive_DMA+0x7c>
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d101      	bne.n	80105e0 <HAL_UART_Receive_DMA+0x34>
 80105dc:	2302      	movs	r3, #2
 80105de:	e023      	b.n	8010628 <HAL_UART_Receive_DMA+0x7c>
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	2201      	movs	r2, #1
 80105e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	2200      	movs	r2, #0
 80105ec:	661a      	str	r2, [r3, #96]	; 0x60
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	4a0f      	ldr	r2, [pc, #60]	; (8010630 <HAL_UART_Receive_DMA+0x84>)
 80105f4:	4293      	cmp	r3, r2
 80105f6:	d00e      	beq.n	8010616 <HAL_UART_Receive_DMA+0x6a>
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	681b      	ldr	r3, [r3, #0]
 80105fc:	685b      	ldr	r3, [r3, #4]
 80105fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010602:	2b00      	cmp	r3, #0
 8010604:	d007      	beq.n	8010616 <HAL_UART_Receive_DMA+0x6a>
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	681a      	ldr	r2, [r3, #0]
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	681b      	ldr	r3, [r3, #0]
 8010610:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8010614:	601a      	str	r2, [r3, #0]
 8010616:	88fb      	ldrh	r3, [r7, #6]
 8010618:	461a      	mov	r2, r3
 801061a:	68b9      	ldr	r1, [r7, #8]
 801061c:	68f8      	ldr	r0, [r7, #12]
 801061e:	f000 fdd1 	bl	80111c4 <UART_Start_Receive_DMA>
 8010622:	4603      	mov	r3, r0
 8010624:	e000      	b.n	8010628 <HAL_UART_Receive_DMA+0x7c>
 8010626:	2302      	movs	r3, #2
 8010628:	4618      	mov	r0, r3
 801062a:	3710      	adds	r7, #16
 801062c:	46bd      	mov	sp, r7
 801062e:	bd80      	pop	{r7, pc}
 8010630:	40008000 	.word	0x40008000

08010634 <HAL_UART_IRQHandler>:
 8010634:	b580      	push	{r7, lr}
 8010636:	b088      	sub	sp, #32
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	69db      	ldr	r3, [r3, #28]
 8010642:	61fb      	str	r3, [r7, #28]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	61bb      	str	r3, [r7, #24]
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	617b      	str	r3, [r7, #20]
 8010654:	69fa      	ldr	r2, [r7, #28]
 8010656:	f640 030f 	movw	r3, #2063	; 0x80f
 801065a:	4013      	ands	r3, r2
 801065c:	613b      	str	r3, [r7, #16]
 801065e:	693b      	ldr	r3, [r7, #16]
 8010660:	2b00      	cmp	r3, #0
 8010662:	d113      	bne.n	801068c <HAL_UART_IRQHandler+0x58>
 8010664:	69fb      	ldr	r3, [r7, #28]
 8010666:	f003 0320 	and.w	r3, r3, #32
 801066a:	2b00      	cmp	r3, #0
 801066c:	d00e      	beq.n	801068c <HAL_UART_IRQHandler+0x58>
 801066e:	69bb      	ldr	r3, [r7, #24]
 8010670:	f003 0320 	and.w	r3, r3, #32
 8010674:	2b00      	cmp	r3, #0
 8010676:	d009      	beq.n	801068c <HAL_UART_IRQHandler+0x58>
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801067c:	2b00      	cmp	r3, #0
 801067e:	f000 81ce 	beq.w	8010a1e <HAL_UART_IRQHandler+0x3ea>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	4798      	blx	r3
 801068a:	e1c8      	b.n	8010a1e <HAL_UART_IRQHandler+0x3ea>
 801068c:	693b      	ldr	r3, [r7, #16]
 801068e:	2b00      	cmp	r3, #0
 8010690:	f000 80e3 	beq.w	801085a <HAL_UART_IRQHandler+0x226>
 8010694:	697b      	ldr	r3, [r7, #20]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	d105      	bne.n	80106aa <HAL_UART_IRQHandler+0x76>
 801069e:	69ba      	ldr	r2, [r7, #24]
 80106a0:	4ba6      	ldr	r3, [pc, #664]	; (801093c <HAL_UART_IRQHandler+0x308>)
 80106a2:	4013      	ands	r3, r2
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	f000 80d8 	beq.w	801085a <HAL_UART_IRQHandler+0x226>
 80106aa:	69fb      	ldr	r3, [r7, #28]
 80106ac:	f003 0301 	and.w	r3, r3, #1
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d010      	beq.n	80106d6 <HAL_UART_IRQHandler+0xa2>
 80106b4:	69bb      	ldr	r3, [r7, #24]
 80106b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d00b      	beq.n	80106d6 <HAL_UART_IRQHandler+0xa2>
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	681b      	ldr	r3, [r3, #0]
 80106c2:	2201      	movs	r2, #1
 80106c4:	621a      	str	r2, [r3, #32]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106cc:	f043 0201 	orr.w	r2, r3, #1
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	f003 0302 	and.w	r3, r3, #2
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d010      	beq.n	8010702 <HAL_UART_IRQHandler+0xce>
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	f003 0301 	and.w	r3, r3, #1
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d00b      	beq.n	8010702 <HAL_UART_IRQHandler+0xce>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	681b      	ldr	r3, [r3, #0]
 80106ee:	2202      	movs	r2, #2
 80106f0:	621a      	str	r2, [r3, #32]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106f8:	f043 0204 	orr.w	r2, r3, #4
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010702:	69fb      	ldr	r3, [r7, #28]
 8010704:	f003 0304 	and.w	r3, r3, #4
 8010708:	2b00      	cmp	r3, #0
 801070a:	d010      	beq.n	801072e <HAL_UART_IRQHandler+0xfa>
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	f003 0301 	and.w	r3, r3, #1
 8010712:	2b00      	cmp	r3, #0
 8010714:	d00b      	beq.n	801072e <HAL_UART_IRQHandler+0xfa>
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	2204      	movs	r2, #4
 801071c:	621a      	str	r2, [r3, #32]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010724:	f043 0202 	orr.w	r2, r3, #2
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801072e:	69fb      	ldr	r3, [r7, #28]
 8010730:	f003 0308 	and.w	r3, r3, #8
 8010734:	2b00      	cmp	r3, #0
 8010736:	d015      	beq.n	8010764 <HAL_UART_IRQHandler+0x130>
 8010738:	69bb      	ldr	r3, [r7, #24]
 801073a:	f003 0320 	and.w	r3, r3, #32
 801073e:	2b00      	cmp	r3, #0
 8010740:	d104      	bne.n	801074c <HAL_UART_IRQHandler+0x118>
 8010742:	697b      	ldr	r3, [r7, #20]
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	2b00      	cmp	r3, #0
 801074a:	d00b      	beq.n	8010764 <HAL_UART_IRQHandler+0x130>
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	2208      	movs	r2, #8
 8010752:	621a      	str	r2, [r3, #32]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801075a:	f043 0208 	orr.w	r2, r3, #8
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010764:	69fb      	ldr	r3, [r7, #28]
 8010766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801076a:	2b00      	cmp	r3, #0
 801076c:	d011      	beq.n	8010792 <HAL_UART_IRQHandler+0x15e>
 801076e:	69bb      	ldr	r3, [r7, #24]
 8010770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010774:	2b00      	cmp	r3, #0
 8010776:	d00c      	beq.n	8010792 <HAL_UART_IRQHandler+0x15e>
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010780:	621a      	str	r2, [r3, #32]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010788:	f043 0220 	orr.w	r2, r3, #32
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010798:	2b00      	cmp	r3, #0
 801079a:	f000 8142 	beq.w	8010a22 <HAL_UART_IRQHandler+0x3ee>
 801079e:	69fb      	ldr	r3, [r7, #28]
 80107a0:	f003 0320 	and.w	r3, r3, #32
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00c      	beq.n	80107c2 <HAL_UART_IRQHandler+0x18e>
 80107a8:	69bb      	ldr	r3, [r7, #24]
 80107aa:	f003 0320 	and.w	r3, r3, #32
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d007      	beq.n	80107c2 <HAL_UART_IRQHandler+0x18e>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d003      	beq.n	80107c2 <HAL_UART_IRQHandler+0x18e>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	4798      	blx	r3
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107c8:	60fb      	str	r3, [r7, #12]
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	689b      	ldr	r3, [r3, #8]
 80107d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107d4:	2b40      	cmp	r3, #64	; 0x40
 80107d6:	d004      	beq.n	80107e2 <HAL_UART_IRQHandler+0x1ae>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d031      	beq.n	8010846 <HAL_UART_IRQHandler+0x212>
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f000 fd6f 	bl	80112c6 <UART_EndRxTransfer>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	689b      	ldr	r3, [r3, #8]
 80107ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80107f2:	2b40      	cmp	r3, #64	; 0x40
 80107f4:	d123      	bne.n	801083e <HAL_UART_IRQHandler+0x20a>
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	689a      	ldr	r2, [r3, #8]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010804:	609a      	str	r2, [r3, #8]
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801080a:	2b00      	cmp	r3, #0
 801080c:	d013      	beq.n	8010836 <HAL_UART_IRQHandler+0x202>
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010812:	4a4b      	ldr	r2, [pc, #300]	; (8010940 <HAL_UART_IRQHandler+0x30c>)
 8010814:	639a      	str	r2, [r3, #56]	; 0x38
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801081a:	4618      	mov	r0, r3
 801081c:	f7fa f866 	bl	800a8ec <HAL_DMA_Abort_IT>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d017      	beq.n	8010856 <HAL_UART_IRQHandler+0x222>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801082a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801082c:	687a      	ldr	r2, [r7, #4]
 801082e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8010830:	4610      	mov	r0, r2
 8010832:	4798      	blx	r3
 8010834:	e00f      	b.n	8010856 <HAL_UART_IRQHandler+0x222>
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 f912 	bl	8010a60 <HAL_UART_ErrorCallback>
 801083c:	e00b      	b.n	8010856 <HAL_UART_IRQHandler+0x222>
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f000 f90e 	bl	8010a60 <HAL_UART_ErrorCallback>
 8010844:	e007      	b.n	8010856 <HAL_UART_IRQHandler+0x222>
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f000 f90a 	bl	8010a60 <HAL_UART_ErrorCallback>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2200      	movs	r2, #0
 8010850:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8010854:	e0e5      	b.n	8010a22 <HAL_UART_IRQHandler+0x3ee>
 8010856:	bf00      	nop
 8010858:	e0e3      	b.n	8010a22 <HAL_UART_IRQHandler+0x3ee>
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801085e:	2b01      	cmp	r3, #1
 8010860:	f040 80a9 	bne.w	80109b6 <HAL_UART_IRQHandler+0x382>
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	f003 0310 	and.w	r3, r3, #16
 801086a:	2b00      	cmp	r3, #0
 801086c:	f000 80a3 	beq.w	80109b6 <HAL_UART_IRQHandler+0x382>
 8010870:	69bb      	ldr	r3, [r7, #24]
 8010872:	f003 0310 	and.w	r3, r3, #16
 8010876:	2b00      	cmp	r3, #0
 8010878:	f000 809d 	beq.w	80109b6 <HAL_UART_IRQHandler+0x382>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	2210      	movs	r2, #16
 8010882:	621a      	str	r2, [r3, #32]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801088e:	2b40      	cmp	r3, #64	; 0x40
 8010890:	d158      	bne.n	8010944 <HAL_UART_IRQHandler+0x310>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	685b      	ldr	r3, [r3, #4]
 801089a:	813b      	strh	r3, [r7, #8]
 801089c:	893b      	ldrh	r3, [r7, #8]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f000 80c1 	beq.w	8010a26 <HAL_UART_IRQHandler+0x3f2>
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80108aa:	893a      	ldrh	r2, [r7, #8]
 80108ac:	429a      	cmp	r2, r3
 80108ae:	f080 80ba 	bcs.w	8010a26 <HAL_UART_IRQHandler+0x3f2>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	893a      	ldrh	r2, [r7, #8]
 80108b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	f003 0320 	and.w	r3, r3, #32
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d12a      	bne.n	8010920 <HAL_UART_IRQHandler+0x2ec>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	681b      	ldr	r3, [r3, #0]
 80108d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	689a      	ldr	r2, [r3, #8]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	f022 0201 	bic.w	r2, r2, #1
 80108e8:	609a      	str	r2, [r3, #8]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	689a      	ldr	r2, [r3, #8]
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80108f8:	609a      	str	r2, [r3, #8]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	2220      	movs	r2, #32
 80108fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2200      	movs	r2, #0
 8010904:	661a      	str	r2, [r3, #96]	; 0x60
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	681a      	ldr	r2, [r3, #0]
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	f022 0210 	bic.w	r2, r2, #16
 8010914:	601a      	str	r2, [r3, #0]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091a:	4618      	mov	r0, r3
 801091c:	f7f9 ffa8 	bl	800a870 <HAL_DMA_Abort>
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801092c:	b29b      	uxth	r3, r3
 801092e:	1ad3      	subs	r3, r2, r3
 8010930:	b29b      	uxth	r3, r3
 8010932:	4619      	mov	r1, r3
 8010934:	6878      	ldr	r0, [r7, #4]
 8010936:	f000 f89d 	bl	8010a74 <HAL_UARTEx_RxEventCallback>
 801093a:	e074      	b.n	8010a26 <HAL_UART_IRQHandler+0x3f2>
 801093c:	04000120 	.word	0x04000120
 8010940:	08011471 	.word	0x08011471
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010950:	b29b      	uxth	r3, r3
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	817b      	strh	r3, [r7, #10]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801095c:	b29b      	uxth	r3, r3
 801095e:	2b00      	cmp	r3, #0
 8010960:	d063      	beq.n	8010a2a <HAL_UART_IRQHandler+0x3f6>
 8010962:	897b      	ldrh	r3, [r7, #10]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d060      	beq.n	8010a2a <HAL_UART_IRQHandler+0x3f6>
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	681b      	ldr	r3, [r3, #0]
 801096c:	681a      	ldr	r2, [r3, #0]
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010976:	601a      	str	r2, [r3, #0]
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	689a      	ldr	r2, [r3, #8]
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f022 0201 	bic.w	r2, r2, #1
 8010986:	609a      	str	r2, [r3, #8]
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	2220      	movs	r2, #32
 801098c:	67da      	str	r2, [r3, #124]	; 0x7c
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2200      	movs	r2, #0
 8010992:	661a      	str	r2, [r3, #96]	; 0x60
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	2200      	movs	r2, #0
 8010998:	665a      	str	r2, [r3, #100]	; 0x64
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	681a      	ldr	r2, [r3, #0]
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	681b      	ldr	r3, [r3, #0]
 80109a4:	f022 0210 	bic.w	r2, r2, #16
 80109a8:	601a      	str	r2, [r3, #0]
 80109aa:	897b      	ldrh	r3, [r7, #10]
 80109ac:	4619      	mov	r1, r3
 80109ae:	6878      	ldr	r0, [r7, #4]
 80109b0:	f000 f860 	bl	8010a74 <HAL_UARTEx_RxEventCallback>
 80109b4:	e039      	b.n	8010a2a <HAL_UART_IRQHandler+0x3f6>
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d00d      	beq.n	80109dc <HAL_UART_IRQHandler+0x3a8>
 80109c0:	697b      	ldr	r3, [r7, #20]
 80109c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d008      	beq.n	80109dc <HAL_UART_IRQHandler+0x3a8>
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80109d2:	621a      	str	r2, [r3, #32]
 80109d4:	6878      	ldr	r0, [r7, #4]
 80109d6:	f000 fdf2 	bl	80115be <HAL_UARTEx_WakeupCallback>
 80109da:	e029      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 80109dc:	69fb      	ldr	r3, [r7, #28]
 80109de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00d      	beq.n	8010a02 <HAL_UART_IRQHandler+0x3ce>
 80109e6:	69bb      	ldr	r3, [r7, #24]
 80109e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d008      	beq.n	8010a02 <HAL_UART_IRQHandler+0x3ce>
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d01a      	beq.n	8010a2e <HAL_UART_IRQHandler+0x3fa>
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	4798      	blx	r3
 8010a00:	e015      	b.n	8010a2e <HAL_UART_IRQHandler+0x3fa>
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d011      	beq.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a0c:	69bb      	ldr	r3, [r7, #24]
 8010a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d00c      	beq.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	f000 fdb8 	bl	801158c <UART_EndTransmit_IT>
 8010a1c:	e008      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a1e:	bf00      	nop
 8010a20:	e006      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a22:	bf00      	nop
 8010a24:	e004      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a26:	bf00      	nop
 8010a28:	e002      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a2a:	bf00      	nop
 8010a2c:	e000      	b.n	8010a30 <HAL_UART_IRQHandler+0x3fc>
 8010a2e:	bf00      	nop
 8010a30:	3720      	adds	r7, #32
 8010a32:	46bd      	mov	sp, r7
 8010a34:	bd80      	pop	{r7, pc}
 8010a36:	bf00      	nop

08010a38 <HAL_UART_TxCpltCallback>:
 8010a38:	b480      	push	{r7}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a4a:	4770      	bx	lr

08010a4c <HAL_UART_RxHalfCpltCallback>:
 8010a4c:	b480      	push	{r7}
 8010a4e:	b083      	sub	sp, #12
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	bf00      	nop
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5e:	4770      	bx	lr

08010a60 <HAL_UART_ErrorCallback>:
 8010a60:	b480      	push	{r7}
 8010a62:	b083      	sub	sp, #12
 8010a64:	af00      	add	r7, sp, #0
 8010a66:	6078      	str	r0, [r7, #4]
 8010a68:	bf00      	nop
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <HAL_UARTEx_RxEventCallback>:
 8010a74:	b480      	push	{r7}
 8010a76:	b083      	sub	sp, #12
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	807b      	strh	r3, [r7, #2]
 8010a80:	bf00      	nop
 8010a82:	370c      	adds	r7, #12
 8010a84:	46bd      	mov	sp, r7
 8010a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a8a:	4770      	bx	lr

08010a8c <UART_SetConfig>:
 8010a8c:	b5b0      	push	{r4, r5, r7, lr}
 8010a8e:	b088      	sub	sp, #32
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	2300      	movs	r3, #0
 8010a96:	76bb      	strb	r3, [r7, #26]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	689a      	ldr	r2, [r3, #8]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	691b      	ldr	r3, [r3, #16]
 8010aa0:	431a      	orrs	r2, r3
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	695b      	ldr	r3, [r3, #20]
 8010aa6:	431a      	orrs	r2, r3
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	69db      	ldr	r3, [r3, #28]
 8010aac:	4313      	orrs	r3, r2
 8010aae:	61fb      	str	r3, [r7, #28]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	681b      	ldr	r3, [r3, #0]
 8010ab4:	681a      	ldr	r2, [r3, #0]
 8010ab6:	4baa      	ldr	r3, [pc, #680]	; (8010d60 <UART_SetConfig+0x2d4>)
 8010ab8:	4013      	ands	r3, r2
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	6812      	ldr	r2, [r2, #0]
 8010abe:	69f9      	ldr	r1, [r7, #28]
 8010ac0:	430b      	orrs	r3, r1
 8010ac2:	6013      	str	r3, [r2, #0]
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	68da      	ldr	r2, [r3, #12]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	430a      	orrs	r2, r1
 8010ad8:	605a      	str	r2, [r3, #4]
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	699b      	ldr	r3, [r3, #24]
 8010ade:	61fb      	str	r3, [r7, #28]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4a9f      	ldr	r2, [pc, #636]	; (8010d64 <UART_SetConfig+0x2d8>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d004      	beq.n	8010af4 <UART_SetConfig+0x68>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6a1b      	ldr	r3, [r3, #32]
 8010aee:	69fa      	ldr	r2, [r7, #28]
 8010af0:	4313      	orrs	r3, r2
 8010af2:	61fb      	str	r3, [r7, #28]
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	689b      	ldr	r3, [r3, #8]
 8010afa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	69fa      	ldr	r2, [r7, #28]
 8010b04:	430a      	orrs	r2, r1
 8010b06:	609a      	str	r2, [r3, #8]
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	4a96      	ldr	r2, [pc, #600]	; (8010d68 <UART_SetConfig+0x2dc>)
 8010b0e:	4293      	cmp	r3, r2
 8010b10:	d121      	bne.n	8010b56 <UART_SetConfig+0xca>
 8010b12:	4b96      	ldr	r3, [pc, #600]	; (8010d6c <UART_SetConfig+0x2e0>)
 8010b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b18:	f003 0303 	and.w	r3, r3, #3
 8010b1c:	2b03      	cmp	r3, #3
 8010b1e:	d817      	bhi.n	8010b50 <UART_SetConfig+0xc4>
 8010b20:	a201      	add	r2, pc, #4	; (adr r2, 8010b28 <UART_SetConfig+0x9c>)
 8010b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b26:	bf00      	nop
 8010b28:	08010b39 	.word	0x08010b39
 8010b2c:	08010b45 	.word	0x08010b45
 8010b30:	08010b3f 	.word	0x08010b3f
 8010b34:	08010b4b 	.word	0x08010b4b
 8010b38:	2301      	movs	r3, #1
 8010b3a:	76fb      	strb	r3, [r7, #27]
 8010b3c:	e096      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010b3e:	2302      	movs	r3, #2
 8010b40:	76fb      	strb	r3, [r7, #27]
 8010b42:	e093      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010b44:	2304      	movs	r3, #4
 8010b46:	76fb      	strb	r3, [r7, #27]
 8010b48:	e090      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010b4a:	2308      	movs	r3, #8
 8010b4c:	76fb      	strb	r3, [r7, #27]
 8010b4e:	e08d      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010b50:	2310      	movs	r3, #16
 8010b52:	76fb      	strb	r3, [r7, #27]
 8010b54:	e08a      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	4a85      	ldr	r2, [pc, #532]	; (8010d70 <UART_SetConfig+0x2e4>)
 8010b5c:	4293      	cmp	r3, r2
 8010b5e:	d132      	bne.n	8010bc6 <UART_SetConfig+0x13a>
 8010b60:	4b82      	ldr	r3, [pc, #520]	; (8010d6c <UART_SetConfig+0x2e0>)
 8010b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010b66:	f003 030c 	and.w	r3, r3, #12
 8010b6a:	2b0c      	cmp	r3, #12
 8010b6c:	d828      	bhi.n	8010bc0 <UART_SetConfig+0x134>
 8010b6e:	a201      	add	r2, pc, #4	; (adr r2, 8010b74 <UART_SetConfig+0xe8>)
 8010b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b74:	08010ba9 	.word	0x08010ba9
 8010b78:	08010bc1 	.word	0x08010bc1
 8010b7c:	08010bc1 	.word	0x08010bc1
 8010b80:	08010bc1 	.word	0x08010bc1
 8010b84:	08010bb5 	.word	0x08010bb5
 8010b88:	08010bc1 	.word	0x08010bc1
 8010b8c:	08010bc1 	.word	0x08010bc1
 8010b90:	08010bc1 	.word	0x08010bc1
 8010b94:	08010baf 	.word	0x08010baf
 8010b98:	08010bc1 	.word	0x08010bc1
 8010b9c:	08010bc1 	.word	0x08010bc1
 8010ba0:	08010bc1 	.word	0x08010bc1
 8010ba4:	08010bbb 	.word	0x08010bbb
 8010ba8:	2300      	movs	r3, #0
 8010baa:	76fb      	strb	r3, [r7, #27]
 8010bac:	e05e      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bae:	2302      	movs	r3, #2
 8010bb0:	76fb      	strb	r3, [r7, #27]
 8010bb2:	e05b      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bb4:	2304      	movs	r3, #4
 8010bb6:	76fb      	strb	r3, [r7, #27]
 8010bb8:	e058      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bba:	2308      	movs	r3, #8
 8010bbc:	76fb      	strb	r3, [r7, #27]
 8010bbe:	e055      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	76fb      	strb	r3, [r7, #27]
 8010bc4:	e052      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	4a6a      	ldr	r2, [pc, #424]	; (8010d74 <UART_SetConfig+0x2e8>)
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	d120      	bne.n	8010c12 <UART_SetConfig+0x186>
 8010bd0:	4b66      	ldr	r3, [pc, #408]	; (8010d6c <UART_SetConfig+0x2e0>)
 8010bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010bd6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010bda:	2b30      	cmp	r3, #48	; 0x30
 8010bdc:	d013      	beq.n	8010c06 <UART_SetConfig+0x17a>
 8010bde:	2b30      	cmp	r3, #48	; 0x30
 8010be0:	d814      	bhi.n	8010c0c <UART_SetConfig+0x180>
 8010be2:	2b20      	cmp	r3, #32
 8010be4:	d009      	beq.n	8010bfa <UART_SetConfig+0x16e>
 8010be6:	2b20      	cmp	r3, #32
 8010be8:	d810      	bhi.n	8010c0c <UART_SetConfig+0x180>
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d002      	beq.n	8010bf4 <UART_SetConfig+0x168>
 8010bee:	2b10      	cmp	r3, #16
 8010bf0:	d006      	beq.n	8010c00 <UART_SetConfig+0x174>
 8010bf2:	e00b      	b.n	8010c0c <UART_SetConfig+0x180>
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	76fb      	strb	r3, [r7, #27]
 8010bf8:	e038      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010bfa:	2302      	movs	r3, #2
 8010bfc:	76fb      	strb	r3, [r7, #27]
 8010bfe:	e035      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c00:	2304      	movs	r3, #4
 8010c02:	76fb      	strb	r3, [r7, #27]
 8010c04:	e032      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c06:	2308      	movs	r3, #8
 8010c08:	76fb      	strb	r3, [r7, #27]
 8010c0a:	e02f      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c0c:	2310      	movs	r3, #16
 8010c0e:	76fb      	strb	r3, [r7, #27]
 8010c10:	e02c      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	4a53      	ldr	r2, [pc, #332]	; (8010d64 <UART_SetConfig+0x2d8>)
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	d125      	bne.n	8010c68 <UART_SetConfig+0x1dc>
 8010c1c:	4b53      	ldr	r3, [pc, #332]	; (8010d6c <UART_SetConfig+0x2e0>)
 8010c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010c22:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010c26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010c2a:	d017      	beq.n	8010c5c <UART_SetConfig+0x1d0>
 8010c2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010c30:	d817      	bhi.n	8010c62 <UART_SetConfig+0x1d6>
 8010c32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c36:	d00b      	beq.n	8010c50 <UART_SetConfig+0x1c4>
 8010c38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010c3c:	d811      	bhi.n	8010c62 <UART_SetConfig+0x1d6>
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d003      	beq.n	8010c4a <UART_SetConfig+0x1be>
 8010c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c46:	d006      	beq.n	8010c56 <UART_SetConfig+0x1ca>
 8010c48:	e00b      	b.n	8010c62 <UART_SetConfig+0x1d6>
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	76fb      	strb	r3, [r7, #27]
 8010c4e:	e00d      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c50:	2302      	movs	r3, #2
 8010c52:	76fb      	strb	r3, [r7, #27]
 8010c54:	e00a      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c56:	2304      	movs	r3, #4
 8010c58:	76fb      	strb	r3, [r7, #27]
 8010c5a:	e007      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c5c:	2308      	movs	r3, #8
 8010c5e:	76fb      	strb	r3, [r7, #27]
 8010c60:	e004      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c62:	2310      	movs	r3, #16
 8010c64:	76fb      	strb	r3, [r7, #27]
 8010c66:	e001      	b.n	8010c6c <UART_SetConfig+0x1e0>
 8010c68:	2310      	movs	r3, #16
 8010c6a:	76fb      	strb	r3, [r7, #27]
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4a3c      	ldr	r2, [pc, #240]	; (8010d64 <UART_SetConfig+0x2d8>)
 8010c72:	4293      	cmp	r3, r2
 8010c74:	f040 8082 	bne.w	8010d7c <UART_SetConfig+0x2f0>
 8010c78:	7efb      	ldrb	r3, [r7, #27]
 8010c7a:	2b08      	cmp	r3, #8
 8010c7c:	d823      	bhi.n	8010cc6 <UART_SetConfig+0x23a>
 8010c7e:	a201      	add	r2, pc, #4	; (adr r2, 8010c84 <UART_SetConfig+0x1f8>)
 8010c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c84:	08010ca9 	.word	0x08010ca9
 8010c88:	08010cc7 	.word	0x08010cc7
 8010c8c:	08010cb1 	.word	0x08010cb1
 8010c90:	08010cc7 	.word	0x08010cc7
 8010c94:	08010cb7 	.word	0x08010cb7
 8010c98:	08010cc7 	.word	0x08010cc7
 8010c9c:	08010cc7 	.word	0x08010cc7
 8010ca0:	08010cc7 	.word	0x08010cc7
 8010ca4:	08010cbf 	.word	0x08010cbf
 8010ca8:	f7fd fe9e 	bl	800e9e8 <HAL_RCC_GetPCLK1Freq>
 8010cac:	6178      	str	r0, [r7, #20]
 8010cae:	e00f      	b.n	8010cd0 <UART_SetConfig+0x244>
 8010cb0:	4b31      	ldr	r3, [pc, #196]	; (8010d78 <UART_SetConfig+0x2ec>)
 8010cb2:	617b      	str	r3, [r7, #20]
 8010cb4:	e00c      	b.n	8010cd0 <UART_SetConfig+0x244>
 8010cb6:	f7fd fdff 	bl	800e8b8 <HAL_RCC_GetSysClockFreq>
 8010cba:	6178      	str	r0, [r7, #20]
 8010cbc:	e008      	b.n	8010cd0 <UART_SetConfig+0x244>
 8010cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cc2:	617b      	str	r3, [r7, #20]
 8010cc4:	e004      	b.n	8010cd0 <UART_SetConfig+0x244>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	617b      	str	r3, [r7, #20]
 8010cca:	2301      	movs	r3, #1
 8010ccc:	76bb      	strb	r3, [r7, #26]
 8010cce:	bf00      	nop
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	f000 8100 	beq.w	8010ed8 <UART_SetConfig+0x44c>
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	685a      	ldr	r2, [r3, #4]
 8010cdc:	4613      	mov	r3, r2
 8010cde:	005b      	lsls	r3, r3, #1
 8010ce0:	4413      	add	r3, r2
 8010ce2:	697a      	ldr	r2, [r7, #20]
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d305      	bcc.n	8010cf4 <UART_SetConfig+0x268>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	685b      	ldr	r3, [r3, #4]
 8010cec:	031b      	lsls	r3, r3, #12
 8010cee:	697a      	ldr	r2, [r7, #20]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	d902      	bls.n	8010cfa <UART_SetConfig+0x26e>
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	76bb      	strb	r3, [r7, #26]
 8010cf8:	e0ee      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	f04f 0100 	mov.w	r1, #0
 8010d02:	f04f 0200 	mov.w	r2, #0
 8010d06:	f04f 0300 	mov.w	r3, #0
 8010d0a:	020b      	lsls	r3, r1, #8
 8010d0c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d10:	0202      	lsls	r2, r0, #8
 8010d12:	6879      	ldr	r1, [r7, #4]
 8010d14:	6849      	ldr	r1, [r1, #4]
 8010d16:	0849      	lsrs	r1, r1, #1
 8010d18:	4608      	mov	r0, r1
 8010d1a:	f04f 0100 	mov.w	r1, #0
 8010d1e:	1814      	adds	r4, r2, r0
 8010d20:	eb43 0501 	adc.w	r5, r3, r1
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	685b      	ldr	r3, [r3, #4]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	f04f 0300 	mov.w	r3, #0
 8010d2e:	4620      	mov	r0, r4
 8010d30:	4629      	mov	r1, r5
 8010d32:	f7ef ffa9 	bl	8000c88 <__aeabi_uldivmod>
 8010d36:	4602      	mov	r2, r0
 8010d38:	460b      	mov	r3, r1
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	613b      	str	r3, [r7, #16]
 8010d3e:	693b      	ldr	r3, [r7, #16]
 8010d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d44:	d308      	bcc.n	8010d58 <UART_SetConfig+0x2cc>
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d4c:	d204      	bcs.n	8010d58 <UART_SetConfig+0x2cc>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	693a      	ldr	r2, [r7, #16]
 8010d54:	60da      	str	r2, [r3, #12]
 8010d56:	e0bf      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010d58:	2301      	movs	r3, #1
 8010d5a:	76bb      	strb	r3, [r7, #26]
 8010d5c:	e0bc      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010d5e:	bf00      	nop
 8010d60:	efff69f3 	.word	0xefff69f3
 8010d64:	40008000 	.word	0x40008000
 8010d68:	40013800 	.word	0x40013800
 8010d6c:	40021000 	.word	0x40021000
 8010d70:	40004400 	.word	0x40004400
 8010d74:	40004800 	.word	0x40004800
 8010d78:	00f42400 	.word	0x00f42400
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	69db      	ldr	r3, [r3, #28]
 8010d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d84:	d15c      	bne.n	8010e40 <UART_SetConfig+0x3b4>
 8010d86:	7efb      	ldrb	r3, [r7, #27]
 8010d88:	2b08      	cmp	r3, #8
 8010d8a:	d828      	bhi.n	8010dde <UART_SetConfig+0x352>
 8010d8c:	a201      	add	r2, pc, #4	; (adr r2, 8010d94 <UART_SetConfig+0x308>)
 8010d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d92:	bf00      	nop
 8010d94:	08010db9 	.word	0x08010db9
 8010d98:	08010dc1 	.word	0x08010dc1
 8010d9c:	08010dc9 	.word	0x08010dc9
 8010da0:	08010ddf 	.word	0x08010ddf
 8010da4:	08010dcf 	.word	0x08010dcf
 8010da8:	08010ddf 	.word	0x08010ddf
 8010dac:	08010ddf 	.word	0x08010ddf
 8010db0:	08010ddf 	.word	0x08010ddf
 8010db4:	08010dd7 	.word	0x08010dd7
 8010db8:	f7fd fe16 	bl	800e9e8 <HAL_RCC_GetPCLK1Freq>
 8010dbc:	6178      	str	r0, [r7, #20]
 8010dbe:	e013      	b.n	8010de8 <UART_SetConfig+0x35c>
 8010dc0:	f7fd fe28 	bl	800ea14 <HAL_RCC_GetPCLK2Freq>
 8010dc4:	6178      	str	r0, [r7, #20]
 8010dc6:	e00f      	b.n	8010de8 <UART_SetConfig+0x35c>
 8010dc8:	4b49      	ldr	r3, [pc, #292]	; (8010ef0 <UART_SetConfig+0x464>)
 8010dca:	617b      	str	r3, [r7, #20]
 8010dcc:	e00c      	b.n	8010de8 <UART_SetConfig+0x35c>
 8010dce:	f7fd fd73 	bl	800e8b8 <HAL_RCC_GetSysClockFreq>
 8010dd2:	6178      	str	r0, [r7, #20]
 8010dd4:	e008      	b.n	8010de8 <UART_SetConfig+0x35c>
 8010dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010dda:	617b      	str	r3, [r7, #20]
 8010ddc:	e004      	b.n	8010de8 <UART_SetConfig+0x35c>
 8010dde:	2300      	movs	r3, #0
 8010de0:	617b      	str	r3, [r7, #20]
 8010de2:	2301      	movs	r3, #1
 8010de4:	76bb      	strb	r3, [r7, #26]
 8010de6:	bf00      	nop
 8010de8:	697b      	ldr	r3, [r7, #20]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d074      	beq.n	8010ed8 <UART_SetConfig+0x44c>
 8010dee:	697b      	ldr	r3, [r7, #20]
 8010df0:	005a      	lsls	r2, r3, #1
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	085b      	lsrs	r3, r3, #1
 8010df8:	441a      	add	r2, r3
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8010e02:	b29b      	uxth	r3, r3
 8010e04:	613b      	str	r3, [r7, #16]
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	2b0f      	cmp	r3, #15
 8010e0a:	d916      	bls.n	8010e3a <UART_SetConfig+0x3ae>
 8010e0c:	693b      	ldr	r3, [r7, #16]
 8010e0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e12:	d212      	bcs.n	8010e3a <UART_SetConfig+0x3ae>
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	b29b      	uxth	r3, r3
 8010e18:	f023 030f 	bic.w	r3, r3, #15
 8010e1c:	81fb      	strh	r3, [r7, #14]
 8010e1e:	693b      	ldr	r3, [r7, #16]
 8010e20:	085b      	lsrs	r3, r3, #1
 8010e22:	b29b      	uxth	r3, r3
 8010e24:	f003 0307 	and.w	r3, r3, #7
 8010e28:	b29a      	uxth	r2, r3
 8010e2a:	89fb      	ldrh	r3, [r7, #14]
 8010e2c:	4313      	orrs	r3, r2
 8010e2e:	81fb      	strh	r3, [r7, #14]
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	89fa      	ldrh	r2, [r7, #14]
 8010e36:	60da      	str	r2, [r3, #12]
 8010e38:	e04e      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010e3a:	2301      	movs	r3, #1
 8010e3c:	76bb      	strb	r3, [r7, #26]
 8010e3e:	e04b      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010e40:	7efb      	ldrb	r3, [r7, #27]
 8010e42:	2b08      	cmp	r3, #8
 8010e44:	d827      	bhi.n	8010e96 <UART_SetConfig+0x40a>
 8010e46:	a201      	add	r2, pc, #4	; (adr r2, 8010e4c <UART_SetConfig+0x3c0>)
 8010e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e4c:	08010e71 	.word	0x08010e71
 8010e50:	08010e79 	.word	0x08010e79
 8010e54:	08010e81 	.word	0x08010e81
 8010e58:	08010e97 	.word	0x08010e97
 8010e5c:	08010e87 	.word	0x08010e87
 8010e60:	08010e97 	.word	0x08010e97
 8010e64:	08010e97 	.word	0x08010e97
 8010e68:	08010e97 	.word	0x08010e97
 8010e6c:	08010e8f 	.word	0x08010e8f
 8010e70:	f7fd fdba 	bl	800e9e8 <HAL_RCC_GetPCLK1Freq>
 8010e74:	6178      	str	r0, [r7, #20]
 8010e76:	e013      	b.n	8010ea0 <UART_SetConfig+0x414>
 8010e78:	f7fd fdcc 	bl	800ea14 <HAL_RCC_GetPCLK2Freq>
 8010e7c:	6178      	str	r0, [r7, #20]
 8010e7e:	e00f      	b.n	8010ea0 <UART_SetConfig+0x414>
 8010e80:	4b1b      	ldr	r3, [pc, #108]	; (8010ef0 <UART_SetConfig+0x464>)
 8010e82:	617b      	str	r3, [r7, #20]
 8010e84:	e00c      	b.n	8010ea0 <UART_SetConfig+0x414>
 8010e86:	f7fd fd17 	bl	800e8b8 <HAL_RCC_GetSysClockFreq>
 8010e8a:	6178      	str	r0, [r7, #20]
 8010e8c:	e008      	b.n	8010ea0 <UART_SetConfig+0x414>
 8010e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e92:	617b      	str	r3, [r7, #20]
 8010e94:	e004      	b.n	8010ea0 <UART_SetConfig+0x414>
 8010e96:	2300      	movs	r3, #0
 8010e98:	617b      	str	r3, [r7, #20]
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	76bb      	strb	r3, [r7, #26]
 8010e9e:	bf00      	nop
 8010ea0:	697b      	ldr	r3, [r7, #20]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d018      	beq.n	8010ed8 <UART_SetConfig+0x44c>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	085a      	lsrs	r2, r3, #1
 8010eac:	697b      	ldr	r3, [r7, #20]
 8010eae:	441a      	add	r2, r3
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	613b      	str	r3, [r7, #16]
 8010ebc:	693b      	ldr	r3, [r7, #16]
 8010ebe:	2b0f      	cmp	r3, #15
 8010ec0:	d908      	bls.n	8010ed4 <UART_SetConfig+0x448>
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010ec8:	d204      	bcs.n	8010ed4 <UART_SetConfig+0x448>
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	693a      	ldr	r2, [r7, #16]
 8010ed0:	60da      	str	r2, [r3, #12]
 8010ed2:	e001      	b.n	8010ed8 <UART_SetConfig+0x44c>
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	76bb      	strb	r3, [r7, #26]
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2200      	movs	r2, #0
 8010edc:	665a      	str	r2, [r3, #100]	; 0x64
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	669a      	str	r2, [r3, #104]	; 0x68
 8010ee4:	7ebb      	ldrb	r3, [r7, #26]
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3720      	adds	r7, #32
 8010eea:	46bd      	mov	sp, r7
 8010eec:	bdb0      	pop	{r4, r5, r7, pc}
 8010eee:	bf00      	nop
 8010ef0:	00f42400 	.word	0x00f42400

08010ef4 <UART_AdvFeatureConfig>:
 8010ef4:	b480      	push	{r7}
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	af00      	add	r7, sp, #0
 8010efa:	6078      	str	r0, [r7, #4]
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f00:	f003 0301 	and.w	r3, r3, #1
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d00a      	beq.n	8010f1e <UART_AdvFeatureConfig+0x2a>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	430a      	orrs	r2, r1
 8010f1c:	605a      	str	r2, [r3, #4]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f22:	f003 0302 	and.w	r3, r3, #2
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d00a      	beq.n	8010f40 <UART_AdvFeatureConfig+0x4c>
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	685b      	ldr	r3, [r3, #4]
 8010f30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	430a      	orrs	r2, r1
 8010f3e:	605a      	str	r2, [r3, #4]
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f44:	f003 0304 	and.w	r3, r3, #4
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d00a      	beq.n	8010f62 <UART_AdvFeatureConfig+0x6e>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	685b      	ldr	r3, [r3, #4]
 8010f52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	430a      	orrs	r2, r1
 8010f60:	605a      	str	r2, [r3, #4]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f66:	f003 0308 	and.w	r3, r3, #8
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00a      	beq.n	8010f84 <UART_AdvFeatureConfig+0x90>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	685b      	ldr	r3, [r3, #4]
 8010f74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	681b      	ldr	r3, [r3, #0]
 8010f80:	430a      	orrs	r2, r1
 8010f82:	605a      	str	r2, [r3, #4]
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f88:	f003 0310 	and.w	r3, r3, #16
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d00a      	beq.n	8010fa6 <UART_AdvFeatureConfig+0xb2>
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	689b      	ldr	r3, [r3, #8]
 8010f96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	430a      	orrs	r2, r1
 8010fa4:	609a      	str	r2, [r3, #8]
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010faa:	f003 0320 	and.w	r3, r3, #32
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d00a      	beq.n	8010fc8 <UART_AdvFeatureConfig+0xd4>
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	681b      	ldr	r3, [r3, #0]
 8010fc4:	430a      	orrs	r2, r1
 8010fc6:	609a      	str	r2, [r3, #8]
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d01a      	beq.n	801100a <UART_AdvFeatureConfig+0x116>
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	685b      	ldr	r3, [r3, #4]
 8010fda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	430a      	orrs	r2, r1
 8010fe8:	605a      	str	r2, [r3, #4]
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ff2:	d10a      	bne.n	801100a <UART_AdvFeatureConfig+0x116>
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	685b      	ldr	r3, [r3, #4]
 8010ffa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	681b      	ldr	r3, [r3, #0]
 8011006:	430a      	orrs	r2, r1
 8011008:	605a      	str	r2, [r3, #4]
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801100e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011012:	2b00      	cmp	r3, #0
 8011014:	d00a      	beq.n	801102c <UART_AdvFeatureConfig+0x138>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	685b      	ldr	r3, [r3, #4]
 801101c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	430a      	orrs	r2, r1
 801102a:	605a      	str	r2, [r3, #4]
 801102c:	bf00      	nop
 801102e:	370c      	adds	r7, #12
 8011030:	46bd      	mov	sp, r7
 8011032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011036:	4770      	bx	lr

08011038 <UART_CheckIdleState>:
 8011038:	b580      	push	{r7, lr}
 801103a:	b086      	sub	sp, #24
 801103c:	af02      	add	r7, sp, #8
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	2200      	movs	r2, #0
 8011044:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8011048:	f7f9 f9b8 	bl	800a3bc <HAL_GetTick>
 801104c:	60f8      	str	r0, [r7, #12]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	681b      	ldr	r3, [r3, #0]
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f003 0308 	and.w	r3, r3, #8
 8011058:	2b08      	cmp	r3, #8
 801105a:	d10e      	bne.n	801107a <UART_CheckIdleState+0x42>
 801105c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011060:	9300      	str	r3, [sp, #0]
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	2200      	movs	r2, #0
 8011066:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 f82d 	bl	80110ca <UART_WaitOnFlagUntilTimeout>
 8011070:	4603      	mov	r3, r0
 8011072:	2b00      	cmp	r3, #0
 8011074:	d001      	beq.n	801107a <UART_CheckIdleState+0x42>
 8011076:	2303      	movs	r3, #3
 8011078:	e023      	b.n	80110c2 <UART_CheckIdleState+0x8a>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	f003 0304 	and.w	r3, r3, #4
 8011084:	2b04      	cmp	r3, #4
 8011086:	d10e      	bne.n	80110a6 <UART_CheckIdleState+0x6e>
 8011088:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801108c:	9300      	str	r3, [sp, #0]
 801108e:	68fb      	ldr	r3, [r7, #12]
 8011090:	2200      	movs	r2, #0
 8011092:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011096:	6878      	ldr	r0, [r7, #4]
 8011098:	f000 f817 	bl	80110ca <UART_WaitOnFlagUntilTimeout>
 801109c:	4603      	mov	r3, r0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d001      	beq.n	80110a6 <UART_CheckIdleState+0x6e>
 80110a2:	2303      	movs	r3, #3
 80110a4:	e00d      	b.n	80110c2 <UART_CheckIdleState+0x8a>
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	2220      	movs	r2, #32
 80110aa:	679a      	str	r2, [r3, #120]	; 0x78
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	2220      	movs	r2, #32
 80110b0:	67da      	str	r2, [r3, #124]	; 0x7c
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	661a      	str	r2, [r3, #96]	; 0x60
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80110c0:	2300      	movs	r3, #0
 80110c2:	4618      	mov	r0, r3
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}

080110ca <UART_WaitOnFlagUntilTimeout>:
 80110ca:	b580      	push	{r7, lr}
 80110cc:	b084      	sub	sp, #16
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	60f8      	str	r0, [r7, #12]
 80110d2:	60b9      	str	r1, [r7, #8]
 80110d4:	603b      	str	r3, [r7, #0]
 80110d6:	4613      	mov	r3, r2
 80110d8:	71fb      	strb	r3, [r7, #7]
 80110da:	e05e      	b.n	801119a <UART_WaitOnFlagUntilTimeout+0xd0>
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e2:	d05a      	beq.n	801119a <UART_WaitOnFlagUntilTimeout+0xd0>
 80110e4:	f7f9 f96a 	bl	800a3bc <HAL_GetTick>
 80110e8:	4602      	mov	r2, r0
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	1ad3      	subs	r3, r2, r3
 80110ee:	69ba      	ldr	r2, [r7, #24]
 80110f0:	429a      	cmp	r2, r3
 80110f2:	d302      	bcc.n	80110fa <UART_WaitOnFlagUntilTimeout+0x30>
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d11b      	bne.n	8011132 <UART_WaitOnFlagUntilTimeout+0x68>
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011108:	601a      	str	r2, [r3, #0]
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	689a      	ldr	r2, [r3, #8]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	f022 0201 	bic.w	r2, r2, #1
 8011118:	609a      	str	r2, [r3, #8]
 801111a:	68fb      	ldr	r3, [r7, #12]
 801111c:	2220      	movs	r2, #32
 801111e:	679a      	str	r2, [r3, #120]	; 0x78
 8011120:	68fb      	ldr	r3, [r7, #12]
 8011122:	2220      	movs	r2, #32
 8011124:	67da      	str	r2, [r3, #124]	; 0x7c
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	2200      	movs	r2, #0
 801112a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 801112e:	2303      	movs	r3, #3
 8011130:	e043      	b.n	80111ba <UART_WaitOnFlagUntilTimeout+0xf0>
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	681b      	ldr	r3, [r3, #0]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f003 0304 	and.w	r3, r3, #4
 801113c:	2b00      	cmp	r3, #0
 801113e:	d02c      	beq.n	801119a <UART_WaitOnFlagUntilTimeout+0xd0>
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	69db      	ldr	r3, [r3, #28]
 8011146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801114a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801114e:	d124      	bne.n	801119a <UART_WaitOnFlagUntilTimeout+0xd0>
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011158:	621a      	str	r2, [r3, #32]
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8011168:	601a      	str	r2, [r3, #0]
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	689a      	ldr	r2, [r3, #8]
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	681b      	ldr	r3, [r3, #0]
 8011174:	f022 0201 	bic.w	r2, r2, #1
 8011178:	609a      	str	r2, [r3, #8]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	2220      	movs	r2, #32
 801117e:	679a      	str	r2, [r3, #120]	; 0x78
 8011180:	68fb      	ldr	r3, [r7, #12]
 8011182:	2220      	movs	r2, #32
 8011184:	67da      	str	r2, [r3, #124]	; 0x7c
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2220      	movs	r2, #32
 801118a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	2200      	movs	r2, #0
 8011192:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011196:	2303      	movs	r3, #3
 8011198:	e00f      	b.n	80111ba <UART_WaitOnFlagUntilTimeout+0xf0>
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	69da      	ldr	r2, [r3, #28]
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	4013      	ands	r3, r2
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	bf0c      	ite	eq
 80111aa:	2301      	moveq	r3, #1
 80111ac:	2300      	movne	r3, #0
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	461a      	mov	r2, r3
 80111b2:	79fb      	ldrb	r3, [r7, #7]
 80111b4:	429a      	cmp	r2, r3
 80111b6:	d091      	beq.n	80110dc <UART_WaitOnFlagUntilTimeout+0x12>
 80111b8:	2300      	movs	r3, #0
 80111ba:	4618      	mov	r0, r3
 80111bc:	3710      	adds	r7, #16
 80111be:	46bd      	mov	sp, r7
 80111c0:	bd80      	pop	{r7, pc}
	...

080111c4 <UART_Start_Receive_DMA>:
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	60f8      	str	r0, [r7, #12]
 80111cc:	60b9      	str	r1, [r7, #8]
 80111ce:	4613      	mov	r3, r2
 80111d0:	80fb      	strh	r3, [r7, #6]
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	68ba      	ldr	r2, [r7, #8]
 80111d6:	655a      	str	r2, [r3, #84]	; 0x54
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	88fa      	ldrh	r2, [r7, #6]
 80111dc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2200      	movs	r2, #0
 80111e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2222      	movs	r2, #34	; 0x22
 80111ec:	67da      	str	r2, [r3, #124]	; 0x7c
 80111ee:	68fb      	ldr	r3, [r7, #12]
 80111f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d02b      	beq.n	801124e <UART_Start_Receive_DMA+0x8a>
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111fa:	4a25      	ldr	r2, [pc, #148]	; (8011290 <UART_Start_Receive_DMA+0xcc>)
 80111fc:	62da      	str	r2, [r3, #44]	; 0x2c
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011202:	4a24      	ldr	r2, [pc, #144]	; (8011294 <UART_Start_Receive_DMA+0xd0>)
 8011204:	631a      	str	r2, [r3, #48]	; 0x30
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801120a:	4a23      	ldr	r2, [pc, #140]	; (8011298 <UART_Start_Receive_DMA+0xd4>)
 801120c:	635a      	str	r2, [r3, #52]	; 0x34
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011212:	2200      	movs	r2, #0
 8011214:	639a      	str	r2, [r3, #56]	; 0x38
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	6f18      	ldr	r0, [r3, #112]	; 0x70
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	3324      	adds	r3, #36	; 0x24
 8011220:	4619      	mov	r1, r3
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011226:	461a      	mov	r2, r3
 8011228:	88fb      	ldrh	r3, [r7, #6]
 801122a:	f7f9 fac1 	bl	800a7b0 <HAL_DMA_Start_IT>
 801122e:	4603      	mov	r3, r0
 8011230:	2b00      	cmp	r3, #0
 8011232:	d00c      	beq.n	801124e <UART_Start_Receive_DMA+0x8a>
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	2210      	movs	r2, #16
 8011238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2200      	movs	r2, #0
 8011240:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	2220      	movs	r2, #32
 8011248:	679a      	str	r2, [r3, #120]	; 0x78
 801124a:	2301      	movs	r3, #1
 801124c:	e01c      	b.n	8011288 <UART_Start_Receive_DMA+0xc4>
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	2200      	movs	r2, #0
 8011252:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8011256:	68fb      	ldr	r3, [r7, #12]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	681a      	ldr	r2, [r3, #0]
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011264:	601a      	str	r2, [r3, #0]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	689a      	ldr	r2, [r3, #8]
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	f042 0201 	orr.w	r2, r2, #1
 8011274:	609a      	str	r2, [r3, #8]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	689a      	ldr	r2, [r3, #8]
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011284:	609a      	str	r2, [r3, #8]
 8011286:	2300      	movs	r3, #0
 8011288:	4618      	mov	r0, r3
 801128a:	3710      	adds	r7, #16
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08011325 	.word	0x08011325
 8011294:	080113bd 	.word	0x080113bd
 8011298:	080113f5 	.word	0x080113f5

0801129c <UART_EndTxTransfer>:
 801129c:	b480      	push	{r7}
 801129e:	b083      	sub	sp, #12
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	681a      	ldr	r2, [r3, #0]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681b      	ldr	r3, [r3, #0]
 80112ae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80112b2:	601a      	str	r2, [r3, #0]
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2220      	movs	r2, #32
 80112b8:	679a      	str	r2, [r3, #120]	; 0x78
 80112ba:	bf00      	nop
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr

080112c6 <UART_EndRxTransfer>:
 80112c6:	b480      	push	{r7}
 80112c8:	b083      	sub	sp, #12
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80112dc:	601a      	str	r2, [r3, #0]
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	689a      	ldr	r2, [r3, #8]
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	681b      	ldr	r3, [r3, #0]
 80112e8:	f022 0201 	bic.w	r2, r2, #1
 80112ec:	609a      	str	r2, [r3, #8]
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80112f2:	2b01      	cmp	r3, #1
 80112f4:	d107      	bne.n	8011306 <UART_EndRxTransfer+0x40>
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	681b      	ldr	r3, [r3, #0]
 80112fa:	681a      	ldr	r2, [r3, #0]
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	681b      	ldr	r3, [r3, #0]
 8011300:	f022 0210 	bic.w	r2, r2, #16
 8011304:	601a      	str	r2, [r3, #0]
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	2220      	movs	r2, #32
 801130a:	67da      	str	r2, [r3, #124]	; 0x7c
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	2200      	movs	r2, #0
 8011310:	661a      	str	r2, [r3, #96]	; 0x60
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2200      	movs	r2, #0
 8011316:	665a      	str	r2, [r3, #100]	; 0x64
 8011318:	bf00      	nop
 801131a:	370c      	adds	r7, #12
 801131c:	46bd      	mov	sp, r7
 801131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011322:	4770      	bx	lr

08011324 <UART_DMAReceiveCplt>:
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011330:	60fb      	str	r3, [r7, #12]
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	f003 0320 	and.w	r3, r3, #32
 801133c:	2b00      	cmp	r3, #0
 801133e:	d12a      	bne.n	8011396 <UART_DMAReceiveCplt+0x72>
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	2200      	movs	r2, #0
 8011344:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	681a      	ldr	r2, [r3, #0]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8011356:	601a      	str	r2, [r3, #0]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	689a      	ldr	r2, [r3, #8]
 801135e:	68fb      	ldr	r3, [r7, #12]
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f022 0201 	bic.w	r2, r2, #1
 8011366:	609a      	str	r2, [r3, #8]
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	681b      	ldr	r3, [r3, #0]
 801136c:	689a      	ldr	r2, [r3, #8]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011376:	609a      	str	r2, [r3, #8]
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2220      	movs	r2, #32
 801137c:	67da      	str	r2, [r3, #124]	; 0x7c
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011382:	2b01      	cmp	r3, #1
 8011384:	d107      	bne.n	8011396 <UART_DMAReceiveCplt+0x72>
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	681a      	ldr	r2, [r3, #0]
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	f022 0210 	bic.w	r2, r2, #16
 8011394:	601a      	str	r2, [r3, #0]
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801139a:	2b01      	cmp	r3, #1
 801139c:	d107      	bne.n	80113ae <UART_DMAReceiveCplt+0x8a>
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80113a4:	4619      	mov	r1, r3
 80113a6:	68f8      	ldr	r0, [r7, #12]
 80113a8:	f7ff fb64 	bl	8010a74 <HAL_UARTEx_RxEventCallback>
 80113ac:	e002      	b.n	80113b4 <UART_DMAReceiveCplt+0x90>
 80113ae:	68f8      	ldr	r0, [r7, #12]
 80113b0:	f7f8 fa50 	bl	8009854 <HAL_UART_RxCpltCallback>
 80113b4:	bf00      	nop
 80113b6:	3710      	adds	r7, #16
 80113b8:	46bd      	mov	sp, r7
 80113ba:	bd80      	pop	{r7, pc}

080113bc <UART_DMARxHalfCplt>:
 80113bc:	b580      	push	{r7, lr}
 80113be:	b084      	sub	sp, #16
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113c8:	60fb      	str	r3, [r7, #12]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80113ce:	2b01      	cmp	r3, #1
 80113d0:	d109      	bne.n	80113e6 <UART_DMARxHalfCplt+0x2a>
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80113d8:	085b      	lsrs	r3, r3, #1
 80113da:	b29b      	uxth	r3, r3
 80113dc:	4619      	mov	r1, r3
 80113de:	68f8      	ldr	r0, [r7, #12]
 80113e0:	f7ff fb48 	bl	8010a74 <HAL_UARTEx_RxEventCallback>
 80113e4:	e002      	b.n	80113ec <UART_DMARxHalfCplt+0x30>
 80113e6:	68f8      	ldr	r0, [r7, #12]
 80113e8:	f7ff fb30 	bl	8010a4c <HAL_UART_RxHalfCpltCallback>
 80113ec:	bf00      	nop
 80113ee:	3710      	adds	r7, #16
 80113f0:	46bd      	mov	sp, r7
 80113f2:	bd80      	pop	{r7, pc}

080113f4 <UART_DMAError>:
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b086      	sub	sp, #24
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011400:	617b      	str	r3, [r7, #20]
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011406:	613b      	str	r3, [r7, #16]
 8011408:	697b      	ldr	r3, [r7, #20]
 801140a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801140c:	60fb      	str	r3, [r7, #12]
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011418:	2b80      	cmp	r3, #128	; 0x80
 801141a:	d109      	bne.n	8011430 <UART_DMAError+0x3c>
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	2b21      	cmp	r3, #33	; 0x21
 8011420:	d106      	bne.n	8011430 <UART_DMAError+0x3c>
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2200      	movs	r2, #0
 8011426:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801142a:	6978      	ldr	r0, [r7, #20]
 801142c:	f7ff ff36 	bl	801129c <UART_EndTxTransfer>
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	689b      	ldr	r3, [r3, #8]
 8011436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801143a:	2b40      	cmp	r3, #64	; 0x40
 801143c:	d109      	bne.n	8011452 <UART_DMAError+0x5e>
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	2b22      	cmp	r3, #34	; 0x22
 8011442:	d106      	bne.n	8011452 <UART_DMAError+0x5e>
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2200      	movs	r2, #0
 8011448:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 801144c:	6978      	ldr	r0, [r7, #20]
 801144e:	f7ff ff3a 	bl	80112c6 <UART_EndRxTransfer>
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011458:	f043 0210 	orr.w	r2, r3, #16
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8011462:	6978      	ldr	r0, [r7, #20]
 8011464:	f7ff fafc 	bl	8010a60 <HAL_UART_ErrorCallback>
 8011468:	bf00      	nop
 801146a:	3718      	adds	r7, #24
 801146c:	46bd      	mov	sp, r7
 801146e:	bd80      	pop	{r7, pc}

08011470 <UART_DMAAbortOnError>:
 8011470:	b580      	push	{r7, lr}
 8011472:	b084      	sub	sp, #16
 8011474:	af00      	add	r7, sp, #0
 8011476:	6078      	str	r0, [r7, #4]
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801147c:	60fb      	str	r3, [r7, #12]
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2200      	movs	r2, #0
 8011482:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	2200      	movs	r2, #0
 801148a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 801148e:	68f8      	ldr	r0, [r7, #12]
 8011490:	f7ff fae6 	bl	8010a60 <HAL_UART_ErrorCallback>
 8011494:	bf00      	nop
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <UART_TxISR_8BIT>:
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114a8:	2b21      	cmp	r3, #33	; 0x21
 80114aa:	d12b      	bne.n	8011504 <UART_TxISR_8BIT+0x68>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80114b2:	b29b      	uxth	r3, r3
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d110      	bne.n	80114da <UART_TxISR_8BIT+0x3e>
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	681a      	ldr	r2, [r3, #0]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80114c6:	601a      	str	r2, [r3, #0]
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	681a      	ldr	r2, [r3, #0]
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80114d6:	601a      	str	r2, [r3, #0]
 80114d8:	e014      	b.n	8011504 <UART_TxISR_8BIT+0x68>
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114de:	781a      	ldrb	r2, [r3, #0]
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	b292      	uxth	r2, r2
 80114e6:	851a      	strh	r2, [r3, #40]	; 0x28
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114ec:	1c5a      	adds	r2, r3, #1
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	3b01      	subs	r3, #1
 80114fc:	b29a      	uxth	r2, r3
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011504:	bf00      	nop
 8011506:	370c      	adds	r7, #12
 8011508:	46bd      	mov	sp, r7
 801150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150e:	4770      	bx	lr

08011510 <UART_TxISR_16BIT>:
 8011510:	b480      	push	{r7}
 8011512:	b085      	sub	sp, #20
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801151c:	2b21      	cmp	r3, #33	; 0x21
 801151e:	d12f      	bne.n	8011580 <UART_TxISR_16BIT+0x70>
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011526:	b29b      	uxth	r3, r3
 8011528:	2b00      	cmp	r3, #0
 801152a:	d110      	bne.n	801154e <UART_TxISR_16BIT+0x3e>
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	681a      	ldr	r2, [r3, #0]
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801154a:	601a      	str	r2, [r3, #0]
 801154c:	e018      	b.n	8011580 <UART_TxISR_16BIT+0x70>
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011552:	60fb      	str	r3, [r7, #12]
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	881a      	ldrh	r2, [r3, #0]
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011560:	b292      	uxth	r2, r2
 8011562:	851a      	strh	r2, [r3, #40]	; 0x28
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011568:	1c9a      	adds	r2, r3, #2
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	64da      	str	r2, [r3, #76]	; 0x4c
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011574:	b29b      	uxth	r3, r3
 8011576:	3b01      	subs	r3, #1
 8011578:	b29a      	uxth	r2, r3
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
 8011580:	bf00      	nop
 8011582:	3714      	adds	r7, #20
 8011584:	46bd      	mov	sp, r7
 8011586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801158a:	4770      	bx	lr

0801158c <UART_EndTransmit_IT>:
 801158c:	b580      	push	{r7, lr}
 801158e:	b082      	sub	sp, #8
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	681a      	ldr	r2, [r3, #0]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80115a2:	601a      	str	r2, [r3, #0]
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2220      	movs	r2, #32
 80115a8:	679a      	str	r2, [r3, #120]	; 0x78
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	2200      	movs	r2, #0
 80115ae:	669a      	str	r2, [r3, #104]	; 0x68
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f7ff fa41 	bl	8010a38 <HAL_UART_TxCpltCallback>
 80115b6:	bf00      	nop
 80115b8:	3708      	adds	r7, #8
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <HAL_UARTEx_WakeupCallback>:
 80115be:	b480      	push	{r7}
 80115c0:	b083      	sub	sp, #12
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	bf00      	nop
 80115c8:	370c      	adds	r7, #12
 80115ca:	46bd      	mov	sp, r7
 80115cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d0:	4770      	bx	lr

080115d2 <USB_CoreInit>:
 80115d2:	b084      	sub	sp, #16
 80115d4:	b480      	push	{r7}
 80115d6:	b083      	sub	sp, #12
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]
 80115dc:	f107 0014 	add.w	r0, r7, #20
 80115e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80115e4:	2300      	movs	r3, #0
 80115e6:	4618      	mov	r0, r3
 80115e8:	370c      	adds	r7, #12
 80115ea:	46bd      	mov	sp, r7
 80115ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f0:	b004      	add	sp, #16
 80115f2:	4770      	bx	lr

080115f4 <USB_EnableGlobalInt>:
 80115f4:	b480      	push	{r7}
 80115f6:	b085      	sub	sp, #20
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	2200      	movs	r2, #0
 8011600:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8011604:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8011608:	60fb      	str	r3, [r7, #12]
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	b29a      	uxth	r2, r3
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8011614:	2300      	movs	r3, #0
 8011616:	4618      	mov	r0, r3
 8011618:	3714      	adds	r7, #20
 801161a:	46bd      	mov	sp, r7
 801161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011620:	4770      	bx	lr

08011622 <USB_DisableGlobalInt>:
 8011622:	b480      	push	{r7}
 8011624:	b085      	sub	sp, #20
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 801162e:	60fb      	str	r3, [r7, #12]
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8011636:	b29a      	uxth	r2, r3
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	b29b      	uxth	r3, r3
 801163c:	43db      	mvns	r3, r3
 801163e:	b29b      	uxth	r3, r3
 8011640:	4013      	ands	r3, r2
 8011642:	b29a      	uxth	r2, r3
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 801164a:	2300      	movs	r3, #0
 801164c:	4618      	mov	r0, r3
 801164e:	3714      	adds	r7, #20
 8011650:	46bd      	mov	sp, r7
 8011652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011656:	4770      	bx	lr

08011658 <USB_SetCurrentMode>:
 8011658:	b480      	push	{r7}
 801165a:	b083      	sub	sp, #12
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]
 8011660:	460b      	mov	r3, r1
 8011662:	70fb      	strb	r3, [r7, #3]
 8011664:	2300      	movs	r3, #0
 8011666:	4618      	mov	r0, r3
 8011668:	370c      	adds	r7, #12
 801166a:	46bd      	mov	sp, r7
 801166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011670:	4770      	bx	lr

08011672 <USB_DevInit>:
 8011672:	b084      	sub	sp, #16
 8011674:	b480      	push	{r7}
 8011676:	b083      	sub	sp, #12
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	f107 0014 	add.w	r0, r7, #20
 8011680:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2201      	movs	r2, #1
 8011688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2200      	movs	r2, #0
 8011690:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	2200      	movs	r2, #0
 8011698:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	2200      	movs	r2, #0
 80116a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 80116a4:	2300      	movs	r3, #0
 80116a6:	4618      	mov	r0, r3
 80116a8:	370c      	adds	r7, #12
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	b004      	add	sp, #16
 80116b2:	4770      	bx	lr

080116b4 <USB_ActivateEndpoint>:
 80116b4:	b480      	push	{r7}
 80116b6:	b09b      	sub	sp, #108	; 0x6c
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
 80116bc:	6039      	str	r1, [r7, #0]
 80116be:	2300      	movs	r3, #0
 80116c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80116c4:	687a      	ldr	r2, [r7, #4]
 80116c6:	683b      	ldr	r3, [r7, #0]
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	4413      	add	r3, r2
 80116ce:	881b      	ldrh	r3, [r3, #0]
 80116d0:	b29b      	uxth	r3, r3
 80116d2:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80116d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80116da:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80116de:	683b      	ldr	r3, [r7, #0]
 80116e0:	78db      	ldrb	r3, [r3, #3]
 80116e2:	2b03      	cmp	r3, #3
 80116e4:	d81f      	bhi.n	8011726 <USB_ActivateEndpoint+0x72>
 80116e6:	a201      	add	r2, pc, #4	; (adr r2, 80116ec <USB_ActivateEndpoint+0x38>)
 80116e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ec:	080116fd 	.word	0x080116fd
 80116f0:	08011719 	.word	0x08011719
 80116f4:	0801172f 	.word	0x0801172f
 80116f8:	0801170b 	.word	0x0801170b
 80116fc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8011700:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011704:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011708:	e012      	b.n	8011730 <USB_ActivateEndpoint+0x7c>
 801170a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801170e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8011712:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011716:	e00b      	b.n	8011730 <USB_ActivateEndpoint+0x7c>
 8011718:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801171c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011720:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8011724:	e004      	b.n	8011730 <USB_ActivateEndpoint+0x7c>
 8011726:	2301      	movs	r3, #1
 8011728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801172c:	e000      	b.n	8011730 <USB_ActivateEndpoint+0x7c>
 801172e:	bf00      	nop
 8011730:	687a      	ldr	r2, [r7, #4]
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	009b      	lsls	r3, r3, #2
 8011738:	441a      	add	r2, r3
 801173a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801173e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801174a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801174e:	b29b      	uxth	r3, r3
 8011750:	8013      	strh	r3, [r2, #0]
 8011752:	687a      	ldr	r2, [r7, #4]
 8011754:	683b      	ldr	r3, [r7, #0]
 8011756:	781b      	ldrb	r3, [r3, #0]
 8011758:	009b      	lsls	r3, r3, #2
 801175a:	4413      	add	r3, r2
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	b29b      	uxth	r3, r3
 8011760:	b21b      	sxth	r3, r3
 8011762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801176a:	b21a      	sxth	r2, r3
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	b21b      	sxth	r3, r3
 8011772:	4313      	orrs	r3, r2
 8011774:	b21b      	sxth	r3, r3
 8011776:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801177a:	687a      	ldr	r2, [r7, #4]
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	781b      	ldrb	r3, [r3, #0]
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	441a      	add	r2, r3
 8011784:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8011788:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801178c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011798:	b29b      	uxth	r3, r3
 801179a:	8013      	strh	r3, [r2, #0]
 801179c:	683b      	ldr	r3, [r7, #0]
 801179e:	7b1b      	ldrb	r3, [r3, #12]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	f040 8149 	bne.w	8011a38 <USB_ActivateEndpoint+0x384>
 80117a6:	683b      	ldr	r3, [r7, #0]
 80117a8:	785b      	ldrb	r3, [r3, #1]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f000 8084 	beq.w	80118b8 <USB_ActivateEndpoint+0x204>
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	617b      	str	r3, [r7, #20]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80117ba:	b29b      	uxth	r3, r3
 80117bc:	461a      	mov	r2, r3
 80117be:	697b      	ldr	r3, [r7, #20]
 80117c0:	4413      	add	r3, r2
 80117c2:	617b      	str	r3, [r7, #20]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	00da      	lsls	r2, r3, #3
 80117ca:	697b      	ldr	r3, [r7, #20]
 80117cc:	4413      	add	r3, r2
 80117ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80117d2:	613b      	str	r3, [r7, #16]
 80117d4:	683b      	ldr	r3, [r7, #0]
 80117d6:	88db      	ldrh	r3, [r3, #6]
 80117d8:	085b      	lsrs	r3, r3, #1
 80117da:	b29b      	uxth	r3, r3
 80117dc:	005b      	lsls	r3, r3, #1
 80117de:	b29a      	uxth	r2, r3
 80117e0:	693b      	ldr	r3, [r7, #16]
 80117e2:	801a      	strh	r2, [r3, #0]
 80117e4:	687a      	ldr	r2, [r7, #4]
 80117e6:	683b      	ldr	r3, [r7, #0]
 80117e8:	781b      	ldrb	r3, [r3, #0]
 80117ea:	009b      	lsls	r3, r3, #2
 80117ec:	4413      	add	r3, r2
 80117ee:	881b      	ldrh	r3, [r3, #0]
 80117f0:	81fb      	strh	r3, [r7, #14]
 80117f2:	89fb      	ldrh	r3, [r7, #14]
 80117f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d01b      	beq.n	8011834 <USB_ActivateEndpoint+0x180>
 80117fc:	687a      	ldr	r2, [r7, #4]
 80117fe:	683b      	ldr	r3, [r7, #0]
 8011800:	781b      	ldrb	r3, [r3, #0]
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	4413      	add	r3, r2
 8011806:	881b      	ldrh	r3, [r3, #0]
 8011808:	b29b      	uxth	r3, r3
 801180a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011812:	81bb      	strh	r3, [r7, #12]
 8011814:	687a      	ldr	r2, [r7, #4]
 8011816:	683b      	ldr	r3, [r7, #0]
 8011818:	781b      	ldrb	r3, [r3, #0]
 801181a:	009b      	lsls	r3, r3, #2
 801181c:	441a      	add	r2, r3
 801181e:	89bb      	ldrh	r3, [r7, #12]
 8011820:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011824:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801182c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011830:	b29b      	uxth	r3, r3
 8011832:	8013      	strh	r3, [r2, #0]
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	78db      	ldrb	r3, [r3, #3]
 8011838:	2b01      	cmp	r3, #1
 801183a:	d020      	beq.n	801187e <USB_ActivateEndpoint+0x1ca>
 801183c:	687a      	ldr	r2, [r7, #4]
 801183e:	683b      	ldr	r3, [r7, #0]
 8011840:	781b      	ldrb	r3, [r3, #0]
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4413      	add	r3, r2
 8011846:	881b      	ldrh	r3, [r3, #0]
 8011848:	b29b      	uxth	r3, r3
 801184a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801184e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011852:	813b      	strh	r3, [r7, #8]
 8011854:	893b      	ldrh	r3, [r7, #8]
 8011856:	f083 0320 	eor.w	r3, r3, #32
 801185a:	813b      	strh	r3, [r7, #8]
 801185c:	687a      	ldr	r2, [r7, #4]
 801185e:	683b      	ldr	r3, [r7, #0]
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	009b      	lsls	r3, r3, #2
 8011864:	441a      	add	r2, r3
 8011866:	893b      	ldrh	r3, [r7, #8]
 8011868:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801186c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011878:	b29b      	uxth	r3, r3
 801187a:	8013      	strh	r3, [r2, #0]
 801187c:	e27f      	b.n	8011d7e <USB_ActivateEndpoint+0x6ca>
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	4413      	add	r3, r2
 8011888:	881b      	ldrh	r3, [r3, #0]
 801188a:	b29b      	uxth	r3, r3
 801188c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011890:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011894:	817b      	strh	r3, [r7, #10]
 8011896:	687a      	ldr	r2, [r7, #4]
 8011898:	683b      	ldr	r3, [r7, #0]
 801189a:	781b      	ldrb	r3, [r3, #0]
 801189c:	009b      	lsls	r3, r3, #2
 801189e:	441a      	add	r2, r3
 80118a0:	897b      	ldrh	r3, [r7, #10]
 80118a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80118a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80118aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80118ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	8013      	strh	r3, [r2, #0]
 80118b6:	e262      	b.n	8011d7e <USB_ActivateEndpoint+0x6ca>
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	461a      	mov	r2, r3
 80118c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c8:	4413      	add	r3, r2
 80118ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	00da      	lsls	r2, r3, #3
 80118d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d4:	4413      	add	r3, r2
 80118d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80118da:	62bb      	str	r3, [r7, #40]	; 0x28
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	88db      	ldrh	r3, [r3, #6]
 80118e0:	085b      	lsrs	r3, r3, #1
 80118e2:	b29b      	uxth	r3, r3
 80118e4:	005b      	lsls	r3, r3, #1
 80118e6:	b29a      	uxth	r2, r3
 80118e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118ea:	801a      	strh	r2, [r3, #0]
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	627b      	str	r3, [r7, #36]	; 0x24
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118f6:	b29b      	uxth	r3, r3
 80118f8:	461a      	mov	r2, r3
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	4413      	add	r3, r2
 80118fe:	627b      	str	r3, [r7, #36]	; 0x24
 8011900:	683b      	ldr	r3, [r7, #0]
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	00da      	lsls	r2, r3, #3
 8011906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011908:	4413      	add	r3, r2
 801190a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801190e:	623b      	str	r3, [r7, #32]
 8011910:	683b      	ldr	r3, [r7, #0]
 8011912:	691b      	ldr	r3, [r3, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d112      	bne.n	801193e <USB_ActivateEndpoint+0x28a>
 8011918:	6a3b      	ldr	r3, [r7, #32]
 801191a:	881b      	ldrh	r3, [r3, #0]
 801191c:	b29b      	uxth	r3, r3
 801191e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8011922:	b29a      	uxth	r2, r3
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	801a      	strh	r2, [r3, #0]
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	881b      	ldrh	r3, [r3, #0]
 801192c:	b29b      	uxth	r3, r3
 801192e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011936:	b29a      	uxth	r2, r3
 8011938:	6a3b      	ldr	r3, [r7, #32]
 801193a:	801a      	strh	r2, [r3, #0]
 801193c:	e02f      	b.n	801199e <USB_ActivateEndpoint+0x2ea>
 801193e:	683b      	ldr	r3, [r7, #0]
 8011940:	691b      	ldr	r3, [r3, #16]
 8011942:	2b3e      	cmp	r3, #62	; 0x3e
 8011944:	d813      	bhi.n	801196e <USB_ActivateEndpoint+0x2ba>
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	691b      	ldr	r3, [r3, #16]
 801194a:	085b      	lsrs	r3, r3, #1
 801194c:	663b      	str	r3, [r7, #96]	; 0x60
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	f003 0301 	and.w	r3, r3, #1
 8011956:	2b00      	cmp	r3, #0
 8011958:	d002      	beq.n	8011960 <USB_ActivateEndpoint+0x2ac>
 801195a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801195c:	3301      	adds	r3, #1
 801195e:	663b      	str	r3, [r7, #96]	; 0x60
 8011960:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011962:	b29b      	uxth	r3, r3
 8011964:	029b      	lsls	r3, r3, #10
 8011966:	b29a      	uxth	r2, r3
 8011968:	6a3b      	ldr	r3, [r7, #32]
 801196a:	801a      	strh	r2, [r3, #0]
 801196c:	e017      	b.n	801199e <USB_ActivateEndpoint+0x2ea>
 801196e:	683b      	ldr	r3, [r7, #0]
 8011970:	691b      	ldr	r3, [r3, #16]
 8011972:	095b      	lsrs	r3, r3, #5
 8011974:	663b      	str	r3, [r7, #96]	; 0x60
 8011976:	683b      	ldr	r3, [r7, #0]
 8011978:	691b      	ldr	r3, [r3, #16]
 801197a:	f003 031f 	and.w	r3, r3, #31
 801197e:	2b00      	cmp	r3, #0
 8011980:	d102      	bne.n	8011988 <USB_ActivateEndpoint+0x2d4>
 8011982:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011984:	3b01      	subs	r3, #1
 8011986:	663b      	str	r3, [r7, #96]	; 0x60
 8011988:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801198a:	b29b      	uxth	r3, r3
 801198c:	029b      	lsls	r3, r3, #10
 801198e:	b29b      	uxth	r3, r3
 8011990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011998:	b29a      	uxth	r2, r3
 801199a:	6a3b      	ldr	r3, [r7, #32]
 801199c:	801a      	strh	r2, [r3, #0]
 801199e:	687a      	ldr	r2, [r7, #4]
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	781b      	ldrb	r3, [r3, #0]
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	881b      	ldrh	r3, [r3, #0]
 80119aa:	83fb      	strh	r3, [r7, #30]
 80119ac:	8bfb      	ldrh	r3, [r7, #30]
 80119ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d01b      	beq.n	80119ee <USB_ActivateEndpoint+0x33a>
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	781b      	ldrb	r3, [r3, #0]
 80119bc:	009b      	lsls	r3, r3, #2
 80119be:	4413      	add	r3, r2
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	b29b      	uxth	r3, r3
 80119c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80119c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80119cc:	83bb      	strh	r3, [r7, #28]
 80119ce:	687a      	ldr	r2, [r7, #4]
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	781b      	ldrb	r3, [r3, #0]
 80119d4:	009b      	lsls	r3, r3, #2
 80119d6:	441a      	add	r2, r3
 80119d8:	8bbb      	ldrh	r3, [r7, #28]
 80119da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80119de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80119e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80119e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	8013      	strh	r3, [r2, #0]
 80119ee:	687a      	ldr	r2, [r7, #4]
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	781b      	ldrb	r3, [r3, #0]
 80119f4:	009b      	lsls	r3, r3, #2
 80119f6:	4413      	add	r3, r2
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	b29b      	uxth	r3, r3
 80119fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a04:	837b      	strh	r3, [r7, #26]
 8011a06:	8b7b      	ldrh	r3, [r7, #26]
 8011a08:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011a0c:	837b      	strh	r3, [r7, #26]
 8011a0e:	8b7b      	ldrh	r3, [r7, #26]
 8011a10:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011a14:	837b      	strh	r3, [r7, #26]
 8011a16:	687a      	ldr	r2, [r7, #4]
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	009b      	lsls	r3, r3, #2
 8011a1e:	441a      	add	r2, r3
 8011a20:	8b7b      	ldrh	r3, [r7, #26]
 8011a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a32:	b29b      	uxth	r3, r3
 8011a34:	8013      	strh	r3, [r2, #0]
 8011a36:	e1a2      	b.n	8011d7e <USB_ActivateEndpoint+0x6ca>
 8011a38:	687a      	ldr	r2, [r7, #4]
 8011a3a:	683b      	ldr	r3, [r7, #0]
 8011a3c:	781b      	ldrb	r3, [r3, #0]
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	4413      	add	r3, r2
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	b29b      	uxth	r3, r3
 8011a46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a4e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	683b      	ldr	r3, [r7, #0]
 8011a56:	781b      	ldrb	r3, [r3, #0]
 8011a58:	009b      	lsls	r3, r3, #2
 8011a5a:	441a      	add	r2, r3
 8011a5c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8011a60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011a64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011a68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8011a6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a70:	b29b      	uxth	r3, r3
 8011a72:	8013      	strh	r3, [r2, #0]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	461a      	mov	r2, r3
 8011a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a84:	4413      	add	r3, r2
 8011a86:	65bb      	str	r3, [r7, #88]	; 0x58
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	00da      	lsls	r2, r3, #3
 8011a8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a90:	4413      	add	r3, r2
 8011a92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011a96:	657b      	str	r3, [r7, #84]	; 0x54
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	891b      	ldrh	r3, [r3, #8]
 8011a9c:	085b      	lsrs	r3, r3, #1
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	005b      	lsls	r3, r3, #1
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011aa6:	801a      	strh	r2, [r3, #0]
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	653b      	str	r3, [r7, #80]	; 0x50
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011ab2:	b29b      	uxth	r3, r3
 8011ab4:	461a      	mov	r2, r3
 8011ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ab8:	4413      	add	r3, r2
 8011aba:	653b      	str	r3, [r7, #80]	; 0x50
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	781b      	ldrb	r3, [r3, #0]
 8011ac0:	00da      	lsls	r2, r3, #3
 8011ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ac4:	4413      	add	r3, r2
 8011ac6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	895b      	ldrh	r3, [r3, #10]
 8011ad0:	085b      	lsrs	r3, r3, #1
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	005b      	lsls	r3, r3, #1
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ada:	801a      	strh	r2, [r3, #0]
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	785b      	ldrb	r3, [r3, #1]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	f040 8091 	bne.w	8011c08 <USB_ActivateEndpoint+0x554>
 8011ae6:	687a      	ldr	r2, [r7, #4]
 8011ae8:	683b      	ldr	r3, [r7, #0]
 8011aea:	781b      	ldrb	r3, [r3, #0]
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4413      	add	r3, r2
 8011af0:	881b      	ldrh	r3, [r3, #0]
 8011af2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011af4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011afa:	2b00      	cmp	r3, #0
 8011afc:	d01b      	beq.n	8011b36 <USB_ActivateEndpoint+0x482>
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	881b      	ldrh	r3, [r3, #0]
 8011b0a:	b29b      	uxth	r3, r3
 8011b0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b14:	877b      	strh	r3, [r7, #58]	; 0x3a
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	683b      	ldr	r3, [r7, #0]
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	441a      	add	r2, r3
 8011b20:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b32:	b29b      	uxth	r3, r3
 8011b34:	8013      	strh	r3, [r2, #0]
 8011b36:	687a      	ldr	r2, [r7, #4]
 8011b38:	683b      	ldr	r3, [r7, #0]
 8011b3a:	781b      	ldrb	r3, [r3, #0]
 8011b3c:	009b      	lsls	r3, r3, #2
 8011b3e:	4413      	add	r3, r2
 8011b40:	881b      	ldrh	r3, [r3, #0]
 8011b42:	873b      	strh	r3, [r7, #56]	; 0x38
 8011b44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8011b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d01b      	beq.n	8011b86 <USB_ActivateEndpoint+0x4d2>
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	009b      	lsls	r3, r3, #2
 8011b56:	4413      	add	r3, r2
 8011b58:	881b      	ldrh	r3, [r3, #0]
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b64:	86fb      	strh	r3, [r7, #54]	; 0x36
 8011b66:	687a      	ldr	r2, [r7, #4]
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	009b      	lsls	r3, r3, #2
 8011b6e:	441a      	add	r2, r3
 8011b70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011b72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011b76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011b7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011b82:	b29b      	uxth	r3, r3
 8011b84:	8013      	strh	r3, [r2, #0]
 8011b86:	687a      	ldr	r2, [r7, #4]
 8011b88:	683b      	ldr	r3, [r7, #0]
 8011b8a:	781b      	ldrb	r3, [r3, #0]
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4413      	add	r3, r2
 8011b90:	881b      	ldrh	r3, [r3, #0]
 8011b92:	b29b      	uxth	r3, r3
 8011b94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b9c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011b9e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011ba0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011ba4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011ba6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011ba8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011bac:	86bb      	strh	r3, [r7, #52]	; 0x34
 8011bae:	687a      	ldr	r2, [r7, #4]
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	781b      	ldrb	r3, [r3, #0]
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	441a      	add	r2, r3
 8011bb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	8013      	strh	r3, [r2, #0]
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	683b      	ldr	r3, [r7, #0]
 8011bd2:	781b      	ldrb	r3, [r3, #0]
 8011bd4:	009b      	lsls	r3, r3, #2
 8011bd6:	4413      	add	r3, r2
 8011bd8:	881b      	ldrh	r3, [r3, #0]
 8011bda:	b29b      	uxth	r3, r3
 8011bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011be0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011be4:	867b      	strh	r3, [r7, #50]	; 0x32
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	009b      	lsls	r3, r3, #2
 8011bee:	441a      	add	r2, r3
 8011bf0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8011bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011bfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c02:	b29b      	uxth	r3, r3
 8011c04:	8013      	strh	r3, [r2, #0]
 8011c06:	e0ba      	b.n	8011d7e <USB_ActivateEndpoint+0x6ca>
 8011c08:	687a      	ldr	r2, [r7, #4]
 8011c0a:	683b      	ldr	r3, [r7, #0]
 8011c0c:	781b      	ldrb	r3, [r3, #0]
 8011c0e:	009b      	lsls	r3, r3, #2
 8011c10:	4413      	add	r3, r2
 8011c12:	881b      	ldrh	r3, [r3, #0]
 8011c14:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8011c18:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8011c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d01d      	beq.n	8011c60 <USB_ActivateEndpoint+0x5ac>
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	781b      	ldrb	r3, [r3, #0]
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	4413      	add	r3, r2
 8011c2e:	881b      	ldrh	r3, [r3, #0]
 8011c30:	b29b      	uxth	r3, r3
 8011c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c3a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	683b      	ldr	r3, [r7, #0]
 8011c42:	781b      	ldrb	r3, [r3, #0]
 8011c44:	009b      	lsls	r3, r3, #2
 8011c46:	441a      	add	r2, r3
 8011c48:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8011c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	8013      	strh	r3, [r2, #0]
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	009b      	lsls	r3, r3, #2
 8011c68:	4413      	add	r3, r2
 8011c6a:	881b      	ldrh	r3, [r3, #0]
 8011c6c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8011c70:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8011c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d01d      	beq.n	8011cb8 <USB_ActivateEndpoint+0x604>
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	4413      	add	r3, r2
 8011c86:	881b      	ldrh	r3, [r3, #0]
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8011c96:	687a      	ldr	r2, [r7, #4]
 8011c98:	683b      	ldr	r3, [r7, #0]
 8011c9a:	781b      	ldrb	r3, [r3, #0]
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	441a      	add	r2, r3
 8011ca0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8011ca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011ca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011cb4:	b29b      	uxth	r3, r3
 8011cb6:	8013      	strh	r3, [r2, #0]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	78db      	ldrb	r3, [r3, #3]
 8011cbc:	2b01      	cmp	r3, #1
 8011cbe:	d024      	beq.n	8011d0a <USB_ActivateEndpoint+0x656>
 8011cc0:	687a      	ldr	r2, [r7, #4]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	781b      	ldrb	r3, [r3, #0]
 8011cc6:	009b      	lsls	r3, r3, #2
 8011cc8:	4413      	add	r3, r2
 8011cca:	881b      	ldrh	r3, [r3, #0]
 8011ccc:	b29b      	uxth	r3, r3
 8011cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011cd2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011cd6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011cda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011cde:	f083 0320 	eor.w	r3, r3, #32
 8011ce2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	441a      	add	r2, r3
 8011cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011cf4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cf8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d04:	b29b      	uxth	r3, r3
 8011d06:	8013      	strh	r3, [r2, #0]
 8011d08:	e01d      	b.n	8011d46 <USB_ActivateEndpoint+0x692>
 8011d0a:	687a      	ldr	r2, [r7, #4]
 8011d0c:	683b      	ldr	r3, [r7, #0]
 8011d0e:	781b      	ldrb	r3, [r3, #0]
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	b29b      	uxth	r3, r3
 8011d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d20:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	683b      	ldr	r3, [r7, #0]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	009b      	lsls	r3, r3, #2
 8011d2c:	441a      	add	r2, r3
 8011d2e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d42:	b29b      	uxth	r3, r3
 8011d44:	8013      	strh	r3, [r2, #0]
 8011d46:	687a      	ldr	r2, [r7, #4]
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	781b      	ldrb	r3, [r3, #0]
 8011d4c:	009b      	lsls	r3, r3, #2
 8011d4e:	4413      	add	r3, r2
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	b29b      	uxth	r3, r3
 8011d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8011d5e:	687a      	ldr	r2, [r7, #4]
 8011d60:	683b      	ldr	r3, [r7, #0]
 8011d62:	781b      	ldrb	r3, [r3, #0]
 8011d64:	009b      	lsls	r3, r3, #2
 8011d66:	441a      	add	r2, r3
 8011d68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	8013      	strh	r3, [r2, #0]
 8011d7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011d82:	4618      	mov	r0, r3
 8011d84:	376c      	adds	r7, #108	; 0x6c
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr
 8011d8e:	bf00      	nop

08011d90 <USB_DeactivateEndpoint>:
 8011d90:	b480      	push	{r7}
 8011d92:	b08d      	sub	sp, #52	; 0x34
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	7b1b      	ldrb	r3, [r3, #12]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f040 808e 	bne.w	8011ec0 <USB_DeactivateEndpoint+0x130>
 8011da4:	683b      	ldr	r3, [r7, #0]
 8011da6:	785b      	ldrb	r3, [r3, #1]
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d044      	beq.n	8011e36 <USB_DeactivateEndpoint+0xa6>
 8011dac:	687a      	ldr	r2, [r7, #4]
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	009b      	lsls	r3, r3, #2
 8011db4:	4413      	add	r3, r2
 8011db6:	881b      	ldrh	r3, [r3, #0]
 8011db8:	81bb      	strh	r3, [r7, #12]
 8011dba:	89bb      	ldrh	r3, [r7, #12]
 8011dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d01b      	beq.n	8011dfc <USB_DeactivateEndpoint+0x6c>
 8011dc4:	687a      	ldr	r2, [r7, #4]
 8011dc6:	683b      	ldr	r3, [r7, #0]
 8011dc8:	781b      	ldrb	r3, [r3, #0]
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	4413      	add	r3, r2
 8011dce:	881b      	ldrh	r3, [r3, #0]
 8011dd0:	b29b      	uxth	r3, r3
 8011dd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011dda:	817b      	strh	r3, [r7, #10]
 8011ddc:	687a      	ldr	r2, [r7, #4]
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	781b      	ldrb	r3, [r3, #0]
 8011de2:	009b      	lsls	r3, r3, #2
 8011de4:	441a      	add	r2, r3
 8011de6:	897b      	ldrh	r3, [r7, #10]
 8011de8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011dec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011df0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011df4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011df8:	b29b      	uxth	r3, r3
 8011dfa:	8013      	strh	r3, [r2, #0]
 8011dfc:	687a      	ldr	r2, [r7, #4]
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	781b      	ldrb	r3, [r3, #0]
 8011e02:	009b      	lsls	r3, r3, #2
 8011e04:	4413      	add	r3, r2
 8011e06:	881b      	ldrh	r3, [r3, #0]
 8011e08:	b29b      	uxth	r3, r3
 8011e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011e12:	813b      	strh	r3, [r7, #8]
 8011e14:	687a      	ldr	r2, [r7, #4]
 8011e16:	683b      	ldr	r3, [r7, #0]
 8011e18:	781b      	ldrb	r3, [r3, #0]
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	441a      	add	r2, r3
 8011e1e:	893b      	ldrh	r3, [r7, #8]
 8011e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e30:	b29b      	uxth	r3, r3
 8011e32:	8013      	strh	r3, [r2, #0]
 8011e34:	e192      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
 8011e36:	687a      	ldr	r2, [r7, #4]
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	781b      	ldrb	r3, [r3, #0]
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	4413      	add	r3, r2
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	827b      	strh	r3, [r7, #18]
 8011e44:	8a7b      	ldrh	r3, [r7, #18]
 8011e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d01b      	beq.n	8011e86 <USB_DeactivateEndpoint+0xf6>
 8011e4e:	687a      	ldr	r2, [r7, #4]
 8011e50:	683b      	ldr	r3, [r7, #0]
 8011e52:	781b      	ldrb	r3, [r3, #0]
 8011e54:	009b      	lsls	r3, r3, #2
 8011e56:	4413      	add	r3, r2
 8011e58:	881b      	ldrh	r3, [r3, #0]
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e64:	823b      	strh	r3, [r7, #16]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	683b      	ldr	r3, [r7, #0]
 8011e6a:	781b      	ldrb	r3, [r3, #0]
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	441a      	add	r2, r3
 8011e70:	8a3b      	ldrh	r3, [r7, #16]
 8011e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011e7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e82:	b29b      	uxth	r3, r3
 8011e84:	8013      	strh	r3, [r2, #0]
 8011e86:	687a      	ldr	r2, [r7, #4]
 8011e88:	683b      	ldr	r3, [r7, #0]
 8011e8a:	781b      	ldrb	r3, [r3, #0]
 8011e8c:	009b      	lsls	r3, r3, #2
 8011e8e:	4413      	add	r3, r2
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011e98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011e9c:	81fb      	strh	r3, [r7, #14]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	441a      	add	r2, r3
 8011ea8:	89fb      	ldrh	r3, [r7, #14]
 8011eaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011eae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011eb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011eb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011eba:	b29b      	uxth	r3, r3
 8011ebc:	8013      	strh	r3, [r2, #0]
 8011ebe:	e14d      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
 8011ec0:	683b      	ldr	r3, [r7, #0]
 8011ec2:	785b      	ldrb	r3, [r3, #1]
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f040 80a5 	bne.w	8012014 <USB_DeactivateEndpoint+0x284>
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	683b      	ldr	r3, [r7, #0]
 8011ece:	781b      	ldrb	r3, [r3, #0]
 8011ed0:	009b      	lsls	r3, r3, #2
 8011ed2:	4413      	add	r3, r2
 8011ed4:	881b      	ldrh	r3, [r3, #0]
 8011ed6:	843b      	strh	r3, [r7, #32]
 8011ed8:	8c3b      	ldrh	r3, [r7, #32]
 8011eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d01b      	beq.n	8011f1a <USB_DeactivateEndpoint+0x18a>
 8011ee2:	687a      	ldr	r2, [r7, #4]
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	781b      	ldrb	r3, [r3, #0]
 8011ee8:	009b      	lsls	r3, r3, #2
 8011eea:	4413      	add	r3, r2
 8011eec:	881b      	ldrh	r3, [r3, #0]
 8011eee:	b29b      	uxth	r3, r3
 8011ef0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ef4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ef8:	83fb      	strh	r3, [r7, #30]
 8011efa:	687a      	ldr	r2, [r7, #4]
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	781b      	ldrb	r3, [r3, #0]
 8011f00:	009b      	lsls	r3, r3, #2
 8011f02:	441a      	add	r2, r3
 8011f04:	8bfb      	ldrh	r3, [r7, #30]
 8011f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f16:	b29b      	uxth	r3, r3
 8011f18:	8013      	strh	r3, [r2, #0]
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	4413      	add	r3, r2
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	83bb      	strh	r3, [r7, #28]
 8011f28:	8bbb      	ldrh	r3, [r7, #28]
 8011f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d01b      	beq.n	8011f6a <USB_DeactivateEndpoint+0x1da>
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	881b      	ldrh	r3, [r3, #0]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f48:	837b      	strh	r3, [r7, #26]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	683b      	ldr	r3, [r7, #0]
 8011f4e:	781b      	ldrb	r3, [r3, #0]
 8011f50:	009b      	lsls	r3, r3, #2
 8011f52:	441a      	add	r2, r3
 8011f54:	8b7b      	ldrh	r3, [r7, #26]
 8011f56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	8013      	strh	r3, [r2, #0]
 8011f6a:	687a      	ldr	r2, [r7, #4]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	781b      	ldrb	r3, [r3, #0]
 8011f70:	009b      	lsls	r3, r3, #2
 8011f72:	4413      	add	r3, r2
 8011f74:	881b      	ldrh	r3, [r3, #0]
 8011f76:	b29b      	uxth	r3, r3
 8011f78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011f7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011f80:	833b      	strh	r3, [r7, #24]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	683b      	ldr	r3, [r7, #0]
 8011f86:	781b      	ldrb	r3, [r3, #0]
 8011f88:	009b      	lsls	r3, r3, #2
 8011f8a:	441a      	add	r2, r3
 8011f8c:	8b3b      	ldrh	r3, [r7, #24]
 8011f8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011f92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011f9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011f9e:	b29b      	uxth	r3, r3
 8011fa0:	8013      	strh	r3, [r2, #0]
 8011fa2:	687a      	ldr	r2, [r7, #4]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	781b      	ldrb	r3, [r3, #0]
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	881b      	ldrh	r3, [r3, #0]
 8011fae:	b29b      	uxth	r3, r3
 8011fb0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011fb8:	82fb      	strh	r3, [r7, #22]
 8011fba:	687a      	ldr	r2, [r7, #4]
 8011fbc:	683b      	ldr	r3, [r7, #0]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	009b      	lsls	r3, r3, #2
 8011fc2:	441a      	add	r2, r3
 8011fc4:	8afb      	ldrh	r3, [r7, #22]
 8011fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011fce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fd6:	b29b      	uxth	r3, r3
 8011fd8:	8013      	strh	r3, [r2, #0]
 8011fda:	687a      	ldr	r2, [r7, #4]
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	781b      	ldrb	r3, [r3, #0]
 8011fe0:	009b      	lsls	r3, r3, #2
 8011fe2:	4413      	add	r3, r2
 8011fe4:	881b      	ldrh	r3, [r3, #0]
 8011fe6:	b29b      	uxth	r3, r3
 8011fe8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011fec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ff0:	82bb      	strh	r3, [r7, #20]
 8011ff2:	687a      	ldr	r2, [r7, #4]
 8011ff4:	683b      	ldr	r3, [r7, #0]
 8011ff6:	781b      	ldrb	r3, [r3, #0]
 8011ff8:	009b      	lsls	r3, r3, #2
 8011ffa:	441a      	add	r2, r3
 8011ffc:	8abb      	ldrh	r3, [r7, #20]
 8011ffe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012002:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012006:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801200e:	b29b      	uxth	r3, r3
 8012010:	8013      	strh	r3, [r2, #0]
 8012012:	e0a3      	b.n	801215c <USB_DeactivateEndpoint+0x3cc>
 8012014:	687a      	ldr	r2, [r7, #4]
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	781b      	ldrb	r3, [r3, #0]
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	881b      	ldrh	r3, [r3, #0]
 8012020:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012028:	2b00      	cmp	r3, #0
 801202a:	d01b      	beq.n	8012064 <USB_DeactivateEndpoint+0x2d4>
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	683b      	ldr	r3, [r7, #0]
 8012030:	781b      	ldrb	r3, [r3, #0]
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	4413      	add	r3, r2
 8012036:	881b      	ldrh	r3, [r3, #0]
 8012038:	b29b      	uxth	r3, r3
 801203a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801203e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012042:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012044:	687a      	ldr	r2, [r7, #4]
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	009b      	lsls	r3, r3, #2
 801204c:	441a      	add	r2, r3
 801204e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012050:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012054:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012058:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801205c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012060:	b29b      	uxth	r3, r3
 8012062:	8013      	strh	r3, [r2, #0]
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	683b      	ldr	r3, [r7, #0]
 8012068:	781b      	ldrb	r3, [r3, #0]
 801206a:	009b      	lsls	r3, r3, #2
 801206c:	4413      	add	r3, r2
 801206e:	881b      	ldrh	r3, [r3, #0]
 8012070:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012072:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012078:	2b00      	cmp	r3, #0
 801207a:	d01b      	beq.n	80120b4 <USB_DeactivateEndpoint+0x324>
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	683b      	ldr	r3, [r7, #0]
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	4413      	add	r3, r2
 8012086:	881b      	ldrh	r3, [r3, #0]
 8012088:	b29b      	uxth	r3, r3
 801208a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012092:	853b      	strh	r3, [r7, #40]	; 0x28
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	441a      	add	r2, r3
 801209e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80120a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80120ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80120b0:	b29b      	uxth	r3, r3
 80120b2:	8013      	strh	r3, [r2, #0]
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	683b      	ldr	r3, [r7, #0]
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	009b      	lsls	r3, r3, #2
 80120bc:	4413      	add	r3, r2
 80120be:	881b      	ldrh	r3, [r3, #0]
 80120c0:	b29b      	uxth	r3, r3
 80120c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80120ca:	84fb      	strh	r3, [r7, #38]	; 0x26
 80120cc:	687a      	ldr	r2, [r7, #4]
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	781b      	ldrb	r3, [r3, #0]
 80120d2:	009b      	lsls	r3, r3, #2
 80120d4:	441a      	add	r2, r3
 80120d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80120d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80120dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80120e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80120e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80120e8:	b29b      	uxth	r3, r3
 80120ea:	8013      	strh	r3, [r2, #0]
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	683b      	ldr	r3, [r7, #0]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	4413      	add	r3, r2
 80120f6:	881b      	ldrh	r3, [r3, #0]
 80120f8:	b29b      	uxth	r3, r3
 80120fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80120fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012102:	84bb      	strh	r3, [r7, #36]	; 0x24
 8012104:	687a      	ldr	r2, [r7, #4]
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	781b      	ldrb	r3, [r3, #0]
 801210a:	009b      	lsls	r3, r3, #2
 801210c:	441a      	add	r2, r3
 801210e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012118:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801211c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012120:	b29b      	uxth	r3, r3
 8012122:	8013      	strh	r3, [r2, #0]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	4413      	add	r3, r2
 801212e:	881b      	ldrh	r3, [r3, #0]
 8012130:	b29b      	uxth	r3, r3
 8012132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8012136:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801213a:	847b      	strh	r3, [r7, #34]	; 0x22
 801213c:	687a      	ldr	r2, [r7, #4]
 801213e:	683b      	ldr	r3, [r7, #0]
 8012140:	781b      	ldrb	r3, [r3, #0]
 8012142:	009b      	lsls	r3, r3, #2
 8012144:	441a      	add	r2, r3
 8012146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012148:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801214c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012150:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012158:	b29b      	uxth	r3, r3
 801215a:	8013      	strh	r3, [r2, #0]
 801215c:	2300      	movs	r3, #0
 801215e:	4618      	mov	r0, r3
 8012160:	3734      	adds	r7, #52	; 0x34
 8012162:	46bd      	mov	sp, r7
 8012164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012168:	4770      	bx	lr

0801216a <USB_EPStartXfer>:
 801216a:	b580      	push	{r7, lr}
 801216c:	b0cc      	sub	sp, #304	; 0x130
 801216e:	af00      	add	r7, sp, #0
 8012170:	1d3b      	adds	r3, r7, #4
 8012172:	6018      	str	r0, [r3, #0]
 8012174:	463b      	mov	r3, r7
 8012176:	6019      	str	r1, [r3, #0]
 8012178:	463b      	mov	r3, r7
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	785b      	ldrb	r3, [r3, #1]
 801217e:	2b01      	cmp	r3, #1
 8012180:	f040 872e 	bne.w	8012fe0 <USB_EPStartXfer+0xe76>
 8012184:	463b      	mov	r3, r7
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	699a      	ldr	r2, [r3, #24]
 801218a:	463b      	mov	r3, r7
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	691b      	ldr	r3, [r3, #16]
 8012190:	429a      	cmp	r2, r3
 8012192:	d905      	bls.n	80121a0 <USB_EPStartXfer+0x36>
 8012194:	463b      	mov	r3, r7
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	691b      	ldr	r3, [r3, #16]
 801219a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801219e:	e004      	b.n	80121aa <USB_EPStartXfer+0x40>
 80121a0:	463b      	mov	r3, r7
 80121a2:	681b      	ldr	r3, [r3, #0]
 80121a4:	699b      	ldr	r3, [r3, #24]
 80121a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80121aa:	463b      	mov	r3, r7
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	7b1b      	ldrb	r3, [r3, #12]
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d134      	bne.n	801221e <USB_EPStartXfer+0xb4>
 80121b4:	463b      	mov	r3, r7
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	6959      	ldr	r1, [r3, #20]
 80121ba:	463b      	mov	r3, r7
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	88da      	ldrh	r2, [r3, #6]
 80121c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80121c4:	b29b      	uxth	r3, r3
 80121c6:	1d38      	adds	r0, r7, #4
 80121c8:	6800      	ldr	r0, [r0, #0]
 80121ca:	f001 fc20 	bl	8013a0e <USB_WritePMA>
 80121ce:	f107 0310 	add.w	r3, r7, #16
 80121d2:	1d3a      	adds	r2, r7, #4
 80121d4:	6812      	ldr	r2, [r2, #0]
 80121d6:	601a      	str	r2, [r3, #0]
 80121d8:	1d3b      	adds	r3, r7, #4
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	4619      	mov	r1, r3
 80121e4:	f107 0310 	add.w	r3, r7, #16
 80121e8:	f107 0210 	add.w	r2, r7, #16
 80121ec:	6812      	ldr	r2, [r2, #0]
 80121ee:	440a      	add	r2, r1
 80121f0:	601a      	str	r2, [r3, #0]
 80121f2:	463b      	mov	r3, r7
 80121f4:	681b      	ldr	r3, [r3, #0]
 80121f6:	781b      	ldrb	r3, [r3, #0]
 80121f8:	00da      	lsls	r2, r3, #3
 80121fa:	f107 0310 	add.w	r3, r7, #16
 80121fe:	681b      	ldr	r3, [r3, #0]
 8012200:	4413      	add	r3, r2
 8012202:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8012206:	f107 030c 	add.w	r3, r7, #12
 801220a:	601a      	str	r2, [r3, #0]
 801220c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012210:	b29a      	uxth	r2, r3
 8012212:	f107 030c 	add.w	r3, r7, #12
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	801a      	strh	r2, [r3, #0]
 801221a:	f000 beac 	b.w	8012f76 <USB_EPStartXfer+0xe0c>
 801221e:	463b      	mov	r3, r7
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	78db      	ldrb	r3, [r3, #3]
 8012224:	2b02      	cmp	r3, #2
 8012226:	f040 838c 	bne.w	8012942 <USB_EPStartXfer+0x7d8>
 801222a:	463b      	mov	r3, r7
 801222c:	681b      	ldr	r3, [r3, #0]
 801222e:	6a1a      	ldr	r2, [r3, #32]
 8012230:	463b      	mov	r3, r7
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	691b      	ldr	r3, [r3, #16]
 8012236:	429a      	cmp	r2, r3
 8012238:	f240 8330 	bls.w	801289c <USB_EPStartXfer+0x732>
 801223c:	1d3b      	adds	r3, r7, #4
 801223e:	681a      	ldr	r2, [r3, #0]
 8012240:	463b      	mov	r3, r7
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	009b      	lsls	r3, r3, #2
 8012248:	4413      	add	r3, r2
 801224a:	881b      	ldrh	r3, [r3, #0]
 801224c:	b29b      	uxth	r3, r3
 801224e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012256:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 801225a:	1d3b      	adds	r3, r7, #4
 801225c:	681a      	ldr	r2, [r3, #0]
 801225e:	463b      	mov	r3, r7
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	781b      	ldrb	r3, [r3, #0]
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	441a      	add	r2, r3
 8012268:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801226c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012270:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012274:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8012278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801227c:	b29b      	uxth	r3, r3
 801227e:	8013      	strh	r3, [r2, #0]
 8012280:	463b      	mov	r3, r7
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	6a1a      	ldr	r2, [r3, #32]
 8012286:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801228a:	1ad2      	subs	r2, r2, r3
 801228c:	463b      	mov	r3, r7
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	621a      	str	r2, [r3, #32]
 8012292:	1d3b      	adds	r3, r7, #4
 8012294:	681a      	ldr	r2, [r3, #0]
 8012296:	463b      	mov	r3, r7
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	781b      	ldrb	r3, [r3, #0]
 801229c:	009b      	lsls	r3, r3, #2
 801229e:	4413      	add	r3, r2
 80122a0:	881b      	ldrh	r3, [r3, #0]
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	f000 819e 	beq.w	80125ea <USB_EPStartXfer+0x480>
 80122ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80122b2:	1d3a      	adds	r2, r7, #4
 80122b4:	6812      	ldr	r2, [r2, #0]
 80122b6:	601a      	str	r2, [r3, #0]
 80122b8:	463b      	mov	r3, r7
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	785b      	ldrb	r3, [r3, #1]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d17a      	bne.n	80123b8 <USB_EPStartXfer+0x24e>
 80122c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122c6:	1d3a      	adds	r2, r7, #4
 80122c8:	6812      	ldr	r2, [r2, #0]
 80122ca:	601a      	str	r2, [r3, #0]
 80122cc:	1d3b      	adds	r3, r7, #4
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80122d4:	b29b      	uxth	r3, r3
 80122d6:	4619      	mov	r1, r3
 80122d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122dc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80122e0:	6812      	ldr	r2, [r2, #0]
 80122e2:	440a      	add	r2, r1
 80122e4:	601a      	str	r2, [r3, #0]
 80122e6:	463b      	mov	r3, r7
 80122e8:	681b      	ldr	r3, [r3, #0]
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	00da      	lsls	r2, r3, #3
 80122ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	4413      	add	r3, r2
 80122f6:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80122fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80122fe:	601a      	str	r2, [r3, #0]
 8012300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012304:	2b00      	cmp	r3, #0
 8012306:	d11a      	bne.n	801233e <USB_EPStartXfer+0x1d4>
 8012308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	881b      	ldrh	r3, [r3, #0]
 8012310:	b29b      	uxth	r3, r3
 8012312:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012316:	b29a      	uxth	r2, r3
 8012318:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	801a      	strh	r2, [r3, #0]
 8012320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	881b      	ldrh	r3, [r3, #0]
 8012328:	b29b      	uxth	r3, r3
 801232a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801232e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012332:	b29a      	uxth	r2, r3
 8012334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	801a      	strh	r2, [r3, #0]
 801233c:	e062      	b.n	8012404 <USB_EPStartXfer+0x29a>
 801233e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012342:	2b3e      	cmp	r3, #62	; 0x3e
 8012344:	d819      	bhi.n	801237a <USB_EPStartXfer+0x210>
 8012346:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801234a:	085b      	lsrs	r3, r3, #1
 801234c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012350:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012354:	f003 0301 	and.w	r3, r3, #1
 8012358:	2b00      	cmp	r3, #0
 801235a:	d004      	beq.n	8012366 <USB_EPStartXfer+0x1fc>
 801235c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012360:	3301      	adds	r3, #1
 8012362:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012366:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801236a:	b29b      	uxth	r3, r3
 801236c:	029b      	lsls	r3, r3, #10
 801236e:	b29a      	uxth	r2, r3
 8012370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	801a      	strh	r2, [r3, #0]
 8012378:	e044      	b.n	8012404 <USB_EPStartXfer+0x29a>
 801237a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801237e:	095b      	lsrs	r3, r3, #5
 8012380:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8012384:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012388:	f003 031f 	and.w	r3, r3, #31
 801238c:	2b00      	cmp	r3, #0
 801238e:	d104      	bne.n	801239a <USB_EPStartXfer+0x230>
 8012390:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8012394:	3b01      	subs	r3, #1
 8012396:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801239a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801239e:	b29b      	uxth	r3, r3
 80123a0:	029b      	lsls	r3, r3, #10
 80123a2:	b29b      	uxth	r3, r3
 80123a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80123a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80123ac:	b29a      	uxth	r2, r3
 80123ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	801a      	strh	r2, [r3, #0]
 80123b6:	e025      	b.n	8012404 <USB_EPStartXfer+0x29a>
 80123b8:	463b      	mov	r3, r7
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	785b      	ldrb	r3, [r3, #1]
 80123be:	2b01      	cmp	r3, #1
 80123c0:	d120      	bne.n	8012404 <USB_EPStartXfer+0x29a>
 80123c2:	1d3b      	adds	r3, r7, #4
 80123c4:	681b      	ldr	r3, [r3, #0]
 80123c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80123ca:	b29b      	uxth	r3, r3
 80123cc:	4619      	mov	r1, r3
 80123ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80123d2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80123d6:	6812      	ldr	r2, [r2, #0]
 80123d8:	440a      	add	r2, r1
 80123da:	601a      	str	r2, [r3, #0]
 80123dc:	463b      	mov	r3, r7
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	781b      	ldrb	r3, [r3, #0]
 80123e2:	00da      	lsls	r2, r3, #3
 80123e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	4413      	add	r3, r2
 80123ec:	f203 4206 	addw	r2, r3, #1030	; 0x406
 80123f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80123f4:	601a      	str	r2, [r3, #0]
 80123f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80123fa:	b29a      	uxth	r2, r3
 80123fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	801a      	strh	r2, [r3, #0]
 8012404:	463b      	mov	r3, r7
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	895b      	ldrh	r3, [r3, #10]
 801240a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 801240e:	463b      	mov	r3, r7
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	6959      	ldr	r1, [r3, #20]
 8012414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012418:	b29b      	uxth	r3, r3
 801241a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 801241e:	1d38      	adds	r0, r7, #4
 8012420:	6800      	ldr	r0, [r0, #0]
 8012422:	f001 faf4 	bl	8013a0e <USB_WritePMA>
 8012426:	463b      	mov	r3, r7
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	695a      	ldr	r2, [r3, #20]
 801242c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012430:	441a      	add	r2, r3
 8012432:	463b      	mov	r3, r7
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	615a      	str	r2, [r3, #20]
 8012438:	463b      	mov	r3, r7
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	6a1a      	ldr	r2, [r3, #32]
 801243e:	463b      	mov	r3, r7
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	691b      	ldr	r3, [r3, #16]
 8012444:	429a      	cmp	r2, r3
 8012446:	d909      	bls.n	801245c <USB_EPStartXfer+0x2f2>
 8012448:	463b      	mov	r3, r7
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	6a1a      	ldr	r2, [r3, #32]
 801244e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012452:	1ad2      	subs	r2, r2, r3
 8012454:	463b      	mov	r3, r7
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	621a      	str	r2, [r3, #32]
 801245a:	e008      	b.n	801246e <USB_EPStartXfer+0x304>
 801245c:	463b      	mov	r3, r7
 801245e:	681b      	ldr	r3, [r3, #0]
 8012460:	6a1b      	ldr	r3, [r3, #32]
 8012462:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012466:	463b      	mov	r3, r7
 8012468:	681b      	ldr	r3, [r3, #0]
 801246a:	2200      	movs	r2, #0
 801246c:	621a      	str	r2, [r3, #32]
 801246e:	463b      	mov	r3, r7
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	785b      	ldrb	r3, [r3, #1]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d17a      	bne.n	801256e <USB_EPStartXfer+0x404>
 8012478:	f107 0318 	add.w	r3, r7, #24
 801247c:	1d3a      	adds	r2, r7, #4
 801247e:	6812      	ldr	r2, [r2, #0]
 8012480:	601a      	str	r2, [r3, #0]
 8012482:	1d3b      	adds	r3, r7, #4
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801248a:	b29b      	uxth	r3, r3
 801248c:	4619      	mov	r1, r3
 801248e:	f107 0318 	add.w	r3, r7, #24
 8012492:	f107 0218 	add.w	r2, r7, #24
 8012496:	6812      	ldr	r2, [r2, #0]
 8012498:	440a      	add	r2, r1
 801249a:	601a      	str	r2, [r3, #0]
 801249c:	463b      	mov	r3, r7
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	00da      	lsls	r2, r3, #3
 80124a4:	f107 0318 	add.w	r3, r7, #24
 80124a8:	681b      	ldr	r3, [r3, #0]
 80124aa:	4413      	add	r3, r2
 80124ac:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80124b0:	f107 0314 	add.w	r3, r7, #20
 80124b4:	601a      	str	r2, [r3, #0]
 80124b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d11a      	bne.n	80124f4 <USB_EPStartXfer+0x38a>
 80124be:	f107 0314 	add.w	r3, r7, #20
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	881b      	ldrh	r3, [r3, #0]
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80124cc:	b29a      	uxth	r2, r3
 80124ce:	f107 0314 	add.w	r3, r7, #20
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	801a      	strh	r2, [r3, #0]
 80124d6:	f107 0314 	add.w	r3, r7, #20
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80124e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80124e8:	b29a      	uxth	r2, r3
 80124ea:	f107 0314 	add.w	r3, r7, #20
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	801a      	strh	r2, [r3, #0]
 80124f2:	e067      	b.n	80125c4 <USB_EPStartXfer+0x45a>
 80124f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80124f8:	2b3e      	cmp	r3, #62	; 0x3e
 80124fa:	d819      	bhi.n	8012530 <USB_EPStartXfer+0x3c6>
 80124fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012500:	085b      	lsrs	r3, r3, #1
 8012502:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8012506:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801250a:	f003 0301 	and.w	r3, r3, #1
 801250e:	2b00      	cmp	r3, #0
 8012510:	d004      	beq.n	801251c <USB_EPStartXfer+0x3b2>
 8012512:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012516:	3301      	adds	r3, #1
 8012518:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801251c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012520:	b29b      	uxth	r3, r3
 8012522:	029b      	lsls	r3, r3, #10
 8012524:	b29a      	uxth	r2, r3
 8012526:	f107 0314 	add.w	r3, r7, #20
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	801a      	strh	r2, [r3, #0]
 801252e:	e049      	b.n	80125c4 <USB_EPStartXfer+0x45a>
 8012530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012534:	095b      	lsrs	r3, r3, #5
 8012536:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801253a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801253e:	f003 031f 	and.w	r3, r3, #31
 8012542:	2b00      	cmp	r3, #0
 8012544:	d104      	bne.n	8012550 <USB_EPStartXfer+0x3e6>
 8012546:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801254a:	3b01      	subs	r3, #1
 801254c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8012550:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8012554:	b29b      	uxth	r3, r3
 8012556:	029b      	lsls	r3, r3, #10
 8012558:	b29b      	uxth	r3, r3
 801255a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801255e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012562:	b29a      	uxth	r2, r3
 8012564:	f107 0314 	add.w	r3, r7, #20
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	801a      	strh	r2, [r3, #0]
 801256c:	e02a      	b.n	80125c4 <USB_EPStartXfer+0x45a>
 801256e:	463b      	mov	r3, r7
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	785b      	ldrb	r3, [r3, #1]
 8012574:	2b01      	cmp	r3, #1
 8012576:	d125      	bne.n	80125c4 <USB_EPStartXfer+0x45a>
 8012578:	f107 0320 	add.w	r3, r7, #32
 801257c:	1d3a      	adds	r2, r7, #4
 801257e:	6812      	ldr	r2, [r2, #0]
 8012580:	601a      	str	r2, [r3, #0]
 8012582:	1d3b      	adds	r3, r7, #4
 8012584:	681b      	ldr	r3, [r3, #0]
 8012586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801258a:	b29b      	uxth	r3, r3
 801258c:	4619      	mov	r1, r3
 801258e:	f107 0320 	add.w	r3, r7, #32
 8012592:	f107 0220 	add.w	r2, r7, #32
 8012596:	6812      	ldr	r2, [r2, #0]
 8012598:	440a      	add	r2, r1
 801259a:	601a      	str	r2, [r3, #0]
 801259c:	463b      	mov	r3, r7
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	781b      	ldrb	r3, [r3, #0]
 80125a2:	00da      	lsls	r2, r3, #3
 80125a4:	f107 0320 	add.w	r3, r7, #32
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4413      	add	r3, r2
 80125ac:	f203 4202 	addw	r2, r3, #1026	; 0x402
 80125b0:	f107 031c 	add.w	r3, r7, #28
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80125ba:	b29a      	uxth	r2, r3
 80125bc:	f107 031c 	add.w	r3, r7, #28
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	801a      	strh	r2, [r3, #0]
 80125c4:	463b      	mov	r3, r7
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	891b      	ldrh	r3, [r3, #8]
 80125ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 80125ce:	463b      	mov	r3, r7
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	6959      	ldr	r1, [r3, #20]
 80125d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80125d8:	b29b      	uxth	r3, r3
 80125da:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80125de:	1d38      	adds	r0, r7, #4
 80125e0:	6800      	ldr	r0, [r0, #0]
 80125e2:	f001 fa14 	bl	8013a0e <USB_WritePMA>
 80125e6:	f000 bcc6 	b.w	8012f76 <USB_EPStartXfer+0xe0c>
 80125ea:	463b      	mov	r3, r7
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	785b      	ldrb	r3, [r3, #1]
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d164      	bne.n	80126be <USB_EPStartXfer+0x554>
 80125f4:	1d3b      	adds	r3, r7, #4
 80125f6:	681b      	ldr	r3, [r3, #0]
 80125f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80125fa:	1d3b      	adds	r3, r7, #4
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012602:	b29b      	uxth	r3, r3
 8012604:	461a      	mov	r2, r3
 8012606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012608:	4413      	add	r3, r2
 801260a:	64bb      	str	r3, [r7, #72]	; 0x48
 801260c:	463b      	mov	r3, r7
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	00da      	lsls	r2, r3, #3
 8012614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012616:	4413      	add	r3, r2
 8012618:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801261c:	647b      	str	r3, [r7, #68]	; 0x44
 801261e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012622:	2b00      	cmp	r3, #0
 8012624:	d112      	bne.n	801264c <USB_EPStartXfer+0x4e2>
 8012626:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012628:	881b      	ldrh	r3, [r3, #0]
 801262a:	b29b      	uxth	r3, r3
 801262c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012630:	b29a      	uxth	r2, r3
 8012632:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012634:	801a      	strh	r2, [r3, #0]
 8012636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012638:	881b      	ldrh	r3, [r3, #0]
 801263a:	b29b      	uxth	r3, r3
 801263c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012644:	b29a      	uxth	r2, r3
 8012646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012648:	801a      	strh	r2, [r3, #0]
 801264a:	e057      	b.n	80126fc <USB_EPStartXfer+0x592>
 801264c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012650:	2b3e      	cmp	r3, #62	; 0x3e
 8012652:	d817      	bhi.n	8012684 <USB_EPStartXfer+0x51a>
 8012654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012658:	085b      	lsrs	r3, r3, #1
 801265a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801265e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012662:	f003 0301 	and.w	r3, r3, #1
 8012666:	2b00      	cmp	r3, #0
 8012668:	d004      	beq.n	8012674 <USB_EPStartXfer+0x50a>
 801266a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801266e:	3301      	adds	r3, #1
 8012670:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8012674:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8012678:	b29b      	uxth	r3, r3
 801267a:	029b      	lsls	r3, r3, #10
 801267c:	b29a      	uxth	r2, r3
 801267e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012680:	801a      	strh	r2, [r3, #0]
 8012682:	e03b      	b.n	80126fc <USB_EPStartXfer+0x592>
 8012684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012688:	095b      	lsrs	r3, r3, #5
 801268a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801268e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012692:	f003 031f 	and.w	r3, r3, #31
 8012696:	2b00      	cmp	r3, #0
 8012698:	d104      	bne.n	80126a4 <USB_EPStartXfer+0x53a>
 801269a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801269e:	3b01      	subs	r3, #1
 80126a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80126a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80126a8:	b29b      	uxth	r3, r3
 80126aa:	029b      	lsls	r3, r3, #10
 80126ac:	b29b      	uxth	r3, r3
 80126ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80126b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80126b6:	b29a      	uxth	r2, r3
 80126b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80126ba:	801a      	strh	r2, [r3, #0]
 80126bc:	e01e      	b.n	80126fc <USB_EPStartXfer+0x592>
 80126be:	463b      	mov	r3, r7
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	785b      	ldrb	r3, [r3, #1]
 80126c4:	2b01      	cmp	r3, #1
 80126c6:	d119      	bne.n	80126fc <USB_EPStartXfer+0x592>
 80126c8:	1d3b      	adds	r3, r7, #4
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	653b      	str	r3, [r7, #80]	; 0x50
 80126ce:	1d3b      	adds	r3, r7, #4
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	461a      	mov	r2, r3
 80126da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126dc:	4413      	add	r3, r2
 80126de:	653b      	str	r3, [r7, #80]	; 0x50
 80126e0:	463b      	mov	r3, r7
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	781b      	ldrb	r3, [r3, #0]
 80126e6:	00da      	lsls	r2, r3, #3
 80126e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80126ea:	4413      	add	r3, r2
 80126ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80126f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80126f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126fa:	801a      	strh	r2, [r3, #0]
 80126fc:	463b      	mov	r3, r7
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	891b      	ldrh	r3, [r3, #8]
 8012702:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012706:	463b      	mov	r3, r7
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	6959      	ldr	r1, [r3, #20]
 801270c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012710:	b29b      	uxth	r3, r3
 8012712:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012716:	1d38      	adds	r0, r7, #4
 8012718:	6800      	ldr	r0, [r0, #0]
 801271a:	f001 f978 	bl	8013a0e <USB_WritePMA>
 801271e:	463b      	mov	r3, r7
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	695a      	ldr	r2, [r3, #20]
 8012724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012728:	441a      	add	r2, r3
 801272a:	463b      	mov	r3, r7
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	615a      	str	r2, [r3, #20]
 8012730:	463b      	mov	r3, r7
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	6a1a      	ldr	r2, [r3, #32]
 8012736:	463b      	mov	r3, r7
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	691b      	ldr	r3, [r3, #16]
 801273c:	429a      	cmp	r2, r3
 801273e:	d909      	bls.n	8012754 <USB_EPStartXfer+0x5ea>
 8012740:	463b      	mov	r3, r7
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	6a1a      	ldr	r2, [r3, #32]
 8012746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801274a:	1ad2      	subs	r2, r2, r3
 801274c:	463b      	mov	r3, r7
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	621a      	str	r2, [r3, #32]
 8012752:	e008      	b.n	8012766 <USB_EPStartXfer+0x5fc>
 8012754:	463b      	mov	r3, r7
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	6a1b      	ldr	r3, [r3, #32]
 801275a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801275e:	463b      	mov	r3, r7
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2200      	movs	r2, #0
 8012764:	621a      	str	r2, [r3, #32]
 8012766:	1d3b      	adds	r3, r7, #4
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	643b      	str	r3, [r7, #64]	; 0x40
 801276c:	463b      	mov	r3, r7
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	785b      	ldrb	r3, [r3, #1]
 8012772:	2b00      	cmp	r3, #0
 8012774:	d164      	bne.n	8012840 <USB_EPStartXfer+0x6d6>
 8012776:	1d3b      	adds	r3, r7, #4
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	63bb      	str	r3, [r7, #56]	; 0x38
 801277c:	1d3b      	adds	r3, r7, #4
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012784:	b29b      	uxth	r3, r3
 8012786:	461a      	mov	r2, r3
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	4413      	add	r3, r2
 801278c:	63bb      	str	r3, [r7, #56]	; 0x38
 801278e:	463b      	mov	r3, r7
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	781b      	ldrb	r3, [r3, #0]
 8012794:	00da      	lsls	r2, r3, #3
 8012796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012798:	4413      	add	r3, r2
 801279a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801279e:	637b      	str	r3, [r7, #52]	; 0x34
 80127a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d112      	bne.n	80127ce <USB_EPStartXfer+0x664>
 80127a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127aa:	881b      	ldrh	r3, [r3, #0]
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127b6:	801a      	strh	r2, [r3, #0]
 80127b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ba:	881b      	ldrh	r3, [r3, #0]
 80127bc:	b29b      	uxth	r3, r3
 80127be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80127c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80127c6:	b29a      	uxth	r2, r3
 80127c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80127ca:	801a      	strh	r2, [r3, #0]
 80127cc:	e054      	b.n	8012878 <USB_EPStartXfer+0x70e>
 80127ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80127d2:	2b3e      	cmp	r3, #62	; 0x3e
 80127d4:	d817      	bhi.n	8012806 <USB_EPStartXfer+0x69c>
 80127d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80127da:	085b      	lsrs	r3, r3, #1
 80127dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80127e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80127e4:	f003 0301 	and.w	r3, r3, #1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d004      	beq.n	80127f6 <USB_EPStartXfer+0x68c>
 80127ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80127f0:	3301      	adds	r3, #1
 80127f2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80127f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80127fa:	b29b      	uxth	r3, r3
 80127fc:	029b      	lsls	r3, r3, #10
 80127fe:	b29a      	uxth	r2, r3
 8012800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012802:	801a      	strh	r2, [r3, #0]
 8012804:	e038      	b.n	8012878 <USB_EPStartXfer+0x70e>
 8012806:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801280a:	095b      	lsrs	r3, r3, #5
 801280c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012814:	f003 031f 	and.w	r3, r3, #31
 8012818:	2b00      	cmp	r3, #0
 801281a:	d104      	bne.n	8012826 <USB_EPStartXfer+0x6bc>
 801281c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8012820:	3b01      	subs	r3, #1
 8012822:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8012826:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801282a:	b29b      	uxth	r3, r3
 801282c:	029b      	lsls	r3, r3, #10
 801282e:	b29b      	uxth	r3, r3
 8012830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012838:	b29a      	uxth	r2, r3
 801283a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801283c:	801a      	strh	r2, [r3, #0]
 801283e:	e01b      	b.n	8012878 <USB_EPStartXfer+0x70e>
 8012840:	463b      	mov	r3, r7
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	785b      	ldrb	r3, [r3, #1]
 8012846:	2b01      	cmp	r3, #1
 8012848:	d116      	bne.n	8012878 <USB_EPStartXfer+0x70e>
 801284a:	1d3b      	adds	r3, r7, #4
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012852:	b29b      	uxth	r3, r3
 8012854:	461a      	mov	r2, r3
 8012856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012858:	4413      	add	r3, r2
 801285a:	643b      	str	r3, [r7, #64]	; 0x40
 801285c:	463b      	mov	r3, r7
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	781b      	ldrb	r3, [r3, #0]
 8012862:	00da      	lsls	r2, r3, #3
 8012864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012866:	4413      	add	r3, r2
 8012868:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801286c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801286e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012872:	b29a      	uxth	r2, r3
 8012874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012876:	801a      	strh	r2, [r3, #0]
 8012878:	463b      	mov	r3, r7
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	895b      	ldrh	r3, [r3, #10]
 801287e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012882:	463b      	mov	r3, r7
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6959      	ldr	r1, [r3, #20]
 8012888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801288c:	b29b      	uxth	r3, r3
 801288e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012892:	1d38      	adds	r0, r7, #4
 8012894:	6800      	ldr	r0, [r0, #0]
 8012896:	f001 f8ba 	bl	8013a0e <USB_WritePMA>
 801289a:	e36c      	b.n	8012f76 <USB_EPStartXfer+0xe0c>
 801289c:	463b      	mov	r3, r7
 801289e:	681b      	ldr	r3, [r3, #0]
 80128a0:	6a1b      	ldr	r3, [r3, #32]
 80128a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80128a6:	1d3b      	adds	r3, r7, #4
 80128a8:	681a      	ldr	r2, [r3, #0]
 80128aa:	463b      	mov	r3, r7
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	009b      	lsls	r3, r3, #2
 80128b2:	4413      	add	r3, r2
 80128b4:	881b      	ldrh	r3, [r3, #0]
 80128b6:	b29b      	uxth	r3, r3
 80128b8:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80128bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80128c4:	1d3b      	adds	r3, r7, #4
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	463b      	mov	r3, r7
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	781b      	ldrb	r3, [r3, #0]
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	441a      	add	r2, r3
 80128d2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80128d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80128da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80128de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80128e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	8013      	strh	r3, [r2, #0]
 80128ea:	1d3b      	adds	r3, r7, #4
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80128f0:	1d3b      	adds	r3, r7, #4
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80128f8:	b29b      	uxth	r3, r3
 80128fa:	461a      	mov	r2, r3
 80128fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80128fe:	4413      	add	r3, r2
 8012900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012902:	463b      	mov	r3, r7
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	781b      	ldrb	r3, [r3, #0]
 8012908:	00da      	lsls	r2, r3, #3
 801290a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801290c:	4413      	add	r3, r2
 801290e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012912:	65bb      	str	r3, [r7, #88]	; 0x58
 8012914:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012918:	b29a      	uxth	r2, r3
 801291a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801291c:	801a      	strh	r2, [r3, #0]
 801291e:	463b      	mov	r3, r7
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	891b      	ldrh	r3, [r3, #8]
 8012924:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012928:	463b      	mov	r3, r7
 801292a:	681b      	ldr	r3, [r3, #0]
 801292c:	6959      	ldr	r1, [r3, #20]
 801292e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012932:	b29b      	uxth	r3, r3
 8012934:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012938:	1d38      	adds	r0, r7, #4
 801293a:	6800      	ldr	r0, [r0, #0]
 801293c:	f001 f867 	bl	8013a0e <USB_WritePMA>
 8012940:	e319      	b.n	8012f76 <USB_EPStartXfer+0xe0c>
 8012942:	1d3b      	adds	r3, r7, #4
 8012944:	681a      	ldr	r2, [r3, #0]
 8012946:	463b      	mov	r3, r7
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	781b      	ldrb	r3, [r3, #0]
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	4413      	add	r3, r2
 8012950:	881b      	ldrh	r3, [r3, #0]
 8012952:	b29b      	uxth	r3, r3
 8012954:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801295c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8012960:	1d3b      	adds	r3, r7, #4
 8012962:	681a      	ldr	r2, [r3, #0]
 8012964:	463b      	mov	r3, r7
 8012966:	681b      	ldr	r3, [r3, #0]
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	009b      	lsls	r3, r3, #2
 801296c:	441a      	add	r2, r3
 801296e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8012972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801297a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012982:	b29b      	uxth	r3, r3
 8012984:	8013      	strh	r3, [r2, #0]
 8012986:	463b      	mov	r3, r7
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	6a1a      	ldr	r2, [r3, #32]
 801298c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012990:	1ad2      	subs	r2, r2, r3
 8012992:	463b      	mov	r3, r7
 8012994:	681b      	ldr	r3, [r3, #0]
 8012996:	621a      	str	r2, [r3, #32]
 8012998:	1d3b      	adds	r3, r7, #4
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	463b      	mov	r3, r7
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	781b      	ldrb	r3, [r3, #0]
 80129a2:	009b      	lsls	r3, r3, #2
 80129a4:	4413      	add	r3, r2
 80129a6:	881b      	ldrh	r3, [r3, #0]
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	f000 8162 	beq.w	8012c78 <USB_EPStartXfer+0xb0e>
 80129b4:	1d3b      	adds	r3, r7, #4
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80129bc:	463b      	mov	r3, r7
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	785b      	ldrb	r3, [r3, #1]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d164      	bne.n	8012a90 <USB_EPStartXfer+0x926>
 80129c6:	1d3b      	adds	r3, r7, #4
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80129cc:	1d3b      	adds	r3, r7, #4
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80129d4:	b29b      	uxth	r3, r3
 80129d6:	461a      	mov	r2, r3
 80129d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129da:	4413      	add	r3, r2
 80129dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80129de:	463b      	mov	r3, r7
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	781b      	ldrb	r3, [r3, #0]
 80129e4:	00da      	lsls	r2, r3, #3
 80129e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80129e8:	4413      	add	r3, r2
 80129ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80129ee:	677b      	str	r3, [r7, #116]	; 0x74
 80129f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d112      	bne.n	8012a1e <USB_EPStartXfer+0x8b4>
 80129f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80129fa:	881b      	ldrh	r3, [r3, #0]
 80129fc:	b29b      	uxth	r3, r3
 80129fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012a02:	b29a      	uxth	r2, r3
 8012a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a06:	801a      	strh	r2, [r3, #0]
 8012a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a0a:	881b      	ldrh	r3, [r3, #0]
 8012a0c:	b29b      	uxth	r3, r3
 8012a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a16:	b29a      	uxth	r2, r3
 8012a18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a1a:	801a      	strh	r2, [r3, #0]
 8012a1c:	e057      	b.n	8012ace <USB_EPStartXfer+0x964>
 8012a1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a22:	2b3e      	cmp	r3, #62	; 0x3e
 8012a24:	d817      	bhi.n	8012a56 <USB_EPStartXfer+0x8ec>
 8012a26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a2a:	085b      	lsrs	r3, r3, #1
 8012a2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012a30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a34:	f003 0301 	and.w	r3, r3, #1
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d004      	beq.n	8012a46 <USB_EPStartXfer+0x8dc>
 8012a3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012a40:	3301      	adds	r3, #1
 8012a42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012a46:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012a4a:	b29b      	uxth	r3, r3
 8012a4c:	029b      	lsls	r3, r3, #10
 8012a4e:	b29a      	uxth	r2, r3
 8012a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a52:	801a      	strh	r2, [r3, #0]
 8012a54:	e03b      	b.n	8012ace <USB_EPStartXfer+0x964>
 8012a56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a5a:	095b      	lsrs	r3, r3, #5
 8012a5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012a64:	f003 031f 	and.w	r3, r3, #31
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d104      	bne.n	8012a76 <USB_EPStartXfer+0x90c>
 8012a6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012a70:	3b01      	subs	r3, #1
 8012a72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8012a76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8012a7a:	b29b      	uxth	r3, r3
 8012a7c:	029b      	lsls	r3, r3, #10
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012a88:	b29a      	uxth	r2, r3
 8012a8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012a8c:	801a      	strh	r2, [r3, #0]
 8012a8e:	e01e      	b.n	8012ace <USB_EPStartXfer+0x964>
 8012a90:	463b      	mov	r3, r7
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	785b      	ldrb	r3, [r3, #1]
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d119      	bne.n	8012ace <USB_EPStartXfer+0x964>
 8012a9a:	1d3b      	adds	r3, r7, #4
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012aa2:	b29b      	uxth	r3, r3
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012aaa:	4413      	add	r3, r2
 8012aac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012ab0:	463b      	mov	r3, r7
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	00da      	lsls	r2, r3, #3
 8012ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012abc:	4413      	add	r3, r2
 8012abe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012ac2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012ac4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ac8:	b29a      	uxth	r2, r3
 8012aca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012acc:	801a      	strh	r2, [r3, #0]
 8012ace:	463b      	mov	r3, r7
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	895b      	ldrh	r3, [r3, #10]
 8012ad4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012ad8:	463b      	mov	r3, r7
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	6959      	ldr	r1, [r3, #20]
 8012ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ae2:	b29b      	uxth	r3, r3
 8012ae4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012ae8:	1d38      	adds	r0, r7, #4
 8012aea:	6800      	ldr	r0, [r0, #0]
 8012aec:	f000 ff8f 	bl	8013a0e <USB_WritePMA>
 8012af0:	463b      	mov	r3, r7
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	695a      	ldr	r2, [r3, #20]
 8012af6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012afa:	441a      	add	r2, r3
 8012afc:	463b      	mov	r3, r7
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	615a      	str	r2, [r3, #20]
 8012b02:	463b      	mov	r3, r7
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	6a1a      	ldr	r2, [r3, #32]
 8012b08:	463b      	mov	r3, r7
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	691b      	ldr	r3, [r3, #16]
 8012b0e:	429a      	cmp	r2, r3
 8012b10:	d909      	bls.n	8012b26 <USB_EPStartXfer+0x9bc>
 8012b12:	463b      	mov	r3, r7
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	6a1a      	ldr	r2, [r3, #32]
 8012b18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012b1c:	1ad2      	subs	r2, r2, r3
 8012b1e:	463b      	mov	r3, r7
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	621a      	str	r2, [r3, #32]
 8012b24:	e008      	b.n	8012b38 <USB_EPStartXfer+0x9ce>
 8012b26:	463b      	mov	r3, r7
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	6a1b      	ldr	r3, [r3, #32]
 8012b2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012b30:	463b      	mov	r3, r7
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2200      	movs	r2, #0
 8012b36:	621a      	str	r2, [r3, #32]
 8012b38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f000 821a 	beq.w	8012f76 <USB_EPStartXfer+0xe0c>
 8012b42:	463b      	mov	r3, r7
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	785b      	ldrb	r3, [r3, #1]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d164      	bne.n	8012c16 <USB_EPStartXfer+0xaac>
 8012b4c:	1d3b      	adds	r3, r7, #4
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b52:	1d3b      	adds	r3, r7, #4
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012b5a:	b29b      	uxth	r3, r3
 8012b5c:	461a      	mov	r2, r3
 8012b5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b60:	4413      	add	r3, r2
 8012b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8012b64:	463b      	mov	r3, r7
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	00da      	lsls	r2, r3, #3
 8012b6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b6e:	4413      	add	r3, r2
 8012b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012b74:	667b      	str	r3, [r7, #100]	; 0x64
 8012b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d112      	bne.n	8012ba4 <USB_EPStartXfer+0xa3a>
 8012b7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b80:	881b      	ldrh	r3, [r3, #0]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012b88:	b29a      	uxth	r2, r3
 8012b8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b8c:	801a      	strh	r2, [r3, #0]
 8012b8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012b90:	881b      	ldrh	r3, [r3, #0]
 8012b92:	b29b      	uxth	r3, r3
 8012b94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012b98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012b9c:	b29a      	uxth	r2, r3
 8012b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012ba0:	801a      	strh	r2, [r3, #0]
 8012ba2:	e057      	b.n	8012c54 <USB_EPStartXfer+0xaea>
 8012ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ba8:	2b3e      	cmp	r3, #62	; 0x3e
 8012baa:	d817      	bhi.n	8012bdc <USB_EPStartXfer+0xa72>
 8012bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012bb0:	085b      	lsrs	r3, r3, #1
 8012bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012bb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012bba:	f003 0301 	and.w	r3, r3, #1
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d004      	beq.n	8012bcc <USB_EPStartXfer+0xa62>
 8012bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012bd0:	b29b      	uxth	r3, r3
 8012bd2:	029b      	lsls	r3, r3, #10
 8012bd4:	b29a      	uxth	r2, r3
 8012bd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012bd8:	801a      	strh	r2, [r3, #0]
 8012bda:	e03b      	b.n	8012c54 <USB_EPStartXfer+0xaea>
 8012bdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012be0:	095b      	lsrs	r3, r3, #5
 8012be2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012be6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012bea:	f003 031f 	and.w	r3, r3, #31
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d104      	bne.n	8012bfc <USB_EPStartXfer+0xa92>
 8012bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012bf6:	3b01      	subs	r3, #1
 8012bf8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8012bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8012c00:	b29b      	uxth	r3, r3
 8012c02:	029b      	lsls	r3, r3, #10
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012c0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012c0e:	b29a      	uxth	r2, r3
 8012c10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012c12:	801a      	strh	r2, [r3, #0]
 8012c14:	e01e      	b.n	8012c54 <USB_EPStartXfer+0xaea>
 8012c16:	463b      	mov	r3, r7
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	785b      	ldrb	r3, [r3, #1]
 8012c1c:	2b01      	cmp	r3, #1
 8012c1e:	d119      	bne.n	8012c54 <USB_EPStartXfer+0xaea>
 8012c20:	1d3b      	adds	r3, r7, #4
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	673b      	str	r3, [r7, #112]	; 0x70
 8012c26:	1d3b      	adds	r3, r7, #4
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c2e:	b29b      	uxth	r3, r3
 8012c30:	461a      	mov	r2, r3
 8012c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c34:	4413      	add	r3, r2
 8012c36:	673b      	str	r3, [r7, #112]	; 0x70
 8012c38:	463b      	mov	r3, r7
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	781b      	ldrb	r3, [r3, #0]
 8012c3e:	00da      	lsls	r2, r3, #3
 8012c40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012c42:	4413      	add	r3, r2
 8012c44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012c4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012c4e:	b29a      	uxth	r2, r3
 8012c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c52:	801a      	strh	r2, [r3, #0]
 8012c54:	463b      	mov	r3, r7
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	891b      	ldrh	r3, [r3, #8]
 8012c5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012c5e:	463b      	mov	r3, r7
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	6959      	ldr	r1, [r3, #20]
 8012c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012c68:	b29b      	uxth	r3, r3
 8012c6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012c6e:	1d38      	adds	r0, r7, #4
 8012c70:	6800      	ldr	r0, [r0, #0]
 8012c72:	f000 fecc 	bl	8013a0e <USB_WritePMA>
 8012c76:	e17e      	b.n	8012f76 <USB_EPStartXfer+0xe0c>
 8012c78:	463b      	mov	r3, r7
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	785b      	ldrb	r3, [r3, #1]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d16f      	bne.n	8012d62 <USB_EPStartXfer+0xbf8>
 8012c82:	1d3b      	adds	r3, r7, #4
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012c8a:	1d3b      	adds	r3, r7, #4
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012c92:	b29b      	uxth	r3, r3
 8012c94:	461a      	mov	r2, r3
 8012c96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012c9a:	4413      	add	r3, r2
 8012c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012ca0:	463b      	mov	r3, r7
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	781b      	ldrb	r3, [r3, #0]
 8012ca6:	00da      	lsls	r2, r3, #3
 8012ca8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012cac:	4413      	add	r3, r2
 8012cae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012cb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012cb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d116      	bne.n	8012cec <USB_EPStartXfer+0xb82>
 8012cbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cc2:	881b      	ldrh	r3, [r3, #0]
 8012cc4:	b29b      	uxth	r3, r3
 8012cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012cca:	b29a      	uxth	r2, r3
 8012ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cd0:	801a      	strh	r2, [r3, #0]
 8012cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012cd6:	881b      	ldrh	r3, [r3, #0]
 8012cd8:	b29b      	uxth	r3, r3
 8012cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012ce2:	b29a      	uxth	r2, r3
 8012ce4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012ce8:	801a      	strh	r2, [r3, #0]
 8012cea:	e05f      	b.n	8012dac <USB_EPStartXfer+0xc42>
 8012cec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012cf0:	2b3e      	cmp	r3, #62	; 0x3e
 8012cf2:	d818      	bhi.n	8012d26 <USB_EPStartXfer+0xbbc>
 8012cf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012cf8:	085b      	lsrs	r3, r3, #1
 8012cfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012d02:	f003 0301 	and.w	r3, r3, #1
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d004      	beq.n	8012d14 <USB_EPStartXfer+0xbaa>
 8012d0a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012d0e:	3301      	adds	r3, #1
 8012d10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012d14:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012d18:	b29b      	uxth	r3, r3
 8012d1a:	029b      	lsls	r3, r3, #10
 8012d1c:	b29a      	uxth	r2, r3
 8012d1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d22:	801a      	strh	r2, [r3, #0]
 8012d24:	e042      	b.n	8012dac <USB_EPStartXfer+0xc42>
 8012d26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012d2a:	095b      	lsrs	r3, r3, #5
 8012d2c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012d30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012d34:	f003 031f 	and.w	r3, r3, #31
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d104      	bne.n	8012d46 <USB_EPStartXfer+0xbdc>
 8012d3c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012d40:	3b01      	subs	r3, #1
 8012d42:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8012d46:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012d4a:	b29b      	uxth	r3, r3
 8012d4c:	029b      	lsls	r3, r3, #10
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012d54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012d58:	b29a      	uxth	r2, r3
 8012d5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8012d5e:	801a      	strh	r2, [r3, #0]
 8012d60:	e024      	b.n	8012dac <USB_EPStartXfer+0xc42>
 8012d62:	463b      	mov	r3, r7
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	785b      	ldrb	r3, [r3, #1]
 8012d68:	2b01      	cmp	r3, #1
 8012d6a:	d11f      	bne.n	8012dac <USB_EPStartXfer+0xc42>
 8012d6c:	1d3b      	adds	r3, r7, #4
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012d74:	1d3b      	adds	r3, r7, #4
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012d7c:	b29b      	uxth	r3, r3
 8012d7e:	461a      	mov	r2, r3
 8012d80:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012d84:	4413      	add	r3, r2
 8012d86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012d8a:	463b      	mov	r3, r7
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	00da      	lsls	r2, r3, #3
 8012d92:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8012d96:	4413      	add	r3, r2
 8012d98:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012d9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012da4:	b29a      	uxth	r2, r3
 8012da6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012daa:	801a      	strh	r2, [r3, #0]
 8012dac:	463b      	mov	r3, r7
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	891b      	ldrh	r3, [r3, #8]
 8012db2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012db6:	463b      	mov	r3, r7
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6959      	ldr	r1, [r3, #20]
 8012dbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012dc0:	b29b      	uxth	r3, r3
 8012dc2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012dc6:	1d38      	adds	r0, r7, #4
 8012dc8:	6800      	ldr	r0, [r0, #0]
 8012dca:	f000 fe20 	bl	8013a0e <USB_WritePMA>
 8012dce:	463b      	mov	r3, r7
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	695a      	ldr	r2, [r3, #20]
 8012dd4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012dd8:	441a      	add	r2, r3
 8012dda:	463b      	mov	r3, r7
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	615a      	str	r2, [r3, #20]
 8012de0:	463b      	mov	r3, r7
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	6a1a      	ldr	r2, [r3, #32]
 8012de6:	463b      	mov	r3, r7
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	691b      	ldr	r3, [r3, #16]
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d909      	bls.n	8012e04 <USB_EPStartXfer+0xc9a>
 8012df0:	463b      	mov	r3, r7
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	6a1a      	ldr	r2, [r3, #32]
 8012df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012dfa:	1ad2      	subs	r2, r2, r3
 8012dfc:	463b      	mov	r3, r7
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	621a      	str	r2, [r3, #32]
 8012e02:	e008      	b.n	8012e16 <USB_EPStartXfer+0xcac>
 8012e04:	463b      	mov	r3, r7
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	6a1b      	ldr	r3, [r3, #32]
 8012e0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8012e0e:	463b      	mov	r3, r7
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	2200      	movs	r2, #0
 8012e14:	621a      	str	r2, [r3, #32]
 8012e16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	f000 80ab 	beq.w	8012f76 <USB_EPStartXfer+0xe0c>
 8012e20:	1d3b      	adds	r3, r7, #4
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012e28:	463b      	mov	r3, r7
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	785b      	ldrb	r3, [r3, #1]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d16f      	bne.n	8012f12 <USB_EPStartXfer+0xda8>
 8012e32:	1d3b      	adds	r3, r7, #4
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012e3a:	1d3b      	adds	r3, r7, #4
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	461a      	mov	r2, r3
 8012e46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e4a:	4413      	add	r3, r2
 8012e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012e50:	463b      	mov	r3, r7
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	781b      	ldrb	r3, [r3, #0]
 8012e56:	00da      	lsls	r2, r3, #3
 8012e58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8012e5c:	4413      	add	r3, r2
 8012e5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012e62:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012e66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d116      	bne.n	8012e9c <USB_EPStartXfer+0xd32>
 8012e6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e72:	881b      	ldrh	r3, [r3, #0]
 8012e74:	b29b      	uxth	r3, r3
 8012e76:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e80:	801a      	strh	r2, [r3, #0]
 8012e82:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e86:	881b      	ldrh	r3, [r3, #0]
 8012e88:	b29b      	uxth	r3, r3
 8012e8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012e8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012e98:	801a      	strh	r2, [r3, #0]
 8012e9a:	e05b      	b.n	8012f54 <USB_EPStartXfer+0xdea>
 8012e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ea0:	2b3e      	cmp	r3, #62	; 0x3e
 8012ea2:	d818      	bhi.n	8012ed6 <USB_EPStartXfer+0xd6c>
 8012ea4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ea8:	085b      	lsrs	r3, r3, #1
 8012eaa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012eae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012eb2:	f003 0301 	and.w	r3, r3, #1
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d004      	beq.n	8012ec4 <USB_EPStartXfer+0xd5a>
 8012eba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ec8:	b29b      	uxth	r3, r3
 8012eca:	029b      	lsls	r3, r3, #10
 8012ecc:	b29a      	uxth	r2, r3
 8012ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012ed2:	801a      	strh	r2, [r3, #0]
 8012ed4:	e03e      	b.n	8012f54 <USB_EPStartXfer+0xdea>
 8012ed6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012eda:	095b      	lsrs	r3, r3, #5
 8012edc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012ee0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012ee4:	f003 031f 	and.w	r3, r3, #31
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d104      	bne.n	8012ef6 <USB_EPStartXfer+0xd8c>
 8012eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8012ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8012efa:	b29b      	uxth	r3, r3
 8012efc:	029b      	lsls	r3, r3, #10
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8012f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8012f08:	b29a      	uxth	r2, r3
 8012f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8012f0e:	801a      	strh	r2, [r3, #0]
 8012f10:	e020      	b.n	8012f54 <USB_EPStartXfer+0xdea>
 8012f12:	463b      	mov	r3, r7
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	785b      	ldrb	r3, [r3, #1]
 8012f18:	2b01      	cmp	r3, #1
 8012f1a:	d11b      	bne.n	8012f54 <USB_EPStartXfer+0xdea>
 8012f1c:	1d3b      	adds	r3, r7, #4
 8012f1e:	681b      	ldr	r3, [r3, #0]
 8012f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8012f24:	b29b      	uxth	r3, r3
 8012f26:	461a      	mov	r2, r3
 8012f28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f2c:	4413      	add	r3, r2
 8012f2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012f32:	463b      	mov	r3, r7
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	00da      	lsls	r2, r3, #3
 8012f3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012f3e:	4413      	add	r3, r2
 8012f40:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8012f44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f4c:	b29a      	uxth	r2, r3
 8012f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8012f52:	801a      	strh	r2, [r3, #0]
 8012f54:	463b      	mov	r3, r7
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	895b      	ldrh	r3, [r3, #10]
 8012f5a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 8012f5e:	463b      	mov	r3, r7
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	6959      	ldr	r1, [r3, #20]
 8012f64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8012f68:	b29b      	uxth	r3, r3
 8012f6a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8012f6e:	1d38      	adds	r0, r7, #4
 8012f70:	6800      	ldr	r0, [r0, #0]
 8012f72:	f000 fd4c 	bl	8013a0e <USB_WritePMA>
 8012f76:	1d3b      	adds	r3, r7, #4
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	463b      	mov	r3, r7
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	781b      	ldrb	r3, [r3, #0]
 8012f80:	009b      	lsls	r3, r3, #2
 8012f82:	4413      	add	r3, r2
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	f107 020a 	add.w	r2, r7, #10
 8012f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8012f90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012f94:	8013      	strh	r3, [r2, #0]
 8012f96:	f107 030a 	add.w	r3, r7, #10
 8012f9a:	f107 020a 	add.w	r2, r7, #10
 8012f9e:	8812      	ldrh	r2, [r2, #0]
 8012fa0:	f082 0210 	eor.w	r2, r2, #16
 8012fa4:	801a      	strh	r2, [r3, #0]
 8012fa6:	f107 030a 	add.w	r3, r7, #10
 8012faa:	f107 020a 	add.w	r2, r7, #10
 8012fae:	8812      	ldrh	r2, [r2, #0]
 8012fb0:	f082 0220 	eor.w	r2, r2, #32
 8012fb4:	801a      	strh	r2, [r3, #0]
 8012fb6:	1d3b      	adds	r3, r7, #4
 8012fb8:	681a      	ldr	r2, [r3, #0]
 8012fba:	463b      	mov	r3, r7
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	781b      	ldrb	r3, [r3, #0]
 8012fc0:	009b      	lsls	r3, r3, #2
 8012fc2:	441a      	add	r2, r3
 8012fc4:	f107 030a 	add.w	r3, r7, #10
 8012fc8:	881b      	ldrh	r3, [r3, #0]
 8012fca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8012fce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8012fd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8012fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	8013      	strh	r3, [r2, #0]
 8012fde:	e3b5      	b.n	801374c <USB_EPStartXfer+0x15e2>
 8012fe0:	463b      	mov	r3, r7
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	7b1b      	ldrb	r3, [r3, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	f040 8090 	bne.w	801310c <USB_EPStartXfer+0xfa2>
 8012fec:	463b      	mov	r3, r7
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	699a      	ldr	r2, [r3, #24]
 8012ff2:	463b      	mov	r3, r7
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d90e      	bls.n	801301a <USB_EPStartXfer+0xeb0>
 8012ffc:	463b      	mov	r3, r7
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	691b      	ldr	r3, [r3, #16]
 8013002:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013006:	463b      	mov	r3, r7
 8013008:	681b      	ldr	r3, [r3, #0]
 801300a:	699a      	ldr	r2, [r3, #24]
 801300c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013010:	1ad2      	subs	r2, r2, r3
 8013012:	463b      	mov	r3, r7
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	619a      	str	r2, [r3, #24]
 8013018:	e008      	b.n	801302c <USB_EPStartXfer+0xec2>
 801301a:	463b      	mov	r3, r7
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	699b      	ldr	r3, [r3, #24]
 8013020:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013024:	463b      	mov	r3, r7
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2200      	movs	r2, #0
 801302a:	619a      	str	r2, [r3, #24]
 801302c:	1d3b      	adds	r3, r7, #4
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8013034:	1d3b      	adds	r3, r7, #4
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801303c:	b29b      	uxth	r3, r3
 801303e:	461a      	mov	r2, r3
 8013040:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013044:	4413      	add	r3, r2
 8013046:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801304a:	463b      	mov	r3, r7
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	781b      	ldrb	r3, [r3, #0]
 8013050:	00da      	lsls	r2, r3, #3
 8013052:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8013056:	4413      	add	r3, r2
 8013058:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801305c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8013060:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013064:	2b00      	cmp	r3, #0
 8013066:	d116      	bne.n	8013096 <USB_EPStartXfer+0xf2c>
 8013068:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801306c:	881b      	ldrh	r3, [r3, #0]
 801306e:	b29b      	uxth	r3, r3
 8013070:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013074:	b29a      	uxth	r2, r3
 8013076:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801307a:	801a      	strh	r2, [r3, #0]
 801307c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	b29b      	uxth	r3, r3
 8013084:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013088:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801308c:	b29a      	uxth	r2, r3
 801308e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013092:	801a      	strh	r2, [r3, #0]
 8013094:	e32c      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 8013096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801309a:	2b3e      	cmp	r3, #62	; 0x3e
 801309c:	d818      	bhi.n	80130d0 <USB_EPStartXfer+0xf66>
 801309e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130a2:	085b      	lsrs	r3, r3, #1
 80130a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80130a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130ac:	f003 0301 	and.w	r3, r3, #1
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d004      	beq.n	80130be <USB_EPStartXfer+0xf54>
 80130b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80130b8:	3301      	adds	r3, #1
 80130ba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80130be:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80130c2:	b29b      	uxth	r3, r3
 80130c4:	029b      	lsls	r3, r3, #10
 80130c6:	b29a      	uxth	r2, r3
 80130c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80130cc:	801a      	strh	r2, [r3, #0]
 80130ce:	e30f      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 80130d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130d4:	095b      	lsrs	r3, r3, #5
 80130d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80130da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80130de:	f003 031f 	and.w	r3, r3, #31
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d104      	bne.n	80130f0 <USB_EPStartXfer+0xf86>
 80130e6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80130ea:	3b01      	subs	r3, #1
 80130ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80130f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	029b      	lsls	r3, r3, #10
 80130f8:	b29b      	uxth	r3, r3
 80130fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80130fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013102:	b29a      	uxth	r2, r3
 8013104:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8013108:	801a      	strh	r2, [r3, #0]
 801310a:	e2f1      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 801310c:	463b      	mov	r3, r7
 801310e:	681b      	ldr	r3, [r3, #0]
 8013110:	78db      	ldrb	r3, [r3, #3]
 8013112:	2b02      	cmp	r3, #2
 8013114:	f040 818f 	bne.w	8013436 <USB_EPStartXfer+0x12cc>
 8013118:	463b      	mov	r3, r7
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	785b      	ldrb	r3, [r3, #1]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d175      	bne.n	801320e <USB_EPStartXfer+0x10a4>
 8013122:	1d3b      	adds	r3, r7, #4
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801312a:	1d3b      	adds	r3, r7, #4
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013132:	b29b      	uxth	r3, r3
 8013134:	461a      	mov	r2, r3
 8013136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801313a:	4413      	add	r3, r2
 801313c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8013140:	463b      	mov	r3, r7
 8013142:	681b      	ldr	r3, [r3, #0]
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	00da      	lsls	r2, r3, #3
 8013148:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801314c:	4413      	add	r3, r2
 801314e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8013156:	463b      	mov	r3, r7
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	691b      	ldr	r3, [r3, #16]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d116      	bne.n	801318e <USB_EPStartXfer+0x1024>
 8013160:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013164:	881b      	ldrh	r3, [r3, #0]
 8013166:	b29b      	uxth	r3, r3
 8013168:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801316c:	b29a      	uxth	r2, r3
 801316e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013172:	801a      	strh	r2, [r3, #0]
 8013174:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8013178:	881b      	ldrh	r3, [r3, #0]
 801317a:	b29b      	uxth	r3, r3
 801317c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013180:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013184:	b29a      	uxth	r2, r3
 8013186:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801318a:	801a      	strh	r2, [r3, #0]
 801318c:	e065      	b.n	801325a <USB_EPStartXfer+0x10f0>
 801318e:	463b      	mov	r3, r7
 8013190:	681b      	ldr	r3, [r3, #0]
 8013192:	691b      	ldr	r3, [r3, #16]
 8013194:	2b3e      	cmp	r3, #62	; 0x3e
 8013196:	d81a      	bhi.n	80131ce <USB_EPStartXfer+0x1064>
 8013198:	463b      	mov	r3, r7
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	691b      	ldr	r3, [r3, #16]
 801319e:	085b      	lsrs	r3, r3, #1
 80131a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80131a4:	463b      	mov	r3, r7
 80131a6:	681b      	ldr	r3, [r3, #0]
 80131a8:	691b      	ldr	r3, [r3, #16]
 80131aa:	f003 0301 	and.w	r3, r3, #1
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d004      	beq.n	80131bc <USB_EPStartXfer+0x1052>
 80131b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131b6:	3301      	adds	r3, #1
 80131b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80131bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131c0:	b29b      	uxth	r3, r3
 80131c2:	029b      	lsls	r3, r3, #10
 80131c4:	b29a      	uxth	r2, r3
 80131c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80131ca:	801a      	strh	r2, [r3, #0]
 80131cc:	e045      	b.n	801325a <USB_EPStartXfer+0x10f0>
 80131ce:	463b      	mov	r3, r7
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	691b      	ldr	r3, [r3, #16]
 80131d4:	095b      	lsrs	r3, r3, #5
 80131d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80131da:	463b      	mov	r3, r7
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	691b      	ldr	r3, [r3, #16]
 80131e0:	f003 031f 	and.w	r3, r3, #31
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d104      	bne.n	80131f2 <USB_EPStartXfer+0x1088>
 80131e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131ec:	3b01      	subs	r3, #1
 80131ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80131f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80131f6:	b29b      	uxth	r3, r3
 80131f8:	029b      	lsls	r3, r3, #10
 80131fa:	b29b      	uxth	r3, r3
 80131fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013204:	b29a      	uxth	r2, r3
 8013206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801320a:	801a      	strh	r2, [r3, #0]
 801320c:	e025      	b.n	801325a <USB_EPStartXfer+0x10f0>
 801320e:	463b      	mov	r3, r7
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	785b      	ldrb	r3, [r3, #1]
 8013214:	2b01      	cmp	r3, #1
 8013216:	d120      	bne.n	801325a <USB_EPStartXfer+0x10f0>
 8013218:	1d3b      	adds	r3, r7, #4
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013220:	1d3b      	adds	r3, r7, #4
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013228:	b29b      	uxth	r3, r3
 801322a:	461a      	mov	r2, r3
 801322c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013230:	4413      	add	r3, r2
 8013232:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8013236:	463b      	mov	r3, r7
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	00da      	lsls	r2, r3, #3
 801323e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8013242:	4413      	add	r3, r2
 8013244:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801324c:	463b      	mov	r3, r7
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	691b      	ldr	r3, [r3, #16]
 8013252:	b29a      	uxth	r2, r3
 8013254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8013258:	801a      	strh	r2, [r3, #0]
 801325a:	1d3b      	adds	r3, r7, #4
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013262:	463b      	mov	r3, r7
 8013264:	681b      	ldr	r3, [r3, #0]
 8013266:	785b      	ldrb	r3, [r3, #1]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d175      	bne.n	8013358 <USB_EPStartXfer+0x11ee>
 801326c:	1d3b      	adds	r3, r7, #4
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8013274:	1d3b      	adds	r3, r7, #4
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801327c:	b29b      	uxth	r3, r3
 801327e:	461a      	mov	r2, r3
 8013280:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013284:	4413      	add	r3, r2
 8013286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801328a:	463b      	mov	r3, r7
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	781b      	ldrb	r3, [r3, #0]
 8013290:	00da      	lsls	r2, r3, #3
 8013292:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8013296:	4413      	add	r3, r2
 8013298:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801329c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80132a0:	463b      	mov	r3, r7
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	691b      	ldr	r3, [r3, #16]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d116      	bne.n	80132d8 <USB_EPStartXfer+0x116e>
 80132aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80132ae:	881b      	ldrh	r3, [r3, #0]
 80132b0:	b29b      	uxth	r3, r3
 80132b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80132b6:	b29a      	uxth	r2, r3
 80132b8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80132bc:	801a      	strh	r2, [r3, #0]
 80132be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80132c2:	881b      	ldrh	r3, [r3, #0]
 80132c4:	b29b      	uxth	r3, r3
 80132c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80132ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80132d4:	801a      	strh	r2, [r3, #0]
 80132d6:	e061      	b.n	801339c <USB_EPStartXfer+0x1232>
 80132d8:	463b      	mov	r3, r7
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	691b      	ldr	r3, [r3, #16]
 80132de:	2b3e      	cmp	r3, #62	; 0x3e
 80132e0:	d81a      	bhi.n	8013318 <USB_EPStartXfer+0x11ae>
 80132e2:	463b      	mov	r3, r7
 80132e4:	681b      	ldr	r3, [r3, #0]
 80132e6:	691b      	ldr	r3, [r3, #16]
 80132e8:	085b      	lsrs	r3, r3, #1
 80132ea:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80132ee:	463b      	mov	r3, r7
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	691b      	ldr	r3, [r3, #16]
 80132f4:	f003 0301 	and.w	r3, r3, #1
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d004      	beq.n	8013306 <USB_EPStartXfer+0x119c>
 80132fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013300:	3301      	adds	r3, #1
 8013302:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013306:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801330a:	b29b      	uxth	r3, r3
 801330c:	029b      	lsls	r3, r3, #10
 801330e:	b29a      	uxth	r2, r3
 8013310:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013314:	801a      	strh	r2, [r3, #0]
 8013316:	e041      	b.n	801339c <USB_EPStartXfer+0x1232>
 8013318:	463b      	mov	r3, r7
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	691b      	ldr	r3, [r3, #16]
 801331e:	095b      	lsrs	r3, r3, #5
 8013320:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8013324:	463b      	mov	r3, r7
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	691b      	ldr	r3, [r3, #16]
 801332a:	f003 031f 	and.w	r3, r3, #31
 801332e:	2b00      	cmp	r3, #0
 8013330:	d104      	bne.n	801333c <USB_EPStartXfer+0x11d2>
 8013332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013336:	3b01      	subs	r3, #1
 8013338:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801333c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013340:	b29b      	uxth	r3, r3
 8013342:	029b      	lsls	r3, r3, #10
 8013344:	b29b      	uxth	r3, r3
 8013346:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801334a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801334e:	b29a      	uxth	r2, r3
 8013350:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013354:	801a      	strh	r2, [r3, #0]
 8013356:	e021      	b.n	801339c <USB_EPStartXfer+0x1232>
 8013358:	463b      	mov	r3, r7
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	785b      	ldrb	r3, [r3, #1]
 801335e:	2b01      	cmp	r3, #1
 8013360:	d11c      	bne.n	801339c <USB_EPStartXfer+0x1232>
 8013362:	1d3b      	adds	r3, r7, #4
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801336a:	b29b      	uxth	r3, r3
 801336c:	461a      	mov	r2, r3
 801336e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013372:	4413      	add	r3, r2
 8013374:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8013378:	463b      	mov	r3, r7
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	781b      	ldrb	r3, [r3, #0]
 801337e:	00da      	lsls	r2, r3, #3
 8013380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8013384:	4413      	add	r3, r2
 8013386:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801338a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801338e:	463b      	mov	r3, r7
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	691b      	ldr	r3, [r3, #16]
 8013394:	b29a      	uxth	r2, r3
 8013396:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801339a:	801a      	strh	r2, [r3, #0]
 801339c:	463b      	mov	r3, r7
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	69db      	ldr	r3, [r3, #28]
 80133a2:	2b00      	cmp	r3, #0
 80133a4:	f000 81a4 	beq.w	80136f0 <USB_EPStartXfer+0x1586>
 80133a8:	1d3b      	adds	r3, r7, #4
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	463b      	mov	r3, r7
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	781b      	ldrb	r3, [r3, #0]
 80133b2:	009b      	lsls	r3, r3, #2
 80133b4:	4413      	add	r3, r2
 80133b6:	881b      	ldrh	r3, [r3, #0]
 80133b8:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 80133bc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80133c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d005      	beq.n	80133d4 <USB_EPStartXfer+0x126a>
 80133c8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80133cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d10d      	bne.n	80133f0 <USB_EPStartXfer+0x1286>
 80133d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80133d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133dc:	2b00      	cmp	r3, #0
 80133de:	f040 8187 	bne.w	80136f0 <USB_EPStartXfer+0x1586>
 80133e2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80133e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	f040 8180 	bne.w	80136f0 <USB_EPStartXfer+0x1586>
 80133f0:	1d3b      	adds	r3, r7, #4
 80133f2:	681a      	ldr	r2, [r3, #0]
 80133f4:	463b      	mov	r3, r7
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	781b      	ldrb	r3, [r3, #0]
 80133fa:	009b      	lsls	r3, r3, #2
 80133fc:	4413      	add	r3, r2
 80133fe:	881b      	ldrh	r3, [r3, #0]
 8013400:	b29b      	uxth	r3, r3
 8013402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013406:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801340a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 801340e:	1d3b      	adds	r3, r7, #4
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	463b      	mov	r3, r7
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	781b      	ldrb	r3, [r3, #0]
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	441a      	add	r2, r3
 801341c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8013420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801342c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013430:	b29b      	uxth	r3, r3
 8013432:	8013      	strh	r3, [r2, #0]
 8013434:	e15c      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 8013436:	463b      	mov	r3, r7
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	78db      	ldrb	r3, [r3, #3]
 801343c:	2b01      	cmp	r3, #1
 801343e:	f040 8155 	bne.w	80136ec <USB_EPStartXfer+0x1582>
 8013442:	463b      	mov	r3, r7
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	699a      	ldr	r2, [r3, #24]
 8013448:	463b      	mov	r3, r7
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	691b      	ldr	r3, [r3, #16]
 801344e:	429a      	cmp	r2, r3
 8013450:	d90e      	bls.n	8013470 <USB_EPStartXfer+0x1306>
 8013452:	463b      	mov	r3, r7
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	691b      	ldr	r3, [r3, #16]
 8013458:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801345c:	463b      	mov	r3, r7
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	699a      	ldr	r2, [r3, #24]
 8013462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013466:	1ad2      	subs	r2, r2, r3
 8013468:	463b      	mov	r3, r7
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	619a      	str	r2, [r3, #24]
 801346e:	e008      	b.n	8013482 <USB_EPStartXfer+0x1318>
 8013470:	463b      	mov	r3, r7
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	699b      	ldr	r3, [r3, #24]
 8013476:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801347a:	463b      	mov	r3, r7
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	2200      	movs	r2, #0
 8013480:	619a      	str	r2, [r3, #24]
 8013482:	463b      	mov	r3, r7
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	785b      	ldrb	r3, [r3, #1]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d16f      	bne.n	801356c <USB_EPStartXfer+0x1402>
 801348c:	1d3b      	adds	r3, r7, #4
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8013494:	1d3b      	adds	r3, r7, #4
 8013496:	681b      	ldr	r3, [r3, #0]
 8013498:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801349c:	b29b      	uxth	r3, r3
 801349e:	461a      	mov	r2, r3
 80134a0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80134a4:	4413      	add	r3, r2
 80134a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80134aa:	463b      	mov	r3, r7
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	00da      	lsls	r2, r3, #3
 80134b2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80134b6:	4413      	add	r3, r2
 80134b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80134bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80134c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d116      	bne.n	80134f6 <USB_EPStartXfer+0x138c>
 80134c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134cc:	881b      	ldrh	r3, [r3, #0]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80134d4:	b29a      	uxth	r2, r3
 80134d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134da:	801a      	strh	r2, [r3, #0]
 80134dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	b29b      	uxth	r3, r3
 80134e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80134e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80134ec:	b29a      	uxth	r2, r3
 80134ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80134f2:	801a      	strh	r2, [r3, #0]
 80134f4:	e05f      	b.n	80135b6 <USB_EPStartXfer+0x144c>
 80134f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80134fa:	2b3e      	cmp	r3, #62	; 0x3e
 80134fc:	d818      	bhi.n	8013530 <USB_EPStartXfer+0x13c6>
 80134fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013502:	085b      	lsrs	r3, r3, #1
 8013504:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801350c:	f003 0301 	and.w	r3, r3, #1
 8013510:	2b00      	cmp	r3, #0
 8013512:	d004      	beq.n	801351e <USB_EPStartXfer+0x13b4>
 8013514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013518:	3301      	adds	r3, #1
 801351a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801351e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013522:	b29b      	uxth	r3, r3
 8013524:	029b      	lsls	r3, r3, #10
 8013526:	b29a      	uxth	r2, r3
 8013528:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801352c:	801a      	strh	r2, [r3, #0]
 801352e:	e042      	b.n	80135b6 <USB_EPStartXfer+0x144c>
 8013530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013534:	095b      	lsrs	r3, r3, #5
 8013536:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801353a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801353e:	f003 031f 	and.w	r3, r3, #31
 8013542:	2b00      	cmp	r3, #0
 8013544:	d104      	bne.n	8013550 <USB_EPStartXfer+0x13e6>
 8013546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801354a:	3b01      	subs	r3, #1
 801354c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8013550:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013554:	b29b      	uxth	r3, r3
 8013556:	029b      	lsls	r3, r3, #10
 8013558:	b29b      	uxth	r3, r3
 801355a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801355e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013562:	b29a      	uxth	r2, r3
 8013564:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8013568:	801a      	strh	r2, [r3, #0]
 801356a:	e024      	b.n	80135b6 <USB_EPStartXfer+0x144c>
 801356c:	463b      	mov	r3, r7
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	785b      	ldrb	r3, [r3, #1]
 8013572:	2b01      	cmp	r3, #1
 8013574:	d11f      	bne.n	80135b6 <USB_EPStartXfer+0x144c>
 8013576:	1d3b      	adds	r3, r7, #4
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801357e:	1d3b      	adds	r3, r7, #4
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013586:	b29b      	uxth	r3, r3
 8013588:	461a      	mov	r2, r3
 801358a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801358e:	4413      	add	r3, r2
 8013590:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8013594:	463b      	mov	r3, r7
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	781b      	ldrb	r3, [r3, #0]
 801359a:	00da      	lsls	r2, r3, #3
 801359c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80135a0:	4413      	add	r3, r2
 80135a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80135a6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80135aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80135b4:	801a      	strh	r2, [r3, #0]
 80135b6:	1d3b      	adds	r3, r7, #4
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80135be:	463b      	mov	r3, r7
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	785b      	ldrb	r3, [r3, #1]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d16f      	bne.n	80136a8 <USB_EPStartXfer+0x153e>
 80135c8:	1d3b      	adds	r3, r7, #4
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80135d0:	1d3b      	adds	r3, r7, #4
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80135d8:	b29b      	uxth	r3, r3
 80135da:	461a      	mov	r2, r3
 80135dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80135e0:	4413      	add	r3, r2
 80135e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80135e6:	463b      	mov	r3, r7
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	00da      	lsls	r2, r3, #3
 80135ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80135f2:	4413      	add	r3, r2
 80135f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80135f8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80135fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013600:	2b00      	cmp	r3, #0
 8013602:	d116      	bne.n	8013632 <USB_EPStartXfer+0x14c8>
 8013604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	b29b      	uxth	r3, r3
 801360c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013610:	b29a      	uxth	r2, r3
 8013612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013616:	801a      	strh	r2, [r3, #0]
 8013618:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801361c:	881b      	ldrh	r3, [r3, #0]
 801361e:	b29b      	uxth	r3, r3
 8013620:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013624:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013628:	b29a      	uxth	r2, r3
 801362a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801362e:	801a      	strh	r2, [r3, #0]
 8013630:	e05e      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 8013632:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013636:	2b3e      	cmp	r3, #62	; 0x3e
 8013638:	d818      	bhi.n	801366c <USB_EPStartXfer+0x1502>
 801363a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801363e:	085b      	lsrs	r3, r3, #1
 8013640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013644:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013648:	f003 0301 	and.w	r3, r3, #1
 801364c:	2b00      	cmp	r3, #0
 801364e:	d004      	beq.n	801365a <USB_EPStartXfer+0x14f0>
 8013650:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013654:	3301      	adds	r3, #1
 8013656:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801365a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801365e:	b29b      	uxth	r3, r3
 8013660:	029b      	lsls	r3, r3, #10
 8013662:	b29a      	uxth	r2, r3
 8013664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8013668:	801a      	strh	r2, [r3, #0]
 801366a:	e041      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 801366c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013670:	095b      	lsrs	r3, r3, #5
 8013672:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8013676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801367a:	f003 031f 	and.w	r3, r3, #31
 801367e:	2b00      	cmp	r3, #0
 8013680:	d104      	bne.n	801368c <USB_EPStartXfer+0x1522>
 8013682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013686:	3b01      	subs	r3, #1
 8013688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801368c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8013690:	b29b      	uxth	r3, r3
 8013692:	029b      	lsls	r3, r3, #10
 8013694:	b29b      	uxth	r3, r3
 8013696:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801369a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801369e:	b29a      	uxth	r2, r3
 80136a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80136a4:	801a      	strh	r2, [r3, #0]
 80136a6:	e023      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 80136a8:	463b      	mov	r3, r7
 80136aa:	681b      	ldr	r3, [r3, #0]
 80136ac:	785b      	ldrb	r3, [r3, #1]
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	d11e      	bne.n	80136f0 <USB_EPStartXfer+0x1586>
 80136b2:	1d3b      	adds	r3, r7, #4
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80136ba:	b29b      	uxth	r3, r3
 80136bc:	461a      	mov	r2, r3
 80136be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136c2:	4413      	add	r3, r2
 80136c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80136c8:	463b      	mov	r3, r7
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	781b      	ldrb	r3, [r3, #0]
 80136ce:	00da      	lsls	r2, r3, #3
 80136d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80136d4:	4413      	add	r3, r2
 80136d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80136da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80136de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80136e2:	b29a      	uxth	r2, r3
 80136e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80136e8:	801a      	strh	r2, [r3, #0]
 80136ea:	e001      	b.n	80136f0 <USB_EPStartXfer+0x1586>
 80136ec:	2301      	movs	r3, #1
 80136ee:	e02e      	b.n	801374e <USB_EPStartXfer+0x15e4>
 80136f0:	1d3b      	adds	r3, r7, #4
 80136f2:	681a      	ldr	r2, [r3, #0]
 80136f4:	463b      	mov	r3, r7
 80136f6:	681b      	ldr	r3, [r3, #0]
 80136f8:	781b      	ldrb	r3, [r3, #0]
 80136fa:	009b      	lsls	r3, r3, #2
 80136fc:	4413      	add	r3, r2
 80136fe:	881b      	ldrh	r3, [r3, #0]
 8013700:	b29b      	uxth	r3, r3
 8013702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801370a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801370e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013712:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013716:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801371a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801371e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013722:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8013726:	1d3b      	adds	r3, r7, #4
 8013728:	681a      	ldr	r2, [r3, #0]
 801372a:	463b      	mov	r3, r7
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	441a      	add	r2, r3
 8013734:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8013738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801373c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013748:	b29b      	uxth	r3, r3
 801374a:	8013      	strh	r3, [r2, #0]
 801374c:	2300      	movs	r3, #0
 801374e:	4618      	mov	r0, r3
 8013750:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}

08013758 <USB_EPSetStall>:
 8013758:	b480      	push	{r7}
 801375a:	b085      	sub	sp, #20
 801375c:	af00      	add	r7, sp, #0
 801375e:	6078      	str	r0, [r7, #4]
 8013760:	6039      	str	r1, [r7, #0]
 8013762:	683b      	ldr	r3, [r7, #0]
 8013764:	785b      	ldrb	r3, [r3, #1]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d020      	beq.n	80137ac <USB_EPSetStall+0x54>
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	781b      	ldrb	r3, [r3, #0]
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	4413      	add	r3, r2
 8013774:	881b      	ldrh	r3, [r3, #0]
 8013776:	b29b      	uxth	r3, r3
 8013778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801377c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013780:	81bb      	strh	r3, [r7, #12]
 8013782:	89bb      	ldrh	r3, [r7, #12]
 8013784:	f083 0310 	eor.w	r3, r3, #16
 8013788:	81bb      	strh	r3, [r7, #12]
 801378a:	687a      	ldr	r2, [r7, #4]
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	781b      	ldrb	r3, [r3, #0]
 8013790:	009b      	lsls	r3, r3, #2
 8013792:	441a      	add	r2, r3
 8013794:	89bb      	ldrh	r3, [r7, #12]
 8013796:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801379a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80137a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137a6:	b29b      	uxth	r3, r3
 80137a8:	8013      	strh	r3, [r2, #0]
 80137aa:	e01f      	b.n	80137ec <USB_EPSetStall+0x94>
 80137ac:	687a      	ldr	r2, [r7, #4]
 80137ae:	683b      	ldr	r3, [r7, #0]
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	009b      	lsls	r3, r3, #2
 80137b4:	4413      	add	r3, r2
 80137b6:	881b      	ldrh	r3, [r3, #0]
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80137be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137c2:	81fb      	strh	r3, [r7, #14]
 80137c4:	89fb      	ldrh	r3, [r7, #14]
 80137c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80137ca:	81fb      	strh	r3, [r7, #14]
 80137cc:	687a      	ldr	r2, [r7, #4]
 80137ce:	683b      	ldr	r3, [r7, #0]
 80137d0:	781b      	ldrb	r3, [r3, #0]
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	441a      	add	r2, r3
 80137d6:	89fb      	ldrh	r3, [r7, #14]
 80137d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80137e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80137e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137e8:	b29b      	uxth	r3, r3
 80137ea:	8013      	strh	r3, [r2, #0]
 80137ec:	2300      	movs	r3, #0
 80137ee:	4618      	mov	r0, r3
 80137f0:	3714      	adds	r7, #20
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr

080137fa <USB_EPClearStall>:
 80137fa:	b480      	push	{r7}
 80137fc:	b087      	sub	sp, #28
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	6039      	str	r1, [r7, #0]
 8013804:	683b      	ldr	r3, [r7, #0]
 8013806:	7b1b      	ldrb	r3, [r3, #12]
 8013808:	2b00      	cmp	r3, #0
 801380a:	f040 809d 	bne.w	8013948 <USB_EPClearStall+0x14e>
 801380e:	683b      	ldr	r3, [r7, #0]
 8013810:	785b      	ldrb	r3, [r3, #1]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d04c      	beq.n	80138b0 <USB_EPClearStall+0xb6>
 8013816:	687a      	ldr	r2, [r7, #4]
 8013818:	683b      	ldr	r3, [r7, #0]
 801381a:	781b      	ldrb	r3, [r3, #0]
 801381c:	009b      	lsls	r3, r3, #2
 801381e:	4413      	add	r3, r2
 8013820:	881b      	ldrh	r3, [r3, #0]
 8013822:	823b      	strh	r3, [r7, #16]
 8013824:	8a3b      	ldrh	r3, [r7, #16]
 8013826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801382a:	2b00      	cmp	r3, #0
 801382c:	d01b      	beq.n	8013866 <USB_EPClearStall+0x6c>
 801382e:	687a      	ldr	r2, [r7, #4]
 8013830:	683b      	ldr	r3, [r7, #0]
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	881b      	ldrh	r3, [r3, #0]
 801383a:	b29b      	uxth	r3, r3
 801383c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013844:	81fb      	strh	r3, [r7, #14]
 8013846:	687a      	ldr	r2, [r7, #4]
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	781b      	ldrb	r3, [r3, #0]
 801384c:	009b      	lsls	r3, r3, #2
 801384e:	441a      	add	r2, r3
 8013850:	89fb      	ldrh	r3, [r7, #14]
 8013852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801385a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801385e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013862:	b29b      	uxth	r3, r3
 8013864:	8013      	strh	r3, [r2, #0]
 8013866:	683b      	ldr	r3, [r7, #0]
 8013868:	78db      	ldrb	r3, [r3, #3]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d06c      	beq.n	8013948 <USB_EPClearStall+0x14e>
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	683b      	ldr	r3, [r7, #0]
 8013872:	781b      	ldrb	r3, [r3, #0]
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	4413      	add	r3, r2
 8013878:	881b      	ldrh	r3, [r3, #0]
 801387a:	b29b      	uxth	r3, r3
 801387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013884:	81bb      	strh	r3, [r7, #12]
 8013886:	89bb      	ldrh	r3, [r7, #12]
 8013888:	f083 0320 	eor.w	r3, r3, #32
 801388c:	81bb      	strh	r3, [r7, #12]
 801388e:	687a      	ldr	r2, [r7, #4]
 8013890:	683b      	ldr	r3, [r7, #0]
 8013892:	781b      	ldrb	r3, [r3, #0]
 8013894:	009b      	lsls	r3, r3, #2
 8013896:	441a      	add	r2, r3
 8013898:	89bb      	ldrh	r3, [r7, #12]
 801389a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801389e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80138a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80138a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	8013      	strh	r3, [r2, #0]
 80138ae:	e04b      	b.n	8013948 <USB_EPClearStall+0x14e>
 80138b0:	687a      	ldr	r2, [r7, #4]
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	009b      	lsls	r3, r3, #2
 80138b8:	4413      	add	r3, r2
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	82fb      	strh	r3, [r7, #22]
 80138be:	8afb      	ldrh	r3, [r7, #22]
 80138c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	d01b      	beq.n	8013900 <USB_EPClearStall+0x106>
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	683b      	ldr	r3, [r7, #0]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	009b      	lsls	r3, r3, #2
 80138d0:	4413      	add	r3, r2
 80138d2:	881b      	ldrh	r3, [r3, #0]
 80138d4:	b29b      	uxth	r3, r3
 80138d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138de:	82bb      	strh	r3, [r7, #20]
 80138e0:	687a      	ldr	r2, [r7, #4]
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	009b      	lsls	r3, r3, #2
 80138e8:	441a      	add	r2, r3
 80138ea:	8abb      	ldrh	r3, [r7, #20]
 80138ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80138f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80138f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80138f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138fc:	b29b      	uxth	r3, r3
 80138fe:	8013      	strh	r3, [r2, #0]
 8013900:	687a      	ldr	r2, [r7, #4]
 8013902:	683b      	ldr	r3, [r7, #0]
 8013904:	781b      	ldrb	r3, [r3, #0]
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	4413      	add	r3, r2
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	b29b      	uxth	r3, r3
 801390e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013916:	827b      	strh	r3, [r7, #18]
 8013918:	8a7b      	ldrh	r3, [r7, #18]
 801391a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801391e:	827b      	strh	r3, [r7, #18]
 8013920:	8a7b      	ldrh	r3, [r7, #18]
 8013922:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013926:	827b      	strh	r3, [r7, #18]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	781b      	ldrb	r3, [r3, #0]
 801392e:	009b      	lsls	r3, r3, #2
 8013930:	441a      	add	r2, r3
 8013932:	8a7b      	ldrh	r3, [r7, #18]
 8013934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013944:	b29b      	uxth	r3, r3
 8013946:	8013      	strh	r3, [r2, #0]
 8013948:	2300      	movs	r3, #0
 801394a:	4618      	mov	r0, r3
 801394c:	371c      	adds	r7, #28
 801394e:	46bd      	mov	sp, r7
 8013950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013954:	4770      	bx	lr

08013956 <USB_SetDevAddress>:
 8013956:	b480      	push	{r7}
 8013958:	b083      	sub	sp, #12
 801395a:	af00      	add	r7, sp, #0
 801395c:	6078      	str	r0, [r7, #4]
 801395e:	460b      	mov	r3, r1
 8013960:	70fb      	strb	r3, [r7, #3]
 8013962:	78fb      	ldrb	r3, [r7, #3]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d103      	bne.n	8013970 <USB_SetDevAddress+0x1a>
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2280      	movs	r2, #128	; 0x80
 801396c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 8013970:	2300      	movs	r3, #0
 8013972:	4618      	mov	r0, r3
 8013974:	370c      	adds	r7, #12
 8013976:	46bd      	mov	sp, r7
 8013978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397c:	4770      	bx	lr

0801397e <USB_DevConnect>:
 801397e:	b480      	push	{r7}
 8013980:	b083      	sub	sp, #12
 8013982:	af00      	add	r7, sp, #0
 8013984:	6078      	str	r0, [r7, #4]
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801398c:	b29b      	uxth	r3, r3
 801398e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013992:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013996:	b29a      	uxth	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 801399e:	2300      	movs	r3, #0
 80139a0:	4618      	mov	r0, r3
 80139a2:	370c      	adds	r7, #12
 80139a4:	46bd      	mov	sp, r7
 80139a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139aa:	4770      	bx	lr

080139ac <USB_DevDisconnect>:
 80139ac:	b480      	push	{r7}
 80139ae:	b083      	sub	sp, #12
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80139ba:	b29b      	uxth	r3, r3
 80139bc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80139c0:	b29a      	uxth	r2, r3
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80139c8:	2300      	movs	r3, #0
 80139ca:	4618      	mov	r0, r3
 80139cc:	370c      	adds	r7, #12
 80139ce:	46bd      	mov	sp, r7
 80139d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d4:	4770      	bx	lr

080139d6 <USB_ReadInterrupts>:
 80139d6:	b480      	push	{r7}
 80139d8:	b085      	sub	sp, #20
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80139e4:	b29b      	uxth	r3, r3
 80139e6:	60fb      	str	r3, [r7, #12]
 80139e8:	68fb      	ldr	r3, [r7, #12]
 80139ea:	4618      	mov	r0, r3
 80139ec:	3714      	adds	r7, #20
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <USB_EP0_OutStart>:
 80139f6:	b480      	push	{r7}
 80139f8:	b083      	sub	sp, #12
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	6078      	str	r0, [r7, #4]
 80139fe:	6039      	str	r1, [r7, #0]
 8013a00:	2300      	movs	r3, #0
 8013a02:	4618      	mov	r0, r3
 8013a04:	370c      	adds	r7, #12
 8013a06:	46bd      	mov	sp, r7
 8013a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0c:	4770      	bx	lr

08013a0e <USB_WritePMA>:
 8013a0e:	b480      	push	{r7}
 8013a10:	b08d      	sub	sp, #52	; 0x34
 8013a12:	af00      	add	r7, sp, #0
 8013a14:	60f8      	str	r0, [r7, #12]
 8013a16:	60b9      	str	r1, [r7, #8]
 8013a18:	4611      	mov	r1, r2
 8013a1a:	461a      	mov	r2, r3
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	80fb      	strh	r3, [r7, #6]
 8013a20:	4613      	mov	r3, r2
 8013a22:	80bb      	strh	r3, [r7, #4]
 8013a24:	88bb      	ldrh	r3, [r7, #4]
 8013a26:	3301      	adds	r3, #1
 8013a28:	085b      	lsrs	r3, r3, #1
 8013a2a:	623b      	str	r3, [r7, #32]
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	61fb      	str	r3, [r7, #28]
 8013a30:	68bb      	ldr	r3, [r7, #8]
 8013a32:	627b      	str	r3, [r7, #36]	; 0x24
 8013a34:	88fa      	ldrh	r2, [r7, #6]
 8013a36:	69fb      	ldr	r3, [r7, #28]
 8013a38:	4413      	add	r3, r2
 8013a3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013a3e:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a40:	6a3b      	ldr	r3, [r7, #32]
 8013a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a44:	e01b      	b.n	8013a7e <USB_WritePMA+0x70>
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	781b      	ldrb	r3, [r3, #0]
 8013a4a:	61bb      	str	r3, [r7, #24]
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	3301      	adds	r3, #1
 8013a50:	627b      	str	r3, [r7, #36]	; 0x24
 8013a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a54:	781b      	ldrb	r3, [r3, #0]
 8013a56:	b29b      	uxth	r3, r3
 8013a58:	021b      	lsls	r3, r3, #8
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	69bb      	ldr	r3, [r7, #24]
 8013a60:	4313      	orrs	r3, r2
 8013a62:	617b      	str	r3, [r7, #20]
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	b29a      	uxth	r2, r3
 8013a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6a:	801a      	strh	r2, [r3, #0]
 8013a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6e:	3302      	adds	r3, #2
 8013a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8013a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a74:	3301      	adds	r3, #1
 8013a76:	627b      	str	r3, [r7, #36]	; 0x24
 8013a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a7a:	3b01      	subs	r3, #1
 8013a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d1e0      	bne.n	8013a46 <USB_WritePMA+0x38>
 8013a84:	bf00      	nop
 8013a86:	bf00      	nop
 8013a88:	3734      	adds	r7, #52	; 0x34
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a90:	4770      	bx	lr

08013a92 <USB_ReadPMA>:
 8013a92:	b480      	push	{r7}
 8013a94:	b08b      	sub	sp, #44	; 0x2c
 8013a96:	af00      	add	r7, sp, #0
 8013a98:	60f8      	str	r0, [r7, #12]
 8013a9a:	60b9      	str	r1, [r7, #8]
 8013a9c:	4611      	mov	r1, r2
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	460b      	mov	r3, r1
 8013aa2:	80fb      	strh	r3, [r7, #6]
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	80bb      	strh	r3, [r7, #4]
 8013aa8:	88bb      	ldrh	r3, [r7, #4]
 8013aaa:	085b      	lsrs	r3, r3, #1
 8013aac:	b29b      	uxth	r3, r3
 8013aae:	61bb      	str	r3, [r7, #24]
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	617b      	str	r3, [r7, #20]
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	61fb      	str	r3, [r7, #28]
 8013ab8:	88fa      	ldrh	r2, [r7, #6]
 8013aba:	697b      	ldr	r3, [r7, #20]
 8013abc:	4413      	add	r3, r2
 8013abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013ac2:	623b      	str	r3, [r7, #32]
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8013ac8:	e018      	b.n	8013afc <USB_ReadPMA+0x6a>
 8013aca:	6a3b      	ldr	r3, [r7, #32]
 8013acc:	881b      	ldrh	r3, [r3, #0]
 8013ace:	b29b      	uxth	r3, r3
 8013ad0:	613b      	str	r3, [r7, #16]
 8013ad2:	6a3b      	ldr	r3, [r7, #32]
 8013ad4:	3302      	adds	r3, #2
 8013ad6:	623b      	str	r3, [r7, #32]
 8013ad8:	693b      	ldr	r3, [r7, #16]
 8013ada:	b2da      	uxtb	r2, r3
 8013adc:	69fb      	ldr	r3, [r7, #28]
 8013ade:	701a      	strb	r2, [r3, #0]
 8013ae0:	69fb      	ldr	r3, [r7, #28]
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	61fb      	str	r3, [r7, #28]
 8013ae6:	693b      	ldr	r3, [r7, #16]
 8013ae8:	0a1b      	lsrs	r3, r3, #8
 8013aea:	b2da      	uxtb	r2, r3
 8013aec:	69fb      	ldr	r3, [r7, #28]
 8013aee:	701a      	strb	r2, [r3, #0]
 8013af0:	69fb      	ldr	r3, [r7, #28]
 8013af2:	3301      	adds	r3, #1
 8013af4:	61fb      	str	r3, [r7, #28]
 8013af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013af8:	3b01      	subs	r3, #1
 8013afa:	627b      	str	r3, [r7, #36]	; 0x24
 8013afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d1e3      	bne.n	8013aca <USB_ReadPMA+0x38>
 8013b02:	88bb      	ldrh	r3, [r7, #4]
 8013b04:	f003 0301 	and.w	r3, r3, #1
 8013b08:	b29b      	uxth	r3, r3
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d007      	beq.n	8013b1e <USB_ReadPMA+0x8c>
 8013b0e:	6a3b      	ldr	r3, [r7, #32]
 8013b10:	881b      	ldrh	r3, [r3, #0]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	613b      	str	r3, [r7, #16]
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	b2da      	uxtb	r2, r3
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	701a      	strb	r2, [r3, #0]
 8013b1e:	bf00      	nop
 8013b20:	372c      	adds	r7, #44	; 0x2c
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
	...

08013b2c <__NVIC_SystemReset>:
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013b30:	f3bf 8f4f 	dsb	sy
}
 8013b34:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013b36:	4b06      	ldr	r3, [pc, #24]	; (8013b50 <__NVIC_SystemReset+0x24>)
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013b3e:	4904      	ldr	r1, [pc, #16]	; (8013b50 <__NVIC_SystemReset+0x24>)
 8013b40:	4b04      	ldr	r3, [pc, #16]	; (8013b54 <__NVIC_SystemReset+0x28>)
 8013b42:	4313      	orrs	r3, r2
 8013b44:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013b46:	f3bf 8f4f 	dsb	sy
}
 8013b4a:	bf00      	nop
    __NOP();
 8013b4c:	bf00      	nop
 8013b4e:	e7fd      	b.n	8013b4c <__NVIC_SystemReset+0x20>
 8013b50:	e000ed00 	.word	0xe000ed00
 8013b54:	05fa0004 	.word	0x05fa0004

08013b58 <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	6078      	str	r0, [r7, #4]
 8013b60:	460b      	mov	r3, r1
 8013b62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8013b64:	f240 401c 	movw	r0, #1052	; 0x41c
 8013b68:	f002 fdc2 	bl	80166f0 <USBD_static_malloc>
 8013b6c:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d105      	bne.n	8013b80 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013b74:	687b      	ldr	r3, [r7, #4]
 8013b76:	2200      	movs	r2, #0
 8013b78:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013b7c:	2302      	movs	r3, #2
 8013b7e:	e03f      	b.n	8013c00 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	68fa      	ldr	r2, [r7, #12]
 8013b84:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8013b96:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	2200      	movs	r2, #0
 8013ba6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	2200      	movs	r2, #0
 8013bae:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	2202      	movs	r2, #2
 8013bb6:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	2200      	movs	r2, #0
 8013bbe:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	2200      	movs	r2, #0
 8013bc6:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	2202      	movs	r2, #2
 8013bde:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	2200      	movs	r2, #0
 8013be6:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	4798      	blx	r3
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d001      	beq.n	8013bfe <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	e000      	b.n	8013c00 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3710      	adds	r7, #16
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
 8013c10:	460b      	mov	r3, r1
 8013c12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d101      	bne.n	8013c22 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8013c1e:	2302      	movs	r3, #2
 8013c20:	e027      	b.n	8013c72 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c28:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	2200      	movs	r2, #0
 8013c2e:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8013c32:	68fb      	ldr	r3, [r7, #12]
 8013c34:	2200      	movs	r2, #0
 8013c36:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 8013c3a:	68fb      	ldr	r3, [r7, #12]
 8013c3c:	2202      	movs	r2, #2
 8013c3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	2202      	movs	r2, #2
 8013c4e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c62:	4618      	mov	r0, r3
 8013c64:	f002 fd52 	bl	801670c <USBD_static_free>
  pdev->pClassData = NULL;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8013c70:	2300      	movs	r3, #0
}
 8013c72:	4618      	mov	r0, r3
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}
	...

08013c7c <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b088      	sub	sp, #32
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
 8013c84:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013c8c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013c8e:	2300      	movs	r3, #0
 8013c90:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8013c92:	2300      	movs	r3, #0
 8013c94:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 8013c96:	2300      	movs	r3, #0
 8013c98:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8013c9e:	693b      	ldr	r3, [r7, #16]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d101      	bne.n	8013ca8 <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8013ca4:	2303      	movs	r3, #3
 8013ca6:	e0d5      	b.n	8013e54 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ca8:	683b      	ldr	r3, [r7, #0]
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d03e      	beq.n	8013d32 <USBD_DFU_Setup+0xb6>
 8013cb4:	2b20      	cmp	r3, #32
 8013cb6:	f040 80c5 	bne.w	8013e44 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8013cba:	683b      	ldr	r3, [r7, #0]
 8013cbc:	785b      	ldrb	r3, [r3, #1]
 8013cbe:	2b06      	cmp	r3, #6
 8013cc0:	d82f      	bhi.n	8013d22 <USBD_DFU_Setup+0xa6>
 8013cc2:	a201      	add	r2, pc, #4	; (adr r2, 8013cc8 <USBD_DFU_Setup+0x4c>)
 8013cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc8:	08013d19 	.word	0x08013d19
 8013ccc:	08013ce5 	.word	0x08013ce5
 8013cd0:	08013cef 	.word	0x08013cef
 8013cd4:	08013cf9 	.word	0x08013cf9
 8013cd8:	08013d01 	.word	0x08013d01
 8013cdc:	08013d09 	.word	0x08013d09
 8013ce0:	08013d11 	.word	0x08013d11
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 8013ce4:	6839      	ldr	r1, [r7, #0]
 8013ce6:	6878      	ldr	r0, [r7, #4]
 8013ce8:	f000 fa6c 	bl	80141c4 <DFU_Download>
          break;
 8013cec:	e020      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 8013cee:	6839      	ldr	r1, [r7, #0]
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f000 fad3 	bl	801429c <DFU_Upload>
          break;
 8013cf6:	e01b      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 8013cf8:	6878      	ldr	r0, [r7, #4]
 8013cfa:	f000 fba9 	bl	8014450 <DFU_GetStatus>
          break;
 8013cfe:	e017      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 8013d00:	6878      	ldr	r0, [r7, #4]
 8013d02:	f000 fc5b 	bl	80145bc <DFU_ClearStatus>
          break;
 8013d06:	e013      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 fcab 	bl	8014664 <DFU_GetState>
          break;
 8013d0e:	e00f      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f000 fcbf 	bl	8014694 <DFU_Abort>
          break;
 8013d16:	e00b      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 8013d18:	6839      	ldr	r1, [r7, #0]
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f000 f9ee 	bl	80140fc <DFU_Detach>
          break;
 8013d20:	e006      	b.n	8013d30 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8013d22:	6839      	ldr	r1, [r7, #0]
 8013d24:	6878      	ldr	r0, [r7, #4]
 8013d26:	f001 fde1 	bl	80158ec <USBD_CtlError>
          ret = USBD_FAIL;
 8013d2a:	2303      	movs	r3, #3
 8013d2c:	77fb      	strb	r3, [r7, #31]
          break;
 8013d2e:	bf00      	nop
      }
      break;
 8013d30:	e08f      	b.n	8013e52 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	785b      	ldrb	r3, [r3, #1]
 8013d36:	2b0b      	cmp	r3, #11
 8013d38:	d87b      	bhi.n	8013e32 <USBD_DFU_Setup+0x1b6>
 8013d3a:	a201      	add	r2, pc, #4	; (adr r2, 8013d40 <USBD_DFU_Setup+0xc4>)
 8013d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d40:	08013d71 	.word	0x08013d71
 8013d44:	08013e41 	.word	0x08013e41
 8013d48:	08013e33 	.word	0x08013e33
 8013d4c:	08013e33 	.word	0x08013e33
 8013d50:	08013e33 	.word	0x08013e33
 8013d54:	08013e33 	.word	0x08013e33
 8013d58:	08013d9b 	.word	0x08013d9b
 8013d5c:	08013e33 	.word	0x08013e33
 8013d60:	08013e33 	.word	0x08013e33
 8013d64:	08013e33 	.word	0x08013e33
 8013d68:	08013dc5 	.word	0x08013dc5
 8013d6c:	08013df1 	.word	0x08013df1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d76:	b2db      	uxtb	r3, r3
 8013d78:	2b03      	cmp	r3, #3
 8013d7a:	d107      	bne.n	8013d8c <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013d7c:	f107 030e 	add.w	r3, r7, #14
 8013d80:	2202      	movs	r2, #2
 8013d82:	4619      	mov	r1, r3
 8013d84:	6878      	ldr	r0, [r7, #4]
 8013d86:	f001 fe22 	bl	80159ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013d8a:	e05a      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8013d8c:	6839      	ldr	r1, [r7, #0]
 8013d8e:	6878      	ldr	r0, [r7, #4]
 8013d90:	f001 fdac 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 8013d94:	2303      	movs	r3, #3
 8013d96:	77fb      	strb	r3, [r7, #31]
          break;
 8013d98:	e053      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 8013d9a:	683b      	ldr	r3, [r7, #0]
 8013d9c:	885b      	ldrh	r3, [r3, #2]
 8013d9e:	0a1b      	lsrs	r3, r3, #8
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	2b21      	cmp	r3, #33	; 0x21
 8013da4:	d107      	bne.n	8013db6 <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 8013da6:	4b2d      	ldr	r3, [pc, #180]	; (8013e5c <USBD_DFU_Setup+0x1e0>)
 8013da8:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	88db      	ldrh	r3, [r3, #6]
 8013dae:	2b09      	cmp	r3, #9
 8013db0:	bf28      	it	cs
 8013db2:	2309      	movcs	r3, #9
 8013db4:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8013db6:	8afb      	ldrh	r3, [r7, #22]
 8013db8:	461a      	mov	r2, r3
 8013dba:	69b9      	ldr	r1, [r7, #24]
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f001 fe06 	bl	80159ce <USBD_CtlSendData>
          break;
 8013dc2:	e03e      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	2b03      	cmp	r3, #3
 8013dce:	d108      	bne.n	8013de2 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 8013dd0:	693b      	ldr	r3, [r7, #16]
 8013dd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	4619      	mov	r1, r3
 8013dda:	6878      	ldr	r0, [r7, #4]
 8013ddc:	f001 fdf7 	bl	80159ce <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013de0:	e02f      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8013de2:	6839      	ldr	r1, [r7, #0]
 8013de4:	6878      	ldr	r0, [r7, #4]
 8013de6:	f001 fd81 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 8013dea:	2303      	movs	r3, #3
 8013dec:	77fb      	strb	r3, [r7, #31]
          break;
 8013dee:	e028      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	885b      	ldrh	r3, [r3, #2]
 8013df4:	b2db      	uxtb	r3, r3
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d114      	bne.n	8013e24 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e00:	b2db      	uxtb	r3, r3
 8013e02:	2b03      	cmp	r3, #3
 8013e04:	d107      	bne.n	8013e16 <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 8013e06:	683b      	ldr	r3, [r7, #0]
 8013e08:	885b      	ldrh	r3, [r3, #2]
 8013e0a:	b2db      	uxtb	r3, r3
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013e14:	e015      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 8013e16:	6839      	ldr	r1, [r7, #0]
 8013e18:	6878      	ldr	r0, [r7, #4]
 8013e1a:	f001 fd67 	bl	80158ec <USBD_CtlError>
              ret = USBD_FAIL;
 8013e1e:	2303      	movs	r3, #3
 8013e20:	77fb      	strb	r3, [r7, #31]
          break;
 8013e22:	e00e      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8013e24:	6839      	ldr	r1, [r7, #0]
 8013e26:	6878      	ldr	r0, [r7, #4]
 8013e28:	f001 fd60 	bl	80158ec <USBD_CtlError>
            ret = USBD_FAIL;
 8013e2c:	2303      	movs	r3, #3
 8013e2e:	77fb      	strb	r3, [r7, #31]
          break;
 8013e30:	e007      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013e32:	6839      	ldr	r1, [r7, #0]
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f001 fd59 	bl	80158ec <USBD_CtlError>
          ret = USBD_FAIL;
 8013e3a:	2303      	movs	r3, #3
 8013e3c:	77fb      	strb	r3, [r7, #31]
          break;
 8013e3e:	e000      	b.n	8013e42 <USBD_DFU_Setup+0x1c6>
          break;
 8013e40:	bf00      	nop
      }
      break;
 8013e42:	e006      	b.n	8013e52 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8013e44:	6839      	ldr	r1, [r7, #0]
 8013e46:	6878      	ldr	r0, [r7, #4]
 8013e48:	f001 fd50 	bl	80158ec <USBD_CtlError>
      ret = USBD_FAIL;
 8013e4c:	2303      	movs	r3, #3
 8013e4e:	77fb      	strb	r3, [r7, #31]
      break;
 8013e50:	bf00      	nop
  }

  return (uint8_t)ret;
 8013e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3720      	adds	r7, #32
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}
 8013e5c:	200007fa 	.word	0x200007fa

08013e60 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	221b      	movs	r2, #27
 8013e6c:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8013e6e:	4b03      	ldr	r3, [pc, #12]	; (8013e7c <USBD_DFU_GetCfgDesc+0x1c>)
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr
 8013e7c:	200007e8 	.word	0x200007e8

08013e80 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013e80:	b480      	push	{r7}
 8013e82:	b083      	sub	sp, #12
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8013e88:	2300      	movs	r3, #0
}
 8013e8a:	4618      	mov	r0, r3
 8013e8c:	370c      	adds	r7, #12
 8013e8e:	46bd      	mov	sp, r7
 8013e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e94:	4770      	bx	lr

08013e96 <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8013e96:	b580      	push	{r7, lr}
 8013e98:	b088      	sub	sp, #32
 8013e9a:	af00      	add	r7, sp, #0
 8013e9c:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ea4:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013eac:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 8013eae:	69fb      	ldr	r3, [r7, #28]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d101      	bne.n	8013eb8 <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013eb4:	2303      	movs	r3, #3
 8013eb6:	e0ce      	b.n	8014056 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 8013eb8:	69fb      	ldr	r3, [r7, #28]
 8013eba:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8013ebe:	2b04      	cmp	r3, #4
 8013ec0:	f040 80bd 	bne.w	801403e <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 8013ec4:	69fb      	ldr	r3, [r7, #28]
 8013ec6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d17c      	bne.n	8013fc8 <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 8013ece:	69fb      	ldr	r3, [r7, #28]
 8013ed0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013ed4:	2b01      	cmp	r3, #1
 8013ed6:	f000 8093 	beq.w	8014000 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013ee0:	2b05      	cmp	r3, #5
 8013ee2:	d15e      	bne.n	8013fa2 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 8013ee4:	69fb      	ldr	r3, [r7, #28]
 8013ee6:	781b      	ldrb	r3, [r3, #0]
 8013ee8:	2b21      	cmp	r3, #33	; 0x21
 8013eea:	d124      	bne.n	8013f36 <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	785b      	ldrb	r3, [r3, #1]
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	69fb      	ldr	r3, [r7, #28]
 8013ef4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8013ef8:	69fb      	ldr	r3, [r7, #28]
 8013efa:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013efe:	69fb      	ldr	r3, [r7, #28]
 8013f00:	789b      	ldrb	r3, [r3, #2]
 8013f02:	021b      	lsls	r3, r3, #8
 8013f04:	441a      	add	r2, r3
 8013f06:	69fb      	ldr	r3, [r7, #28]
 8013f08:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8013f0c:	69fb      	ldr	r3, [r7, #28]
 8013f0e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013f12:	69fb      	ldr	r3, [r7, #28]
 8013f14:	78db      	ldrb	r3, [r3, #3]
 8013f16:	041b      	lsls	r3, r3, #16
 8013f18:	441a      	add	r2, r3
 8013f1a:	69fb      	ldr	r3, [r7, #28]
 8013f1c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8013f20:	69fb      	ldr	r3, [r7, #28]
 8013f22:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013f26:	69fb      	ldr	r3, [r7, #28]
 8013f28:	791b      	ldrb	r3, [r3, #4]
 8013f2a:	061b      	lsls	r3, r3, #24
 8013f2c:	441a      	add	r2, r3
 8013f2e:	69fb      	ldr	r3, [r7, #28]
 8013f30:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8013f34:	e064      	b.n	8014000 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 8013f36:	69fb      	ldr	r3, [r7, #28]
 8013f38:	781b      	ldrb	r3, [r3, #0]
 8013f3a:	2b41      	cmp	r3, #65	; 0x41
 8013f3c:	d12f      	bne.n	8013f9e <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8013f3e:	69fb      	ldr	r3, [r7, #28]
 8013f40:	785b      	ldrb	r3, [r3, #1]
 8013f42:	461a      	mov	r2, r3
 8013f44:	69fb      	ldr	r3, [r7, #28]
 8013f46:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	789b      	ldrb	r3, [r3, #2]
 8013f54:	021b      	lsls	r3, r3, #8
 8013f56:	441a      	add	r2, r3
 8013f58:	69fb      	ldr	r3, [r7, #28]
 8013f5a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8013f5e:	69fb      	ldr	r3, [r7, #28]
 8013f60:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013f64:	69fb      	ldr	r3, [r7, #28]
 8013f66:	78db      	ldrb	r3, [r3, #3]
 8013f68:	041b      	lsls	r3, r3, #16
 8013f6a:	441a      	add	r2, r3
 8013f6c:	69fb      	ldr	r3, [r7, #28]
 8013f6e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8013f72:	69fb      	ldr	r3, [r7, #28]
 8013f74:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8013f78:	69fb      	ldr	r3, [r7, #28]
 8013f7a:	791b      	ldrb	r3, [r3, #4]
 8013f7c:	061b      	lsls	r3, r3, #24
 8013f7e:	441a      	add	r2, r3
 8013f80:	69fb      	ldr	r3, [r7, #28]
 8013f82:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 8013f86:	69bb      	ldr	r3, [r7, #24]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	69fa      	ldr	r2, [r7, #28]
 8013f8c:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8013f90:	4610      	mov	r0, r2
 8013f92:	4798      	blx	r3
 8013f94:	4603      	mov	r3, r0
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d032      	beq.n	8014000 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 8013f9a:	2303      	movs	r3, #3
 8013f9c:	e05b      	b.n	8014056 <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8013f9e:	2303      	movs	r3, #3
 8013fa0:	e059      	b.n	8014056 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8013fa2:	69fb      	ldr	r3, [r7, #28]
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 8013faa:	69fb      	ldr	r3, [r7, #28]
 8013fac:	2200      	movs	r2, #0
 8013fae:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 8013fba:	f107 030c 	add.w	r3, r7, #12
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f001 fc93 	bl	80158ec <USBD_CtlError>
 8013fc6:	e01b      	b.n	8014000 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 8013fc8:	69fb      	ldr	r3, [r7, #28]
 8013fca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013fce:	2b01      	cmp	r3, #1
 8013fd0:	d916      	bls.n	8014000 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8013fd2:	69fb      	ldr	r3, [r7, #28]
 8013fd4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8013fd8:	3b02      	subs	r3, #2
 8013fda:	029a      	lsls	r2, r3, #10
 8013fdc:	69fb      	ldr	r3, [r7, #28]
 8013fde:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8013fe2:	4413      	add	r3, r2
 8013fe4:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	69f8      	ldr	r0, [r7, #28]
 8013fec:	6979      	ldr	r1, [r7, #20]
 8013fee:	69fa      	ldr	r2, [r7, #28]
 8013ff0:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8013ff4:	4798      	blx	r3
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d001      	beq.n	8014000 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 8013ffc:	2303      	movs	r3, #3
 8013ffe:	e02a      	b.n	8014056 <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 8014000:	69fb      	ldr	r3, [r7, #28]
 8014002:	2200      	movs	r2, #0
 8014004:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 8014008:	69fb      	ldr	r3, [r7, #28]
 801400a:	2200      	movs	r2, #0
 801400c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	2203      	movs	r2, #3
 8014014:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	2200      	movs	r2, #0
 801401c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8014020:	69fb      	ldr	r3, [r7, #28]
 8014022:	2200      	movs	r2, #0
 8014024:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8014028:	69fb      	ldr	r3, [r7, #28]
 801402a:	2200      	movs	r2, #0
 801402c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8014030:	69fb      	ldr	r3, [r7, #28]
 8014032:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014036:	69fb      	ldr	r3, [r7, #28]
 8014038:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 801403c:	e00a      	b.n	8014054 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 801403e:	69fb      	ldr	r3, [r7, #28]
 8014040:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014044:	2b07      	cmp	r3, #7
 8014046:	d103      	bne.n	8014050 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 8014048:	6878      	ldr	r0, [r7, #4]
 801404a:	f000 fb75 	bl	8014738 <DFU_Leave>
 801404e:	e001      	b.n	8014054 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8014050:	2303      	movs	r3, #3
 8014052:	e000      	b.n	8014056 <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8014054:	2300      	movs	r3, #0
}
 8014056:	4618      	mov	r0, r3
 8014058:	3720      	adds	r7, #32
 801405a:	46bd      	mov	sp, r7
 801405c:	bd80      	pop	{r7, pc}

0801405e <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 801405e:	b480      	push	{r7}
 8014060:	b083      	sub	sp, #12
 8014062:	af00      	add	r7, sp, #0
 8014064:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8014066:	2300      	movs	r3, #0
}
 8014068:	4618      	mov	r0, r3
 801406a:	370c      	adds	r7, #12
 801406c:	46bd      	mov	sp, r7
 801406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014072:	4770      	bx	lr

08014074 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8014074:	b480      	push	{r7}
 8014076:	b083      	sub	sp, #12
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	220a      	movs	r2, #10
 8014080:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8014082:	4b03      	ldr	r3, [pc, #12]	; (8014090 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8014084:	4618      	mov	r0, r3
 8014086:	370c      	adds	r7, #12
 8014088:	46bd      	mov	sp, r7
 801408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801408e:	4770      	bx	lr
 8014090:	20000804 	.word	0x20000804

08014094 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b086      	sub	sp, #24
 8014098:	af00      	add	r7, sp, #0
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	460b      	mov	r3, r1
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80140a8:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 80140aa:	7afb      	ldrb	r3, [r7, #11]
 80140ac:	2b06      	cmp	r3, #6
 80140ae:	d808      	bhi.n	80140c2 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80140b0:	697b      	ldr	r3, [r7, #20]
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	687a      	ldr	r2, [r7, #4]
 80140b6:	4905      	ldr	r1, [pc, #20]	; (80140cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80140b8:	4618      	mov	r0, r3
 80140ba:	f001 fc28 	bl	801590e <USBD_GetString>
    return USBD_StrDesc;
 80140be:	4b03      	ldr	r3, [pc, #12]	; (80140cc <USBD_DFU_GetUsrStringDesc+0x38>)
 80140c0:	e000      	b.n	80140c4 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80140c2:	2300      	movs	r3, #0
  }
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	3718      	adds	r7, #24
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	20000b8c 	.word	0x20000b8c

080140d0 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80140d0:	b480      	push	{r7}
 80140d2:	b083      	sub	sp, #12
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80140da:	683b      	ldr	r3, [r7, #0]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d101      	bne.n	80140e4 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80140e0:	2303      	movs	r3, #3
 80140e2:	e004      	b.n	80140ee <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	683a      	ldr	r2, [r7, #0]
 80140e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80140ec:	2300      	movs	r3, #0
}
 80140ee:	4618      	mov	r0, r3
 80140f0:	370c      	adds	r7, #12
 80140f2:	46bd      	mov	sp, r7
 80140f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f8:	4770      	bx	lr
	...

080140fc <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140fc:	b580      	push	{r7, lr}
 80140fe:	b084      	sub	sp, #16
 8014100:	af00      	add	r7, sp, #0
 8014102:	6078      	str	r0, [r7, #4]
 8014104:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801410c:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d051      	beq.n	80141b8 <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8014114:	68fb      	ldr	r3, [r7, #12]
 8014116:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 801411a:	2b02      	cmp	r3, #2
 801411c:	d013      	beq.n	8014146 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8014124:	2b03      	cmp	r3, #3
 8014126:	d00e      	beq.n	8014146 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 801412e:	2b05      	cmp	r3, #5
 8014130:	d009      	beq.n	8014146 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8014138:	2b06      	cmp	r3, #6
 801413a:	d004      	beq.n	8014146 <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8014142:	2b09      	cmp	r3, #9
 8014144:	d125      	bne.n	8014192 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	2202      	movs	r2, #2
 801414a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 801414e:	68fb      	ldr	r3, [r7, #12]
 8014150:	2200      	movs	r2, #0
 8014152:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	2200      	movs	r2, #0
 801415a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2200      	movs	r2, #0
 8014162:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	2200      	movs	r2, #0
 801416a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	2200      	movs	r2, #0
 801417e:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2200      	movs	r2, #0
 8014186:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	2200      	movs	r2, #0
 801418e:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8014192:	4b0b      	ldr	r3, [pc, #44]	; (80141c0 <DFU_Detach+0xc4>)
 8014194:	7d5b      	ldrb	r3, [r3, #21]
 8014196:	f003 0310 	and.w	r3, r3, #16
 801419a:	2b00      	cmp	r3, #0
 801419c:	d006      	beq.n	80141ac <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 801419e:	6878      	ldr	r0, [r7, #4]
 80141a0:	f000 fbab 	bl	80148fa <USBD_Stop>
    (void)USBD_Start(pdev);
 80141a4:	6878      	ldr	r0, [r7, #4]
 80141a6:	f000 fb9c 	bl	80148e2 <USBD_Start>
 80141aa:	e006      	b.n	80141ba <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 80141ac:	683b      	ldr	r3, [r7, #0]
 80141ae:	885b      	ldrh	r3, [r3, #2]
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7f6 f90f 	bl	800a3d4 <HAL_Delay>
 80141b6:	e000      	b.n	80141ba <DFU_Detach+0xbe>
    return;
 80141b8:	bf00      	nop
  }
}
 80141ba:	3710      	adds	r7, #16
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	200007e8 	.word	0x200007e8

080141c4 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80141c4:	b580      	push	{r7, lr}
 80141c6:	b084      	sub	sp, #16
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
 80141cc:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80141d4:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d05b      	beq.n	8014294 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80141dc:	683b      	ldr	r3, [r7, #0]
 80141de:	88db      	ldrh	r3, [r3, #6]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d02d      	beq.n	8014240 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80141ea:	2b02      	cmp	r3, #2
 80141ec:	d004      	beq.n	80141f8 <DFU_Download+0x34>
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80141f4:	2b05      	cmp	r3, #5
 80141f6:	d11e      	bne.n	8014236 <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	885b      	ldrh	r3, [r3, #2]
 80141fc:	461a      	mov	r2, r3
 80141fe:	68fb      	ldr	r3, [r7, #12]
 8014200:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8014204:	683b      	ldr	r3, [r7, #0]
 8014206:	88db      	ldrh	r3, [r3, #6]
 8014208:	461a      	mov	r2, r3
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	2203      	movs	r2, #3
 8014214:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8014218:	68fb      	ldr	r3, [r7, #12]
 801421a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801421e:	68fb      	ldr	r3, [r7, #12]
 8014220:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8014224:	68f9      	ldr	r1, [r7, #12]
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801422c:	461a      	mov	r2, r3
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f001 fbf9 	bl	8015a26 <USBD_CtlPrepareRx>
 8014234:	e02f      	b.n	8014296 <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8014236:	6839      	ldr	r1, [r7, #0]
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f001 fb57 	bl	80158ec <USBD_CtlError>
 801423e:	e02a      	b.n	8014296 <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8014240:	68fb      	ldr	r3, [r7, #12]
 8014242:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014246:	2b05      	cmp	r3, #5
 8014248:	d004      	beq.n	8014254 <DFU_Download+0x90>
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014250:	2b02      	cmp	r3, #2
 8014252:	d11a      	bne.n	801428a <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	2201      	movs	r2, #1
 8014258:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	2206      	movs	r2, #6
 8014260:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	2200      	movs	r2, #0
 8014268:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	2200      	movs	r2, #0
 8014270:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	2200      	movs	r2, #0
 8014278:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8014288:	e005      	b.n	8014296 <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801428a:	6839      	ldr	r1, [r7, #0]
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f001 fb2d 	bl	80158ec <USBD_CtlError>
 8014292:	e000      	b.n	8014296 <DFU_Download+0xd2>
    return;
 8014294:	bf00      	nop
    }
  }
}
 8014296:	3710      	adds	r7, #16
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}

0801429c <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801429c:	b580      	push	{r7, lr}
 801429e:	b086      	sub	sp, #24
 80142a0:	af00      	add	r7, sp, #0
 80142a2:	6078      	str	r0, [r7, #4]
 80142a4:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142ac:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 80142ae:	687b      	ldr	r3, [r7, #4]
 80142b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142b4:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 80142b6:	697b      	ldr	r3, [r7, #20]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	f000 80c4 	beq.w	8014446 <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 80142be:	683b      	ldr	r3, [r7, #0]
 80142c0:	88db      	ldrh	r3, [r3, #6]
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	f000 80a8 	beq.w	8014418 <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80142c8:	697b      	ldr	r3, [r7, #20]
 80142ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80142ce:	2b02      	cmp	r3, #2
 80142d0:	d005      	beq.n	80142de <DFU_Upload+0x42>
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80142d8:	2b09      	cmp	r3, #9
 80142da:	f040 8090 	bne.w	80143fe <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	885b      	ldrh	r3, [r3, #2]
 80142e2:	461a      	mov	r2, r3
 80142e4:	697b      	ldr	r3, [r7, #20]
 80142e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	88db      	ldrh	r3, [r3, #6]
 80142ee:	461a      	mov	r2, r3
 80142f0:	697b      	ldr	r3, [r7, #20]
 80142f2:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 80142f6:	697b      	ldr	r3, [r7, #20]
 80142f8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d12c      	bne.n	801435a <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8014300:	697b      	ldr	r3, [r7, #20]
 8014302:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014306:	2b03      	cmp	r3, #3
 8014308:	d901      	bls.n	801430e <DFU_Upload+0x72>
 801430a:	2202      	movs	r2, #2
 801430c:	e000      	b.n	8014310 <DFU_Upload+0x74>
 801430e:	2209      	movs	r2, #9
 8014310:	697b      	ldr	r3, [r7, #20]
 8014312:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8014316:	697b      	ldr	r3, [r7, #20]
 8014318:	2200      	movs	r2, #0
 801431a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	2200      	movs	r2, #0
 8014322:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	2200      	movs	r2, #0
 801432a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801432e:	697b      	ldr	r3, [r7, #20]
 8014330:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	2200      	movs	r2, #0
 801433e:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	2221      	movs	r2, #33	; 0x21
 8014344:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8014346:	697b      	ldr	r3, [r7, #20]
 8014348:	2241      	movs	r2, #65	; 0x41
 801434a:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 801434c:	697b      	ldr	r3, [r7, #20]
 801434e:	2203      	movs	r2, #3
 8014350:	4619      	mov	r1, r3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f001 fb3b 	bl	80159ce <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8014358:	e076      	b.n	8014448 <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 801435a:	697b      	ldr	r3, [r7, #20]
 801435c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014360:	2b01      	cmp	r3, #1
 8014362:	d931      	bls.n	80143c8 <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8014364:	697b      	ldr	r3, [r7, #20]
 8014366:	2209      	movs	r2, #9
 8014368:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	2200      	movs	r2, #0
 8014370:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8014374:	697b      	ldr	r3, [r7, #20]
 8014376:	2200      	movs	r2, #0
 8014378:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801437c:	697b      	ldr	r3, [r7, #20]
 801437e:	2200      	movs	r2, #0
 8014380:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8014384:	697b      	ldr	r3, [r7, #20]
 8014386:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801438a:	697b      	ldr	r3, [r7, #20]
 801438c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8014390:	697b      	ldr	r3, [r7, #20]
 8014392:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8014396:	3b02      	subs	r3, #2
 8014398:	029a      	lsls	r2, r3, #10
 801439a:	697b      	ldr	r3, [r7, #20]
 801439c:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80143a0:	4413      	add	r3, r2
 80143a2:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 80143a4:	693b      	ldr	r3, [r7, #16]
 80143a6:	695b      	ldr	r3, [r3, #20]
 80143a8:	68f8      	ldr	r0, [r7, #12]
 80143aa:	6979      	ldr	r1, [r7, #20]
 80143ac:	697a      	ldr	r2, [r7, #20]
 80143ae:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80143b2:	4798      	blx	r3
 80143b4:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 80143b6:	697b      	ldr	r3, [r7, #20]
 80143b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80143bc:	461a      	mov	r2, r3
 80143be:	68b9      	ldr	r1, [r7, #8]
 80143c0:	6878      	ldr	r0, [r7, #4]
 80143c2:	f001 fb04 	bl	80159ce <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 80143c6:	e03f      	b.n	8014448 <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 80143c8:	697b      	ldr	r3, [r7, #20]
 80143ca:	220f      	movs	r2, #15
 80143cc:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 80143d0:	697b      	ldr	r3, [r7, #20]
 80143d2:	2200      	movs	r2, #0
 80143d4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	2200      	movs	r2, #0
 80143dc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80143e0:	697b      	ldr	r3, [r7, #20]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80143e8:	697b      	ldr	r3, [r7, #20]
 80143ea:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80143ee:	697b      	ldr	r3, [r7, #20]
 80143f0:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 80143f4:	6839      	ldr	r1, [r7, #0]
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f001 fa78 	bl	80158ec <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 80143fc:	e024      	b.n	8014448 <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	2200      	movs	r2, #0
 8014402:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	2200      	movs	r2, #0
 801440a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 801440e:	6839      	ldr	r1, [r7, #0]
 8014410:	6878      	ldr	r0, [r7, #4]
 8014412:	f001 fa6b 	bl	80158ec <USBD_CtlError>
 8014416:	e017      	b.n	8014448 <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8014418:	697b      	ldr	r3, [r7, #20]
 801441a:	2202      	movs	r2, #2
 801441c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8014420:	697b      	ldr	r3, [r7, #20]
 8014422:	2200      	movs	r2, #0
 8014424:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	2200      	movs	r2, #0
 801442c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8014430:	697b      	ldr	r3, [r7, #20]
 8014432:	2200      	movs	r2, #0
 8014434:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801443e:	697b      	ldr	r3, [r7, #20]
 8014440:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8014444:	e000      	b.n	8014448 <DFU_Upload+0x1ac>
    return;
 8014446:	bf00      	nop
  }
}
 8014448:	3718      	adds	r7, #24
 801444a:	46bd      	mov	sp, r7
 801444c:	bd80      	pop	{r7, pc}
	...

08014450 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8014450:	b580      	push	{r7, lr}
 8014452:	b084      	sub	sp, #16
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801445e:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014466:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2b00      	cmp	r3, #0
 801446c:	f000 80a0 	beq.w	80145b0 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8014476:	2b03      	cmp	r3, #3
 8014478:	d002      	beq.n	8014480 <DFU_GetStatus+0x30>
 801447a:	2b06      	cmp	r3, #6
 801447c:	d051      	beq.n	8014522 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 801447e:	e08e      	b.n	801459e <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8014486:	2b00      	cmp	r3, #0
 8014488:	d034      	beq.n	80144f4 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	2204      	movs	r2, #4
 801448e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8014492:	68fb      	ldr	r3, [r7, #12]
 8014494:	2200      	movs	r2, #0
 8014496:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2200      	movs	r2, #0
 801449e:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	2200      	movs	r2, #0
 80144a6:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 80144aa:	68fb      	ldr	r3, [r7, #12]
 80144ac:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80144b0:	68fb      	ldr	r3, [r7, #12]
 80144b2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 80144b6:	68fb      	ldr	r3, [r7, #12]
 80144b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10e      	bne.n	80144de <DFU_GetStatus+0x8e>
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	2b41      	cmp	r3, #65	; 0x41
 80144c6:	d10a      	bne.n	80144de <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 80144c8:	68bb      	ldr	r3, [r7, #8]
 80144ca:	699b      	ldr	r3, [r3, #24]
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80144d2:	68fa      	ldr	r2, [r7, #12]
 80144d4:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80144d8:	2100      	movs	r1, #0
 80144da:	4798      	blx	r3
      break;
 80144dc:	e05f      	b.n	801459e <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 80144de:	68bb      	ldr	r3, [r7, #8]
 80144e0:	699b      	ldr	r3, [r3, #24]
 80144e2:	68fa      	ldr	r2, [r7, #12]
 80144e4:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 80144ee:	2101      	movs	r1, #1
 80144f0:	4798      	blx	r3
      break;
 80144f2:	e054      	b.n	801459e <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2205      	movs	r2, #5
 80144f8:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	2200      	movs	r2, #0
 8014500:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2200      	movs	r2, #0
 8014508:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	2200      	movs	r2, #0
 8014510:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8014514:	68fb      	ldr	r3, [r7, #12]
 8014516:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8014520:	e03d      	b.n	801459e <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8014528:	2b01      	cmp	r3, #1
 801452a:	d116      	bne.n	801455a <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 801452c:	68fb      	ldr	r3, [r7, #12]
 801452e:	2207      	movs	r2, #7
 8014530:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2201      	movs	r2, #1
 8014538:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	2200      	movs	r2, #0
 8014540:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2200      	movs	r2, #0
 8014548:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8014558:	e020      	b.n	801459c <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8014560:	2b00      	cmp	r3, #0
 8014562:	d11b      	bne.n	801459c <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8014564:	4b14      	ldr	r3, [pc, #80]	; (80145b8 <DFU_GetStatus+0x168>)
 8014566:	7d1b      	ldrb	r3, [r3, #20]
 8014568:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 801456c:	2b00      	cmp	r3, #0
 801456e:	d015      	beq.n	801459c <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2202      	movs	r2, #2
 8014574:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	2200      	movs	r2, #0
 801457c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	2200      	movs	r2, #0
 8014584:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2200      	movs	r2, #0
 801458c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014596:	68fb      	ldr	r3, [r7, #12]
 8014598:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 801459c:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 801459e:	68fb      	ldr	r3, [r7, #12]
 80145a0:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80145a4:	2206      	movs	r2, #6
 80145a6:	4619      	mov	r1, r3
 80145a8:	6878      	ldr	r0, [r7, #4]
 80145aa:	f001 fa10 	bl	80159ce <USBD_CtlSendData>
 80145ae:	e000      	b.n	80145b2 <DFU_GetStatus+0x162>
    return;
 80145b0:	bf00      	nop
}
 80145b2:	3710      	adds	r7, #16
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}
 80145b8:	200007e8 	.word	0x200007e8

080145bc <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145ca:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d042      	beq.n	8014658 <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80145d8:	2b0a      	cmp	r3, #10
 80145da:	d11e      	bne.n	801461a <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	2202      	movs	r2, #2
 80145e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	2200      	movs	r2, #0
 80145e8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	2200      	movs	r2, #0
 80145f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	2200      	movs	r2, #0
 80145f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	2200      	movs	r2, #0
 8014600:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8014604:	68fb      	ldr	r3, [r7, #12]
 8014606:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8014610:	68fb      	ldr	r3, [r7, #12]
 8014612:	2200      	movs	r2, #0
 8014614:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8014618:	e01f      	b.n	801465a <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 801461a:	68fb      	ldr	r3, [r7, #12]
 801461c:	220a      	movs	r2, #10
 801461e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	220e      	movs	r2, #14
 8014626:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	2200      	movs	r2, #0
 801462e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2200      	movs	r2, #0
 8014636:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	2200      	movs	r2, #0
 801463e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8014642:	68fb      	ldr	r3, [r7, #12]
 8014644:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014648:	68fb      	ldr	r3, [r7, #12]
 801464a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2200      	movs	r2, #0
 8014652:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8014656:	e000      	b.n	801465a <DFU_ClearStatus+0x9e>
    return;
 8014658:	bf00      	nop
  }
}
 801465a:	3714      	adds	r7, #20
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b084      	sub	sp, #16
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014672:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	2b00      	cmp	r3, #0
 8014678:	d008      	beq.n	801468c <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8014680:	2201      	movs	r2, #1
 8014682:	4619      	mov	r1, r3
 8014684:	6878      	ldr	r0, [r7, #4]
 8014686:	f001 f9a2 	bl	80159ce <USBD_CtlSendData>
 801468a:	e000      	b.n	801468e <DFU_GetState+0x2a>
    return;
 801468c:	bf00      	nop
}
 801468e:	3710      	adds	r7, #16
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8014694:	b480      	push	{r7}
 8014696:	b085      	sub	sp, #20
 8014698:	af00      	add	r7, sp, #0
 801469a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80146a2:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d03f      	beq.n	801472a <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80146b0:	2b02      	cmp	r3, #2
 80146b2:	d013      	beq.n	80146dc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 80146ba:	2b03      	cmp	r3, #3
 80146bc:	d00e      	beq.n	80146dc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 80146c4:	2b05      	cmp	r3, #5
 80146c6:	d009      	beq.n	80146dc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 80146ce:	2b06      	cmp	r3, #6
 80146d0:	d004      	beq.n	80146dc <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 80146d8:	2b09      	cmp	r3, #9
 80146da:	d127      	bne.n	801472c <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	2202      	movs	r2, #2
 80146e0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 80146e4:	68fb      	ldr	r3, [r7, #12]
 80146e6:	2200      	movs	r2, #0
 80146e8:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	2200      	movs	r2, #0
 80146f0:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	2200      	movs	r2, #0
 80146f8:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 80146fc:	68fb      	ldr	r3, [r7, #12]
 80146fe:	2200      	movs	r2, #0
 8014700:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8014704:	68fb      	ldr	r3, [r7, #12]
 8014706:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8014710:	68fb      	ldr	r3, [r7, #12]
 8014712:	2200      	movs	r2, #0
 8014714:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	2200      	movs	r2, #0
 801471c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	2200      	movs	r2, #0
 8014724:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8014728:	e000      	b.n	801472c <DFU_Abort+0x98>
    return;
 801472a:	bf00      	nop
  }
}
 801472c:	3714      	adds	r7, #20
 801472e:	46bd      	mov	sp, r7
 8014730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014734:	4770      	bx	lr
	...

08014738 <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 8014738:	b580      	push	{r7, lr}
 801473a:	b084      	sub	sp, #16
 801473c:	af00      	add	r7, sp, #0
 801473e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014746:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8014748:	68fb      	ldr	r3, [r7, #12]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d03b      	beq.n	80147c6 <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2200      	movs	r2, #0
 8014752:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 8014756:	4b1e      	ldr	r3, [pc, #120]	; (80147d0 <DFU_Leave+0x98>)
 8014758:	7d1b      	ldrb	r3, [r3, #20]
 801475a:	f003 0304 	and.w	r3, r3, #4
 801475e:	2b00      	cmp	r3, #0
 8014760:	d016      	beq.n	8014790 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8014762:	68fb      	ldr	r3, [r7, #12]
 8014764:	2206      	movs	r2, #6
 8014766:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	2200      	movs	r2, #0
 801476e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8014772:	68fb      	ldr	r3, [r7, #12]
 8014774:	2200      	movs	r2, #0
 8014776:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801477a:	68fb      	ldr	r3, [r7, #12]
 801477c:	2200      	movs	r2, #0
 801477e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8014782:	68fb      	ldr	r3, [r7, #12]
 8014784:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 801478e:	e01b      	b.n	80147c8 <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8014790:	68fb      	ldr	r3, [r7, #12]
 8014792:	2208      	movs	r2, #8
 8014794:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8014798:	68fb      	ldr	r3, [r7, #12]
 801479a:	2200      	movs	r2, #0
 801479c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	2200      	movs	r2, #0
 80147a4:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2200      	movs	r2, #0
 80147ac:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f000 f89c 	bl	80148fa <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80147c2:	f7ff f9b3 	bl	8013b2c <__NVIC_SystemReset>
    return;
 80147c6:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80147c8:	3710      	adds	r7, #16
 80147ca:	46bd      	mov	sp, r7
 80147cc:	bd80      	pop	{r7, pc}
 80147ce:	bf00      	nop
 80147d0:	200007e8 	.word	0x200007e8

080147d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b086      	sub	sp, #24
 80147d8:	af00      	add	r7, sp, #0
 80147da:	60f8      	str	r0, [r7, #12]
 80147dc:	60b9      	str	r1, [r7, #8]
 80147de:	4613      	mov	r3, r2
 80147e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d101      	bne.n	80147ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80147e8:	2303      	movs	r3, #3
 80147ea:	e01f      	b.n	801482c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80147ec:	68fb      	ldr	r3, [r7, #12]
 80147ee:	2200      	movs	r2, #0
 80147f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	2200      	movs	r2, #0
 80147f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2200      	movs	r2, #0
 8014800:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	2b00      	cmp	r3, #0
 8014808:	d003      	beq.n	8014812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801480a:	68fb      	ldr	r3, [r7, #12]
 801480c:	68ba      	ldr	r2, [r7, #8]
 801480e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014812:	68fb      	ldr	r3, [r7, #12]
 8014814:	2201      	movs	r2, #1
 8014816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801481a:	68fb      	ldr	r3, [r7, #12]
 801481c:	79fa      	ldrb	r2, [r7, #7]
 801481e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f001 fc59 	bl	80160d8 <USBD_LL_Init>
 8014826:	4603      	mov	r3, r0
 8014828:	75fb      	strb	r3, [r7, #23]

  return ret;
 801482a:	7dfb      	ldrb	r3, [r7, #23]
}
 801482c:	4618      	mov	r0, r3
 801482e:	3718      	adds	r7, #24
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <USBD_Init_CDC>:

/* USER CODE BEGIN*/
USBD_StatusTypeDef USBD_Init_CDC(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	60b9      	str	r1, [r7, #8]
 801483e:	4613      	mov	r3, r2
 8014840:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2b00      	cmp	r3, #0
 8014846:	d101      	bne.n	801484c <USBD_Init_CDC+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8014848:	2303      	movs	r3, #3
 801484a:	e01f      	b.n	801488c <USBD_Init_CDC+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	2200      	movs	r2, #0
 8014850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2200      	movs	r2, #0
 8014858:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 801485c:	68fb      	ldr	r3, [r7, #12]
 801485e:	2200      	movs	r2, #0
 8014860:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d003      	beq.n	8014872 <USBD_Init_CDC+0x3e>
  {
    pdev->pDesc = pdesc;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	68ba      	ldr	r2, [r7, #8]
 801486e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	2201      	movs	r2, #1
 8014876:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801487a:	68fb      	ldr	r3, [r7, #12]
 801487c:	79fa      	ldrb	r2, [r7, #7]
 801487e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init_CDC(pdev);
 8014880:	68f8      	ldr	r0, [r7, #12]
 8014882:	f001 fc71 	bl	8016168 <USBD_LL_Init_CDC>
 8014886:	4603      	mov	r3, r0
 8014888:	75fb      	strb	r3, [r7, #23]

  return ret;
 801488a:	7dfb      	ldrb	r3, [r7, #23]
}
 801488c:	4618      	mov	r0, r3
 801488e:	3718      	adds	r7, #24
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801489e:	2300      	movs	r3, #0
 80148a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80148a2:	683b      	ldr	r3, [r7, #0]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d101      	bne.n	80148ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80148a8:	2303      	movs	r3, #3
 80148aa:	e016      	b.n	80148da <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	683a      	ldr	r2, [r7, #0]
 80148b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d00b      	beq.n	80148d8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80148c0:	687b      	ldr	r3, [r7, #4]
 80148c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c8:	f107 020e 	add.w	r2, r7, #14
 80148cc:	4610      	mov	r0, r2
 80148ce:	4798      	blx	r3
 80148d0:	4602      	mov	r2, r0
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80148d8:	2300      	movs	r3, #0
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b082      	sub	sp, #8
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80148ea:	6878      	ldr	r0, [r7, #4]
 80148ec:	f001 fc9e 	bl	801622c <USBD_LL_Start>
 80148f0:	4603      	mov	r3, r0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3708      	adds	r7, #8
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}

080148fa <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80148fa:	b580      	push	{r7, lr}
 80148fc:	b082      	sub	sp, #8
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f001 fcc4 	bl	8016290 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801490e:	2b00      	cmp	r3, #0
 8014910:	d009      	beq.n	8014926 <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014918:	685b      	ldr	r3, [r3, #4]
 801491a:	687a      	ldr	r2, [r7, #4]
 801491c:	6852      	ldr	r2, [r2, #4]
 801491e:	b2d2      	uxtb	r2, r2
 8014920:	4611      	mov	r1, r2
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	4798      	blx	r3
  }

  return USBD_OK;
 8014926:	2300      	movs	r3, #0
}
 8014928:	4618      	mov	r0, r3
 801492a:	3708      	adds	r7, #8
 801492c:	46bd      	mov	sp, r7
 801492e:	bd80      	pop	{r7, pc}

08014930 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8014930:	b480      	push	{r7}
 8014932:	b083      	sub	sp, #12
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014938:	2300      	movs	r3, #0
}
 801493a:	4618      	mov	r0, r3
 801493c:	370c      	adds	r7, #12
 801493e:	46bd      	mov	sp, r7
 8014940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014944:	4770      	bx	lr

08014946 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014946:	b580      	push	{r7, lr}
 8014948:	b084      	sub	sp, #16
 801494a:	af00      	add	r7, sp, #0
 801494c:	6078      	str	r0, [r7, #4]
 801494e:	460b      	mov	r3, r1
 8014950:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8014952:	2303      	movs	r3, #3
 8014954:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801495c:	2b00      	cmp	r3, #0
 801495e:	d009      	beq.n	8014974 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	78fa      	ldrb	r2, [r7, #3]
 801496a:	4611      	mov	r1, r2
 801496c:	6878      	ldr	r0, [r7, #4]
 801496e:	4798      	blx	r3
 8014970:	4603      	mov	r3, r0
 8014972:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8014974:	7bfb      	ldrb	r3, [r7, #15]
}
 8014976:	4618      	mov	r0, r3
 8014978:	3710      	adds	r7, #16
 801497a:	46bd      	mov	sp, r7
 801497c:	bd80      	pop	{r7, pc}

0801497e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801497e:	b580      	push	{r7, lr}
 8014980:	b082      	sub	sp, #8
 8014982:	af00      	add	r7, sp, #0
 8014984:	6078      	str	r0, [r7, #4]
 8014986:	460b      	mov	r3, r1
 8014988:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014990:	2b00      	cmp	r3, #0
 8014992:	d007      	beq.n	80149a4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801499a:	685b      	ldr	r3, [r3, #4]
 801499c:	78fa      	ldrb	r2, [r7, #3]
 801499e:	4611      	mov	r1, r2
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	4798      	blx	r3
  }

  return USBD_OK;
 80149a4:	2300      	movs	r3, #0
}
 80149a6:	4618      	mov	r0, r3
 80149a8:	3708      	adds	r7, #8
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bd80      	pop	{r7, pc}

080149ae <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80149ae:	b580      	push	{r7, lr}
 80149b0:	b084      	sub	sp, #16
 80149b2:	af00      	add	r7, sp, #0
 80149b4:	6078      	str	r0, [r7, #4]
 80149b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80149be:	6839      	ldr	r1, [r7, #0]
 80149c0:	4618      	mov	r0, r3
 80149c2:	f000 ff59 	bl	8015878 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	2201      	movs	r2, #1
 80149ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80149d4:	461a      	mov	r2, r3
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80149e2:	f003 031f 	and.w	r3, r3, #31
 80149e6:	2b02      	cmp	r3, #2
 80149e8:	d01a      	beq.n	8014a20 <USBD_LL_SetupStage+0x72>
 80149ea:	2b02      	cmp	r3, #2
 80149ec:	d822      	bhi.n	8014a34 <USBD_LL_SetupStage+0x86>
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d002      	beq.n	80149f8 <USBD_LL_SetupStage+0x4a>
 80149f2:	2b01      	cmp	r3, #1
 80149f4:	d00a      	beq.n	8014a0c <USBD_LL_SetupStage+0x5e>
 80149f6:	e01d      	b.n	8014a34 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80149fe:	4619      	mov	r1, r3
 8014a00:	6878      	ldr	r0, [r7, #4]
 8014a02:	f000 f9ef 	bl	8014de4 <USBD_StdDevReq>
 8014a06:	4603      	mov	r3, r0
 8014a08:	73fb      	strb	r3, [r7, #15]
      break;
 8014a0a:	e020      	b.n	8014a4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014a12:	4619      	mov	r1, r3
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f000 fa53 	bl	8014ec0 <USBD_StdItfReq>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	73fb      	strb	r3, [r7, #15]
      break;
 8014a1e:	e016      	b.n	8014a4e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014a26:	4619      	mov	r1, r3
 8014a28:	6878      	ldr	r0, [r7, #4]
 8014a2a:	f000 fa92 	bl	8014f52 <USBD_StdEPReq>
 8014a2e:	4603      	mov	r3, r0
 8014a30:	73fb      	strb	r3, [r7, #15]
      break;
 8014a32:	e00c      	b.n	8014a4e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014a3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014a3e:	b2db      	uxtb	r3, r3
 8014a40:	4619      	mov	r1, r3
 8014a42:	6878      	ldr	r0, [r7, #4]
 8014a44:	f001 fcca 	bl	80163dc <USBD_LL_StallEP>
 8014a48:	4603      	mov	r3, r0
 8014a4a:	73fb      	strb	r3, [r7, #15]
      break;
 8014a4c:	bf00      	nop
  }

  return ret;
 8014a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3710      	adds	r7, #16
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b086      	sub	sp, #24
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	460b      	mov	r3, r1
 8014a62:	607a      	str	r2, [r7, #4]
 8014a64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014a66:	7afb      	ldrb	r3, [r7, #11]
 8014a68:	2b00      	cmp	r3, #0
 8014a6a:	d138      	bne.n	8014ade <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8014a72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014a7a:	2b03      	cmp	r3, #3
 8014a7c:	d14a      	bne.n	8014b14 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8014a7e:	693b      	ldr	r3, [r7, #16]
 8014a80:	689a      	ldr	r2, [r3, #8]
 8014a82:	693b      	ldr	r3, [r7, #16]
 8014a84:	68db      	ldr	r3, [r3, #12]
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d913      	bls.n	8014ab2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014a8a:	693b      	ldr	r3, [r7, #16]
 8014a8c:	689a      	ldr	r2, [r3, #8]
 8014a8e:	693b      	ldr	r3, [r7, #16]
 8014a90:	68db      	ldr	r3, [r3, #12]
 8014a92:	1ad2      	subs	r2, r2, r3
 8014a94:	693b      	ldr	r3, [r7, #16]
 8014a96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014a98:	693b      	ldr	r3, [r7, #16]
 8014a9a:	68da      	ldr	r2, [r3, #12]
 8014a9c:	693b      	ldr	r3, [r7, #16]
 8014a9e:	689b      	ldr	r3, [r3, #8]
 8014aa0:	4293      	cmp	r3, r2
 8014aa2:	bf28      	it	cs
 8014aa4:	4613      	movcs	r3, r2
 8014aa6:	461a      	mov	r2, r3
 8014aa8:	6879      	ldr	r1, [r7, #4]
 8014aaa:	68f8      	ldr	r0, [r7, #12]
 8014aac:	f000 ffd8 	bl	8015a60 <USBD_CtlContinueRx>
 8014ab0:	e030      	b.n	8014b14 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ab8:	b2db      	uxtb	r3, r3
 8014aba:	2b03      	cmp	r3, #3
 8014abc:	d10b      	bne.n	8014ad6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ac4:	691b      	ldr	r3, [r3, #16]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d005      	beq.n	8014ad6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ad0:	691b      	ldr	r3, [r3, #16]
 8014ad2:	68f8      	ldr	r0, [r7, #12]
 8014ad4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	f000 ffd3 	bl	8015a82 <USBD_CtlSendStatus>
 8014adc:	e01a      	b.n	8014b14 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ade:	68fb      	ldr	r3, [r7, #12]
 8014ae0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ae4:	b2db      	uxtb	r3, r3
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d114      	bne.n	8014b14 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014aea:	68fb      	ldr	r3, [r7, #12]
 8014aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014af0:	699b      	ldr	r3, [r3, #24]
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	d00e      	beq.n	8014b14 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014afc:	699b      	ldr	r3, [r3, #24]
 8014afe:	7afa      	ldrb	r2, [r7, #11]
 8014b00:	4611      	mov	r1, r2
 8014b02:	68f8      	ldr	r0, [r7, #12]
 8014b04:	4798      	blx	r3
 8014b06:	4603      	mov	r3, r0
 8014b08:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014b0a:	7dfb      	ldrb	r3, [r7, #23]
 8014b0c:	2b00      	cmp	r3, #0
 8014b0e:	d001      	beq.n	8014b14 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8014b10:	7dfb      	ldrb	r3, [r7, #23]
 8014b12:	e000      	b.n	8014b16 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8014b14:	2300      	movs	r3, #0
}
 8014b16:	4618      	mov	r0, r3
 8014b18:	3718      	adds	r7, #24
 8014b1a:	46bd      	mov	sp, r7
 8014b1c:	bd80      	pop	{r7, pc}

08014b1e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014b1e:	b580      	push	{r7, lr}
 8014b20:	b086      	sub	sp, #24
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	60f8      	str	r0, [r7, #12]
 8014b26:	460b      	mov	r3, r1
 8014b28:	607a      	str	r2, [r7, #4]
 8014b2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014b2c:	7afb      	ldrb	r3, [r7, #11]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d16b      	bne.n	8014c0a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014b32:	68fb      	ldr	r3, [r7, #12]
 8014b34:	3314      	adds	r3, #20
 8014b36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d156      	bne.n	8014bf0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	689a      	ldr	r2, [r3, #8]
 8014b46:	693b      	ldr	r3, [r7, #16]
 8014b48:	68db      	ldr	r3, [r3, #12]
 8014b4a:	429a      	cmp	r2, r3
 8014b4c:	d914      	bls.n	8014b78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014b4e:	693b      	ldr	r3, [r7, #16]
 8014b50:	689a      	ldr	r2, [r3, #8]
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	68db      	ldr	r3, [r3, #12]
 8014b56:	1ad2      	subs	r2, r2, r3
 8014b58:	693b      	ldr	r3, [r7, #16]
 8014b5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	689b      	ldr	r3, [r3, #8]
 8014b60:	461a      	mov	r2, r3
 8014b62:	6879      	ldr	r1, [r7, #4]
 8014b64:	68f8      	ldr	r0, [r7, #12]
 8014b66:	f000 ff4d 	bl	8015a04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b6a:	2300      	movs	r3, #0
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	2100      	movs	r1, #0
 8014b70:	68f8      	ldr	r0, [r7, #12]
 8014b72:	f001 fd3b 	bl	80165ec <USBD_LL_PrepareReceive>
 8014b76:	e03b      	b.n	8014bf0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014b78:	693b      	ldr	r3, [r7, #16]
 8014b7a:	68da      	ldr	r2, [r3, #12]
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	689b      	ldr	r3, [r3, #8]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d11c      	bne.n	8014bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	685a      	ldr	r2, [r3, #4]
 8014b88:	693b      	ldr	r3, [r7, #16]
 8014b8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d316      	bcc.n	8014bbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014b90:	693b      	ldr	r3, [r7, #16]
 8014b92:	685a      	ldr	r2, [r3, #4]
 8014b94:	68fb      	ldr	r3, [r7, #12]
 8014b96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014b9a:	429a      	cmp	r2, r3
 8014b9c:	d20f      	bcs.n	8014bbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	2100      	movs	r1, #0
 8014ba2:	68f8      	ldr	r0, [r7, #12]
 8014ba4:	f000 ff2e 	bl	8015a04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	2200      	movs	r2, #0
 8014bac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	2200      	movs	r2, #0
 8014bb4:	2100      	movs	r1, #0
 8014bb6:	68f8      	ldr	r0, [r7, #12]
 8014bb8:	f001 fd18 	bl	80165ec <USBD_LL_PrepareReceive>
 8014bbc:	e018      	b.n	8014bf0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b03      	cmp	r3, #3
 8014bc8:	d10b      	bne.n	8014be2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014bca:	68fb      	ldr	r3, [r7, #12]
 8014bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd0:	68db      	ldr	r3, [r3, #12]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d005      	beq.n	8014be2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bdc:	68db      	ldr	r3, [r3, #12]
 8014bde:	68f8      	ldr	r0, [r7, #12]
 8014be0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014be2:	2180      	movs	r1, #128	; 0x80
 8014be4:	68f8      	ldr	r0, [r7, #12]
 8014be6:	f001 fbf9 	bl	80163dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014bea:	68f8      	ldr	r0, [r7, #12]
 8014bec:	f000 ff5c 	bl	8015aa8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d122      	bne.n	8014c40 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014bfa:	68f8      	ldr	r0, [r7, #12]
 8014bfc:	f7ff fe98 	bl	8014930 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	2200      	movs	r2, #0
 8014c04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014c08:	e01a      	b.n	8014c40 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c10:	b2db      	uxtb	r3, r3
 8014c12:	2b03      	cmp	r3, #3
 8014c14:	d114      	bne.n	8014c40 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c1c:	695b      	ldr	r3, [r3, #20]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d00e      	beq.n	8014c40 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c28:	695b      	ldr	r3, [r3, #20]
 8014c2a:	7afa      	ldrb	r2, [r7, #11]
 8014c2c:	4611      	mov	r1, r2
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	4798      	blx	r3
 8014c32:	4603      	mov	r3, r0
 8014c34:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014c36:	7dfb      	ldrb	r3, [r7, #23]
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d001      	beq.n	8014c40 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8014c3c:	7dfb      	ldrb	r3, [r7, #23]
 8014c3e:	e000      	b.n	8014c42 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8014c40:	2300      	movs	r3, #0
}
 8014c42:	4618      	mov	r0, r3
 8014c44:	3718      	adds	r7, #24
 8014c46:	46bd      	mov	sp, r7
 8014c48:	bd80      	pop	{r7, pc}

08014c4a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014c4a:	b580      	push	{r7, lr}
 8014c4c:	b082      	sub	sp, #8
 8014c4e:	af00      	add	r7, sp, #0
 8014c50:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	2201      	movs	r2, #1
 8014c56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2200      	movs	r2, #0
 8014c5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2200      	movs	r2, #0
 8014c66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d101      	bne.n	8014c7e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8014c7a:	2303      	movs	r3, #3
 8014c7c:	e02f      	b.n	8014cde <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d00f      	beq.n	8014ca8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c8e:	685b      	ldr	r3, [r3, #4]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d009      	beq.n	8014ca8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	687a      	ldr	r2, [r7, #4]
 8014c9e:	6852      	ldr	r2, [r2, #4]
 8014ca0:	b2d2      	uxtb	r2, r2
 8014ca2:	4611      	mov	r1, r2
 8014ca4:	6878      	ldr	r0, [r7, #4]
 8014ca6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014ca8:	2340      	movs	r3, #64	; 0x40
 8014caa:	2200      	movs	r2, #0
 8014cac:	2100      	movs	r1, #0
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	f001 fb20 	bl	80162f4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	2201      	movs	r2, #1
 8014cb8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2240      	movs	r2, #64	; 0x40
 8014cc0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cc4:	2340      	movs	r3, #64	; 0x40
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	2180      	movs	r1, #128	; 0x80
 8014cca:	6878      	ldr	r0, [r7, #4]
 8014ccc:	f001 fb12 	bl	80162f4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2201      	movs	r2, #1
 8014cd4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2240      	movs	r2, #64	; 0x40
 8014cda:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8014cdc:	2300      	movs	r3, #0
}
 8014cde:	4618      	mov	r0, r3
 8014ce0:	3708      	adds	r7, #8
 8014ce2:	46bd      	mov	sp, r7
 8014ce4:	bd80      	pop	{r7, pc}

08014ce6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014ce6:	b480      	push	{r7}
 8014ce8:	b083      	sub	sp, #12
 8014cea:	af00      	add	r7, sp, #0
 8014cec:	6078      	str	r0, [r7, #4]
 8014cee:	460b      	mov	r3, r1
 8014cf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014cf2:	687b      	ldr	r3, [r7, #4]
 8014cf4:	78fa      	ldrb	r2, [r7, #3]
 8014cf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014cf8:	2300      	movs	r3, #0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	370c      	adds	r7, #12
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d04:	4770      	bx	lr

08014d06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014d06:	b480      	push	{r7}
 8014d08:	b083      	sub	sp, #12
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d14:	b2da      	uxtb	r2, r3
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2204      	movs	r2, #4
 8014d20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014d24:	2300      	movs	r3, #0
}
 8014d26:	4618      	mov	r0, r3
 8014d28:	370c      	adds	r7, #12
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d30:	4770      	bx	lr

08014d32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014d32:	b480      	push	{r7}
 8014d34:	b083      	sub	sp, #12
 8014d36:	af00      	add	r7, sp, #0
 8014d38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	2b04      	cmp	r3, #4
 8014d44:	d106      	bne.n	8014d54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014d4c:	b2da      	uxtb	r2, r3
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	370c      	adds	r7, #12
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d60:	4770      	bx	lr

08014d62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014d62:	b580      	push	{r7, lr}
 8014d64:	b082      	sub	sp, #8
 8014d66:	af00      	add	r7, sp, #0
 8014d68:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	d101      	bne.n	8014d78 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8014d74:	2303      	movs	r3, #3
 8014d76:	e012      	b.n	8014d9e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d7e:	b2db      	uxtb	r3, r3
 8014d80:	2b03      	cmp	r3, #3
 8014d82:	d10b      	bne.n	8014d9c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d8a:	69db      	ldr	r3, [r3, #28]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d005      	beq.n	8014d9c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d96:	69db      	ldr	r3, [r3, #28]
 8014d98:	6878      	ldr	r0, [r7, #4]
 8014d9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014d9c:	2300      	movs	r3, #0
}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3708      	adds	r7, #8
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}

08014da6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014da6:	b480      	push	{r7}
 8014da8:	b087      	sub	sp, #28
 8014daa:	af00      	add	r7, sp, #0
 8014dac:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014db2:	697b      	ldr	r3, [r7, #20]
 8014db4:	781b      	ldrb	r3, [r3, #0]
 8014db6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014dbe:	697b      	ldr	r3, [r7, #20]
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014dc4:	8a3b      	ldrh	r3, [r7, #16]
 8014dc6:	021b      	lsls	r3, r3, #8
 8014dc8:	b21a      	sxth	r2, r3
 8014dca:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014dce:	4313      	orrs	r3, r2
 8014dd0:	b21b      	sxth	r3, r3
 8014dd2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014dd4:	89fb      	ldrh	r3, [r7, #14]
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	371c      	adds	r7, #28
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr
	...

08014de4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014de4:	b580      	push	{r7, lr}
 8014de6:	b084      	sub	sp, #16
 8014de8:	af00      	add	r7, sp, #0
 8014dea:	6078      	str	r0, [r7, #4]
 8014dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014dee:	2300      	movs	r3, #0
 8014df0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014df2:	683b      	ldr	r3, [r7, #0]
 8014df4:	781b      	ldrb	r3, [r3, #0]
 8014df6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014dfa:	2b40      	cmp	r3, #64	; 0x40
 8014dfc:	d005      	beq.n	8014e0a <USBD_StdDevReq+0x26>
 8014dfe:	2b40      	cmp	r3, #64	; 0x40
 8014e00:	d853      	bhi.n	8014eaa <USBD_StdDevReq+0xc6>
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d00b      	beq.n	8014e1e <USBD_StdDevReq+0x3a>
 8014e06:	2b20      	cmp	r3, #32
 8014e08:	d14f      	bne.n	8014eaa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e10:	689b      	ldr	r3, [r3, #8]
 8014e12:	6839      	ldr	r1, [r7, #0]
 8014e14:	6878      	ldr	r0, [r7, #4]
 8014e16:	4798      	blx	r3
 8014e18:	4603      	mov	r3, r0
 8014e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8014e1c:	e04a      	b.n	8014eb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014e1e:	683b      	ldr	r3, [r7, #0]
 8014e20:	785b      	ldrb	r3, [r3, #1]
 8014e22:	2b09      	cmp	r3, #9
 8014e24:	d83b      	bhi.n	8014e9e <USBD_StdDevReq+0xba>
 8014e26:	a201      	add	r2, pc, #4	; (adr r2, 8014e2c <USBD_StdDevReq+0x48>)
 8014e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e2c:	08014e81 	.word	0x08014e81
 8014e30:	08014e95 	.word	0x08014e95
 8014e34:	08014e9f 	.word	0x08014e9f
 8014e38:	08014e8b 	.word	0x08014e8b
 8014e3c:	08014e9f 	.word	0x08014e9f
 8014e40:	08014e5f 	.word	0x08014e5f
 8014e44:	08014e55 	.word	0x08014e55
 8014e48:	08014e9f 	.word	0x08014e9f
 8014e4c:	08014e77 	.word	0x08014e77
 8014e50:	08014e69 	.word	0x08014e69
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014e54:	6839      	ldr	r1, [r7, #0]
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	f000 f9de 	bl	8015218 <USBD_GetDescriptor>
          break;
 8014e5c:	e024      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014e5e:	6839      	ldr	r1, [r7, #0]
 8014e60:	6878      	ldr	r0, [r7, #4]
 8014e62:	f000 fb7f 	bl	8015564 <USBD_SetAddress>
          break;
 8014e66:	e01f      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8014e68:	6839      	ldr	r1, [r7, #0]
 8014e6a:	6878      	ldr	r0, [r7, #4]
 8014e6c:	f000 fbbe 	bl	80155ec <USBD_SetConfig>
 8014e70:	4603      	mov	r3, r0
 8014e72:	73fb      	strb	r3, [r7, #15]
          break;
 8014e74:	e018      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014e76:	6839      	ldr	r1, [r7, #0]
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f000 fc5d 	bl	8015738 <USBD_GetConfig>
          break;
 8014e7e:	e013      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014e80:	6839      	ldr	r1, [r7, #0]
 8014e82:	6878      	ldr	r0, [r7, #4]
 8014e84:	f000 fc8e 	bl	80157a4 <USBD_GetStatus>
          break;
 8014e88:	e00e      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014e8a:	6839      	ldr	r1, [r7, #0]
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f000 fcbd 	bl	801580c <USBD_SetFeature>
          break;
 8014e92:	e009      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014e94:	6839      	ldr	r1, [r7, #0]
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f000 fccc 	bl	8015834 <USBD_ClrFeature>
          break;
 8014e9c:	e004      	b.n	8014ea8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8014e9e:	6839      	ldr	r1, [r7, #0]
 8014ea0:	6878      	ldr	r0, [r7, #4]
 8014ea2:	f000 fd23 	bl	80158ec <USBD_CtlError>
          break;
 8014ea6:	bf00      	nop
      }
      break;
 8014ea8:	e004      	b.n	8014eb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014eaa:	6839      	ldr	r1, [r7, #0]
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	f000 fd1d 	bl	80158ec <USBD_CtlError>
      break;
 8014eb2:	bf00      	nop
  }

  return ret;
 8014eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8014eb6:	4618      	mov	r0, r3
 8014eb8:	3710      	adds	r7, #16
 8014eba:	46bd      	mov	sp, r7
 8014ebc:	bd80      	pop	{r7, pc}
 8014ebe:	bf00      	nop

08014ec0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ec0:	b580      	push	{r7, lr}
 8014ec2:	b084      	sub	sp, #16
 8014ec4:	af00      	add	r7, sp, #0
 8014ec6:	6078      	str	r0, [r7, #4]
 8014ec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ece:	683b      	ldr	r3, [r7, #0]
 8014ed0:	781b      	ldrb	r3, [r3, #0]
 8014ed2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014ed6:	2b40      	cmp	r3, #64	; 0x40
 8014ed8:	d005      	beq.n	8014ee6 <USBD_StdItfReq+0x26>
 8014eda:	2b40      	cmp	r3, #64	; 0x40
 8014edc:	d82f      	bhi.n	8014f3e <USBD_StdItfReq+0x7e>
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d001      	beq.n	8014ee6 <USBD_StdItfReq+0x26>
 8014ee2:	2b20      	cmp	r3, #32
 8014ee4:	d12b      	bne.n	8014f3e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014eec:	b2db      	uxtb	r3, r3
 8014eee:	3b01      	subs	r3, #1
 8014ef0:	2b02      	cmp	r3, #2
 8014ef2:	d81d      	bhi.n	8014f30 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014ef4:	683b      	ldr	r3, [r7, #0]
 8014ef6:	889b      	ldrh	r3, [r3, #4]
 8014ef8:	b2db      	uxtb	r3, r3
 8014efa:	2b01      	cmp	r3, #1
 8014efc:	d813      	bhi.n	8014f26 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f04:	689b      	ldr	r3, [r3, #8]
 8014f06:	6839      	ldr	r1, [r7, #0]
 8014f08:	6878      	ldr	r0, [r7, #4]
 8014f0a:	4798      	blx	r3
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014f10:	683b      	ldr	r3, [r7, #0]
 8014f12:	88db      	ldrh	r3, [r3, #6]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d110      	bne.n	8014f3a <USBD_StdItfReq+0x7a>
 8014f18:	7bfb      	ldrb	r3, [r7, #15]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d10d      	bne.n	8014f3a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014f1e:	6878      	ldr	r0, [r7, #4]
 8014f20:	f000 fdaf 	bl	8015a82 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014f24:	e009      	b.n	8014f3a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014f26:	6839      	ldr	r1, [r7, #0]
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f000 fcdf 	bl	80158ec <USBD_CtlError>
          break;
 8014f2e:	e004      	b.n	8014f3a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014f30:	6839      	ldr	r1, [r7, #0]
 8014f32:	6878      	ldr	r0, [r7, #4]
 8014f34:	f000 fcda 	bl	80158ec <USBD_CtlError>
          break;
 8014f38:	e000      	b.n	8014f3c <USBD_StdItfReq+0x7c>
          break;
 8014f3a:	bf00      	nop
      }
      break;
 8014f3c:	e004      	b.n	8014f48 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014f3e:	6839      	ldr	r1, [r7, #0]
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f000 fcd3 	bl	80158ec <USBD_CtlError>
      break;
 8014f46:	bf00      	nop
  }

  return ret;
 8014f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014f52:	b580      	push	{r7, lr}
 8014f54:	b084      	sub	sp, #16
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014f5c:	2300      	movs	r3, #0
 8014f5e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	889b      	ldrh	r3, [r3, #4]
 8014f64:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	781b      	ldrb	r3, [r3, #0]
 8014f6a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014f6e:	2b40      	cmp	r3, #64	; 0x40
 8014f70:	d007      	beq.n	8014f82 <USBD_StdEPReq+0x30>
 8014f72:	2b40      	cmp	r3, #64	; 0x40
 8014f74:	f200 8145 	bhi.w	8015202 <USBD_StdEPReq+0x2b0>
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d00c      	beq.n	8014f96 <USBD_StdEPReq+0x44>
 8014f7c:	2b20      	cmp	r3, #32
 8014f7e:	f040 8140 	bne.w	8015202 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f88:	689b      	ldr	r3, [r3, #8]
 8014f8a:	6839      	ldr	r1, [r7, #0]
 8014f8c:	6878      	ldr	r0, [r7, #4]
 8014f8e:	4798      	blx	r3
 8014f90:	4603      	mov	r3, r0
 8014f92:	73fb      	strb	r3, [r7, #15]
      break;
 8014f94:	e13a      	b.n	801520c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	785b      	ldrb	r3, [r3, #1]
 8014f9a:	2b03      	cmp	r3, #3
 8014f9c:	d007      	beq.n	8014fae <USBD_StdEPReq+0x5c>
 8014f9e:	2b03      	cmp	r3, #3
 8014fa0:	f300 8129 	bgt.w	80151f6 <USBD_StdEPReq+0x2a4>
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d07f      	beq.n	80150a8 <USBD_StdEPReq+0x156>
 8014fa8:	2b01      	cmp	r3, #1
 8014faa:	d03c      	beq.n	8015026 <USBD_StdEPReq+0xd4>
 8014fac:	e123      	b.n	80151f6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014fb4:	b2db      	uxtb	r3, r3
 8014fb6:	2b02      	cmp	r3, #2
 8014fb8:	d002      	beq.n	8014fc0 <USBD_StdEPReq+0x6e>
 8014fba:	2b03      	cmp	r3, #3
 8014fbc:	d016      	beq.n	8014fec <USBD_StdEPReq+0x9a>
 8014fbe:	e02c      	b.n	801501a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014fc0:	7bbb      	ldrb	r3, [r7, #14]
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d00d      	beq.n	8014fe2 <USBD_StdEPReq+0x90>
 8014fc6:	7bbb      	ldrb	r3, [r7, #14]
 8014fc8:	2b80      	cmp	r3, #128	; 0x80
 8014fca:	d00a      	beq.n	8014fe2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014fcc:	7bbb      	ldrb	r3, [r7, #14]
 8014fce:	4619      	mov	r1, r3
 8014fd0:	6878      	ldr	r0, [r7, #4]
 8014fd2:	f001 fa03 	bl	80163dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014fd6:	2180      	movs	r1, #128	; 0x80
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f001 f9ff 	bl	80163dc <USBD_LL_StallEP>
 8014fde:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014fe0:	e020      	b.n	8015024 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014fe2:	6839      	ldr	r1, [r7, #0]
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f000 fc81 	bl	80158ec <USBD_CtlError>
              break;
 8014fea:	e01b      	b.n	8015024 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014fec:	683b      	ldr	r3, [r7, #0]
 8014fee:	885b      	ldrh	r3, [r3, #2]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d10e      	bne.n	8015012 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014ff4:	7bbb      	ldrb	r3, [r7, #14]
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d00b      	beq.n	8015012 <USBD_StdEPReq+0xc0>
 8014ffa:	7bbb      	ldrb	r3, [r7, #14]
 8014ffc:	2b80      	cmp	r3, #128	; 0x80
 8014ffe:	d008      	beq.n	8015012 <USBD_StdEPReq+0xc0>
 8015000:	683b      	ldr	r3, [r7, #0]
 8015002:	88db      	ldrh	r3, [r3, #6]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d104      	bne.n	8015012 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015008:	7bbb      	ldrb	r3, [r7, #14]
 801500a:	4619      	mov	r1, r3
 801500c:	6878      	ldr	r0, [r7, #4]
 801500e:	f001 f9e5 	bl	80163dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f000 fd35 	bl	8015a82 <USBD_CtlSendStatus>

              break;
 8015018:	e004      	b.n	8015024 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801501a:	6839      	ldr	r1, [r7, #0]
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f000 fc65 	bl	80158ec <USBD_CtlError>
              break;
 8015022:	bf00      	nop
          }
          break;
 8015024:	e0ec      	b.n	8015200 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801502c:	b2db      	uxtb	r3, r3
 801502e:	2b02      	cmp	r3, #2
 8015030:	d002      	beq.n	8015038 <USBD_StdEPReq+0xe6>
 8015032:	2b03      	cmp	r3, #3
 8015034:	d016      	beq.n	8015064 <USBD_StdEPReq+0x112>
 8015036:	e030      	b.n	801509a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015038:	7bbb      	ldrb	r3, [r7, #14]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d00d      	beq.n	801505a <USBD_StdEPReq+0x108>
 801503e:	7bbb      	ldrb	r3, [r7, #14]
 8015040:	2b80      	cmp	r3, #128	; 0x80
 8015042:	d00a      	beq.n	801505a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015044:	7bbb      	ldrb	r3, [r7, #14]
 8015046:	4619      	mov	r1, r3
 8015048:	6878      	ldr	r0, [r7, #4]
 801504a:	f001 f9c7 	bl	80163dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801504e:	2180      	movs	r1, #128	; 0x80
 8015050:	6878      	ldr	r0, [r7, #4]
 8015052:	f001 f9c3 	bl	80163dc <USBD_LL_StallEP>
 8015056:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015058:	e025      	b.n	80150a6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801505a:	6839      	ldr	r1, [r7, #0]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f000 fc45 	bl	80158ec <USBD_CtlError>
              break;
 8015062:	e020      	b.n	80150a6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	885b      	ldrh	r3, [r3, #2]
 8015068:	2b00      	cmp	r3, #0
 801506a:	d11b      	bne.n	80150a4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801506c:	7bbb      	ldrb	r3, [r7, #14]
 801506e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015072:	2b00      	cmp	r3, #0
 8015074:	d004      	beq.n	8015080 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015076:	7bbb      	ldrb	r3, [r7, #14]
 8015078:	4619      	mov	r1, r3
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f001 f9e4 	bl	8016448 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8015080:	6878      	ldr	r0, [r7, #4]
 8015082:	f000 fcfe 	bl	8015a82 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801508c:	689b      	ldr	r3, [r3, #8]
 801508e:	6839      	ldr	r1, [r7, #0]
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	4798      	blx	r3
 8015094:	4603      	mov	r3, r0
 8015096:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8015098:	e004      	b.n	80150a4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801509a:	6839      	ldr	r1, [r7, #0]
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 fc25 	bl	80158ec <USBD_CtlError>
              break;
 80150a2:	e000      	b.n	80150a6 <USBD_StdEPReq+0x154>
              break;
 80150a4:	bf00      	nop
          }
          break;
 80150a6:	e0ab      	b.n	8015200 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150ae:	b2db      	uxtb	r3, r3
 80150b0:	2b02      	cmp	r3, #2
 80150b2:	d002      	beq.n	80150ba <USBD_StdEPReq+0x168>
 80150b4:	2b03      	cmp	r3, #3
 80150b6:	d032      	beq.n	801511e <USBD_StdEPReq+0x1cc>
 80150b8:	e097      	b.n	80151ea <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80150ba:	7bbb      	ldrb	r3, [r7, #14]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	d007      	beq.n	80150d0 <USBD_StdEPReq+0x17e>
 80150c0:	7bbb      	ldrb	r3, [r7, #14]
 80150c2:	2b80      	cmp	r3, #128	; 0x80
 80150c4:	d004      	beq.n	80150d0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 fc0f 	bl	80158ec <USBD_CtlError>
                break;
 80150ce:	e091      	b.n	80151f4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80150d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	da0b      	bge.n	80150f0 <USBD_StdEPReq+0x19e>
 80150d8:	7bbb      	ldrb	r3, [r7, #14]
 80150da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80150de:	4613      	mov	r3, r2
 80150e0:	009b      	lsls	r3, r3, #2
 80150e2:	4413      	add	r3, r2
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	3310      	adds	r3, #16
 80150e8:	687a      	ldr	r2, [r7, #4]
 80150ea:	4413      	add	r3, r2
 80150ec:	3304      	adds	r3, #4
 80150ee:	e00b      	b.n	8015108 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80150f0:	7bbb      	ldrb	r3, [r7, #14]
 80150f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80150f6:	4613      	mov	r3, r2
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	4413      	add	r3, r2
 80150fc:	009b      	lsls	r3, r3, #2
 80150fe:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015102:	687a      	ldr	r2, [r7, #4]
 8015104:	4413      	add	r3, r2
 8015106:	3304      	adds	r3, #4
 8015108:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801510a:	68bb      	ldr	r3, [r7, #8]
 801510c:	2200      	movs	r2, #0
 801510e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015110:	68bb      	ldr	r3, [r7, #8]
 8015112:	2202      	movs	r2, #2
 8015114:	4619      	mov	r1, r3
 8015116:	6878      	ldr	r0, [r7, #4]
 8015118:	f000 fc59 	bl	80159ce <USBD_CtlSendData>
              break;
 801511c:	e06a      	b.n	80151f4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801511e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015122:	2b00      	cmp	r3, #0
 8015124:	da11      	bge.n	801514a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015126:	7bbb      	ldrb	r3, [r7, #14]
 8015128:	f003 020f 	and.w	r2, r3, #15
 801512c:	6879      	ldr	r1, [r7, #4]
 801512e:	4613      	mov	r3, r2
 8015130:	009b      	lsls	r3, r3, #2
 8015132:	4413      	add	r3, r2
 8015134:	009b      	lsls	r3, r3, #2
 8015136:	440b      	add	r3, r1
 8015138:	3324      	adds	r3, #36	; 0x24
 801513a:	881b      	ldrh	r3, [r3, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d117      	bne.n	8015170 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015140:	6839      	ldr	r1, [r7, #0]
 8015142:	6878      	ldr	r0, [r7, #4]
 8015144:	f000 fbd2 	bl	80158ec <USBD_CtlError>
                  break;
 8015148:	e054      	b.n	80151f4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801514a:	7bbb      	ldrb	r3, [r7, #14]
 801514c:	f003 020f 	and.w	r2, r3, #15
 8015150:	6879      	ldr	r1, [r7, #4]
 8015152:	4613      	mov	r3, r2
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	4413      	add	r3, r2
 8015158:	009b      	lsls	r3, r3, #2
 801515a:	440b      	add	r3, r1
 801515c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015160:	881b      	ldrh	r3, [r3, #0]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d104      	bne.n	8015170 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8015166:	6839      	ldr	r1, [r7, #0]
 8015168:	6878      	ldr	r0, [r7, #4]
 801516a:	f000 fbbf 	bl	80158ec <USBD_CtlError>
                  break;
 801516e:	e041      	b.n	80151f4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015170:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015174:	2b00      	cmp	r3, #0
 8015176:	da0b      	bge.n	8015190 <USBD_StdEPReq+0x23e>
 8015178:	7bbb      	ldrb	r3, [r7, #14]
 801517a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801517e:	4613      	mov	r3, r2
 8015180:	009b      	lsls	r3, r3, #2
 8015182:	4413      	add	r3, r2
 8015184:	009b      	lsls	r3, r3, #2
 8015186:	3310      	adds	r3, #16
 8015188:	687a      	ldr	r2, [r7, #4]
 801518a:	4413      	add	r3, r2
 801518c:	3304      	adds	r3, #4
 801518e:	e00b      	b.n	80151a8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015190:	7bbb      	ldrb	r3, [r7, #14]
 8015192:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015196:	4613      	mov	r3, r2
 8015198:	009b      	lsls	r3, r3, #2
 801519a:	4413      	add	r3, r2
 801519c:	009b      	lsls	r3, r3, #2
 801519e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80151a2:	687a      	ldr	r2, [r7, #4]
 80151a4:	4413      	add	r3, r2
 80151a6:	3304      	adds	r3, #4
 80151a8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80151aa:	7bbb      	ldrb	r3, [r7, #14]
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	d002      	beq.n	80151b6 <USBD_StdEPReq+0x264>
 80151b0:	7bbb      	ldrb	r3, [r7, #14]
 80151b2:	2b80      	cmp	r3, #128	; 0x80
 80151b4:	d103      	bne.n	80151be <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80151b6:	68bb      	ldr	r3, [r7, #8]
 80151b8:	2200      	movs	r2, #0
 80151ba:	601a      	str	r2, [r3, #0]
 80151bc:	e00e      	b.n	80151dc <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80151be:	7bbb      	ldrb	r3, [r7, #14]
 80151c0:	4619      	mov	r1, r3
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f001 f976 	bl	80164b4 <USBD_LL_IsStallEP>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d003      	beq.n	80151d6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80151ce:	68bb      	ldr	r3, [r7, #8]
 80151d0:	2201      	movs	r2, #1
 80151d2:	601a      	str	r2, [r3, #0]
 80151d4:	e002      	b.n	80151dc <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80151d6:	68bb      	ldr	r3, [r7, #8]
 80151d8:	2200      	movs	r2, #0
 80151da:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	2202      	movs	r2, #2
 80151e0:	4619      	mov	r1, r3
 80151e2:	6878      	ldr	r0, [r7, #4]
 80151e4:	f000 fbf3 	bl	80159ce <USBD_CtlSendData>
              break;
 80151e8:	e004      	b.n	80151f4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 80151ea:	6839      	ldr	r1, [r7, #0]
 80151ec:	6878      	ldr	r0, [r7, #4]
 80151ee:	f000 fb7d 	bl	80158ec <USBD_CtlError>
              break;
 80151f2:	bf00      	nop
          }
          break;
 80151f4:	e004      	b.n	8015200 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80151f6:	6839      	ldr	r1, [r7, #0]
 80151f8:	6878      	ldr	r0, [r7, #4]
 80151fa:	f000 fb77 	bl	80158ec <USBD_CtlError>
          break;
 80151fe:	bf00      	nop
      }
      break;
 8015200:	e004      	b.n	801520c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8015202:	6839      	ldr	r1, [r7, #0]
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f000 fb71 	bl	80158ec <USBD_CtlError>
      break;
 801520a:	bf00      	nop
  }

  return ret;
 801520c:	7bfb      	ldrb	r3, [r7, #15]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}
	...

08015218 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b084      	sub	sp, #16
 801521c:	af00      	add	r7, sp, #0
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015222:	2300      	movs	r3, #0
 8015224:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015226:	2300      	movs	r3, #0
 8015228:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801522a:	2300      	movs	r3, #0
 801522c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801522e:	683b      	ldr	r3, [r7, #0]
 8015230:	885b      	ldrh	r3, [r3, #2]
 8015232:	0a1b      	lsrs	r3, r3, #8
 8015234:	b29b      	uxth	r3, r3
 8015236:	3b01      	subs	r3, #1
 8015238:	2b0e      	cmp	r3, #14
 801523a:	f200 8165 	bhi.w	8015508 <USBD_GetDescriptor+0x2f0>
 801523e:	a201      	add	r2, pc, #4	; (adr r2, 8015244 <USBD_GetDescriptor+0x2c>)
 8015240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015244:	080152b5 	.word	0x080152b5
 8015248:	080152cd 	.word	0x080152cd
 801524c:	0801530d 	.word	0x0801530d
 8015250:	08015509 	.word	0x08015509
 8015254:	08015509 	.word	0x08015509
 8015258:	080154a9 	.word	0x080154a9
 801525c:	080154d5 	.word	0x080154d5
 8015260:	08015509 	.word	0x08015509
 8015264:	08015509 	.word	0x08015509
 8015268:	08015509 	.word	0x08015509
 801526c:	08015509 	.word	0x08015509
 8015270:	08015509 	.word	0x08015509
 8015274:	08015509 	.word	0x08015509
 8015278:	08015509 	.word	0x08015509
 801527c:	08015281 	.word	0x08015281
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015286:	69db      	ldr	r3, [r3, #28]
 8015288:	2b00      	cmp	r3, #0
 801528a:	d00b      	beq.n	80152a4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015292:	69db      	ldr	r3, [r3, #28]
 8015294:	687a      	ldr	r2, [r7, #4]
 8015296:	7c12      	ldrb	r2, [r2, #16]
 8015298:	f107 0108 	add.w	r1, r7, #8
 801529c:	4610      	mov	r0, r2
 801529e:	4798      	blx	r3
 80152a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80152a2:	e139      	b.n	8015518 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80152a4:	6839      	ldr	r1, [r7, #0]
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f000 fb20 	bl	80158ec <USBD_CtlError>
        err++;
 80152ac:	7afb      	ldrb	r3, [r7, #11]
 80152ae:	3301      	adds	r3, #1
 80152b0:	72fb      	strb	r3, [r7, #11]
      break;
 80152b2:	e131      	b.n	8015518 <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	687a      	ldr	r2, [r7, #4]
 80152be:	7c12      	ldrb	r2, [r2, #16]
 80152c0:	f107 0108 	add.w	r1, r7, #8
 80152c4:	4610      	mov	r0, r2
 80152c6:	4798      	blx	r3
 80152c8:	60f8      	str	r0, [r7, #12]
      break;
 80152ca:	e125      	b.n	8015518 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	7c1b      	ldrb	r3, [r3, #16]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d10d      	bne.n	80152f0 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80152dc:	f107 0208 	add.w	r2, r7, #8
 80152e0:	4610      	mov	r0, r2
 80152e2:	4798      	blx	r3
 80152e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	3301      	adds	r3, #1
 80152ea:	2202      	movs	r2, #2
 80152ec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80152ee:	e113      	b.n	8015518 <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152f8:	f107 0208 	add.w	r2, r7, #8
 80152fc:	4610      	mov	r0, r2
 80152fe:	4798      	blx	r3
 8015300:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015302:	68fb      	ldr	r3, [r7, #12]
 8015304:	3301      	adds	r3, #1
 8015306:	2202      	movs	r2, #2
 8015308:	701a      	strb	r2, [r3, #0]
      break;
 801530a:	e105      	b.n	8015518 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	885b      	ldrh	r3, [r3, #2]
 8015310:	b2db      	uxtb	r3, r3
 8015312:	2b05      	cmp	r3, #5
 8015314:	f200 80ac 	bhi.w	8015470 <USBD_GetDescriptor+0x258>
 8015318:	a201      	add	r2, pc, #4	; (adr r2, 8015320 <USBD_GetDescriptor+0x108>)
 801531a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801531e:	bf00      	nop
 8015320:	08015339 	.word	0x08015339
 8015324:	0801536d 	.word	0x0801536d
 8015328:	080153a1 	.word	0x080153a1
 801532c:	080153d5 	.word	0x080153d5
 8015330:	08015409 	.word	0x08015409
 8015334:	0801543d 	.word	0x0801543d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801533e:	685b      	ldr	r3, [r3, #4]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d00b      	beq.n	801535c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	687a      	ldr	r2, [r7, #4]
 801534e:	7c12      	ldrb	r2, [r2, #16]
 8015350:	f107 0108 	add.w	r1, r7, #8
 8015354:	4610      	mov	r0, r2
 8015356:	4798      	blx	r3
 8015358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801535a:	e0a4      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801535c:	6839      	ldr	r1, [r7, #0]
 801535e:	6878      	ldr	r0, [r7, #4]
 8015360:	f000 fac4 	bl	80158ec <USBD_CtlError>
            err++;
 8015364:	7afb      	ldrb	r3, [r7, #11]
 8015366:	3301      	adds	r3, #1
 8015368:	72fb      	strb	r3, [r7, #11]
          break;
 801536a:	e09c      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d00b      	beq.n	8015390 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801537e:	689b      	ldr	r3, [r3, #8]
 8015380:	687a      	ldr	r2, [r7, #4]
 8015382:	7c12      	ldrb	r2, [r2, #16]
 8015384:	f107 0108 	add.w	r1, r7, #8
 8015388:	4610      	mov	r0, r2
 801538a:	4798      	blx	r3
 801538c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801538e:	e08a      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8015390:	6839      	ldr	r1, [r7, #0]
 8015392:	6878      	ldr	r0, [r7, #4]
 8015394:	f000 faaa 	bl	80158ec <USBD_CtlError>
            err++;
 8015398:	7afb      	ldrb	r3, [r7, #11]
 801539a:	3301      	adds	r3, #1
 801539c:	72fb      	strb	r3, [r7, #11]
          break;
 801539e:	e082      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d00b      	beq.n	80153c4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	687a      	ldr	r2, [r7, #4]
 80153b6:	7c12      	ldrb	r2, [r2, #16]
 80153b8:	f107 0108 	add.w	r1, r7, #8
 80153bc:	4610      	mov	r0, r2
 80153be:	4798      	blx	r3
 80153c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153c2:	e070      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80153c4:	6839      	ldr	r1, [r7, #0]
 80153c6:	6878      	ldr	r0, [r7, #4]
 80153c8:	f000 fa90 	bl	80158ec <USBD_CtlError>
            err++;
 80153cc:	7afb      	ldrb	r3, [r7, #11]
 80153ce:	3301      	adds	r3, #1
 80153d0:	72fb      	strb	r3, [r7, #11]
          break;
 80153d2:	e068      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80153da:	691b      	ldr	r3, [r3, #16]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	d00b      	beq.n	80153f8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80153e6:	691b      	ldr	r3, [r3, #16]
 80153e8:	687a      	ldr	r2, [r7, #4]
 80153ea:	7c12      	ldrb	r2, [r2, #16]
 80153ec:	f107 0108 	add.w	r1, r7, #8
 80153f0:	4610      	mov	r0, r2
 80153f2:	4798      	blx	r3
 80153f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80153f6:	e056      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 80153f8:	6839      	ldr	r1, [r7, #0]
 80153fa:	6878      	ldr	r0, [r7, #4]
 80153fc:	f000 fa76 	bl	80158ec <USBD_CtlError>
            err++;
 8015400:	7afb      	ldrb	r3, [r7, #11]
 8015402:	3301      	adds	r3, #1
 8015404:	72fb      	strb	r3, [r7, #11]
          break;
 8015406:	e04e      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801540e:	695b      	ldr	r3, [r3, #20]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d00b      	beq.n	801542c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801541a:	695b      	ldr	r3, [r3, #20]
 801541c:	687a      	ldr	r2, [r7, #4]
 801541e:	7c12      	ldrb	r2, [r2, #16]
 8015420:	f107 0108 	add.w	r1, r7, #8
 8015424:	4610      	mov	r0, r2
 8015426:	4798      	blx	r3
 8015428:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801542a:	e03c      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 801542c:	6839      	ldr	r1, [r7, #0]
 801542e:	6878      	ldr	r0, [r7, #4]
 8015430:	f000 fa5c 	bl	80158ec <USBD_CtlError>
            err++;
 8015434:	7afb      	ldrb	r3, [r7, #11]
 8015436:	3301      	adds	r3, #1
 8015438:	72fb      	strb	r3, [r7, #11]
          break;
 801543a:	e034      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015442:	699b      	ldr	r3, [r3, #24]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d00b      	beq.n	8015460 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801544e:	699b      	ldr	r3, [r3, #24]
 8015450:	687a      	ldr	r2, [r7, #4]
 8015452:	7c12      	ldrb	r2, [r2, #16]
 8015454:	f107 0108 	add.w	r1, r7, #8
 8015458:	4610      	mov	r0, r2
 801545a:	4798      	blx	r3
 801545c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801545e:	e022      	b.n	80154a6 <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8015460:	6839      	ldr	r1, [r7, #0]
 8015462:	6878      	ldr	r0, [r7, #4]
 8015464:	f000 fa42 	bl	80158ec <USBD_CtlError>
            err++;
 8015468:	7afb      	ldrb	r3, [r7, #11]
 801546a:	3301      	adds	r3, #1
 801546c:	72fb      	strb	r3, [r7, #11]
          break;
 801546e:	e01a      	b.n	80154a6 <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015478:	2b00      	cmp	r3, #0
 801547a:	d00c      	beq.n	8015496 <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015484:	683a      	ldr	r2, [r7, #0]
 8015486:	8852      	ldrh	r2, [r2, #2]
 8015488:	b2d1      	uxtb	r1, r2
 801548a:	f107 0208 	add.w	r2, r7, #8
 801548e:	6878      	ldr	r0, [r7, #4]
 8015490:	4798      	blx	r3
 8015492:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8015494:	e006      	b.n	80154a4 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8015496:	6839      	ldr	r1, [r7, #0]
 8015498:	6878      	ldr	r0, [r7, #4]
 801549a:	f000 fa27 	bl	80158ec <USBD_CtlError>
            err++;
 801549e:	7afb      	ldrb	r3, [r7, #11]
 80154a0:	3301      	adds	r3, #1
 80154a2:	72fb      	strb	r3, [r7, #11]
          break;
 80154a4:	bf00      	nop
      }
      break;
 80154a6:	e037      	b.n	8015518 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	7c1b      	ldrb	r3, [r3, #16]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d109      	bne.n	80154c4 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80154b8:	f107 0208 	add.w	r2, r7, #8
 80154bc:	4610      	mov	r0, r2
 80154be:	4798      	blx	r3
 80154c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80154c2:	e029      	b.n	8015518 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80154c4:	6839      	ldr	r1, [r7, #0]
 80154c6:	6878      	ldr	r0, [r7, #4]
 80154c8:	f000 fa10 	bl	80158ec <USBD_CtlError>
        err++;
 80154cc:	7afb      	ldrb	r3, [r7, #11]
 80154ce:	3301      	adds	r3, #1
 80154d0:	72fb      	strb	r3, [r7, #11]
      break;
 80154d2:	e021      	b.n	8015518 <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	7c1b      	ldrb	r3, [r3, #16]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d10d      	bne.n	80154f8 <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80154e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154e4:	f107 0208 	add.w	r2, r7, #8
 80154e8:	4610      	mov	r0, r2
 80154ea:	4798      	blx	r3
 80154ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80154ee:	68fb      	ldr	r3, [r7, #12]
 80154f0:	3301      	adds	r3, #1
 80154f2:	2207      	movs	r2, #7
 80154f4:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80154f6:	e00f      	b.n	8015518 <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 80154f8:	6839      	ldr	r1, [r7, #0]
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f000 f9f6 	bl	80158ec <USBD_CtlError>
        err++;
 8015500:	7afb      	ldrb	r3, [r7, #11]
 8015502:	3301      	adds	r3, #1
 8015504:	72fb      	strb	r3, [r7, #11]
      break;
 8015506:	e007      	b.n	8015518 <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8015508:	6839      	ldr	r1, [r7, #0]
 801550a:	6878      	ldr	r0, [r7, #4]
 801550c:	f000 f9ee 	bl	80158ec <USBD_CtlError>
      err++;
 8015510:	7afb      	ldrb	r3, [r7, #11]
 8015512:	3301      	adds	r3, #1
 8015514:	72fb      	strb	r3, [r7, #11]
      break;
 8015516:	bf00      	nop
  }

  if (err != 0U)
 8015518:	7afb      	ldrb	r3, [r7, #11]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d11e      	bne.n	801555c <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 801551e:	683b      	ldr	r3, [r7, #0]
 8015520:	88db      	ldrh	r3, [r3, #6]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d016      	beq.n	8015554 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8015526:	893b      	ldrh	r3, [r7, #8]
 8015528:	2b00      	cmp	r3, #0
 801552a:	d00e      	beq.n	801554a <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 801552c:	683b      	ldr	r3, [r7, #0]
 801552e:	88da      	ldrh	r2, [r3, #6]
 8015530:	893b      	ldrh	r3, [r7, #8]
 8015532:	4293      	cmp	r3, r2
 8015534:	bf28      	it	cs
 8015536:	4613      	movcs	r3, r2
 8015538:	b29b      	uxth	r3, r3
 801553a:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801553c:	893b      	ldrh	r3, [r7, #8]
 801553e:	461a      	mov	r2, r3
 8015540:	68f9      	ldr	r1, [r7, #12]
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	f000 fa43 	bl	80159ce <USBD_CtlSendData>
 8015548:	e009      	b.n	801555e <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801554a:	6839      	ldr	r1, [r7, #0]
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f000 f9cd 	bl	80158ec <USBD_CtlError>
 8015552:	e004      	b.n	801555e <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f000 fa94 	bl	8015a82 <USBD_CtlSendStatus>
 801555a:	e000      	b.n	801555e <USBD_GetDescriptor+0x346>
    return;
 801555c:	bf00      	nop
  }
}
 801555e:	3710      	adds	r7, #16
 8015560:	46bd      	mov	sp, r7
 8015562:	bd80      	pop	{r7, pc}

08015564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b084      	sub	sp, #16
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801556e:	683b      	ldr	r3, [r7, #0]
 8015570:	889b      	ldrh	r3, [r3, #4]
 8015572:	2b00      	cmp	r3, #0
 8015574:	d131      	bne.n	80155da <USBD_SetAddress+0x76>
 8015576:	683b      	ldr	r3, [r7, #0]
 8015578:	88db      	ldrh	r3, [r3, #6]
 801557a:	2b00      	cmp	r3, #0
 801557c:	d12d      	bne.n	80155da <USBD_SetAddress+0x76>
 801557e:	683b      	ldr	r3, [r7, #0]
 8015580:	885b      	ldrh	r3, [r3, #2]
 8015582:	2b7f      	cmp	r3, #127	; 0x7f
 8015584:	d829      	bhi.n	80155da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015586:	683b      	ldr	r3, [r7, #0]
 8015588:	885b      	ldrh	r3, [r3, #2]
 801558a:	b2db      	uxtb	r3, r3
 801558c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015598:	b2db      	uxtb	r3, r3
 801559a:	2b03      	cmp	r3, #3
 801559c:	d104      	bne.n	80155a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801559e:	6839      	ldr	r1, [r7, #0]
 80155a0:	6878      	ldr	r0, [r7, #4]
 80155a2:	f000 f9a3 	bl	80158ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155a6:	e01d      	b.n	80155e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	7bfa      	ldrb	r2, [r7, #15]
 80155ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80155b0:	7bfb      	ldrb	r3, [r7, #15]
 80155b2:	4619      	mov	r1, r3
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f000 ffab 	bl	8016510 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f000 fa61 	bl	8015a82 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80155c0:	7bfb      	ldrb	r3, [r7, #15]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d004      	beq.n	80155d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	2202      	movs	r2, #2
 80155ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155ce:	e009      	b.n	80155e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	2201      	movs	r2, #1
 80155d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80155d8:	e004      	b.n	80155e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80155da:	6839      	ldr	r1, [r7, #0]
 80155dc:	6878      	ldr	r0, [r7, #4]
 80155de:	f000 f985 	bl	80158ec <USBD_CtlError>
  }
}
 80155e2:	bf00      	nop
 80155e4:	bf00      	nop
 80155e6:	3710      	adds	r7, #16
 80155e8:	46bd      	mov	sp, r7
 80155ea:	bd80      	pop	{r7, pc}

080155ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	b084      	sub	sp, #16
 80155f0:	af00      	add	r7, sp, #0
 80155f2:	6078      	str	r0, [r7, #4]
 80155f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80155f6:	2300      	movs	r3, #0
 80155f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80155fa:	683b      	ldr	r3, [r7, #0]
 80155fc:	885b      	ldrh	r3, [r3, #2]
 80155fe:	b2da      	uxtb	r2, r3
 8015600:	4b4c      	ldr	r3, [pc, #304]	; (8015734 <USBD_SetConfig+0x148>)
 8015602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015604:	4b4b      	ldr	r3, [pc, #300]	; (8015734 <USBD_SetConfig+0x148>)
 8015606:	781b      	ldrb	r3, [r3, #0]
 8015608:	2b01      	cmp	r3, #1
 801560a:	d905      	bls.n	8015618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 801560c:	6839      	ldr	r1, [r7, #0]
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f000 f96c 	bl	80158ec <USBD_CtlError>
    return USBD_FAIL;
 8015614:	2303      	movs	r3, #3
 8015616:	e088      	b.n	801572a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801561e:	b2db      	uxtb	r3, r3
 8015620:	2b02      	cmp	r3, #2
 8015622:	d002      	beq.n	801562a <USBD_SetConfig+0x3e>
 8015624:	2b03      	cmp	r3, #3
 8015626:	d025      	beq.n	8015674 <USBD_SetConfig+0x88>
 8015628:	e071      	b.n	801570e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801562a:	4b42      	ldr	r3, [pc, #264]	; (8015734 <USBD_SetConfig+0x148>)
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d01c      	beq.n	801566c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8015632:	4b40      	ldr	r3, [pc, #256]	; (8015734 <USBD_SetConfig+0x148>)
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	461a      	mov	r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801563c:	4b3d      	ldr	r3, [pc, #244]	; (8015734 <USBD_SetConfig+0x148>)
 801563e:	781b      	ldrb	r3, [r3, #0]
 8015640:	4619      	mov	r1, r3
 8015642:	6878      	ldr	r0, [r7, #4]
 8015644:	f7ff f97f 	bl	8014946 <USBD_SetClassConfig>
 8015648:	4603      	mov	r3, r0
 801564a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801564c:	7bfb      	ldrb	r3, [r7, #15]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d004      	beq.n	801565c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8015652:	6839      	ldr	r1, [r7, #0]
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f000 f949 	bl	80158ec <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801565a:	e065      	b.n	8015728 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 801565c:	6878      	ldr	r0, [r7, #4]
 801565e:	f000 fa10 	bl	8015a82 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2203      	movs	r2, #3
 8015666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 801566a:	e05d      	b.n	8015728 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801566c:	6878      	ldr	r0, [r7, #4]
 801566e:	f000 fa08 	bl	8015a82 <USBD_CtlSendStatus>
      break;
 8015672:	e059      	b.n	8015728 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015674:	4b2f      	ldr	r3, [pc, #188]	; (8015734 <USBD_SetConfig+0x148>)
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d112      	bne.n	80156a2 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2202      	movs	r2, #2
 8015680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015684:	4b2b      	ldr	r3, [pc, #172]	; (8015734 <USBD_SetConfig+0x148>)
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	461a      	mov	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801568e:	4b29      	ldr	r3, [pc, #164]	; (8015734 <USBD_SetConfig+0x148>)
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	4619      	mov	r1, r3
 8015694:	6878      	ldr	r0, [r7, #4]
 8015696:	f7ff f972 	bl	801497e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 f9f1 	bl	8015a82 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80156a0:	e042      	b.n	8015728 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80156a2:	4b24      	ldr	r3, [pc, #144]	; (8015734 <USBD_SetConfig+0x148>)
 80156a4:	781b      	ldrb	r3, [r3, #0]
 80156a6:	461a      	mov	r2, r3
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	429a      	cmp	r2, r3
 80156ae:	d02a      	beq.n	8015706 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	b2db      	uxtb	r3, r3
 80156b6:	4619      	mov	r1, r3
 80156b8:	6878      	ldr	r0, [r7, #4]
 80156ba:	f7ff f960 	bl	801497e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80156be:	4b1d      	ldr	r3, [pc, #116]	; (8015734 <USBD_SetConfig+0x148>)
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	461a      	mov	r2, r3
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80156c8:	4b1a      	ldr	r3, [pc, #104]	; (8015734 <USBD_SetConfig+0x148>)
 80156ca:	781b      	ldrb	r3, [r3, #0]
 80156cc:	4619      	mov	r1, r3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f7ff f939 	bl	8014946 <USBD_SetClassConfig>
 80156d4:	4603      	mov	r3, r0
 80156d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80156d8:	7bfb      	ldrb	r3, [r7, #15]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d00f      	beq.n	80156fe <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80156de:	6839      	ldr	r1, [r7, #0]
 80156e0:	6878      	ldr	r0, [r7, #4]
 80156e2:	f000 f903 	bl	80158ec <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	685b      	ldr	r3, [r3, #4]
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	4619      	mov	r1, r3
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f7ff f945 	bl	801497e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	2202      	movs	r2, #2
 80156f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80156fc:	e014      	b.n	8015728 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f000 f9bf 	bl	8015a82 <USBD_CtlSendStatus>
      break;
 8015704:	e010      	b.n	8015728 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015706:	6878      	ldr	r0, [r7, #4]
 8015708:	f000 f9bb 	bl	8015a82 <USBD_CtlSendStatus>
      break;
 801570c:	e00c      	b.n	8015728 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 801570e:	6839      	ldr	r1, [r7, #0]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f000 f8eb 	bl	80158ec <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015716:	4b07      	ldr	r3, [pc, #28]	; (8015734 <USBD_SetConfig+0x148>)
 8015718:	781b      	ldrb	r3, [r3, #0]
 801571a:	4619      	mov	r1, r3
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7ff f92e 	bl	801497e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015722:	2303      	movs	r3, #3
 8015724:	73fb      	strb	r3, [r7, #15]
      break;
 8015726:	bf00      	nop
  }

  return ret;
 8015728:	7bfb      	ldrb	r3, [r7, #15]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3710      	adds	r7, #16
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	20000c8b 	.word	0x20000c8b

08015738 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015738:	b580      	push	{r7, lr}
 801573a:	b082      	sub	sp, #8
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
 8015740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	88db      	ldrh	r3, [r3, #6]
 8015746:	2b01      	cmp	r3, #1
 8015748:	d004      	beq.n	8015754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801574a:	6839      	ldr	r1, [r7, #0]
 801574c:	6878      	ldr	r0, [r7, #4]
 801574e:	f000 f8cd 	bl	80158ec <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8015752:	e023      	b.n	801579c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801575a:	b2db      	uxtb	r3, r3
 801575c:	2b02      	cmp	r3, #2
 801575e:	dc02      	bgt.n	8015766 <USBD_GetConfig+0x2e>
 8015760:	2b00      	cmp	r3, #0
 8015762:	dc03      	bgt.n	801576c <USBD_GetConfig+0x34>
 8015764:	e015      	b.n	8015792 <USBD_GetConfig+0x5a>
 8015766:	2b03      	cmp	r3, #3
 8015768:	d00b      	beq.n	8015782 <USBD_GetConfig+0x4a>
 801576a:	e012      	b.n	8015792 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801576c:	687b      	ldr	r3, [r7, #4]
 801576e:	2200      	movs	r2, #0
 8015770:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	3308      	adds	r3, #8
 8015776:	2201      	movs	r2, #1
 8015778:	4619      	mov	r1, r3
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f000 f927 	bl	80159ce <USBD_CtlSendData>
        break;
 8015780:	e00c      	b.n	801579c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	3304      	adds	r3, #4
 8015786:	2201      	movs	r2, #1
 8015788:	4619      	mov	r1, r3
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 f91f 	bl	80159ce <USBD_CtlSendData>
        break;
 8015790:	e004      	b.n	801579c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015792:	6839      	ldr	r1, [r7, #0]
 8015794:	6878      	ldr	r0, [r7, #4]
 8015796:	f000 f8a9 	bl	80158ec <USBD_CtlError>
        break;
 801579a:	bf00      	nop
}
 801579c:	bf00      	nop
 801579e:	3708      	adds	r7, #8
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd80      	pop	{r7, pc}

080157a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157a4:	b580      	push	{r7, lr}
 80157a6:	b082      	sub	sp, #8
 80157a8:	af00      	add	r7, sp, #0
 80157aa:	6078      	str	r0, [r7, #4]
 80157ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	3b01      	subs	r3, #1
 80157b8:	2b02      	cmp	r3, #2
 80157ba:	d81e      	bhi.n	80157fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80157bc:	683b      	ldr	r3, [r7, #0]
 80157be:	88db      	ldrh	r3, [r3, #6]
 80157c0:	2b02      	cmp	r3, #2
 80157c2:	d004      	beq.n	80157ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80157c4:	6839      	ldr	r1, [r7, #0]
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 f890 	bl	80158ec <USBD_CtlError>
        break;
 80157cc:	e01a      	b.n	8015804 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	2201      	movs	r2, #1
 80157d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d005      	beq.n	80157ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	68db      	ldr	r3, [r3, #12]
 80157e2:	f043 0202 	orr.w	r2, r3, #2
 80157e6:	687b      	ldr	r3, [r7, #4]
 80157e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	330c      	adds	r3, #12
 80157ee:	2202      	movs	r2, #2
 80157f0:	4619      	mov	r1, r3
 80157f2:	6878      	ldr	r0, [r7, #4]
 80157f4:	f000 f8eb 	bl	80159ce <USBD_CtlSendData>
      break;
 80157f8:	e004      	b.n	8015804 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80157fa:	6839      	ldr	r1, [r7, #0]
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f000 f875 	bl	80158ec <USBD_CtlError>
      break;
 8015802:	bf00      	nop
  }
}
 8015804:	bf00      	nop
 8015806:	3708      	adds	r7, #8
 8015808:	46bd      	mov	sp, r7
 801580a:	bd80      	pop	{r7, pc}

0801580c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801580c:	b580      	push	{r7, lr}
 801580e:	b082      	sub	sp, #8
 8015810:	af00      	add	r7, sp, #0
 8015812:	6078      	str	r0, [r7, #4]
 8015814:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015816:	683b      	ldr	r3, [r7, #0]
 8015818:	885b      	ldrh	r3, [r3, #2]
 801581a:	2b01      	cmp	r3, #1
 801581c:	d106      	bne.n	801582c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2201      	movs	r2, #1
 8015822:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 f92b 	bl	8015a82 <USBD_CtlSendStatus>
  }
}
 801582c:	bf00      	nop
 801582e:	3708      	adds	r7, #8
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}

08015834 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b082      	sub	sp, #8
 8015838:	af00      	add	r7, sp, #0
 801583a:	6078      	str	r0, [r7, #4]
 801583c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015844:	b2db      	uxtb	r3, r3
 8015846:	3b01      	subs	r3, #1
 8015848:	2b02      	cmp	r3, #2
 801584a:	d80b      	bhi.n	8015864 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	885b      	ldrh	r3, [r3, #2]
 8015850:	2b01      	cmp	r3, #1
 8015852:	d10c      	bne.n	801586e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	2200      	movs	r2, #0
 8015858:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f000 f910 	bl	8015a82 <USBD_CtlSendStatus>
      }
      break;
 8015862:	e004      	b.n	801586e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 f840 	bl	80158ec <USBD_CtlError>
      break;
 801586c:	e000      	b.n	8015870 <USBD_ClrFeature+0x3c>
      break;
 801586e:	bf00      	nop
  }
}
 8015870:	bf00      	nop
 8015872:	3708      	adds	r7, #8
 8015874:	46bd      	mov	sp, r7
 8015876:	bd80      	pop	{r7, pc}

08015878 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015878:	b580      	push	{r7, lr}
 801587a:	b084      	sub	sp, #16
 801587c:	af00      	add	r7, sp, #0
 801587e:	6078      	str	r0, [r7, #4]
 8015880:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015882:	683b      	ldr	r3, [r7, #0]
 8015884:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	781a      	ldrb	r2, [r3, #0]
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	3301      	adds	r3, #1
 8015892:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015894:	68fb      	ldr	r3, [r7, #12]
 8015896:	781a      	ldrb	r2, [r3, #0]
 8015898:	687b      	ldr	r3, [r7, #4]
 801589a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	3301      	adds	r3, #1
 80158a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80158a2:	68f8      	ldr	r0, [r7, #12]
 80158a4:	f7ff fa7f 	bl	8014da6 <SWAPBYTE>
 80158a8:	4603      	mov	r3, r0
 80158aa:	461a      	mov	r2, r3
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	3301      	adds	r3, #1
 80158b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	3301      	adds	r3, #1
 80158ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f7ff fa72 	bl	8014da6 <SWAPBYTE>
 80158c2:	4603      	mov	r3, r0
 80158c4:	461a      	mov	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	3301      	adds	r3, #1
 80158ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	3301      	adds	r3, #1
 80158d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80158d6:	68f8      	ldr	r0, [r7, #12]
 80158d8:	f7ff fa65 	bl	8014da6 <SWAPBYTE>
 80158dc:	4603      	mov	r3, r0
 80158de:	461a      	mov	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	80da      	strh	r2, [r3, #6]
}
 80158e4:	bf00      	nop
 80158e6:	3710      	adds	r7, #16
 80158e8:	46bd      	mov	sp, r7
 80158ea:	bd80      	pop	{r7, pc}

080158ec <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80158ec:	b580      	push	{r7, lr}
 80158ee:	b082      	sub	sp, #8
 80158f0:	af00      	add	r7, sp, #0
 80158f2:	6078      	str	r0, [r7, #4]
 80158f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80158f6:	2180      	movs	r1, #128	; 0x80
 80158f8:	6878      	ldr	r0, [r7, #4]
 80158fa:	f000 fd6f 	bl	80163dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80158fe:	2100      	movs	r1, #0
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f000 fd6b 	bl	80163dc <USBD_LL_StallEP>
}
 8015906:	bf00      	nop
 8015908:	3708      	adds	r7, #8
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}

0801590e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801590e:	b580      	push	{r7, lr}
 8015910:	b086      	sub	sp, #24
 8015912:	af00      	add	r7, sp, #0
 8015914:	60f8      	str	r0, [r7, #12]
 8015916:	60b9      	str	r1, [r7, #8]
 8015918:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801591a:	2300      	movs	r3, #0
 801591c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d036      	beq.n	8015992 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015928:	6938      	ldr	r0, [r7, #16]
 801592a:	f000 f836 	bl	801599a <USBD_GetLen>
 801592e:	4603      	mov	r3, r0
 8015930:	3301      	adds	r3, #1
 8015932:	b29b      	uxth	r3, r3
 8015934:	005b      	lsls	r3, r3, #1
 8015936:	b29a      	uxth	r2, r3
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801593c:	7dfb      	ldrb	r3, [r7, #23]
 801593e:	68ba      	ldr	r2, [r7, #8]
 8015940:	4413      	add	r3, r2
 8015942:	687a      	ldr	r2, [r7, #4]
 8015944:	7812      	ldrb	r2, [r2, #0]
 8015946:	701a      	strb	r2, [r3, #0]
  idx++;
 8015948:	7dfb      	ldrb	r3, [r7, #23]
 801594a:	3301      	adds	r3, #1
 801594c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801594e:	7dfb      	ldrb	r3, [r7, #23]
 8015950:	68ba      	ldr	r2, [r7, #8]
 8015952:	4413      	add	r3, r2
 8015954:	2203      	movs	r2, #3
 8015956:	701a      	strb	r2, [r3, #0]
  idx++;
 8015958:	7dfb      	ldrb	r3, [r7, #23]
 801595a:	3301      	adds	r3, #1
 801595c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801595e:	e013      	b.n	8015988 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015960:	7dfb      	ldrb	r3, [r7, #23]
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	4413      	add	r3, r2
 8015966:	693a      	ldr	r2, [r7, #16]
 8015968:	7812      	ldrb	r2, [r2, #0]
 801596a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801596c:	693b      	ldr	r3, [r7, #16]
 801596e:	3301      	adds	r3, #1
 8015970:	613b      	str	r3, [r7, #16]
    idx++;
 8015972:	7dfb      	ldrb	r3, [r7, #23]
 8015974:	3301      	adds	r3, #1
 8015976:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015978:	7dfb      	ldrb	r3, [r7, #23]
 801597a:	68ba      	ldr	r2, [r7, #8]
 801597c:	4413      	add	r3, r2
 801597e:	2200      	movs	r2, #0
 8015980:	701a      	strb	r2, [r3, #0]
    idx++;
 8015982:	7dfb      	ldrb	r3, [r7, #23]
 8015984:	3301      	adds	r3, #1
 8015986:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d1e7      	bne.n	8015960 <USBD_GetString+0x52>
 8015990:	e000      	b.n	8015994 <USBD_GetString+0x86>
    return;
 8015992:	bf00      	nop
  }
}
 8015994:	3718      	adds	r7, #24
 8015996:	46bd      	mov	sp, r7
 8015998:	bd80      	pop	{r7, pc}

0801599a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801599a:	b480      	push	{r7}
 801599c:	b085      	sub	sp, #20
 801599e:	af00      	add	r7, sp, #0
 80159a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80159a2:	2300      	movs	r3, #0
 80159a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80159aa:	e005      	b.n	80159b8 <USBD_GetLen+0x1e>
  {
    len++;
 80159ac:	7bfb      	ldrb	r3, [r7, #15]
 80159ae:	3301      	adds	r3, #1
 80159b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80159b2:	68bb      	ldr	r3, [r7, #8]
 80159b4:	3301      	adds	r3, #1
 80159b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80159b8:	68bb      	ldr	r3, [r7, #8]
 80159ba:	781b      	ldrb	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d1f5      	bne.n	80159ac <USBD_GetLen+0x12>
  }

  return len;
 80159c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80159c2:	4618      	mov	r0, r3
 80159c4:	3714      	adds	r7, #20
 80159c6:	46bd      	mov	sp, r7
 80159c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159cc:	4770      	bx	lr

080159ce <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80159ce:	b580      	push	{r7, lr}
 80159d0:	b084      	sub	sp, #16
 80159d2:	af00      	add	r7, sp, #0
 80159d4:	60f8      	str	r0, [r7, #12]
 80159d6:	60b9      	str	r1, [r7, #8]
 80159d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	2202      	movs	r2, #2
 80159de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	687a      	ldr	r2, [r7, #4]
 80159e6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	68ba      	ldr	r2, [r7, #8]
 80159f2:	2100      	movs	r1, #0
 80159f4:	68f8      	ldr	r0, [r7, #12]
 80159f6:	f000 fdc1 	bl	801657c <USBD_LL_Transmit>

  return USBD_OK;
 80159fa:	2300      	movs	r3, #0
}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3710      	adds	r7, #16
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	60f8      	str	r0, [r7, #12]
 8015a0c:	60b9      	str	r1, [r7, #8]
 8015a0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	68ba      	ldr	r2, [r7, #8]
 8015a14:	2100      	movs	r1, #0
 8015a16:	68f8      	ldr	r0, [r7, #12]
 8015a18:	f000 fdb0 	bl	801657c <USBD_LL_Transmit>

  return USBD_OK;
 8015a1c:	2300      	movs	r3, #0
}
 8015a1e:	4618      	mov	r0, r3
 8015a20:	3710      	adds	r7, #16
 8015a22:	46bd      	mov	sp, r7
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b084      	sub	sp, #16
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	60f8      	str	r0, [r7, #12]
 8015a2e:	60b9      	str	r1, [r7, #8]
 8015a30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	2203      	movs	r2, #3
 8015a36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	687a      	ldr	r2, [r7, #4]
 8015a3e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	68ba      	ldr	r2, [r7, #8]
 8015a4e:	2100      	movs	r1, #0
 8015a50:	68f8      	ldr	r0, [r7, #12]
 8015a52:	f000 fdcb 	bl	80165ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015a56:	2300      	movs	r3, #0
}
 8015a58:	4618      	mov	r0, r3
 8015a5a:	3710      	adds	r7, #16
 8015a5c:	46bd      	mov	sp, r7
 8015a5e:	bd80      	pop	{r7, pc}

08015a60 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b084      	sub	sp, #16
 8015a64:	af00      	add	r7, sp, #0
 8015a66:	60f8      	str	r0, [r7, #12]
 8015a68:	60b9      	str	r1, [r7, #8]
 8015a6a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	68ba      	ldr	r2, [r7, #8]
 8015a70:	2100      	movs	r1, #0
 8015a72:	68f8      	ldr	r0, [r7, #12]
 8015a74:	f000 fdba 	bl	80165ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015a78:	2300      	movs	r3, #0
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	3710      	adds	r7, #16
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	bd80      	pop	{r7, pc}

08015a82 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015a82:	b580      	push	{r7, lr}
 8015a84:	b082      	sub	sp, #8
 8015a86:	af00      	add	r7, sp, #0
 8015a88:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	2204      	movs	r2, #4
 8015a8e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015a92:	2300      	movs	r3, #0
 8015a94:	2200      	movs	r2, #0
 8015a96:	2100      	movs	r1, #0
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 fd6f 	bl	801657c <USBD_LL_Transmit>

  return USBD_OK;
 8015a9e:	2300      	movs	r3, #0
}
 8015aa0:	4618      	mov	r0, r3
 8015aa2:	3708      	adds	r7, #8
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}

08015aa8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b082      	sub	sp, #8
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2205      	movs	r2, #5
 8015ab4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015ab8:	2300      	movs	r3, #0
 8015aba:	2200      	movs	r2, #0
 8015abc:	2100      	movs	r1, #0
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 fd94 	bl	80165ec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015ac4:	2300      	movs	r3, #0
}
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	3708      	adds	r7, #8
 8015aca:	46bd      	mov	sp, r7
 8015acc:	bd80      	pop	{r7, pc}
	...

08015ad0 <Hes_USB_Config_Mode>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void Hes_USB_Config_Mode(void)
{
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	af00      	add	r7, sp, #0
	if (USBD_Init_CDC(&hUsbDeviceFS, &FS_Desc_CDC, DEVICE_FS) != USBD_OK)
 8015ad4:	2200      	movs	r2, #0
 8015ad6:	4912      	ldr	r1, [pc, #72]	; (8015b20 <Hes_USB_Config_Mode+0x50>)
 8015ad8:	4812      	ldr	r0, [pc, #72]	; (8015b24 <Hes_USB_Config_Mode+0x54>)
 8015ada:	f7fe feab 	bl	8014834 <USBD_Init_CDC>
 8015ade:	4603      	mov	r3, r0
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d001      	beq.n	8015ae8 <Hes_USB_Config_Mode+0x18>
	{
	  Error_Handler();
 8015ae4:	f7f3 ff18 	bl	8009918 <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015ae8:	490f      	ldr	r1, [pc, #60]	; (8015b28 <Hes_USB_Config_Mode+0x58>)
 8015aea:	480e      	ldr	r0, [pc, #56]	; (8015b24 <Hes_USB_Config_Mode+0x54>)
 8015aec:	f7fe fed2 	bl	8014894 <USBD_RegisterClass>
 8015af0:	4603      	mov	r3, r0
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d001      	beq.n	8015afa <Hes_USB_Config_Mode+0x2a>
	{
	  Error_Handler();
 8015af6:	f7f3 ff0f 	bl	8009918 <Error_Handler>
	}
	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015afa:	490c      	ldr	r1, [pc, #48]	; (8015b2c <Hes_USB_Config_Mode+0x5c>)
 8015afc:	4809      	ldr	r0, [pc, #36]	; (8015b24 <Hes_USB_Config_Mode+0x54>)
 8015afe:	f7eb fcbf 	bl	8001480 <USBD_CDC_RegisterInterface>
 8015b02:	4603      	mov	r3, r0
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d001      	beq.n	8015b0c <Hes_USB_Config_Mode+0x3c>
	{
	  Error_Handler();
 8015b08:	f7f3 ff06 	bl	8009918 <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015b0c:	4805      	ldr	r0, [pc, #20]	; (8015b24 <Hes_USB_Config_Mode+0x54>)
 8015b0e:	f7fe fee8 	bl	80148e2 <USBD_Start>
 8015b12:	4603      	mov	r3, r0
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d001      	beq.n	8015b1c <Hes_USB_Config_Mode+0x4c>
	{
	  Error_Handler();
 8015b18:	f7f3 fefe 	bl	8009918 <Error_Handler>
	}
}
 8015b1c:	bf00      	nop
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	20000810 	.word	0x20000810
 8015b24:	2000354c 	.word	0x2000354c
 8015b28:	2000000c 	.word	0x2000000c
 8015b2c:	20000114 	.word	0x20000114

08015b30 <USB_DFU>:

void USB_DFU(void)
{
 8015b30:	b580      	push	{r7, lr}
 8015b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8015b34:	2200      	movs	r2, #0
 8015b36:	4912      	ldr	r1, [pc, #72]	; (8015b80 <USB_DFU+0x50>)
 8015b38:	4812      	ldr	r0, [pc, #72]	; (8015b84 <USB_DFU+0x54>)
 8015b3a:	f7fe fe4b 	bl	80147d4 <USBD_Init>
 8015b3e:	4603      	mov	r3, r0
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d001      	beq.n	8015b48 <USB_DFU+0x18>
  {
    Error_Handler();
 8015b44:	f7f3 fee8 	bl	8009918 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 8015b48:	490f      	ldr	r1, [pc, #60]	; (8015b88 <USB_DFU+0x58>)
 8015b4a:	480e      	ldr	r0, [pc, #56]	; (8015b84 <USB_DFU+0x54>)
 8015b4c:	f7fe fea2 	bl	8014894 <USBD_RegisterClass>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <USB_DFU+0x2a>
  {
    Error_Handler();
 8015b56:	f7f3 fedf 	bl	8009918 <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 8015b5a:	490c      	ldr	r1, [pc, #48]	; (8015b8c <USB_DFU+0x5c>)
 8015b5c:	4809      	ldr	r0, [pc, #36]	; (8015b84 <USB_DFU+0x54>)
 8015b5e:	f7fe fab7 	bl	80140d0 <USBD_DFU_RegisterMedia>
 8015b62:	4603      	mov	r3, r0
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d001      	beq.n	8015b6c <USB_DFU+0x3c>
  {
    Error_Handler();
 8015b68:	f7f3 fed6 	bl	8009918 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015b6c:	4805      	ldr	r0, [pc, #20]	; (8015b84 <USB_DFU+0x54>)
 8015b6e:	f7fe feb8 	bl	80148e2 <USBD_Start>
 8015b72:	4603      	mov	r3, r0
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d001      	beq.n	8015b7c <USB_DFU+0x4c>
  {
    Error_Handler();
 8015b78:	f7f3 fece 	bl	8009918 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015b7c:	bf00      	nop
 8015b7e:	bd80      	pop	{r7, pc}
 8015b80:	20000830 	.word	0x20000830
 8015b84:	2000354c 	.word	0x2000354c
 8015b88:	200007ac 	.word	0x200007ac
 8015b8c:	200008a4 	.word	0x200008a4

08015b90 <USBD_FS_DeviceDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_DeviceDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015b90:	b480      	push	{r7}
 8015b92:	b083      	sub	sp, #12
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	4603      	mov	r3, r0
 8015b98:	6039      	str	r1, [r7, #0]
 8015b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc_CDC);
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	2212      	movs	r2, #18
 8015ba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_CDC;
 8015ba2:	4b03      	ldr	r3, [pc, #12]	; (8015bb0 <USBD_FS_DeviceDescriptor_CDC+0x20>)
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	370c      	adds	r7, #12
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bae:	4770      	bx	lr
 8015bb0:	20000864 	.word	0x20000864

08015bb4 <USBD_FS_DeviceDescriptor>:

uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
 8015bba:	4603      	mov	r3, r0
 8015bbc:	6039      	str	r1, [r7, #0]
 8015bbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015bc0:	683b      	ldr	r3, [r7, #0]
 8015bc2:	2212      	movs	r2, #18
 8015bc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015bc6:	4b03      	ldr	r3, [pc, #12]	; (8015bd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015bc8:	4618      	mov	r0, r3
 8015bca:	370c      	adds	r7, #12
 8015bcc:	46bd      	mov	sp, r7
 8015bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd2:	4770      	bx	lr
 8015bd4:	20000850 	.word	0x20000850

08015bd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bd8:	b480      	push	{r7}
 8015bda:	b083      	sub	sp, #12
 8015bdc:	af00      	add	r7, sp, #0
 8015bde:	4603      	mov	r3, r0
 8015be0:	6039      	str	r1, [r7, #0]
 8015be2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015be4:	683b      	ldr	r3, [r7, #0]
 8015be6:	2204      	movs	r2, #4
 8015be8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015bea:	4b03      	ldr	r3, [pc, #12]	; (8015bf8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015bec:	4618      	mov	r0, r3
 8015bee:	370c      	adds	r7, #12
 8015bf0:	46bd      	mov	sp, r7
 8015bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bf6:	4770      	bx	lr
 8015bf8:	20000884 	.word	0x20000884

08015bfc <USBD_FS_ProductStrDescriptor_CDC>:
  */

/* USER CODE BEGIN */

uint8_t * USBD_FS_ProductStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015bfc:	b580      	push	{r7, lr}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	4603      	mov	r3, r0
 8015c04:	6039      	str	r1, [r7, #0]
 8015c06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c08:	79fb      	ldrb	r3, [r7, #7]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d105      	bne.n	8015c1a <USBD_FS_ProductStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 8015c0e:	683a      	ldr	r2, [r7, #0]
 8015c10:	4907      	ldr	r1, [pc, #28]	; (8015c30 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8015c12:	4808      	ldr	r0, [pc, #32]	; (8015c34 <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8015c14:	f7ff fe7b 	bl	801590e <USBD_GetString>
 8015c18:	e004      	b.n	8015c24 <USBD_FS_ProductStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 8015c1a:	683a      	ldr	r2, [r7, #0]
 8015c1c:	4904      	ldr	r1, [pc, #16]	; (8015c30 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8015c1e:	4805      	ldr	r0, [pc, #20]	; (8015c34 <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8015c20:	f7ff fe75 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c24:	4b02      	ldr	r3, [pc, #8]	; (8015c30 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
}
 8015c26:	4618      	mov	r0, r3
 8015c28:	3708      	adds	r7, #8
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	2000381c 	.word	0x2000381c
 8015c34:	08019f94 	.word	0x08019f94

08015c38 <USBD_FS_ProductStrDescriptor>:

/* USER CODE END */

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b082      	sub	sp, #8
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	4603      	mov	r3, r0
 8015c40:	6039      	str	r1, [r7, #0]
 8015c42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c44:	79fb      	ldrb	r3, [r7, #7]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d105      	bne.n	8015c56 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c4a:	683a      	ldr	r2, [r7, #0]
 8015c4c:	4907      	ldr	r1, [pc, #28]	; (8015c6c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c4e:	4808      	ldr	r0, [pc, #32]	; (8015c70 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c50:	f7ff fe5d 	bl	801590e <USBD_GetString>
 8015c54:	e004      	b.n	8015c60 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c56:	683a      	ldr	r2, [r7, #0]
 8015c58:	4904      	ldr	r1, [pc, #16]	; (8015c6c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c5a:	4805      	ldr	r0, [pc, #20]	; (8015c70 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c5c:	f7ff fe57 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c60:	4b02      	ldr	r3, [pc, #8]	; (8015c6c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015c62:	4618      	mov	r0, r3
 8015c64:	3708      	adds	r7, #8
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	2000381c 	.word	0x2000381c
 8015c70:	08019fac 	.word	0x08019fac

08015c74 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c74:	b580      	push	{r7, lr}
 8015c76:	b082      	sub	sp, #8
 8015c78:	af00      	add	r7, sp, #0
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	6039      	str	r1, [r7, #0]
 8015c7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015c80:	683a      	ldr	r2, [r7, #0]
 8015c82:	4904      	ldr	r1, [pc, #16]	; (8015c94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015c84:	4804      	ldr	r0, [pc, #16]	; (8015c98 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015c86:	f7ff fe42 	bl	801590e <USBD_GetString>
  return USBD_StrDesc;
 8015c8a:	4b02      	ldr	r3, [pc, #8]	; (8015c94 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015c8c:	4618      	mov	r0, r3
 8015c8e:	3708      	adds	r7, #8
 8015c90:	46bd      	mov	sp, r7
 8015c92:	bd80      	pop	{r7, pc}
 8015c94:	2000381c 	.word	0x2000381c
 8015c98:	08019fcc 	.word	0x08019fcc

08015c9c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c9c:	b580      	push	{r7, lr}
 8015c9e:	b082      	sub	sp, #8
 8015ca0:	af00      	add	r7, sp, #0
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	6039      	str	r1, [r7, #0]
 8015ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	221a      	movs	r2, #26
 8015cac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015cae:	f000 f891 	bl	8015dd4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015cb2:	4b02      	ldr	r3, [pc, #8]	; (8015cbc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	3708      	adds	r7, #8
 8015cb8:	46bd      	mov	sp, r7
 8015cba:	bd80      	pop	{r7, pc}
 8015cbc:	20000888 	.word	0x20000888

08015cc0 <USBD_FS_ConfigStrDescriptor_CDC>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cc0:	b580      	push	{r7, lr}
 8015cc2:	b082      	sub	sp, #8
 8015cc4:	af00      	add	r7, sp, #0
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	6039      	str	r1, [r7, #0]
 8015cca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015ccc:	79fb      	ldrb	r3, [r7, #7]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d105      	bne.n	8015cde <USBD_FS_ConfigStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 8015cd2:	683a      	ldr	r2, [r7, #0]
 8015cd4:	4907      	ldr	r1, [pc, #28]	; (8015cf4 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 8015cd6:	4808      	ldr	r0, [pc, #32]	; (8015cf8 <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 8015cd8:	f7ff fe19 	bl	801590e <USBD_GetString>
 8015cdc:	e004      	b.n	8015ce8 <USBD_FS_ConfigStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 8015cde:	683a      	ldr	r2, [r7, #0]
 8015ce0:	4904      	ldr	r1, [pc, #16]	; (8015cf4 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 8015ce2:	4805      	ldr	r0, [pc, #20]	; (8015cf8 <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 8015ce4:	f7ff fe13 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015ce8:	4b02      	ldr	r3, [pc, #8]	; (8015cf4 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
}
 8015cea:	4618      	mov	r0, r3
 8015cec:	3708      	adds	r7, #8
 8015cee:	46bd      	mov	sp, r7
 8015cf0:	bd80      	pop	{r7, pc}
 8015cf2:	bf00      	nop
 8015cf4:	2000381c 	.word	0x2000381c
 8015cf8:	08019fd8 	.word	0x08019fd8

08015cfc <USBD_FS_ConfigStrDescriptor>:


uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b082      	sub	sp, #8
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	4603      	mov	r3, r0
 8015d04:	6039      	str	r1, [r7, #0]
 8015d06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015d08:	79fb      	ldrb	r3, [r7, #7]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d105      	bne.n	8015d1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d0e:	683a      	ldr	r2, [r7, #0]
 8015d10:	4907      	ldr	r1, [pc, #28]	; (8015d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d12:	4808      	ldr	r0, [pc, #32]	; (8015d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d14:	f7ff fdfb 	bl	801590e <USBD_GetString>
 8015d18:	e004      	b.n	8015d24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015d1a:	683a      	ldr	r2, [r7, #0]
 8015d1c:	4904      	ldr	r1, [pc, #16]	; (8015d30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015d1e:	4805      	ldr	r0, [pc, #20]	; (8015d34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015d20:	f7ff fdf5 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d24:	4b02      	ldr	r3, [pc, #8]	; (8015d30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015d26:	4618      	mov	r0, r3
 8015d28:	3708      	adds	r7, #8
 8015d2a:	46bd      	mov	sp, r7
 8015d2c:	bd80      	pop	{r7, pc}
 8015d2e:	bf00      	nop
 8015d30:	2000381c 	.word	0x2000381c
 8015d34:	08019fe4 	.word	0x08019fe4

08015d38 <USBD_FS_InterfaceStrDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_InterfaceStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b082      	sub	sp, #8
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	4603      	mov	r3, r0
 8015d40:	6039      	str	r1, [r7, #0]
 8015d42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015d44:	79fb      	ldrb	r3, [r7, #7]
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d105      	bne.n	8015d56 <USBD_FS_InterfaceStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 8015d4a:	683a      	ldr	r2, [r7, #0]
 8015d4c:	4907      	ldr	r1, [pc, #28]	; (8015d6c <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 8015d4e:	4808      	ldr	r0, [pc, #32]	; (8015d70 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8015d50:	f7ff fddd 	bl	801590e <USBD_GetString>
 8015d54:	e004      	b.n	8015d60 <USBD_FS_InterfaceStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 8015d56:	683a      	ldr	r2, [r7, #0]
 8015d58:	4904      	ldr	r1, [pc, #16]	; (8015d6c <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 8015d5a:	4805      	ldr	r0, [pc, #20]	; (8015d70 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8015d5c:	f7ff fdd7 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d60:	4b02      	ldr	r3, [pc, #8]	; (8015d6c <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
}
 8015d62:	4618      	mov	r0, r3
 8015d64:	3708      	adds	r7, #8
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	2000381c 	.word	0x2000381c
 8015d70:	08019ff0 	.word	0x08019ff0

08015d74 <USBD_FS_InterfaceStrDescriptor>:


uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b082      	sub	sp, #8
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	6039      	str	r1, [r7, #0]
 8015d7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015d80:	79fb      	ldrb	r3, [r7, #7]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d105      	bne.n	8015d92 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d86:	683a      	ldr	r2, [r7, #0]
 8015d88:	4907      	ldr	r1, [pc, #28]	; (8015da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d8a:	4808      	ldr	r0, [pc, #32]	; (8015dac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d8c:	f7ff fdbf 	bl	801590e <USBD_GetString>
 8015d90:	e004      	b.n	8015d9c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d92:	683a      	ldr	r2, [r7, #0]
 8015d94:	4904      	ldr	r1, [pc, #16]	; (8015da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d96:	4805      	ldr	r0, [pc, #20]	; (8015dac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d98:	f7ff fdb9 	bl	801590e <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d9c:	4b02      	ldr	r3, [pc, #8]	; (8015da8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015d9e:	4618      	mov	r0, r3
 8015da0:	3708      	adds	r7, #8
 8015da2:	46bd      	mov	sp, r7
 8015da4:	bd80      	pop	{r7, pc}
 8015da6:	bf00      	nop
 8015da8:	2000381c 	.word	0x2000381c
 8015dac:	0801a000 	.word	0x0801a000

08015db0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
 8015db6:	4603      	mov	r3, r0
 8015db8:	6039      	str	r1, [r7, #0]
 8015dba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	220c      	movs	r2, #12
 8015dc0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8015dc2:	4b03      	ldr	r3, [pc, #12]	; (8015dd0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	370c      	adds	r7, #12
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dce:	4770      	bx	lr
 8015dd0:	20000878 	.word	0x20000878

08015dd4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b084      	sub	sp, #16
 8015dd8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015dda:	4b0f      	ldr	r3, [pc, #60]	; (8015e18 <Get_SerialNum+0x44>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015de0:	4b0e      	ldr	r3, [pc, #56]	; (8015e1c <Get_SerialNum+0x48>)
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015de6:	4b0e      	ldr	r3, [pc, #56]	; (8015e20 <Get_SerialNum+0x4c>)
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015dec:	68fa      	ldr	r2, [r7, #12]
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	4413      	add	r3, r2
 8015df2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d009      	beq.n	8015e0e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015dfa:	2208      	movs	r2, #8
 8015dfc:	4909      	ldr	r1, [pc, #36]	; (8015e24 <Get_SerialNum+0x50>)
 8015dfe:	68f8      	ldr	r0, [r7, #12]
 8015e00:	f000 f814 	bl	8015e2c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015e04:	2204      	movs	r2, #4
 8015e06:	4908      	ldr	r1, [pc, #32]	; (8015e28 <Get_SerialNum+0x54>)
 8015e08:	68b8      	ldr	r0, [r7, #8]
 8015e0a:	f000 f80f 	bl	8015e2c <IntToUnicode>
  }
}
 8015e0e:	bf00      	nop
 8015e10:	3710      	adds	r7, #16
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
 8015e16:	bf00      	nop
 8015e18:	1fff7590 	.word	0x1fff7590
 8015e1c:	1fff7594 	.word	0x1fff7594
 8015e20:	1fff7598 	.word	0x1fff7598
 8015e24:	2000088a 	.word	0x2000088a
 8015e28:	2000089a 	.word	0x2000089a

08015e2c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015e2c:	b480      	push	{r7}
 8015e2e:	b087      	sub	sp, #28
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60f8      	str	r0, [r7, #12]
 8015e34:	60b9      	str	r1, [r7, #8]
 8015e36:	4613      	mov	r3, r2
 8015e38:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015e3e:	2300      	movs	r3, #0
 8015e40:	75fb      	strb	r3, [r7, #23]
 8015e42:	e027      	b.n	8015e94 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	0f1b      	lsrs	r3, r3, #28
 8015e48:	2b09      	cmp	r3, #9
 8015e4a:	d80b      	bhi.n	8015e64 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015e4c:	68fb      	ldr	r3, [r7, #12]
 8015e4e:	0f1b      	lsrs	r3, r3, #28
 8015e50:	b2da      	uxtb	r2, r3
 8015e52:	7dfb      	ldrb	r3, [r7, #23]
 8015e54:	005b      	lsls	r3, r3, #1
 8015e56:	4619      	mov	r1, r3
 8015e58:	68bb      	ldr	r3, [r7, #8]
 8015e5a:	440b      	add	r3, r1
 8015e5c:	3230      	adds	r2, #48	; 0x30
 8015e5e:	b2d2      	uxtb	r2, r2
 8015e60:	701a      	strb	r2, [r3, #0]
 8015e62:	e00a      	b.n	8015e7a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	0f1b      	lsrs	r3, r3, #28
 8015e68:	b2da      	uxtb	r2, r3
 8015e6a:	7dfb      	ldrb	r3, [r7, #23]
 8015e6c:	005b      	lsls	r3, r3, #1
 8015e6e:	4619      	mov	r1, r3
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	440b      	add	r3, r1
 8015e74:	3237      	adds	r2, #55	; 0x37
 8015e76:	b2d2      	uxtb	r2, r2
 8015e78:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	011b      	lsls	r3, r3, #4
 8015e7e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015e80:	7dfb      	ldrb	r3, [r7, #23]
 8015e82:	005b      	lsls	r3, r3, #1
 8015e84:	3301      	adds	r3, #1
 8015e86:	68ba      	ldr	r2, [r7, #8]
 8015e88:	4413      	add	r3, r2
 8015e8a:	2200      	movs	r2, #0
 8015e8c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015e8e:	7dfb      	ldrb	r3, [r7, #23]
 8015e90:	3301      	adds	r3, #1
 8015e92:	75fb      	strb	r3, [r7, #23]
 8015e94:	7dfa      	ldrb	r2, [r7, #23]
 8015e96:	79fb      	ldrb	r3, [r7, #7]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d3d3      	bcc.n	8015e44 <IntToUnicode+0x18>
  }
}
 8015e9c:	bf00      	nop
 8015e9e:	bf00      	nop
 8015ea0:	371c      	adds	r7, #28
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ea8:	4770      	bx	lr

08015eaa <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 8015eaa:	b480      	push	{r7}
 8015eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 8015eae:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eb8:	4770      	bx	lr

08015eba <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 8015eba:	b480      	push	{r7}
 8015ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 8015ebe:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 8015ec0:	4618      	mov	r0, r3
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec8:	4770      	bx	lr

08015eca <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 8015eca:	b480      	push	{r7}
 8015ecc:	b083      	sub	sp, #12
 8015ece:	af00      	add	r7, sp, #0
 8015ed0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 8015ed2:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	370c      	adds	r7, #12
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ede:	4770      	bx	lr

08015ee0 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8015ee0:	b480      	push	{r7}
 8015ee2:	b085      	sub	sp, #20
 8015ee4:	af00      	add	r7, sp, #0
 8015ee6:	60f8      	str	r0, [r7, #12]
 8015ee8:	60b9      	str	r1, [r7, #8]
 8015eea:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 8015eec:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr

08015efa <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 8015efa:	b480      	push	{r7}
 8015efc:	b085      	sub	sp, #20
 8015efe:	af00      	add	r7, sp, #0
 8015f00:	60f8      	str	r0, [r7, #12]
 8015f02:	60b9      	str	r1, [r7, #8]
 8015f04:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 8015f06:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015f08:	4618      	mov	r0, r3
 8015f0a:	3714      	adds	r7, #20
 8015f0c:	46bd      	mov	sp, r7
 8015f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f12:	4770      	bx	lr

08015f14 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8015f14:	b480      	push	{r7}
 8015f16:	b085      	sub	sp, #20
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	460b      	mov	r3, r1
 8015f1e:	607a      	str	r2, [r7, #4]
 8015f20:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8015f22:	7afb      	ldrb	r3, [r7, #11]
 8015f24:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 8015f26:	bf00      	nop
  }
  return (USBD_OK);
 8015f28:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015f2a:	4618      	mov	r0, r3
 8015f2c:	3714      	adds	r7, #20
 8015f2e:	46bd      	mov	sp, r7
 8015f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f34:	4770      	bx	lr
	...

08015f38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015f38:	b580      	push	{r7, lr}
 8015f3a:	b084      	sub	sp, #16
 8015f3c:	af00      	add	r7, sp, #0
 8015f3e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	681b      	ldr	r3, [r3, #0]
 8015f44:	4a0d      	ldr	r2, [pc, #52]	; (8015f7c <HAL_PCD_MspInit+0x44>)
 8015f46:	4293      	cmp	r3, r2
 8015f48:	d113      	bne.n	8015f72 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015f4a:	4b0d      	ldr	r3, [pc, #52]	; (8015f80 <HAL_PCD_MspInit+0x48>)
 8015f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f4e:	4a0c      	ldr	r2, [pc, #48]	; (8015f80 <HAL_PCD_MspInit+0x48>)
 8015f50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015f54:	6593      	str	r3, [r2, #88]	; 0x58
 8015f56:	4b0a      	ldr	r3, [pc, #40]	; (8015f80 <HAL_PCD_MspInit+0x48>)
 8015f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015f5e:	60fb      	str	r3, [r7, #12]
 8015f60:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8015f62:	2200      	movs	r2, #0
 8015f64:	2100      	movs	r1, #0
 8015f66:	2043      	movs	r0, #67	; 0x43
 8015f68:	f7f4 fb33 	bl	800a5d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8015f6c:	2043      	movs	r0, #67	; 0x43
 8015f6e:	f7f4 fb4c 	bl	800a60a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015f72:	bf00      	nop
 8015f74:	3710      	adds	r7, #16
 8015f76:	46bd      	mov	sp, r7
 8015f78:	bd80      	pop	{r7, pc}
 8015f7a:	bf00      	nop
 8015f7c:	40006800 	.word	0x40006800
 8015f80:	40021000 	.word	0x40021000

08015f84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b082      	sub	sp, #8
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8015f98:	4619      	mov	r1, r3
 8015f9a:	4610      	mov	r0, r2
 8015f9c:	f7fe fd07 	bl	80149ae <USBD_LL_SetupStage>
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}

08015fa8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	6078      	str	r0, [r7, #4]
 8015fb0:	460b      	mov	r3, r1
 8015fb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8015fba:	78fa      	ldrb	r2, [r7, #3]
 8015fbc:	6879      	ldr	r1, [r7, #4]
 8015fbe:	4613      	mov	r3, r2
 8015fc0:	009b      	lsls	r3, r3, #2
 8015fc2:	4413      	add	r3, r2
 8015fc4:	00db      	lsls	r3, r3, #3
 8015fc6:	440b      	add	r3, r1
 8015fc8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8015fcc:	681a      	ldr	r2, [r3, #0]
 8015fce:	78fb      	ldrb	r3, [r7, #3]
 8015fd0:	4619      	mov	r1, r3
 8015fd2:	f7fe fd41 	bl	8014a58 <USBD_LL_DataOutStage>
}
 8015fd6:	bf00      	nop
 8015fd8:	3708      	adds	r7, #8
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	bd80      	pop	{r7, pc}

08015fde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fde:	b580      	push	{r7, lr}
 8015fe0:	b082      	sub	sp, #8
 8015fe2:	af00      	add	r7, sp, #0
 8015fe4:	6078      	str	r0, [r7, #4]
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8015ff0:	78fa      	ldrb	r2, [r7, #3]
 8015ff2:	6879      	ldr	r1, [r7, #4]
 8015ff4:	4613      	mov	r3, r2
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	4413      	add	r3, r2
 8015ffa:	00db      	lsls	r3, r3, #3
 8015ffc:	440b      	add	r3, r1
 8015ffe:	333c      	adds	r3, #60	; 0x3c
 8016000:	681a      	ldr	r2, [r3, #0]
 8016002:	78fb      	ldrb	r3, [r7, #3]
 8016004:	4619      	mov	r1, r3
 8016006:	f7fe fd8a 	bl	8014b1e <USBD_LL_DataInStage>
}
 801600a:	bf00      	nop
 801600c:	3708      	adds	r7, #8
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}

08016012 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016012:	b580      	push	{r7, lr}
 8016014:	b082      	sub	sp, #8
 8016016:	af00      	add	r7, sp, #0
 8016018:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8016020:	4618      	mov	r0, r3
 8016022:	f7fe fe9e 	bl	8014d62 <USBD_LL_SOF>
}
 8016026:	bf00      	nop
 8016028:	3708      	adds	r7, #8
 801602a:	46bd      	mov	sp, r7
 801602c:	bd80      	pop	{r7, pc}

0801602e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801602e:	b580      	push	{r7, lr}
 8016030:	b084      	sub	sp, #16
 8016032:	af00      	add	r7, sp, #0
 8016034:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016036:	2301      	movs	r3, #1
 8016038:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	689b      	ldr	r3, [r3, #8]
 801603e:	2b02      	cmp	r3, #2
 8016040:	d001      	beq.n	8016046 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8016042:	f7f3 fc69 	bl	8009918 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801604c:	7bfa      	ldrb	r2, [r7, #15]
 801604e:	4611      	mov	r1, r2
 8016050:	4618      	mov	r0, r3
 8016052:	f7fe fe48 	bl	8014ce6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801605c:	4618      	mov	r0, r3
 801605e:	f7fe fdf4 	bl	8014c4a <USBD_LL_Reset>
}
 8016062:	bf00      	nop
 8016064:	3710      	adds	r7, #16
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}
	...

0801606c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801606c:	b580      	push	{r7, lr}
 801606e:	b082      	sub	sp, #8
 8016070:	af00      	add	r7, sp, #0
 8016072:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801607a:	4618      	mov	r0, r3
 801607c:	f7fe fe43 	bl	8014d06 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	699b      	ldr	r3, [r3, #24]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d005      	beq.n	8016094 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016088:	4b04      	ldr	r3, [pc, #16]	; (801609c <HAL_PCD_SuspendCallback+0x30>)
 801608a:	691b      	ldr	r3, [r3, #16]
 801608c:	4a03      	ldr	r2, [pc, #12]	; (801609c <HAL_PCD_SuspendCallback+0x30>)
 801608e:	f043 0306 	orr.w	r3, r3, #6
 8016092:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016094:	bf00      	nop
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	e000ed00 	.word	0xe000ed00

080160a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b082      	sub	sp, #8
 80160a4:	af00      	add	r7, sp, #0
 80160a6:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	699b      	ldr	r3, [r3, #24]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d007      	beq.n	80160c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80160b0:	4b08      	ldr	r3, [pc, #32]	; (80160d4 <HAL_PCD_ResumeCallback+0x34>)
 80160b2:	691b      	ldr	r3, [r3, #16]
 80160b4:	4a07      	ldr	r2, [pc, #28]	; (80160d4 <HAL_PCD_ResumeCallback+0x34>)
 80160b6:	f023 0306 	bic.w	r3, r3, #6
 80160ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80160bc:	f000 fb30 	bl	8016720 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80160c6:	4618      	mov	r0, r3
 80160c8:	f7fe fe33 	bl	8014d32 <USBD_LL_Resume>
}
 80160cc:	bf00      	nop
 80160ce:	3708      	adds	r7, #8
 80160d0:	46bd      	mov	sp, r7
 80160d2:	bd80      	pop	{r7, pc}
 80160d4:	e000ed00 	.word	0xe000ed00

080160d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80160d8:	b580      	push	{r7, lr}
 80160da:	b082      	sub	sp, #8
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80160e0:	f7f7 fe40 	bl	800dd64 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80160e4:	4a1e      	ldr	r2, [pc, #120]	; (8016160 <USBD_LL_Init+0x88>)
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	4a1c      	ldr	r2, [pc, #112]	; (8016160 <USBD_LL_Init+0x88>)
 80160f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80160f4:	4b1a      	ldr	r3, [pc, #104]	; (8016160 <USBD_LL_Init+0x88>)
 80160f6:	4a1b      	ldr	r2, [pc, #108]	; (8016164 <USBD_LL_Init+0x8c>)
 80160f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80160fa:	4b19      	ldr	r3, [pc, #100]	; (8016160 <USBD_LL_Init+0x88>)
 80160fc:	2208      	movs	r2, #8
 80160fe:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016100:	4b17      	ldr	r3, [pc, #92]	; (8016160 <USBD_LL_Init+0x88>)
 8016102:	2202      	movs	r2, #2
 8016104:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016106:	4b16      	ldr	r3, [pc, #88]	; (8016160 <USBD_LL_Init+0x88>)
 8016108:	2202      	movs	r2, #2
 801610a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801610c:	4b14      	ldr	r3, [pc, #80]	; (8016160 <USBD_LL_Init+0x88>)
 801610e:	2200      	movs	r2, #0
 8016110:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8016112:	4b13      	ldr	r3, [pc, #76]	; (8016160 <USBD_LL_Init+0x88>)
 8016114:	2200      	movs	r2, #0
 8016116:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8016118:	4b11      	ldr	r3, [pc, #68]	; (8016160 <USBD_LL_Init+0x88>)
 801611a:	2200      	movs	r2, #0
 801611c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801611e:	4b10      	ldr	r3, [pc, #64]	; (8016160 <USBD_LL_Init+0x88>)
 8016120:	2200      	movs	r2, #0
 8016122:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8016124:	480e      	ldr	r0, [pc, #56]	; (8016160 <USBD_LL_Init+0x88>)
 8016126:	f7f6 f8b8 	bl	800c29a <HAL_PCD_Init>
 801612a:	4603      	mov	r3, r0
 801612c:	2b00      	cmp	r3, #0
 801612e:	d001      	beq.n	8016134 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8016130:	f7f3 fbf2 	bl	8009918 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801613a:	2318      	movs	r3, #24
 801613c:	2200      	movs	r2, #0
 801613e:	2100      	movs	r1, #0
 8016140:	f7f7 fd2f 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801614a:	2358      	movs	r3, #88	; 0x58
 801614c:	2200      	movs	r2, #0
 801614e:	2180      	movs	r1, #128	; 0x80
 8016150:	f7f7 fd27 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8016154:	2300      	movs	r3, #0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	20003a1c 	.word	0x20003a1c
 8016164:	40006800 	.word	0x40006800

08016168 <USBD_LL_Init_CDC>:

/* USER CODE BEGIN */
//LBLeo
USBD_StatusTypeDef USBD_LL_Init_CDC(USBD_HandleTypeDef *pdev)
{
 8016168:	b580      	push	{r7, lr}
 801616a:	b082      	sub	sp, #8
 801616c:	af00      	add	r7, sp, #0
 801616e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8016170:	f7f7 fdf8 	bl	800dd64 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8016174:	4a2b      	ldr	r2, [pc, #172]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	4a29      	ldr	r2, [pc, #164]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 8016180:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8016184:	4b27      	ldr	r3, [pc, #156]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 8016186:	4a28      	ldr	r2, [pc, #160]	; (8016228 <USBD_LL_Init_CDC+0xc0>)
 8016188:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801618a:	4b26      	ldr	r3, [pc, #152]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 801618c:	2208      	movs	r2, #8
 801618e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8016190:	4b24      	ldr	r3, [pc, #144]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 8016192:	2202      	movs	r2, #2
 8016194:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016196:	4b23      	ldr	r3, [pc, #140]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 8016198:	2202      	movs	r2, #2
 801619a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 801619c:	4b21      	ldr	r3, [pc, #132]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 801619e:	2200      	movs	r2, #0
 80161a0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80161a2:	4b20      	ldr	r3, [pc, #128]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 80161a4:	2200      	movs	r2, #0
 80161a6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80161a8:	4b1e      	ldr	r3, [pc, #120]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 80161aa:	2200      	movs	r2, #0
 80161ac:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80161ae:	4b1d      	ldr	r3, [pc, #116]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 80161b0:	2200      	movs	r2, #0
 80161b2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80161b4:	481b      	ldr	r0, [pc, #108]	; (8016224 <USBD_LL_Init_CDC+0xbc>)
 80161b6:	f7f6 f870 	bl	800c29a <HAL_PCD_Init>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d001      	beq.n	80161c4 <USBD_LL_Init_CDC+0x5c>
  {
    Error_Handler( );
 80161c0:	f7f3 fbaa 	bl	8009918 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161ca:	2318      	movs	r3, #24
 80161cc:	2200      	movs	r2, #0
 80161ce:	2100      	movs	r1, #0
 80161d0:	f7f7 fce7 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161da:	2358      	movs	r3, #88	; 0x58
 80161dc:	2200      	movs	r2, #0
 80161de:	2180      	movs	r1, #128	; 0x80
 80161e0:	f7f7 fcdf 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161ea:	23c0      	movs	r3, #192	; 0xc0
 80161ec:	2200      	movs	r2, #0
 80161ee:	2181      	movs	r1, #129	; 0x81
 80161f0:	f7f7 fcd7 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80161fa:	f44f 7388 	mov.w	r3, #272	; 0x110
 80161fe:	2200      	movs	r2, #0
 8016200:	2101      	movs	r1, #1
 8016202:	f7f7 fcce 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801620c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016210:	2200      	movs	r2, #0
 8016212:	2182      	movs	r1, #130	; 0x82
 8016214:	f7f7 fcc5 	bl	800dba2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8016218:	2300      	movs	r3, #0
}
 801621a:	4618      	mov	r0, r3
 801621c:	3708      	adds	r7, #8
 801621e:	46bd      	mov	sp, r7
 8016220:	bd80      	pop	{r7, pc}
 8016222:	bf00      	nop
 8016224:	20003a1c 	.word	0x20003a1c
 8016228:	40006800 	.word	0x40006800

0801622c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016234:	2300      	movs	r3, #0
 8016236:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016238:	2300      	movs	r3, #0
 801623a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016242:	4618      	mov	r0, r3
 8016244:	f7f6 f93b 	bl	800c4be <HAL_PCD_Start>
 8016248:	4603      	mov	r3, r0
 801624a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801624c:	7bbb      	ldrb	r3, [r7, #14]
 801624e:	2b03      	cmp	r3, #3
 8016250:	d816      	bhi.n	8016280 <USBD_LL_Start+0x54>
 8016252:	a201      	add	r2, pc, #4	; (adr r2, 8016258 <USBD_LL_Start+0x2c>)
 8016254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016258:	08016269 	.word	0x08016269
 801625c:	0801626f 	.word	0x0801626f
 8016260:	08016275 	.word	0x08016275
 8016264:	0801627b 	.word	0x0801627b
    case HAL_OK :
      usb_status = USBD_OK;
 8016268:	2300      	movs	r3, #0
 801626a:	73fb      	strb	r3, [r7, #15]
    break;
 801626c:	e00b      	b.n	8016286 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801626e:	2303      	movs	r3, #3
 8016270:	73fb      	strb	r3, [r7, #15]
    break;
 8016272:	e008      	b.n	8016286 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016274:	2301      	movs	r3, #1
 8016276:	73fb      	strb	r3, [r7, #15]
    break;
 8016278:	e005      	b.n	8016286 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801627a:	2303      	movs	r3, #3
 801627c:	73fb      	strb	r3, [r7, #15]
    break;
 801627e:	e002      	b.n	8016286 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8016280:	2303      	movs	r3, #3
 8016282:	73fb      	strb	r3, [r7, #15]
    break;
 8016284:	bf00      	nop
  }
  return usb_status;
 8016286:	7bfb      	ldrb	r3, [r7, #15]
}
 8016288:	4618      	mov	r0, r3
 801628a:	3710      	adds	r7, #16
 801628c:	46bd      	mov	sp, r7
 801628e:	bd80      	pop	{r7, pc}

08016290 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016298:	2300      	movs	r3, #0
 801629a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801629c:	2300      	movs	r3, #0
 801629e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162a6:	4618      	mov	r0, r3
 80162a8:	f7f6 f92b 	bl	800c502 <HAL_PCD_Stop>
 80162ac:	4603      	mov	r3, r0
 80162ae:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80162b0:	7bbb      	ldrb	r3, [r7, #14]
 80162b2:	2b03      	cmp	r3, #3
 80162b4:	d816      	bhi.n	80162e4 <USBD_LL_Stop+0x54>
 80162b6:	a201      	add	r2, pc, #4	; (adr r2, 80162bc <USBD_LL_Stop+0x2c>)
 80162b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80162bc:	080162cd 	.word	0x080162cd
 80162c0:	080162d3 	.word	0x080162d3
 80162c4:	080162d9 	.word	0x080162d9
 80162c8:	080162df 	.word	0x080162df
    case HAL_OK :
      usb_status = USBD_OK;
 80162cc:	2300      	movs	r3, #0
 80162ce:	73fb      	strb	r3, [r7, #15]
    break;
 80162d0:	e00b      	b.n	80162ea <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80162d2:	2303      	movs	r3, #3
 80162d4:	73fb      	strb	r3, [r7, #15]
    break;
 80162d6:	e008      	b.n	80162ea <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80162d8:	2301      	movs	r3, #1
 80162da:	73fb      	strb	r3, [r7, #15]
    break;
 80162dc:	e005      	b.n	80162ea <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80162de:	2303      	movs	r3, #3
 80162e0:	73fb      	strb	r3, [r7, #15]
    break;
 80162e2:	e002      	b.n	80162ea <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 80162e4:	2303      	movs	r3, #3
 80162e6:	73fb      	strb	r3, [r7, #15]
    break;
 80162e8:	bf00      	nop
  }
  return usb_status;
 80162ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ec:	4618      	mov	r0, r3
 80162ee:	3710      	adds	r7, #16
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bd80      	pop	{r7, pc}

080162f4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b084      	sub	sp, #16
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	6078      	str	r0, [r7, #4]
 80162fc:	4608      	mov	r0, r1
 80162fe:	4611      	mov	r1, r2
 8016300:	461a      	mov	r2, r3
 8016302:	4603      	mov	r3, r0
 8016304:	70fb      	strb	r3, [r7, #3]
 8016306:	460b      	mov	r3, r1
 8016308:	70bb      	strb	r3, [r7, #2]
 801630a:	4613      	mov	r3, r2
 801630c:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801630e:	2300      	movs	r3, #0
 8016310:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016312:	2300      	movs	r3, #0
 8016314:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801631c:	78bb      	ldrb	r3, [r7, #2]
 801631e:	883a      	ldrh	r2, [r7, #0]
 8016320:	78f9      	ldrb	r1, [r7, #3]
 8016322:	f7f6 fa83 	bl	800c82c <HAL_PCD_EP_Open>
 8016326:	4603      	mov	r3, r0
 8016328:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 801632a:	7bbb      	ldrb	r3, [r7, #14]
 801632c:	2b03      	cmp	r3, #3
 801632e:	d817      	bhi.n	8016360 <USBD_LL_OpenEP+0x6c>
 8016330:	a201      	add	r2, pc, #4	; (adr r2, 8016338 <USBD_LL_OpenEP+0x44>)
 8016332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016336:	bf00      	nop
 8016338:	08016349 	.word	0x08016349
 801633c:	0801634f 	.word	0x0801634f
 8016340:	08016355 	.word	0x08016355
 8016344:	0801635b 	.word	0x0801635b
    case HAL_OK :
      usb_status = USBD_OK;
 8016348:	2300      	movs	r3, #0
 801634a:	73fb      	strb	r3, [r7, #15]
    break;
 801634c:	e00b      	b.n	8016366 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801634e:	2303      	movs	r3, #3
 8016350:	73fb      	strb	r3, [r7, #15]
    break;
 8016352:	e008      	b.n	8016366 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016354:	2301      	movs	r3, #1
 8016356:	73fb      	strb	r3, [r7, #15]
    break;
 8016358:	e005      	b.n	8016366 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801635a:	2303      	movs	r3, #3
 801635c:	73fb      	strb	r3, [r7, #15]
    break;
 801635e:	e002      	b.n	8016366 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8016360:	2303      	movs	r3, #3
 8016362:	73fb      	strb	r3, [r7, #15]
    break;
 8016364:	bf00      	nop
  }
  return usb_status;
 8016366:	7bfb      	ldrb	r3, [r7, #15]
}
 8016368:	4618      	mov	r0, r3
 801636a:	3710      	adds	r7, #16
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b084      	sub	sp, #16
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
 8016378:	460b      	mov	r3, r1
 801637a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801637c:	2300      	movs	r3, #0
 801637e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016380:	2300      	movs	r3, #0
 8016382:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801638a:	78fa      	ldrb	r2, [r7, #3]
 801638c:	4611      	mov	r1, r2
 801638e:	4618      	mov	r0, r3
 8016390:	f7f6 fab2 	bl	800c8f8 <HAL_PCD_EP_Close>
 8016394:	4603      	mov	r3, r0
 8016396:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016398:	7bbb      	ldrb	r3, [r7, #14]
 801639a:	2b03      	cmp	r3, #3
 801639c:	d816      	bhi.n	80163cc <USBD_LL_CloseEP+0x5c>
 801639e:	a201      	add	r2, pc, #4	; (adr r2, 80163a4 <USBD_LL_CloseEP+0x34>)
 80163a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163a4:	080163b5 	.word	0x080163b5
 80163a8:	080163bb 	.word	0x080163bb
 80163ac:	080163c1 	.word	0x080163c1
 80163b0:	080163c7 	.word	0x080163c7
    case HAL_OK :
      usb_status = USBD_OK;
 80163b4:	2300      	movs	r3, #0
 80163b6:	73fb      	strb	r3, [r7, #15]
    break;
 80163b8:	e00b      	b.n	80163d2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80163ba:	2303      	movs	r3, #3
 80163bc:	73fb      	strb	r3, [r7, #15]
    break;
 80163be:	e008      	b.n	80163d2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80163c0:	2301      	movs	r3, #1
 80163c2:	73fb      	strb	r3, [r7, #15]
    break;
 80163c4:	e005      	b.n	80163d2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80163c6:	2303      	movs	r3, #3
 80163c8:	73fb      	strb	r3, [r7, #15]
    break;
 80163ca:	e002      	b.n	80163d2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80163cc:	2303      	movs	r3, #3
 80163ce:	73fb      	strb	r3, [r7, #15]
    break;
 80163d0:	bf00      	nop
  }
  return usb_status;
 80163d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3710      	adds	r7, #16
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	460b      	mov	r3, r1
 80163e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80163e8:	2300      	movs	r3, #0
 80163ea:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163ec:	2300      	movs	r3, #0
 80163ee:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80163f0:	687b      	ldr	r3, [r7, #4]
 80163f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163f6:	78fa      	ldrb	r2, [r7, #3]
 80163f8:	4611      	mov	r1, r2
 80163fa:	4618      	mov	r0, r3
 80163fc:	f7f6 fb5c 	bl	800cab8 <HAL_PCD_EP_SetStall>
 8016400:	4603      	mov	r3, r0
 8016402:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016404:	7bbb      	ldrb	r3, [r7, #14]
 8016406:	2b03      	cmp	r3, #3
 8016408:	d816      	bhi.n	8016438 <USBD_LL_StallEP+0x5c>
 801640a:	a201      	add	r2, pc, #4	; (adr r2, 8016410 <USBD_LL_StallEP+0x34>)
 801640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016410:	08016421 	.word	0x08016421
 8016414:	08016427 	.word	0x08016427
 8016418:	0801642d 	.word	0x0801642d
 801641c:	08016433 	.word	0x08016433
    case HAL_OK :
      usb_status = USBD_OK;
 8016420:	2300      	movs	r3, #0
 8016422:	73fb      	strb	r3, [r7, #15]
    break;
 8016424:	e00b      	b.n	801643e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016426:	2303      	movs	r3, #3
 8016428:	73fb      	strb	r3, [r7, #15]
    break;
 801642a:	e008      	b.n	801643e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801642c:	2301      	movs	r3, #1
 801642e:	73fb      	strb	r3, [r7, #15]
    break;
 8016430:	e005      	b.n	801643e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016432:	2303      	movs	r3, #3
 8016434:	73fb      	strb	r3, [r7, #15]
    break;
 8016436:	e002      	b.n	801643e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8016438:	2303      	movs	r3, #3
 801643a:	73fb      	strb	r3, [r7, #15]
    break;
 801643c:	bf00      	nop
  }
  return usb_status;
 801643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016440:	4618      	mov	r0, r3
 8016442:	3710      	adds	r7, #16
 8016444:	46bd      	mov	sp, r7
 8016446:	bd80      	pop	{r7, pc}

08016448 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	460b      	mov	r3, r1
 8016452:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016454:	2300      	movs	r3, #0
 8016456:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016458:	2300      	movs	r3, #0
 801645a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016462:	78fa      	ldrb	r2, [r7, #3]
 8016464:	4611      	mov	r1, r2
 8016466:	4618      	mov	r0, r3
 8016468:	f7f6 fb86 	bl	800cb78 <HAL_PCD_EP_ClrStall>
 801646c:	4603      	mov	r3, r0
 801646e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016470:	7bbb      	ldrb	r3, [r7, #14]
 8016472:	2b03      	cmp	r3, #3
 8016474:	d816      	bhi.n	80164a4 <USBD_LL_ClearStallEP+0x5c>
 8016476:	a201      	add	r2, pc, #4	; (adr r2, 801647c <USBD_LL_ClearStallEP+0x34>)
 8016478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801647c:	0801648d 	.word	0x0801648d
 8016480:	08016493 	.word	0x08016493
 8016484:	08016499 	.word	0x08016499
 8016488:	0801649f 	.word	0x0801649f
    case HAL_OK :
      usb_status = USBD_OK;
 801648c:	2300      	movs	r3, #0
 801648e:	73fb      	strb	r3, [r7, #15]
    break;
 8016490:	e00b      	b.n	80164aa <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016492:	2303      	movs	r3, #3
 8016494:	73fb      	strb	r3, [r7, #15]
    break;
 8016496:	e008      	b.n	80164aa <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016498:	2301      	movs	r3, #1
 801649a:	73fb      	strb	r3, [r7, #15]
    break;
 801649c:	e005      	b.n	80164aa <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801649e:	2303      	movs	r3, #3
 80164a0:	73fb      	strb	r3, [r7, #15]
    break;
 80164a2:	e002      	b.n	80164aa <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80164a4:	2303      	movs	r3, #3
 80164a6:	73fb      	strb	r3, [r7, #15]
    break;
 80164a8:	bf00      	nop
  }
  return usb_status;
 80164aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ac:	4618      	mov	r0, r3
 80164ae:	3710      	adds	r7, #16
 80164b0:	46bd      	mov	sp, r7
 80164b2:	bd80      	pop	{r7, pc}

080164b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80164b4:	b480      	push	{r7}
 80164b6:	b085      	sub	sp, #20
 80164b8:	af00      	add	r7, sp, #0
 80164ba:	6078      	str	r0, [r7, #4]
 80164bc:	460b      	mov	r3, r1
 80164be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80164c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80164c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80164cc:	2b00      	cmp	r3, #0
 80164ce:	da0c      	bge.n	80164ea <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80164d0:	78fb      	ldrb	r3, [r7, #3]
 80164d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80164d6:	68f9      	ldr	r1, [r7, #12]
 80164d8:	1c5a      	adds	r2, r3, #1
 80164da:	4613      	mov	r3, r2
 80164dc:	009b      	lsls	r3, r3, #2
 80164de:	4413      	add	r3, r2
 80164e0:	00db      	lsls	r3, r3, #3
 80164e2:	440b      	add	r3, r1
 80164e4:	3302      	adds	r3, #2
 80164e6:	781b      	ldrb	r3, [r3, #0]
 80164e8:	e00b      	b.n	8016502 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80164ea:	78fb      	ldrb	r3, [r7, #3]
 80164ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80164f0:	68f9      	ldr	r1, [r7, #12]
 80164f2:	4613      	mov	r3, r2
 80164f4:	009b      	lsls	r3, r3, #2
 80164f6:	4413      	add	r3, r2
 80164f8:	00db      	lsls	r3, r3, #3
 80164fa:	440b      	add	r3, r1
 80164fc:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8016500:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016502:	4618      	mov	r0, r3
 8016504:	3714      	adds	r7, #20
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr
	...

08016510 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b084      	sub	sp, #16
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
 8016518:	460b      	mov	r3, r1
 801651a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801651c:	2300      	movs	r3, #0
 801651e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016520:	2300      	movs	r3, #0
 8016522:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801652a:	78fa      	ldrb	r2, [r7, #3]
 801652c:	4611      	mov	r1, r2
 801652e:	4618      	mov	r0, r3
 8016530:	f7f6 f957 	bl	800c7e2 <HAL_PCD_SetAddress>
 8016534:	4603      	mov	r3, r0
 8016536:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8016538:	7bbb      	ldrb	r3, [r7, #14]
 801653a:	2b03      	cmp	r3, #3
 801653c:	d816      	bhi.n	801656c <USBD_LL_SetUSBAddress+0x5c>
 801653e:	a201      	add	r2, pc, #4	; (adr r2, 8016544 <USBD_LL_SetUSBAddress+0x34>)
 8016540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016544:	08016555 	.word	0x08016555
 8016548:	0801655b 	.word	0x0801655b
 801654c:	08016561 	.word	0x08016561
 8016550:	08016567 	.word	0x08016567
    case HAL_OK :
      usb_status = USBD_OK;
 8016554:	2300      	movs	r3, #0
 8016556:	73fb      	strb	r3, [r7, #15]
    break;
 8016558:	e00b      	b.n	8016572 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801655a:	2303      	movs	r3, #3
 801655c:	73fb      	strb	r3, [r7, #15]
    break;
 801655e:	e008      	b.n	8016572 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016560:	2301      	movs	r3, #1
 8016562:	73fb      	strb	r3, [r7, #15]
    break;
 8016564:	e005      	b.n	8016572 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016566:	2303      	movs	r3, #3
 8016568:	73fb      	strb	r3, [r7, #15]
    break;
 801656a:	e002      	b.n	8016572 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 801656c:	2303      	movs	r3, #3
 801656e:	73fb      	strb	r3, [r7, #15]
    break;
 8016570:	bf00      	nop
  }
  return usb_status;
 8016572:	7bfb      	ldrb	r3, [r7, #15]
}
 8016574:	4618      	mov	r0, r3
 8016576:	3710      	adds	r7, #16
 8016578:	46bd      	mov	sp, r7
 801657a:	bd80      	pop	{r7, pc}

0801657c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801657c:	b580      	push	{r7, lr}
 801657e:	b086      	sub	sp, #24
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	607a      	str	r2, [r7, #4]
 8016586:	603b      	str	r3, [r7, #0]
 8016588:	460b      	mov	r3, r1
 801658a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801658c:	2300      	movs	r3, #0
 801658e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016590:	2300      	movs	r3, #0
 8016592:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801659a:	7af9      	ldrb	r1, [r7, #11]
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	f7f6 fa47 	bl	800ca32 <HAL_PCD_EP_Transmit>
 80165a4:	4603      	mov	r3, r0
 80165a6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80165a8:	7dbb      	ldrb	r3, [r7, #22]
 80165aa:	2b03      	cmp	r3, #3
 80165ac:	d816      	bhi.n	80165dc <USBD_LL_Transmit+0x60>
 80165ae:	a201      	add	r2, pc, #4	; (adr r2, 80165b4 <USBD_LL_Transmit+0x38>)
 80165b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80165b4:	080165c5 	.word	0x080165c5
 80165b8:	080165cb 	.word	0x080165cb
 80165bc:	080165d1 	.word	0x080165d1
 80165c0:	080165d7 	.word	0x080165d7
    case HAL_OK :
      usb_status = USBD_OK;
 80165c4:	2300      	movs	r3, #0
 80165c6:	75fb      	strb	r3, [r7, #23]
    break;
 80165c8:	e00b      	b.n	80165e2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80165ca:	2303      	movs	r3, #3
 80165cc:	75fb      	strb	r3, [r7, #23]
    break;
 80165ce:	e008      	b.n	80165e2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80165d0:	2301      	movs	r3, #1
 80165d2:	75fb      	strb	r3, [r7, #23]
    break;
 80165d4:	e005      	b.n	80165e2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80165d6:	2303      	movs	r3, #3
 80165d8:	75fb      	strb	r3, [r7, #23]
    break;
 80165da:	e002      	b.n	80165e2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80165dc:	2303      	movs	r3, #3
 80165de:	75fb      	strb	r3, [r7, #23]
    break;
 80165e0:	bf00      	nop
  }
  return usb_status;
 80165e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80165e4:	4618      	mov	r0, r3
 80165e6:	3718      	adds	r7, #24
 80165e8:	46bd      	mov	sp, r7
 80165ea:	bd80      	pop	{r7, pc}

080165ec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b086      	sub	sp, #24
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	60f8      	str	r0, [r7, #12]
 80165f4:	607a      	str	r2, [r7, #4]
 80165f6:	603b      	str	r3, [r7, #0]
 80165f8:	460b      	mov	r3, r1
 80165fa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80165fc:	2300      	movs	r3, #0
 80165fe:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016600:	2300      	movs	r3, #0
 8016602:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016604:	68fb      	ldr	r3, [r7, #12]
 8016606:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801660a:	7af9      	ldrb	r1, [r7, #11]
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	687a      	ldr	r2, [r7, #4]
 8016610:	f7f6 f9ba 	bl	800c988 <HAL_PCD_EP_Receive>
 8016614:	4603      	mov	r3, r0
 8016616:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8016618:	7dbb      	ldrb	r3, [r7, #22]
 801661a:	2b03      	cmp	r3, #3
 801661c:	d816      	bhi.n	801664c <USBD_LL_PrepareReceive+0x60>
 801661e:	a201      	add	r2, pc, #4	; (adr r2, 8016624 <USBD_LL_PrepareReceive+0x38>)
 8016620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016624:	08016635 	.word	0x08016635
 8016628:	0801663b 	.word	0x0801663b
 801662c:	08016641 	.word	0x08016641
 8016630:	08016647 	.word	0x08016647
    case HAL_OK :
      usb_status = USBD_OK;
 8016634:	2300      	movs	r3, #0
 8016636:	75fb      	strb	r3, [r7, #23]
    break;
 8016638:	e00b      	b.n	8016652 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801663a:	2303      	movs	r3, #3
 801663c:	75fb      	strb	r3, [r7, #23]
    break;
 801663e:	e008      	b.n	8016652 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016640:	2301      	movs	r3, #1
 8016642:	75fb      	strb	r3, [r7, #23]
    break;
 8016644:	e005      	b.n	8016652 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016646:	2303      	movs	r3, #3
 8016648:	75fb      	strb	r3, [r7, #23]
    break;
 801664a:	e002      	b.n	8016652 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 801664c:	2303      	movs	r3, #3
 801664e:	75fb      	strb	r3, [r7, #23]
    break;
 8016650:	bf00      	nop
  }
  return usb_status;
 8016652:	7dfb      	ldrb	r3, [r7, #23]
}
 8016654:	4618      	mov	r0, r3
 8016656:	3718      	adds	r7, #24
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	460b      	mov	r3, r1
 8016666:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801666e:	78fa      	ldrb	r2, [r7, #3]
 8016670:	4611      	mov	r1, r2
 8016672:	4618      	mov	r0, r3
 8016674:	f7f6 f9c5 	bl	800ca02 <HAL_PCD_EP_GetRxCount>
 8016678:	4603      	mov	r3, r0
}
 801667a:	4618      	mov	r0, r3
 801667c:	3708      	adds	r7, #8
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
	...

08016684 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	b082      	sub	sp, #8
 8016688:	af00      	add	r7, sp, #0
 801668a:	6078      	str	r0, [r7, #4]
 801668c:	460b      	mov	r3, r1
 801668e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016690:	78fb      	ldrb	r3, [r7, #3]
 8016692:	2b00      	cmp	r3, #0
 8016694:	d002      	beq.n	801669c <HAL_PCDEx_LPM_Callback+0x18>
 8016696:	2b01      	cmp	r3, #1
 8016698:	d013      	beq.n	80166c2 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801669a:	e023      	b.n	80166e4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 801669c:	687b      	ldr	r3, [r7, #4]
 801669e:	699b      	ldr	r3, [r3, #24]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d007      	beq.n	80166b4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80166a4:	f000 f83c 	bl	8016720 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166a8:	4b10      	ldr	r3, [pc, #64]	; (80166ec <HAL_PCDEx_LPM_Callback+0x68>)
 80166aa:	691b      	ldr	r3, [r3, #16]
 80166ac:	4a0f      	ldr	r2, [pc, #60]	; (80166ec <HAL_PCDEx_LPM_Callback+0x68>)
 80166ae:	f023 0306 	bic.w	r3, r3, #6
 80166b2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80166ba:	4618      	mov	r0, r3
 80166bc:	f7fe fb39 	bl	8014d32 <USBD_LL_Resume>
    break;
 80166c0:	e010      	b.n	80166e4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80166c2:	687b      	ldr	r3, [r7, #4]
 80166c4:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7fe fb1c 	bl	8014d06 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	699b      	ldr	r3, [r3, #24]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d005      	beq.n	80166e2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166d6:	4b05      	ldr	r3, [pc, #20]	; (80166ec <HAL_PCDEx_LPM_Callback+0x68>)
 80166d8:	691b      	ldr	r3, [r3, #16]
 80166da:	4a04      	ldr	r2, [pc, #16]	; (80166ec <HAL_PCDEx_LPM_Callback+0x68>)
 80166dc:	f043 0306 	orr.w	r3, r3, #6
 80166e0:	6113      	str	r3, [r2, #16]
    break;
 80166e2:	bf00      	nop
}
 80166e4:	bf00      	nop
 80166e6:	3708      	adds	r7, #8
 80166e8:	46bd      	mov	sp, r7
 80166ea:	bd80      	pop	{r7, pc}
 80166ec:	e000ed00 	.word	0xe000ed00

080166f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80166f0:	b480      	push	{r7}
 80166f2:	b083      	sub	sp, #12
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80166f8:	4b03      	ldr	r3, [pc, #12]	; (8016708 <USBD_static_malloc+0x18>)
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	370c      	adds	r7, #12
 80166fe:	46bd      	mov	sp, r7
 8016700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016704:	4770      	bx	lr
 8016706:	bf00      	nop
 8016708:	20000c8c 	.word	0x20000c8c

0801670c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801670c:	b480      	push	{r7}
 801670e:	b083      	sub	sp, #12
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]

}
 8016714:	bf00      	nop
 8016716:	370c      	adds	r7, #12
 8016718:	46bd      	mov	sp, r7
 801671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671e:	4770      	bx	lr

08016720 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8016720:	b580      	push	{r7, lr}
 8016722:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8016724:	f7f2 ff9e 	bl	8009664 <SystemClock_Config>
}
 8016728:	bf00      	nop
 801672a:	bd80      	pop	{r7, pc}

0801672c <atoi>:
 801672c:	220a      	movs	r2, #10
 801672e:	2100      	movs	r1, #0
 8016730:	f000 be28 	b.w	8017384 <strtol>

08016734 <__errno>:
 8016734:	4b01      	ldr	r3, [pc, #4]	; (801673c <__errno+0x8>)
 8016736:	6818      	ldr	r0, [r3, #0]
 8016738:	4770      	bx	lr
 801673a:	bf00      	nop
 801673c:	200008c0 	.word	0x200008c0

08016740 <__libc_init_array>:
 8016740:	b570      	push	{r4, r5, r6, lr}
 8016742:	4d0d      	ldr	r5, [pc, #52]	; (8016778 <__libc_init_array+0x38>)
 8016744:	4c0d      	ldr	r4, [pc, #52]	; (801677c <__libc_init_array+0x3c>)
 8016746:	1b64      	subs	r4, r4, r5
 8016748:	10a4      	asrs	r4, r4, #2
 801674a:	2600      	movs	r6, #0
 801674c:	42a6      	cmp	r6, r4
 801674e:	d109      	bne.n	8016764 <__libc_init_array+0x24>
 8016750:	4d0b      	ldr	r5, [pc, #44]	; (8016780 <__libc_init_array+0x40>)
 8016752:	4c0c      	ldr	r4, [pc, #48]	; (8016784 <__libc_init_array+0x44>)
 8016754:	f003 f92e 	bl	80199b4 <_init>
 8016758:	1b64      	subs	r4, r4, r5
 801675a:	10a4      	asrs	r4, r4, #2
 801675c:	2600      	movs	r6, #0
 801675e:	42a6      	cmp	r6, r4
 8016760:	d105      	bne.n	801676e <__libc_init_array+0x2e>
 8016762:	bd70      	pop	{r4, r5, r6, pc}
 8016764:	f855 3b04 	ldr.w	r3, [r5], #4
 8016768:	4798      	blx	r3
 801676a:	3601      	adds	r6, #1
 801676c:	e7ee      	b.n	801674c <__libc_init_array+0xc>
 801676e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016772:	4798      	blx	r3
 8016774:	3601      	adds	r6, #1
 8016776:	e7f2      	b.n	801675e <__libc_init_array+0x1e>
 8016778:	0801ba30 	.word	0x0801ba30
 801677c:	0801ba30 	.word	0x0801ba30
 8016780:	0801ba30 	.word	0x0801ba30
 8016784:	0801ba34 	.word	0x0801ba34

08016788 <memcpy>:
 8016788:	440a      	add	r2, r1
 801678a:	4291      	cmp	r1, r2
 801678c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016790:	d100      	bne.n	8016794 <memcpy+0xc>
 8016792:	4770      	bx	lr
 8016794:	b510      	push	{r4, lr}
 8016796:	f811 4b01 	ldrb.w	r4, [r1], #1
 801679a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801679e:	4291      	cmp	r1, r2
 80167a0:	d1f9      	bne.n	8016796 <memcpy+0xe>
 80167a2:	bd10      	pop	{r4, pc}

080167a4 <memset>:
 80167a4:	4402      	add	r2, r0
 80167a6:	4603      	mov	r3, r0
 80167a8:	4293      	cmp	r3, r2
 80167aa:	d100      	bne.n	80167ae <memset+0xa>
 80167ac:	4770      	bx	lr
 80167ae:	f803 1b01 	strb.w	r1, [r3], #1
 80167b2:	e7f9      	b.n	80167a8 <memset+0x4>

080167b4 <__cvt>:
 80167b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80167b8:	ec55 4b10 	vmov	r4, r5, d0
 80167bc:	2d00      	cmp	r5, #0
 80167be:	460e      	mov	r6, r1
 80167c0:	4619      	mov	r1, r3
 80167c2:	462b      	mov	r3, r5
 80167c4:	bfbb      	ittet	lt
 80167c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80167ca:	461d      	movlt	r5, r3
 80167cc:	2300      	movge	r3, #0
 80167ce:	232d      	movlt	r3, #45	; 0x2d
 80167d0:	700b      	strb	r3, [r1, #0]
 80167d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80167d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80167d8:	4691      	mov	r9, r2
 80167da:	f023 0820 	bic.w	r8, r3, #32
 80167de:	bfbc      	itt	lt
 80167e0:	4622      	movlt	r2, r4
 80167e2:	4614      	movlt	r4, r2
 80167e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80167e8:	d005      	beq.n	80167f6 <__cvt+0x42>
 80167ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80167ee:	d100      	bne.n	80167f2 <__cvt+0x3e>
 80167f0:	3601      	adds	r6, #1
 80167f2:	2102      	movs	r1, #2
 80167f4:	e000      	b.n	80167f8 <__cvt+0x44>
 80167f6:	2103      	movs	r1, #3
 80167f8:	ab03      	add	r3, sp, #12
 80167fa:	9301      	str	r3, [sp, #4]
 80167fc:	ab02      	add	r3, sp, #8
 80167fe:	9300      	str	r3, [sp, #0]
 8016800:	ec45 4b10 	vmov	d0, r4, r5
 8016804:	4653      	mov	r3, sl
 8016806:	4632      	mov	r2, r6
 8016808:	f000 fe72 	bl	80174f0 <_dtoa_r>
 801680c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016810:	4607      	mov	r7, r0
 8016812:	d102      	bne.n	801681a <__cvt+0x66>
 8016814:	f019 0f01 	tst.w	r9, #1
 8016818:	d022      	beq.n	8016860 <__cvt+0xac>
 801681a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801681e:	eb07 0906 	add.w	r9, r7, r6
 8016822:	d110      	bne.n	8016846 <__cvt+0x92>
 8016824:	783b      	ldrb	r3, [r7, #0]
 8016826:	2b30      	cmp	r3, #48	; 0x30
 8016828:	d10a      	bne.n	8016840 <__cvt+0x8c>
 801682a:	2200      	movs	r2, #0
 801682c:	2300      	movs	r3, #0
 801682e:	4620      	mov	r0, r4
 8016830:	4629      	mov	r1, r5
 8016832:	f7ea f949 	bl	8000ac8 <__aeabi_dcmpeq>
 8016836:	b918      	cbnz	r0, 8016840 <__cvt+0x8c>
 8016838:	f1c6 0601 	rsb	r6, r6, #1
 801683c:	f8ca 6000 	str.w	r6, [sl]
 8016840:	f8da 3000 	ldr.w	r3, [sl]
 8016844:	4499      	add	r9, r3
 8016846:	2200      	movs	r2, #0
 8016848:	2300      	movs	r3, #0
 801684a:	4620      	mov	r0, r4
 801684c:	4629      	mov	r1, r5
 801684e:	f7ea f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8016852:	b108      	cbz	r0, 8016858 <__cvt+0xa4>
 8016854:	f8cd 900c 	str.w	r9, [sp, #12]
 8016858:	2230      	movs	r2, #48	; 0x30
 801685a:	9b03      	ldr	r3, [sp, #12]
 801685c:	454b      	cmp	r3, r9
 801685e:	d307      	bcc.n	8016870 <__cvt+0xbc>
 8016860:	9b03      	ldr	r3, [sp, #12]
 8016862:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016864:	1bdb      	subs	r3, r3, r7
 8016866:	4638      	mov	r0, r7
 8016868:	6013      	str	r3, [r2, #0]
 801686a:	b004      	add	sp, #16
 801686c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016870:	1c59      	adds	r1, r3, #1
 8016872:	9103      	str	r1, [sp, #12]
 8016874:	701a      	strb	r2, [r3, #0]
 8016876:	e7f0      	b.n	801685a <__cvt+0xa6>

08016878 <__exponent>:
 8016878:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801687a:	4603      	mov	r3, r0
 801687c:	2900      	cmp	r1, #0
 801687e:	bfb8      	it	lt
 8016880:	4249      	neglt	r1, r1
 8016882:	f803 2b02 	strb.w	r2, [r3], #2
 8016886:	bfb4      	ite	lt
 8016888:	222d      	movlt	r2, #45	; 0x2d
 801688a:	222b      	movge	r2, #43	; 0x2b
 801688c:	2909      	cmp	r1, #9
 801688e:	7042      	strb	r2, [r0, #1]
 8016890:	dd2a      	ble.n	80168e8 <__exponent+0x70>
 8016892:	f10d 0407 	add.w	r4, sp, #7
 8016896:	46a4      	mov	ip, r4
 8016898:	270a      	movs	r7, #10
 801689a:	46a6      	mov	lr, r4
 801689c:	460a      	mov	r2, r1
 801689e:	fb91 f6f7 	sdiv	r6, r1, r7
 80168a2:	fb07 1516 	mls	r5, r7, r6, r1
 80168a6:	3530      	adds	r5, #48	; 0x30
 80168a8:	2a63      	cmp	r2, #99	; 0x63
 80168aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80168ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80168b2:	4631      	mov	r1, r6
 80168b4:	dcf1      	bgt.n	801689a <__exponent+0x22>
 80168b6:	3130      	adds	r1, #48	; 0x30
 80168b8:	f1ae 0502 	sub.w	r5, lr, #2
 80168bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80168c0:	1c44      	adds	r4, r0, #1
 80168c2:	4629      	mov	r1, r5
 80168c4:	4561      	cmp	r1, ip
 80168c6:	d30a      	bcc.n	80168de <__exponent+0x66>
 80168c8:	f10d 0209 	add.w	r2, sp, #9
 80168cc:	eba2 020e 	sub.w	r2, r2, lr
 80168d0:	4565      	cmp	r5, ip
 80168d2:	bf88      	it	hi
 80168d4:	2200      	movhi	r2, #0
 80168d6:	4413      	add	r3, r2
 80168d8:	1a18      	subs	r0, r3, r0
 80168da:	b003      	add	sp, #12
 80168dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80168de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80168e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80168e6:	e7ed      	b.n	80168c4 <__exponent+0x4c>
 80168e8:	2330      	movs	r3, #48	; 0x30
 80168ea:	3130      	adds	r1, #48	; 0x30
 80168ec:	7083      	strb	r3, [r0, #2]
 80168ee:	70c1      	strb	r1, [r0, #3]
 80168f0:	1d03      	adds	r3, r0, #4
 80168f2:	e7f1      	b.n	80168d8 <__exponent+0x60>

080168f4 <_printf_float>:
 80168f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168f8:	ed2d 8b02 	vpush	{d8}
 80168fc:	b08d      	sub	sp, #52	; 0x34
 80168fe:	460c      	mov	r4, r1
 8016900:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016904:	4616      	mov	r6, r2
 8016906:	461f      	mov	r7, r3
 8016908:	4605      	mov	r5, r0
 801690a:	f001 fce5 	bl	80182d8 <_localeconv_r>
 801690e:	f8d0 a000 	ldr.w	sl, [r0]
 8016912:	4650      	mov	r0, sl
 8016914:	f7e9 fc5c 	bl	80001d0 <strlen>
 8016918:	2300      	movs	r3, #0
 801691a:	930a      	str	r3, [sp, #40]	; 0x28
 801691c:	6823      	ldr	r3, [r4, #0]
 801691e:	9305      	str	r3, [sp, #20]
 8016920:	f8d8 3000 	ldr.w	r3, [r8]
 8016924:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016928:	3307      	adds	r3, #7
 801692a:	f023 0307 	bic.w	r3, r3, #7
 801692e:	f103 0208 	add.w	r2, r3, #8
 8016932:	f8c8 2000 	str.w	r2, [r8]
 8016936:	e9d3 2300 	ldrd	r2, r3, [r3]
 801693a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801693e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8016942:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016946:	9307      	str	r3, [sp, #28]
 8016948:	f8cd 8018 	str.w	r8, [sp, #24]
 801694c:	ee08 0a10 	vmov	s16, r0
 8016950:	4b9f      	ldr	r3, [pc, #636]	; (8016bd0 <_printf_float+0x2dc>)
 8016952:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016956:	f04f 32ff 	mov.w	r2, #4294967295
 801695a:	f7ea f8e7 	bl	8000b2c <__aeabi_dcmpun>
 801695e:	bb88      	cbnz	r0, 80169c4 <_printf_float+0xd0>
 8016960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016964:	4b9a      	ldr	r3, [pc, #616]	; (8016bd0 <_printf_float+0x2dc>)
 8016966:	f04f 32ff 	mov.w	r2, #4294967295
 801696a:	f7ea f8c1 	bl	8000af0 <__aeabi_dcmple>
 801696e:	bb48      	cbnz	r0, 80169c4 <_printf_float+0xd0>
 8016970:	2200      	movs	r2, #0
 8016972:	2300      	movs	r3, #0
 8016974:	4640      	mov	r0, r8
 8016976:	4649      	mov	r1, r9
 8016978:	f7ea f8b0 	bl	8000adc <__aeabi_dcmplt>
 801697c:	b110      	cbz	r0, 8016984 <_printf_float+0x90>
 801697e:	232d      	movs	r3, #45	; 0x2d
 8016980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016984:	4b93      	ldr	r3, [pc, #588]	; (8016bd4 <_printf_float+0x2e0>)
 8016986:	4894      	ldr	r0, [pc, #592]	; (8016bd8 <_printf_float+0x2e4>)
 8016988:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801698c:	bf94      	ite	ls
 801698e:	4698      	movls	r8, r3
 8016990:	4680      	movhi	r8, r0
 8016992:	2303      	movs	r3, #3
 8016994:	6123      	str	r3, [r4, #16]
 8016996:	9b05      	ldr	r3, [sp, #20]
 8016998:	f023 0204 	bic.w	r2, r3, #4
 801699c:	6022      	str	r2, [r4, #0]
 801699e:	f04f 0900 	mov.w	r9, #0
 80169a2:	9700      	str	r7, [sp, #0]
 80169a4:	4633      	mov	r3, r6
 80169a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80169a8:	4621      	mov	r1, r4
 80169aa:	4628      	mov	r0, r5
 80169ac:	f000 f9d8 	bl	8016d60 <_printf_common>
 80169b0:	3001      	adds	r0, #1
 80169b2:	f040 8090 	bne.w	8016ad6 <_printf_float+0x1e2>
 80169b6:	f04f 30ff 	mov.w	r0, #4294967295
 80169ba:	b00d      	add	sp, #52	; 0x34
 80169bc:	ecbd 8b02 	vpop	{d8}
 80169c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c4:	4642      	mov	r2, r8
 80169c6:	464b      	mov	r3, r9
 80169c8:	4640      	mov	r0, r8
 80169ca:	4649      	mov	r1, r9
 80169cc:	f7ea f8ae 	bl	8000b2c <__aeabi_dcmpun>
 80169d0:	b140      	cbz	r0, 80169e4 <_printf_float+0xf0>
 80169d2:	464b      	mov	r3, r9
 80169d4:	2b00      	cmp	r3, #0
 80169d6:	bfbc      	itt	lt
 80169d8:	232d      	movlt	r3, #45	; 0x2d
 80169da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80169de:	487f      	ldr	r0, [pc, #508]	; (8016bdc <_printf_float+0x2e8>)
 80169e0:	4b7f      	ldr	r3, [pc, #508]	; (8016be0 <_printf_float+0x2ec>)
 80169e2:	e7d1      	b.n	8016988 <_printf_float+0x94>
 80169e4:	6863      	ldr	r3, [r4, #4]
 80169e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80169ea:	9206      	str	r2, [sp, #24]
 80169ec:	1c5a      	adds	r2, r3, #1
 80169ee:	d13f      	bne.n	8016a70 <_printf_float+0x17c>
 80169f0:	2306      	movs	r3, #6
 80169f2:	6063      	str	r3, [r4, #4]
 80169f4:	9b05      	ldr	r3, [sp, #20]
 80169f6:	6861      	ldr	r1, [r4, #4]
 80169f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80169fc:	2300      	movs	r3, #0
 80169fe:	9303      	str	r3, [sp, #12]
 8016a00:	ab0a      	add	r3, sp, #40	; 0x28
 8016a02:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016a06:	ab09      	add	r3, sp, #36	; 0x24
 8016a08:	ec49 8b10 	vmov	d0, r8, r9
 8016a0c:	9300      	str	r3, [sp, #0]
 8016a0e:	6022      	str	r2, [r4, #0]
 8016a10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016a14:	4628      	mov	r0, r5
 8016a16:	f7ff fecd 	bl	80167b4 <__cvt>
 8016a1a:	9b06      	ldr	r3, [sp, #24]
 8016a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016a1e:	2b47      	cmp	r3, #71	; 0x47
 8016a20:	4680      	mov	r8, r0
 8016a22:	d108      	bne.n	8016a36 <_printf_float+0x142>
 8016a24:	1cc8      	adds	r0, r1, #3
 8016a26:	db02      	blt.n	8016a2e <_printf_float+0x13a>
 8016a28:	6863      	ldr	r3, [r4, #4]
 8016a2a:	4299      	cmp	r1, r3
 8016a2c:	dd41      	ble.n	8016ab2 <_printf_float+0x1be>
 8016a2e:	f1ab 0b02 	sub.w	fp, fp, #2
 8016a32:	fa5f fb8b 	uxtb.w	fp, fp
 8016a36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016a3a:	d820      	bhi.n	8016a7e <_printf_float+0x18a>
 8016a3c:	3901      	subs	r1, #1
 8016a3e:	465a      	mov	r2, fp
 8016a40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016a44:	9109      	str	r1, [sp, #36]	; 0x24
 8016a46:	f7ff ff17 	bl	8016878 <__exponent>
 8016a4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016a4c:	1813      	adds	r3, r2, r0
 8016a4e:	2a01      	cmp	r2, #1
 8016a50:	4681      	mov	r9, r0
 8016a52:	6123      	str	r3, [r4, #16]
 8016a54:	dc02      	bgt.n	8016a5c <_printf_float+0x168>
 8016a56:	6822      	ldr	r2, [r4, #0]
 8016a58:	07d2      	lsls	r2, r2, #31
 8016a5a:	d501      	bpl.n	8016a60 <_printf_float+0x16c>
 8016a5c:	3301      	adds	r3, #1
 8016a5e:	6123      	str	r3, [r4, #16]
 8016a60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d09c      	beq.n	80169a2 <_printf_float+0xae>
 8016a68:	232d      	movs	r3, #45	; 0x2d
 8016a6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a6e:	e798      	b.n	80169a2 <_printf_float+0xae>
 8016a70:	9a06      	ldr	r2, [sp, #24]
 8016a72:	2a47      	cmp	r2, #71	; 0x47
 8016a74:	d1be      	bne.n	80169f4 <_printf_float+0x100>
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d1bc      	bne.n	80169f4 <_printf_float+0x100>
 8016a7a:	2301      	movs	r3, #1
 8016a7c:	e7b9      	b.n	80169f2 <_printf_float+0xfe>
 8016a7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016a82:	d118      	bne.n	8016ab6 <_printf_float+0x1c2>
 8016a84:	2900      	cmp	r1, #0
 8016a86:	6863      	ldr	r3, [r4, #4]
 8016a88:	dd0b      	ble.n	8016aa2 <_printf_float+0x1ae>
 8016a8a:	6121      	str	r1, [r4, #16]
 8016a8c:	b913      	cbnz	r3, 8016a94 <_printf_float+0x1a0>
 8016a8e:	6822      	ldr	r2, [r4, #0]
 8016a90:	07d0      	lsls	r0, r2, #31
 8016a92:	d502      	bpl.n	8016a9a <_printf_float+0x1a6>
 8016a94:	3301      	adds	r3, #1
 8016a96:	440b      	add	r3, r1
 8016a98:	6123      	str	r3, [r4, #16]
 8016a9a:	65a1      	str	r1, [r4, #88]	; 0x58
 8016a9c:	f04f 0900 	mov.w	r9, #0
 8016aa0:	e7de      	b.n	8016a60 <_printf_float+0x16c>
 8016aa2:	b913      	cbnz	r3, 8016aaa <_printf_float+0x1b6>
 8016aa4:	6822      	ldr	r2, [r4, #0]
 8016aa6:	07d2      	lsls	r2, r2, #31
 8016aa8:	d501      	bpl.n	8016aae <_printf_float+0x1ba>
 8016aaa:	3302      	adds	r3, #2
 8016aac:	e7f4      	b.n	8016a98 <_printf_float+0x1a4>
 8016aae:	2301      	movs	r3, #1
 8016ab0:	e7f2      	b.n	8016a98 <_printf_float+0x1a4>
 8016ab2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016ab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ab8:	4299      	cmp	r1, r3
 8016aba:	db05      	blt.n	8016ac8 <_printf_float+0x1d4>
 8016abc:	6823      	ldr	r3, [r4, #0]
 8016abe:	6121      	str	r1, [r4, #16]
 8016ac0:	07d8      	lsls	r0, r3, #31
 8016ac2:	d5ea      	bpl.n	8016a9a <_printf_float+0x1a6>
 8016ac4:	1c4b      	adds	r3, r1, #1
 8016ac6:	e7e7      	b.n	8016a98 <_printf_float+0x1a4>
 8016ac8:	2900      	cmp	r1, #0
 8016aca:	bfd4      	ite	le
 8016acc:	f1c1 0202 	rsble	r2, r1, #2
 8016ad0:	2201      	movgt	r2, #1
 8016ad2:	4413      	add	r3, r2
 8016ad4:	e7e0      	b.n	8016a98 <_printf_float+0x1a4>
 8016ad6:	6823      	ldr	r3, [r4, #0]
 8016ad8:	055a      	lsls	r2, r3, #21
 8016ada:	d407      	bmi.n	8016aec <_printf_float+0x1f8>
 8016adc:	6923      	ldr	r3, [r4, #16]
 8016ade:	4642      	mov	r2, r8
 8016ae0:	4631      	mov	r1, r6
 8016ae2:	4628      	mov	r0, r5
 8016ae4:	47b8      	blx	r7
 8016ae6:	3001      	adds	r0, #1
 8016ae8:	d12c      	bne.n	8016b44 <_printf_float+0x250>
 8016aea:	e764      	b.n	80169b6 <_printf_float+0xc2>
 8016aec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016af0:	f240 80e0 	bls.w	8016cb4 <_printf_float+0x3c0>
 8016af4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016af8:	2200      	movs	r2, #0
 8016afa:	2300      	movs	r3, #0
 8016afc:	f7e9 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	d034      	beq.n	8016b6e <_printf_float+0x27a>
 8016b04:	4a37      	ldr	r2, [pc, #220]	; (8016be4 <_printf_float+0x2f0>)
 8016b06:	2301      	movs	r3, #1
 8016b08:	4631      	mov	r1, r6
 8016b0a:	4628      	mov	r0, r5
 8016b0c:	47b8      	blx	r7
 8016b0e:	3001      	adds	r0, #1
 8016b10:	f43f af51 	beq.w	80169b6 <_printf_float+0xc2>
 8016b14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b18:	429a      	cmp	r2, r3
 8016b1a:	db02      	blt.n	8016b22 <_printf_float+0x22e>
 8016b1c:	6823      	ldr	r3, [r4, #0]
 8016b1e:	07d8      	lsls	r0, r3, #31
 8016b20:	d510      	bpl.n	8016b44 <_printf_float+0x250>
 8016b22:	ee18 3a10 	vmov	r3, s16
 8016b26:	4652      	mov	r2, sl
 8016b28:	4631      	mov	r1, r6
 8016b2a:	4628      	mov	r0, r5
 8016b2c:	47b8      	blx	r7
 8016b2e:	3001      	adds	r0, #1
 8016b30:	f43f af41 	beq.w	80169b6 <_printf_float+0xc2>
 8016b34:	f04f 0800 	mov.w	r8, #0
 8016b38:	f104 091a 	add.w	r9, r4, #26
 8016b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b3e:	3b01      	subs	r3, #1
 8016b40:	4543      	cmp	r3, r8
 8016b42:	dc09      	bgt.n	8016b58 <_printf_float+0x264>
 8016b44:	6823      	ldr	r3, [r4, #0]
 8016b46:	079b      	lsls	r3, r3, #30
 8016b48:	f100 8105 	bmi.w	8016d56 <_printf_float+0x462>
 8016b4c:	68e0      	ldr	r0, [r4, #12]
 8016b4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016b50:	4298      	cmp	r0, r3
 8016b52:	bfb8      	it	lt
 8016b54:	4618      	movlt	r0, r3
 8016b56:	e730      	b.n	80169ba <_printf_float+0xc6>
 8016b58:	2301      	movs	r3, #1
 8016b5a:	464a      	mov	r2, r9
 8016b5c:	4631      	mov	r1, r6
 8016b5e:	4628      	mov	r0, r5
 8016b60:	47b8      	blx	r7
 8016b62:	3001      	adds	r0, #1
 8016b64:	f43f af27 	beq.w	80169b6 <_printf_float+0xc2>
 8016b68:	f108 0801 	add.w	r8, r8, #1
 8016b6c:	e7e6      	b.n	8016b3c <_printf_float+0x248>
 8016b6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	dc39      	bgt.n	8016be8 <_printf_float+0x2f4>
 8016b74:	4a1b      	ldr	r2, [pc, #108]	; (8016be4 <_printf_float+0x2f0>)
 8016b76:	2301      	movs	r3, #1
 8016b78:	4631      	mov	r1, r6
 8016b7a:	4628      	mov	r0, r5
 8016b7c:	47b8      	blx	r7
 8016b7e:	3001      	adds	r0, #1
 8016b80:	f43f af19 	beq.w	80169b6 <_printf_float+0xc2>
 8016b84:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016b88:	4313      	orrs	r3, r2
 8016b8a:	d102      	bne.n	8016b92 <_printf_float+0x29e>
 8016b8c:	6823      	ldr	r3, [r4, #0]
 8016b8e:	07d9      	lsls	r1, r3, #31
 8016b90:	d5d8      	bpl.n	8016b44 <_printf_float+0x250>
 8016b92:	ee18 3a10 	vmov	r3, s16
 8016b96:	4652      	mov	r2, sl
 8016b98:	4631      	mov	r1, r6
 8016b9a:	4628      	mov	r0, r5
 8016b9c:	47b8      	blx	r7
 8016b9e:	3001      	adds	r0, #1
 8016ba0:	f43f af09 	beq.w	80169b6 <_printf_float+0xc2>
 8016ba4:	f04f 0900 	mov.w	r9, #0
 8016ba8:	f104 0a1a 	add.w	sl, r4, #26
 8016bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016bae:	425b      	negs	r3, r3
 8016bb0:	454b      	cmp	r3, r9
 8016bb2:	dc01      	bgt.n	8016bb8 <_printf_float+0x2c4>
 8016bb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bb6:	e792      	b.n	8016ade <_printf_float+0x1ea>
 8016bb8:	2301      	movs	r3, #1
 8016bba:	4652      	mov	r2, sl
 8016bbc:	4631      	mov	r1, r6
 8016bbe:	4628      	mov	r0, r5
 8016bc0:	47b8      	blx	r7
 8016bc2:	3001      	adds	r0, #1
 8016bc4:	f43f aef7 	beq.w	80169b6 <_printf_float+0xc2>
 8016bc8:	f109 0901 	add.w	r9, r9, #1
 8016bcc:	e7ee      	b.n	8016bac <_printf_float+0x2b8>
 8016bce:	bf00      	nop
 8016bd0:	7fefffff 	.word	0x7fefffff
 8016bd4:	0801b588 	.word	0x0801b588
 8016bd8:	0801b58c 	.word	0x0801b58c
 8016bdc:	0801b594 	.word	0x0801b594
 8016be0:	0801b590 	.word	0x0801b590
 8016be4:	0801b598 	.word	0x0801b598
 8016be8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016bea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016bec:	429a      	cmp	r2, r3
 8016bee:	bfa8      	it	ge
 8016bf0:	461a      	movge	r2, r3
 8016bf2:	2a00      	cmp	r2, #0
 8016bf4:	4691      	mov	r9, r2
 8016bf6:	dc37      	bgt.n	8016c68 <_printf_float+0x374>
 8016bf8:	f04f 0b00 	mov.w	fp, #0
 8016bfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016c00:	f104 021a 	add.w	r2, r4, #26
 8016c04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016c06:	9305      	str	r3, [sp, #20]
 8016c08:	eba3 0309 	sub.w	r3, r3, r9
 8016c0c:	455b      	cmp	r3, fp
 8016c0e:	dc33      	bgt.n	8016c78 <_printf_float+0x384>
 8016c10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016c14:	429a      	cmp	r2, r3
 8016c16:	db3b      	blt.n	8016c90 <_printf_float+0x39c>
 8016c18:	6823      	ldr	r3, [r4, #0]
 8016c1a:	07da      	lsls	r2, r3, #31
 8016c1c:	d438      	bmi.n	8016c90 <_printf_float+0x39c>
 8016c1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c20:	9b05      	ldr	r3, [sp, #20]
 8016c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016c24:	1ad3      	subs	r3, r2, r3
 8016c26:	eba2 0901 	sub.w	r9, r2, r1
 8016c2a:	4599      	cmp	r9, r3
 8016c2c:	bfa8      	it	ge
 8016c2e:	4699      	movge	r9, r3
 8016c30:	f1b9 0f00 	cmp.w	r9, #0
 8016c34:	dc35      	bgt.n	8016ca2 <_printf_float+0x3ae>
 8016c36:	f04f 0800 	mov.w	r8, #0
 8016c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016c3e:	f104 0a1a 	add.w	sl, r4, #26
 8016c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016c46:	1a9b      	subs	r3, r3, r2
 8016c48:	eba3 0309 	sub.w	r3, r3, r9
 8016c4c:	4543      	cmp	r3, r8
 8016c4e:	f77f af79 	ble.w	8016b44 <_printf_float+0x250>
 8016c52:	2301      	movs	r3, #1
 8016c54:	4652      	mov	r2, sl
 8016c56:	4631      	mov	r1, r6
 8016c58:	4628      	mov	r0, r5
 8016c5a:	47b8      	blx	r7
 8016c5c:	3001      	adds	r0, #1
 8016c5e:	f43f aeaa 	beq.w	80169b6 <_printf_float+0xc2>
 8016c62:	f108 0801 	add.w	r8, r8, #1
 8016c66:	e7ec      	b.n	8016c42 <_printf_float+0x34e>
 8016c68:	4613      	mov	r3, r2
 8016c6a:	4631      	mov	r1, r6
 8016c6c:	4642      	mov	r2, r8
 8016c6e:	4628      	mov	r0, r5
 8016c70:	47b8      	blx	r7
 8016c72:	3001      	adds	r0, #1
 8016c74:	d1c0      	bne.n	8016bf8 <_printf_float+0x304>
 8016c76:	e69e      	b.n	80169b6 <_printf_float+0xc2>
 8016c78:	2301      	movs	r3, #1
 8016c7a:	4631      	mov	r1, r6
 8016c7c:	4628      	mov	r0, r5
 8016c7e:	9205      	str	r2, [sp, #20]
 8016c80:	47b8      	blx	r7
 8016c82:	3001      	adds	r0, #1
 8016c84:	f43f ae97 	beq.w	80169b6 <_printf_float+0xc2>
 8016c88:	9a05      	ldr	r2, [sp, #20]
 8016c8a:	f10b 0b01 	add.w	fp, fp, #1
 8016c8e:	e7b9      	b.n	8016c04 <_printf_float+0x310>
 8016c90:	ee18 3a10 	vmov	r3, s16
 8016c94:	4652      	mov	r2, sl
 8016c96:	4631      	mov	r1, r6
 8016c98:	4628      	mov	r0, r5
 8016c9a:	47b8      	blx	r7
 8016c9c:	3001      	adds	r0, #1
 8016c9e:	d1be      	bne.n	8016c1e <_printf_float+0x32a>
 8016ca0:	e689      	b.n	80169b6 <_printf_float+0xc2>
 8016ca2:	9a05      	ldr	r2, [sp, #20]
 8016ca4:	464b      	mov	r3, r9
 8016ca6:	4442      	add	r2, r8
 8016ca8:	4631      	mov	r1, r6
 8016caa:	4628      	mov	r0, r5
 8016cac:	47b8      	blx	r7
 8016cae:	3001      	adds	r0, #1
 8016cb0:	d1c1      	bne.n	8016c36 <_printf_float+0x342>
 8016cb2:	e680      	b.n	80169b6 <_printf_float+0xc2>
 8016cb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016cb6:	2a01      	cmp	r2, #1
 8016cb8:	dc01      	bgt.n	8016cbe <_printf_float+0x3ca>
 8016cba:	07db      	lsls	r3, r3, #31
 8016cbc:	d538      	bpl.n	8016d30 <_printf_float+0x43c>
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	4642      	mov	r2, r8
 8016cc2:	4631      	mov	r1, r6
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	47b8      	blx	r7
 8016cc8:	3001      	adds	r0, #1
 8016cca:	f43f ae74 	beq.w	80169b6 <_printf_float+0xc2>
 8016cce:	ee18 3a10 	vmov	r3, s16
 8016cd2:	4652      	mov	r2, sl
 8016cd4:	4631      	mov	r1, r6
 8016cd6:	4628      	mov	r0, r5
 8016cd8:	47b8      	blx	r7
 8016cda:	3001      	adds	r0, #1
 8016cdc:	f43f ae6b 	beq.w	80169b6 <_printf_float+0xc2>
 8016ce0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ce4:	2200      	movs	r2, #0
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	f7e9 feee 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cec:	b9d8      	cbnz	r0, 8016d26 <_printf_float+0x432>
 8016cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016cf0:	f108 0201 	add.w	r2, r8, #1
 8016cf4:	3b01      	subs	r3, #1
 8016cf6:	4631      	mov	r1, r6
 8016cf8:	4628      	mov	r0, r5
 8016cfa:	47b8      	blx	r7
 8016cfc:	3001      	adds	r0, #1
 8016cfe:	d10e      	bne.n	8016d1e <_printf_float+0x42a>
 8016d00:	e659      	b.n	80169b6 <_printf_float+0xc2>
 8016d02:	2301      	movs	r3, #1
 8016d04:	4652      	mov	r2, sl
 8016d06:	4631      	mov	r1, r6
 8016d08:	4628      	mov	r0, r5
 8016d0a:	47b8      	blx	r7
 8016d0c:	3001      	adds	r0, #1
 8016d0e:	f43f ae52 	beq.w	80169b6 <_printf_float+0xc2>
 8016d12:	f108 0801 	add.w	r8, r8, #1
 8016d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d18:	3b01      	subs	r3, #1
 8016d1a:	4543      	cmp	r3, r8
 8016d1c:	dcf1      	bgt.n	8016d02 <_printf_float+0x40e>
 8016d1e:	464b      	mov	r3, r9
 8016d20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016d24:	e6dc      	b.n	8016ae0 <_printf_float+0x1ec>
 8016d26:	f04f 0800 	mov.w	r8, #0
 8016d2a:	f104 0a1a 	add.w	sl, r4, #26
 8016d2e:	e7f2      	b.n	8016d16 <_printf_float+0x422>
 8016d30:	2301      	movs	r3, #1
 8016d32:	4642      	mov	r2, r8
 8016d34:	e7df      	b.n	8016cf6 <_printf_float+0x402>
 8016d36:	2301      	movs	r3, #1
 8016d38:	464a      	mov	r2, r9
 8016d3a:	4631      	mov	r1, r6
 8016d3c:	4628      	mov	r0, r5
 8016d3e:	47b8      	blx	r7
 8016d40:	3001      	adds	r0, #1
 8016d42:	f43f ae38 	beq.w	80169b6 <_printf_float+0xc2>
 8016d46:	f108 0801 	add.w	r8, r8, #1
 8016d4a:	68e3      	ldr	r3, [r4, #12]
 8016d4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016d4e:	1a5b      	subs	r3, r3, r1
 8016d50:	4543      	cmp	r3, r8
 8016d52:	dcf0      	bgt.n	8016d36 <_printf_float+0x442>
 8016d54:	e6fa      	b.n	8016b4c <_printf_float+0x258>
 8016d56:	f04f 0800 	mov.w	r8, #0
 8016d5a:	f104 0919 	add.w	r9, r4, #25
 8016d5e:	e7f4      	b.n	8016d4a <_printf_float+0x456>

08016d60 <_printf_common>:
 8016d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016d64:	4616      	mov	r6, r2
 8016d66:	4699      	mov	r9, r3
 8016d68:	688a      	ldr	r2, [r1, #8]
 8016d6a:	690b      	ldr	r3, [r1, #16]
 8016d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016d70:	4293      	cmp	r3, r2
 8016d72:	bfb8      	it	lt
 8016d74:	4613      	movlt	r3, r2
 8016d76:	6033      	str	r3, [r6, #0]
 8016d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016d7c:	4607      	mov	r7, r0
 8016d7e:	460c      	mov	r4, r1
 8016d80:	b10a      	cbz	r2, 8016d86 <_printf_common+0x26>
 8016d82:	3301      	adds	r3, #1
 8016d84:	6033      	str	r3, [r6, #0]
 8016d86:	6823      	ldr	r3, [r4, #0]
 8016d88:	0699      	lsls	r1, r3, #26
 8016d8a:	bf42      	ittt	mi
 8016d8c:	6833      	ldrmi	r3, [r6, #0]
 8016d8e:	3302      	addmi	r3, #2
 8016d90:	6033      	strmi	r3, [r6, #0]
 8016d92:	6825      	ldr	r5, [r4, #0]
 8016d94:	f015 0506 	ands.w	r5, r5, #6
 8016d98:	d106      	bne.n	8016da8 <_printf_common+0x48>
 8016d9a:	f104 0a19 	add.w	sl, r4, #25
 8016d9e:	68e3      	ldr	r3, [r4, #12]
 8016da0:	6832      	ldr	r2, [r6, #0]
 8016da2:	1a9b      	subs	r3, r3, r2
 8016da4:	42ab      	cmp	r3, r5
 8016da6:	dc26      	bgt.n	8016df6 <_printf_common+0x96>
 8016da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016dac:	1e13      	subs	r3, r2, #0
 8016dae:	6822      	ldr	r2, [r4, #0]
 8016db0:	bf18      	it	ne
 8016db2:	2301      	movne	r3, #1
 8016db4:	0692      	lsls	r2, r2, #26
 8016db6:	d42b      	bmi.n	8016e10 <_printf_common+0xb0>
 8016db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016dbc:	4649      	mov	r1, r9
 8016dbe:	4638      	mov	r0, r7
 8016dc0:	47c0      	blx	r8
 8016dc2:	3001      	adds	r0, #1
 8016dc4:	d01e      	beq.n	8016e04 <_printf_common+0xa4>
 8016dc6:	6823      	ldr	r3, [r4, #0]
 8016dc8:	68e5      	ldr	r5, [r4, #12]
 8016dca:	6832      	ldr	r2, [r6, #0]
 8016dcc:	f003 0306 	and.w	r3, r3, #6
 8016dd0:	2b04      	cmp	r3, #4
 8016dd2:	bf08      	it	eq
 8016dd4:	1aad      	subeq	r5, r5, r2
 8016dd6:	68a3      	ldr	r3, [r4, #8]
 8016dd8:	6922      	ldr	r2, [r4, #16]
 8016dda:	bf0c      	ite	eq
 8016ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016de0:	2500      	movne	r5, #0
 8016de2:	4293      	cmp	r3, r2
 8016de4:	bfc4      	itt	gt
 8016de6:	1a9b      	subgt	r3, r3, r2
 8016de8:	18ed      	addgt	r5, r5, r3
 8016dea:	2600      	movs	r6, #0
 8016dec:	341a      	adds	r4, #26
 8016dee:	42b5      	cmp	r5, r6
 8016df0:	d11a      	bne.n	8016e28 <_printf_common+0xc8>
 8016df2:	2000      	movs	r0, #0
 8016df4:	e008      	b.n	8016e08 <_printf_common+0xa8>
 8016df6:	2301      	movs	r3, #1
 8016df8:	4652      	mov	r2, sl
 8016dfa:	4649      	mov	r1, r9
 8016dfc:	4638      	mov	r0, r7
 8016dfe:	47c0      	blx	r8
 8016e00:	3001      	adds	r0, #1
 8016e02:	d103      	bne.n	8016e0c <_printf_common+0xac>
 8016e04:	f04f 30ff 	mov.w	r0, #4294967295
 8016e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016e0c:	3501      	adds	r5, #1
 8016e0e:	e7c6      	b.n	8016d9e <_printf_common+0x3e>
 8016e10:	18e1      	adds	r1, r4, r3
 8016e12:	1c5a      	adds	r2, r3, #1
 8016e14:	2030      	movs	r0, #48	; 0x30
 8016e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016e1a:	4422      	add	r2, r4
 8016e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016e24:	3302      	adds	r3, #2
 8016e26:	e7c7      	b.n	8016db8 <_printf_common+0x58>
 8016e28:	2301      	movs	r3, #1
 8016e2a:	4622      	mov	r2, r4
 8016e2c:	4649      	mov	r1, r9
 8016e2e:	4638      	mov	r0, r7
 8016e30:	47c0      	blx	r8
 8016e32:	3001      	adds	r0, #1
 8016e34:	d0e6      	beq.n	8016e04 <_printf_common+0xa4>
 8016e36:	3601      	adds	r6, #1
 8016e38:	e7d9      	b.n	8016dee <_printf_common+0x8e>
	...

08016e3c <_printf_i>:
 8016e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016e40:	460c      	mov	r4, r1
 8016e42:	4691      	mov	r9, r2
 8016e44:	7e27      	ldrb	r7, [r4, #24]
 8016e46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016e48:	2f78      	cmp	r7, #120	; 0x78
 8016e4a:	4680      	mov	r8, r0
 8016e4c:	469a      	mov	sl, r3
 8016e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016e52:	d807      	bhi.n	8016e64 <_printf_i+0x28>
 8016e54:	2f62      	cmp	r7, #98	; 0x62
 8016e56:	d80a      	bhi.n	8016e6e <_printf_i+0x32>
 8016e58:	2f00      	cmp	r7, #0
 8016e5a:	f000 80d8 	beq.w	801700e <_printf_i+0x1d2>
 8016e5e:	2f58      	cmp	r7, #88	; 0x58
 8016e60:	f000 80a3 	beq.w	8016faa <_printf_i+0x16e>
 8016e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016e6c:	e03a      	b.n	8016ee4 <_printf_i+0xa8>
 8016e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016e72:	2b15      	cmp	r3, #21
 8016e74:	d8f6      	bhi.n	8016e64 <_printf_i+0x28>
 8016e76:	a001      	add	r0, pc, #4	; (adr r0, 8016e7c <_printf_i+0x40>)
 8016e78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016e7c:	08016ed5 	.word	0x08016ed5
 8016e80:	08016ee9 	.word	0x08016ee9
 8016e84:	08016e65 	.word	0x08016e65
 8016e88:	08016e65 	.word	0x08016e65
 8016e8c:	08016e65 	.word	0x08016e65
 8016e90:	08016e65 	.word	0x08016e65
 8016e94:	08016ee9 	.word	0x08016ee9
 8016e98:	08016e65 	.word	0x08016e65
 8016e9c:	08016e65 	.word	0x08016e65
 8016ea0:	08016e65 	.word	0x08016e65
 8016ea4:	08016e65 	.word	0x08016e65
 8016ea8:	08016ff5 	.word	0x08016ff5
 8016eac:	08016f19 	.word	0x08016f19
 8016eb0:	08016fd7 	.word	0x08016fd7
 8016eb4:	08016e65 	.word	0x08016e65
 8016eb8:	08016e65 	.word	0x08016e65
 8016ebc:	08017017 	.word	0x08017017
 8016ec0:	08016e65 	.word	0x08016e65
 8016ec4:	08016f19 	.word	0x08016f19
 8016ec8:	08016e65 	.word	0x08016e65
 8016ecc:	08016e65 	.word	0x08016e65
 8016ed0:	08016fdf 	.word	0x08016fdf
 8016ed4:	680b      	ldr	r3, [r1, #0]
 8016ed6:	1d1a      	adds	r2, r3, #4
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	600a      	str	r2, [r1, #0]
 8016edc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	e0a3      	b.n	8017030 <_printf_i+0x1f4>
 8016ee8:	6825      	ldr	r5, [r4, #0]
 8016eea:	6808      	ldr	r0, [r1, #0]
 8016eec:	062e      	lsls	r6, r5, #24
 8016eee:	f100 0304 	add.w	r3, r0, #4
 8016ef2:	d50a      	bpl.n	8016f0a <_printf_i+0xce>
 8016ef4:	6805      	ldr	r5, [r0, #0]
 8016ef6:	600b      	str	r3, [r1, #0]
 8016ef8:	2d00      	cmp	r5, #0
 8016efa:	da03      	bge.n	8016f04 <_printf_i+0xc8>
 8016efc:	232d      	movs	r3, #45	; 0x2d
 8016efe:	426d      	negs	r5, r5
 8016f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016f04:	485e      	ldr	r0, [pc, #376]	; (8017080 <_printf_i+0x244>)
 8016f06:	230a      	movs	r3, #10
 8016f08:	e019      	b.n	8016f3e <_printf_i+0x102>
 8016f0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016f0e:	6805      	ldr	r5, [r0, #0]
 8016f10:	600b      	str	r3, [r1, #0]
 8016f12:	bf18      	it	ne
 8016f14:	b22d      	sxthne	r5, r5
 8016f16:	e7ef      	b.n	8016ef8 <_printf_i+0xbc>
 8016f18:	680b      	ldr	r3, [r1, #0]
 8016f1a:	6825      	ldr	r5, [r4, #0]
 8016f1c:	1d18      	adds	r0, r3, #4
 8016f1e:	6008      	str	r0, [r1, #0]
 8016f20:	0628      	lsls	r0, r5, #24
 8016f22:	d501      	bpl.n	8016f28 <_printf_i+0xec>
 8016f24:	681d      	ldr	r5, [r3, #0]
 8016f26:	e002      	b.n	8016f2e <_printf_i+0xf2>
 8016f28:	0669      	lsls	r1, r5, #25
 8016f2a:	d5fb      	bpl.n	8016f24 <_printf_i+0xe8>
 8016f2c:	881d      	ldrh	r5, [r3, #0]
 8016f2e:	4854      	ldr	r0, [pc, #336]	; (8017080 <_printf_i+0x244>)
 8016f30:	2f6f      	cmp	r7, #111	; 0x6f
 8016f32:	bf0c      	ite	eq
 8016f34:	2308      	moveq	r3, #8
 8016f36:	230a      	movne	r3, #10
 8016f38:	2100      	movs	r1, #0
 8016f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016f3e:	6866      	ldr	r6, [r4, #4]
 8016f40:	60a6      	str	r6, [r4, #8]
 8016f42:	2e00      	cmp	r6, #0
 8016f44:	bfa2      	ittt	ge
 8016f46:	6821      	ldrge	r1, [r4, #0]
 8016f48:	f021 0104 	bicge.w	r1, r1, #4
 8016f4c:	6021      	strge	r1, [r4, #0]
 8016f4e:	b90d      	cbnz	r5, 8016f54 <_printf_i+0x118>
 8016f50:	2e00      	cmp	r6, #0
 8016f52:	d04d      	beq.n	8016ff0 <_printf_i+0x1b4>
 8016f54:	4616      	mov	r6, r2
 8016f56:	fbb5 f1f3 	udiv	r1, r5, r3
 8016f5a:	fb03 5711 	mls	r7, r3, r1, r5
 8016f5e:	5dc7      	ldrb	r7, [r0, r7]
 8016f60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016f64:	462f      	mov	r7, r5
 8016f66:	42bb      	cmp	r3, r7
 8016f68:	460d      	mov	r5, r1
 8016f6a:	d9f4      	bls.n	8016f56 <_printf_i+0x11a>
 8016f6c:	2b08      	cmp	r3, #8
 8016f6e:	d10b      	bne.n	8016f88 <_printf_i+0x14c>
 8016f70:	6823      	ldr	r3, [r4, #0]
 8016f72:	07df      	lsls	r7, r3, #31
 8016f74:	d508      	bpl.n	8016f88 <_printf_i+0x14c>
 8016f76:	6923      	ldr	r3, [r4, #16]
 8016f78:	6861      	ldr	r1, [r4, #4]
 8016f7a:	4299      	cmp	r1, r3
 8016f7c:	bfde      	ittt	le
 8016f7e:	2330      	movle	r3, #48	; 0x30
 8016f80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016f84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016f88:	1b92      	subs	r2, r2, r6
 8016f8a:	6122      	str	r2, [r4, #16]
 8016f8c:	f8cd a000 	str.w	sl, [sp]
 8016f90:	464b      	mov	r3, r9
 8016f92:	aa03      	add	r2, sp, #12
 8016f94:	4621      	mov	r1, r4
 8016f96:	4640      	mov	r0, r8
 8016f98:	f7ff fee2 	bl	8016d60 <_printf_common>
 8016f9c:	3001      	adds	r0, #1
 8016f9e:	d14c      	bne.n	801703a <_printf_i+0x1fe>
 8016fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8016fa4:	b004      	add	sp, #16
 8016fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016faa:	4835      	ldr	r0, [pc, #212]	; (8017080 <_printf_i+0x244>)
 8016fac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016fb0:	6823      	ldr	r3, [r4, #0]
 8016fb2:	680e      	ldr	r6, [r1, #0]
 8016fb4:	061f      	lsls	r7, r3, #24
 8016fb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8016fba:	600e      	str	r6, [r1, #0]
 8016fbc:	d514      	bpl.n	8016fe8 <_printf_i+0x1ac>
 8016fbe:	07d9      	lsls	r1, r3, #31
 8016fc0:	bf44      	itt	mi
 8016fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8016fc6:	6023      	strmi	r3, [r4, #0]
 8016fc8:	b91d      	cbnz	r5, 8016fd2 <_printf_i+0x196>
 8016fca:	6823      	ldr	r3, [r4, #0]
 8016fcc:	f023 0320 	bic.w	r3, r3, #32
 8016fd0:	6023      	str	r3, [r4, #0]
 8016fd2:	2310      	movs	r3, #16
 8016fd4:	e7b0      	b.n	8016f38 <_printf_i+0xfc>
 8016fd6:	6823      	ldr	r3, [r4, #0]
 8016fd8:	f043 0320 	orr.w	r3, r3, #32
 8016fdc:	6023      	str	r3, [r4, #0]
 8016fde:	2378      	movs	r3, #120	; 0x78
 8016fe0:	4828      	ldr	r0, [pc, #160]	; (8017084 <_printf_i+0x248>)
 8016fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016fe6:	e7e3      	b.n	8016fb0 <_printf_i+0x174>
 8016fe8:	065e      	lsls	r6, r3, #25
 8016fea:	bf48      	it	mi
 8016fec:	b2ad      	uxthmi	r5, r5
 8016fee:	e7e6      	b.n	8016fbe <_printf_i+0x182>
 8016ff0:	4616      	mov	r6, r2
 8016ff2:	e7bb      	b.n	8016f6c <_printf_i+0x130>
 8016ff4:	680b      	ldr	r3, [r1, #0]
 8016ff6:	6826      	ldr	r6, [r4, #0]
 8016ff8:	6960      	ldr	r0, [r4, #20]
 8016ffa:	1d1d      	adds	r5, r3, #4
 8016ffc:	600d      	str	r5, [r1, #0]
 8016ffe:	0635      	lsls	r5, r6, #24
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	d501      	bpl.n	8017008 <_printf_i+0x1cc>
 8017004:	6018      	str	r0, [r3, #0]
 8017006:	e002      	b.n	801700e <_printf_i+0x1d2>
 8017008:	0671      	lsls	r1, r6, #25
 801700a:	d5fb      	bpl.n	8017004 <_printf_i+0x1c8>
 801700c:	8018      	strh	r0, [r3, #0]
 801700e:	2300      	movs	r3, #0
 8017010:	6123      	str	r3, [r4, #16]
 8017012:	4616      	mov	r6, r2
 8017014:	e7ba      	b.n	8016f8c <_printf_i+0x150>
 8017016:	680b      	ldr	r3, [r1, #0]
 8017018:	1d1a      	adds	r2, r3, #4
 801701a:	600a      	str	r2, [r1, #0]
 801701c:	681e      	ldr	r6, [r3, #0]
 801701e:	6862      	ldr	r2, [r4, #4]
 8017020:	2100      	movs	r1, #0
 8017022:	4630      	mov	r0, r6
 8017024:	f7e9 f8dc 	bl	80001e0 <memchr>
 8017028:	b108      	cbz	r0, 801702e <_printf_i+0x1f2>
 801702a:	1b80      	subs	r0, r0, r6
 801702c:	6060      	str	r0, [r4, #4]
 801702e:	6863      	ldr	r3, [r4, #4]
 8017030:	6123      	str	r3, [r4, #16]
 8017032:	2300      	movs	r3, #0
 8017034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017038:	e7a8      	b.n	8016f8c <_printf_i+0x150>
 801703a:	6923      	ldr	r3, [r4, #16]
 801703c:	4632      	mov	r2, r6
 801703e:	4649      	mov	r1, r9
 8017040:	4640      	mov	r0, r8
 8017042:	47d0      	blx	sl
 8017044:	3001      	adds	r0, #1
 8017046:	d0ab      	beq.n	8016fa0 <_printf_i+0x164>
 8017048:	6823      	ldr	r3, [r4, #0]
 801704a:	079b      	lsls	r3, r3, #30
 801704c:	d413      	bmi.n	8017076 <_printf_i+0x23a>
 801704e:	68e0      	ldr	r0, [r4, #12]
 8017050:	9b03      	ldr	r3, [sp, #12]
 8017052:	4298      	cmp	r0, r3
 8017054:	bfb8      	it	lt
 8017056:	4618      	movlt	r0, r3
 8017058:	e7a4      	b.n	8016fa4 <_printf_i+0x168>
 801705a:	2301      	movs	r3, #1
 801705c:	4632      	mov	r2, r6
 801705e:	4649      	mov	r1, r9
 8017060:	4640      	mov	r0, r8
 8017062:	47d0      	blx	sl
 8017064:	3001      	adds	r0, #1
 8017066:	d09b      	beq.n	8016fa0 <_printf_i+0x164>
 8017068:	3501      	adds	r5, #1
 801706a:	68e3      	ldr	r3, [r4, #12]
 801706c:	9903      	ldr	r1, [sp, #12]
 801706e:	1a5b      	subs	r3, r3, r1
 8017070:	42ab      	cmp	r3, r5
 8017072:	dcf2      	bgt.n	801705a <_printf_i+0x21e>
 8017074:	e7eb      	b.n	801704e <_printf_i+0x212>
 8017076:	2500      	movs	r5, #0
 8017078:	f104 0619 	add.w	r6, r4, #25
 801707c:	e7f5      	b.n	801706a <_printf_i+0x22e>
 801707e:	bf00      	nop
 8017080:	0801b59a 	.word	0x0801b59a
 8017084:	0801b5ab 	.word	0x0801b5ab

08017088 <srand>:
 8017088:	b538      	push	{r3, r4, r5, lr}
 801708a:	4b10      	ldr	r3, [pc, #64]	; (80170cc <srand+0x44>)
 801708c:	681d      	ldr	r5, [r3, #0]
 801708e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8017090:	4604      	mov	r4, r0
 8017092:	b9b3      	cbnz	r3, 80170c2 <srand+0x3a>
 8017094:	2018      	movs	r0, #24
 8017096:	f001 f927 	bl	80182e8 <malloc>
 801709a:	4602      	mov	r2, r0
 801709c:	63a8      	str	r0, [r5, #56]	; 0x38
 801709e:	b920      	cbnz	r0, 80170aa <srand+0x22>
 80170a0:	4b0b      	ldr	r3, [pc, #44]	; (80170d0 <srand+0x48>)
 80170a2:	480c      	ldr	r0, [pc, #48]	; (80170d4 <srand+0x4c>)
 80170a4:	2142      	movs	r1, #66	; 0x42
 80170a6:	f000 f977 	bl	8017398 <__assert_func>
 80170aa:	490b      	ldr	r1, [pc, #44]	; (80170d8 <srand+0x50>)
 80170ac:	4b0b      	ldr	r3, [pc, #44]	; (80170dc <srand+0x54>)
 80170ae:	e9c0 1300 	strd	r1, r3, [r0]
 80170b2:	4b0b      	ldr	r3, [pc, #44]	; (80170e0 <srand+0x58>)
 80170b4:	6083      	str	r3, [r0, #8]
 80170b6:	230b      	movs	r3, #11
 80170b8:	8183      	strh	r3, [r0, #12]
 80170ba:	2100      	movs	r1, #0
 80170bc:	2001      	movs	r0, #1
 80170be:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80170c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80170c4:	2200      	movs	r2, #0
 80170c6:	611c      	str	r4, [r3, #16]
 80170c8:	615a      	str	r2, [r3, #20]
 80170ca:	bd38      	pop	{r3, r4, r5, pc}
 80170cc:	200008c0 	.word	0x200008c0
 80170d0:	0801b5bc 	.word	0x0801b5bc
 80170d4:	0801b5d3 	.word	0x0801b5d3
 80170d8:	abcd330e 	.word	0xabcd330e
 80170dc:	e66d1234 	.word	0xe66d1234
 80170e0:	0005deec 	.word	0x0005deec

080170e4 <rand>:
 80170e4:	4b17      	ldr	r3, [pc, #92]	; (8017144 <rand+0x60>)
 80170e6:	b510      	push	{r4, lr}
 80170e8:	681c      	ldr	r4, [r3, #0]
 80170ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80170ec:	b9b3      	cbnz	r3, 801711c <rand+0x38>
 80170ee:	2018      	movs	r0, #24
 80170f0:	f001 f8fa 	bl	80182e8 <malloc>
 80170f4:	63a0      	str	r0, [r4, #56]	; 0x38
 80170f6:	b928      	cbnz	r0, 8017104 <rand+0x20>
 80170f8:	4602      	mov	r2, r0
 80170fa:	4b13      	ldr	r3, [pc, #76]	; (8017148 <rand+0x64>)
 80170fc:	4813      	ldr	r0, [pc, #76]	; (801714c <rand+0x68>)
 80170fe:	214e      	movs	r1, #78	; 0x4e
 8017100:	f000 f94a 	bl	8017398 <__assert_func>
 8017104:	4a12      	ldr	r2, [pc, #72]	; (8017150 <rand+0x6c>)
 8017106:	4b13      	ldr	r3, [pc, #76]	; (8017154 <rand+0x70>)
 8017108:	e9c0 2300 	strd	r2, r3, [r0]
 801710c:	4b12      	ldr	r3, [pc, #72]	; (8017158 <rand+0x74>)
 801710e:	6083      	str	r3, [r0, #8]
 8017110:	230b      	movs	r3, #11
 8017112:	8183      	strh	r3, [r0, #12]
 8017114:	2201      	movs	r2, #1
 8017116:	2300      	movs	r3, #0
 8017118:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801711c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801711e:	480f      	ldr	r0, [pc, #60]	; (801715c <rand+0x78>)
 8017120:	690a      	ldr	r2, [r1, #16]
 8017122:	694b      	ldr	r3, [r1, #20]
 8017124:	4c0e      	ldr	r4, [pc, #56]	; (8017160 <rand+0x7c>)
 8017126:	4350      	muls	r0, r2
 8017128:	fb04 0003 	mla	r0, r4, r3, r0
 801712c:	fba2 3404 	umull	r3, r4, r2, r4
 8017130:	1c5a      	adds	r2, r3, #1
 8017132:	4404      	add	r4, r0
 8017134:	f144 0000 	adc.w	r0, r4, #0
 8017138:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801713c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8017140:	bd10      	pop	{r4, pc}
 8017142:	bf00      	nop
 8017144:	200008c0 	.word	0x200008c0
 8017148:	0801b5bc 	.word	0x0801b5bc
 801714c:	0801b5d3 	.word	0x0801b5d3
 8017150:	abcd330e 	.word	0xabcd330e
 8017154:	e66d1234 	.word	0xe66d1234
 8017158:	0005deec 	.word	0x0005deec
 801715c:	5851f42d 	.word	0x5851f42d
 8017160:	4c957f2d 	.word	0x4c957f2d

08017164 <siprintf>:
 8017164:	b40e      	push	{r1, r2, r3}
 8017166:	b500      	push	{lr}
 8017168:	b09c      	sub	sp, #112	; 0x70
 801716a:	ab1d      	add	r3, sp, #116	; 0x74
 801716c:	9002      	str	r0, [sp, #8]
 801716e:	9006      	str	r0, [sp, #24]
 8017170:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017174:	4809      	ldr	r0, [pc, #36]	; (801719c <siprintf+0x38>)
 8017176:	9107      	str	r1, [sp, #28]
 8017178:	9104      	str	r1, [sp, #16]
 801717a:	4909      	ldr	r1, [pc, #36]	; (80171a0 <siprintf+0x3c>)
 801717c:	f853 2b04 	ldr.w	r2, [r3], #4
 8017180:	9105      	str	r1, [sp, #20]
 8017182:	6800      	ldr	r0, [r0, #0]
 8017184:	9301      	str	r3, [sp, #4]
 8017186:	a902      	add	r1, sp, #8
 8017188:	f001 fd4a 	bl	8018c20 <_svfiprintf_r>
 801718c:	9b02      	ldr	r3, [sp, #8]
 801718e:	2200      	movs	r2, #0
 8017190:	701a      	strb	r2, [r3, #0]
 8017192:	b01c      	add	sp, #112	; 0x70
 8017194:	f85d eb04 	ldr.w	lr, [sp], #4
 8017198:	b003      	add	sp, #12
 801719a:	4770      	bx	lr
 801719c:	200008c0 	.word	0x200008c0
 80171a0:	ffff0208 	.word	0xffff0208

080171a4 <strcat>:
 80171a4:	b510      	push	{r4, lr}
 80171a6:	4602      	mov	r2, r0
 80171a8:	7814      	ldrb	r4, [r2, #0]
 80171aa:	4613      	mov	r3, r2
 80171ac:	3201      	adds	r2, #1
 80171ae:	2c00      	cmp	r4, #0
 80171b0:	d1fa      	bne.n	80171a8 <strcat+0x4>
 80171b2:	3b01      	subs	r3, #1
 80171b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80171b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80171bc:	2a00      	cmp	r2, #0
 80171be:	d1f9      	bne.n	80171b4 <strcat+0x10>
 80171c0:	bd10      	pop	{r4, pc}
	...

080171c4 <strtok>:
 80171c4:	4b16      	ldr	r3, [pc, #88]	; (8017220 <strtok+0x5c>)
 80171c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80171c8:	681e      	ldr	r6, [r3, #0]
 80171ca:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80171cc:	4605      	mov	r5, r0
 80171ce:	b9fc      	cbnz	r4, 8017210 <strtok+0x4c>
 80171d0:	2050      	movs	r0, #80	; 0x50
 80171d2:	9101      	str	r1, [sp, #4]
 80171d4:	f001 f888 	bl	80182e8 <malloc>
 80171d8:	9901      	ldr	r1, [sp, #4]
 80171da:	65b0      	str	r0, [r6, #88]	; 0x58
 80171dc:	4602      	mov	r2, r0
 80171de:	b920      	cbnz	r0, 80171ea <strtok+0x26>
 80171e0:	4b10      	ldr	r3, [pc, #64]	; (8017224 <strtok+0x60>)
 80171e2:	4811      	ldr	r0, [pc, #68]	; (8017228 <strtok+0x64>)
 80171e4:	2157      	movs	r1, #87	; 0x57
 80171e6:	f000 f8d7 	bl	8017398 <__assert_func>
 80171ea:	e9c0 4400 	strd	r4, r4, [r0]
 80171ee:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80171f2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80171f6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80171fa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80171fe:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8017202:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8017206:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801720a:	6184      	str	r4, [r0, #24]
 801720c:	7704      	strb	r4, [r0, #28]
 801720e:	6244      	str	r4, [r0, #36]	; 0x24
 8017210:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8017212:	2301      	movs	r3, #1
 8017214:	4628      	mov	r0, r5
 8017216:	b002      	add	sp, #8
 8017218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801721c:	f000 b806 	b.w	801722c <__strtok_r>
 8017220:	200008c0 	.word	0x200008c0
 8017224:	0801b5bc 	.word	0x0801b5bc
 8017228:	0801b632 	.word	0x0801b632

0801722c <__strtok_r>:
 801722c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801722e:	b908      	cbnz	r0, 8017234 <__strtok_r+0x8>
 8017230:	6810      	ldr	r0, [r2, #0]
 8017232:	b188      	cbz	r0, 8017258 <__strtok_r+0x2c>
 8017234:	4604      	mov	r4, r0
 8017236:	4620      	mov	r0, r4
 8017238:	f814 5b01 	ldrb.w	r5, [r4], #1
 801723c:	460f      	mov	r7, r1
 801723e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8017242:	b91e      	cbnz	r6, 801724c <__strtok_r+0x20>
 8017244:	b965      	cbnz	r5, 8017260 <__strtok_r+0x34>
 8017246:	6015      	str	r5, [r2, #0]
 8017248:	4628      	mov	r0, r5
 801724a:	e005      	b.n	8017258 <__strtok_r+0x2c>
 801724c:	42b5      	cmp	r5, r6
 801724e:	d1f6      	bne.n	801723e <__strtok_r+0x12>
 8017250:	2b00      	cmp	r3, #0
 8017252:	d1f0      	bne.n	8017236 <__strtok_r+0xa>
 8017254:	6014      	str	r4, [r2, #0]
 8017256:	7003      	strb	r3, [r0, #0]
 8017258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801725a:	461c      	mov	r4, r3
 801725c:	e00c      	b.n	8017278 <__strtok_r+0x4c>
 801725e:	b915      	cbnz	r5, 8017266 <__strtok_r+0x3a>
 8017260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017264:	460e      	mov	r6, r1
 8017266:	f816 5b01 	ldrb.w	r5, [r6], #1
 801726a:	42ab      	cmp	r3, r5
 801726c:	d1f7      	bne.n	801725e <__strtok_r+0x32>
 801726e:	2b00      	cmp	r3, #0
 8017270:	d0f3      	beq.n	801725a <__strtok_r+0x2e>
 8017272:	2300      	movs	r3, #0
 8017274:	f804 3c01 	strb.w	r3, [r4, #-1]
 8017278:	6014      	str	r4, [r2, #0]
 801727a:	e7ed      	b.n	8017258 <__strtok_r+0x2c>

0801727c <_strtol_l.isra.0>:
 801727c:	2b01      	cmp	r3, #1
 801727e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017282:	d001      	beq.n	8017288 <_strtol_l.isra.0+0xc>
 8017284:	2b24      	cmp	r3, #36	; 0x24
 8017286:	d906      	bls.n	8017296 <_strtol_l.isra.0+0x1a>
 8017288:	f7ff fa54 	bl	8016734 <__errno>
 801728c:	2316      	movs	r3, #22
 801728e:	6003      	str	r3, [r0, #0]
 8017290:	2000      	movs	r0, #0
 8017292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017296:	4f3a      	ldr	r7, [pc, #232]	; (8017380 <_strtol_l.isra.0+0x104>)
 8017298:	468e      	mov	lr, r1
 801729a:	4676      	mov	r6, lr
 801729c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80172a0:	5de5      	ldrb	r5, [r4, r7]
 80172a2:	f015 0508 	ands.w	r5, r5, #8
 80172a6:	d1f8      	bne.n	801729a <_strtol_l.isra.0+0x1e>
 80172a8:	2c2d      	cmp	r4, #45	; 0x2d
 80172aa:	d134      	bne.n	8017316 <_strtol_l.isra.0+0x9a>
 80172ac:	f89e 4000 	ldrb.w	r4, [lr]
 80172b0:	f04f 0801 	mov.w	r8, #1
 80172b4:	f106 0e02 	add.w	lr, r6, #2
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d05c      	beq.n	8017376 <_strtol_l.isra.0+0xfa>
 80172bc:	2b10      	cmp	r3, #16
 80172be:	d10c      	bne.n	80172da <_strtol_l.isra.0+0x5e>
 80172c0:	2c30      	cmp	r4, #48	; 0x30
 80172c2:	d10a      	bne.n	80172da <_strtol_l.isra.0+0x5e>
 80172c4:	f89e 4000 	ldrb.w	r4, [lr]
 80172c8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80172cc:	2c58      	cmp	r4, #88	; 0x58
 80172ce:	d14d      	bne.n	801736c <_strtol_l.isra.0+0xf0>
 80172d0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80172d4:	2310      	movs	r3, #16
 80172d6:	f10e 0e02 	add.w	lr, lr, #2
 80172da:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80172de:	f10c 3cff 	add.w	ip, ip, #4294967295
 80172e2:	2600      	movs	r6, #0
 80172e4:	fbbc f9f3 	udiv	r9, ip, r3
 80172e8:	4635      	mov	r5, r6
 80172ea:	fb03 ca19 	mls	sl, r3, r9, ip
 80172ee:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80172f2:	2f09      	cmp	r7, #9
 80172f4:	d818      	bhi.n	8017328 <_strtol_l.isra.0+0xac>
 80172f6:	463c      	mov	r4, r7
 80172f8:	42a3      	cmp	r3, r4
 80172fa:	dd24      	ble.n	8017346 <_strtol_l.isra.0+0xca>
 80172fc:	2e00      	cmp	r6, #0
 80172fe:	db1f      	blt.n	8017340 <_strtol_l.isra.0+0xc4>
 8017300:	45a9      	cmp	r9, r5
 8017302:	d31d      	bcc.n	8017340 <_strtol_l.isra.0+0xc4>
 8017304:	d101      	bne.n	801730a <_strtol_l.isra.0+0x8e>
 8017306:	45a2      	cmp	sl, r4
 8017308:	db1a      	blt.n	8017340 <_strtol_l.isra.0+0xc4>
 801730a:	fb05 4503 	mla	r5, r5, r3, r4
 801730e:	2601      	movs	r6, #1
 8017310:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8017314:	e7eb      	b.n	80172ee <_strtol_l.isra.0+0x72>
 8017316:	2c2b      	cmp	r4, #43	; 0x2b
 8017318:	bf08      	it	eq
 801731a:	f89e 4000 	ldrbeq.w	r4, [lr]
 801731e:	46a8      	mov	r8, r5
 8017320:	bf08      	it	eq
 8017322:	f106 0e02 	addeq.w	lr, r6, #2
 8017326:	e7c7      	b.n	80172b8 <_strtol_l.isra.0+0x3c>
 8017328:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801732c:	2f19      	cmp	r7, #25
 801732e:	d801      	bhi.n	8017334 <_strtol_l.isra.0+0xb8>
 8017330:	3c37      	subs	r4, #55	; 0x37
 8017332:	e7e1      	b.n	80172f8 <_strtol_l.isra.0+0x7c>
 8017334:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8017338:	2f19      	cmp	r7, #25
 801733a:	d804      	bhi.n	8017346 <_strtol_l.isra.0+0xca>
 801733c:	3c57      	subs	r4, #87	; 0x57
 801733e:	e7db      	b.n	80172f8 <_strtol_l.isra.0+0x7c>
 8017340:	f04f 36ff 	mov.w	r6, #4294967295
 8017344:	e7e4      	b.n	8017310 <_strtol_l.isra.0+0x94>
 8017346:	2e00      	cmp	r6, #0
 8017348:	da05      	bge.n	8017356 <_strtol_l.isra.0+0xda>
 801734a:	2322      	movs	r3, #34	; 0x22
 801734c:	6003      	str	r3, [r0, #0]
 801734e:	4665      	mov	r5, ip
 8017350:	b942      	cbnz	r2, 8017364 <_strtol_l.isra.0+0xe8>
 8017352:	4628      	mov	r0, r5
 8017354:	e79d      	b.n	8017292 <_strtol_l.isra.0+0x16>
 8017356:	f1b8 0f00 	cmp.w	r8, #0
 801735a:	d000      	beq.n	801735e <_strtol_l.isra.0+0xe2>
 801735c:	426d      	negs	r5, r5
 801735e:	2a00      	cmp	r2, #0
 8017360:	d0f7      	beq.n	8017352 <_strtol_l.isra.0+0xd6>
 8017362:	b10e      	cbz	r6, 8017368 <_strtol_l.isra.0+0xec>
 8017364:	f10e 31ff 	add.w	r1, lr, #4294967295
 8017368:	6011      	str	r1, [r2, #0]
 801736a:	e7f2      	b.n	8017352 <_strtol_l.isra.0+0xd6>
 801736c:	2430      	movs	r4, #48	; 0x30
 801736e:	2b00      	cmp	r3, #0
 8017370:	d1b3      	bne.n	80172da <_strtol_l.isra.0+0x5e>
 8017372:	2308      	movs	r3, #8
 8017374:	e7b1      	b.n	80172da <_strtol_l.isra.0+0x5e>
 8017376:	2c30      	cmp	r4, #48	; 0x30
 8017378:	d0a4      	beq.n	80172c4 <_strtol_l.isra.0+0x48>
 801737a:	230a      	movs	r3, #10
 801737c:	e7ad      	b.n	80172da <_strtol_l.isra.0+0x5e>
 801737e:	bf00      	nop
 8017380:	0801b6d0 	.word	0x0801b6d0

08017384 <strtol>:
 8017384:	4613      	mov	r3, r2
 8017386:	460a      	mov	r2, r1
 8017388:	4601      	mov	r1, r0
 801738a:	4802      	ldr	r0, [pc, #8]	; (8017394 <strtol+0x10>)
 801738c:	6800      	ldr	r0, [r0, #0]
 801738e:	f7ff bf75 	b.w	801727c <_strtol_l.isra.0>
 8017392:	bf00      	nop
 8017394:	200008c0 	.word	0x200008c0

08017398 <__assert_func>:
 8017398:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801739a:	4614      	mov	r4, r2
 801739c:	461a      	mov	r2, r3
 801739e:	4b09      	ldr	r3, [pc, #36]	; (80173c4 <__assert_func+0x2c>)
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	4605      	mov	r5, r0
 80173a4:	68d8      	ldr	r0, [r3, #12]
 80173a6:	b14c      	cbz	r4, 80173bc <__assert_func+0x24>
 80173a8:	4b07      	ldr	r3, [pc, #28]	; (80173c8 <__assert_func+0x30>)
 80173aa:	9100      	str	r1, [sp, #0]
 80173ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80173b0:	4906      	ldr	r1, [pc, #24]	; (80173cc <__assert_func+0x34>)
 80173b2:	462b      	mov	r3, r5
 80173b4:	f000 ff5e 	bl	8018274 <fiprintf>
 80173b8:	f001 ffb2 	bl	8019320 <abort>
 80173bc:	4b04      	ldr	r3, [pc, #16]	; (80173d0 <__assert_func+0x38>)
 80173be:	461c      	mov	r4, r3
 80173c0:	e7f3      	b.n	80173aa <__assert_func+0x12>
 80173c2:	bf00      	nop
 80173c4:	200008c0 	.word	0x200008c0
 80173c8:	0801b693 	.word	0x0801b693
 80173cc:	0801b6a0 	.word	0x0801b6a0
 80173d0:	0801b6ce 	.word	0x0801b6ce

080173d4 <quorem>:
 80173d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173d8:	6903      	ldr	r3, [r0, #16]
 80173da:	690c      	ldr	r4, [r1, #16]
 80173dc:	42a3      	cmp	r3, r4
 80173de:	4607      	mov	r7, r0
 80173e0:	f2c0 8081 	blt.w	80174e6 <quorem+0x112>
 80173e4:	3c01      	subs	r4, #1
 80173e6:	f101 0814 	add.w	r8, r1, #20
 80173ea:	f100 0514 	add.w	r5, r0, #20
 80173ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80173f2:	9301      	str	r3, [sp, #4]
 80173f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80173f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80173fc:	3301      	adds	r3, #1
 80173fe:	429a      	cmp	r2, r3
 8017400:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017404:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017408:	fbb2 f6f3 	udiv	r6, r2, r3
 801740c:	d331      	bcc.n	8017472 <quorem+0x9e>
 801740e:	f04f 0e00 	mov.w	lr, #0
 8017412:	4640      	mov	r0, r8
 8017414:	46ac      	mov	ip, r5
 8017416:	46f2      	mov	sl, lr
 8017418:	f850 2b04 	ldr.w	r2, [r0], #4
 801741c:	b293      	uxth	r3, r2
 801741e:	fb06 e303 	mla	r3, r6, r3, lr
 8017422:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017426:	b29b      	uxth	r3, r3
 8017428:	ebaa 0303 	sub.w	r3, sl, r3
 801742c:	0c12      	lsrs	r2, r2, #16
 801742e:	f8dc a000 	ldr.w	sl, [ip]
 8017432:	fb06 e202 	mla	r2, r6, r2, lr
 8017436:	fa13 f38a 	uxtah	r3, r3, sl
 801743a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801743e:	fa1f fa82 	uxth.w	sl, r2
 8017442:	f8dc 2000 	ldr.w	r2, [ip]
 8017446:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801744a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801744e:	b29b      	uxth	r3, r3
 8017450:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017454:	4581      	cmp	r9, r0
 8017456:	f84c 3b04 	str.w	r3, [ip], #4
 801745a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801745e:	d2db      	bcs.n	8017418 <quorem+0x44>
 8017460:	f855 300b 	ldr.w	r3, [r5, fp]
 8017464:	b92b      	cbnz	r3, 8017472 <quorem+0x9e>
 8017466:	9b01      	ldr	r3, [sp, #4]
 8017468:	3b04      	subs	r3, #4
 801746a:	429d      	cmp	r5, r3
 801746c:	461a      	mov	r2, r3
 801746e:	d32e      	bcc.n	80174ce <quorem+0xfa>
 8017470:	613c      	str	r4, [r7, #16]
 8017472:	4638      	mov	r0, r7
 8017474:	f001 f9be 	bl	80187f4 <__mcmp>
 8017478:	2800      	cmp	r0, #0
 801747a:	db24      	blt.n	80174c6 <quorem+0xf2>
 801747c:	3601      	adds	r6, #1
 801747e:	4628      	mov	r0, r5
 8017480:	f04f 0c00 	mov.w	ip, #0
 8017484:	f858 2b04 	ldr.w	r2, [r8], #4
 8017488:	f8d0 e000 	ldr.w	lr, [r0]
 801748c:	b293      	uxth	r3, r2
 801748e:	ebac 0303 	sub.w	r3, ip, r3
 8017492:	0c12      	lsrs	r2, r2, #16
 8017494:	fa13 f38e 	uxtah	r3, r3, lr
 8017498:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801749c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174a6:	45c1      	cmp	r9, r8
 80174a8:	f840 3b04 	str.w	r3, [r0], #4
 80174ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80174b0:	d2e8      	bcs.n	8017484 <quorem+0xb0>
 80174b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80174b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80174ba:	b922      	cbnz	r2, 80174c6 <quorem+0xf2>
 80174bc:	3b04      	subs	r3, #4
 80174be:	429d      	cmp	r5, r3
 80174c0:	461a      	mov	r2, r3
 80174c2:	d30a      	bcc.n	80174da <quorem+0x106>
 80174c4:	613c      	str	r4, [r7, #16]
 80174c6:	4630      	mov	r0, r6
 80174c8:	b003      	add	sp, #12
 80174ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174ce:	6812      	ldr	r2, [r2, #0]
 80174d0:	3b04      	subs	r3, #4
 80174d2:	2a00      	cmp	r2, #0
 80174d4:	d1cc      	bne.n	8017470 <quorem+0x9c>
 80174d6:	3c01      	subs	r4, #1
 80174d8:	e7c7      	b.n	801746a <quorem+0x96>
 80174da:	6812      	ldr	r2, [r2, #0]
 80174dc:	3b04      	subs	r3, #4
 80174de:	2a00      	cmp	r2, #0
 80174e0:	d1f0      	bne.n	80174c4 <quorem+0xf0>
 80174e2:	3c01      	subs	r4, #1
 80174e4:	e7eb      	b.n	80174be <quorem+0xea>
 80174e6:	2000      	movs	r0, #0
 80174e8:	e7ee      	b.n	80174c8 <quorem+0xf4>
 80174ea:	0000      	movs	r0, r0
 80174ec:	0000      	movs	r0, r0
	...

080174f0 <_dtoa_r>:
 80174f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174f4:	ed2d 8b02 	vpush	{d8}
 80174f8:	ec57 6b10 	vmov	r6, r7, d0
 80174fc:	b095      	sub	sp, #84	; 0x54
 80174fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017500:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017504:	9105      	str	r1, [sp, #20]
 8017506:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801750a:	4604      	mov	r4, r0
 801750c:	9209      	str	r2, [sp, #36]	; 0x24
 801750e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017510:	b975      	cbnz	r5, 8017530 <_dtoa_r+0x40>
 8017512:	2010      	movs	r0, #16
 8017514:	f000 fee8 	bl	80182e8 <malloc>
 8017518:	4602      	mov	r2, r0
 801751a:	6260      	str	r0, [r4, #36]	; 0x24
 801751c:	b920      	cbnz	r0, 8017528 <_dtoa_r+0x38>
 801751e:	4bb2      	ldr	r3, [pc, #712]	; (80177e8 <_dtoa_r+0x2f8>)
 8017520:	21ea      	movs	r1, #234	; 0xea
 8017522:	48b2      	ldr	r0, [pc, #712]	; (80177ec <_dtoa_r+0x2fc>)
 8017524:	f7ff ff38 	bl	8017398 <__assert_func>
 8017528:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801752c:	6005      	str	r5, [r0, #0]
 801752e:	60c5      	str	r5, [r0, #12]
 8017530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017532:	6819      	ldr	r1, [r3, #0]
 8017534:	b151      	cbz	r1, 801754c <_dtoa_r+0x5c>
 8017536:	685a      	ldr	r2, [r3, #4]
 8017538:	604a      	str	r2, [r1, #4]
 801753a:	2301      	movs	r3, #1
 801753c:	4093      	lsls	r3, r2
 801753e:	608b      	str	r3, [r1, #8]
 8017540:	4620      	mov	r0, r4
 8017542:	f000 ff19 	bl	8018378 <_Bfree>
 8017546:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017548:	2200      	movs	r2, #0
 801754a:	601a      	str	r2, [r3, #0]
 801754c:	1e3b      	subs	r3, r7, #0
 801754e:	bfb9      	ittee	lt
 8017550:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017554:	9303      	strlt	r3, [sp, #12]
 8017556:	2300      	movge	r3, #0
 8017558:	f8c8 3000 	strge.w	r3, [r8]
 801755c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017560:	4ba3      	ldr	r3, [pc, #652]	; (80177f0 <_dtoa_r+0x300>)
 8017562:	bfbc      	itt	lt
 8017564:	2201      	movlt	r2, #1
 8017566:	f8c8 2000 	strlt.w	r2, [r8]
 801756a:	ea33 0309 	bics.w	r3, r3, r9
 801756e:	d11b      	bne.n	80175a8 <_dtoa_r+0xb8>
 8017570:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017572:	f242 730f 	movw	r3, #9999	; 0x270f
 8017576:	6013      	str	r3, [r2, #0]
 8017578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801757c:	4333      	orrs	r3, r6
 801757e:	f000 857a 	beq.w	8018076 <_dtoa_r+0xb86>
 8017582:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017584:	b963      	cbnz	r3, 80175a0 <_dtoa_r+0xb0>
 8017586:	4b9b      	ldr	r3, [pc, #620]	; (80177f4 <_dtoa_r+0x304>)
 8017588:	e024      	b.n	80175d4 <_dtoa_r+0xe4>
 801758a:	4b9b      	ldr	r3, [pc, #620]	; (80177f8 <_dtoa_r+0x308>)
 801758c:	9300      	str	r3, [sp, #0]
 801758e:	3308      	adds	r3, #8
 8017590:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017592:	6013      	str	r3, [r2, #0]
 8017594:	9800      	ldr	r0, [sp, #0]
 8017596:	b015      	add	sp, #84	; 0x54
 8017598:	ecbd 8b02 	vpop	{d8}
 801759c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175a0:	4b94      	ldr	r3, [pc, #592]	; (80177f4 <_dtoa_r+0x304>)
 80175a2:	9300      	str	r3, [sp, #0]
 80175a4:	3303      	adds	r3, #3
 80175a6:	e7f3      	b.n	8017590 <_dtoa_r+0xa0>
 80175a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80175ac:	2200      	movs	r2, #0
 80175ae:	ec51 0b17 	vmov	r0, r1, d7
 80175b2:	2300      	movs	r3, #0
 80175b4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80175b8:	f7e9 fa86 	bl	8000ac8 <__aeabi_dcmpeq>
 80175bc:	4680      	mov	r8, r0
 80175be:	b158      	cbz	r0, 80175d8 <_dtoa_r+0xe8>
 80175c0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175c2:	2301      	movs	r3, #1
 80175c4:	6013      	str	r3, [r2, #0]
 80175c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	f000 8551 	beq.w	8018070 <_dtoa_r+0xb80>
 80175ce:	488b      	ldr	r0, [pc, #556]	; (80177fc <_dtoa_r+0x30c>)
 80175d0:	6018      	str	r0, [r3, #0]
 80175d2:	1e43      	subs	r3, r0, #1
 80175d4:	9300      	str	r3, [sp, #0]
 80175d6:	e7dd      	b.n	8017594 <_dtoa_r+0xa4>
 80175d8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80175dc:	aa12      	add	r2, sp, #72	; 0x48
 80175de:	a913      	add	r1, sp, #76	; 0x4c
 80175e0:	4620      	mov	r0, r4
 80175e2:	f001 f9ab 	bl	801893c <__d2b>
 80175e6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80175ea:	4683      	mov	fp, r0
 80175ec:	2d00      	cmp	r5, #0
 80175ee:	d07c      	beq.n	80176ea <_dtoa_r+0x1fa>
 80175f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175f2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80175f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80175fa:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80175fe:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017602:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017606:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801760a:	4b7d      	ldr	r3, [pc, #500]	; (8017800 <_dtoa_r+0x310>)
 801760c:	2200      	movs	r2, #0
 801760e:	4630      	mov	r0, r6
 8017610:	4639      	mov	r1, r7
 8017612:	f7e8 fe39 	bl	8000288 <__aeabi_dsub>
 8017616:	a36e      	add	r3, pc, #440	; (adr r3, 80177d0 <_dtoa_r+0x2e0>)
 8017618:	e9d3 2300 	ldrd	r2, r3, [r3]
 801761c:	f7e8 ffec 	bl	80005f8 <__aeabi_dmul>
 8017620:	a36d      	add	r3, pc, #436	; (adr r3, 80177d8 <_dtoa_r+0x2e8>)
 8017622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017626:	f7e8 fe31 	bl	800028c <__adddf3>
 801762a:	4606      	mov	r6, r0
 801762c:	4628      	mov	r0, r5
 801762e:	460f      	mov	r7, r1
 8017630:	f7e8 ff78 	bl	8000524 <__aeabi_i2d>
 8017634:	a36a      	add	r3, pc, #424	; (adr r3, 80177e0 <_dtoa_r+0x2f0>)
 8017636:	e9d3 2300 	ldrd	r2, r3, [r3]
 801763a:	f7e8 ffdd 	bl	80005f8 <__aeabi_dmul>
 801763e:	4602      	mov	r2, r0
 8017640:	460b      	mov	r3, r1
 8017642:	4630      	mov	r0, r6
 8017644:	4639      	mov	r1, r7
 8017646:	f7e8 fe21 	bl	800028c <__adddf3>
 801764a:	4606      	mov	r6, r0
 801764c:	460f      	mov	r7, r1
 801764e:	f7e9 fa83 	bl	8000b58 <__aeabi_d2iz>
 8017652:	2200      	movs	r2, #0
 8017654:	4682      	mov	sl, r0
 8017656:	2300      	movs	r3, #0
 8017658:	4630      	mov	r0, r6
 801765a:	4639      	mov	r1, r7
 801765c:	f7e9 fa3e 	bl	8000adc <__aeabi_dcmplt>
 8017660:	b148      	cbz	r0, 8017676 <_dtoa_r+0x186>
 8017662:	4650      	mov	r0, sl
 8017664:	f7e8 ff5e 	bl	8000524 <__aeabi_i2d>
 8017668:	4632      	mov	r2, r6
 801766a:	463b      	mov	r3, r7
 801766c:	f7e9 fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017670:	b908      	cbnz	r0, 8017676 <_dtoa_r+0x186>
 8017672:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017676:	f1ba 0f16 	cmp.w	sl, #22
 801767a:	d854      	bhi.n	8017726 <_dtoa_r+0x236>
 801767c:	4b61      	ldr	r3, [pc, #388]	; (8017804 <_dtoa_r+0x314>)
 801767e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017686:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801768a:	f7e9 fa27 	bl	8000adc <__aeabi_dcmplt>
 801768e:	2800      	cmp	r0, #0
 8017690:	d04b      	beq.n	801772a <_dtoa_r+0x23a>
 8017692:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017696:	2300      	movs	r3, #0
 8017698:	930e      	str	r3, [sp, #56]	; 0x38
 801769a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801769c:	1b5d      	subs	r5, r3, r5
 801769e:	1e6b      	subs	r3, r5, #1
 80176a0:	9304      	str	r3, [sp, #16]
 80176a2:	bf43      	ittte	mi
 80176a4:	2300      	movmi	r3, #0
 80176a6:	f1c5 0801 	rsbmi	r8, r5, #1
 80176aa:	9304      	strmi	r3, [sp, #16]
 80176ac:	f04f 0800 	movpl.w	r8, #0
 80176b0:	f1ba 0f00 	cmp.w	sl, #0
 80176b4:	db3b      	blt.n	801772e <_dtoa_r+0x23e>
 80176b6:	9b04      	ldr	r3, [sp, #16]
 80176b8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80176bc:	4453      	add	r3, sl
 80176be:	9304      	str	r3, [sp, #16]
 80176c0:	2300      	movs	r3, #0
 80176c2:	9306      	str	r3, [sp, #24]
 80176c4:	9b05      	ldr	r3, [sp, #20]
 80176c6:	2b09      	cmp	r3, #9
 80176c8:	d869      	bhi.n	801779e <_dtoa_r+0x2ae>
 80176ca:	2b05      	cmp	r3, #5
 80176cc:	bfc4      	itt	gt
 80176ce:	3b04      	subgt	r3, #4
 80176d0:	9305      	strgt	r3, [sp, #20]
 80176d2:	9b05      	ldr	r3, [sp, #20]
 80176d4:	f1a3 0302 	sub.w	r3, r3, #2
 80176d8:	bfcc      	ite	gt
 80176da:	2500      	movgt	r5, #0
 80176dc:	2501      	movle	r5, #1
 80176de:	2b03      	cmp	r3, #3
 80176e0:	d869      	bhi.n	80177b6 <_dtoa_r+0x2c6>
 80176e2:	e8df f003 	tbb	[pc, r3]
 80176e6:	4e2c      	.short	0x4e2c
 80176e8:	5a4c      	.short	0x5a4c
 80176ea:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80176ee:	441d      	add	r5, r3
 80176f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80176f4:	2b20      	cmp	r3, #32
 80176f6:	bfc1      	itttt	gt
 80176f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80176fc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017700:	fa09 f303 	lslgt.w	r3, r9, r3
 8017704:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017708:	bfda      	itte	le
 801770a:	f1c3 0320 	rsble	r3, r3, #32
 801770e:	fa06 f003 	lslle.w	r0, r6, r3
 8017712:	4318      	orrgt	r0, r3
 8017714:	f7e8 fef6 	bl	8000504 <__aeabi_ui2d>
 8017718:	2301      	movs	r3, #1
 801771a:	4606      	mov	r6, r0
 801771c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017720:	3d01      	subs	r5, #1
 8017722:	9310      	str	r3, [sp, #64]	; 0x40
 8017724:	e771      	b.n	801760a <_dtoa_r+0x11a>
 8017726:	2301      	movs	r3, #1
 8017728:	e7b6      	b.n	8017698 <_dtoa_r+0x1a8>
 801772a:	900e      	str	r0, [sp, #56]	; 0x38
 801772c:	e7b5      	b.n	801769a <_dtoa_r+0x1aa>
 801772e:	f1ca 0300 	rsb	r3, sl, #0
 8017732:	9306      	str	r3, [sp, #24]
 8017734:	2300      	movs	r3, #0
 8017736:	eba8 080a 	sub.w	r8, r8, sl
 801773a:	930d      	str	r3, [sp, #52]	; 0x34
 801773c:	e7c2      	b.n	80176c4 <_dtoa_r+0x1d4>
 801773e:	2300      	movs	r3, #0
 8017740:	9308      	str	r3, [sp, #32]
 8017742:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017744:	2b00      	cmp	r3, #0
 8017746:	dc39      	bgt.n	80177bc <_dtoa_r+0x2cc>
 8017748:	f04f 0901 	mov.w	r9, #1
 801774c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017750:	464b      	mov	r3, r9
 8017752:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017756:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017758:	2200      	movs	r2, #0
 801775a:	6042      	str	r2, [r0, #4]
 801775c:	2204      	movs	r2, #4
 801775e:	f102 0614 	add.w	r6, r2, #20
 8017762:	429e      	cmp	r6, r3
 8017764:	6841      	ldr	r1, [r0, #4]
 8017766:	d92f      	bls.n	80177c8 <_dtoa_r+0x2d8>
 8017768:	4620      	mov	r0, r4
 801776a:	f000 fdc5 	bl	80182f8 <_Balloc>
 801776e:	9000      	str	r0, [sp, #0]
 8017770:	2800      	cmp	r0, #0
 8017772:	d14b      	bne.n	801780c <_dtoa_r+0x31c>
 8017774:	4b24      	ldr	r3, [pc, #144]	; (8017808 <_dtoa_r+0x318>)
 8017776:	4602      	mov	r2, r0
 8017778:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801777c:	e6d1      	b.n	8017522 <_dtoa_r+0x32>
 801777e:	2301      	movs	r3, #1
 8017780:	e7de      	b.n	8017740 <_dtoa_r+0x250>
 8017782:	2300      	movs	r3, #0
 8017784:	9308      	str	r3, [sp, #32]
 8017786:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017788:	eb0a 0903 	add.w	r9, sl, r3
 801778c:	f109 0301 	add.w	r3, r9, #1
 8017790:	2b01      	cmp	r3, #1
 8017792:	9301      	str	r3, [sp, #4]
 8017794:	bfb8      	it	lt
 8017796:	2301      	movlt	r3, #1
 8017798:	e7dd      	b.n	8017756 <_dtoa_r+0x266>
 801779a:	2301      	movs	r3, #1
 801779c:	e7f2      	b.n	8017784 <_dtoa_r+0x294>
 801779e:	2501      	movs	r5, #1
 80177a0:	2300      	movs	r3, #0
 80177a2:	9305      	str	r3, [sp, #20]
 80177a4:	9508      	str	r5, [sp, #32]
 80177a6:	f04f 39ff 	mov.w	r9, #4294967295
 80177aa:	2200      	movs	r2, #0
 80177ac:	f8cd 9004 	str.w	r9, [sp, #4]
 80177b0:	2312      	movs	r3, #18
 80177b2:	9209      	str	r2, [sp, #36]	; 0x24
 80177b4:	e7cf      	b.n	8017756 <_dtoa_r+0x266>
 80177b6:	2301      	movs	r3, #1
 80177b8:	9308      	str	r3, [sp, #32]
 80177ba:	e7f4      	b.n	80177a6 <_dtoa_r+0x2b6>
 80177bc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80177c0:	f8cd 9004 	str.w	r9, [sp, #4]
 80177c4:	464b      	mov	r3, r9
 80177c6:	e7c6      	b.n	8017756 <_dtoa_r+0x266>
 80177c8:	3101      	adds	r1, #1
 80177ca:	6041      	str	r1, [r0, #4]
 80177cc:	0052      	lsls	r2, r2, #1
 80177ce:	e7c6      	b.n	801775e <_dtoa_r+0x26e>
 80177d0:	636f4361 	.word	0x636f4361
 80177d4:	3fd287a7 	.word	0x3fd287a7
 80177d8:	8b60c8b3 	.word	0x8b60c8b3
 80177dc:	3fc68a28 	.word	0x3fc68a28
 80177e0:	509f79fb 	.word	0x509f79fb
 80177e4:	3fd34413 	.word	0x3fd34413
 80177e8:	0801b5bc 	.word	0x0801b5bc
 80177ec:	0801b7dd 	.word	0x0801b7dd
 80177f0:	7ff00000 	.word	0x7ff00000
 80177f4:	0801b7d9 	.word	0x0801b7d9
 80177f8:	0801b7d0 	.word	0x0801b7d0
 80177fc:	0801b599 	.word	0x0801b599
 8017800:	3ff80000 	.word	0x3ff80000
 8017804:	0801b938 	.word	0x0801b938
 8017808:	0801b83c 	.word	0x0801b83c
 801780c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801780e:	9a00      	ldr	r2, [sp, #0]
 8017810:	601a      	str	r2, [r3, #0]
 8017812:	9b01      	ldr	r3, [sp, #4]
 8017814:	2b0e      	cmp	r3, #14
 8017816:	f200 80ad 	bhi.w	8017974 <_dtoa_r+0x484>
 801781a:	2d00      	cmp	r5, #0
 801781c:	f000 80aa 	beq.w	8017974 <_dtoa_r+0x484>
 8017820:	f1ba 0f00 	cmp.w	sl, #0
 8017824:	dd36      	ble.n	8017894 <_dtoa_r+0x3a4>
 8017826:	4ac3      	ldr	r2, [pc, #780]	; (8017b34 <_dtoa_r+0x644>)
 8017828:	f00a 030f 	and.w	r3, sl, #15
 801782c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017830:	ed93 7b00 	vldr	d7, [r3]
 8017834:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017838:	ea4f 172a 	mov.w	r7, sl, asr #4
 801783c:	eeb0 8a47 	vmov.f32	s16, s14
 8017840:	eef0 8a67 	vmov.f32	s17, s15
 8017844:	d016      	beq.n	8017874 <_dtoa_r+0x384>
 8017846:	4bbc      	ldr	r3, [pc, #752]	; (8017b38 <_dtoa_r+0x648>)
 8017848:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801784c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017850:	f7e8 fffc 	bl	800084c <__aeabi_ddiv>
 8017854:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017858:	f007 070f 	and.w	r7, r7, #15
 801785c:	2503      	movs	r5, #3
 801785e:	4eb6      	ldr	r6, [pc, #728]	; (8017b38 <_dtoa_r+0x648>)
 8017860:	b957      	cbnz	r7, 8017878 <_dtoa_r+0x388>
 8017862:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017866:	ec53 2b18 	vmov	r2, r3, d8
 801786a:	f7e8 ffef 	bl	800084c <__aeabi_ddiv>
 801786e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017872:	e029      	b.n	80178c8 <_dtoa_r+0x3d8>
 8017874:	2502      	movs	r5, #2
 8017876:	e7f2      	b.n	801785e <_dtoa_r+0x36e>
 8017878:	07f9      	lsls	r1, r7, #31
 801787a:	d508      	bpl.n	801788e <_dtoa_r+0x39e>
 801787c:	ec51 0b18 	vmov	r0, r1, d8
 8017880:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017884:	f7e8 feb8 	bl	80005f8 <__aeabi_dmul>
 8017888:	ec41 0b18 	vmov	d8, r0, r1
 801788c:	3501      	adds	r5, #1
 801788e:	107f      	asrs	r7, r7, #1
 8017890:	3608      	adds	r6, #8
 8017892:	e7e5      	b.n	8017860 <_dtoa_r+0x370>
 8017894:	f000 80a6 	beq.w	80179e4 <_dtoa_r+0x4f4>
 8017898:	f1ca 0600 	rsb	r6, sl, #0
 801789c:	4ba5      	ldr	r3, [pc, #660]	; (8017b34 <_dtoa_r+0x644>)
 801789e:	4fa6      	ldr	r7, [pc, #664]	; (8017b38 <_dtoa_r+0x648>)
 80178a0:	f006 020f 	and.w	r2, r6, #15
 80178a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80178a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80178b0:	f7e8 fea2 	bl	80005f8 <__aeabi_dmul>
 80178b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178b8:	1136      	asrs	r6, r6, #4
 80178ba:	2300      	movs	r3, #0
 80178bc:	2502      	movs	r5, #2
 80178be:	2e00      	cmp	r6, #0
 80178c0:	f040 8085 	bne.w	80179ce <_dtoa_r+0x4de>
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d1d2      	bne.n	801786e <_dtoa_r+0x37e>
 80178c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	f000 808c 	beq.w	80179e8 <_dtoa_r+0x4f8>
 80178d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80178d4:	4b99      	ldr	r3, [pc, #612]	; (8017b3c <_dtoa_r+0x64c>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	4630      	mov	r0, r6
 80178da:	4639      	mov	r1, r7
 80178dc:	f7e9 f8fe 	bl	8000adc <__aeabi_dcmplt>
 80178e0:	2800      	cmp	r0, #0
 80178e2:	f000 8081 	beq.w	80179e8 <_dtoa_r+0x4f8>
 80178e6:	9b01      	ldr	r3, [sp, #4]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d07d      	beq.n	80179e8 <_dtoa_r+0x4f8>
 80178ec:	f1b9 0f00 	cmp.w	r9, #0
 80178f0:	dd3c      	ble.n	801796c <_dtoa_r+0x47c>
 80178f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80178f6:	9307      	str	r3, [sp, #28]
 80178f8:	2200      	movs	r2, #0
 80178fa:	4b91      	ldr	r3, [pc, #580]	; (8017b40 <_dtoa_r+0x650>)
 80178fc:	4630      	mov	r0, r6
 80178fe:	4639      	mov	r1, r7
 8017900:	f7e8 fe7a 	bl	80005f8 <__aeabi_dmul>
 8017904:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017908:	3501      	adds	r5, #1
 801790a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801790e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017912:	4628      	mov	r0, r5
 8017914:	f7e8 fe06 	bl	8000524 <__aeabi_i2d>
 8017918:	4632      	mov	r2, r6
 801791a:	463b      	mov	r3, r7
 801791c:	f7e8 fe6c 	bl	80005f8 <__aeabi_dmul>
 8017920:	4b88      	ldr	r3, [pc, #544]	; (8017b44 <_dtoa_r+0x654>)
 8017922:	2200      	movs	r2, #0
 8017924:	f7e8 fcb2 	bl	800028c <__adddf3>
 8017928:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801792c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017930:	9303      	str	r3, [sp, #12]
 8017932:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017934:	2b00      	cmp	r3, #0
 8017936:	d15c      	bne.n	80179f2 <_dtoa_r+0x502>
 8017938:	4b83      	ldr	r3, [pc, #524]	; (8017b48 <_dtoa_r+0x658>)
 801793a:	2200      	movs	r2, #0
 801793c:	4630      	mov	r0, r6
 801793e:	4639      	mov	r1, r7
 8017940:	f7e8 fca2 	bl	8000288 <__aeabi_dsub>
 8017944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017948:	4606      	mov	r6, r0
 801794a:	460f      	mov	r7, r1
 801794c:	f7e9 f8e4 	bl	8000b18 <__aeabi_dcmpgt>
 8017950:	2800      	cmp	r0, #0
 8017952:	f040 8296 	bne.w	8017e82 <_dtoa_r+0x992>
 8017956:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801795a:	4630      	mov	r0, r6
 801795c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017960:	4639      	mov	r1, r7
 8017962:	f7e9 f8bb 	bl	8000adc <__aeabi_dcmplt>
 8017966:	2800      	cmp	r0, #0
 8017968:	f040 8288 	bne.w	8017e7c <_dtoa_r+0x98c>
 801796c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017970:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017974:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017976:	2b00      	cmp	r3, #0
 8017978:	f2c0 8158 	blt.w	8017c2c <_dtoa_r+0x73c>
 801797c:	f1ba 0f0e 	cmp.w	sl, #14
 8017980:	f300 8154 	bgt.w	8017c2c <_dtoa_r+0x73c>
 8017984:	4b6b      	ldr	r3, [pc, #428]	; (8017b34 <_dtoa_r+0x644>)
 8017986:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801798a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801798e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017990:	2b00      	cmp	r3, #0
 8017992:	f280 80e3 	bge.w	8017b5c <_dtoa_r+0x66c>
 8017996:	9b01      	ldr	r3, [sp, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f300 80df 	bgt.w	8017b5c <_dtoa_r+0x66c>
 801799e:	f040 826d 	bne.w	8017e7c <_dtoa_r+0x98c>
 80179a2:	4b69      	ldr	r3, [pc, #420]	; (8017b48 <_dtoa_r+0x658>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	4640      	mov	r0, r8
 80179a8:	4649      	mov	r1, r9
 80179aa:	f7e8 fe25 	bl	80005f8 <__aeabi_dmul>
 80179ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179b2:	f7e9 f8a7 	bl	8000b04 <__aeabi_dcmpge>
 80179b6:	9e01      	ldr	r6, [sp, #4]
 80179b8:	4637      	mov	r7, r6
 80179ba:	2800      	cmp	r0, #0
 80179bc:	f040 8243 	bne.w	8017e46 <_dtoa_r+0x956>
 80179c0:	9d00      	ldr	r5, [sp, #0]
 80179c2:	2331      	movs	r3, #49	; 0x31
 80179c4:	f805 3b01 	strb.w	r3, [r5], #1
 80179c8:	f10a 0a01 	add.w	sl, sl, #1
 80179cc:	e23f      	b.n	8017e4e <_dtoa_r+0x95e>
 80179ce:	07f2      	lsls	r2, r6, #31
 80179d0:	d505      	bpl.n	80179de <_dtoa_r+0x4ee>
 80179d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179d6:	f7e8 fe0f 	bl	80005f8 <__aeabi_dmul>
 80179da:	3501      	adds	r5, #1
 80179dc:	2301      	movs	r3, #1
 80179de:	1076      	asrs	r6, r6, #1
 80179e0:	3708      	adds	r7, #8
 80179e2:	e76c      	b.n	80178be <_dtoa_r+0x3ce>
 80179e4:	2502      	movs	r5, #2
 80179e6:	e76f      	b.n	80178c8 <_dtoa_r+0x3d8>
 80179e8:	9b01      	ldr	r3, [sp, #4]
 80179ea:	f8cd a01c 	str.w	sl, [sp, #28]
 80179ee:	930c      	str	r3, [sp, #48]	; 0x30
 80179f0:	e78d      	b.n	801790e <_dtoa_r+0x41e>
 80179f2:	9900      	ldr	r1, [sp, #0]
 80179f4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80179f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80179f8:	4b4e      	ldr	r3, [pc, #312]	; (8017b34 <_dtoa_r+0x644>)
 80179fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80179fe:	4401      	add	r1, r0
 8017a00:	9102      	str	r1, [sp, #8]
 8017a02:	9908      	ldr	r1, [sp, #32]
 8017a04:	eeb0 8a47 	vmov.f32	s16, s14
 8017a08:	eef0 8a67 	vmov.f32	s17, s15
 8017a0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017a14:	2900      	cmp	r1, #0
 8017a16:	d045      	beq.n	8017aa4 <_dtoa_r+0x5b4>
 8017a18:	494c      	ldr	r1, [pc, #304]	; (8017b4c <_dtoa_r+0x65c>)
 8017a1a:	2000      	movs	r0, #0
 8017a1c:	f7e8 ff16 	bl	800084c <__aeabi_ddiv>
 8017a20:	ec53 2b18 	vmov	r2, r3, d8
 8017a24:	f7e8 fc30 	bl	8000288 <__aeabi_dsub>
 8017a28:	9d00      	ldr	r5, [sp, #0]
 8017a2a:	ec41 0b18 	vmov	d8, r0, r1
 8017a2e:	4639      	mov	r1, r7
 8017a30:	4630      	mov	r0, r6
 8017a32:	f7e9 f891 	bl	8000b58 <__aeabi_d2iz>
 8017a36:	900c      	str	r0, [sp, #48]	; 0x30
 8017a38:	f7e8 fd74 	bl	8000524 <__aeabi_i2d>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	460b      	mov	r3, r1
 8017a40:	4630      	mov	r0, r6
 8017a42:	4639      	mov	r1, r7
 8017a44:	f7e8 fc20 	bl	8000288 <__aeabi_dsub>
 8017a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a4a:	3330      	adds	r3, #48	; 0x30
 8017a4c:	f805 3b01 	strb.w	r3, [r5], #1
 8017a50:	ec53 2b18 	vmov	r2, r3, d8
 8017a54:	4606      	mov	r6, r0
 8017a56:	460f      	mov	r7, r1
 8017a58:	f7e9 f840 	bl	8000adc <__aeabi_dcmplt>
 8017a5c:	2800      	cmp	r0, #0
 8017a5e:	d165      	bne.n	8017b2c <_dtoa_r+0x63c>
 8017a60:	4632      	mov	r2, r6
 8017a62:	463b      	mov	r3, r7
 8017a64:	4935      	ldr	r1, [pc, #212]	; (8017b3c <_dtoa_r+0x64c>)
 8017a66:	2000      	movs	r0, #0
 8017a68:	f7e8 fc0e 	bl	8000288 <__aeabi_dsub>
 8017a6c:	ec53 2b18 	vmov	r2, r3, d8
 8017a70:	f7e9 f834 	bl	8000adc <__aeabi_dcmplt>
 8017a74:	2800      	cmp	r0, #0
 8017a76:	f040 80b9 	bne.w	8017bec <_dtoa_r+0x6fc>
 8017a7a:	9b02      	ldr	r3, [sp, #8]
 8017a7c:	429d      	cmp	r5, r3
 8017a7e:	f43f af75 	beq.w	801796c <_dtoa_r+0x47c>
 8017a82:	4b2f      	ldr	r3, [pc, #188]	; (8017b40 <_dtoa_r+0x650>)
 8017a84:	ec51 0b18 	vmov	r0, r1, d8
 8017a88:	2200      	movs	r2, #0
 8017a8a:	f7e8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8017a8e:	4b2c      	ldr	r3, [pc, #176]	; (8017b40 <_dtoa_r+0x650>)
 8017a90:	ec41 0b18 	vmov	d8, r0, r1
 8017a94:	2200      	movs	r2, #0
 8017a96:	4630      	mov	r0, r6
 8017a98:	4639      	mov	r1, r7
 8017a9a:	f7e8 fdad 	bl	80005f8 <__aeabi_dmul>
 8017a9e:	4606      	mov	r6, r0
 8017aa0:	460f      	mov	r7, r1
 8017aa2:	e7c4      	b.n	8017a2e <_dtoa_r+0x53e>
 8017aa4:	ec51 0b17 	vmov	r0, r1, d7
 8017aa8:	f7e8 fda6 	bl	80005f8 <__aeabi_dmul>
 8017aac:	9b02      	ldr	r3, [sp, #8]
 8017aae:	9d00      	ldr	r5, [sp, #0]
 8017ab0:	930c      	str	r3, [sp, #48]	; 0x30
 8017ab2:	ec41 0b18 	vmov	d8, r0, r1
 8017ab6:	4639      	mov	r1, r7
 8017ab8:	4630      	mov	r0, r6
 8017aba:	f7e9 f84d 	bl	8000b58 <__aeabi_d2iz>
 8017abe:	9011      	str	r0, [sp, #68]	; 0x44
 8017ac0:	f7e8 fd30 	bl	8000524 <__aeabi_i2d>
 8017ac4:	4602      	mov	r2, r0
 8017ac6:	460b      	mov	r3, r1
 8017ac8:	4630      	mov	r0, r6
 8017aca:	4639      	mov	r1, r7
 8017acc:	f7e8 fbdc 	bl	8000288 <__aeabi_dsub>
 8017ad0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ad2:	3330      	adds	r3, #48	; 0x30
 8017ad4:	f805 3b01 	strb.w	r3, [r5], #1
 8017ad8:	9b02      	ldr	r3, [sp, #8]
 8017ada:	429d      	cmp	r5, r3
 8017adc:	4606      	mov	r6, r0
 8017ade:	460f      	mov	r7, r1
 8017ae0:	f04f 0200 	mov.w	r2, #0
 8017ae4:	d134      	bne.n	8017b50 <_dtoa_r+0x660>
 8017ae6:	4b19      	ldr	r3, [pc, #100]	; (8017b4c <_dtoa_r+0x65c>)
 8017ae8:	ec51 0b18 	vmov	r0, r1, d8
 8017aec:	f7e8 fbce 	bl	800028c <__adddf3>
 8017af0:	4602      	mov	r2, r0
 8017af2:	460b      	mov	r3, r1
 8017af4:	4630      	mov	r0, r6
 8017af6:	4639      	mov	r1, r7
 8017af8:	f7e9 f80e 	bl	8000b18 <__aeabi_dcmpgt>
 8017afc:	2800      	cmp	r0, #0
 8017afe:	d175      	bne.n	8017bec <_dtoa_r+0x6fc>
 8017b00:	ec53 2b18 	vmov	r2, r3, d8
 8017b04:	4911      	ldr	r1, [pc, #68]	; (8017b4c <_dtoa_r+0x65c>)
 8017b06:	2000      	movs	r0, #0
 8017b08:	f7e8 fbbe 	bl	8000288 <__aeabi_dsub>
 8017b0c:	4602      	mov	r2, r0
 8017b0e:	460b      	mov	r3, r1
 8017b10:	4630      	mov	r0, r6
 8017b12:	4639      	mov	r1, r7
 8017b14:	f7e8 ffe2 	bl	8000adc <__aeabi_dcmplt>
 8017b18:	2800      	cmp	r0, #0
 8017b1a:	f43f af27 	beq.w	801796c <_dtoa_r+0x47c>
 8017b1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b20:	1e6b      	subs	r3, r5, #1
 8017b22:	930c      	str	r3, [sp, #48]	; 0x30
 8017b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b28:	2b30      	cmp	r3, #48	; 0x30
 8017b2a:	d0f8      	beq.n	8017b1e <_dtoa_r+0x62e>
 8017b2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017b30:	e04a      	b.n	8017bc8 <_dtoa_r+0x6d8>
 8017b32:	bf00      	nop
 8017b34:	0801b938 	.word	0x0801b938
 8017b38:	0801b910 	.word	0x0801b910
 8017b3c:	3ff00000 	.word	0x3ff00000
 8017b40:	40240000 	.word	0x40240000
 8017b44:	401c0000 	.word	0x401c0000
 8017b48:	40140000 	.word	0x40140000
 8017b4c:	3fe00000 	.word	0x3fe00000
 8017b50:	4baf      	ldr	r3, [pc, #700]	; (8017e10 <_dtoa_r+0x920>)
 8017b52:	f7e8 fd51 	bl	80005f8 <__aeabi_dmul>
 8017b56:	4606      	mov	r6, r0
 8017b58:	460f      	mov	r7, r1
 8017b5a:	e7ac      	b.n	8017ab6 <_dtoa_r+0x5c6>
 8017b5c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017b60:	9d00      	ldr	r5, [sp, #0]
 8017b62:	4642      	mov	r2, r8
 8017b64:	464b      	mov	r3, r9
 8017b66:	4630      	mov	r0, r6
 8017b68:	4639      	mov	r1, r7
 8017b6a:	f7e8 fe6f 	bl	800084c <__aeabi_ddiv>
 8017b6e:	f7e8 fff3 	bl	8000b58 <__aeabi_d2iz>
 8017b72:	9002      	str	r0, [sp, #8]
 8017b74:	f7e8 fcd6 	bl	8000524 <__aeabi_i2d>
 8017b78:	4642      	mov	r2, r8
 8017b7a:	464b      	mov	r3, r9
 8017b7c:	f7e8 fd3c 	bl	80005f8 <__aeabi_dmul>
 8017b80:	4602      	mov	r2, r0
 8017b82:	460b      	mov	r3, r1
 8017b84:	4630      	mov	r0, r6
 8017b86:	4639      	mov	r1, r7
 8017b88:	f7e8 fb7e 	bl	8000288 <__aeabi_dsub>
 8017b8c:	9e02      	ldr	r6, [sp, #8]
 8017b8e:	9f01      	ldr	r7, [sp, #4]
 8017b90:	3630      	adds	r6, #48	; 0x30
 8017b92:	f805 6b01 	strb.w	r6, [r5], #1
 8017b96:	9e00      	ldr	r6, [sp, #0]
 8017b98:	1bae      	subs	r6, r5, r6
 8017b9a:	42b7      	cmp	r7, r6
 8017b9c:	4602      	mov	r2, r0
 8017b9e:	460b      	mov	r3, r1
 8017ba0:	d137      	bne.n	8017c12 <_dtoa_r+0x722>
 8017ba2:	f7e8 fb73 	bl	800028c <__adddf3>
 8017ba6:	4642      	mov	r2, r8
 8017ba8:	464b      	mov	r3, r9
 8017baa:	4606      	mov	r6, r0
 8017bac:	460f      	mov	r7, r1
 8017bae:	f7e8 ffb3 	bl	8000b18 <__aeabi_dcmpgt>
 8017bb2:	b9c8      	cbnz	r0, 8017be8 <_dtoa_r+0x6f8>
 8017bb4:	4642      	mov	r2, r8
 8017bb6:	464b      	mov	r3, r9
 8017bb8:	4630      	mov	r0, r6
 8017bba:	4639      	mov	r1, r7
 8017bbc:	f7e8 ff84 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bc0:	b110      	cbz	r0, 8017bc8 <_dtoa_r+0x6d8>
 8017bc2:	9b02      	ldr	r3, [sp, #8]
 8017bc4:	07d9      	lsls	r1, r3, #31
 8017bc6:	d40f      	bmi.n	8017be8 <_dtoa_r+0x6f8>
 8017bc8:	4620      	mov	r0, r4
 8017bca:	4659      	mov	r1, fp
 8017bcc:	f000 fbd4 	bl	8018378 <_Bfree>
 8017bd0:	2300      	movs	r3, #0
 8017bd2:	702b      	strb	r3, [r5, #0]
 8017bd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017bd6:	f10a 0001 	add.w	r0, sl, #1
 8017bda:	6018      	str	r0, [r3, #0]
 8017bdc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	f43f acd8 	beq.w	8017594 <_dtoa_r+0xa4>
 8017be4:	601d      	str	r5, [r3, #0]
 8017be6:	e4d5      	b.n	8017594 <_dtoa_r+0xa4>
 8017be8:	f8cd a01c 	str.w	sl, [sp, #28]
 8017bec:	462b      	mov	r3, r5
 8017bee:	461d      	mov	r5, r3
 8017bf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017bf4:	2a39      	cmp	r2, #57	; 0x39
 8017bf6:	d108      	bne.n	8017c0a <_dtoa_r+0x71a>
 8017bf8:	9a00      	ldr	r2, [sp, #0]
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d1f7      	bne.n	8017bee <_dtoa_r+0x6fe>
 8017bfe:	9a07      	ldr	r2, [sp, #28]
 8017c00:	9900      	ldr	r1, [sp, #0]
 8017c02:	3201      	adds	r2, #1
 8017c04:	9207      	str	r2, [sp, #28]
 8017c06:	2230      	movs	r2, #48	; 0x30
 8017c08:	700a      	strb	r2, [r1, #0]
 8017c0a:	781a      	ldrb	r2, [r3, #0]
 8017c0c:	3201      	adds	r2, #1
 8017c0e:	701a      	strb	r2, [r3, #0]
 8017c10:	e78c      	b.n	8017b2c <_dtoa_r+0x63c>
 8017c12:	4b7f      	ldr	r3, [pc, #508]	; (8017e10 <_dtoa_r+0x920>)
 8017c14:	2200      	movs	r2, #0
 8017c16:	f7e8 fcef 	bl	80005f8 <__aeabi_dmul>
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	4606      	mov	r6, r0
 8017c20:	460f      	mov	r7, r1
 8017c22:	f7e8 ff51 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c26:	2800      	cmp	r0, #0
 8017c28:	d09b      	beq.n	8017b62 <_dtoa_r+0x672>
 8017c2a:	e7cd      	b.n	8017bc8 <_dtoa_r+0x6d8>
 8017c2c:	9a08      	ldr	r2, [sp, #32]
 8017c2e:	2a00      	cmp	r2, #0
 8017c30:	f000 80c4 	beq.w	8017dbc <_dtoa_r+0x8cc>
 8017c34:	9a05      	ldr	r2, [sp, #20]
 8017c36:	2a01      	cmp	r2, #1
 8017c38:	f300 80a8 	bgt.w	8017d8c <_dtoa_r+0x89c>
 8017c3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017c3e:	2a00      	cmp	r2, #0
 8017c40:	f000 80a0 	beq.w	8017d84 <_dtoa_r+0x894>
 8017c44:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c48:	9e06      	ldr	r6, [sp, #24]
 8017c4a:	4645      	mov	r5, r8
 8017c4c:	9a04      	ldr	r2, [sp, #16]
 8017c4e:	2101      	movs	r1, #1
 8017c50:	441a      	add	r2, r3
 8017c52:	4620      	mov	r0, r4
 8017c54:	4498      	add	r8, r3
 8017c56:	9204      	str	r2, [sp, #16]
 8017c58:	f000 fc4a 	bl	80184f0 <__i2b>
 8017c5c:	4607      	mov	r7, r0
 8017c5e:	2d00      	cmp	r5, #0
 8017c60:	dd0b      	ble.n	8017c7a <_dtoa_r+0x78a>
 8017c62:	9b04      	ldr	r3, [sp, #16]
 8017c64:	2b00      	cmp	r3, #0
 8017c66:	dd08      	ble.n	8017c7a <_dtoa_r+0x78a>
 8017c68:	42ab      	cmp	r3, r5
 8017c6a:	9a04      	ldr	r2, [sp, #16]
 8017c6c:	bfa8      	it	ge
 8017c6e:	462b      	movge	r3, r5
 8017c70:	eba8 0803 	sub.w	r8, r8, r3
 8017c74:	1aed      	subs	r5, r5, r3
 8017c76:	1ad3      	subs	r3, r2, r3
 8017c78:	9304      	str	r3, [sp, #16]
 8017c7a:	9b06      	ldr	r3, [sp, #24]
 8017c7c:	b1fb      	cbz	r3, 8017cbe <_dtoa_r+0x7ce>
 8017c7e:	9b08      	ldr	r3, [sp, #32]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	f000 809f 	beq.w	8017dc4 <_dtoa_r+0x8d4>
 8017c86:	2e00      	cmp	r6, #0
 8017c88:	dd11      	ble.n	8017cae <_dtoa_r+0x7be>
 8017c8a:	4639      	mov	r1, r7
 8017c8c:	4632      	mov	r2, r6
 8017c8e:	4620      	mov	r0, r4
 8017c90:	f000 fcea 	bl	8018668 <__pow5mult>
 8017c94:	465a      	mov	r2, fp
 8017c96:	4601      	mov	r1, r0
 8017c98:	4607      	mov	r7, r0
 8017c9a:	4620      	mov	r0, r4
 8017c9c:	f000 fc3e 	bl	801851c <__multiply>
 8017ca0:	4659      	mov	r1, fp
 8017ca2:	9007      	str	r0, [sp, #28]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	f000 fb67 	bl	8018378 <_Bfree>
 8017caa:	9b07      	ldr	r3, [sp, #28]
 8017cac:	469b      	mov	fp, r3
 8017cae:	9b06      	ldr	r3, [sp, #24]
 8017cb0:	1b9a      	subs	r2, r3, r6
 8017cb2:	d004      	beq.n	8017cbe <_dtoa_r+0x7ce>
 8017cb4:	4659      	mov	r1, fp
 8017cb6:	4620      	mov	r0, r4
 8017cb8:	f000 fcd6 	bl	8018668 <__pow5mult>
 8017cbc:	4683      	mov	fp, r0
 8017cbe:	2101      	movs	r1, #1
 8017cc0:	4620      	mov	r0, r4
 8017cc2:	f000 fc15 	bl	80184f0 <__i2b>
 8017cc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cc8:	2b00      	cmp	r3, #0
 8017cca:	4606      	mov	r6, r0
 8017ccc:	dd7c      	ble.n	8017dc8 <_dtoa_r+0x8d8>
 8017cce:	461a      	mov	r2, r3
 8017cd0:	4601      	mov	r1, r0
 8017cd2:	4620      	mov	r0, r4
 8017cd4:	f000 fcc8 	bl	8018668 <__pow5mult>
 8017cd8:	9b05      	ldr	r3, [sp, #20]
 8017cda:	2b01      	cmp	r3, #1
 8017cdc:	4606      	mov	r6, r0
 8017cde:	dd76      	ble.n	8017dce <_dtoa_r+0x8de>
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	9306      	str	r3, [sp, #24]
 8017ce4:	6933      	ldr	r3, [r6, #16]
 8017ce6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017cea:	6918      	ldr	r0, [r3, #16]
 8017cec:	f000 fbb0 	bl	8018450 <__hi0bits>
 8017cf0:	f1c0 0020 	rsb	r0, r0, #32
 8017cf4:	9b04      	ldr	r3, [sp, #16]
 8017cf6:	4418      	add	r0, r3
 8017cf8:	f010 001f 	ands.w	r0, r0, #31
 8017cfc:	f000 8086 	beq.w	8017e0c <_dtoa_r+0x91c>
 8017d00:	f1c0 0320 	rsb	r3, r0, #32
 8017d04:	2b04      	cmp	r3, #4
 8017d06:	dd7f      	ble.n	8017e08 <_dtoa_r+0x918>
 8017d08:	f1c0 001c 	rsb	r0, r0, #28
 8017d0c:	9b04      	ldr	r3, [sp, #16]
 8017d0e:	4403      	add	r3, r0
 8017d10:	4480      	add	r8, r0
 8017d12:	4405      	add	r5, r0
 8017d14:	9304      	str	r3, [sp, #16]
 8017d16:	f1b8 0f00 	cmp.w	r8, #0
 8017d1a:	dd05      	ble.n	8017d28 <_dtoa_r+0x838>
 8017d1c:	4659      	mov	r1, fp
 8017d1e:	4642      	mov	r2, r8
 8017d20:	4620      	mov	r0, r4
 8017d22:	f000 fcfb 	bl	801871c <__lshift>
 8017d26:	4683      	mov	fp, r0
 8017d28:	9b04      	ldr	r3, [sp, #16]
 8017d2a:	2b00      	cmp	r3, #0
 8017d2c:	dd05      	ble.n	8017d3a <_dtoa_r+0x84a>
 8017d2e:	4631      	mov	r1, r6
 8017d30:	461a      	mov	r2, r3
 8017d32:	4620      	mov	r0, r4
 8017d34:	f000 fcf2 	bl	801871c <__lshift>
 8017d38:	4606      	mov	r6, r0
 8017d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d069      	beq.n	8017e14 <_dtoa_r+0x924>
 8017d40:	4631      	mov	r1, r6
 8017d42:	4658      	mov	r0, fp
 8017d44:	f000 fd56 	bl	80187f4 <__mcmp>
 8017d48:	2800      	cmp	r0, #0
 8017d4a:	da63      	bge.n	8017e14 <_dtoa_r+0x924>
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	4659      	mov	r1, fp
 8017d50:	220a      	movs	r2, #10
 8017d52:	4620      	mov	r0, r4
 8017d54:	f000 fb32 	bl	80183bc <__multadd>
 8017d58:	9b08      	ldr	r3, [sp, #32]
 8017d5a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017d5e:	4683      	mov	fp, r0
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	f000 818f 	beq.w	8018084 <_dtoa_r+0xb94>
 8017d66:	4639      	mov	r1, r7
 8017d68:	2300      	movs	r3, #0
 8017d6a:	220a      	movs	r2, #10
 8017d6c:	4620      	mov	r0, r4
 8017d6e:	f000 fb25 	bl	80183bc <__multadd>
 8017d72:	f1b9 0f00 	cmp.w	r9, #0
 8017d76:	4607      	mov	r7, r0
 8017d78:	f300 808e 	bgt.w	8017e98 <_dtoa_r+0x9a8>
 8017d7c:	9b05      	ldr	r3, [sp, #20]
 8017d7e:	2b02      	cmp	r3, #2
 8017d80:	dc50      	bgt.n	8017e24 <_dtoa_r+0x934>
 8017d82:	e089      	b.n	8017e98 <_dtoa_r+0x9a8>
 8017d84:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d8a:	e75d      	b.n	8017c48 <_dtoa_r+0x758>
 8017d8c:	9b01      	ldr	r3, [sp, #4]
 8017d8e:	1e5e      	subs	r6, r3, #1
 8017d90:	9b06      	ldr	r3, [sp, #24]
 8017d92:	42b3      	cmp	r3, r6
 8017d94:	bfbf      	itttt	lt
 8017d96:	9b06      	ldrlt	r3, [sp, #24]
 8017d98:	9606      	strlt	r6, [sp, #24]
 8017d9a:	1af2      	sublt	r2, r6, r3
 8017d9c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017d9e:	bfb6      	itet	lt
 8017da0:	189b      	addlt	r3, r3, r2
 8017da2:	1b9e      	subge	r6, r3, r6
 8017da4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017da6:	9b01      	ldr	r3, [sp, #4]
 8017da8:	bfb8      	it	lt
 8017daa:	2600      	movlt	r6, #0
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	bfb5      	itete	lt
 8017db0:	eba8 0503 	sublt.w	r5, r8, r3
 8017db4:	9b01      	ldrge	r3, [sp, #4]
 8017db6:	2300      	movlt	r3, #0
 8017db8:	4645      	movge	r5, r8
 8017dba:	e747      	b.n	8017c4c <_dtoa_r+0x75c>
 8017dbc:	9e06      	ldr	r6, [sp, #24]
 8017dbe:	9f08      	ldr	r7, [sp, #32]
 8017dc0:	4645      	mov	r5, r8
 8017dc2:	e74c      	b.n	8017c5e <_dtoa_r+0x76e>
 8017dc4:	9a06      	ldr	r2, [sp, #24]
 8017dc6:	e775      	b.n	8017cb4 <_dtoa_r+0x7c4>
 8017dc8:	9b05      	ldr	r3, [sp, #20]
 8017dca:	2b01      	cmp	r3, #1
 8017dcc:	dc18      	bgt.n	8017e00 <_dtoa_r+0x910>
 8017dce:	9b02      	ldr	r3, [sp, #8]
 8017dd0:	b9b3      	cbnz	r3, 8017e00 <_dtoa_r+0x910>
 8017dd2:	9b03      	ldr	r3, [sp, #12]
 8017dd4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017dd8:	b9a3      	cbnz	r3, 8017e04 <_dtoa_r+0x914>
 8017dda:	9b03      	ldr	r3, [sp, #12]
 8017ddc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017de0:	0d1b      	lsrs	r3, r3, #20
 8017de2:	051b      	lsls	r3, r3, #20
 8017de4:	b12b      	cbz	r3, 8017df2 <_dtoa_r+0x902>
 8017de6:	9b04      	ldr	r3, [sp, #16]
 8017de8:	3301      	adds	r3, #1
 8017dea:	9304      	str	r3, [sp, #16]
 8017dec:	f108 0801 	add.w	r8, r8, #1
 8017df0:	2301      	movs	r3, #1
 8017df2:	9306      	str	r3, [sp, #24]
 8017df4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	f47f af74 	bne.w	8017ce4 <_dtoa_r+0x7f4>
 8017dfc:	2001      	movs	r0, #1
 8017dfe:	e779      	b.n	8017cf4 <_dtoa_r+0x804>
 8017e00:	2300      	movs	r3, #0
 8017e02:	e7f6      	b.n	8017df2 <_dtoa_r+0x902>
 8017e04:	9b02      	ldr	r3, [sp, #8]
 8017e06:	e7f4      	b.n	8017df2 <_dtoa_r+0x902>
 8017e08:	d085      	beq.n	8017d16 <_dtoa_r+0x826>
 8017e0a:	4618      	mov	r0, r3
 8017e0c:	301c      	adds	r0, #28
 8017e0e:	e77d      	b.n	8017d0c <_dtoa_r+0x81c>
 8017e10:	40240000 	.word	0x40240000
 8017e14:	9b01      	ldr	r3, [sp, #4]
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	dc38      	bgt.n	8017e8c <_dtoa_r+0x99c>
 8017e1a:	9b05      	ldr	r3, [sp, #20]
 8017e1c:	2b02      	cmp	r3, #2
 8017e1e:	dd35      	ble.n	8017e8c <_dtoa_r+0x99c>
 8017e20:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017e24:	f1b9 0f00 	cmp.w	r9, #0
 8017e28:	d10d      	bne.n	8017e46 <_dtoa_r+0x956>
 8017e2a:	4631      	mov	r1, r6
 8017e2c:	464b      	mov	r3, r9
 8017e2e:	2205      	movs	r2, #5
 8017e30:	4620      	mov	r0, r4
 8017e32:	f000 fac3 	bl	80183bc <__multadd>
 8017e36:	4601      	mov	r1, r0
 8017e38:	4606      	mov	r6, r0
 8017e3a:	4658      	mov	r0, fp
 8017e3c:	f000 fcda 	bl	80187f4 <__mcmp>
 8017e40:	2800      	cmp	r0, #0
 8017e42:	f73f adbd 	bgt.w	80179c0 <_dtoa_r+0x4d0>
 8017e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e48:	9d00      	ldr	r5, [sp, #0]
 8017e4a:	ea6f 0a03 	mvn.w	sl, r3
 8017e4e:	f04f 0800 	mov.w	r8, #0
 8017e52:	4631      	mov	r1, r6
 8017e54:	4620      	mov	r0, r4
 8017e56:	f000 fa8f 	bl	8018378 <_Bfree>
 8017e5a:	2f00      	cmp	r7, #0
 8017e5c:	f43f aeb4 	beq.w	8017bc8 <_dtoa_r+0x6d8>
 8017e60:	f1b8 0f00 	cmp.w	r8, #0
 8017e64:	d005      	beq.n	8017e72 <_dtoa_r+0x982>
 8017e66:	45b8      	cmp	r8, r7
 8017e68:	d003      	beq.n	8017e72 <_dtoa_r+0x982>
 8017e6a:	4641      	mov	r1, r8
 8017e6c:	4620      	mov	r0, r4
 8017e6e:	f000 fa83 	bl	8018378 <_Bfree>
 8017e72:	4639      	mov	r1, r7
 8017e74:	4620      	mov	r0, r4
 8017e76:	f000 fa7f 	bl	8018378 <_Bfree>
 8017e7a:	e6a5      	b.n	8017bc8 <_dtoa_r+0x6d8>
 8017e7c:	2600      	movs	r6, #0
 8017e7e:	4637      	mov	r7, r6
 8017e80:	e7e1      	b.n	8017e46 <_dtoa_r+0x956>
 8017e82:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017e84:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017e88:	4637      	mov	r7, r6
 8017e8a:	e599      	b.n	80179c0 <_dtoa_r+0x4d0>
 8017e8c:	9b08      	ldr	r3, [sp, #32]
 8017e8e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	f000 80fd 	beq.w	8018092 <_dtoa_r+0xba2>
 8017e98:	2d00      	cmp	r5, #0
 8017e9a:	dd05      	ble.n	8017ea8 <_dtoa_r+0x9b8>
 8017e9c:	4639      	mov	r1, r7
 8017e9e:	462a      	mov	r2, r5
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	f000 fc3b 	bl	801871c <__lshift>
 8017ea6:	4607      	mov	r7, r0
 8017ea8:	9b06      	ldr	r3, [sp, #24]
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d05c      	beq.n	8017f68 <_dtoa_r+0xa78>
 8017eae:	6879      	ldr	r1, [r7, #4]
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	f000 fa21 	bl	80182f8 <_Balloc>
 8017eb6:	4605      	mov	r5, r0
 8017eb8:	b928      	cbnz	r0, 8017ec6 <_dtoa_r+0x9d6>
 8017eba:	4b80      	ldr	r3, [pc, #512]	; (80180bc <_dtoa_r+0xbcc>)
 8017ebc:	4602      	mov	r2, r0
 8017ebe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017ec2:	f7ff bb2e 	b.w	8017522 <_dtoa_r+0x32>
 8017ec6:	693a      	ldr	r2, [r7, #16]
 8017ec8:	3202      	adds	r2, #2
 8017eca:	0092      	lsls	r2, r2, #2
 8017ecc:	f107 010c 	add.w	r1, r7, #12
 8017ed0:	300c      	adds	r0, #12
 8017ed2:	f7fe fc59 	bl	8016788 <memcpy>
 8017ed6:	2201      	movs	r2, #1
 8017ed8:	4629      	mov	r1, r5
 8017eda:	4620      	mov	r0, r4
 8017edc:	f000 fc1e 	bl	801871c <__lshift>
 8017ee0:	9b00      	ldr	r3, [sp, #0]
 8017ee2:	3301      	adds	r3, #1
 8017ee4:	9301      	str	r3, [sp, #4]
 8017ee6:	9b00      	ldr	r3, [sp, #0]
 8017ee8:	444b      	add	r3, r9
 8017eea:	9307      	str	r3, [sp, #28]
 8017eec:	9b02      	ldr	r3, [sp, #8]
 8017eee:	f003 0301 	and.w	r3, r3, #1
 8017ef2:	46b8      	mov	r8, r7
 8017ef4:	9306      	str	r3, [sp, #24]
 8017ef6:	4607      	mov	r7, r0
 8017ef8:	9b01      	ldr	r3, [sp, #4]
 8017efa:	4631      	mov	r1, r6
 8017efc:	3b01      	subs	r3, #1
 8017efe:	4658      	mov	r0, fp
 8017f00:	9302      	str	r3, [sp, #8]
 8017f02:	f7ff fa67 	bl	80173d4 <quorem>
 8017f06:	4603      	mov	r3, r0
 8017f08:	3330      	adds	r3, #48	; 0x30
 8017f0a:	9004      	str	r0, [sp, #16]
 8017f0c:	4641      	mov	r1, r8
 8017f0e:	4658      	mov	r0, fp
 8017f10:	9308      	str	r3, [sp, #32]
 8017f12:	f000 fc6f 	bl	80187f4 <__mcmp>
 8017f16:	463a      	mov	r2, r7
 8017f18:	4681      	mov	r9, r0
 8017f1a:	4631      	mov	r1, r6
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	f000 fc85 	bl	801882c <__mdiff>
 8017f22:	68c2      	ldr	r2, [r0, #12]
 8017f24:	9b08      	ldr	r3, [sp, #32]
 8017f26:	4605      	mov	r5, r0
 8017f28:	bb02      	cbnz	r2, 8017f6c <_dtoa_r+0xa7c>
 8017f2a:	4601      	mov	r1, r0
 8017f2c:	4658      	mov	r0, fp
 8017f2e:	f000 fc61 	bl	80187f4 <__mcmp>
 8017f32:	9b08      	ldr	r3, [sp, #32]
 8017f34:	4602      	mov	r2, r0
 8017f36:	4629      	mov	r1, r5
 8017f38:	4620      	mov	r0, r4
 8017f3a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017f3e:	f000 fa1b 	bl	8018378 <_Bfree>
 8017f42:	9b05      	ldr	r3, [sp, #20]
 8017f44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f46:	9d01      	ldr	r5, [sp, #4]
 8017f48:	ea43 0102 	orr.w	r1, r3, r2
 8017f4c:	9b06      	ldr	r3, [sp, #24]
 8017f4e:	430b      	orrs	r3, r1
 8017f50:	9b08      	ldr	r3, [sp, #32]
 8017f52:	d10d      	bne.n	8017f70 <_dtoa_r+0xa80>
 8017f54:	2b39      	cmp	r3, #57	; 0x39
 8017f56:	d029      	beq.n	8017fac <_dtoa_r+0xabc>
 8017f58:	f1b9 0f00 	cmp.w	r9, #0
 8017f5c:	dd01      	ble.n	8017f62 <_dtoa_r+0xa72>
 8017f5e:	9b04      	ldr	r3, [sp, #16]
 8017f60:	3331      	adds	r3, #49	; 0x31
 8017f62:	9a02      	ldr	r2, [sp, #8]
 8017f64:	7013      	strb	r3, [r2, #0]
 8017f66:	e774      	b.n	8017e52 <_dtoa_r+0x962>
 8017f68:	4638      	mov	r0, r7
 8017f6a:	e7b9      	b.n	8017ee0 <_dtoa_r+0x9f0>
 8017f6c:	2201      	movs	r2, #1
 8017f6e:	e7e2      	b.n	8017f36 <_dtoa_r+0xa46>
 8017f70:	f1b9 0f00 	cmp.w	r9, #0
 8017f74:	db06      	blt.n	8017f84 <_dtoa_r+0xa94>
 8017f76:	9905      	ldr	r1, [sp, #20]
 8017f78:	ea41 0909 	orr.w	r9, r1, r9
 8017f7c:	9906      	ldr	r1, [sp, #24]
 8017f7e:	ea59 0101 	orrs.w	r1, r9, r1
 8017f82:	d120      	bne.n	8017fc6 <_dtoa_r+0xad6>
 8017f84:	2a00      	cmp	r2, #0
 8017f86:	ddec      	ble.n	8017f62 <_dtoa_r+0xa72>
 8017f88:	4659      	mov	r1, fp
 8017f8a:	2201      	movs	r2, #1
 8017f8c:	4620      	mov	r0, r4
 8017f8e:	9301      	str	r3, [sp, #4]
 8017f90:	f000 fbc4 	bl	801871c <__lshift>
 8017f94:	4631      	mov	r1, r6
 8017f96:	4683      	mov	fp, r0
 8017f98:	f000 fc2c 	bl	80187f4 <__mcmp>
 8017f9c:	2800      	cmp	r0, #0
 8017f9e:	9b01      	ldr	r3, [sp, #4]
 8017fa0:	dc02      	bgt.n	8017fa8 <_dtoa_r+0xab8>
 8017fa2:	d1de      	bne.n	8017f62 <_dtoa_r+0xa72>
 8017fa4:	07da      	lsls	r2, r3, #31
 8017fa6:	d5dc      	bpl.n	8017f62 <_dtoa_r+0xa72>
 8017fa8:	2b39      	cmp	r3, #57	; 0x39
 8017faa:	d1d8      	bne.n	8017f5e <_dtoa_r+0xa6e>
 8017fac:	9a02      	ldr	r2, [sp, #8]
 8017fae:	2339      	movs	r3, #57	; 0x39
 8017fb0:	7013      	strb	r3, [r2, #0]
 8017fb2:	462b      	mov	r3, r5
 8017fb4:	461d      	mov	r5, r3
 8017fb6:	3b01      	subs	r3, #1
 8017fb8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017fbc:	2a39      	cmp	r2, #57	; 0x39
 8017fbe:	d050      	beq.n	8018062 <_dtoa_r+0xb72>
 8017fc0:	3201      	adds	r2, #1
 8017fc2:	701a      	strb	r2, [r3, #0]
 8017fc4:	e745      	b.n	8017e52 <_dtoa_r+0x962>
 8017fc6:	2a00      	cmp	r2, #0
 8017fc8:	dd03      	ble.n	8017fd2 <_dtoa_r+0xae2>
 8017fca:	2b39      	cmp	r3, #57	; 0x39
 8017fcc:	d0ee      	beq.n	8017fac <_dtoa_r+0xabc>
 8017fce:	3301      	adds	r3, #1
 8017fd0:	e7c7      	b.n	8017f62 <_dtoa_r+0xa72>
 8017fd2:	9a01      	ldr	r2, [sp, #4]
 8017fd4:	9907      	ldr	r1, [sp, #28]
 8017fd6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017fda:	428a      	cmp	r2, r1
 8017fdc:	d02a      	beq.n	8018034 <_dtoa_r+0xb44>
 8017fde:	4659      	mov	r1, fp
 8017fe0:	2300      	movs	r3, #0
 8017fe2:	220a      	movs	r2, #10
 8017fe4:	4620      	mov	r0, r4
 8017fe6:	f000 f9e9 	bl	80183bc <__multadd>
 8017fea:	45b8      	cmp	r8, r7
 8017fec:	4683      	mov	fp, r0
 8017fee:	f04f 0300 	mov.w	r3, #0
 8017ff2:	f04f 020a 	mov.w	r2, #10
 8017ff6:	4641      	mov	r1, r8
 8017ff8:	4620      	mov	r0, r4
 8017ffa:	d107      	bne.n	801800c <_dtoa_r+0xb1c>
 8017ffc:	f000 f9de 	bl	80183bc <__multadd>
 8018000:	4680      	mov	r8, r0
 8018002:	4607      	mov	r7, r0
 8018004:	9b01      	ldr	r3, [sp, #4]
 8018006:	3301      	adds	r3, #1
 8018008:	9301      	str	r3, [sp, #4]
 801800a:	e775      	b.n	8017ef8 <_dtoa_r+0xa08>
 801800c:	f000 f9d6 	bl	80183bc <__multadd>
 8018010:	4639      	mov	r1, r7
 8018012:	4680      	mov	r8, r0
 8018014:	2300      	movs	r3, #0
 8018016:	220a      	movs	r2, #10
 8018018:	4620      	mov	r0, r4
 801801a:	f000 f9cf 	bl	80183bc <__multadd>
 801801e:	4607      	mov	r7, r0
 8018020:	e7f0      	b.n	8018004 <_dtoa_r+0xb14>
 8018022:	f1b9 0f00 	cmp.w	r9, #0
 8018026:	9a00      	ldr	r2, [sp, #0]
 8018028:	bfcc      	ite	gt
 801802a:	464d      	movgt	r5, r9
 801802c:	2501      	movle	r5, #1
 801802e:	4415      	add	r5, r2
 8018030:	f04f 0800 	mov.w	r8, #0
 8018034:	4659      	mov	r1, fp
 8018036:	2201      	movs	r2, #1
 8018038:	4620      	mov	r0, r4
 801803a:	9301      	str	r3, [sp, #4]
 801803c:	f000 fb6e 	bl	801871c <__lshift>
 8018040:	4631      	mov	r1, r6
 8018042:	4683      	mov	fp, r0
 8018044:	f000 fbd6 	bl	80187f4 <__mcmp>
 8018048:	2800      	cmp	r0, #0
 801804a:	dcb2      	bgt.n	8017fb2 <_dtoa_r+0xac2>
 801804c:	d102      	bne.n	8018054 <_dtoa_r+0xb64>
 801804e:	9b01      	ldr	r3, [sp, #4]
 8018050:	07db      	lsls	r3, r3, #31
 8018052:	d4ae      	bmi.n	8017fb2 <_dtoa_r+0xac2>
 8018054:	462b      	mov	r3, r5
 8018056:	461d      	mov	r5, r3
 8018058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801805c:	2a30      	cmp	r2, #48	; 0x30
 801805e:	d0fa      	beq.n	8018056 <_dtoa_r+0xb66>
 8018060:	e6f7      	b.n	8017e52 <_dtoa_r+0x962>
 8018062:	9a00      	ldr	r2, [sp, #0]
 8018064:	429a      	cmp	r2, r3
 8018066:	d1a5      	bne.n	8017fb4 <_dtoa_r+0xac4>
 8018068:	f10a 0a01 	add.w	sl, sl, #1
 801806c:	2331      	movs	r3, #49	; 0x31
 801806e:	e779      	b.n	8017f64 <_dtoa_r+0xa74>
 8018070:	4b13      	ldr	r3, [pc, #76]	; (80180c0 <_dtoa_r+0xbd0>)
 8018072:	f7ff baaf 	b.w	80175d4 <_dtoa_r+0xe4>
 8018076:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018078:	2b00      	cmp	r3, #0
 801807a:	f47f aa86 	bne.w	801758a <_dtoa_r+0x9a>
 801807e:	4b11      	ldr	r3, [pc, #68]	; (80180c4 <_dtoa_r+0xbd4>)
 8018080:	f7ff baa8 	b.w	80175d4 <_dtoa_r+0xe4>
 8018084:	f1b9 0f00 	cmp.w	r9, #0
 8018088:	dc03      	bgt.n	8018092 <_dtoa_r+0xba2>
 801808a:	9b05      	ldr	r3, [sp, #20]
 801808c:	2b02      	cmp	r3, #2
 801808e:	f73f aec9 	bgt.w	8017e24 <_dtoa_r+0x934>
 8018092:	9d00      	ldr	r5, [sp, #0]
 8018094:	4631      	mov	r1, r6
 8018096:	4658      	mov	r0, fp
 8018098:	f7ff f99c 	bl	80173d4 <quorem>
 801809c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80180a0:	f805 3b01 	strb.w	r3, [r5], #1
 80180a4:	9a00      	ldr	r2, [sp, #0]
 80180a6:	1aaa      	subs	r2, r5, r2
 80180a8:	4591      	cmp	r9, r2
 80180aa:	ddba      	ble.n	8018022 <_dtoa_r+0xb32>
 80180ac:	4659      	mov	r1, fp
 80180ae:	2300      	movs	r3, #0
 80180b0:	220a      	movs	r2, #10
 80180b2:	4620      	mov	r0, r4
 80180b4:	f000 f982 	bl	80183bc <__multadd>
 80180b8:	4683      	mov	fp, r0
 80180ba:	e7eb      	b.n	8018094 <_dtoa_r+0xba4>
 80180bc:	0801b83c 	.word	0x0801b83c
 80180c0:	0801b598 	.word	0x0801b598
 80180c4:	0801b7d0 	.word	0x0801b7d0

080180c8 <std>:
 80180c8:	2300      	movs	r3, #0
 80180ca:	b510      	push	{r4, lr}
 80180cc:	4604      	mov	r4, r0
 80180ce:	e9c0 3300 	strd	r3, r3, [r0]
 80180d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80180d6:	6083      	str	r3, [r0, #8]
 80180d8:	8181      	strh	r1, [r0, #12]
 80180da:	6643      	str	r3, [r0, #100]	; 0x64
 80180dc:	81c2      	strh	r2, [r0, #14]
 80180de:	6183      	str	r3, [r0, #24]
 80180e0:	4619      	mov	r1, r3
 80180e2:	2208      	movs	r2, #8
 80180e4:	305c      	adds	r0, #92	; 0x5c
 80180e6:	f7fe fb5d 	bl	80167a4 <memset>
 80180ea:	4b05      	ldr	r3, [pc, #20]	; (8018100 <std+0x38>)
 80180ec:	6263      	str	r3, [r4, #36]	; 0x24
 80180ee:	4b05      	ldr	r3, [pc, #20]	; (8018104 <std+0x3c>)
 80180f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80180f2:	4b05      	ldr	r3, [pc, #20]	; (8018108 <std+0x40>)
 80180f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80180f6:	4b05      	ldr	r3, [pc, #20]	; (801810c <std+0x44>)
 80180f8:	6224      	str	r4, [r4, #32]
 80180fa:	6323      	str	r3, [r4, #48]	; 0x30
 80180fc:	bd10      	pop	{r4, pc}
 80180fe:	bf00      	nop
 8018100:	080190f5 	.word	0x080190f5
 8018104:	08019117 	.word	0x08019117
 8018108:	0801914f 	.word	0x0801914f
 801810c:	08019173 	.word	0x08019173

08018110 <_cleanup_r>:
 8018110:	4901      	ldr	r1, [pc, #4]	; (8018118 <_cleanup_r+0x8>)
 8018112:	f000 b8c1 	b.w	8018298 <_fwalk_reent>
 8018116:	bf00      	nop
 8018118:	0801945d 	.word	0x0801945d

0801811c <__sfmoreglue>:
 801811c:	b570      	push	{r4, r5, r6, lr}
 801811e:	1e4a      	subs	r2, r1, #1
 8018120:	2568      	movs	r5, #104	; 0x68
 8018122:	4355      	muls	r5, r2
 8018124:	460e      	mov	r6, r1
 8018126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801812a:	f000 fcc3 	bl	8018ab4 <_malloc_r>
 801812e:	4604      	mov	r4, r0
 8018130:	b140      	cbz	r0, 8018144 <__sfmoreglue+0x28>
 8018132:	2100      	movs	r1, #0
 8018134:	e9c0 1600 	strd	r1, r6, [r0]
 8018138:	300c      	adds	r0, #12
 801813a:	60a0      	str	r0, [r4, #8]
 801813c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018140:	f7fe fb30 	bl	80167a4 <memset>
 8018144:	4620      	mov	r0, r4
 8018146:	bd70      	pop	{r4, r5, r6, pc}

08018148 <__sfp_lock_acquire>:
 8018148:	4801      	ldr	r0, [pc, #4]	; (8018150 <__sfp_lock_acquire+0x8>)
 801814a:	f000 b8ca 	b.w	80182e2 <__retarget_lock_acquire_recursive>
 801814e:	bf00      	nop
 8018150:	20003d14 	.word	0x20003d14

08018154 <__sfp_lock_release>:
 8018154:	4801      	ldr	r0, [pc, #4]	; (801815c <__sfp_lock_release+0x8>)
 8018156:	f000 b8c5 	b.w	80182e4 <__retarget_lock_release_recursive>
 801815a:	bf00      	nop
 801815c:	20003d14 	.word	0x20003d14

08018160 <__sinit_lock_acquire>:
 8018160:	4801      	ldr	r0, [pc, #4]	; (8018168 <__sinit_lock_acquire+0x8>)
 8018162:	f000 b8be 	b.w	80182e2 <__retarget_lock_acquire_recursive>
 8018166:	bf00      	nop
 8018168:	20003d13 	.word	0x20003d13

0801816c <__sinit_lock_release>:
 801816c:	4801      	ldr	r0, [pc, #4]	; (8018174 <__sinit_lock_release+0x8>)
 801816e:	f000 b8b9 	b.w	80182e4 <__retarget_lock_release_recursive>
 8018172:	bf00      	nop
 8018174:	20003d13 	.word	0x20003d13

08018178 <__sinit>:
 8018178:	b510      	push	{r4, lr}
 801817a:	4604      	mov	r4, r0
 801817c:	f7ff fff0 	bl	8018160 <__sinit_lock_acquire>
 8018180:	69a3      	ldr	r3, [r4, #24]
 8018182:	b11b      	cbz	r3, 801818c <__sinit+0x14>
 8018184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018188:	f7ff bff0 	b.w	801816c <__sinit_lock_release>
 801818c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018190:	6523      	str	r3, [r4, #80]	; 0x50
 8018192:	4b13      	ldr	r3, [pc, #76]	; (80181e0 <__sinit+0x68>)
 8018194:	4a13      	ldr	r2, [pc, #76]	; (80181e4 <__sinit+0x6c>)
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	62a2      	str	r2, [r4, #40]	; 0x28
 801819a:	42a3      	cmp	r3, r4
 801819c:	bf04      	itt	eq
 801819e:	2301      	moveq	r3, #1
 80181a0:	61a3      	streq	r3, [r4, #24]
 80181a2:	4620      	mov	r0, r4
 80181a4:	f000 f820 	bl	80181e8 <__sfp>
 80181a8:	6060      	str	r0, [r4, #4]
 80181aa:	4620      	mov	r0, r4
 80181ac:	f000 f81c 	bl	80181e8 <__sfp>
 80181b0:	60a0      	str	r0, [r4, #8]
 80181b2:	4620      	mov	r0, r4
 80181b4:	f000 f818 	bl	80181e8 <__sfp>
 80181b8:	2200      	movs	r2, #0
 80181ba:	60e0      	str	r0, [r4, #12]
 80181bc:	2104      	movs	r1, #4
 80181be:	6860      	ldr	r0, [r4, #4]
 80181c0:	f7ff ff82 	bl	80180c8 <std>
 80181c4:	68a0      	ldr	r0, [r4, #8]
 80181c6:	2201      	movs	r2, #1
 80181c8:	2109      	movs	r1, #9
 80181ca:	f7ff ff7d 	bl	80180c8 <std>
 80181ce:	68e0      	ldr	r0, [r4, #12]
 80181d0:	2202      	movs	r2, #2
 80181d2:	2112      	movs	r1, #18
 80181d4:	f7ff ff78 	bl	80180c8 <std>
 80181d8:	2301      	movs	r3, #1
 80181da:	61a3      	str	r3, [r4, #24]
 80181dc:	e7d2      	b.n	8018184 <__sinit+0xc>
 80181de:	bf00      	nop
 80181e0:	0801b584 	.word	0x0801b584
 80181e4:	08018111 	.word	0x08018111

080181e8 <__sfp>:
 80181e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181ea:	4607      	mov	r7, r0
 80181ec:	f7ff ffac 	bl	8018148 <__sfp_lock_acquire>
 80181f0:	4b1e      	ldr	r3, [pc, #120]	; (801826c <__sfp+0x84>)
 80181f2:	681e      	ldr	r6, [r3, #0]
 80181f4:	69b3      	ldr	r3, [r6, #24]
 80181f6:	b913      	cbnz	r3, 80181fe <__sfp+0x16>
 80181f8:	4630      	mov	r0, r6
 80181fa:	f7ff ffbd 	bl	8018178 <__sinit>
 80181fe:	3648      	adds	r6, #72	; 0x48
 8018200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018204:	3b01      	subs	r3, #1
 8018206:	d503      	bpl.n	8018210 <__sfp+0x28>
 8018208:	6833      	ldr	r3, [r6, #0]
 801820a:	b30b      	cbz	r3, 8018250 <__sfp+0x68>
 801820c:	6836      	ldr	r6, [r6, #0]
 801820e:	e7f7      	b.n	8018200 <__sfp+0x18>
 8018210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018214:	b9d5      	cbnz	r5, 801824c <__sfp+0x64>
 8018216:	4b16      	ldr	r3, [pc, #88]	; (8018270 <__sfp+0x88>)
 8018218:	60e3      	str	r3, [r4, #12]
 801821a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801821e:	6665      	str	r5, [r4, #100]	; 0x64
 8018220:	f000 f85e 	bl	80182e0 <__retarget_lock_init_recursive>
 8018224:	f7ff ff96 	bl	8018154 <__sfp_lock_release>
 8018228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801822c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018230:	6025      	str	r5, [r4, #0]
 8018232:	61a5      	str	r5, [r4, #24]
 8018234:	2208      	movs	r2, #8
 8018236:	4629      	mov	r1, r5
 8018238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801823c:	f7fe fab2 	bl	80167a4 <memset>
 8018240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018248:	4620      	mov	r0, r4
 801824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801824c:	3468      	adds	r4, #104	; 0x68
 801824e:	e7d9      	b.n	8018204 <__sfp+0x1c>
 8018250:	2104      	movs	r1, #4
 8018252:	4638      	mov	r0, r7
 8018254:	f7ff ff62 	bl	801811c <__sfmoreglue>
 8018258:	4604      	mov	r4, r0
 801825a:	6030      	str	r0, [r6, #0]
 801825c:	2800      	cmp	r0, #0
 801825e:	d1d5      	bne.n	801820c <__sfp+0x24>
 8018260:	f7ff ff78 	bl	8018154 <__sfp_lock_release>
 8018264:	230c      	movs	r3, #12
 8018266:	603b      	str	r3, [r7, #0]
 8018268:	e7ee      	b.n	8018248 <__sfp+0x60>
 801826a:	bf00      	nop
 801826c:	0801b584 	.word	0x0801b584
 8018270:	ffff0001 	.word	0xffff0001

08018274 <fiprintf>:
 8018274:	b40e      	push	{r1, r2, r3}
 8018276:	b503      	push	{r0, r1, lr}
 8018278:	4601      	mov	r1, r0
 801827a:	ab03      	add	r3, sp, #12
 801827c:	4805      	ldr	r0, [pc, #20]	; (8018294 <fiprintf+0x20>)
 801827e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018282:	6800      	ldr	r0, [r0, #0]
 8018284:	9301      	str	r3, [sp, #4]
 8018286:	f000 fdf5 	bl	8018e74 <_vfiprintf_r>
 801828a:	b002      	add	sp, #8
 801828c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018290:	b003      	add	sp, #12
 8018292:	4770      	bx	lr
 8018294:	200008c0 	.word	0x200008c0

08018298 <_fwalk_reent>:
 8018298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801829c:	4606      	mov	r6, r0
 801829e:	4688      	mov	r8, r1
 80182a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80182a4:	2700      	movs	r7, #0
 80182a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80182aa:	f1b9 0901 	subs.w	r9, r9, #1
 80182ae:	d505      	bpl.n	80182bc <_fwalk_reent+0x24>
 80182b0:	6824      	ldr	r4, [r4, #0]
 80182b2:	2c00      	cmp	r4, #0
 80182b4:	d1f7      	bne.n	80182a6 <_fwalk_reent+0xe>
 80182b6:	4638      	mov	r0, r7
 80182b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80182bc:	89ab      	ldrh	r3, [r5, #12]
 80182be:	2b01      	cmp	r3, #1
 80182c0:	d907      	bls.n	80182d2 <_fwalk_reent+0x3a>
 80182c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80182c6:	3301      	adds	r3, #1
 80182c8:	d003      	beq.n	80182d2 <_fwalk_reent+0x3a>
 80182ca:	4629      	mov	r1, r5
 80182cc:	4630      	mov	r0, r6
 80182ce:	47c0      	blx	r8
 80182d0:	4307      	orrs	r7, r0
 80182d2:	3568      	adds	r5, #104	; 0x68
 80182d4:	e7e9      	b.n	80182aa <_fwalk_reent+0x12>
	...

080182d8 <_localeconv_r>:
 80182d8:	4800      	ldr	r0, [pc, #0]	; (80182dc <_localeconv_r+0x4>)
 80182da:	4770      	bx	lr
 80182dc:	20000a14 	.word	0x20000a14

080182e0 <__retarget_lock_init_recursive>:
 80182e0:	4770      	bx	lr

080182e2 <__retarget_lock_acquire_recursive>:
 80182e2:	4770      	bx	lr

080182e4 <__retarget_lock_release_recursive>:
 80182e4:	4770      	bx	lr
	...

080182e8 <malloc>:
 80182e8:	4b02      	ldr	r3, [pc, #8]	; (80182f4 <malloc+0xc>)
 80182ea:	4601      	mov	r1, r0
 80182ec:	6818      	ldr	r0, [r3, #0]
 80182ee:	f000 bbe1 	b.w	8018ab4 <_malloc_r>
 80182f2:	bf00      	nop
 80182f4:	200008c0 	.word	0x200008c0

080182f8 <_Balloc>:
 80182f8:	b570      	push	{r4, r5, r6, lr}
 80182fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80182fc:	4604      	mov	r4, r0
 80182fe:	460d      	mov	r5, r1
 8018300:	b976      	cbnz	r6, 8018320 <_Balloc+0x28>
 8018302:	2010      	movs	r0, #16
 8018304:	f7ff fff0 	bl	80182e8 <malloc>
 8018308:	4602      	mov	r2, r0
 801830a:	6260      	str	r0, [r4, #36]	; 0x24
 801830c:	b920      	cbnz	r0, 8018318 <_Balloc+0x20>
 801830e:	4b18      	ldr	r3, [pc, #96]	; (8018370 <_Balloc+0x78>)
 8018310:	4818      	ldr	r0, [pc, #96]	; (8018374 <_Balloc+0x7c>)
 8018312:	2166      	movs	r1, #102	; 0x66
 8018314:	f7ff f840 	bl	8017398 <__assert_func>
 8018318:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801831c:	6006      	str	r6, [r0, #0]
 801831e:	60c6      	str	r6, [r0, #12]
 8018320:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018322:	68f3      	ldr	r3, [r6, #12]
 8018324:	b183      	cbz	r3, 8018348 <_Balloc+0x50>
 8018326:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018328:	68db      	ldr	r3, [r3, #12]
 801832a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801832e:	b9b8      	cbnz	r0, 8018360 <_Balloc+0x68>
 8018330:	2101      	movs	r1, #1
 8018332:	fa01 f605 	lsl.w	r6, r1, r5
 8018336:	1d72      	adds	r2, r6, #5
 8018338:	0092      	lsls	r2, r2, #2
 801833a:	4620      	mov	r0, r4
 801833c:	f000 fb5a 	bl	80189f4 <_calloc_r>
 8018340:	b160      	cbz	r0, 801835c <_Balloc+0x64>
 8018342:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018346:	e00e      	b.n	8018366 <_Balloc+0x6e>
 8018348:	2221      	movs	r2, #33	; 0x21
 801834a:	2104      	movs	r1, #4
 801834c:	4620      	mov	r0, r4
 801834e:	f000 fb51 	bl	80189f4 <_calloc_r>
 8018352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018354:	60f0      	str	r0, [r6, #12]
 8018356:	68db      	ldr	r3, [r3, #12]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d1e4      	bne.n	8018326 <_Balloc+0x2e>
 801835c:	2000      	movs	r0, #0
 801835e:	bd70      	pop	{r4, r5, r6, pc}
 8018360:	6802      	ldr	r2, [r0, #0]
 8018362:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018366:	2300      	movs	r3, #0
 8018368:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801836c:	e7f7      	b.n	801835e <_Balloc+0x66>
 801836e:	bf00      	nop
 8018370:	0801b5bc 	.word	0x0801b5bc
 8018374:	0801b8b0 	.word	0x0801b8b0

08018378 <_Bfree>:
 8018378:	b570      	push	{r4, r5, r6, lr}
 801837a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801837c:	4605      	mov	r5, r0
 801837e:	460c      	mov	r4, r1
 8018380:	b976      	cbnz	r6, 80183a0 <_Bfree+0x28>
 8018382:	2010      	movs	r0, #16
 8018384:	f7ff ffb0 	bl	80182e8 <malloc>
 8018388:	4602      	mov	r2, r0
 801838a:	6268      	str	r0, [r5, #36]	; 0x24
 801838c:	b920      	cbnz	r0, 8018398 <_Bfree+0x20>
 801838e:	4b09      	ldr	r3, [pc, #36]	; (80183b4 <_Bfree+0x3c>)
 8018390:	4809      	ldr	r0, [pc, #36]	; (80183b8 <_Bfree+0x40>)
 8018392:	218a      	movs	r1, #138	; 0x8a
 8018394:	f7ff f800 	bl	8017398 <__assert_func>
 8018398:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801839c:	6006      	str	r6, [r0, #0]
 801839e:	60c6      	str	r6, [r0, #12]
 80183a0:	b13c      	cbz	r4, 80183b2 <_Bfree+0x3a>
 80183a2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80183a4:	6862      	ldr	r2, [r4, #4]
 80183a6:	68db      	ldr	r3, [r3, #12]
 80183a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80183ac:	6021      	str	r1, [r4, #0]
 80183ae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80183b2:	bd70      	pop	{r4, r5, r6, pc}
 80183b4:	0801b5bc 	.word	0x0801b5bc
 80183b8:	0801b8b0 	.word	0x0801b8b0

080183bc <__multadd>:
 80183bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183c0:	690e      	ldr	r6, [r1, #16]
 80183c2:	4607      	mov	r7, r0
 80183c4:	4698      	mov	r8, r3
 80183c6:	460c      	mov	r4, r1
 80183c8:	f101 0014 	add.w	r0, r1, #20
 80183cc:	2300      	movs	r3, #0
 80183ce:	6805      	ldr	r5, [r0, #0]
 80183d0:	b2a9      	uxth	r1, r5
 80183d2:	fb02 8101 	mla	r1, r2, r1, r8
 80183d6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80183da:	0c2d      	lsrs	r5, r5, #16
 80183dc:	fb02 c505 	mla	r5, r2, r5, ip
 80183e0:	b289      	uxth	r1, r1
 80183e2:	3301      	adds	r3, #1
 80183e4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80183e8:	429e      	cmp	r6, r3
 80183ea:	f840 1b04 	str.w	r1, [r0], #4
 80183ee:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80183f2:	dcec      	bgt.n	80183ce <__multadd+0x12>
 80183f4:	f1b8 0f00 	cmp.w	r8, #0
 80183f8:	d022      	beq.n	8018440 <__multadd+0x84>
 80183fa:	68a3      	ldr	r3, [r4, #8]
 80183fc:	42b3      	cmp	r3, r6
 80183fe:	dc19      	bgt.n	8018434 <__multadd+0x78>
 8018400:	6861      	ldr	r1, [r4, #4]
 8018402:	4638      	mov	r0, r7
 8018404:	3101      	adds	r1, #1
 8018406:	f7ff ff77 	bl	80182f8 <_Balloc>
 801840a:	4605      	mov	r5, r0
 801840c:	b928      	cbnz	r0, 801841a <__multadd+0x5e>
 801840e:	4602      	mov	r2, r0
 8018410:	4b0d      	ldr	r3, [pc, #52]	; (8018448 <__multadd+0x8c>)
 8018412:	480e      	ldr	r0, [pc, #56]	; (801844c <__multadd+0x90>)
 8018414:	21b5      	movs	r1, #181	; 0xb5
 8018416:	f7fe ffbf 	bl	8017398 <__assert_func>
 801841a:	6922      	ldr	r2, [r4, #16]
 801841c:	3202      	adds	r2, #2
 801841e:	f104 010c 	add.w	r1, r4, #12
 8018422:	0092      	lsls	r2, r2, #2
 8018424:	300c      	adds	r0, #12
 8018426:	f7fe f9af 	bl	8016788 <memcpy>
 801842a:	4621      	mov	r1, r4
 801842c:	4638      	mov	r0, r7
 801842e:	f7ff ffa3 	bl	8018378 <_Bfree>
 8018432:	462c      	mov	r4, r5
 8018434:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018438:	3601      	adds	r6, #1
 801843a:	f8c3 8014 	str.w	r8, [r3, #20]
 801843e:	6126      	str	r6, [r4, #16]
 8018440:	4620      	mov	r0, r4
 8018442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018446:	bf00      	nop
 8018448:	0801b83c 	.word	0x0801b83c
 801844c:	0801b8b0 	.word	0x0801b8b0

08018450 <__hi0bits>:
 8018450:	0c03      	lsrs	r3, r0, #16
 8018452:	041b      	lsls	r3, r3, #16
 8018454:	b9d3      	cbnz	r3, 801848c <__hi0bits+0x3c>
 8018456:	0400      	lsls	r0, r0, #16
 8018458:	2310      	movs	r3, #16
 801845a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801845e:	bf04      	itt	eq
 8018460:	0200      	lsleq	r0, r0, #8
 8018462:	3308      	addeq	r3, #8
 8018464:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018468:	bf04      	itt	eq
 801846a:	0100      	lsleq	r0, r0, #4
 801846c:	3304      	addeq	r3, #4
 801846e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018472:	bf04      	itt	eq
 8018474:	0080      	lsleq	r0, r0, #2
 8018476:	3302      	addeq	r3, #2
 8018478:	2800      	cmp	r0, #0
 801847a:	db05      	blt.n	8018488 <__hi0bits+0x38>
 801847c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018480:	f103 0301 	add.w	r3, r3, #1
 8018484:	bf08      	it	eq
 8018486:	2320      	moveq	r3, #32
 8018488:	4618      	mov	r0, r3
 801848a:	4770      	bx	lr
 801848c:	2300      	movs	r3, #0
 801848e:	e7e4      	b.n	801845a <__hi0bits+0xa>

08018490 <__lo0bits>:
 8018490:	6803      	ldr	r3, [r0, #0]
 8018492:	f013 0207 	ands.w	r2, r3, #7
 8018496:	4601      	mov	r1, r0
 8018498:	d00b      	beq.n	80184b2 <__lo0bits+0x22>
 801849a:	07da      	lsls	r2, r3, #31
 801849c:	d424      	bmi.n	80184e8 <__lo0bits+0x58>
 801849e:	0798      	lsls	r0, r3, #30
 80184a0:	bf49      	itett	mi
 80184a2:	085b      	lsrmi	r3, r3, #1
 80184a4:	089b      	lsrpl	r3, r3, #2
 80184a6:	2001      	movmi	r0, #1
 80184a8:	600b      	strmi	r3, [r1, #0]
 80184aa:	bf5c      	itt	pl
 80184ac:	600b      	strpl	r3, [r1, #0]
 80184ae:	2002      	movpl	r0, #2
 80184b0:	4770      	bx	lr
 80184b2:	b298      	uxth	r0, r3
 80184b4:	b9b0      	cbnz	r0, 80184e4 <__lo0bits+0x54>
 80184b6:	0c1b      	lsrs	r3, r3, #16
 80184b8:	2010      	movs	r0, #16
 80184ba:	f013 0fff 	tst.w	r3, #255	; 0xff
 80184be:	bf04      	itt	eq
 80184c0:	0a1b      	lsreq	r3, r3, #8
 80184c2:	3008      	addeq	r0, #8
 80184c4:	071a      	lsls	r2, r3, #28
 80184c6:	bf04      	itt	eq
 80184c8:	091b      	lsreq	r3, r3, #4
 80184ca:	3004      	addeq	r0, #4
 80184cc:	079a      	lsls	r2, r3, #30
 80184ce:	bf04      	itt	eq
 80184d0:	089b      	lsreq	r3, r3, #2
 80184d2:	3002      	addeq	r0, #2
 80184d4:	07da      	lsls	r2, r3, #31
 80184d6:	d403      	bmi.n	80184e0 <__lo0bits+0x50>
 80184d8:	085b      	lsrs	r3, r3, #1
 80184da:	f100 0001 	add.w	r0, r0, #1
 80184de:	d005      	beq.n	80184ec <__lo0bits+0x5c>
 80184e0:	600b      	str	r3, [r1, #0]
 80184e2:	4770      	bx	lr
 80184e4:	4610      	mov	r0, r2
 80184e6:	e7e8      	b.n	80184ba <__lo0bits+0x2a>
 80184e8:	2000      	movs	r0, #0
 80184ea:	4770      	bx	lr
 80184ec:	2020      	movs	r0, #32
 80184ee:	4770      	bx	lr

080184f0 <__i2b>:
 80184f0:	b510      	push	{r4, lr}
 80184f2:	460c      	mov	r4, r1
 80184f4:	2101      	movs	r1, #1
 80184f6:	f7ff feff 	bl	80182f8 <_Balloc>
 80184fa:	4602      	mov	r2, r0
 80184fc:	b928      	cbnz	r0, 801850a <__i2b+0x1a>
 80184fe:	4b05      	ldr	r3, [pc, #20]	; (8018514 <__i2b+0x24>)
 8018500:	4805      	ldr	r0, [pc, #20]	; (8018518 <__i2b+0x28>)
 8018502:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018506:	f7fe ff47 	bl	8017398 <__assert_func>
 801850a:	2301      	movs	r3, #1
 801850c:	6144      	str	r4, [r0, #20]
 801850e:	6103      	str	r3, [r0, #16]
 8018510:	bd10      	pop	{r4, pc}
 8018512:	bf00      	nop
 8018514:	0801b83c 	.word	0x0801b83c
 8018518:	0801b8b0 	.word	0x0801b8b0

0801851c <__multiply>:
 801851c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018520:	4614      	mov	r4, r2
 8018522:	690a      	ldr	r2, [r1, #16]
 8018524:	6923      	ldr	r3, [r4, #16]
 8018526:	429a      	cmp	r2, r3
 8018528:	bfb8      	it	lt
 801852a:	460b      	movlt	r3, r1
 801852c:	460d      	mov	r5, r1
 801852e:	bfbc      	itt	lt
 8018530:	4625      	movlt	r5, r4
 8018532:	461c      	movlt	r4, r3
 8018534:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018538:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801853c:	68ab      	ldr	r3, [r5, #8]
 801853e:	6869      	ldr	r1, [r5, #4]
 8018540:	eb0a 0709 	add.w	r7, sl, r9
 8018544:	42bb      	cmp	r3, r7
 8018546:	b085      	sub	sp, #20
 8018548:	bfb8      	it	lt
 801854a:	3101      	addlt	r1, #1
 801854c:	f7ff fed4 	bl	80182f8 <_Balloc>
 8018550:	b930      	cbnz	r0, 8018560 <__multiply+0x44>
 8018552:	4602      	mov	r2, r0
 8018554:	4b42      	ldr	r3, [pc, #264]	; (8018660 <__multiply+0x144>)
 8018556:	4843      	ldr	r0, [pc, #268]	; (8018664 <__multiply+0x148>)
 8018558:	f240 115d 	movw	r1, #349	; 0x15d
 801855c:	f7fe ff1c 	bl	8017398 <__assert_func>
 8018560:	f100 0614 	add.w	r6, r0, #20
 8018564:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018568:	4633      	mov	r3, r6
 801856a:	2200      	movs	r2, #0
 801856c:	4543      	cmp	r3, r8
 801856e:	d31e      	bcc.n	80185ae <__multiply+0x92>
 8018570:	f105 0c14 	add.w	ip, r5, #20
 8018574:	f104 0314 	add.w	r3, r4, #20
 8018578:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801857c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018580:	9202      	str	r2, [sp, #8]
 8018582:	ebac 0205 	sub.w	r2, ip, r5
 8018586:	3a15      	subs	r2, #21
 8018588:	f022 0203 	bic.w	r2, r2, #3
 801858c:	3204      	adds	r2, #4
 801858e:	f105 0115 	add.w	r1, r5, #21
 8018592:	458c      	cmp	ip, r1
 8018594:	bf38      	it	cc
 8018596:	2204      	movcc	r2, #4
 8018598:	9201      	str	r2, [sp, #4]
 801859a:	9a02      	ldr	r2, [sp, #8]
 801859c:	9303      	str	r3, [sp, #12]
 801859e:	429a      	cmp	r2, r3
 80185a0:	d808      	bhi.n	80185b4 <__multiply+0x98>
 80185a2:	2f00      	cmp	r7, #0
 80185a4:	dc55      	bgt.n	8018652 <__multiply+0x136>
 80185a6:	6107      	str	r7, [r0, #16]
 80185a8:	b005      	add	sp, #20
 80185aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185ae:	f843 2b04 	str.w	r2, [r3], #4
 80185b2:	e7db      	b.n	801856c <__multiply+0x50>
 80185b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80185b8:	f1ba 0f00 	cmp.w	sl, #0
 80185bc:	d020      	beq.n	8018600 <__multiply+0xe4>
 80185be:	f105 0e14 	add.w	lr, r5, #20
 80185c2:	46b1      	mov	r9, r6
 80185c4:	2200      	movs	r2, #0
 80185c6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80185ca:	f8d9 b000 	ldr.w	fp, [r9]
 80185ce:	b2a1      	uxth	r1, r4
 80185d0:	fa1f fb8b 	uxth.w	fp, fp
 80185d4:	fb0a b101 	mla	r1, sl, r1, fp
 80185d8:	4411      	add	r1, r2
 80185da:	f8d9 2000 	ldr.w	r2, [r9]
 80185de:	0c24      	lsrs	r4, r4, #16
 80185e0:	0c12      	lsrs	r2, r2, #16
 80185e2:	fb0a 2404 	mla	r4, sl, r4, r2
 80185e6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80185ea:	b289      	uxth	r1, r1
 80185ec:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80185f0:	45f4      	cmp	ip, lr
 80185f2:	f849 1b04 	str.w	r1, [r9], #4
 80185f6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80185fa:	d8e4      	bhi.n	80185c6 <__multiply+0xaa>
 80185fc:	9901      	ldr	r1, [sp, #4]
 80185fe:	5072      	str	r2, [r6, r1]
 8018600:	9a03      	ldr	r2, [sp, #12]
 8018602:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018606:	3304      	adds	r3, #4
 8018608:	f1b9 0f00 	cmp.w	r9, #0
 801860c:	d01f      	beq.n	801864e <__multiply+0x132>
 801860e:	6834      	ldr	r4, [r6, #0]
 8018610:	f105 0114 	add.w	r1, r5, #20
 8018614:	46b6      	mov	lr, r6
 8018616:	f04f 0a00 	mov.w	sl, #0
 801861a:	880a      	ldrh	r2, [r1, #0]
 801861c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018620:	fb09 b202 	mla	r2, r9, r2, fp
 8018624:	4492      	add	sl, r2
 8018626:	b2a4      	uxth	r4, r4
 8018628:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801862c:	f84e 4b04 	str.w	r4, [lr], #4
 8018630:	f851 4b04 	ldr.w	r4, [r1], #4
 8018634:	f8be 2000 	ldrh.w	r2, [lr]
 8018638:	0c24      	lsrs	r4, r4, #16
 801863a:	fb09 2404 	mla	r4, r9, r4, r2
 801863e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018642:	458c      	cmp	ip, r1
 8018644:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018648:	d8e7      	bhi.n	801861a <__multiply+0xfe>
 801864a:	9a01      	ldr	r2, [sp, #4]
 801864c:	50b4      	str	r4, [r6, r2]
 801864e:	3604      	adds	r6, #4
 8018650:	e7a3      	b.n	801859a <__multiply+0x7e>
 8018652:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018656:	2b00      	cmp	r3, #0
 8018658:	d1a5      	bne.n	80185a6 <__multiply+0x8a>
 801865a:	3f01      	subs	r7, #1
 801865c:	e7a1      	b.n	80185a2 <__multiply+0x86>
 801865e:	bf00      	nop
 8018660:	0801b83c 	.word	0x0801b83c
 8018664:	0801b8b0 	.word	0x0801b8b0

08018668 <__pow5mult>:
 8018668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801866c:	4615      	mov	r5, r2
 801866e:	f012 0203 	ands.w	r2, r2, #3
 8018672:	4606      	mov	r6, r0
 8018674:	460f      	mov	r7, r1
 8018676:	d007      	beq.n	8018688 <__pow5mult+0x20>
 8018678:	4c25      	ldr	r4, [pc, #148]	; (8018710 <__pow5mult+0xa8>)
 801867a:	3a01      	subs	r2, #1
 801867c:	2300      	movs	r3, #0
 801867e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018682:	f7ff fe9b 	bl	80183bc <__multadd>
 8018686:	4607      	mov	r7, r0
 8018688:	10ad      	asrs	r5, r5, #2
 801868a:	d03d      	beq.n	8018708 <__pow5mult+0xa0>
 801868c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801868e:	b97c      	cbnz	r4, 80186b0 <__pow5mult+0x48>
 8018690:	2010      	movs	r0, #16
 8018692:	f7ff fe29 	bl	80182e8 <malloc>
 8018696:	4602      	mov	r2, r0
 8018698:	6270      	str	r0, [r6, #36]	; 0x24
 801869a:	b928      	cbnz	r0, 80186a8 <__pow5mult+0x40>
 801869c:	4b1d      	ldr	r3, [pc, #116]	; (8018714 <__pow5mult+0xac>)
 801869e:	481e      	ldr	r0, [pc, #120]	; (8018718 <__pow5mult+0xb0>)
 80186a0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80186a4:	f7fe fe78 	bl	8017398 <__assert_func>
 80186a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80186ac:	6004      	str	r4, [r0, #0]
 80186ae:	60c4      	str	r4, [r0, #12]
 80186b0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80186b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80186b8:	b94c      	cbnz	r4, 80186ce <__pow5mult+0x66>
 80186ba:	f240 2171 	movw	r1, #625	; 0x271
 80186be:	4630      	mov	r0, r6
 80186c0:	f7ff ff16 	bl	80184f0 <__i2b>
 80186c4:	2300      	movs	r3, #0
 80186c6:	f8c8 0008 	str.w	r0, [r8, #8]
 80186ca:	4604      	mov	r4, r0
 80186cc:	6003      	str	r3, [r0, #0]
 80186ce:	f04f 0900 	mov.w	r9, #0
 80186d2:	07eb      	lsls	r3, r5, #31
 80186d4:	d50a      	bpl.n	80186ec <__pow5mult+0x84>
 80186d6:	4639      	mov	r1, r7
 80186d8:	4622      	mov	r2, r4
 80186da:	4630      	mov	r0, r6
 80186dc:	f7ff ff1e 	bl	801851c <__multiply>
 80186e0:	4639      	mov	r1, r7
 80186e2:	4680      	mov	r8, r0
 80186e4:	4630      	mov	r0, r6
 80186e6:	f7ff fe47 	bl	8018378 <_Bfree>
 80186ea:	4647      	mov	r7, r8
 80186ec:	106d      	asrs	r5, r5, #1
 80186ee:	d00b      	beq.n	8018708 <__pow5mult+0xa0>
 80186f0:	6820      	ldr	r0, [r4, #0]
 80186f2:	b938      	cbnz	r0, 8018704 <__pow5mult+0x9c>
 80186f4:	4622      	mov	r2, r4
 80186f6:	4621      	mov	r1, r4
 80186f8:	4630      	mov	r0, r6
 80186fa:	f7ff ff0f 	bl	801851c <__multiply>
 80186fe:	6020      	str	r0, [r4, #0]
 8018700:	f8c0 9000 	str.w	r9, [r0]
 8018704:	4604      	mov	r4, r0
 8018706:	e7e4      	b.n	80186d2 <__pow5mult+0x6a>
 8018708:	4638      	mov	r0, r7
 801870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801870e:	bf00      	nop
 8018710:	0801ba00 	.word	0x0801ba00
 8018714:	0801b5bc 	.word	0x0801b5bc
 8018718:	0801b8b0 	.word	0x0801b8b0

0801871c <__lshift>:
 801871c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018720:	460c      	mov	r4, r1
 8018722:	6849      	ldr	r1, [r1, #4]
 8018724:	6923      	ldr	r3, [r4, #16]
 8018726:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801872a:	68a3      	ldr	r3, [r4, #8]
 801872c:	4607      	mov	r7, r0
 801872e:	4691      	mov	r9, r2
 8018730:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018734:	f108 0601 	add.w	r6, r8, #1
 8018738:	42b3      	cmp	r3, r6
 801873a:	db0b      	blt.n	8018754 <__lshift+0x38>
 801873c:	4638      	mov	r0, r7
 801873e:	f7ff fddb 	bl	80182f8 <_Balloc>
 8018742:	4605      	mov	r5, r0
 8018744:	b948      	cbnz	r0, 801875a <__lshift+0x3e>
 8018746:	4602      	mov	r2, r0
 8018748:	4b28      	ldr	r3, [pc, #160]	; (80187ec <__lshift+0xd0>)
 801874a:	4829      	ldr	r0, [pc, #164]	; (80187f0 <__lshift+0xd4>)
 801874c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8018750:	f7fe fe22 	bl	8017398 <__assert_func>
 8018754:	3101      	adds	r1, #1
 8018756:	005b      	lsls	r3, r3, #1
 8018758:	e7ee      	b.n	8018738 <__lshift+0x1c>
 801875a:	2300      	movs	r3, #0
 801875c:	f100 0114 	add.w	r1, r0, #20
 8018760:	f100 0210 	add.w	r2, r0, #16
 8018764:	4618      	mov	r0, r3
 8018766:	4553      	cmp	r3, sl
 8018768:	db33      	blt.n	80187d2 <__lshift+0xb6>
 801876a:	6920      	ldr	r0, [r4, #16]
 801876c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018770:	f104 0314 	add.w	r3, r4, #20
 8018774:	f019 091f 	ands.w	r9, r9, #31
 8018778:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801877c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018780:	d02b      	beq.n	80187da <__lshift+0xbe>
 8018782:	f1c9 0e20 	rsb	lr, r9, #32
 8018786:	468a      	mov	sl, r1
 8018788:	2200      	movs	r2, #0
 801878a:	6818      	ldr	r0, [r3, #0]
 801878c:	fa00 f009 	lsl.w	r0, r0, r9
 8018790:	4302      	orrs	r2, r0
 8018792:	f84a 2b04 	str.w	r2, [sl], #4
 8018796:	f853 2b04 	ldr.w	r2, [r3], #4
 801879a:	459c      	cmp	ip, r3
 801879c:	fa22 f20e 	lsr.w	r2, r2, lr
 80187a0:	d8f3      	bhi.n	801878a <__lshift+0x6e>
 80187a2:	ebac 0304 	sub.w	r3, ip, r4
 80187a6:	3b15      	subs	r3, #21
 80187a8:	f023 0303 	bic.w	r3, r3, #3
 80187ac:	3304      	adds	r3, #4
 80187ae:	f104 0015 	add.w	r0, r4, #21
 80187b2:	4584      	cmp	ip, r0
 80187b4:	bf38      	it	cc
 80187b6:	2304      	movcc	r3, #4
 80187b8:	50ca      	str	r2, [r1, r3]
 80187ba:	b10a      	cbz	r2, 80187c0 <__lshift+0xa4>
 80187bc:	f108 0602 	add.w	r6, r8, #2
 80187c0:	3e01      	subs	r6, #1
 80187c2:	4638      	mov	r0, r7
 80187c4:	612e      	str	r6, [r5, #16]
 80187c6:	4621      	mov	r1, r4
 80187c8:	f7ff fdd6 	bl	8018378 <_Bfree>
 80187cc:	4628      	mov	r0, r5
 80187ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80187d6:	3301      	adds	r3, #1
 80187d8:	e7c5      	b.n	8018766 <__lshift+0x4a>
 80187da:	3904      	subs	r1, #4
 80187dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80187e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80187e4:	459c      	cmp	ip, r3
 80187e6:	d8f9      	bhi.n	80187dc <__lshift+0xc0>
 80187e8:	e7ea      	b.n	80187c0 <__lshift+0xa4>
 80187ea:	bf00      	nop
 80187ec:	0801b83c 	.word	0x0801b83c
 80187f0:	0801b8b0 	.word	0x0801b8b0

080187f4 <__mcmp>:
 80187f4:	b530      	push	{r4, r5, lr}
 80187f6:	6902      	ldr	r2, [r0, #16]
 80187f8:	690c      	ldr	r4, [r1, #16]
 80187fa:	1b12      	subs	r2, r2, r4
 80187fc:	d10e      	bne.n	801881c <__mcmp+0x28>
 80187fe:	f100 0314 	add.w	r3, r0, #20
 8018802:	3114      	adds	r1, #20
 8018804:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018808:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801880c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018810:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018814:	42a5      	cmp	r5, r4
 8018816:	d003      	beq.n	8018820 <__mcmp+0x2c>
 8018818:	d305      	bcc.n	8018826 <__mcmp+0x32>
 801881a:	2201      	movs	r2, #1
 801881c:	4610      	mov	r0, r2
 801881e:	bd30      	pop	{r4, r5, pc}
 8018820:	4283      	cmp	r3, r0
 8018822:	d3f3      	bcc.n	801880c <__mcmp+0x18>
 8018824:	e7fa      	b.n	801881c <__mcmp+0x28>
 8018826:	f04f 32ff 	mov.w	r2, #4294967295
 801882a:	e7f7      	b.n	801881c <__mcmp+0x28>

0801882c <__mdiff>:
 801882c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018830:	460c      	mov	r4, r1
 8018832:	4606      	mov	r6, r0
 8018834:	4611      	mov	r1, r2
 8018836:	4620      	mov	r0, r4
 8018838:	4617      	mov	r7, r2
 801883a:	f7ff ffdb 	bl	80187f4 <__mcmp>
 801883e:	1e05      	subs	r5, r0, #0
 8018840:	d110      	bne.n	8018864 <__mdiff+0x38>
 8018842:	4629      	mov	r1, r5
 8018844:	4630      	mov	r0, r6
 8018846:	f7ff fd57 	bl	80182f8 <_Balloc>
 801884a:	b930      	cbnz	r0, 801885a <__mdiff+0x2e>
 801884c:	4b39      	ldr	r3, [pc, #228]	; (8018934 <__mdiff+0x108>)
 801884e:	4602      	mov	r2, r0
 8018850:	f240 2132 	movw	r1, #562	; 0x232
 8018854:	4838      	ldr	r0, [pc, #224]	; (8018938 <__mdiff+0x10c>)
 8018856:	f7fe fd9f 	bl	8017398 <__assert_func>
 801885a:	2301      	movs	r3, #1
 801885c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018860:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018864:	bfa4      	itt	ge
 8018866:	463b      	movge	r3, r7
 8018868:	4627      	movge	r7, r4
 801886a:	4630      	mov	r0, r6
 801886c:	6879      	ldr	r1, [r7, #4]
 801886e:	bfa6      	itte	ge
 8018870:	461c      	movge	r4, r3
 8018872:	2500      	movge	r5, #0
 8018874:	2501      	movlt	r5, #1
 8018876:	f7ff fd3f 	bl	80182f8 <_Balloc>
 801887a:	b920      	cbnz	r0, 8018886 <__mdiff+0x5a>
 801887c:	4b2d      	ldr	r3, [pc, #180]	; (8018934 <__mdiff+0x108>)
 801887e:	4602      	mov	r2, r0
 8018880:	f44f 7110 	mov.w	r1, #576	; 0x240
 8018884:	e7e6      	b.n	8018854 <__mdiff+0x28>
 8018886:	693e      	ldr	r6, [r7, #16]
 8018888:	60c5      	str	r5, [r0, #12]
 801888a:	6925      	ldr	r5, [r4, #16]
 801888c:	f107 0114 	add.w	r1, r7, #20
 8018890:	f104 0914 	add.w	r9, r4, #20
 8018894:	f100 0e14 	add.w	lr, r0, #20
 8018898:	f107 0210 	add.w	r2, r7, #16
 801889c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80188a0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80188a4:	46f2      	mov	sl, lr
 80188a6:	2700      	movs	r7, #0
 80188a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80188ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80188b0:	fa1f f883 	uxth.w	r8, r3
 80188b4:	fa17 f78b 	uxtah	r7, r7, fp
 80188b8:	0c1b      	lsrs	r3, r3, #16
 80188ba:	eba7 0808 	sub.w	r8, r7, r8
 80188be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80188c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80188c6:	fa1f f888 	uxth.w	r8, r8
 80188ca:	141f      	asrs	r7, r3, #16
 80188cc:	454d      	cmp	r5, r9
 80188ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80188d2:	f84a 3b04 	str.w	r3, [sl], #4
 80188d6:	d8e7      	bhi.n	80188a8 <__mdiff+0x7c>
 80188d8:	1b2b      	subs	r3, r5, r4
 80188da:	3b15      	subs	r3, #21
 80188dc:	f023 0303 	bic.w	r3, r3, #3
 80188e0:	3304      	adds	r3, #4
 80188e2:	3415      	adds	r4, #21
 80188e4:	42a5      	cmp	r5, r4
 80188e6:	bf38      	it	cc
 80188e8:	2304      	movcc	r3, #4
 80188ea:	4419      	add	r1, r3
 80188ec:	4473      	add	r3, lr
 80188ee:	469e      	mov	lr, r3
 80188f0:	460d      	mov	r5, r1
 80188f2:	4565      	cmp	r5, ip
 80188f4:	d30e      	bcc.n	8018914 <__mdiff+0xe8>
 80188f6:	f10c 0203 	add.w	r2, ip, #3
 80188fa:	1a52      	subs	r2, r2, r1
 80188fc:	f022 0203 	bic.w	r2, r2, #3
 8018900:	3903      	subs	r1, #3
 8018902:	458c      	cmp	ip, r1
 8018904:	bf38      	it	cc
 8018906:	2200      	movcc	r2, #0
 8018908:	441a      	add	r2, r3
 801890a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801890e:	b17b      	cbz	r3, 8018930 <__mdiff+0x104>
 8018910:	6106      	str	r6, [r0, #16]
 8018912:	e7a5      	b.n	8018860 <__mdiff+0x34>
 8018914:	f855 8b04 	ldr.w	r8, [r5], #4
 8018918:	fa17 f488 	uxtah	r4, r7, r8
 801891c:	1422      	asrs	r2, r4, #16
 801891e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8018922:	b2a4      	uxth	r4, r4
 8018924:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8018928:	f84e 4b04 	str.w	r4, [lr], #4
 801892c:	1417      	asrs	r7, r2, #16
 801892e:	e7e0      	b.n	80188f2 <__mdiff+0xc6>
 8018930:	3e01      	subs	r6, #1
 8018932:	e7ea      	b.n	801890a <__mdiff+0xde>
 8018934:	0801b83c 	.word	0x0801b83c
 8018938:	0801b8b0 	.word	0x0801b8b0

0801893c <__d2b>:
 801893c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018940:	4689      	mov	r9, r1
 8018942:	2101      	movs	r1, #1
 8018944:	ec57 6b10 	vmov	r6, r7, d0
 8018948:	4690      	mov	r8, r2
 801894a:	f7ff fcd5 	bl	80182f8 <_Balloc>
 801894e:	4604      	mov	r4, r0
 8018950:	b930      	cbnz	r0, 8018960 <__d2b+0x24>
 8018952:	4602      	mov	r2, r0
 8018954:	4b25      	ldr	r3, [pc, #148]	; (80189ec <__d2b+0xb0>)
 8018956:	4826      	ldr	r0, [pc, #152]	; (80189f0 <__d2b+0xb4>)
 8018958:	f240 310a 	movw	r1, #778	; 0x30a
 801895c:	f7fe fd1c 	bl	8017398 <__assert_func>
 8018960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8018964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018968:	bb35      	cbnz	r5, 80189b8 <__d2b+0x7c>
 801896a:	2e00      	cmp	r6, #0
 801896c:	9301      	str	r3, [sp, #4]
 801896e:	d028      	beq.n	80189c2 <__d2b+0x86>
 8018970:	4668      	mov	r0, sp
 8018972:	9600      	str	r6, [sp, #0]
 8018974:	f7ff fd8c 	bl	8018490 <__lo0bits>
 8018978:	9900      	ldr	r1, [sp, #0]
 801897a:	b300      	cbz	r0, 80189be <__d2b+0x82>
 801897c:	9a01      	ldr	r2, [sp, #4]
 801897e:	f1c0 0320 	rsb	r3, r0, #32
 8018982:	fa02 f303 	lsl.w	r3, r2, r3
 8018986:	430b      	orrs	r3, r1
 8018988:	40c2      	lsrs	r2, r0
 801898a:	6163      	str	r3, [r4, #20]
 801898c:	9201      	str	r2, [sp, #4]
 801898e:	9b01      	ldr	r3, [sp, #4]
 8018990:	61a3      	str	r3, [r4, #24]
 8018992:	2b00      	cmp	r3, #0
 8018994:	bf14      	ite	ne
 8018996:	2202      	movne	r2, #2
 8018998:	2201      	moveq	r2, #1
 801899a:	6122      	str	r2, [r4, #16]
 801899c:	b1d5      	cbz	r5, 80189d4 <__d2b+0x98>
 801899e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80189a2:	4405      	add	r5, r0
 80189a4:	f8c9 5000 	str.w	r5, [r9]
 80189a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80189ac:	f8c8 0000 	str.w	r0, [r8]
 80189b0:	4620      	mov	r0, r4
 80189b2:	b003      	add	sp, #12
 80189b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80189b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80189bc:	e7d5      	b.n	801896a <__d2b+0x2e>
 80189be:	6161      	str	r1, [r4, #20]
 80189c0:	e7e5      	b.n	801898e <__d2b+0x52>
 80189c2:	a801      	add	r0, sp, #4
 80189c4:	f7ff fd64 	bl	8018490 <__lo0bits>
 80189c8:	9b01      	ldr	r3, [sp, #4]
 80189ca:	6163      	str	r3, [r4, #20]
 80189cc:	2201      	movs	r2, #1
 80189ce:	6122      	str	r2, [r4, #16]
 80189d0:	3020      	adds	r0, #32
 80189d2:	e7e3      	b.n	801899c <__d2b+0x60>
 80189d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80189d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80189dc:	f8c9 0000 	str.w	r0, [r9]
 80189e0:	6918      	ldr	r0, [r3, #16]
 80189e2:	f7ff fd35 	bl	8018450 <__hi0bits>
 80189e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80189ea:	e7df      	b.n	80189ac <__d2b+0x70>
 80189ec:	0801b83c 	.word	0x0801b83c
 80189f0:	0801b8b0 	.word	0x0801b8b0

080189f4 <_calloc_r>:
 80189f4:	b513      	push	{r0, r1, r4, lr}
 80189f6:	434a      	muls	r2, r1
 80189f8:	4611      	mov	r1, r2
 80189fa:	9201      	str	r2, [sp, #4]
 80189fc:	f000 f85a 	bl	8018ab4 <_malloc_r>
 8018a00:	4604      	mov	r4, r0
 8018a02:	b118      	cbz	r0, 8018a0c <_calloc_r+0x18>
 8018a04:	9a01      	ldr	r2, [sp, #4]
 8018a06:	2100      	movs	r1, #0
 8018a08:	f7fd fecc 	bl	80167a4 <memset>
 8018a0c:	4620      	mov	r0, r4
 8018a0e:	b002      	add	sp, #8
 8018a10:	bd10      	pop	{r4, pc}
	...

08018a14 <_free_r>:
 8018a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018a16:	2900      	cmp	r1, #0
 8018a18:	d048      	beq.n	8018aac <_free_r+0x98>
 8018a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a1e:	9001      	str	r0, [sp, #4]
 8018a20:	2b00      	cmp	r3, #0
 8018a22:	f1a1 0404 	sub.w	r4, r1, #4
 8018a26:	bfb8      	it	lt
 8018a28:	18e4      	addlt	r4, r4, r3
 8018a2a:	f000 fdf5 	bl	8019618 <__malloc_lock>
 8018a2e:	4a20      	ldr	r2, [pc, #128]	; (8018ab0 <_free_r+0x9c>)
 8018a30:	9801      	ldr	r0, [sp, #4]
 8018a32:	6813      	ldr	r3, [r2, #0]
 8018a34:	4615      	mov	r5, r2
 8018a36:	b933      	cbnz	r3, 8018a46 <_free_r+0x32>
 8018a38:	6063      	str	r3, [r4, #4]
 8018a3a:	6014      	str	r4, [r2, #0]
 8018a3c:	b003      	add	sp, #12
 8018a3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018a42:	f000 bdef 	b.w	8019624 <__malloc_unlock>
 8018a46:	42a3      	cmp	r3, r4
 8018a48:	d90b      	bls.n	8018a62 <_free_r+0x4e>
 8018a4a:	6821      	ldr	r1, [r4, #0]
 8018a4c:	1862      	adds	r2, r4, r1
 8018a4e:	4293      	cmp	r3, r2
 8018a50:	bf04      	itt	eq
 8018a52:	681a      	ldreq	r2, [r3, #0]
 8018a54:	685b      	ldreq	r3, [r3, #4]
 8018a56:	6063      	str	r3, [r4, #4]
 8018a58:	bf04      	itt	eq
 8018a5a:	1852      	addeq	r2, r2, r1
 8018a5c:	6022      	streq	r2, [r4, #0]
 8018a5e:	602c      	str	r4, [r5, #0]
 8018a60:	e7ec      	b.n	8018a3c <_free_r+0x28>
 8018a62:	461a      	mov	r2, r3
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	b10b      	cbz	r3, 8018a6c <_free_r+0x58>
 8018a68:	42a3      	cmp	r3, r4
 8018a6a:	d9fa      	bls.n	8018a62 <_free_r+0x4e>
 8018a6c:	6811      	ldr	r1, [r2, #0]
 8018a6e:	1855      	adds	r5, r2, r1
 8018a70:	42a5      	cmp	r5, r4
 8018a72:	d10b      	bne.n	8018a8c <_free_r+0x78>
 8018a74:	6824      	ldr	r4, [r4, #0]
 8018a76:	4421      	add	r1, r4
 8018a78:	1854      	adds	r4, r2, r1
 8018a7a:	42a3      	cmp	r3, r4
 8018a7c:	6011      	str	r1, [r2, #0]
 8018a7e:	d1dd      	bne.n	8018a3c <_free_r+0x28>
 8018a80:	681c      	ldr	r4, [r3, #0]
 8018a82:	685b      	ldr	r3, [r3, #4]
 8018a84:	6053      	str	r3, [r2, #4]
 8018a86:	4421      	add	r1, r4
 8018a88:	6011      	str	r1, [r2, #0]
 8018a8a:	e7d7      	b.n	8018a3c <_free_r+0x28>
 8018a8c:	d902      	bls.n	8018a94 <_free_r+0x80>
 8018a8e:	230c      	movs	r3, #12
 8018a90:	6003      	str	r3, [r0, #0]
 8018a92:	e7d3      	b.n	8018a3c <_free_r+0x28>
 8018a94:	6825      	ldr	r5, [r4, #0]
 8018a96:	1961      	adds	r1, r4, r5
 8018a98:	428b      	cmp	r3, r1
 8018a9a:	bf04      	itt	eq
 8018a9c:	6819      	ldreq	r1, [r3, #0]
 8018a9e:	685b      	ldreq	r3, [r3, #4]
 8018aa0:	6063      	str	r3, [r4, #4]
 8018aa2:	bf04      	itt	eq
 8018aa4:	1949      	addeq	r1, r1, r5
 8018aa6:	6021      	streq	r1, [r4, #0]
 8018aa8:	6054      	str	r4, [r2, #4]
 8018aaa:	e7c7      	b.n	8018a3c <_free_r+0x28>
 8018aac:	b003      	add	sp, #12
 8018aae:	bd30      	pop	{r4, r5, pc}
 8018ab0:	200010ac 	.word	0x200010ac

08018ab4 <_malloc_r>:
 8018ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ab6:	1ccd      	adds	r5, r1, #3
 8018ab8:	f025 0503 	bic.w	r5, r5, #3
 8018abc:	3508      	adds	r5, #8
 8018abe:	2d0c      	cmp	r5, #12
 8018ac0:	bf38      	it	cc
 8018ac2:	250c      	movcc	r5, #12
 8018ac4:	2d00      	cmp	r5, #0
 8018ac6:	4606      	mov	r6, r0
 8018ac8:	db01      	blt.n	8018ace <_malloc_r+0x1a>
 8018aca:	42a9      	cmp	r1, r5
 8018acc:	d903      	bls.n	8018ad6 <_malloc_r+0x22>
 8018ace:	230c      	movs	r3, #12
 8018ad0:	6033      	str	r3, [r6, #0]
 8018ad2:	2000      	movs	r0, #0
 8018ad4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ad6:	f000 fd9f 	bl	8019618 <__malloc_lock>
 8018ada:	4921      	ldr	r1, [pc, #132]	; (8018b60 <_malloc_r+0xac>)
 8018adc:	680a      	ldr	r2, [r1, #0]
 8018ade:	4614      	mov	r4, r2
 8018ae0:	b99c      	cbnz	r4, 8018b0a <_malloc_r+0x56>
 8018ae2:	4f20      	ldr	r7, [pc, #128]	; (8018b64 <_malloc_r+0xb0>)
 8018ae4:	683b      	ldr	r3, [r7, #0]
 8018ae6:	b923      	cbnz	r3, 8018af2 <_malloc_r+0x3e>
 8018ae8:	4621      	mov	r1, r4
 8018aea:	4630      	mov	r0, r6
 8018aec:	f000 faf2 	bl	80190d4 <_sbrk_r>
 8018af0:	6038      	str	r0, [r7, #0]
 8018af2:	4629      	mov	r1, r5
 8018af4:	4630      	mov	r0, r6
 8018af6:	f000 faed 	bl	80190d4 <_sbrk_r>
 8018afa:	1c43      	adds	r3, r0, #1
 8018afc:	d123      	bne.n	8018b46 <_malloc_r+0x92>
 8018afe:	230c      	movs	r3, #12
 8018b00:	6033      	str	r3, [r6, #0]
 8018b02:	4630      	mov	r0, r6
 8018b04:	f000 fd8e 	bl	8019624 <__malloc_unlock>
 8018b08:	e7e3      	b.n	8018ad2 <_malloc_r+0x1e>
 8018b0a:	6823      	ldr	r3, [r4, #0]
 8018b0c:	1b5b      	subs	r3, r3, r5
 8018b0e:	d417      	bmi.n	8018b40 <_malloc_r+0x8c>
 8018b10:	2b0b      	cmp	r3, #11
 8018b12:	d903      	bls.n	8018b1c <_malloc_r+0x68>
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	441c      	add	r4, r3
 8018b18:	6025      	str	r5, [r4, #0]
 8018b1a:	e004      	b.n	8018b26 <_malloc_r+0x72>
 8018b1c:	6863      	ldr	r3, [r4, #4]
 8018b1e:	42a2      	cmp	r2, r4
 8018b20:	bf0c      	ite	eq
 8018b22:	600b      	streq	r3, [r1, #0]
 8018b24:	6053      	strne	r3, [r2, #4]
 8018b26:	4630      	mov	r0, r6
 8018b28:	f000 fd7c 	bl	8019624 <__malloc_unlock>
 8018b2c:	f104 000b 	add.w	r0, r4, #11
 8018b30:	1d23      	adds	r3, r4, #4
 8018b32:	f020 0007 	bic.w	r0, r0, #7
 8018b36:	1ac2      	subs	r2, r0, r3
 8018b38:	d0cc      	beq.n	8018ad4 <_malloc_r+0x20>
 8018b3a:	1a1b      	subs	r3, r3, r0
 8018b3c:	50a3      	str	r3, [r4, r2]
 8018b3e:	e7c9      	b.n	8018ad4 <_malloc_r+0x20>
 8018b40:	4622      	mov	r2, r4
 8018b42:	6864      	ldr	r4, [r4, #4]
 8018b44:	e7cc      	b.n	8018ae0 <_malloc_r+0x2c>
 8018b46:	1cc4      	adds	r4, r0, #3
 8018b48:	f024 0403 	bic.w	r4, r4, #3
 8018b4c:	42a0      	cmp	r0, r4
 8018b4e:	d0e3      	beq.n	8018b18 <_malloc_r+0x64>
 8018b50:	1a21      	subs	r1, r4, r0
 8018b52:	4630      	mov	r0, r6
 8018b54:	f000 fabe 	bl	80190d4 <_sbrk_r>
 8018b58:	3001      	adds	r0, #1
 8018b5a:	d1dd      	bne.n	8018b18 <_malloc_r+0x64>
 8018b5c:	e7cf      	b.n	8018afe <_malloc_r+0x4a>
 8018b5e:	bf00      	nop
 8018b60:	200010ac 	.word	0x200010ac
 8018b64:	200010b0 	.word	0x200010b0

08018b68 <__ssputs_r>:
 8018b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b6c:	688e      	ldr	r6, [r1, #8]
 8018b6e:	429e      	cmp	r6, r3
 8018b70:	4682      	mov	sl, r0
 8018b72:	460c      	mov	r4, r1
 8018b74:	4690      	mov	r8, r2
 8018b76:	461f      	mov	r7, r3
 8018b78:	d838      	bhi.n	8018bec <__ssputs_r+0x84>
 8018b7a:	898a      	ldrh	r2, [r1, #12]
 8018b7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018b80:	d032      	beq.n	8018be8 <__ssputs_r+0x80>
 8018b82:	6825      	ldr	r5, [r4, #0]
 8018b84:	6909      	ldr	r1, [r1, #16]
 8018b86:	eba5 0901 	sub.w	r9, r5, r1
 8018b8a:	6965      	ldr	r5, [r4, #20]
 8018b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018b90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018b94:	3301      	adds	r3, #1
 8018b96:	444b      	add	r3, r9
 8018b98:	106d      	asrs	r5, r5, #1
 8018b9a:	429d      	cmp	r5, r3
 8018b9c:	bf38      	it	cc
 8018b9e:	461d      	movcc	r5, r3
 8018ba0:	0553      	lsls	r3, r2, #21
 8018ba2:	d531      	bpl.n	8018c08 <__ssputs_r+0xa0>
 8018ba4:	4629      	mov	r1, r5
 8018ba6:	f7ff ff85 	bl	8018ab4 <_malloc_r>
 8018baa:	4606      	mov	r6, r0
 8018bac:	b950      	cbnz	r0, 8018bc4 <__ssputs_r+0x5c>
 8018bae:	230c      	movs	r3, #12
 8018bb0:	f8ca 3000 	str.w	r3, [sl]
 8018bb4:	89a3      	ldrh	r3, [r4, #12]
 8018bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018bba:	81a3      	strh	r3, [r4, #12]
 8018bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8018bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bc4:	6921      	ldr	r1, [r4, #16]
 8018bc6:	464a      	mov	r2, r9
 8018bc8:	f7fd fdde 	bl	8016788 <memcpy>
 8018bcc:	89a3      	ldrh	r3, [r4, #12]
 8018bce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018bd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018bd6:	81a3      	strh	r3, [r4, #12]
 8018bd8:	6126      	str	r6, [r4, #16]
 8018bda:	6165      	str	r5, [r4, #20]
 8018bdc:	444e      	add	r6, r9
 8018bde:	eba5 0509 	sub.w	r5, r5, r9
 8018be2:	6026      	str	r6, [r4, #0]
 8018be4:	60a5      	str	r5, [r4, #8]
 8018be6:	463e      	mov	r6, r7
 8018be8:	42be      	cmp	r6, r7
 8018bea:	d900      	bls.n	8018bee <__ssputs_r+0x86>
 8018bec:	463e      	mov	r6, r7
 8018bee:	4632      	mov	r2, r6
 8018bf0:	6820      	ldr	r0, [r4, #0]
 8018bf2:	4641      	mov	r1, r8
 8018bf4:	f000 fcf6 	bl	80195e4 <memmove>
 8018bf8:	68a3      	ldr	r3, [r4, #8]
 8018bfa:	6822      	ldr	r2, [r4, #0]
 8018bfc:	1b9b      	subs	r3, r3, r6
 8018bfe:	4432      	add	r2, r6
 8018c00:	60a3      	str	r3, [r4, #8]
 8018c02:	6022      	str	r2, [r4, #0]
 8018c04:	2000      	movs	r0, #0
 8018c06:	e7db      	b.n	8018bc0 <__ssputs_r+0x58>
 8018c08:	462a      	mov	r2, r5
 8018c0a:	f000 fd11 	bl	8019630 <_realloc_r>
 8018c0e:	4606      	mov	r6, r0
 8018c10:	2800      	cmp	r0, #0
 8018c12:	d1e1      	bne.n	8018bd8 <__ssputs_r+0x70>
 8018c14:	6921      	ldr	r1, [r4, #16]
 8018c16:	4650      	mov	r0, sl
 8018c18:	f7ff fefc 	bl	8018a14 <_free_r>
 8018c1c:	e7c7      	b.n	8018bae <__ssputs_r+0x46>
	...

08018c20 <_svfiprintf_r>:
 8018c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018c24:	4698      	mov	r8, r3
 8018c26:	898b      	ldrh	r3, [r1, #12]
 8018c28:	061b      	lsls	r3, r3, #24
 8018c2a:	b09d      	sub	sp, #116	; 0x74
 8018c2c:	4607      	mov	r7, r0
 8018c2e:	460d      	mov	r5, r1
 8018c30:	4614      	mov	r4, r2
 8018c32:	d50e      	bpl.n	8018c52 <_svfiprintf_r+0x32>
 8018c34:	690b      	ldr	r3, [r1, #16]
 8018c36:	b963      	cbnz	r3, 8018c52 <_svfiprintf_r+0x32>
 8018c38:	2140      	movs	r1, #64	; 0x40
 8018c3a:	f7ff ff3b 	bl	8018ab4 <_malloc_r>
 8018c3e:	6028      	str	r0, [r5, #0]
 8018c40:	6128      	str	r0, [r5, #16]
 8018c42:	b920      	cbnz	r0, 8018c4e <_svfiprintf_r+0x2e>
 8018c44:	230c      	movs	r3, #12
 8018c46:	603b      	str	r3, [r7, #0]
 8018c48:	f04f 30ff 	mov.w	r0, #4294967295
 8018c4c:	e0d1      	b.n	8018df2 <_svfiprintf_r+0x1d2>
 8018c4e:	2340      	movs	r3, #64	; 0x40
 8018c50:	616b      	str	r3, [r5, #20]
 8018c52:	2300      	movs	r3, #0
 8018c54:	9309      	str	r3, [sp, #36]	; 0x24
 8018c56:	2320      	movs	r3, #32
 8018c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8018c60:	2330      	movs	r3, #48	; 0x30
 8018c62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018e0c <_svfiprintf_r+0x1ec>
 8018c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018c6a:	f04f 0901 	mov.w	r9, #1
 8018c6e:	4623      	mov	r3, r4
 8018c70:	469a      	mov	sl, r3
 8018c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018c76:	b10a      	cbz	r2, 8018c7c <_svfiprintf_r+0x5c>
 8018c78:	2a25      	cmp	r2, #37	; 0x25
 8018c7a:	d1f9      	bne.n	8018c70 <_svfiprintf_r+0x50>
 8018c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8018c80:	d00b      	beq.n	8018c9a <_svfiprintf_r+0x7a>
 8018c82:	465b      	mov	r3, fp
 8018c84:	4622      	mov	r2, r4
 8018c86:	4629      	mov	r1, r5
 8018c88:	4638      	mov	r0, r7
 8018c8a:	f7ff ff6d 	bl	8018b68 <__ssputs_r>
 8018c8e:	3001      	adds	r0, #1
 8018c90:	f000 80aa 	beq.w	8018de8 <_svfiprintf_r+0x1c8>
 8018c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018c96:	445a      	add	r2, fp
 8018c98:	9209      	str	r2, [sp, #36]	; 0x24
 8018c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	f000 80a2 	beq.w	8018de8 <_svfiprintf_r+0x1c8>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8018caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018cae:	f10a 0a01 	add.w	sl, sl, #1
 8018cb2:	9304      	str	r3, [sp, #16]
 8018cb4:	9307      	str	r3, [sp, #28]
 8018cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018cba:	931a      	str	r3, [sp, #104]	; 0x68
 8018cbc:	4654      	mov	r4, sl
 8018cbe:	2205      	movs	r2, #5
 8018cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018cc4:	4851      	ldr	r0, [pc, #324]	; (8018e0c <_svfiprintf_r+0x1ec>)
 8018cc6:	f7e7 fa8b 	bl	80001e0 <memchr>
 8018cca:	9a04      	ldr	r2, [sp, #16]
 8018ccc:	b9d8      	cbnz	r0, 8018d06 <_svfiprintf_r+0xe6>
 8018cce:	06d0      	lsls	r0, r2, #27
 8018cd0:	bf44      	itt	mi
 8018cd2:	2320      	movmi	r3, #32
 8018cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018cd8:	0711      	lsls	r1, r2, #28
 8018cda:	bf44      	itt	mi
 8018cdc:	232b      	movmi	r3, #43	; 0x2b
 8018cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8018ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8018ce8:	d015      	beq.n	8018d16 <_svfiprintf_r+0xf6>
 8018cea:	9a07      	ldr	r2, [sp, #28]
 8018cec:	4654      	mov	r4, sl
 8018cee:	2000      	movs	r0, #0
 8018cf0:	f04f 0c0a 	mov.w	ip, #10
 8018cf4:	4621      	mov	r1, r4
 8018cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018cfa:	3b30      	subs	r3, #48	; 0x30
 8018cfc:	2b09      	cmp	r3, #9
 8018cfe:	d94e      	bls.n	8018d9e <_svfiprintf_r+0x17e>
 8018d00:	b1b0      	cbz	r0, 8018d30 <_svfiprintf_r+0x110>
 8018d02:	9207      	str	r2, [sp, #28]
 8018d04:	e014      	b.n	8018d30 <_svfiprintf_r+0x110>
 8018d06:	eba0 0308 	sub.w	r3, r0, r8
 8018d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8018d0e:	4313      	orrs	r3, r2
 8018d10:	9304      	str	r3, [sp, #16]
 8018d12:	46a2      	mov	sl, r4
 8018d14:	e7d2      	b.n	8018cbc <_svfiprintf_r+0x9c>
 8018d16:	9b03      	ldr	r3, [sp, #12]
 8018d18:	1d19      	adds	r1, r3, #4
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	9103      	str	r1, [sp, #12]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	bfbb      	ittet	lt
 8018d22:	425b      	neglt	r3, r3
 8018d24:	f042 0202 	orrlt.w	r2, r2, #2
 8018d28:	9307      	strge	r3, [sp, #28]
 8018d2a:	9307      	strlt	r3, [sp, #28]
 8018d2c:	bfb8      	it	lt
 8018d2e:	9204      	strlt	r2, [sp, #16]
 8018d30:	7823      	ldrb	r3, [r4, #0]
 8018d32:	2b2e      	cmp	r3, #46	; 0x2e
 8018d34:	d10c      	bne.n	8018d50 <_svfiprintf_r+0x130>
 8018d36:	7863      	ldrb	r3, [r4, #1]
 8018d38:	2b2a      	cmp	r3, #42	; 0x2a
 8018d3a:	d135      	bne.n	8018da8 <_svfiprintf_r+0x188>
 8018d3c:	9b03      	ldr	r3, [sp, #12]
 8018d3e:	1d1a      	adds	r2, r3, #4
 8018d40:	681b      	ldr	r3, [r3, #0]
 8018d42:	9203      	str	r2, [sp, #12]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	bfb8      	it	lt
 8018d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8018d4c:	3402      	adds	r4, #2
 8018d4e:	9305      	str	r3, [sp, #20]
 8018d50:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018e1c <_svfiprintf_r+0x1fc>
 8018d54:	7821      	ldrb	r1, [r4, #0]
 8018d56:	2203      	movs	r2, #3
 8018d58:	4650      	mov	r0, sl
 8018d5a:	f7e7 fa41 	bl	80001e0 <memchr>
 8018d5e:	b140      	cbz	r0, 8018d72 <_svfiprintf_r+0x152>
 8018d60:	2340      	movs	r3, #64	; 0x40
 8018d62:	eba0 000a 	sub.w	r0, r0, sl
 8018d66:	fa03 f000 	lsl.w	r0, r3, r0
 8018d6a:	9b04      	ldr	r3, [sp, #16]
 8018d6c:	4303      	orrs	r3, r0
 8018d6e:	3401      	adds	r4, #1
 8018d70:	9304      	str	r3, [sp, #16]
 8018d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018d76:	4826      	ldr	r0, [pc, #152]	; (8018e10 <_svfiprintf_r+0x1f0>)
 8018d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018d7c:	2206      	movs	r2, #6
 8018d7e:	f7e7 fa2f 	bl	80001e0 <memchr>
 8018d82:	2800      	cmp	r0, #0
 8018d84:	d038      	beq.n	8018df8 <_svfiprintf_r+0x1d8>
 8018d86:	4b23      	ldr	r3, [pc, #140]	; (8018e14 <_svfiprintf_r+0x1f4>)
 8018d88:	bb1b      	cbnz	r3, 8018dd2 <_svfiprintf_r+0x1b2>
 8018d8a:	9b03      	ldr	r3, [sp, #12]
 8018d8c:	3307      	adds	r3, #7
 8018d8e:	f023 0307 	bic.w	r3, r3, #7
 8018d92:	3308      	adds	r3, #8
 8018d94:	9303      	str	r3, [sp, #12]
 8018d96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018d98:	4433      	add	r3, r6
 8018d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8018d9c:	e767      	b.n	8018c6e <_svfiprintf_r+0x4e>
 8018d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8018da2:	460c      	mov	r4, r1
 8018da4:	2001      	movs	r0, #1
 8018da6:	e7a5      	b.n	8018cf4 <_svfiprintf_r+0xd4>
 8018da8:	2300      	movs	r3, #0
 8018daa:	3401      	adds	r4, #1
 8018dac:	9305      	str	r3, [sp, #20]
 8018dae:	4619      	mov	r1, r3
 8018db0:	f04f 0c0a 	mov.w	ip, #10
 8018db4:	4620      	mov	r0, r4
 8018db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018dba:	3a30      	subs	r2, #48	; 0x30
 8018dbc:	2a09      	cmp	r2, #9
 8018dbe:	d903      	bls.n	8018dc8 <_svfiprintf_r+0x1a8>
 8018dc0:	2b00      	cmp	r3, #0
 8018dc2:	d0c5      	beq.n	8018d50 <_svfiprintf_r+0x130>
 8018dc4:	9105      	str	r1, [sp, #20]
 8018dc6:	e7c3      	b.n	8018d50 <_svfiprintf_r+0x130>
 8018dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8018dcc:	4604      	mov	r4, r0
 8018dce:	2301      	movs	r3, #1
 8018dd0:	e7f0      	b.n	8018db4 <_svfiprintf_r+0x194>
 8018dd2:	ab03      	add	r3, sp, #12
 8018dd4:	9300      	str	r3, [sp, #0]
 8018dd6:	462a      	mov	r2, r5
 8018dd8:	4b0f      	ldr	r3, [pc, #60]	; (8018e18 <_svfiprintf_r+0x1f8>)
 8018dda:	a904      	add	r1, sp, #16
 8018ddc:	4638      	mov	r0, r7
 8018dde:	f7fd fd89 	bl	80168f4 <_printf_float>
 8018de2:	1c42      	adds	r2, r0, #1
 8018de4:	4606      	mov	r6, r0
 8018de6:	d1d6      	bne.n	8018d96 <_svfiprintf_r+0x176>
 8018de8:	89ab      	ldrh	r3, [r5, #12]
 8018dea:	065b      	lsls	r3, r3, #25
 8018dec:	f53f af2c 	bmi.w	8018c48 <_svfiprintf_r+0x28>
 8018df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018df2:	b01d      	add	sp, #116	; 0x74
 8018df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018df8:	ab03      	add	r3, sp, #12
 8018dfa:	9300      	str	r3, [sp, #0]
 8018dfc:	462a      	mov	r2, r5
 8018dfe:	4b06      	ldr	r3, [pc, #24]	; (8018e18 <_svfiprintf_r+0x1f8>)
 8018e00:	a904      	add	r1, sp, #16
 8018e02:	4638      	mov	r0, r7
 8018e04:	f7fe f81a 	bl	8016e3c <_printf_i>
 8018e08:	e7eb      	b.n	8018de2 <_svfiprintf_r+0x1c2>
 8018e0a:	bf00      	nop
 8018e0c:	0801ba0c 	.word	0x0801ba0c
 8018e10:	0801ba16 	.word	0x0801ba16
 8018e14:	080168f5 	.word	0x080168f5
 8018e18:	08018b69 	.word	0x08018b69
 8018e1c:	0801ba12 	.word	0x0801ba12

08018e20 <__sfputc_r>:
 8018e20:	6893      	ldr	r3, [r2, #8]
 8018e22:	3b01      	subs	r3, #1
 8018e24:	2b00      	cmp	r3, #0
 8018e26:	b410      	push	{r4}
 8018e28:	6093      	str	r3, [r2, #8]
 8018e2a:	da08      	bge.n	8018e3e <__sfputc_r+0x1e>
 8018e2c:	6994      	ldr	r4, [r2, #24]
 8018e2e:	42a3      	cmp	r3, r4
 8018e30:	db01      	blt.n	8018e36 <__sfputc_r+0x16>
 8018e32:	290a      	cmp	r1, #10
 8018e34:	d103      	bne.n	8018e3e <__sfputc_r+0x1e>
 8018e36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e3a:	f000 b99f 	b.w	801917c <__swbuf_r>
 8018e3e:	6813      	ldr	r3, [r2, #0]
 8018e40:	1c58      	adds	r0, r3, #1
 8018e42:	6010      	str	r0, [r2, #0]
 8018e44:	7019      	strb	r1, [r3, #0]
 8018e46:	4608      	mov	r0, r1
 8018e48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018e4c:	4770      	bx	lr

08018e4e <__sfputs_r>:
 8018e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018e50:	4606      	mov	r6, r0
 8018e52:	460f      	mov	r7, r1
 8018e54:	4614      	mov	r4, r2
 8018e56:	18d5      	adds	r5, r2, r3
 8018e58:	42ac      	cmp	r4, r5
 8018e5a:	d101      	bne.n	8018e60 <__sfputs_r+0x12>
 8018e5c:	2000      	movs	r0, #0
 8018e5e:	e007      	b.n	8018e70 <__sfputs_r+0x22>
 8018e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018e64:	463a      	mov	r2, r7
 8018e66:	4630      	mov	r0, r6
 8018e68:	f7ff ffda 	bl	8018e20 <__sfputc_r>
 8018e6c:	1c43      	adds	r3, r0, #1
 8018e6e:	d1f3      	bne.n	8018e58 <__sfputs_r+0xa>
 8018e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018e74 <_vfiprintf_r>:
 8018e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e78:	460d      	mov	r5, r1
 8018e7a:	b09d      	sub	sp, #116	; 0x74
 8018e7c:	4614      	mov	r4, r2
 8018e7e:	4698      	mov	r8, r3
 8018e80:	4606      	mov	r6, r0
 8018e82:	b118      	cbz	r0, 8018e8c <_vfiprintf_r+0x18>
 8018e84:	6983      	ldr	r3, [r0, #24]
 8018e86:	b90b      	cbnz	r3, 8018e8c <_vfiprintf_r+0x18>
 8018e88:	f7ff f976 	bl	8018178 <__sinit>
 8018e8c:	4b89      	ldr	r3, [pc, #548]	; (80190b4 <_vfiprintf_r+0x240>)
 8018e8e:	429d      	cmp	r5, r3
 8018e90:	d11b      	bne.n	8018eca <_vfiprintf_r+0x56>
 8018e92:	6875      	ldr	r5, [r6, #4]
 8018e94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e96:	07d9      	lsls	r1, r3, #31
 8018e98:	d405      	bmi.n	8018ea6 <_vfiprintf_r+0x32>
 8018e9a:	89ab      	ldrh	r3, [r5, #12]
 8018e9c:	059a      	lsls	r2, r3, #22
 8018e9e:	d402      	bmi.n	8018ea6 <_vfiprintf_r+0x32>
 8018ea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018ea2:	f7ff fa1e 	bl	80182e2 <__retarget_lock_acquire_recursive>
 8018ea6:	89ab      	ldrh	r3, [r5, #12]
 8018ea8:	071b      	lsls	r3, r3, #28
 8018eaa:	d501      	bpl.n	8018eb0 <_vfiprintf_r+0x3c>
 8018eac:	692b      	ldr	r3, [r5, #16]
 8018eae:	b9eb      	cbnz	r3, 8018eec <_vfiprintf_r+0x78>
 8018eb0:	4629      	mov	r1, r5
 8018eb2:	4630      	mov	r0, r6
 8018eb4:	f000 f9c6 	bl	8019244 <__swsetup_r>
 8018eb8:	b1c0      	cbz	r0, 8018eec <_vfiprintf_r+0x78>
 8018eba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ebc:	07dc      	lsls	r4, r3, #31
 8018ebe:	d50e      	bpl.n	8018ede <_vfiprintf_r+0x6a>
 8018ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8018ec4:	b01d      	add	sp, #116	; 0x74
 8018ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eca:	4b7b      	ldr	r3, [pc, #492]	; (80190b8 <_vfiprintf_r+0x244>)
 8018ecc:	429d      	cmp	r5, r3
 8018ece:	d101      	bne.n	8018ed4 <_vfiprintf_r+0x60>
 8018ed0:	68b5      	ldr	r5, [r6, #8]
 8018ed2:	e7df      	b.n	8018e94 <_vfiprintf_r+0x20>
 8018ed4:	4b79      	ldr	r3, [pc, #484]	; (80190bc <_vfiprintf_r+0x248>)
 8018ed6:	429d      	cmp	r5, r3
 8018ed8:	bf08      	it	eq
 8018eda:	68f5      	ldreq	r5, [r6, #12]
 8018edc:	e7da      	b.n	8018e94 <_vfiprintf_r+0x20>
 8018ede:	89ab      	ldrh	r3, [r5, #12]
 8018ee0:	0598      	lsls	r0, r3, #22
 8018ee2:	d4ed      	bmi.n	8018ec0 <_vfiprintf_r+0x4c>
 8018ee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018ee6:	f7ff f9fd 	bl	80182e4 <__retarget_lock_release_recursive>
 8018eea:	e7e9      	b.n	8018ec0 <_vfiprintf_r+0x4c>
 8018eec:	2300      	movs	r3, #0
 8018eee:	9309      	str	r3, [sp, #36]	; 0x24
 8018ef0:	2320      	movs	r3, #32
 8018ef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8018efa:	2330      	movs	r3, #48	; 0x30
 8018efc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80190c0 <_vfiprintf_r+0x24c>
 8018f00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018f04:	f04f 0901 	mov.w	r9, #1
 8018f08:	4623      	mov	r3, r4
 8018f0a:	469a      	mov	sl, r3
 8018f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018f10:	b10a      	cbz	r2, 8018f16 <_vfiprintf_r+0xa2>
 8018f12:	2a25      	cmp	r2, #37	; 0x25
 8018f14:	d1f9      	bne.n	8018f0a <_vfiprintf_r+0x96>
 8018f16:	ebba 0b04 	subs.w	fp, sl, r4
 8018f1a:	d00b      	beq.n	8018f34 <_vfiprintf_r+0xc0>
 8018f1c:	465b      	mov	r3, fp
 8018f1e:	4622      	mov	r2, r4
 8018f20:	4629      	mov	r1, r5
 8018f22:	4630      	mov	r0, r6
 8018f24:	f7ff ff93 	bl	8018e4e <__sfputs_r>
 8018f28:	3001      	adds	r0, #1
 8018f2a:	f000 80aa 	beq.w	8019082 <_vfiprintf_r+0x20e>
 8018f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f30:	445a      	add	r2, fp
 8018f32:	9209      	str	r2, [sp, #36]	; 0x24
 8018f34:	f89a 3000 	ldrb.w	r3, [sl]
 8018f38:	2b00      	cmp	r3, #0
 8018f3a:	f000 80a2 	beq.w	8019082 <_vfiprintf_r+0x20e>
 8018f3e:	2300      	movs	r3, #0
 8018f40:	f04f 32ff 	mov.w	r2, #4294967295
 8018f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018f48:	f10a 0a01 	add.w	sl, sl, #1
 8018f4c:	9304      	str	r3, [sp, #16]
 8018f4e:	9307      	str	r3, [sp, #28]
 8018f50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018f54:	931a      	str	r3, [sp, #104]	; 0x68
 8018f56:	4654      	mov	r4, sl
 8018f58:	2205      	movs	r2, #5
 8018f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f5e:	4858      	ldr	r0, [pc, #352]	; (80190c0 <_vfiprintf_r+0x24c>)
 8018f60:	f7e7 f93e 	bl	80001e0 <memchr>
 8018f64:	9a04      	ldr	r2, [sp, #16]
 8018f66:	b9d8      	cbnz	r0, 8018fa0 <_vfiprintf_r+0x12c>
 8018f68:	06d1      	lsls	r1, r2, #27
 8018f6a:	bf44      	itt	mi
 8018f6c:	2320      	movmi	r3, #32
 8018f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f72:	0713      	lsls	r3, r2, #28
 8018f74:	bf44      	itt	mi
 8018f76:	232b      	movmi	r3, #43	; 0x2b
 8018f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8018f80:	2b2a      	cmp	r3, #42	; 0x2a
 8018f82:	d015      	beq.n	8018fb0 <_vfiprintf_r+0x13c>
 8018f84:	9a07      	ldr	r2, [sp, #28]
 8018f86:	4654      	mov	r4, sl
 8018f88:	2000      	movs	r0, #0
 8018f8a:	f04f 0c0a 	mov.w	ip, #10
 8018f8e:	4621      	mov	r1, r4
 8018f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f94:	3b30      	subs	r3, #48	; 0x30
 8018f96:	2b09      	cmp	r3, #9
 8018f98:	d94e      	bls.n	8019038 <_vfiprintf_r+0x1c4>
 8018f9a:	b1b0      	cbz	r0, 8018fca <_vfiprintf_r+0x156>
 8018f9c:	9207      	str	r2, [sp, #28]
 8018f9e:	e014      	b.n	8018fca <_vfiprintf_r+0x156>
 8018fa0:	eba0 0308 	sub.w	r3, r0, r8
 8018fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8018fa8:	4313      	orrs	r3, r2
 8018faa:	9304      	str	r3, [sp, #16]
 8018fac:	46a2      	mov	sl, r4
 8018fae:	e7d2      	b.n	8018f56 <_vfiprintf_r+0xe2>
 8018fb0:	9b03      	ldr	r3, [sp, #12]
 8018fb2:	1d19      	adds	r1, r3, #4
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	9103      	str	r1, [sp, #12]
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	bfbb      	ittet	lt
 8018fbc:	425b      	neglt	r3, r3
 8018fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8018fc2:	9307      	strge	r3, [sp, #28]
 8018fc4:	9307      	strlt	r3, [sp, #28]
 8018fc6:	bfb8      	it	lt
 8018fc8:	9204      	strlt	r2, [sp, #16]
 8018fca:	7823      	ldrb	r3, [r4, #0]
 8018fcc:	2b2e      	cmp	r3, #46	; 0x2e
 8018fce:	d10c      	bne.n	8018fea <_vfiprintf_r+0x176>
 8018fd0:	7863      	ldrb	r3, [r4, #1]
 8018fd2:	2b2a      	cmp	r3, #42	; 0x2a
 8018fd4:	d135      	bne.n	8019042 <_vfiprintf_r+0x1ce>
 8018fd6:	9b03      	ldr	r3, [sp, #12]
 8018fd8:	1d1a      	adds	r2, r3, #4
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	9203      	str	r2, [sp, #12]
 8018fde:	2b00      	cmp	r3, #0
 8018fe0:	bfb8      	it	lt
 8018fe2:	f04f 33ff 	movlt.w	r3, #4294967295
 8018fe6:	3402      	adds	r4, #2
 8018fe8:	9305      	str	r3, [sp, #20]
 8018fea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80190d0 <_vfiprintf_r+0x25c>
 8018fee:	7821      	ldrb	r1, [r4, #0]
 8018ff0:	2203      	movs	r2, #3
 8018ff2:	4650      	mov	r0, sl
 8018ff4:	f7e7 f8f4 	bl	80001e0 <memchr>
 8018ff8:	b140      	cbz	r0, 801900c <_vfiprintf_r+0x198>
 8018ffa:	2340      	movs	r3, #64	; 0x40
 8018ffc:	eba0 000a 	sub.w	r0, r0, sl
 8019000:	fa03 f000 	lsl.w	r0, r3, r0
 8019004:	9b04      	ldr	r3, [sp, #16]
 8019006:	4303      	orrs	r3, r0
 8019008:	3401      	adds	r4, #1
 801900a:	9304      	str	r3, [sp, #16]
 801900c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019010:	482c      	ldr	r0, [pc, #176]	; (80190c4 <_vfiprintf_r+0x250>)
 8019012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019016:	2206      	movs	r2, #6
 8019018:	f7e7 f8e2 	bl	80001e0 <memchr>
 801901c:	2800      	cmp	r0, #0
 801901e:	d03f      	beq.n	80190a0 <_vfiprintf_r+0x22c>
 8019020:	4b29      	ldr	r3, [pc, #164]	; (80190c8 <_vfiprintf_r+0x254>)
 8019022:	bb1b      	cbnz	r3, 801906c <_vfiprintf_r+0x1f8>
 8019024:	9b03      	ldr	r3, [sp, #12]
 8019026:	3307      	adds	r3, #7
 8019028:	f023 0307 	bic.w	r3, r3, #7
 801902c:	3308      	adds	r3, #8
 801902e:	9303      	str	r3, [sp, #12]
 8019030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019032:	443b      	add	r3, r7
 8019034:	9309      	str	r3, [sp, #36]	; 0x24
 8019036:	e767      	b.n	8018f08 <_vfiprintf_r+0x94>
 8019038:	fb0c 3202 	mla	r2, ip, r2, r3
 801903c:	460c      	mov	r4, r1
 801903e:	2001      	movs	r0, #1
 8019040:	e7a5      	b.n	8018f8e <_vfiprintf_r+0x11a>
 8019042:	2300      	movs	r3, #0
 8019044:	3401      	adds	r4, #1
 8019046:	9305      	str	r3, [sp, #20]
 8019048:	4619      	mov	r1, r3
 801904a:	f04f 0c0a 	mov.w	ip, #10
 801904e:	4620      	mov	r0, r4
 8019050:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019054:	3a30      	subs	r2, #48	; 0x30
 8019056:	2a09      	cmp	r2, #9
 8019058:	d903      	bls.n	8019062 <_vfiprintf_r+0x1ee>
 801905a:	2b00      	cmp	r3, #0
 801905c:	d0c5      	beq.n	8018fea <_vfiprintf_r+0x176>
 801905e:	9105      	str	r1, [sp, #20]
 8019060:	e7c3      	b.n	8018fea <_vfiprintf_r+0x176>
 8019062:	fb0c 2101 	mla	r1, ip, r1, r2
 8019066:	4604      	mov	r4, r0
 8019068:	2301      	movs	r3, #1
 801906a:	e7f0      	b.n	801904e <_vfiprintf_r+0x1da>
 801906c:	ab03      	add	r3, sp, #12
 801906e:	9300      	str	r3, [sp, #0]
 8019070:	462a      	mov	r2, r5
 8019072:	4b16      	ldr	r3, [pc, #88]	; (80190cc <_vfiprintf_r+0x258>)
 8019074:	a904      	add	r1, sp, #16
 8019076:	4630      	mov	r0, r6
 8019078:	f7fd fc3c 	bl	80168f4 <_printf_float>
 801907c:	4607      	mov	r7, r0
 801907e:	1c78      	adds	r0, r7, #1
 8019080:	d1d6      	bne.n	8019030 <_vfiprintf_r+0x1bc>
 8019082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019084:	07d9      	lsls	r1, r3, #31
 8019086:	d405      	bmi.n	8019094 <_vfiprintf_r+0x220>
 8019088:	89ab      	ldrh	r3, [r5, #12]
 801908a:	059a      	lsls	r2, r3, #22
 801908c:	d402      	bmi.n	8019094 <_vfiprintf_r+0x220>
 801908e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019090:	f7ff f928 	bl	80182e4 <__retarget_lock_release_recursive>
 8019094:	89ab      	ldrh	r3, [r5, #12]
 8019096:	065b      	lsls	r3, r3, #25
 8019098:	f53f af12 	bmi.w	8018ec0 <_vfiprintf_r+0x4c>
 801909c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801909e:	e711      	b.n	8018ec4 <_vfiprintf_r+0x50>
 80190a0:	ab03      	add	r3, sp, #12
 80190a2:	9300      	str	r3, [sp, #0]
 80190a4:	462a      	mov	r2, r5
 80190a6:	4b09      	ldr	r3, [pc, #36]	; (80190cc <_vfiprintf_r+0x258>)
 80190a8:	a904      	add	r1, sp, #16
 80190aa:	4630      	mov	r0, r6
 80190ac:	f7fd fec6 	bl	8016e3c <_printf_i>
 80190b0:	e7e4      	b.n	801907c <_vfiprintf_r+0x208>
 80190b2:	bf00      	nop
 80190b4:	0801b870 	.word	0x0801b870
 80190b8:	0801b890 	.word	0x0801b890
 80190bc:	0801b850 	.word	0x0801b850
 80190c0:	0801ba0c 	.word	0x0801ba0c
 80190c4:	0801ba16 	.word	0x0801ba16
 80190c8:	080168f5 	.word	0x080168f5
 80190cc:	08018e4f 	.word	0x08018e4f
 80190d0:	0801ba12 	.word	0x0801ba12

080190d4 <_sbrk_r>:
 80190d4:	b538      	push	{r3, r4, r5, lr}
 80190d6:	4d06      	ldr	r5, [pc, #24]	; (80190f0 <_sbrk_r+0x1c>)
 80190d8:	2300      	movs	r3, #0
 80190da:	4604      	mov	r4, r0
 80190dc:	4608      	mov	r0, r1
 80190de:	602b      	str	r3, [r5, #0]
 80190e0:	f7f0 fd5e 	bl	8009ba0 <_sbrk>
 80190e4:	1c43      	adds	r3, r0, #1
 80190e6:	d102      	bne.n	80190ee <_sbrk_r+0x1a>
 80190e8:	682b      	ldr	r3, [r5, #0]
 80190ea:	b103      	cbz	r3, 80190ee <_sbrk_r+0x1a>
 80190ec:	6023      	str	r3, [r4, #0]
 80190ee:	bd38      	pop	{r3, r4, r5, pc}
 80190f0:	20003d1c 	.word	0x20003d1c

080190f4 <__sread>:
 80190f4:	b510      	push	{r4, lr}
 80190f6:	460c      	mov	r4, r1
 80190f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80190fc:	f000 fabe 	bl	801967c <_read_r>
 8019100:	2800      	cmp	r0, #0
 8019102:	bfab      	itete	ge
 8019104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019106:	89a3      	ldrhlt	r3, [r4, #12]
 8019108:	181b      	addge	r3, r3, r0
 801910a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801910e:	bfac      	ite	ge
 8019110:	6563      	strge	r3, [r4, #84]	; 0x54
 8019112:	81a3      	strhlt	r3, [r4, #12]
 8019114:	bd10      	pop	{r4, pc}

08019116 <__swrite>:
 8019116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801911a:	461f      	mov	r7, r3
 801911c:	898b      	ldrh	r3, [r1, #12]
 801911e:	05db      	lsls	r3, r3, #23
 8019120:	4605      	mov	r5, r0
 8019122:	460c      	mov	r4, r1
 8019124:	4616      	mov	r6, r2
 8019126:	d505      	bpl.n	8019134 <__swrite+0x1e>
 8019128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801912c:	2302      	movs	r3, #2
 801912e:	2200      	movs	r2, #0
 8019130:	f000 f9d0 	bl	80194d4 <_lseek_r>
 8019134:	89a3      	ldrh	r3, [r4, #12]
 8019136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801913a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801913e:	81a3      	strh	r3, [r4, #12]
 8019140:	4632      	mov	r2, r6
 8019142:	463b      	mov	r3, r7
 8019144:	4628      	mov	r0, r5
 8019146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801914a:	f000 b869 	b.w	8019220 <_write_r>

0801914e <__sseek>:
 801914e:	b510      	push	{r4, lr}
 8019150:	460c      	mov	r4, r1
 8019152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019156:	f000 f9bd 	bl	80194d4 <_lseek_r>
 801915a:	1c43      	adds	r3, r0, #1
 801915c:	89a3      	ldrh	r3, [r4, #12]
 801915e:	bf15      	itete	ne
 8019160:	6560      	strne	r0, [r4, #84]	; 0x54
 8019162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801916a:	81a3      	strheq	r3, [r4, #12]
 801916c:	bf18      	it	ne
 801916e:	81a3      	strhne	r3, [r4, #12]
 8019170:	bd10      	pop	{r4, pc}

08019172 <__sclose>:
 8019172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019176:	f000 b8db 	b.w	8019330 <_close_r>
	...

0801917c <__swbuf_r>:
 801917c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801917e:	460e      	mov	r6, r1
 8019180:	4614      	mov	r4, r2
 8019182:	4605      	mov	r5, r0
 8019184:	b118      	cbz	r0, 801918e <__swbuf_r+0x12>
 8019186:	6983      	ldr	r3, [r0, #24]
 8019188:	b90b      	cbnz	r3, 801918e <__swbuf_r+0x12>
 801918a:	f7fe fff5 	bl	8018178 <__sinit>
 801918e:	4b21      	ldr	r3, [pc, #132]	; (8019214 <__swbuf_r+0x98>)
 8019190:	429c      	cmp	r4, r3
 8019192:	d12b      	bne.n	80191ec <__swbuf_r+0x70>
 8019194:	686c      	ldr	r4, [r5, #4]
 8019196:	69a3      	ldr	r3, [r4, #24]
 8019198:	60a3      	str	r3, [r4, #8]
 801919a:	89a3      	ldrh	r3, [r4, #12]
 801919c:	071a      	lsls	r2, r3, #28
 801919e:	d52f      	bpl.n	8019200 <__swbuf_r+0x84>
 80191a0:	6923      	ldr	r3, [r4, #16]
 80191a2:	b36b      	cbz	r3, 8019200 <__swbuf_r+0x84>
 80191a4:	6923      	ldr	r3, [r4, #16]
 80191a6:	6820      	ldr	r0, [r4, #0]
 80191a8:	1ac0      	subs	r0, r0, r3
 80191aa:	6963      	ldr	r3, [r4, #20]
 80191ac:	b2f6      	uxtb	r6, r6
 80191ae:	4283      	cmp	r3, r0
 80191b0:	4637      	mov	r7, r6
 80191b2:	dc04      	bgt.n	80191be <__swbuf_r+0x42>
 80191b4:	4621      	mov	r1, r4
 80191b6:	4628      	mov	r0, r5
 80191b8:	f000 f950 	bl	801945c <_fflush_r>
 80191bc:	bb30      	cbnz	r0, 801920c <__swbuf_r+0x90>
 80191be:	68a3      	ldr	r3, [r4, #8]
 80191c0:	3b01      	subs	r3, #1
 80191c2:	60a3      	str	r3, [r4, #8]
 80191c4:	6823      	ldr	r3, [r4, #0]
 80191c6:	1c5a      	adds	r2, r3, #1
 80191c8:	6022      	str	r2, [r4, #0]
 80191ca:	701e      	strb	r6, [r3, #0]
 80191cc:	6963      	ldr	r3, [r4, #20]
 80191ce:	3001      	adds	r0, #1
 80191d0:	4283      	cmp	r3, r0
 80191d2:	d004      	beq.n	80191de <__swbuf_r+0x62>
 80191d4:	89a3      	ldrh	r3, [r4, #12]
 80191d6:	07db      	lsls	r3, r3, #31
 80191d8:	d506      	bpl.n	80191e8 <__swbuf_r+0x6c>
 80191da:	2e0a      	cmp	r6, #10
 80191dc:	d104      	bne.n	80191e8 <__swbuf_r+0x6c>
 80191de:	4621      	mov	r1, r4
 80191e0:	4628      	mov	r0, r5
 80191e2:	f000 f93b 	bl	801945c <_fflush_r>
 80191e6:	b988      	cbnz	r0, 801920c <__swbuf_r+0x90>
 80191e8:	4638      	mov	r0, r7
 80191ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80191ec:	4b0a      	ldr	r3, [pc, #40]	; (8019218 <__swbuf_r+0x9c>)
 80191ee:	429c      	cmp	r4, r3
 80191f0:	d101      	bne.n	80191f6 <__swbuf_r+0x7a>
 80191f2:	68ac      	ldr	r4, [r5, #8]
 80191f4:	e7cf      	b.n	8019196 <__swbuf_r+0x1a>
 80191f6:	4b09      	ldr	r3, [pc, #36]	; (801921c <__swbuf_r+0xa0>)
 80191f8:	429c      	cmp	r4, r3
 80191fa:	bf08      	it	eq
 80191fc:	68ec      	ldreq	r4, [r5, #12]
 80191fe:	e7ca      	b.n	8019196 <__swbuf_r+0x1a>
 8019200:	4621      	mov	r1, r4
 8019202:	4628      	mov	r0, r5
 8019204:	f000 f81e 	bl	8019244 <__swsetup_r>
 8019208:	2800      	cmp	r0, #0
 801920a:	d0cb      	beq.n	80191a4 <__swbuf_r+0x28>
 801920c:	f04f 37ff 	mov.w	r7, #4294967295
 8019210:	e7ea      	b.n	80191e8 <__swbuf_r+0x6c>
 8019212:	bf00      	nop
 8019214:	0801b870 	.word	0x0801b870
 8019218:	0801b890 	.word	0x0801b890
 801921c:	0801b850 	.word	0x0801b850

08019220 <_write_r>:
 8019220:	b538      	push	{r3, r4, r5, lr}
 8019222:	4d07      	ldr	r5, [pc, #28]	; (8019240 <_write_r+0x20>)
 8019224:	4604      	mov	r4, r0
 8019226:	4608      	mov	r0, r1
 8019228:	4611      	mov	r1, r2
 801922a:	2200      	movs	r2, #0
 801922c:	602a      	str	r2, [r5, #0]
 801922e:	461a      	mov	r2, r3
 8019230:	f7f0 fc65 	bl	8009afe <_write>
 8019234:	1c43      	adds	r3, r0, #1
 8019236:	d102      	bne.n	801923e <_write_r+0x1e>
 8019238:	682b      	ldr	r3, [r5, #0]
 801923a:	b103      	cbz	r3, 801923e <_write_r+0x1e>
 801923c:	6023      	str	r3, [r4, #0]
 801923e:	bd38      	pop	{r3, r4, r5, pc}
 8019240:	20003d1c 	.word	0x20003d1c

08019244 <__swsetup_r>:
 8019244:	4b32      	ldr	r3, [pc, #200]	; (8019310 <__swsetup_r+0xcc>)
 8019246:	b570      	push	{r4, r5, r6, lr}
 8019248:	681d      	ldr	r5, [r3, #0]
 801924a:	4606      	mov	r6, r0
 801924c:	460c      	mov	r4, r1
 801924e:	b125      	cbz	r5, 801925a <__swsetup_r+0x16>
 8019250:	69ab      	ldr	r3, [r5, #24]
 8019252:	b913      	cbnz	r3, 801925a <__swsetup_r+0x16>
 8019254:	4628      	mov	r0, r5
 8019256:	f7fe ff8f 	bl	8018178 <__sinit>
 801925a:	4b2e      	ldr	r3, [pc, #184]	; (8019314 <__swsetup_r+0xd0>)
 801925c:	429c      	cmp	r4, r3
 801925e:	d10f      	bne.n	8019280 <__swsetup_r+0x3c>
 8019260:	686c      	ldr	r4, [r5, #4]
 8019262:	89a3      	ldrh	r3, [r4, #12]
 8019264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019268:	0719      	lsls	r1, r3, #28
 801926a:	d42c      	bmi.n	80192c6 <__swsetup_r+0x82>
 801926c:	06dd      	lsls	r5, r3, #27
 801926e:	d411      	bmi.n	8019294 <__swsetup_r+0x50>
 8019270:	2309      	movs	r3, #9
 8019272:	6033      	str	r3, [r6, #0]
 8019274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019278:	81a3      	strh	r3, [r4, #12]
 801927a:	f04f 30ff 	mov.w	r0, #4294967295
 801927e:	e03e      	b.n	80192fe <__swsetup_r+0xba>
 8019280:	4b25      	ldr	r3, [pc, #148]	; (8019318 <__swsetup_r+0xd4>)
 8019282:	429c      	cmp	r4, r3
 8019284:	d101      	bne.n	801928a <__swsetup_r+0x46>
 8019286:	68ac      	ldr	r4, [r5, #8]
 8019288:	e7eb      	b.n	8019262 <__swsetup_r+0x1e>
 801928a:	4b24      	ldr	r3, [pc, #144]	; (801931c <__swsetup_r+0xd8>)
 801928c:	429c      	cmp	r4, r3
 801928e:	bf08      	it	eq
 8019290:	68ec      	ldreq	r4, [r5, #12]
 8019292:	e7e6      	b.n	8019262 <__swsetup_r+0x1e>
 8019294:	0758      	lsls	r0, r3, #29
 8019296:	d512      	bpl.n	80192be <__swsetup_r+0x7a>
 8019298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801929a:	b141      	cbz	r1, 80192ae <__swsetup_r+0x6a>
 801929c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80192a0:	4299      	cmp	r1, r3
 80192a2:	d002      	beq.n	80192aa <__swsetup_r+0x66>
 80192a4:	4630      	mov	r0, r6
 80192a6:	f7ff fbb5 	bl	8018a14 <_free_r>
 80192aa:	2300      	movs	r3, #0
 80192ac:	6363      	str	r3, [r4, #52]	; 0x34
 80192ae:	89a3      	ldrh	r3, [r4, #12]
 80192b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80192b4:	81a3      	strh	r3, [r4, #12]
 80192b6:	2300      	movs	r3, #0
 80192b8:	6063      	str	r3, [r4, #4]
 80192ba:	6923      	ldr	r3, [r4, #16]
 80192bc:	6023      	str	r3, [r4, #0]
 80192be:	89a3      	ldrh	r3, [r4, #12]
 80192c0:	f043 0308 	orr.w	r3, r3, #8
 80192c4:	81a3      	strh	r3, [r4, #12]
 80192c6:	6923      	ldr	r3, [r4, #16]
 80192c8:	b94b      	cbnz	r3, 80192de <__swsetup_r+0x9a>
 80192ca:	89a3      	ldrh	r3, [r4, #12]
 80192cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80192d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80192d4:	d003      	beq.n	80192de <__swsetup_r+0x9a>
 80192d6:	4621      	mov	r1, r4
 80192d8:	4630      	mov	r0, r6
 80192da:	f000 f931 	bl	8019540 <__smakebuf_r>
 80192de:	89a0      	ldrh	r0, [r4, #12]
 80192e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80192e4:	f010 0301 	ands.w	r3, r0, #1
 80192e8:	d00a      	beq.n	8019300 <__swsetup_r+0xbc>
 80192ea:	2300      	movs	r3, #0
 80192ec:	60a3      	str	r3, [r4, #8]
 80192ee:	6963      	ldr	r3, [r4, #20]
 80192f0:	425b      	negs	r3, r3
 80192f2:	61a3      	str	r3, [r4, #24]
 80192f4:	6923      	ldr	r3, [r4, #16]
 80192f6:	b943      	cbnz	r3, 801930a <__swsetup_r+0xc6>
 80192f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80192fc:	d1ba      	bne.n	8019274 <__swsetup_r+0x30>
 80192fe:	bd70      	pop	{r4, r5, r6, pc}
 8019300:	0781      	lsls	r1, r0, #30
 8019302:	bf58      	it	pl
 8019304:	6963      	ldrpl	r3, [r4, #20]
 8019306:	60a3      	str	r3, [r4, #8]
 8019308:	e7f4      	b.n	80192f4 <__swsetup_r+0xb0>
 801930a:	2000      	movs	r0, #0
 801930c:	e7f7      	b.n	80192fe <__swsetup_r+0xba>
 801930e:	bf00      	nop
 8019310:	200008c0 	.word	0x200008c0
 8019314:	0801b870 	.word	0x0801b870
 8019318:	0801b890 	.word	0x0801b890
 801931c:	0801b850 	.word	0x0801b850

08019320 <abort>:
 8019320:	b508      	push	{r3, lr}
 8019322:	2006      	movs	r0, #6
 8019324:	f000 f9e4 	bl	80196f0 <raise>
 8019328:	2001      	movs	r0, #1
 801932a:	f7f0 fbc1 	bl	8009ab0 <_exit>
	...

08019330 <_close_r>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	4d06      	ldr	r5, [pc, #24]	; (801934c <_close_r+0x1c>)
 8019334:	2300      	movs	r3, #0
 8019336:	4604      	mov	r4, r0
 8019338:	4608      	mov	r0, r1
 801933a:	602b      	str	r3, [r5, #0]
 801933c:	f7f0 fbfb 	bl	8009b36 <_close>
 8019340:	1c43      	adds	r3, r0, #1
 8019342:	d102      	bne.n	801934a <_close_r+0x1a>
 8019344:	682b      	ldr	r3, [r5, #0]
 8019346:	b103      	cbz	r3, 801934a <_close_r+0x1a>
 8019348:	6023      	str	r3, [r4, #0]
 801934a:	bd38      	pop	{r3, r4, r5, pc}
 801934c:	20003d1c 	.word	0x20003d1c

08019350 <__sflush_r>:
 8019350:	898a      	ldrh	r2, [r1, #12]
 8019352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019356:	4605      	mov	r5, r0
 8019358:	0710      	lsls	r0, r2, #28
 801935a:	460c      	mov	r4, r1
 801935c:	d458      	bmi.n	8019410 <__sflush_r+0xc0>
 801935e:	684b      	ldr	r3, [r1, #4]
 8019360:	2b00      	cmp	r3, #0
 8019362:	dc05      	bgt.n	8019370 <__sflush_r+0x20>
 8019364:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8019366:	2b00      	cmp	r3, #0
 8019368:	dc02      	bgt.n	8019370 <__sflush_r+0x20>
 801936a:	2000      	movs	r0, #0
 801936c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019372:	2e00      	cmp	r6, #0
 8019374:	d0f9      	beq.n	801936a <__sflush_r+0x1a>
 8019376:	2300      	movs	r3, #0
 8019378:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801937c:	682f      	ldr	r7, [r5, #0]
 801937e:	602b      	str	r3, [r5, #0]
 8019380:	d032      	beq.n	80193e8 <__sflush_r+0x98>
 8019382:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8019384:	89a3      	ldrh	r3, [r4, #12]
 8019386:	075a      	lsls	r2, r3, #29
 8019388:	d505      	bpl.n	8019396 <__sflush_r+0x46>
 801938a:	6863      	ldr	r3, [r4, #4]
 801938c:	1ac0      	subs	r0, r0, r3
 801938e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019390:	b10b      	cbz	r3, 8019396 <__sflush_r+0x46>
 8019392:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8019394:	1ac0      	subs	r0, r0, r3
 8019396:	2300      	movs	r3, #0
 8019398:	4602      	mov	r2, r0
 801939a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801939c:	6a21      	ldr	r1, [r4, #32]
 801939e:	4628      	mov	r0, r5
 80193a0:	47b0      	blx	r6
 80193a2:	1c43      	adds	r3, r0, #1
 80193a4:	89a3      	ldrh	r3, [r4, #12]
 80193a6:	d106      	bne.n	80193b6 <__sflush_r+0x66>
 80193a8:	6829      	ldr	r1, [r5, #0]
 80193aa:	291d      	cmp	r1, #29
 80193ac:	d82c      	bhi.n	8019408 <__sflush_r+0xb8>
 80193ae:	4a2a      	ldr	r2, [pc, #168]	; (8019458 <__sflush_r+0x108>)
 80193b0:	40ca      	lsrs	r2, r1
 80193b2:	07d6      	lsls	r6, r2, #31
 80193b4:	d528      	bpl.n	8019408 <__sflush_r+0xb8>
 80193b6:	2200      	movs	r2, #0
 80193b8:	6062      	str	r2, [r4, #4]
 80193ba:	04d9      	lsls	r1, r3, #19
 80193bc:	6922      	ldr	r2, [r4, #16]
 80193be:	6022      	str	r2, [r4, #0]
 80193c0:	d504      	bpl.n	80193cc <__sflush_r+0x7c>
 80193c2:	1c42      	adds	r2, r0, #1
 80193c4:	d101      	bne.n	80193ca <__sflush_r+0x7a>
 80193c6:	682b      	ldr	r3, [r5, #0]
 80193c8:	b903      	cbnz	r3, 80193cc <__sflush_r+0x7c>
 80193ca:	6560      	str	r0, [r4, #84]	; 0x54
 80193cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193ce:	602f      	str	r7, [r5, #0]
 80193d0:	2900      	cmp	r1, #0
 80193d2:	d0ca      	beq.n	801936a <__sflush_r+0x1a>
 80193d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193d8:	4299      	cmp	r1, r3
 80193da:	d002      	beq.n	80193e2 <__sflush_r+0x92>
 80193dc:	4628      	mov	r0, r5
 80193de:	f7ff fb19 	bl	8018a14 <_free_r>
 80193e2:	2000      	movs	r0, #0
 80193e4:	6360      	str	r0, [r4, #52]	; 0x34
 80193e6:	e7c1      	b.n	801936c <__sflush_r+0x1c>
 80193e8:	6a21      	ldr	r1, [r4, #32]
 80193ea:	2301      	movs	r3, #1
 80193ec:	4628      	mov	r0, r5
 80193ee:	47b0      	blx	r6
 80193f0:	1c41      	adds	r1, r0, #1
 80193f2:	d1c7      	bne.n	8019384 <__sflush_r+0x34>
 80193f4:	682b      	ldr	r3, [r5, #0]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d0c4      	beq.n	8019384 <__sflush_r+0x34>
 80193fa:	2b1d      	cmp	r3, #29
 80193fc:	d001      	beq.n	8019402 <__sflush_r+0xb2>
 80193fe:	2b16      	cmp	r3, #22
 8019400:	d101      	bne.n	8019406 <__sflush_r+0xb6>
 8019402:	602f      	str	r7, [r5, #0]
 8019404:	e7b1      	b.n	801936a <__sflush_r+0x1a>
 8019406:	89a3      	ldrh	r3, [r4, #12]
 8019408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801940c:	81a3      	strh	r3, [r4, #12]
 801940e:	e7ad      	b.n	801936c <__sflush_r+0x1c>
 8019410:	690f      	ldr	r7, [r1, #16]
 8019412:	2f00      	cmp	r7, #0
 8019414:	d0a9      	beq.n	801936a <__sflush_r+0x1a>
 8019416:	0793      	lsls	r3, r2, #30
 8019418:	680e      	ldr	r6, [r1, #0]
 801941a:	bf08      	it	eq
 801941c:	694b      	ldreq	r3, [r1, #20]
 801941e:	600f      	str	r7, [r1, #0]
 8019420:	bf18      	it	ne
 8019422:	2300      	movne	r3, #0
 8019424:	eba6 0807 	sub.w	r8, r6, r7
 8019428:	608b      	str	r3, [r1, #8]
 801942a:	f1b8 0f00 	cmp.w	r8, #0
 801942e:	dd9c      	ble.n	801936a <__sflush_r+0x1a>
 8019430:	6a21      	ldr	r1, [r4, #32]
 8019432:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019434:	4643      	mov	r3, r8
 8019436:	463a      	mov	r2, r7
 8019438:	4628      	mov	r0, r5
 801943a:	47b0      	blx	r6
 801943c:	2800      	cmp	r0, #0
 801943e:	dc06      	bgt.n	801944e <__sflush_r+0xfe>
 8019440:	89a3      	ldrh	r3, [r4, #12]
 8019442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019446:	81a3      	strh	r3, [r4, #12]
 8019448:	f04f 30ff 	mov.w	r0, #4294967295
 801944c:	e78e      	b.n	801936c <__sflush_r+0x1c>
 801944e:	4407      	add	r7, r0
 8019450:	eba8 0800 	sub.w	r8, r8, r0
 8019454:	e7e9      	b.n	801942a <__sflush_r+0xda>
 8019456:	bf00      	nop
 8019458:	20400001 	.word	0x20400001

0801945c <_fflush_r>:
 801945c:	b538      	push	{r3, r4, r5, lr}
 801945e:	690b      	ldr	r3, [r1, #16]
 8019460:	4605      	mov	r5, r0
 8019462:	460c      	mov	r4, r1
 8019464:	b913      	cbnz	r3, 801946c <_fflush_r+0x10>
 8019466:	2500      	movs	r5, #0
 8019468:	4628      	mov	r0, r5
 801946a:	bd38      	pop	{r3, r4, r5, pc}
 801946c:	b118      	cbz	r0, 8019476 <_fflush_r+0x1a>
 801946e:	6983      	ldr	r3, [r0, #24]
 8019470:	b90b      	cbnz	r3, 8019476 <_fflush_r+0x1a>
 8019472:	f7fe fe81 	bl	8018178 <__sinit>
 8019476:	4b14      	ldr	r3, [pc, #80]	; (80194c8 <_fflush_r+0x6c>)
 8019478:	429c      	cmp	r4, r3
 801947a:	d11b      	bne.n	80194b4 <_fflush_r+0x58>
 801947c:	686c      	ldr	r4, [r5, #4]
 801947e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d0ef      	beq.n	8019466 <_fflush_r+0xa>
 8019486:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019488:	07d0      	lsls	r0, r2, #31
 801948a:	d404      	bmi.n	8019496 <_fflush_r+0x3a>
 801948c:	0599      	lsls	r1, r3, #22
 801948e:	d402      	bmi.n	8019496 <_fflush_r+0x3a>
 8019490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019492:	f7fe ff26 	bl	80182e2 <__retarget_lock_acquire_recursive>
 8019496:	4628      	mov	r0, r5
 8019498:	4621      	mov	r1, r4
 801949a:	f7ff ff59 	bl	8019350 <__sflush_r>
 801949e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194a0:	07da      	lsls	r2, r3, #31
 80194a2:	4605      	mov	r5, r0
 80194a4:	d4e0      	bmi.n	8019468 <_fflush_r+0xc>
 80194a6:	89a3      	ldrh	r3, [r4, #12]
 80194a8:	059b      	lsls	r3, r3, #22
 80194aa:	d4dd      	bmi.n	8019468 <_fflush_r+0xc>
 80194ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194ae:	f7fe ff19 	bl	80182e4 <__retarget_lock_release_recursive>
 80194b2:	e7d9      	b.n	8019468 <_fflush_r+0xc>
 80194b4:	4b05      	ldr	r3, [pc, #20]	; (80194cc <_fflush_r+0x70>)
 80194b6:	429c      	cmp	r4, r3
 80194b8:	d101      	bne.n	80194be <_fflush_r+0x62>
 80194ba:	68ac      	ldr	r4, [r5, #8]
 80194bc:	e7df      	b.n	801947e <_fflush_r+0x22>
 80194be:	4b04      	ldr	r3, [pc, #16]	; (80194d0 <_fflush_r+0x74>)
 80194c0:	429c      	cmp	r4, r3
 80194c2:	bf08      	it	eq
 80194c4:	68ec      	ldreq	r4, [r5, #12]
 80194c6:	e7da      	b.n	801947e <_fflush_r+0x22>
 80194c8:	0801b870 	.word	0x0801b870
 80194cc:	0801b890 	.word	0x0801b890
 80194d0:	0801b850 	.word	0x0801b850

080194d4 <_lseek_r>:
 80194d4:	b538      	push	{r3, r4, r5, lr}
 80194d6:	4d07      	ldr	r5, [pc, #28]	; (80194f4 <_lseek_r+0x20>)
 80194d8:	4604      	mov	r4, r0
 80194da:	4608      	mov	r0, r1
 80194dc:	4611      	mov	r1, r2
 80194de:	2200      	movs	r2, #0
 80194e0:	602a      	str	r2, [r5, #0]
 80194e2:	461a      	mov	r2, r3
 80194e4:	f7f0 fb4e 	bl	8009b84 <_lseek>
 80194e8:	1c43      	adds	r3, r0, #1
 80194ea:	d102      	bne.n	80194f2 <_lseek_r+0x1e>
 80194ec:	682b      	ldr	r3, [r5, #0]
 80194ee:	b103      	cbz	r3, 80194f2 <_lseek_r+0x1e>
 80194f0:	6023      	str	r3, [r4, #0]
 80194f2:	bd38      	pop	{r3, r4, r5, pc}
 80194f4:	20003d1c 	.word	0x20003d1c

080194f8 <__swhatbuf_r>:
 80194f8:	b570      	push	{r4, r5, r6, lr}
 80194fa:	460e      	mov	r6, r1
 80194fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019500:	2900      	cmp	r1, #0
 8019502:	b096      	sub	sp, #88	; 0x58
 8019504:	4614      	mov	r4, r2
 8019506:	461d      	mov	r5, r3
 8019508:	da07      	bge.n	801951a <__swhatbuf_r+0x22>
 801950a:	2300      	movs	r3, #0
 801950c:	602b      	str	r3, [r5, #0]
 801950e:	89b3      	ldrh	r3, [r6, #12]
 8019510:	061a      	lsls	r2, r3, #24
 8019512:	d410      	bmi.n	8019536 <__swhatbuf_r+0x3e>
 8019514:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019518:	e00e      	b.n	8019538 <__swhatbuf_r+0x40>
 801951a:	466a      	mov	r2, sp
 801951c:	f000 f912 	bl	8019744 <_fstat_r>
 8019520:	2800      	cmp	r0, #0
 8019522:	dbf2      	blt.n	801950a <__swhatbuf_r+0x12>
 8019524:	9a01      	ldr	r2, [sp, #4]
 8019526:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801952a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801952e:	425a      	negs	r2, r3
 8019530:	415a      	adcs	r2, r3
 8019532:	602a      	str	r2, [r5, #0]
 8019534:	e7ee      	b.n	8019514 <__swhatbuf_r+0x1c>
 8019536:	2340      	movs	r3, #64	; 0x40
 8019538:	2000      	movs	r0, #0
 801953a:	6023      	str	r3, [r4, #0]
 801953c:	b016      	add	sp, #88	; 0x58
 801953e:	bd70      	pop	{r4, r5, r6, pc}

08019540 <__smakebuf_r>:
 8019540:	898b      	ldrh	r3, [r1, #12]
 8019542:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019544:	079d      	lsls	r5, r3, #30
 8019546:	4606      	mov	r6, r0
 8019548:	460c      	mov	r4, r1
 801954a:	d507      	bpl.n	801955c <__smakebuf_r+0x1c>
 801954c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019550:	6023      	str	r3, [r4, #0]
 8019552:	6123      	str	r3, [r4, #16]
 8019554:	2301      	movs	r3, #1
 8019556:	6163      	str	r3, [r4, #20]
 8019558:	b002      	add	sp, #8
 801955a:	bd70      	pop	{r4, r5, r6, pc}
 801955c:	ab01      	add	r3, sp, #4
 801955e:	466a      	mov	r2, sp
 8019560:	f7ff ffca 	bl	80194f8 <__swhatbuf_r>
 8019564:	9900      	ldr	r1, [sp, #0]
 8019566:	4605      	mov	r5, r0
 8019568:	4630      	mov	r0, r6
 801956a:	f7ff faa3 	bl	8018ab4 <_malloc_r>
 801956e:	b948      	cbnz	r0, 8019584 <__smakebuf_r+0x44>
 8019570:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019574:	059a      	lsls	r2, r3, #22
 8019576:	d4ef      	bmi.n	8019558 <__smakebuf_r+0x18>
 8019578:	f023 0303 	bic.w	r3, r3, #3
 801957c:	f043 0302 	orr.w	r3, r3, #2
 8019580:	81a3      	strh	r3, [r4, #12]
 8019582:	e7e3      	b.n	801954c <__smakebuf_r+0xc>
 8019584:	4b0d      	ldr	r3, [pc, #52]	; (80195bc <__smakebuf_r+0x7c>)
 8019586:	62b3      	str	r3, [r6, #40]	; 0x28
 8019588:	89a3      	ldrh	r3, [r4, #12]
 801958a:	6020      	str	r0, [r4, #0]
 801958c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019590:	81a3      	strh	r3, [r4, #12]
 8019592:	9b00      	ldr	r3, [sp, #0]
 8019594:	6163      	str	r3, [r4, #20]
 8019596:	9b01      	ldr	r3, [sp, #4]
 8019598:	6120      	str	r0, [r4, #16]
 801959a:	b15b      	cbz	r3, 80195b4 <__smakebuf_r+0x74>
 801959c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80195a0:	4630      	mov	r0, r6
 80195a2:	f000 f8e1 	bl	8019768 <_isatty_r>
 80195a6:	b128      	cbz	r0, 80195b4 <__smakebuf_r+0x74>
 80195a8:	89a3      	ldrh	r3, [r4, #12]
 80195aa:	f023 0303 	bic.w	r3, r3, #3
 80195ae:	f043 0301 	orr.w	r3, r3, #1
 80195b2:	81a3      	strh	r3, [r4, #12]
 80195b4:	89a0      	ldrh	r0, [r4, #12]
 80195b6:	4305      	orrs	r5, r0
 80195b8:	81a5      	strh	r5, [r4, #12]
 80195ba:	e7cd      	b.n	8019558 <__smakebuf_r+0x18>
 80195bc:	08018111 	.word	0x08018111

080195c0 <__ascii_mbtowc>:
 80195c0:	b082      	sub	sp, #8
 80195c2:	b901      	cbnz	r1, 80195c6 <__ascii_mbtowc+0x6>
 80195c4:	a901      	add	r1, sp, #4
 80195c6:	b142      	cbz	r2, 80195da <__ascii_mbtowc+0x1a>
 80195c8:	b14b      	cbz	r3, 80195de <__ascii_mbtowc+0x1e>
 80195ca:	7813      	ldrb	r3, [r2, #0]
 80195cc:	600b      	str	r3, [r1, #0]
 80195ce:	7812      	ldrb	r2, [r2, #0]
 80195d0:	1e10      	subs	r0, r2, #0
 80195d2:	bf18      	it	ne
 80195d4:	2001      	movne	r0, #1
 80195d6:	b002      	add	sp, #8
 80195d8:	4770      	bx	lr
 80195da:	4610      	mov	r0, r2
 80195dc:	e7fb      	b.n	80195d6 <__ascii_mbtowc+0x16>
 80195de:	f06f 0001 	mvn.w	r0, #1
 80195e2:	e7f8      	b.n	80195d6 <__ascii_mbtowc+0x16>

080195e4 <memmove>:
 80195e4:	4288      	cmp	r0, r1
 80195e6:	b510      	push	{r4, lr}
 80195e8:	eb01 0402 	add.w	r4, r1, r2
 80195ec:	d902      	bls.n	80195f4 <memmove+0x10>
 80195ee:	4284      	cmp	r4, r0
 80195f0:	4623      	mov	r3, r4
 80195f2:	d807      	bhi.n	8019604 <memmove+0x20>
 80195f4:	1e43      	subs	r3, r0, #1
 80195f6:	42a1      	cmp	r1, r4
 80195f8:	d008      	beq.n	801960c <memmove+0x28>
 80195fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80195fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019602:	e7f8      	b.n	80195f6 <memmove+0x12>
 8019604:	4402      	add	r2, r0
 8019606:	4601      	mov	r1, r0
 8019608:	428a      	cmp	r2, r1
 801960a:	d100      	bne.n	801960e <memmove+0x2a>
 801960c:	bd10      	pop	{r4, pc}
 801960e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019612:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019616:	e7f7      	b.n	8019608 <memmove+0x24>

08019618 <__malloc_lock>:
 8019618:	4801      	ldr	r0, [pc, #4]	; (8019620 <__malloc_lock+0x8>)
 801961a:	f7fe be62 	b.w	80182e2 <__retarget_lock_acquire_recursive>
 801961e:	bf00      	nop
 8019620:	20003d10 	.word	0x20003d10

08019624 <__malloc_unlock>:
 8019624:	4801      	ldr	r0, [pc, #4]	; (801962c <__malloc_unlock+0x8>)
 8019626:	f7fe be5d 	b.w	80182e4 <__retarget_lock_release_recursive>
 801962a:	bf00      	nop
 801962c:	20003d10 	.word	0x20003d10

08019630 <_realloc_r>:
 8019630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019632:	4607      	mov	r7, r0
 8019634:	4614      	mov	r4, r2
 8019636:	460e      	mov	r6, r1
 8019638:	b921      	cbnz	r1, 8019644 <_realloc_r+0x14>
 801963a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801963e:	4611      	mov	r1, r2
 8019640:	f7ff ba38 	b.w	8018ab4 <_malloc_r>
 8019644:	b922      	cbnz	r2, 8019650 <_realloc_r+0x20>
 8019646:	f7ff f9e5 	bl	8018a14 <_free_r>
 801964a:	4625      	mov	r5, r4
 801964c:	4628      	mov	r0, r5
 801964e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019650:	f000 f89a 	bl	8019788 <_malloc_usable_size_r>
 8019654:	42a0      	cmp	r0, r4
 8019656:	d20f      	bcs.n	8019678 <_realloc_r+0x48>
 8019658:	4621      	mov	r1, r4
 801965a:	4638      	mov	r0, r7
 801965c:	f7ff fa2a 	bl	8018ab4 <_malloc_r>
 8019660:	4605      	mov	r5, r0
 8019662:	2800      	cmp	r0, #0
 8019664:	d0f2      	beq.n	801964c <_realloc_r+0x1c>
 8019666:	4631      	mov	r1, r6
 8019668:	4622      	mov	r2, r4
 801966a:	f7fd f88d 	bl	8016788 <memcpy>
 801966e:	4631      	mov	r1, r6
 8019670:	4638      	mov	r0, r7
 8019672:	f7ff f9cf 	bl	8018a14 <_free_r>
 8019676:	e7e9      	b.n	801964c <_realloc_r+0x1c>
 8019678:	4635      	mov	r5, r6
 801967a:	e7e7      	b.n	801964c <_realloc_r+0x1c>

0801967c <_read_r>:
 801967c:	b538      	push	{r3, r4, r5, lr}
 801967e:	4d07      	ldr	r5, [pc, #28]	; (801969c <_read_r+0x20>)
 8019680:	4604      	mov	r4, r0
 8019682:	4608      	mov	r0, r1
 8019684:	4611      	mov	r1, r2
 8019686:	2200      	movs	r2, #0
 8019688:	602a      	str	r2, [r5, #0]
 801968a:	461a      	mov	r2, r3
 801968c:	f7f0 fa1a 	bl	8009ac4 <_read>
 8019690:	1c43      	adds	r3, r0, #1
 8019692:	d102      	bne.n	801969a <_read_r+0x1e>
 8019694:	682b      	ldr	r3, [r5, #0]
 8019696:	b103      	cbz	r3, 801969a <_read_r+0x1e>
 8019698:	6023      	str	r3, [r4, #0]
 801969a:	bd38      	pop	{r3, r4, r5, pc}
 801969c:	20003d1c 	.word	0x20003d1c

080196a0 <_raise_r>:
 80196a0:	291f      	cmp	r1, #31
 80196a2:	b538      	push	{r3, r4, r5, lr}
 80196a4:	4604      	mov	r4, r0
 80196a6:	460d      	mov	r5, r1
 80196a8:	d904      	bls.n	80196b4 <_raise_r+0x14>
 80196aa:	2316      	movs	r3, #22
 80196ac:	6003      	str	r3, [r0, #0]
 80196ae:	f04f 30ff 	mov.w	r0, #4294967295
 80196b2:	bd38      	pop	{r3, r4, r5, pc}
 80196b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80196b6:	b112      	cbz	r2, 80196be <_raise_r+0x1e>
 80196b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80196bc:	b94b      	cbnz	r3, 80196d2 <_raise_r+0x32>
 80196be:	4620      	mov	r0, r4
 80196c0:	f000 f830 	bl	8019724 <_getpid_r>
 80196c4:	462a      	mov	r2, r5
 80196c6:	4601      	mov	r1, r0
 80196c8:	4620      	mov	r0, r4
 80196ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80196ce:	f000 b817 	b.w	8019700 <_kill_r>
 80196d2:	2b01      	cmp	r3, #1
 80196d4:	d00a      	beq.n	80196ec <_raise_r+0x4c>
 80196d6:	1c59      	adds	r1, r3, #1
 80196d8:	d103      	bne.n	80196e2 <_raise_r+0x42>
 80196da:	2316      	movs	r3, #22
 80196dc:	6003      	str	r3, [r0, #0]
 80196de:	2001      	movs	r0, #1
 80196e0:	e7e7      	b.n	80196b2 <_raise_r+0x12>
 80196e2:	2400      	movs	r4, #0
 80196e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80196e8:	4628      	mov	r0, r5
 80196ea:	4798      	blx	r3
 80196ec:	2000      	movs	r0, #0
 80196ee:	e7e0      	b.n	80196b2 <_raise_r+0x12>

080196f0 <raise>:
 80196f0:	4b02      	ldr	r3, [pc, #8]	; (80196fc <raise+0xc>)
 80196f2:	4601      	mov	r1, r0
 80196f4:	6818      	ldr	r0, [r3, #0]
 80196f6:	f7ff bfd3 	b.w	80196a0 <_raise_r>
 80196fa:	bf00      	nop
 80196fc:	200008c0 	.word	0x200008c0

08019700 <_kill_r>:
 8019700:	b538      	push	{r3, r4, r5, lr}
 8019702:	4d07      	ldr	r5, [pc, #28]	; (8019720 <_kill_r+0x20>)
 8019704:	2300      	movs	r3, #0
 8019706:	4604      	mov	r4, r0
 8019708:	4608      	mov	r0, r1
 801970a:	4611      	mov	r1, r2
 801970c:	602b      	str	r3, [r5, #0]
 801970e:	f7f0 f9bf 	bl	8009a90 <_kill>
 8019712:	1c43      	adds	r3, r0, #1
 8019714:	d102      	bne.n	801971c <_kill_r+0x1c>
 8019716:	682b      	ldr	r3, [r5, #0]
 8019718:	b103      	cbz	r3, 801971c <_kill_r+0x1c>
 801971a:	6023      	str	r3, [r4, #0]
 801971c:	bd38      	pop	{r3, r4, r5, pc}
 801971e:	bf00      	nop
 8019720:	20003d1c 	.word	0x20003d1c

08019724 <_getpid_r>:
 8019724:	f7f0 b9ac 	b.w	8009a80 <_getpid>

08019728 <__ascii_wctomb>:
 8019728:	b149      	cbz	r1, 801973e <__ascii_wctomb+0x16>
 801972a:	2aff      	cmp	r2, #255	; 0xff
 801972c:	bf85      	ittet	hi
 801972e:	238a      	movhi	r3, #138	; 0x8a
 8019730:	6003      	strhi	r3, [r0, #0]
 8019732:	700a      	strbls	r2, [r1, #0]
 8019734:	f04f 30ff 	movhi.w	r0, #4294967295
 8019738:	bf98      	it	ls
 801973a:	2001      	movls	r0, #1
 801973c:	4770      	bx	lr
 801973e:	4608      	mov	r0, r1
 8019740:	4770      	bx	lr
	...

08019744 <_fstat_r>:
 8019744:	b538      	push	{r3, r4, r5, lr}
 8019746:	4d07      	ldr	r5, [pc, #28]	; (8019764 <_fstat_r+0x20>)
 8019748:	2300      	movs	r3, #0
 801974a:	4604      	mov	r4, r0
 801974c:	4608      	mov	r0, r1
 801974e:	4611      	mov	r1, r2
 8019750:	602b      	str	r3, [r5, #0]
 8019752:	f7f0 f9fc 	bl	8009b4e <_fstat>
 8019756:	1c43      	adds	r3, r0, #1
 8019758:	d102      	bne.n	8019760 <_fstat_r+0x1c>
 801975a:	682b      	ldr	r3, [r5, #0]
 801975c:	b103      	cbz	r3, 8019760 <_fstat_r+0x1c>
 801975e:	6023      	str	r3, [r4, #0]
 8019760:	bd38      	pop	{r3, r4, r5, pc}
 8019762:	bf00      	nop
 8019764:	20003d1c 	.word	0x20003d1c

08019768 <_isatty_r>:
 8019768:	b538      	push	{r3, r4, r5, lr}
 801976a:	4d06      	ldr	r5, [pc, #24]	; (8019784 <_isatty_r+0x1c>)
 801976c:	2300      	movs	r3, #0
 801976e:	4604      	mov	r4, r0
 8019770:	4608      	mov	r0, r1
 8019772:	602b      	str	r3, [r5, #0]
 8019774:	f7f0 f9fb 	bl	8009b6e <_isatty>
 8019778:	1c43      	adds	r3, r0, #1
 801977a:	d102      	bne.n	8019782 <_isatty_r+0x1a>
 801977c:	682b      	ldr	r3, [r5, #0]
 801977e:	b103      	cbz	r3, 8019782 <_isatty_r+0x1a>
 8019780:	6023      	str	r3, [r4, #0]
 8019782:	bd38      	pop	{r3, r4, r5, pc}
 8019784:	20003d1c 	.word	0x20003d1c

08019788 <_malloc_usable_size_r>:
 8019788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801978c:	1f18      	subs	r0, r3, #4
 801978e:	2b00      	cmp	r3, #0
 8019790:	bfbc      	itt	lt
 8019792:	580b      	ldrlt	r3, [r1, r0]
 8019794:	18c0      	addlt	r0, r0, r3
 8019796:	4770      	bx	lr

08019798 <roundf>:
 8019798:	ee10 0a10 	vmov	r0, s0
 801979c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80197a0:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 80197a4:	2a16      	cmp	r2, #22
 80197a6:	dc15      	bgt.n	80197d4 <roundf+0x3c>
 80197a8:	2a00      	cmp	r2, #0
 80197aa:	da08      	bge.n	80197be <roundf+0x26>
 80197ac:	3201      	adds	r2, #1
 80197ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80197b2:	d101      	bne.n	80197b8 <roundf+0x20>
 80197b4:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80197b8:	ee00 3a10 	vmov	s0, r3
 80197bc:	4770      	bx	lr
 80197be:	4908      	ldr	r1, [pc, #32]	; (80197e0 <roundf+0x48>)
 80197c0:	4111      	asrs	r1, r2
 80197c2:	4208      	tst	r0, r1
 80197c4:	d0fa      	beq.n	80197bc <roundf+0x24>
 80197c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80197ca:	4113      	asrs	r3, r2
 80197cc:	4403      	add	r3, r0
 80197ce:	ea23 0301 	bic.w	r3, r3, r1
 80197d2:	e7f1      	b.n	80197b8 <roundf+0x20>
 80197d4:	2a80      	cmp	r2, #128	; 0x80
 80197d6:	d1f1      	bne.n	80197bc <roundf+0x24>
 80197d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop
 80197e0:	007fffff 	.word	0x007fffff

080197e4 <sqrt>:
 80197e4:	b538      	push	{r3, r4, r5, lr}
 80197e6:	ed2d 8b02 	vpush	{d8}
 80197ea:	ec55 4b10 	vmov	r4, r5, d0
 80197ee:	f000 f82d 	bl	801984c <__ieee754_sqrt>
 80197f2:	4b15      	ldr	r3, [pc, #84]	; (8019848 <sqrt+0x64>)
 80197f4:	eeb0 8a40 	vmov.f32	s16, s0
 80197f8:	eef0 8a60 	vmov.f32	s17, s1
 80197fc:	f993 3000 	ldrsb.w	r3, [r3]
 8019800:	3301      	adds	r3, #1
 8019802:	d019      	beq.n	8019838 <sqrt+0x54>
 8019804:	4622      	mov	r2, r4
 8019806:	462b      	mov	r3, r5
 8019808:	4620      	mov	r0, r4
 801980a:	4629      	mov	r1, r5
 801980c:	f7e7 f98e 	bl	8000b2c <__aeabi_dcmpun>
 8019810:	b990      	cbnz	r0, 8019838 <sqrt+0x54>
 8019812:	2200      	movs	r2, #0
 8019814:	2300      	movs	r3, #0
 8019816:	4620      	mov	r0, r4
 8019818:	4629      	mov	r1, r5
 801981a:	f7e7 f95f 	bl	8000adc <__aeabi_dcmplt>
 801981e:	b158      	cbz	r0, 8019838 <sqrt+0x54>
 8019820:	f7fc ff88 	bl	8016734 <__errno>
 8019824:	2321      	movs	r3, #33	; 0x21
 8019826:	6003      	str	r3, [r0, #0]
 8019828:	2200      	movs	r2, #0
 801982a:	2300      	movs	r3, #0
 801982c:	4610      	mov	r0, r2
 801982e:	4619      	mov	r1, r3
 8019830:	f7e7 f80c 	bl	800084c <__aeabi_ddiv>
 8019834:	ec41 0b18 	vmov	d8, r0, r1
 8019838:	eeb0 0a48 	vmov.f32	s0, s16
 801983c:	eef0 0a68 	vmov.f32	s1, s17
 8019840:	ecbd 8b02 	vpop	{d8}
 8019844:	bd38      	pop	{r3, r4, r5, pc}
 8019846:	bf00      	nop
 8019848:	20000a90 	.word	0x20000a90

0801984c <__ieee754_sqrt>:
 801984c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019850:	ec55 4b10 	vmov	r4, r5, d0
 8019854:	4e56      	ldr	r6, [pc, #344]	; (80199b0 <__ieee754_sqrt+0x164>)
 8019856:	43ae      	bics	r6, r5
 8019858:	ee10 0a10 	vmov	r0, s0
 801985c:	ee10 3a10 	vmov	r3, s0
 8019860:	4629      	mov	r1, r5
 8019862:	462a      	mov	r2, r5
 8019864:	d110      	bne.n	8019888 <__ieee754_sqrt+0x3c>
 8019866:	ee10 2a10 	vmov	r2, s0
 801986a:	462b      	mov	r3, r5
 801986c:	f7e6 fec4 	bl	80005f8 <__aeabi_dmul>
 8019870:	4602      	mov	r2, r0
 8019872:	460b      	mov	r3, r1
 8019874:	4620      	mov	r0, r4
 8019876:	4629      	mov	r1, r5
 8019878:	f7e6 fd08 	bl	800028c <__adddf3>
 801987c:	4604      	mov	r4, r0
 801987e:	460d      	mov	r5, r1
 8019880:	ec45 4b10 	vmov	d0, r4, r5
 8019884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019888:	2d00      	cmp	r5, #0
 801988a:	dc10      	bgt.n	80198ae <__ieee754_sqrt+0x62>
 801988c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019890:	4330      	orrs	r0, r6
 8019892:	d0f5      	beq.n	8019880 <__ieee754_sqrt+0x34>
 8019894:	b15d      	cbz	r5, 80198ae <__ieee754_sqrt+0x62>
 8019896:	ee10 2a10 	vmov	r2, s0
 801989a:	462b      	mov	r3, r5
 801989c:	ee10 0a10 	vmov	r0, s0
 80198a0:	f7e6 fcf2 	bl	8000288 <__aeabi_dsub>
 80198a4:	4602      	mov	r2, r0
 80198a6:	460b      	mov	r3, r1
 80198a8:	f7e6 ffd0 	bl	800084c <__aeabi_ddiv>
 80198ac:	e7e6      	b.n	801987c <__ieee754_sqrt+0x30>
 80198ae:	1509      	asrs	r1, r1, #20
 80198b0:	d076      	beq.n	80199a0 <__ieee754_sqrt+0x154>
 80198b2:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80198b6:	07ce      	lsls	r6, r1, #31
 80198b8:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80198bc:	bf5e      	ittt	pl
 80198be:	0fda      	lsrpl	r2, r3, #31
 80198c0:	005b      	lslpl	r3, r3, #1
 80198c2:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80198c6:	0fda      	lsrs	r2, r3, #31
 80198c8:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80198cc:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80198d0:	2000      	movs	r0, #0
 80198d2:	106d      	asrs	r5, r5, #1
 80198d4:	005b      	lsls	r3, r3, #1
 80198d6:	f04f 0e16 	mov.w	lr, #22
 80198da:	4684      	mov	ip, r0
 80198dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80198e0:	eb0c 0401 	add.w	r4, ip, r1
 80198e4:	4294      	cmp	r4, r2
 80198e6:	bfde      	ittt	le
 80198e8:	1b12      	suble	r2, r2, r4
 80198ea:	eb04 0c01 	addle.w	ip, r4, r1
 80198ee:	1840      	addle	r0, r0, r1
 80198f0:	0052      	lsls	r2, r2, #1
 80198f2:	f1be 0e01 	subs.w	lr, lr, #1
 80198f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80198fa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80198fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019902:	d1ed      	bne.n	80198e0 <__ieee754_sqrt+0x94>
 8019904:	4671      	mov	r1, lr
 8019906:	2720      	movs	r7, #32
 8019908:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801990c:	4562      	cmp	r2, ip
 801990e:	eb04 060e 	add.w	r6, r4, lr
 8019912:	dc02      	bgt.n	801991a <__ieee754_sqrt+0xce>
 8019914:	d113      	bne.n	801993e <__ieee754_sqrt+0xf2>
 8019916:	429e      	cmp	r6, r3
 8019918:	d811      	bhi.n	801993e <__ieee754_sqrt+0xf2>
 801991a:	2e00      	cmp	r6, #0
 801991c:	eb06 0e04 	add.w	lr, r6, r4
 8019920:	da43      	bge.n	80199aa <__ieee754_sqrt+0x15e>
 8019922:	f1be 0f00 	cmp.w	lr, #0
 8019926:	db40      	blt.n	80199aa <__ieee754_sqrt+0x15e>
 8019928:	f10c 0801 	add.w	r8, ip, #1
 801992c:	eba2 020c 	sub.w	r2, r2, ip
 8019930:	429e      	cmp	r6, r3
 8019932:	bf88      	it	hi
 8019934:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019938:	1b9b      	subs	r3, r3, r6
 801993a:	4421      	add	r1, r4
 801993c:	46c4      	mov	ip, r8
 801993e:	0052      	lsls	r2, r2, #1
 8019940:	3f01      	subs	r7, #1
 8019942:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019946:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801994a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801994e:	d1dd      	bne.n	801990c <__ieee754_sqrt+0xc0>
 8019950:	4313      	orrs	r3, r2
 8019952:	d006      	beq.n	8019962 <__ieee754_sqrt+0x116>
 8019954:	1c4c      	adds	r4, r1, #1
 8019956:	bf13      	iteet	ne
 8019958:	3101      	addne	r1, #1
 801995a:	3001      	addeq	r0, #1
 801995c:	4639      	moveq	r1, r7
 801995e:	f021 0101 	bicne.w	r1, r1, #1
 8019962:	1043      	asrs	r3, r0, #1
 8019964:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8019968:	0849      	lsrs	r1, r1, #1
 801996a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801996e:	07c2      	lsls	r2, r0, #31
 8019970:	bf48      	it	mi
 8019972:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019976:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801997a:	460c      	mov	r4, r1
 801997c:	463d      	mov	r5, r7
 801997e:	e77f      	b.n	8019880 <__ieee754_sqrt+0x34>
 8019980:	0ada      	lsrs	r2, r3, #11
 8019982:	3815      	subs	r0, #21
 8019984:	055b      	lsls	r3, r3, #21
 8019986:	2a00      	cmp	r2, #0
 8019988:	d0fa      	beq.n	8019980 <__ieee754_sqrt+0x134>
 801998a:	02d7      	lsls	r7, r2, #11
 801998c:	d50a      	bpl.n	80199a4 <__ieee754_sqrt+0x158>
 801998e:	f1c1 0420 	rsb	r4, r1, #32
 8019992:	fa23 f404 	lsr.w	r4, r3, r4
 8019996:	1e4d      	subs	r5, r1, #1
 8019998:	408b      	lsls	r3, r1
 801999a:	4322      	orrs	r2, r4
 801999c:	1b41      	subs	r1, r0, r5
 801999e:	e788      	b.n	80198b2 <__ieee754_sqrt+0x66>
 80199a0:	4608      	mov	r0, r1
 80199a2:	e7f0      	b.n	8019986 <__ieee754_sqrt+0x13a>
 80199a4:	0052      	lsls	r2, r2, #1
 80199a6:	3101      	adds	r1, #1
 80199a8:	e7ef      	b.n	801998a <__ieee754_sqrt+0x13e>
 80199aa:	46e0      	mov	r8, ip
 80199ac:	e7be      	b.n	801992c <__ieee754_sqrt+0xe0>
 80199ae:	bf00      	nop
 80199b0:	7ff00000 	.word	0x7ff00000

080199b4 <_init>:
 80199b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199b6:	bf00      	nop
 80199b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199ba:	bc08      	pop	{r3}
 80199bc:	469e      	mov	lr, r3
 80199be:	4770      	bx	lr

080199c0 <_fini>:
 80199c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80199c2:	bf00      	nop
 80199c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80199c6:	bc08      	pop	{r3}
 80199c8:	469e      	mov	lr, r3
 80199ca:	4770      	bx	lr
