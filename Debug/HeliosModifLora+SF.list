
HeliosModifLora+SF.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b480  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002290  0801b610  0801b610  0002b610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d8a0  0801d8a0  00030b18  2**0
                  CONTENTS
  4 .ARM          00000008  0801d8a0  0801d8a0  0002d8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d8a8  0801d8a8  00030b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d8a8  0801d8a8  0002d8a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d8ac  0801d8ac  0002d8ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b18  20000000  0801d8b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000032c0  20000b18  0801e3c8  00030b18  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  20003dd8  0801e3c8  00033dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00157ab0  00000000  00000000  00030b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b011  00000000  00000000  001885f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004170  00000000  00000000  00193610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003ce8  00000000  00000000  00197780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000315a6  00000000  00000000  0019b468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000456d9  00000000  00000000  001cca0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f75ca  00000000  00000000  002120e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  003096b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000126dc  00000000  00000000  00309704  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b18 	.word	0x20000b18
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b5f8 	.word	0x0801b5f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b1c 	.word	0x20000b1c
 80001cc:	0801b5f8 	.word	0x0801b5f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	460b      	mov	r3, r1
 8000f8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8000f8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000f90:	f017 f828 	bl	8017fe4 <USBD_static_malloc>
 8000f94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d105      	bne.n	8000fa8 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	e066      	b.n	8001076 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68fa      	ldr	r2, [r7, #12]
 8000fac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7c1b      	ldrb	r3, [r3, #16]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d119      	bne.n	8000fec <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	2181      	movs	r1, #129	; 0x81
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f016 fe11 	bl	8017be8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd0:	2202      	movs	r2, #2
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f016 fe07 	bl	8017be8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2210      	movs	r2, #16
 8000fe6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8000fea:	e016      	b.n	800101a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	2202      	movs	r2, #2
 8000ff0:	2181      	movs	r1, #129	; 0x81
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f016 fdf8 	bl	8017be8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8000ffe:	2340      	movs	r3, #64	; 0x40
 8001000:	2202      	movs	r2, #2
 8001002:	2101      	movs	r1, #1
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f016 fdef 	bl	8017be8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2210      	movs	r2, #16
 8001016:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800101a:	2308      	movs	r3, #8
 800101c:	2203      	movs	r2, #3
 800101e:	2182      	movs	r1, #130	; 0x82
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f016 fde1 	bl	8017be8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2201      	movs	r2, #1
 800102a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	2200      	movs	r2, #0
 800103c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	2200      	movs	r2, #0
 8001044:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7c1b      	ldrb	r3, [r3, #16]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d109      	bne.n	8001064 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	2101      	movs	r1, #1
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f016 ff3f 	bl	8017ee0 <USBD_LL_PrepareReceive>
 8001062:	e007      	b.n	8001074 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	2101      	movs	r1, #1
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f016 ff36 	bl	8017ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
 8001086:	460b      	mov	r3, r1
 8001088:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800108a:	2181      	movs	r1, #129	; 0x81
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f016 fde9 	bl	8017c64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8001098:	2101      	movs	r1, #1
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f016 fde2 	bl	8017c64 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80010a8:	2182      	movs	r1, #130	; 0x82
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f016 fdda 	bl	8017c64 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00e      	beq.n	80010e8 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80010da:	4618      	mov	r0, r3
 80010dc:	f016 ff90 	bl	8018000 <USBD_static_free>
    pdev->pClassData = NULL;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001104:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8001106:	2300      	movs	r3, #0
 8001108:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800110a:	2300      	movs	r3, #0
 800110c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800110e:	2300      	movs	r3, #0
 8001110:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d101      	bne.n	800111c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8001118:	2303      	movs	r3, #3
 800111a:	e0af      	b.n	800127c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8001124:	2b00      	cmp	r3, #0
 8001126:	d03f      	beq.n	80011a8 <USBD_CDC_Setup+0xb4>
 8001128:	2b20      	cmp	r3, #32
 800112a:	f040 809f 	bne.w	800126c <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	88db      	ldrh	r3, [r3, #6]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d02e      	beq.n	8001194 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	b25b      	sxtb	r3, r3
 800113c:	2b00      	cmp	r3, #0
 800113e:	da16      	bge.n	800116e <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	683a      	ldr	r2, [r7, #0]
 800114a:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800114c:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	88d2      	ldrh	r2, [r2, #6]
 8001152:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	88db      	ldrh	r3, [r3, #6]
 8001158:	2b07      	cmp	r3, #7
 800115a:	bf28      	it	cs
 800115c:	2307      	movcs	r3, #7
 800115e:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	89fa      	ldrh	r2, [r7, #14]
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f016 f8ab 	bl	80172c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800116c:	e085      	b.n	800127a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	785a      	ldrb	r2, [r3, #1]
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	88db      	ldrh	r3, [r3, #6]
 800117c:	b2da      	uxtb	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8001184:	6939      	ldr	r1, [r7, #16]
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	88db      	ldrh	r3, [r3, #6]
 800118a:	461a      	mov	r2, r3
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f016 f8c4 	bl	801731a <USBD_CtlPrepareRx>
      break;
 8001192:	e072      	b.n	800127a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	7850      	ldrb	r0, [r2, #1]
 80011a0:	2200      	movs	r2, #0
 80011a2:	6839      	ldr	r1, [r7, #0]
 80011a4:	4798      	blx	r3
      break;
 80011a6:	e068      	b.n	800127a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	785b      	ldrb	r3, [r3, #1]
 80011ac:	2b0b      	cmp	r3, #11
 80011ae:	d852      	bhi.n	8001256 <USBD_CDC_Setup+0x162>
 80011b0:	a201      	add	r2, pc, #4	; (adr r2, 80011b8 <USBD_CDC_Setup+0xc4>)
 80011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b6:	bf00      	nop
 80011b8:	080011e9 	.word	0x080011e9
 80011bc:	08001265 	.word	0x08001265
 80011c0:	08001257 	.word	0x08001257
 80011c4:	08001257 	.word	0x08001257
 80011c8:	08001257 	.word	0x08001257
 80011cc:	08001257 	.word	0x08001257
 80011d0:	08001257 	.word	0x08001257
 80011d4:	08001257 	.word	0x08001257
 80011d8:	08001257 	.word	0x08001257
 80011dc:	08001257 	.word	0x08001257
 80011e0:	08001213 	.word	0x08001213
 80011e4:	0800123d 	.word	0x0800123d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b03      	cmp	r3, #3
 80011f2:	d107      	bne.n	8001204 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80011f4:	f107 030a 	add.w	r3, r7, #10
 80011f8:	2202      	movs	r2, #2
 80011fa:	4619      	mov	r1, r3
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f016 f860 	bl	80172c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001202:	e032      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f015 ffea 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 800120c:	2303      	movs	r3, #3
 800120e:	75fb      	strb	r3, [r7, #23]
          break;
 8001210:	e02b      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001218:	b2db      	uxtb	r3, r3
 800121a:	2b03      	cmp	r3, #3
 800121c:	d107      	bne.n	800122e <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800121e:	f107 030d 	add.w	r3, r7, #13
 8001222:	2201      	movs	r2, #1
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f016 f84b 	bl	80172c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800122c:	e01d      	b.n	800126a <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800122e:	6839      	ldr	r1, [r7, #0]
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f015 ffd5 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8001236:	2303      	movs	r3, #3
 8001238:	75fb      	strb	r3, [r7, #23]
          break;
 800123a:	e016      	b.n	800126a <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001242:	b2db      	uxtb	r3, r3
 8001244:	2b03      	cmp	r3, #3
 8001246:	d00f      	beq.n	8001268 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8001248:	6839      	ldr	r1, [r7, #0]
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f015 ffc8 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8001250:	2303      	movs	r3, #3
 8001252:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8001254:	e008      	b.n	8001268 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001256:	6839      	ldr	r1, [r7, #0]
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	f015 ffc1 	bl	80171e0 <USBD_CtlError>
          ret = USBD_FAIL;
 800125e:	2303      	movs	r3, #3
 8001260:	75fb      	strb	r3, [r7, #23]
          break;
 8001262:	e002      	b.n	800126a <USBD_CDC_Setup+0x176>
          break;
 8001264:	bf00      	nop
 8001266:	e008      	b.n	800127a <USBD_CDC_Setup+0x186>
          break;
 8001268:	bf00      	nop
      }
      break;
 800126a:	e006      	b.n	800127a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800126c:	6839      	ldr	r1, [r7, #0]
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f015 ffb6 	bl	80171e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8001274:	2303      	movs	r3, #3
 8001276:	75fb      	strb	r3, [r7, #23]
      break;
 8001278:	bf00      	nop
  }

  return (uint8_t)ret;
 800127a:	7dfb      	ldrb	r3, [r7, #23]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
 800128c:	460b      	mov	r3, r1
 800128e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8001296:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e04f      	b.n	8001346 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80012ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012ae:	78fa      	ldrb	r2, [r7, #3]
 80012b0:	6879      	ldr	r1, [r7, #4]
 80012b2:	4613      	mov	r3, r2
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	4413      	add	r3, r2
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	3318      	adds	r3, #24
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d029      	beq.n	8001318 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80012c4:	78fa      	ldrb	r2, [r7, #3]
 80012c6:	6879      	ldr	r1, [r7, #4]
 80012c8:	4613      	mov	r3, r2
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	440b      	add	r3, r1
 80012d2:	3318      	adds	r3, #24
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	78f9      	ldrb	r1, [r7, #3]
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	460b      	mov	r3, r1
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	440b      	add	r3, r1
 80012e0:	00db      	lsls	r3, r3, #3
 80012e2:	4403      	add	r3, r0
 80012e4:	3338      	adds	r3, #56	; 0x38
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80012ec:	fb03 f301 	mul.w	r3, r3, r1
 80012f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d110      	bne.n	8001318 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	6879      	ldr	r1, [r7, #4]
 80012fa:	4613      	mov	r3, r2
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	3318      	adds	r3, #24
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800130a:	78f9      	ldrb	r1, [r7, #3]
 800130c:	2300      	movs	r3, #0
 800130e:	2200      	movs	r2, #0
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f016 fdad 	bl	8017e70 <USBD_LL_Transmit>
 8001316:	e015      	b.n	8001344 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	2200      	movs	r2, #0
 800131c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001326:	691b      	ldr	r3, [r3, #16]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00b      	beq.n	8001344 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8001340:	78fa      	ldrb	r2, [r7, #3]
 8001342:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b084      	sub	sp, #16
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001368:	2b00      	cmp	r3, #0
 800136a:	d101      	bne.n	8001370 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800136c:	2303      	movs	r3, #3
 800136e:	e015      	b.n	800139c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	4619      	mov	r1, r3
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f016 fdeb 	bl	8017f50 <USBD_LL_GetRxDataSize>
 800137a:	4602      	mov	r2, r0
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	68fa      	ldr	r2, [r7, #12]
 800138c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8001390:	68fa      	ldr	r2, [r7, #12]
 8001392:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8001396:	4611      	mov	r1, r2
 8001398:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80013b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e01b      	b.n	80013f6 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d015      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80013ce:	2bff      	cmp	r3, #255	; 0xff
 80013d0:	d010      	beq.n	80013f4 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80013d8:	689b      	ldr	r3, [r3, #8]
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80013e0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80013e8:	b292      	uxth	r2, r2
 80013ea:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	22ff      	movs	r2, #255	; 0xff
 80013f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2243      	movs	r2, #67	; 0x43
 800140c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800140e:	4b03      	ldr	r3, [pc, #12]	; (800141c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8001410:	4618      	mov	r0, r3
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	2000008c 	.word	0x2000008c

08001420 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2243      	movs	r2, #67	; 0x43
 800142c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800142e:	4b03      	ldr	r3, [pc, #12]	; (800143c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	20000048 	.word	0x20000048

08001440 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2243      	movs	r2, #67	; 0x43
 800144c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800144e:	4b03      	ldr	r3, [pc, #12]	; (800145c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8001450:	4618      	mov	r0, r3
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	200000d0 	.word	0x200000d0

08001460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	220a      	movs	r2, #10
 800146c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800146e:	4b03      	ldr	r3, [pc, #12]	; (800147c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8001470:	4618      	mov	r0, r3
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	20000000 	.word	0x20000000

08001480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8001490:	2303      	movs	r3, #3
 8001492:	e004      	b.n	800149e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b087      	sub	sp, #28
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	60b9      	str	r1, [r7, #8]
 80014b4:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014bc:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e008      	b.n	80014da <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	371c      	adds	r7, #28
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80014f6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80014fe:	2303      	movs	r3, #3
 8001500:	e004      	b.n	800150c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001526:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8001528:	2301      	movs	r3, #1
 800152a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8001536:	2303      	movs	r3, #3
 8001538:	e01a      	b.n	8001570 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001540:	2b00      	cmp	r3, #0
 8001542:	d114      	bne.n	800156e <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	2201      	movs	r2, #1
 8001548:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8001562:	2181      	movs	r1, #129	; 0x81
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f016 fc83 	bl	8017e70 <USBD_LL_Transmit>

    ret = USBD_OK;
 800156a:	2300      	movs	r3, #0
 800156c:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800156e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3710      	adds	r7, #16
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}

08001578 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001586:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8001592:	2303      	movs	r3, #3
 8001594:	e016      	b.n	80015c4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7c1b      	ldrb	r3, [r3, #16]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d109      	bne.n	80015b2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015a8:	2101      	movs	r1, #1
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f016 fc98 	bl	8017ee0 <USBD_LL_PrepareReceive>
 80015b0:	e007      	b.n	80015c2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80015b8:	2340      	movs	r3, #64	; 0x40
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f016 fc8f 	bl	8017ee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80015c2:	2300      	movs	r3, #0
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3710      	adds	r7, #16
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}

080015cc <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80015d0:	2200      	movs	r2, #0
 80015d2:	4905      	ldr	r1, [pc, #20]	; (80015e8 <CDC_Init_FS+0x1c>)
 80015d4:	4805      	ldr	r0, [pc, #20]	; (80015ec <CDC_Init_FS+0x20>)
 80015d6:	f7ff ff68 	bl	80014aa <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80015da:	4905      	ldr	r1, [pc, #20]	; (80015f0 <CDC_Init_FS+0x24>)
 80015dc:	4803      	ldr	r0, [pc, #12]	; (80015ec <CDC_Init_FS+0x20>)
 80015de:	f7ff ff82 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 80015e2:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20001180 	.word	0x20001180
 80015ec:	20003604 	.word	0x20003604
 80015f0:	200015a8 	.word	0x200015a8

080015f4 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 80015f8:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
 8001610:	4613      	mov	r3, r2
 8001612:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	2b23      	cmp	r3, #35	; 0x23
 8001618:	d84a      	bhi.n	80016b0 <CDC_Control_FS+0xac>
 800161a:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <CDC_Control_FS+0x1c>)
 800161c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001620:	080016b1 	.word	0x080016b1
 8001624:	080016b1 	.word	0x080016b1
 8001628:	080016b1 	.word	0x080016b1
 800162c:	080016b1 	.word	0x080016b1
 8001630:	080016b1 	.word	0x080016b1
 8001634:	080016b1 	.word	0x080016b1
 8001638:	080016b1 	.word	0x080016b1
 800163c:	080016b1 	.word	0x080016b1
 8001640:	080016b1 	.word	0x080016b1
 8001644:	080016b1 	.word	0x080016b1
 8001648:	080016b1 	.word	0x080016b1
 800164c:	080016b1 	.word	0x080016b1
 8001650:	080016b1 	.word	0x080016b1
 8001654:	080016b1 	.word	0x080016b1
 8001658:	080016b1 	.word	0x080016b1
 800165c:	080016b1 	.word	0x080016b1
 8001660:	080016b1 	.word	0x080016b1
 8001664:	080016b1 	.word	0x080016b1
 8001668:	080016b1 	.word	0x080016b1
 800166c:	080016b1 	.word	0x080016b1
 8001670:	080016b1 	.word	0x080016b1
 8001674:	080016b1 	.word	0x080016b1
 8001678:	080016b1 	.word	0x080016b1
 800167c:	080016b1 	.word	0x080016b1
 8001680:	080016b1 	.word	0x080016b1
 8001684:	080016b1 	.word	0x080016b1
 8001688:	080016b1 	.word	0x080016b1
 800168c:	080016b1 	.word	0x080016b1
 8001690:	080016b1 	.word	0x080016b1
 8001694:	080016b1 	.word	0x080016b1
 8001698:	080016b1 	.word	0x080016b1
 800169c:	080016b1 	.word	0x080016b1
 80016a0:	080016b1 	.word	0x080016b1
 80016a4:	080016b1 	.word	0x080016b1
 80016a8:	080016b1 	.word	0x080016b1
 80016ac:	080016b1 	.word	0x080016b1
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 80016b0:	bf00      	nop
	}

	return (USBD_OK);
 80016b2:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <CDC_Receive_FS>:
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */

//LBLeo
uint8_t received_data[64];
int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	480f      	ldr	r0, [pc, #60]	; (800170c <CDC_Receive_FS+0x4c>)
 80016ce:	f7ff ff0a 	bl	80014e6 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80016d2:	480e      	ldr	r0, [pc, #56]	; (800170c <CDC_Receive_FS+0x4c>)
 80016d4:	f7ff ff50 	bl	8001578 <USBD_CDC_ReceivePacket>

	//LBLeo
	memset(received_data, 0, 64);
 80016d8:	2240      	movs	r2, #64	; 0x40
 80016da:	2100      	movs	r1, #0
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <CDC_Receive_FS+0x50>)
 80016de:	f016 fcdb 	bl	8018098 <memset>
	uint8_t len = (uint8_t) *Len;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	73fb      	strb	r3, [r7, #15]
	memcpy(received_data, Buf, len);
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	461a      	mov	r2, r3
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4808      	ldr	r0, [pc, #32]	; (8001710 <CDC_Receive_FS+0x50>)
 80016f0:	f016 fcc4 	bl	801807c <memcpy>
	memset(Buf, 0, len);
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	461a      	mov	r2, r3
 80016f8:	2100      	movs	r1, #0
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f016 fccc 	bl	8018098 <memset>

	return (USBD_OK);
 8001700:	2300      	movs	r3, #0
	/* USER CODE END 6 */
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20003604 	.word	0x20003604
 8001710:	20001568 	.word	0x20001568

08001714 <CDC_Transmit_FS>:
 *
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_FS(uint8_t *Buf, uint16_t Len) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	460b      	mov	r3, r1
 800171e:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8001720:	2300      	movs	r3, #0
 8001722:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 7 */
	USBD_CDC_HandleTypeDef *hcdc =
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <CDC_Transmit_FS+0x48>)
 8001726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800172a:	60bb      	str	r3, [r7, #8]
			(USBD_CDC_HandleTypeDef*) hUsbDeviceFS.pClassData;
	if (hcdc->TxState != 0) {
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <CDC_Transmit_FS+0x26>
		return USBD_BUSY;
 8001736:	2301      	movs	r3, #1
 8001738:	e00b      	b.n	8001752 <CDC_Transmit_FS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800173a:	887b      	ldrh	r3, [r7, #2]
 800173c:	461a      	mov	r2, r3
 800173e:	6879      	ldr	r1, [r7, #4]
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <CDC_Transmit_FS+0x48>)
 8001742:	f7ff feb2 	bl	80014aa <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <CDC_Transmit_FS+0x48>)
 8001748:	f7ff fee6 	bl	8001518 <USBD_CDC_TransmitPacket>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 7 */
	return result;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20003604 	.word	0x20003604

08001760 <CDC_TransmitCplt_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum) {
 8001760:	b480      	push	{r7}
 8001762:	b087      	sub	sp, #28
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	4613      	mov	r3, r2
 800176c:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 13 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 13 */
	return result;
 8001772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001776:	4618      	mov	r0, r3
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr
	...

08001784 <display_Init>:
extern unsigned char ID_Sigfox[8];
/*
 * Permet de faire l'initialisation  de l'�cran au d�marrage
 */
void display_Init(uint8_t b_display_msg)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	71fb      	strb	r3, [r7, #7]
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c,
 800178e:	4b0e      	ldr	r3, [pc, #56]	; (80017c8 <display_Init+0x44>)
 8001790:	4a0e      	ldr	r2, [pc, #56]	; (80017cc <display_Init+0x48>)
 8001792:	490f      	ldr	r1, [pc, #60]	; (80017d0 <display_Init+0x4c>)
 8001794:	480f      	ldr	r0, [pc, #60]	; (80017d4 <display_Init+0x50>)
 8001796:	f006 fec1 	bl	800851c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 800179a:	480e      	ldr	r0, [pc, #56]	; (80017d4 <display_Init+0x50>)
 800179c:	f008 fad6 	bl	8009d4c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017a0:	2100      	movs	r1, #0
 80017a2:	480c      	ldr	r0, [pc, #48]	; (80017d4 <display_Init+0x50>)
 80017a4:	f008 fae1 	bl	8009d6a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017a8:	480a      	ldr	r0, [pc, #40]	; (80017d4 <display_Init+0x50>)
 80017aa:	f006 fe91 	bl	80084d0 <u8g2_ClearDisplay>
	if (b_display_msg)
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <display_Init+0x34>
		display_Chargement_perso();
 80017b4:	f000 fb50 	bl	8001e58 <display_Chargement_perso>
	u8g2_FirstPage(&u8g2);  // EJ : test bug ecran clear
 80017b8:	4806      	ldr	r0, [pc, #24]	; (80017d4 <display_Init+0x50>)
 80017ba:	f006 fe47 	bl	800844c <u8g2_FirstPage>
}
 80017be:	bf00      	nop
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	08002899 	.word	0x08002899
 80017cc:	080027d9 	.word	0x080027d9
 80017d0:	0801d2f8 	.word	0x0801d2f8
 80017d4:	200026f8 	.word	0x200026f8

080017d8 <display_InitBis>:

void display_InitBis()
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	//u8g2_Setup_sh1106_i2c_128x64_noname_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c, u8x8_gpio_and_delay);
	u8g2_Setup_ssd1306_i2c_128x32_univision_1(&u8g2, U8G2_R0, u8x8_byte_hw_i2c,
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <display_InitBis+0x28>)
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <display_InitBis+0x2c>)
 80017e0:	4909      	ldr	r1, [pc, #36]	; (8001808 <display_InitBis+0x30>)
 80017e2:	480a      	ldr	r0, [pc, #40]	; (800180c <display_InitBis+0x34>)
 80017e4:	f006 fe9a 	bl	800851c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 80017e8:	4808      	ldr	r0, [pc, #32]	; (800180c <display_InitBis+0x34>)
 80017ea:	f008 faaf 	bl	8009d4c <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80017ee:	2100      	movs	r1, #0
 80017f0:	4806      	ldr	r0, [pc, #24]	; (800180c <display_InitBis+0x34>)
 80017f2:	f008 faba 	bl	8009d6a <u8x8_SetPowerSave>
	u8g2_ClearDisplay(&u8g2);
 80017f6:	4805      	ldr	r0, [pc, #20]	; (800180c <display_InitBis+0x34>)
 80017f8:	f006 fe6a 	bl	80084d0 <u8g2_ClearDisplay>
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	08002899 	.word	0x08002899
 8001804:	080027d9 	.word	0x080027d9
 8001808:	0801d2f8 	.word	0x0801d2f8
 800180c:	200026f8 	.word	0x200026f8

08001810 <display_dco>:
 * ainsi que les etats des alertes, du GPS , du reseau et de la batterie
 */
void display_dco(float TabFloatValue[], int TabAlert[], int TabGen[],
		uint32_t TabTimer[], char name[], char *msg1, char *msg2, char *msg3,
		char *msg4)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b0b8      	sub	sp, #224	; 0xe0
 8001814:	af00      	add	r7, sp, #0
 8001816:	6178      	str	r0, [r7, #20]
 8001818:	6139      	str	r1, [r7, #16]
 800181a:	60fa      	str	r2, [r7, #12]
 800181c:	60bb      	str	r3, [r7, #8]

	char str_ppm[] = " PPM";
 800181e:	4ab0      	ldr	r2, [pc, #704]	; (8001ae0 <display_dco+0x2d0>)
 8001820:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001824:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001828:	6018      	str	r0, [r3, #0]
 800182a:	3304      	adds	r3, #4
 800182c:	7019      	strb	r1, [r3, #0]
	char poucent[] = " %";
 800182e:	4aad      	ldr	r2, [pc, #692]	; (8001ae4 <display_dco+0x2d4>)
 8001830:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4611      	mov	r1, r2
 8001838:	8019      	strh	r1, [r3, #0]
 800183a:	3302      	adds	r3, #2
 800183c:	0c12      	lsrs	r2, r2, #16
 800183e:	701a      	strb	r2, [r3, #0]
	char vme[] = " VME";
 8001840:	4aa9      	ldr	r2, [pc, #676]	; (8001ae8 <display_dco+0x2d8>)
 8001842:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001846:	e892 0003 	ldmia.w	r2, {r0, r1}
 800184a:	6018      	str	r0, [r3, #0]
 800184c:	3304      	adds	r3, #4
 800184e:	7019      	strb	r1, [r3, #0]
	char manque[] = " <<";
 8001850:	4ba6      	ldr	r3, [pc, #664]	; (8001aec <display_dco+0x2dc>)
 8001852:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	char explo[] = " >>";
 8001856:	4ba6      	ldr	r3, [pc, #664]	; (8001af0 <display_dco+0x2e0>)
 8001858:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	char vlct[] = " VLCT";
 800185c:	4aa5      	ldr	r2, [pc, #660]	; (8001af4 <display_dco+0x2e4>)
 800185e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001862:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001866:	6018      	str	r0, [r3, #0]
 8001868:	3304      	adds	r3, #4
 800186a:	8019      	strh	r1, [r3, #0]
	char db[] = " dB";
 800186c:	4ba2      	ldr	r3, [pc, #648]	; (8001af8 <display_dco+0x2e8>)
 800186e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char str_H2S[30] =
 8001872:	2300      	movs	r3, #0
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001878:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
 8001888:	615a      	str	r2, [r3, #20]
 800188a:	831a      	strh	r2, [r3, #24]
	{ 0 };
	char str_O2[30] =
 800188c:	2300      	movs	r3, #0
 800188e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001890:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
 80018a0:	615a      	str	r2, [r3, #20]
 80018a2:	831a      	strh	r2, [r3, #24]
	{ 0 };
	char str_CO[30] =
 80018a4:	2300      	movs	r3, #0
 80018a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80018a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	615a      	str	r2, [r3, #20]
 80018ba:	831a      	strh	r2, [r3, #24]
	{ 0 };
	char str_EX[30] =
 80018bc:	2300      	movs	r3, #0
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
 80018c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	60da      	str	r2, [r3, #12]
 80018ce:	611a      	str	r2, [r3, #16]
 80018d0:	615a      	str	r2, [r3, #20]
 80018d2:	831a      	strh	r2, [r3, #24]
	{ 0 };

	char str_son[6] =
 80018d4:	2300      	movs	r3, #0
 80018d6:	633b      	str	r3, [r7, #48]	; 0x30
 80018d8:	2300      	movs	r3, #0
 80018da:	86bb      	strh	r3, [r7, #52]	; 0x34
	{ 0 };

	// H2S
	strcat(str_H2S, str_taux_H2S);
 80018dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018e0:	4986      	ldr	r1, [pc, #536]	; (8001afc <display_dco+0x2ec>)
 80018e2:	4618      	mov	r0, r3
 80018e4:	f017 f8d8 	bl	8018a98 <strcat>
	strcat(str_H2S, msg1);
 80018e8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ec:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80018f0:	4618      	mov	r0, r3
 80018f2:	f017 f8d1 	bl	8018a98 <strcat>
	strcat(str_H2S, str_ppm);
 80018f6:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 80018fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018fe:	4611      	mov	r1, r2
 8001900:	4618      	mov	r0, r3
 8001902:	f017 f8c9 	bl	8018a98 <strcat>
	if (TabAlert[ALERT_H2SVLCT] == 1)
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	3320      	adds	r3, #32
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d108      	bne.n	8001922 <display_dco+0x112>
	{
		strcat(str_H2S, vlct);
 8001910:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 8001914:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001918:	4611      	mov	r1, r2
 800191a:	4618      	mov	r0, r3
 800191c:	f017 f8bc 	bl	8018a98 <strcat>
 8001920:	e00c      	b.n	800193c <display_dco+0x12c>
	}
	else if (TabAlert[ALERT_H2SVME] == 1)
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	331c      	adds	r3, #28
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d107      	bne.n	800193c <display_dco+0x12c>
	{
		strcat(str_H2S, vme);
 800192c:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 8001930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f017 f8ae 	bl	8018a98 <strcat>
	}
	// O2 clignotement
	strcat(str_O2, str_taux_O2);
 800193c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001940:	496f      	ldr	r1, [pc, #444]	; (8001b00 <display_dco+0x2f0>)
 8001942:	4618      	mov	r0, r3
 8001944:	f017 f8a8 	bl	8018a98 <strcat>
	strcat(str_O2, msg2);
 8001948:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800194c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001950:	4618      	mov	r0, r3
 8001952:	f017 f8a1 	bl	8018a98 <strcat>
	strcat(str_O2, poucent);
 8001956:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800195a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f017 f899 	bl	8018a98 <strcat>
	if (TabAlert[ALERT_O2] == 1)
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3324      	adds	r3, #36	; 0x24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d107      	bne.n	8001980 <display_dco+0x170>
	{
		strcat(str_O2, manque);
 8001970:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001974:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f017 f88c 	bl	8018a98 <strcat>
	}

	//CO pas afficher
	strcat(str_CO, str_taux_CO);
 8001980:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001984:	495f      	ldr	r1, [pc, #380]	; (8001b04 <display_dco+0x2f4>)
 8001986:	4618      	mov	r0, r3
 8001988:	f017 f886 	bl	8018a98 <strcat>
	strcat(str_CO, msg3);
 800198c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001990:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8001994:	4618      	mov	r0, r3
 8001996:	f017 f87f 	bl	8018a98 <strcat>
	strcat(str_CO, str_ppm);
 800199a:	f107 02d8 	add.w	r2, r7, #216	; 0xd8
 800199e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019a2:	4611      	mov	r1, r2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f017 f877 	bl	8018a98 <strcat>
	if (TabAlert[ALERT_COVLCT] == 1)
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	332c      	adds	r3, #44	; 0x2c
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d108      	bne.n	80019c6 <display_dco+0x1b6>
	{
		strcat(str_CO, vlct);
 80019b4:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 80019b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019bc:	4611      	mov	r1, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f017 f86a 	bl	8018a98 <strcat>
 80019c4:	e00c      	b.n	80019e0 <display_dco+0x1d0>
	}
	else if (TabAlert[ALERT_COVME] == +1)
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	3328      	adds	r3, #40	; 0x28
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d107      	bne.n	80019e0 <display_dco+0x1d0>
	{
		strcat(str_CO, vme);
 80019d0:	f107 02cc 	add.w	r2, r7, #204	; 0xcc
 80019d4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f017 f85c 	bl	8018a98 <strcat>
	}

	// EX
	strcat(str_EX, str_taux_EX);
 80019e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e4:	4948      	ldr	r1, [pc, #288]	; (8001b08 <display_dco+0x2f8>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f017 f856 	bl	8018a98 <strcat>

	strcat(str_EX, msg4);
 80019ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019f0:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80019f4:	4618      	mov	r0, r3
 80019f6:	f017 f84f 	bl	8018a98 <strcat>
	strcat(str_EX, poucent);
 80019fa:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 80019fe:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f017 f847 	bl	8018a98 <strcat>
	if (TabAlert[ALERT_EX] == 1)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	3330      	adds	r3, #48	; 0x30
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <display_dco+0x214>
	{
		strcat(str_EX, explo);
 8001a14:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8001a18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f017 f83a 	bl	8018a98 <strcat>
	}

	son = ((uint8_t) TabFloatValue[DB_VALUE]) + 10;
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	3310      	adds	r3, #16
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a30:	edc7 7a01 	vstr	s15, [r7, #4]
 8001a34:	793b      	ldrb	r3, [r7, #4]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	330a      	adds	r3, #10
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <display_dco+0x2fc>)
 8001a3e:	701a      	strb	r2, [r3, #0]

	sprintf(str_son, "%i", son);
 8001a40:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <display_dco+0x2fc>)
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a4a:	4931      	ldr	r1, [pc, #196]	; (8001b10 <display_dco+0x300>)
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f017 f803 	bl	8018a58 <siprintf>
	strcat(str_son, db);
 8001a52:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001a56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 f81b 	bl	8018a98 <strcat>

	u8g2_FirstPage(&u8g2);
 8001a62:	482c      	ldr	r0, [pc, #176]	; (8001b14 <display_dco+0x304>)
 8001a64:	f006 fcf2 	bl	800844c <u8g2_FirstPage>

	do
	{

		char str_display[18];
		u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001a68:	492b      	ldr	r1, [pc, #172]	; (8001b18 <display_dco+0x308>)
 8001a6a:	482a      	ldr	r0, [pc, #168]	; (8001b14 <display_dco+0x304>)
 8001a6c:	f007 faec 	bl	8009048 <u8g2_SetFont>
		if (IMU_nodata == 100)
 8001a70:	4b2a      	ldr	r3, [pc, #168]	; (8001b1c <display_dco+0x30c>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b64      	cmp	r3, #100	; 0x64
 8001a76:	d106      	bne.n	8001a86 <display_dco+0x276>
		{
			u8g2_DrawStr(&u8g2, 45, 8, "!IMU!");
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <display_dco+0x310>)
 8001a7a:	2208      	movs	r2, #8
 8001a7c:	212d      	movs	r1, #45	; 0x2d
 8001a7e:	4825      	ldr	r0, [pc, #148]	; (8001b14 <display_dco+0x304>)
 8001a80:	f007 fa40 	bl	8008f04 <u8g2_DrawStr>
 8001a84:	e009      	b.n	8001a9a <display_dco+0x28a>
		}
		else
		{
			sprintf(str_display, "%d mA", TabGen[AVG_CURRENT]);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	f107 031c 	add.w	r3, r7, #28
 8001a92:	4924      	ldr	r1, [pc, #144]	; (8001b24 <display_dco+0x314>)
 8001a94:	4618      	mov	r0, r3
 8001a96:	f016 ffdf 	bl	8018a58 <siprintf>
		}

//		if(WIFI == 1)  // display MAC of the closest Wifi on the screen
//			display_Wifi(TabGen, name);

		if (c1.loraP2P == 1)
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <display_dco+0x318>)
 8001a9c:	799b      	ldrb	r3, [r3, #6]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d102      	bne.n	8001aa8 <display_dco+0x298>
			RepeaterLinkStatus(TabGen);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 f944 	bl	8001d30 <RepeaterLinkStatus>

		if (c1.com_sigfox == 1 || c1.com_LoRa == 1)
 8001aa8:	4b1f      	ldr	r3, [pc, #124]	; (8001b28 <display_dco+0x318>)
 8001aaa:	79db      	ldrb	r3, [r3, #7]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d003      	beq.n	8001ab8 <display_dco+0x2a8>
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <display_dco+0x318>)
 8001ab2:	7a1b      	ldrb	r3, [r3, #8]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d13e      	bne.n	8001b36 <display_dco+0x326>
		{
//			if(c1.com_sigfox == 1 && c1.com_LoRa == 1)
//				NetworkStatus(TabGen);

			if (HAL_GetTick() - TabTimer[ACK_TIMER] <= SEC_ONOFF_SCREEN * 1000
 8001ab8:	f00a f8fa 	bl	800bcb0 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d830      	bhi.n	8001b30 <display_dco+0x320>
					&& TabTimer[ACK_TIMER] != 0)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	330c      	adds	r3, #12
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d02b      	beq.n	8001b30 <display_dco+0x320>
			{
				//NetworkStatus(TabGen);
				show_RSSI = 1;
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <display_dco+0x31c>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	701a      	strb	r2, [r3, #0]
 8001ade:	e02a      	b.n	8001b36 <display_dco+0x326>
 8001ae0:	0801b624 	.word	0x0801b624
 8001ae4:	0801b62c 	.word	0x0801b62c
 8001ae8:	0801b630 	.word	0x0801b630
 8001aec:	003c3c20 	.word	0x003c3c20
 8001af0:	003e3e20 	.word	0x003e3e20
 8001af4:	0801b638 	.word	0x0801b638
 8001af8:	00426420 	.word	0x00426420
 8001afc:	2000078c 	.word	0x2000078c
 8001b00:	20000794 	.word	0x20000794
 8001b04:	2000079c 	.word	0x2000079c
 8001b08:	200007a4 	.word	0x200007a4
 8001b0c:	20000c0f 	.word	0x20000c0f
 8001b10:	0801b610 	.word	0x0801b610
 8001b14:	200026f8 	.word	0x200026f8
 8001b18:	0801bebc 	.word	0x0801bebc
 8001b1c:	20000c24 	.word	0x20000c24
 8001b20:	0801b614 	.word	0x0801b614
 8001b24:	0801b61c 	.word	0x0801b61c
 8001b28:	20001158 	.word	0x20001158
 8001b2c:	20000b34 	.word	0x20000b34
			}
			else
				show_RSSI = 0;
 8001b30:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <display_dco+0x380>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
		}
		//display_son(son);
		if (c1.GPS_Actif == 1 && show_RSSI == 0)
 8001b36:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <display_dco+0x384>)
 8001b38:	7a5b      	ldrb	r3, [r3, #9]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10a      	bne.n	8001b54 <display_dco+0x344>
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <display_dco+0x380>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d106      	bne.n	8001b54 <display_dco+0x344>
			display_GPS_status(status_GPS, TabTimer, TabGen);
 8001b46:	4b14      	ldr	r3, [pc, #80]	; (8001b98 <display_dco+0x388>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	68b9      	ldr	r1, [r7, #8]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 f82c 	bl	8001bac <display_GPS_status>

		if (BATTERYOK == 1 && SUEZ == 0)
			display_BatteryLvl(batteryLevel, 108, 0);
 8001b54:	4b11      	ldr	r3, [pc, #68]	; (8001b9c <display_dco+0x38c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	216c      	movs	r1, #108	; 0x6c
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f000 ff1d 	bl	800299c <display_BatteryLvl>
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001b62:	490f      	ldr	r1, [pc, #60]	; (8001ba0 <display_dco+0x390>)
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <display_dco+0x394>)
 8001b66:	f007 fa6f 	bl	8009048 <u8g2_SetFont>
		}
		else if (SUEZ == 1)
		{
			u8g2_DrawStr(&u8g2, 2, 17, str_H2S);
		}
		display_Alerte(TabGen, alerte);
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <display_dco+0x398>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	4619      	mov	r1, r3
 8001b70:	68f8      	ldr	r0, [r7, #12]
 8001b72:	f000 fb0f 	bl	8002194 <display_Alerte>
	} while (u8g2_NextPage(&u8g2));
 8001b76:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <display_dco+0x394>)
 8001b78:	f006 fc7c 	bl	8008474 <u8g2_NextPage>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f47f af72 	bne.w	8001a68 <display_dco+0x258>
	//blink_soundLevel = !blink_soundLevel;
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	37e0      	adds	r7, #224	; 0xe0
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000b34 	.word	0x20000b34
 8001b94:	20001158 	.word	0x20001158
 8001b98:	20000c0d 	.word	0x20000c0d
 8001b9c:	20000c0c 	.word	0x20000c0c
 8001ba0:	0801c6b8 	.word	0x0801c6b8
 8001ba4:	200026f8 	.word	0x200026f8
 8001ba8:	20000c0e 	.word	0x20000c0e

08001bac <display_GPS_status>:

/*
 * Permet d'afficher l'etat du GPS
 */
void display_GPS_status(uint8_t status, uint32_t TabGpsTimer[], int TabGen[])
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b08e      	sub	sp, #56	; 0x38
 8001bb0:	af02      	add	r7, sp, #8
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
 8001bb8:	73fb      	strb	r3, [r7, #15]
	uint32_t last_update = 0;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	char str_last[8];
	char nb_sat[2];

//	TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick() - 8 *60 * 1000 *59 ;

	if (TabGen[GPS_ON] == 1)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d10a      	bne.n	8001bde <display_GPS_status+0x32>
	{
		sprintf(nb_sat, "%d", TabGen[NB_SATT_FOUND]);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	494a      	ldr	r1, [pc, #296]	; (8001d00 <display_GPS_status+0x154>)
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f016 ff3e 	bl	8018a58 <siprintf>
 8001bdc:	e001      	b.n	8001be2 <display_GPS_status+0x36>
//				else if (TabGen[NB_SATT_FOUND] >= 5)
//					strcat(str_last, "+");  // concatenation

	}
	else
		strcpy(nb_sat, ".");  // concatenation
 8001bde:	232e      	movs	r3, #46	; 0x2e
 8001be0:	82bb      	strh	r3, [r7, #20]

	//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);	
	//u8g2_DrawStr(&u8g2, 60, 8, nb_sat); 		// Display elasped time since last good GPS position

	if (TabGpsTimer[LAST_UPDATE_GPS] <= 0) // never got location
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	3308      	adds	r3, #8
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <display_GPS_status+0x46>
		last_update = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bf0:	e065      	b.n	8001cbe <display_GPS_status+0x112>
	else // last update seems valid, display time on screen
	{
		// display time when location acquired
		last_update = (HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000
 8001bf2:	f00a f85d 	bl	800bcb0 <HAL_GetTick>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	3308      	adds	r3, #8
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	4a40      	ldr	r2, [pc, #256]	; (8001d04 <display_GPS_status+0x158>)
 8001c02:	fba2 2303 	umull	r2, r3, r2, r3
 8001c06:	0b9b      	lsrs	r3, r3, #14
 8001c08:	3301      	adds	r3, #1
 8001c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
				+ 1; //    / 60000

		if (last_update > (8 * 60))
 8001c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c0e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001c12:	d909      	bls.n	8001c28 <display_GPS_status+0x7c>
		{
			strcpy(str_last, "++"); // copy
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4a3b      	ldr	r2, [pc, #236]	; (8001d08 <display_GPS_status+0x15c>)
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	8019      	strh	r1, [r3, #0]
 8001c20:	3302      	adds	r3, #2
 8001c22:	0c12      	lsrs	r2, r2, #16
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e031      	b.n	8001c8c <display_GPS_status+0xe0>
		}
		else
		{
			if (last_update >= 60)
 8001c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2a:	2b3b      	cmp	r3, #59	; 0x3b
 8001c2c:	d91a      	bls.n	8001c64 <display_GPS_status+0xb8>
			{
				sprintf(str_last, "%u", last_update / 60);
 8001c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c30:	4a36      	ldr	r2, [pc, #216]	; (8001d0c <display_GPS_status+0x160>)
 8001c32:	fba2 2303 	umull	r2, r3, r2, r3
 8001c36:	095a      	lsrs	r2, r3, #5
 8001c38:	f107 0318 	add.w	r3, r7, #24
 8001c3c:	4934      	ldr	r1, [pc, #208]	; (8001d10 <display_GPS_status+0x164>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f016 ff0a 	bl	8018a58 <siprintf>
				strcat(str_last, "h");  // concatenation
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fac1 	bl	80001d0 <strlen>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	461a      	mov	r2, r3
 8001c52:	f107 0318 	add.w	r3, r7, #24
 8001c56:	4413      	add	r3, r2
 8001c58:	492e      	ldr	r1, [pc, #184]	; (8001d14 <display_GPS_status+0x168>)
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	8013      	strh	r3, [r2, #0]
 8001c62:	e013      	b.n	8001c8c <display_GPS_status+0xe0>
			}
			else
			{
				sprintf(str_last, "%u", last_update);
 8001c64:	f107 0318 	add.w	r3, r7, #24
 8001c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c6a:	4929      	ldr	r1, [pc, #164]	; (8001d10 <display_GPS_status+0x164>)
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f016 fef3 	bl	8018a58 <siprintf>
				strcat(str_last, "min");  // concatenation
 8001c72:	f107 0318 	add.w	r3, r7, #24
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe faaa 	bl	80001d0 <strlen>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	461a      	mov	r2, r3
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4413      	add	r3, r2
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <display_GPS_status+0x16c>)
 8001c88:	6810      	ldr	r0, [r2, #0]
 8001c8a:	6018      	str	r0, [r3, #0]
			}
			//strcat(str_last, nb_sat);  // concatenation
		}
		//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
		u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001c8c:	4923      	ldr	r1, [pc, #140]	; (8001d1c <display_GPS_status+0x170>)
 8001c8e:	4824      	ldr	r0, [pc, #144]	; (8001d20 <display_GPS_status+0x174>)
 8001c90:	f007 f9da 	bl	8009048 <u8g2_SetFont>
		sprintf(str_display, "GPS:");
 8001c94:	f107 0320 	add.w	r3, r7, #32
 8001c98:	4922      	ldr	r1, [pc, #136]	; (8001d24 <display_GPS_status+0x178>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f016 fedc 	bl	8018a58 <siprintf>
		strcat(str_display, str_last);
 8001ca0:	f107 0218 	add.w	r2, r7, #24
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f016 fef4 	bl	8018a98 <strcat>
		u8g2_DrawStr(&u8g2, 0, 8, str_display); // Display elasped time since last good GPS position
 8001cb0:	f107 0320 	add.w	r3, r7, #32
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	4819      	ldr	r0, [pc, #100]	; (8001d20 <display_GPS_status+0x174>)
 8001cba:	f007 f923 	bl	8008f04 <u8g2_DrawStr>
	}

//	u8g2_SetFont(&u8g2,u8g2_font_t0_11_tr); // fonctionne
	if (last_update > 0 && last_update <= 1)  // (status)
 8001cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00d      	beq.n	8001ce0 <display_GPS_status+0x134>
 8001cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d80a      	bhi.n	8001ce0 <display_GPS_status+0x134>
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_on_width, gps_on_height,
 8001cca:	4b17      	ldr	r3, [pc, #92]	; (8001d28 <display_GPS_status+0x17c>)
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	230c      	movs	r3, #12
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	215a      	movs	r1, #90	; 0x5a
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <display_GPS_status+0x174>)
 8001cda:	f006 fae9 	bl	80082b0 <u8g2_DrawXBM>
 8001cde:	e00a      	b.n	8001cf6 <display_GPS_status+0x14a>
				(uint8_t*) gps_on_bits);
	}
	else
	{
		u8g2_DrawXBM(&u8g2, 90, 0, gps_off_width, gps_off_height,
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <display_GPS_status+0x180>)
 8001ce2:	9301      	str	r3, [sp, #4]
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	230c      	movs	r3, #12
 8001cea:	2200      	movs	r2, #0
 8001cec:	215a      	movs	r1, #90	; 0x5a
 8001cee:	480c      	ldr	r0, [pc, #48]	; (8001d20 <display_GPS_status+0x174>)
 8001cf0:	f006 fade 	bl	80082b0 <u8g2_DrawXBM>
				(uint8_t*) gps_off_bits);
	}
}
 8001cf4:	bf00      	nop
 8001cf6:	bf00      	nop
 8001cf8:	3730      	adds	r7, #48	; 0x30
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	0801b644 	.word	0x0801b644
 8001d04:	45e7b273 	.word	0x45e7b273
 8001d08:	0801b648 	.word	0x0801b648
 8001d0c:	88888889 	.word	0x88888889
 8001d10:	0801b64c 	.word	0x0801b64c
 8001d14:	0801b650 	.word	0x0801b650
 8001d18:	0801b654 	.word	0x0801b654
 8001d1c:	0801bebc 	.word	0x0801bebc
 8001d20:	200026f8 	.word	0x200026f8
 8001d24:	0801b658 	.word	0x0801b658
 8001d28:	20000774 	.word	0x20000774
 8001d2c:	2000075c 	.word	0x2000075c

08001d30 <RepeaterLinkStatus>:
	}

}

void RepeaterLinkStatus(int TabGen[])
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af02      	add	r7, sp, #8
 8001d36:	6078      	str	r0, [r7, #4]
	char str_display[18];
	u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001d38:	492b      	ldr	r1, [pc, #172]	; (8001de8 <RepeaterLinkStatus+0xb8>)
 8001d3a:	482c      	ldr	r0, [pc, #176]	; (8001dec <RepeaterLinkStatus+0xbc>)
 8001d3c:	f007 f984 	bl	8009048 <u8g2_SetFont>
	if (TabGen[STATUS_REP] == 1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d13b      	bne.n	8001dc4 <RepeaterLinkStatus+0x94>
	{

		display_BatteryLvl(TabGen[BATT_REP] * 20, 0, 0);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	461a      	mov	r2, r3
 8001d58:	0092      	lsls	r2, r2, #2
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	2200      	movs	r2, #0
 8001d62:	2100      	movs	r1, #0
 8001d64:	4618      	mov	r0, r3
 8001d66:	f000 fe19 	bl	800299c <display_BatteryLvl>
		sprintf(str_display, "Rep(-%d)", TabGen[REP_RSSI]);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	f107 030c 	add.w	r3, r7, #12
 8001d76:	491e      	ldr	r1, [pc, #120]	; (8001df0 <RepeaterLinkStatus+0xc0>)
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f016 fe6d 	bl	8018a58 <siprintf>
		//sprintf(str_display, TabG);
		u8g2_DrawStr(&u8g2, 24, 11, str_display);
 8001d7e:	f107 030c 	add.w	r3, r7, #12
 8001d82:	220b      	movs	r2, #11
 8001d84:	2118      	movs	r1, #24
 8001d86:	4819      	ldr	r0, [pc, #100]	; (8001dec <RepeaterLinkStatus+0xbc>)
 8001d88:	f007 f8bc 	bl	8008f04 <u8g2_DrawStr>

		if (TabGen[GPS_REP] == 1)  // (status)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d10a      	bne.n	8001dae <RepeaterLinkStatus+0x7e>
		{
			u8g2_DrawXBM(&u8g2, 90, 0, gps_on_width, gps_on_height,
 8001d98:	4b16      	ldr	r3, [pc, #88]	; (8001df4 <RepeaterLinkStatus+0xc4>)
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	230c      	movs	r3, #12
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	230c      	movs	r3, #12
 8001da2:	2200      	movs	r2, #0
 8001da4:	215a      	movs	r1, #90	; 0x5a
 8001da6:	4811      	ldr	r0, [pc, #68]	; (8001dec <RepeaterLinkStatus+0xbc>)
 8001da8:	f006 fa82 	bl	80082b0 <u8g2_DrawXBM>
	{
		sprintf(str_display, "Rep.   Lien KO");
		u8g2_DrawStr(&u8g2, 2, 11, str_display);
	}

}
 8001dac:	e017      	b.n	8001dde <RepeaterLinkStatus+0xae>
			u8g2_DrawXBM(&u8g2, 90, 0, gps_off_width, gps_off_height,
 8001dae:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <RepeaterLinkStatus+0xc8>)
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	230c      	movs	r3, #12
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	230c      	movs	r3, #12
 8001db8:	2200      	movs	r2, #0
 8001dba:	215a      	movs	r1, #90	; 0x5a
 8001dbc:	480b      	ldr	r0, [pc, #44]	; (8001dec <RepeaterLinkStatus+0xbc>)
 8001dbe:	f006 fa77 	bl	80082b0 <u8g2_DrawXBM>
}
 8001dc2:	e00c      	b.n	8001dde <RepeaterLinkStatus+0xae>
		sprintf(str_display, "Rep.   Lien KO");
 8001dc4:	f107 030c 	add.w	r3, r7, #12
 8001dc8:	490c      	ldr	r1, [pc, #48]	; (8001dfc <RepeaterLinkStatus+0xcc>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f016 fe44 	bl	8018a58 <siprintf>
		u8g2_DrawStr(&u8g2, 2, 11, str_display);
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	220b      	movs	r2, #11
 8001dd6:	2102      	movs	r1, #2
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <RepeaterLinkStatus+0xbc>)
 8001dda:	f007 f893 	bl	8008f04 <u8g2_DrawStr>
}
 8001dde:	bf00      	nop
 8001de0:	3720      	adds	r7, #32
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	0801bebc 	.word	0x0801bebc
 8001dec:	200026f8 	.word	0x200026f8
 8001df0:	0801b6b0 	.word	0x0801b6b0
 8001df4:	20000774 	.word	0x20000774
 8001df8:	2000075c 	.word	0x2000075c
 8001dfc:	0801b6bc 	.word	0x0801b6bc

08001e00 <display_network_status>:

/*
 * Permet d'afficher l'etat du reseau
 */
void display_network_status(uint8_t status, uint8_t posXmes, uint8_t posYmes)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af02      	add	r7, sp, #8
 8001e06:	4603      	mov	r3, r0
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	71bb      	strb	r3, [r7, #6]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	717b      	strb	r3, [r7, #5]
	if (status == 1)
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d10a      	bne.n	8001e2e <display_network_status+0x2e>
	{
		u8g2_DrawXBM(&u8g2, posXmes, posYmes, reseau_1_width, reseau_1_height,
 8001e18:	797a      	ldrb	r2, [r7, #5]
 8001e1a:	79b9      	ldrb	r1, [r7, #6]
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <display_network_status+0x4c>)
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	230d      	movs	r3, #13
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	230d      	movs	r3, #13
 8001e26:	480a      	ldr	r0, [pc, #40]	; (8001e50 <display_network_status+0x50>)
 8001e28:	f006 fa42 	bl	80082b0 <u8g2_DrawXBM>
	else
	{
		u8g2_DrawXBM(&u8g2, posXmes, posYmes, reseau_0_width, reseau_0_height,
				(uint8_t*) reseau_0_bits);
	}
}
 8001e2c:	e009      	b.n	8001e42 <display_network_status+0x42>
		u8g2_DrawXBM(&u8g2, posXmes, posYmes, reseau_0_width, reseau_0_height,
 8001e2e:	797a      	ldrb	r2, [r7, #5]
 8001e30:	79b9      	ldrb	r1, [r7, #6]
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <display_network_status+0x54>)
 8001e34:	9301      	str	r3, [sp, #4]
 8001e36:	230d      	movs	r3, #13
 8001e38:	9300      	str	r3, [sp, #0]
 8001e3a:	230d      	movs	r3, #13
 8001e3c:	4804      	ldr	r0, [pc, #16]	; (8001e50 <display_network_status+0x50>)
 8001e3e:	f006 fa37 	bl	80082b0 <u8g2_DrawXBM>
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000740 	.word	0x20000740
 8001e50:	200026f8 	.word	0x200026f8
 8001e54:	20000724 	.word	0x20000724

08001e58 <display_Chargement_perso>:
		}
	}
}

void display_Chargement_perso(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08a      	sub	sp, #40	; 0x28
 8001e5c:	af00      	add	r7, sp, #0
	char str_ID_Sigfox[20];
	char name_start[20] = "HELIOS";
 8001e5e:	4a1d      	ldr	r2, [pc, #116]	; (8001ed4 <display_Chargement_perso+0x7c>)
 8001e60:	463b      	mov	r3, r7
 8001e62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001e66:	6018      	str	r0, [r3, #0]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	8019      	strh	r1, [r3, #0]
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	0c0a      	lsrs	r2, r1, #16
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	1dfb      	adds	r3, r7, #7
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
 8001e78:	605a      	str	r2, [r3, #4]
 8001e7a:	609a      	str	r2, [r3, #8]
 8001e7c:	731a      	strb	r2, [r3, #12]
//	#ifdef debug_sound_vibration
//	strcat(name_start, "_debug2");
//	#endif

//u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);	
	u8g2_FirstPage(&u8g2);
 8001e7e:	4816      	ldr	r0, [pc, #88]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001e80:	f006 fae4 	bl	800844c <u8g2_FirstPage>


	do
	{
		u8g2_SetFont(&u8g2, u8g2_font_7x14_tr);
 8001e84:	4915      	ldr	r1, [pc, #84]	; (8001edc <display_Chargement_perso+0x84>)
 8001e86:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001e88:	f007 f8de 	bl	8009048 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 50, 20, name_start);
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	2214      	movs	r2, #20
 8001e90:	2132      	movs	r1, #50	; 0x32
 8001e92:	4811      	ldr	r0, [pc, #68]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001e94:	f007 f836 	bl	8008f04 <u8g2_DrawStr>
		u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
 8001e98:	4911      	ldr	r1, [pc, #68]	; (8001ee0 <display_Chargement_perso+0x88>)
 8001e9a:	480f      	ldr	r0, [pc, #60]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001e9c:	f007 f8d4 	bl	8009048 <u8g2_SetFont>
		sprintf(str_ID_Sigfox, "ID : %s", ID_Sigfox);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <display_Chargement_perso+0x8c>)
 8001ea6:	4910      	ldr	r1, [pc, #64]	; (8001ee8 <display_Chargement_perso+0x90>)
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f016 fdd5 	bl	8018a58 <siprintf>
		u8g2_DrawStr(&u8g2, 0, 30, str_ID_Sigfox);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	221e      	movs	r2, #30
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4808      	ldr	r0, [pc, #32]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001eb8:	f007 f824 	bl	8008f04 <u8g2_DrawStr>

	} while (u8g2_NextPage(&u8g2));
 8001ebc:	4806      	ldr	r0, [pc, #24]	; (8001ed8 <display_Chargement_perso+0x80>)
 8001ebe:	f006 fad9 	bl	8008474 <u8g2_NextPage>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1dd      	bne.n	8001e84 <display_Chargement_perso+0x2c>
//		} while (u8g2_NextPage(&u8g2));
//		HAL_Delay(500);
//		}
//	
//	}
}
 8001ec8:	bf00      	nop
 8001eca:	bf00      	nop
 8001ecc:	3728      	adds	r7, #40	; 0x28
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	0801b6d4 	.word	0x0801b6d4
 8001ed8:	200026f8 	.word	0x200026f8
 8001edc:	0801c234 	.word	0x0801c234
 8001ee0:	0801bebc 	.word	0x0801bebc
 8001ee4:	200007f4 	.word	0x200007f4
 8001ee8:	0801b6cc 	.word	0x0801b6cc

08001eec <display_AlerteDanger>:

void display_AlerteDanger(int TabGen[], uint32_t TabAlertAll[],
		int type_warning)
{
 8001eec:	b5b0      	push	{r4, r5, r7, lr}
 8001eee:	b08a      	sub	sp, #40	; 0x28
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]

	if (TabGen[TYPE_ALERT] != NONE_ALERT)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3390      	adds	r3, #144	; 0x90
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 80e7 	beq.w	80020d2 <display_AlerteDanger+0x1e6>
	{
		u8g2_FirstPage(&u8g2);
 8001f04:	4875      	ldr	r0, [pc, #468]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001f06:	f006 faa1 	bl	800844c <u8g2_FirstPage>
		do
		{
			if (type_warning == 0)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <display_AlerteDanger+0x3a>
			{
				u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height,
 8001f10:	4b73      	ldr	r3, [pc, #460]	; (80020e0 <display_AlerteDanger+0x1f4>)
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2320      	movs	r3, #32
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2320      	movs	r3, #32
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	486f      	ldr	r0, [pc, #444]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001f20:	f006 f9c6 	bl	80082b0 <u8g2_DrawXBM>
 8001f24:	e009      	b.n	8001f3a <display_AlerteDanger+0x4e>
						(uint8_t*) warning1_bits); // blinking warning sign step 1
			}
			else
			{
				u8g2_DrawXBM(&u8g2, 5, 0, warning2_width, warning2_height,
 8001f26:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <display_AlerteDanger+0x1f8>)
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2320      	movs	r3, #32
 8001f30:	2200      	movs	r2, #0
 8001f32:	2105      	movs	r1, #5
 8001f34:	4869      	ldr	r0, [pc, #420]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001f36:	f006 f9bb 	bl	80082b0 <u8g2_DrawXBM>
						(uint8_t*) warning2_bits); // blinking warning sign step 2
			}

			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8001f3a:	496b      	ldr	r1, [pc, #428]	; (80020e8 <display_AlerteDanger+0x1fc>)
 8001f3c:	4867      	ldr	r0, [pc, #412]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001f3e:	f007 f883 	bl	8009048 <u8g2_SetFont>
			char timerChar[3];
			unsigned int timer = (c1.tps_Alarme * 1000 + 500)
 8001f42:	4b6a      	ldr	r3, [pc, #424]	; (80020ec <display_AlerteDanger+0x200>)
 8001f44:	791b      	ldrb	r3, [r3, #4]
 8001f46:	461a      	mov	r2, r3
 8001f48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4c:	fb03 f302 	mul.w	r3, r3, r2
					- (HAL_GetTick() - TabAlertAll[ALL_TIM_1]);
 8001f50:	461d      	mov	r5, r3
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	681c      	ldr	r4, [r3, #0]
 8001f56:	f009 feab 	bl	800bcb0 <HAL_GetTick>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	1ae3      	subs	r3, r4, r3
 8001f5e:	442b      	add	r3, r5
			unsigned int timer = (c1.tps_Alarme * 1000 + 500)
 8001f60:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001f64:	61fb      	str	r3, [r7, #28]
			timer = timer / 1000;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	4a61      	ldr	r2, [pc, #388]	; (80020f0 <display_AlerteDanger+0x204>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	099b      	lsrs	r3, r3, #6
 8001f70:	61fb      	str	r3, [r7, #28]
			sprintf(timerChar, "%u", timer);
 8001f72:	f107 0310 	add.w	r3, r7, #16
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	495e      	ldr	r1, [pc, #376]	; (80020f4 <display_AlerteDanger+0x208>)
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f016 fd6c 	bl	8018a58 <siprintf>
			int posXmes = 45, posYmes = 0;
 8001f80:	232d      	movs	r3, #45	; 0x2d
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

			u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE");
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	b2d9      	uxtb	r1, r3
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <display_AlerteDanger+0x20c>)
 8001f8e:	220d      	movs	r2, #13
 8001f90:	4852      	ldr	r0, [pc, #328]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001f92:	f006 ffb7 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 80, 25, timerChar);
 8001f96:	f107 0310 	add.w	r3, r7, #16
 8001f9a:	2219      	movs	r2, #25
 8001f9c:	2150      	movs	r1, #80	; 0x50
 8001f9e:	484f      	ldr	r0, [pc, #316]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001fa0:	f006 ffb0 	bl	8008f04 <u8g2_DrawStr>

			if (TabGen[TYPE_ALERT] == ALERT_FALL)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3390      	adds	r3, #144	; 0x90
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b0d      	cmp	r3, #13
 8001fac:	d106      	bne.n	8001fbc <display_AlerteDanger+0xd0>
			{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE CHUTE");
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	b2d9      	uxtb	r1, r3
 8001fb2:	4b52      	ldr	r3, [pc, #328]	; (80020fc <display_AlerteDanger+0x210>)
 8001fb4:	220d      	movs	r2, #13
 8001fb6:	4849      	ldr	r0, [pc, #292]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001fb8:	f006 ffa4 	bl	8008f04 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "CHUTE");
			}
			if (TabGen[TYPE_ALERT] == ALERT_SOS)
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3390      	adds	r3, #144	; 0x90
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d106      	bne.n	8001fd4 <display_AlerteDanger+0xe8>
			{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SOS");
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	b2d9      	uxtb	r1, r3
 8001fca:	4b4d      	ldr	r3, [pc, #308]	; (8002100 <display_AlerteDanger+0x214>)
 8001fcc:	220d      	movs	r2, #13
 8001fce:	4843      	ldr	r0, [pc, #268]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001fd0:	f006 ff98 	bl	8008f04 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "SOS");
			}
			if (TabGen[TYPE_ALERT] == ALERT_MALAISE)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	3390      	adds	r3, #144	; 0x90
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d106      	bne.n	8001fec <display_AlerteDanger+0x100>
			{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE MALAISE");
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	b2d9      	uxtb	r1, r3
 8001fe2:	4b48      	ldr	r3, [pc, #288]	; (8002104 <display_AlerteDanger+0x218>)
 8001fe4:	220d      	movs	r2, #13
 8001fe6:	483d      	ldr	r0, [pc, #244]	; (80020dc <display_AlerteDanger+0x1f0>)
 8001fe8:	f006 ff8c 	bl	8008f04 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "MALAISE");
			}
			if (TabGen[TYPE_ALERT] == ALERT_SONO)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3390      	adds	r3, #144	; 0x90
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d106      	bne.n	8002004 <display_AlerteDanger+0x118>
			{
				u8g2_DrawStr(&u8g2, posXmes, 13, "ALERTE SON");
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	b2d9      	uxtb	r1, r3
 8001ffa:	4b43      	ldr	r3, [pc, #268]	; (8002108 <display_AlerteDanger+0x21c>)
 8001ffc:	220d      	movs	r2, #13
 8001ffe:	4837      	ldr	r0, [pc, #220]	; (80020dc <display_AlerteDanger+0x1f0>)
 8002000:	f006 ff80 	bl	8008f04 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 13, "SON");
			}
			if (TabGen[TYPE_ALERT] == ALERT_H2SVME)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3390      	adds	r3, #144	; 0x90
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2b07      	cmp	r3, #7
 800200c:	d105      	bne.n	800201a <display_AlerteDanger+0x12e>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 800200e:	4b3f      	ldr	r3, [pc, #252]	; (800210c <display_AlerteDanger+0x220>)
 8002010:	220d      	movs	r2, #13
 8002012:	2132      	movs	r1, #50	; 0x32
 8002014:	4831      	ldr	r0, [pc, #196]	; (80020dc <display_AlerteDanger+0x1f0>)
 8002016:	f006 ff75 	bl	8008f04 <u8g2_DrawStr>
				//u8g2_DrawStr(&u8g2, 100, 30, "VME");
			}
			if (TabGen[TYPE_ALERT] == ALERT_H2SVLCT)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	3390      	adds	r3, #144	; 0x90
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b08      	cmp	r3, #8
 8002022:	d10b      	bne.n	800203c <display_AlerteDanger+0x150>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "H2S");
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <display_AlerteDanger+0x220>)
 8002026:	220d      	movs	r2, #13
 8002028:	2132      	movs	r1, #50	; 0x32
 800202a:	482c      	ldr	r0, [pc, #176]	; (80020dc <display_AlerteDanger+0x1f0>)
 800202c:	f006 ff6a 	bl	8008f04 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8002030:	4b37      	ldr	r3, [pc, #220]	; (8002110 <display_AlerteDanger+0x224>)
 8002032:	221e      	movs	r2, #30
 8002034:	2164      	movs	r1, #100	; 0x64
 8002036:	4829      	ldr	r0, [pc, #164]	; (80020dc <display_AlerteDanger+0x1f0>)
 8002038:	f006 ff64 	bl	8008f04 <u8g2_DrawStr>
			}
			if (TabGen[TYPE_ALERT] == ALERT_O2)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	3390      	adds	r3, #144	; 0x90
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b09      	cmp	r3, #9
 8002044:	d10b      	bne.n	800205e <display_AlerteDanger+0x172>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "MANQUE");
 8002046:	4b33      	ldr	r3, [pc, #204]	; (8002114 <display_AlerteDanger+0x228>)
 8002048:	220d      	movs	r2, #13
 800204a:	2132      	movs	r1, #50	; 0x32
 800204c:	4823      	ldr	r0, [pc, #140]	; (80020dc <display_AlerteDanger+0x1f0>)
 800204e:	f006 ff59 	bl	8008f04 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "O2");
 8002052:	4b31      	ldr	r3, [pc, #196]	; (8002118 <display_AlerteDanger+0x22c>)
 8002054:	221e      	movs	r2, #30
 8002056:	2164      	movs	r1, #100	; 0x64
 8002058:	4820      	ldr	r0, [pc, #128]	; (80020dc <display_AlerteDanger+0x1f0>)
 800205a:	f006 ff53 	bl	8008f04 <u8g2_DrawStr>
			}
			if (TabGen[TYPE_ALERT] == ALERT_COVME)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3390      	adds	r3, #144	; 0x90
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b0a      	cmp	r3, #10
 8002066:	d10b      	bne.n	8002080 <display_AlerteDanger+0x194>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "CO");
 8002068:	4b2c      	ldr	r3, [pc, #176]	; (800211c <display_AlerteDanger+0x230>)
 800206a:	220d      	movs	r2, #13
 800206c:	2132      	movs	r1, #50	; 0x32
 800206e:	481b      	ldr	r0, [pc, #108]	; (80020dc <display_AlerteDanger+0x1f0>)
 8002070:	f006 ff48 	bl	8008f04 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VME");
 8002074:	4b2a      	ldr	r3, [pc, #168]	; (8002120 <display_AlerteDanger+0x234>)
 8002076:	221e      	movs	r2, #30
 8002078:	2164      	movs	r1, #100	; 0x64
 800207a:	4818      	ldr	r0, [pc, #96]	; (80020dc <display_AlerteDanger+0x1f0>)
 800207c:	f006 ff42 	bl	8008f04 <u8g2_DrawStr>
			}
			if (TabGen[TYPE_ALERT] == ALERT_COVLCT)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	3390      	adds	r3, #144	; 0x90
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b0b      	cmp	r3, #11
 8002088:	d10b      	bne.n	80020a2 <display_AlerteDanger+0x1b6>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "CO");
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <display_AlerteDanger+0x230>)
 800208c:	220d      	movs	r2, #13
 800208e:	2132      	movs	r1, #50	; 0x32
 8002090:	4812      	ldr	r0, [pc, #72]	; (80020dc <display_AlerteDanger+0x1f0>)
 8002092:	f006 ff37 	bl	8008f04 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "VLCT");
 8002096:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <display_AlerteDanger+0x224>)
 8002098:	221e      	movs	r2, #30
 800209a:	2164      	movs	r1, #100	; 0x64
 800209c:	480f      	ldr	r0, [pc, #60]	; (80020dc <display_AlerteDanger+0x1f0>)
 800209e:	f006 ff31 	bl	8008f04 <u8g2_DrawStr>
			}
			if (TabGen[TYPE_ALERT] == ALERT_EX)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	3390      	adds	r3, #144	; 0x90
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d10b      	bne.n	80020c4 <display_AlerteDanger+0x1d8>
			{
				u8g2_DrawStr(&u8g2, 50, 13, "RISQUE");
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <display_AlerteDanger+0x238>)
 80020ae:	220d      	movs	r2, #13
 80020b0:	2132      	movs	r1, #50	; 0x32
 80020b2:	480a      	ldr	r0, [pc, #40]	; (80020dc <display_AlerteDanger+0x1f0>)
 80020b4:	f006 ff26 	bl	8008f04 <u8g2_DrawStr>
				u8g2_DrawStr(&u8g2, 100, 30, "EX");
 80020b8:	4b1b      	ldr	r3, [pc, #108]	; (8002128 <display_AlerteDanger+0x23c>)
 80020ba:	221e      	movs	r2, #30
 80020bc:	2164      	movs	r1, #100	; 0x64
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <display_AlerteDanger+0x1f0>)
 80020c0:	f006 ff20 	bl	8008f04 <u8g2_DrawStr>
			}
		} while (u8g2_NextPage(&u8g2));
 80020c4:	4805      	ldr	r0, [pc, #20]	; (80020dc <display_AlerteDanger+0x1f0>)
 80020c6:	f006 f9d5 	bl	8008474 <u8g2_NextPage>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f47f af1c 	bne.w	8001f0a <display_AlerteDanger+0x1e>
	}
}
 80020d2:	bf00      	nop
 80020d4:	3720      	adds	r7, #32
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bdb0      	pop	{r4, r5, r7, pc}
 80020da:	bf00      	nop
 80020dc:	200026f8 	.word	0x200026f8
 80020e0:	20000128 	.word	0x20000128
 80020e4:	200001a8 	.word	0x200001a8
 80020e8:	0801c6b8 	.word	0x0801c6b8
 80020ec:	20001158 	.word	0x20001158
 80020f0:	10624dd3 	.word	0x10624dd3
 80020f4:	0801b64c 	.word	0x0801b64c
 80020f8:	0801b6e8 	.word	0x0801b6e8
 80020fc:	0801b6f0 	.word	0x0801b6f0
 8002100:	0801b700 	.word	0x0801b700
 8002104:	0801b70c 	.word	0x0801b70c
 8002108:	0801b71c 	.word	0x0801b71c
 800210c:	0801b728 	.word	0x0801b728
 8002110:	0801b72c 	.word	0x0801b72c
 8002114:	0801b734 	.word	0x0801b734
 8002118:	0801b73c 	.word	0x0801b73c
 800211c:	0801b740 	.word	0x0801b740
 8002120:	0801b744 	.word	0x0801b744
 8002124:	0801b748 	.word	0x0801b748
 8002128:	0801b750 	.word	0x0801b750

0800212c <display_SendMess>:

void display_SendMess(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af02      	add	r7, sp, #8
	u8g2_FirstPage(&u8g2);
 8002132:	4813      	ldr	r0, [pc, #76]	; (8002180 <display_SendMess+0x54>)
 8002134:	f006 f98a 	bl	800844c <u8g2_FirstPage>
	do
	{
		u8g2_DrawXBM(&u8g2, 5, 0, warning1_width, warning1_height,
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <display_SendMess+0x58>)
 800213a:	9301      	str	r3, [sp, #4]
 800213c:	2320      	movs	r3, #32
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2320      	movs	r3, #32
 8002142:	2200      	movs	r2, #0
 8002144:	2105      	movs	r1, #5
 8002146:	480e      	ldr	r0, [pc, #56]	; (8002180 <display_SendMess+0x54>)
 8002148:	f006 f8b2 	bl	80082b0 <u8g2_DrawXBM>
				(uint8_t*) warning1_bits);
		u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 800214c:	490e      	ldr	r1, [pc, #56]	; (8002188 <display_SendMess+0x5c>)
 800214e:	480c      	ldr	r0, [pc, #48]	; (8002180 <display_SendMess+0x54>)
 8002150:	f006 ff7a 	bl	8009048 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 50, 13, "ENVOI");
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <display_SendMess+0x60>)
 8002156:	220d      	movs	r2, #13
 8002158:	2132      	movs	r1, #50	; 0x32
 800215a:	4809      	ldr	r0, [pc, #36]	; (8002180 <display_SendMess+0x54>)
 800215c:	f006 fed2 	bl	8008f04 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 50, 30, "ALERTE");
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <display_SendMess+0x64>)
 8002162:	221e      	movs	r2, #30
 8002164:	2132      	movs	r1, #50	; 0x32
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <display_SendMess+0x54>)
 8002168:	f006 fecc 	bl	8008f04 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 800216c:	4804      	ldr	r0, [pc, #16]	; (8002180 <display_SendMess+0x54>)
 800216e:	f006 f981 	bl	8008474 <u8g2_NextPage>
 8002172:	4603      	mov	r3, r0
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1df      	bne.n	8002138 <display_SendMess+0xc>
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	200026f8 	.word	0x200026f8
 8002184:	20000128 	.word	0x20000128
 8002188:	0801c6b8 	.word	0x0801c6b8
 800218c:	0801b754 	.word	0x0801b754
 8002190:	0801b6e8 	.word	0x0801b6e8

08002194 <display_Alerte>:

/*
 * Permet d'afficher une alerte
 */
void display_Alerte(int TabGen[], uint8_t type_alerte)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b0a6      	sub	sp, #152	; 0x98
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	460b      	mov	r3, r1
 800219e:	70fb      	strb	r3, [r7, #3]
	u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80021a0:	49a5      	ldr	r1, [pc, #660]	; (8002438 <display_Alerte+0x2a4>)
 80021a2:	48a6      	ldr	r0, [pc, #664]	; (800243c <display_Alerte+0x2a8>)
 80021a4:	f006 ff50 	bl	8009048 <u8g2_SetFont>

	if (c1.GPS_Actif == 1)
 80021a8:	4ba5      	ldr	r3, [pc, #660]	; (8002440 <display_Alerte+0x2ac>)
 80021aa:	7a5b      	ldrb	r3, [r3, #9]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	f040 80f3 	bne.w	8002398 <display_Alerte+0x204>
	{

		if (show_RSSI == 1)
 80021b2:	4ba4      	ldr	r3, [pc, #656]	; (8002444 <display_Alerte+0x2b0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d16f      	bne.n	800229a <display_Alerte+0x106>
		{
			if (c1.com_LoRa == 1 && c1.com_sigfox == 1)
 80021ba:	4ba1      	ldr	r3, [pc, #644]	; (8002440 <display_Alerte+0x2ac>)
 80021bc:	7a1b      	ldrb	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d14a      	bne.n	8002258 <display_Alerte+0xc4>
 80021c2:	4b9f      	ldr	r3, [pc, #636]	; (8002440 <display_Alerte+0x2ac>)
 80021c4:	79db      	ldrb	r3, [r3, #7]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d146      	bne.n	8002258 <display_Alerte+0xc4>
			{
				u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80021ca:	499b      	ldr	r1, [pc, #620]	; (8002438 <display_Alerte+0x2a4>)
 80021cc:	489b      	ldr	r0, [pc, #620]	; (800243c <display_Alerte+0x2a8>)
 80021ce:	f006 ff3b 	bl	8009048 <u8g2_SetFont>
				char str_display[25];
				if (TabGen[SIGFOX_RSSI] != 0)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d010      	beq.n	8002200 <display_Alerte+0x6c>
				{
					sprintf(str_display, "SIGFOX OK (%ddB)",
							TabGen[SIGFOX_RSSI]);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f503 739c 	add.w	r3, r3, #312	; 0x138
					sprintf(str_display, "SIGFOX OK (%ddB)",
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021ea:	4997      	ldr	r1, [pc, #604]	; (8002448 <display_Alerte+0x2b4>)
 80021ec:	4618      	mov	r0, r3
 80021ee:	f016 fc33 	bl	8018a58 <siprintf>
					u8g2_DrawStr(&u8g2, 0, 20, str_display);
 80021f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80021f6:	2214      	movs	r2, #20
 80021f8:	2100      	movs	r1, #0
 80021fa:	4890      	ldr	r0, [pc, #576]	; (800243c <display_Alerte+0x2a8>)
 80021fc:	f006 fe82 	bl	8008f04 <u8g2_DrawStr>
				}

				if (TabGen[LORAWAN_RSSI] != 0)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d010      	beq.n	800222e <display_Alerte+0x9a>
				{
					sprintf(str_display, "LORA   OK (%ddB)",
							TabGen[LORAWAN_RSSI]);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
					sprintf(str_display, "LORA   OK (%ddB)",
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002218:	498c      	ldr	r1, [pc, #560]	; (800244c <display_Alerte+0x2b8>)
 800221a:	4618      	mov	r0, r3
 800221c:	f016 fc1c 	bl	8018a58 <siprintf>
					u8g2_DrawStr(&u8g2, 0, 30, str_display);
 8002220:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002224:	221e      	movs	r2, #30
 8002226:	2100      	movs	r1, #0
 8002228:	4884      	ldr	r0, [pc, #528]	; (800243c <display_Alerte+0x2a8>)
 800222a:	f006 fe6b 	bl	8008f04 <u8g2_DrawStr>
				}

				if (TabGen[LORAWAN_STATE] == LW_JOIN_OK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 8151 	bne.w	80024de <display_Alerte+0x34a>
				{
					sprintf(str_display, "LORA   OK "); //(%ddB)", TabGen[SIGFOX_RSSI]);
 800223c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002240:	4983      	ldr	r1, [pc, #524]	; (8002450 <display_Alerte+0x2bc>)
 8002242:	4618      	mov	r0, r3
 8002244:	f016 fc08 	bl	8018a58 <siprintf>
					u8g2_DrawStr(&u8g2, 0, 30, str_display);
 8002248:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800224c:	221e      	movs	r2, #30
 800224e:	2100      	movs	r1, #0
 8002250:	487a      	ldr	r0, [pc, #488]	; (800243c <display_Alerte+0x2a8>)
 8002252:	f006 fe57 	bl	8008f04 <u8g2_DrawStr>
			{
 8002256:	e142      	b.n	80024de <display_Alerte+0x34a>
				//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
				//sprintf(str_display, "position (RSSI%ddB)", TabGen[SIGFOX_RSSI]);
				//u8g2_DrawStr(&u8g2, 1, 8, str_display);
				//u8g2_DrawStr(&u8g2, 0, 30, str_display);
			}
			else if (c1.com_sigfox == 1)
 8002258:	4b79      	ldr	r3, [pc, #484]	; (8002440 <display_Alerte+0x2ac>)
 800225a:	79db      	ldrb	r3, [r3, #7]
 800225c:	2b01      	cmp	r3, #1
 800225e:	f040 813f 	bne.w	80024e0 <display_Alerte+0x34c>
			{
				u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8002262:	4975      	ldr	r1, [pc, #468]	; (8002438 <display_Alerte+0x2a4>)
 8002264:	4875      	ldr	r0, [pc, #468]	; (800243c <display_Alerte+0x2a8>)
 8002266:	f006 feef 	bl	8009048 <u8g2_SetFont>

				u8g2_DrawStr(&u8g2, 0, 20, "Reseau ok a cette");
 800226a:	4b7a      	ldr	r3, [pc, #488]	; (8002454 <display_Alerte+0x2c0>)
 800226c:	2214      	movs	r2, #20
 800226e:	2100      	movs	r1, #0
 8002270:	4872      	ldr	r0, [pc, #456]	; (800243c <display_Alerte+0x2a8>)
 8002272:	f006 fe47 	bl	8008f04 <u8g2_DrawStr>
				char str_display[25];
				//u8g2_SetFont(&u8g2, u8g2_font_5x8_tr);
				sprintf(str_display, "position (RSSI%ddB)",
						TabGen[SIGFOX_RSSI]);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f503 739c 	add.w	r3, r3, #312	; 0x138
				sprintf(str_display, "position (RSSI%ddB)",
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002282:	4975      	ldr	r1, [pc, #468]	; (8002458 <display_Alerte+0x2c4>)
 8002284:	4618      	mov	r0, r3
 8002286:	f016 fbe7 	bl	8018a58 <siprintf>
				//u8g2_DrawStr(&u8g2, 1, 8, str_display);
				u8g2_DrawStr(&u8g2, 0, 30, str_display);
 800228a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800228e:	221e      	movs	r2, #30
 8002290:	2100      	movs	r1, #0
 8002292:	486a      	ldr	r0, [pc, #424]	; (800243c <display_Alerte+0x2a8>)
 8002294:	f006 fe36 	bl	8008f04 <u8g2_DrawStr>
		{
			u8g2_DrawStr(&u8g2, 2, 30, "En attente de reseau");
		}

	}
}
 8002298:	e122      	b.n	80024e0 <display_Alerte+0x34c>
		else if (TabGen[CHARGEC] == 1)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	33ac      	adds	r3, #172	; 0xac
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d113      	bne.n	80022cc <display_Alerte+0x138>
			u8g2_DrawStr(&u8g2, 1, 30, "Alertes desactivees");
 80022a4:	4b6d      	ldr	r3, [pc, #436]	; (800245c <display_Alerte+0x2c8>)
 80022a6:	221e      	movs	r2, #30
 80022a8:	2101      	movs	r1, #1
 80022aa:	4864      	ldr	r0, [pc, #400]	; (800243c <display_Alerte+0x2a8>)
 80022ac:	f006 fe2a 	bl	8008f04 <u8g2_DrawStr>
			sprintf(str_display, "En charge...");//: %ddB", TabGen[LORAWAN_RSSI]);
 80022b0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022b4:	496a      	ldr	r1, [pc, #424]	; (8002460 <display_Alerte+0x2cc>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f016 fbce 	bl	8018a58 <siprintf>
			u8g2_DrawStr(&u8g2, 1, 18, str_display);
 80022bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022c0:	2212      	movs	r2, #18
 80022c2:	2101      	movs	r1, #1
 80022c4:	485d      	ldr	r0, [pc, #372]	; (800243c <display_Alerte+0x2a8>)
 80022c6:	f006 fe1d 	bl	8008f04 <u8g2_DrawStr>
}
 80022ca:	e109      	b.n	80024e0 <display_Alerte+0x34c>
			if (TabGen[BAT_VALUE] < 15 && TabGen[BAT_VALUE] > 5
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	33a8      	adds	r3, #168	; 0xa8
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b0e      	cmp	r3, #14
 80022d4:	dc15      	bgt.n	8002302 <display_Alerte+0x16e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	33a8      	adds	r3, #168	; 0xa8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b05      	cmp	r3, #5
 80022de:	dd10      	ble.n	8002302 <display_Alerte+0x16e>
					&& (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 80022e0:	f009 fce6 	bl	800bcb0 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <display_Alerte+0x2d0>)
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d806      	bhi.n	8002302 <display_Alerte+0x16e>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie faible");
 80022f4:	4b5c      	ldr	r3, [pc, #368]	; (8002468 <display_Alerte+0x2d4>)
 80022f6:	221e      	movs	r2, #30
 80022f8:	2102      	movs	r1, #2
 80022fa:	4850      	ldr	r0, [pc, #320]	; (800243c <display_Alerte+0x2a8>)
 80022fc:	f006 fe02 	bl	8008f04 <u8g2_DrawStr>
 8002300:	e0ee      	b.n	80024e0 <display_Alerte+0x34c>
			else if (TabGen[BAT_VALUE] < 5
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	33a8      	adds	r3, #168	; 0xa8
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b04      	cmp	r3, #4
 800230a:	dc10      	bgt.n	800232e <display_Alerte+0x19a>
					&& (HAL_GetTick() - TabTimer[TIMER_LOW_BAT]) < 10 * 1000)
 800230c:	f009 fcd0 	bl	800bcb0 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	4b54      	ldr	r3, [pc, #336]	; (8002464 <display_Alerte+0x2d0>)
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	f242 720f 	movw	r2, #9999	; 0x270f
 800231c:	4293      	cmp	r3, r2
 800231e:	d806      	bhi.n	800232e <display_Alerte+0x19a>
				u8g2_DrawStr(&u8g2, 2, 30, "Batterie tres faible");
 8002320:	4b52      	ldr	r3, [pc, #328]	; (800246c <display_Alerte+0x2d8>)
 8002322:	221e      	movs	r2, #30
 8002324:	2102      	movs	r1, #2
 8002326:	4845      	ldr	r0, [pc, #276]	; (800243c <display_Alerte+0x2a8>)
 8002328:	f006 fdec 	bl	8008f04 <u8g2_DrawStr>
 800232c:	e0d8      	b.n	80024e0 <display_Alerte+0x34c>
				if (TabGen[STATUT_GPS] == 1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	33a0      	adds	r3, #160	; 0xa0
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d106      	bne.n	8002346 <display_Alerte+0x1b2>
					u8g2_DrawStr(&u8g2, 2, 30, "Protection active");
 8002338:	4b4d      	ldr	r3, [pc, #308]	; (8002470 <display_Alerte+0x2dc>)
 800233a:	221e      	movs	r2, #30
 800233c:	2102      	movs	r1, #2
 800233e:	483f      	ldr	r0, [pc, #252]	; (800243c <display_Alerte+0x2a8>)
 8002340:	f006 fde0 	bl	8008f04 <u8g2_DrawStr>
}
 8002344:	e0cc      	b.n	80024e0 <display_Alerte+0x34c>
				else if (TabGen[GPS_ON] == 1 || TabGen[FORCE_GPS] == 1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d004      	beq.n	800235a <display_Alerte+0x1c6>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	33f0      	adds	r3, #240	; 0xf0
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d106      	bne.n	8002368 <display_Alerte+0x1d4>
					u8g2_DrawStr(&u8g2, 2, 30, "Recherche GPS...");
 800235a:	4b46      	ldr	r3, [pc, #280]	; (8002474 <display_Alerte+0x2e0>)
 800235c:	221e      	movs	r2, #30
 800235e:	2102      	movs	r1, #2
 8002360:	4836      	ldr	r0, [pc, #216]	; (800243c <display_Alerte+0x2a8>)
 8002362:	f006 fdcf 	bl	8008f04 <u8g2_DrawStr>
 8002366:	e0bb      	b.n	80024e0 <display_Alerte+0x34c>
				else if (TabGen[GPS_ON] == 0 && TabGen[GPS_ON_PREVIOUS] == 0)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d10b      	bne.n	800238a <display_Alerte+0x1f6>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	338c      	adds	r3, #140	; 0x8c
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d106      	bne.n	800238a <display_Alerte+0x1f6>
					u8g2_DrawStr(&u8g2, 2, 30, "GPS OFF");
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <display_Alerte+0x2e4>)
 800237e:	221e      	movs	r2, #30
 8002380:	2102      	movs	r1, #2
 8002382:	482e      	ldr	r0, [pc, #184]	; (800243c <display_Alerte+0x2a8>)
 8002384:	f006 fdbe 	bl	8008f04 <u8g2_DrawStr>
 8002388:	e0aa      	b.n	80024e0 <display_Alerte+0x34c>
					u8g2_DrawStr(&u8g2, 2, 30, "NONE");
 800238a:	4b3c      	ldr	r3, [pc, #240]	; (800247c <display_Alerte+0x2e8>)
 800238c:	221e      	movs	r2, #30
 800238e:	2102      	movs	r1, #2
 8002390:	482a      	ldr	r0, [pc, #168]	; (800243c <display_Alerte+0x2a8>)
 8002392:	f006 fdb7 	bl	8008f04 <u8g2_DrawStr>
}
 8002396:	e0a3      	b.n	80024e0 <display_Alerte+0x34c>
	else if (TabGen[STATUS_REP] == 0 && c1.loraP2P == 1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d10a      	bne.n	80023ba <display_Alerte+0x226>
 80023a4:	4b26      	ldr	r3, [pc, #152]	; (8002440 <display_Alerte+0x2ac>)
 80023a6:	799b      	ldrb	r3, [r3, #6]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <display_Alerte+0x226>
		u8g2_DrawStr(&u8g2, 2, 30, "Pas de repeteur");
 80023ac:	4b34      	ldr	r3, [pc, #208]	; (8002480 <display_Alerte+0x2ec>)
 80023ae:	221e      	movs	r2, #30
 80023b0:	2102      	movs	r1, #2
 80023b2:	4822      	ldr	r0, [pc, #136]	; (800243c <display_Alerte+0x2a8>)
 80023b4:	f006 fda6 	bl	8008f04 <u8g2_DrawStr>
 80023b8:	e092      	b.n	80024e0 <display_Alerte+0x34c>
		if (TabGen[RSSI_REP] == 666 && c1.loraP2P == 1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f240 229a 	movw	r2, #666	; 0x29a
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10a      	bne.n	80023e0 <display_Alerte+0x24c>
 80023ca:	4b1d      	ldr	r3, [pc, #116]	; (8002440 <display_Alerte+0x2ac>)
 80023cc:	799b      	ldrb	r3, [r3, #6]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d106      	bne.n	80023e0 <display_Alerte+0x24c>
			u8g2_DrawStr(&u8g2, 2, 30, "Pas de couverture SF.");
 80023d2:	4b2c      	ldr	r3, [pc, #176]	; (8002484 <display_Alerte+0x2f0>)
 80023d4:	221e      	movs	r2, #30
 80023d6:	2102      	movs	r1, #2
 80023d8:	4818      	ldr	r0, [pc, #96]	; (800243c <display_Alerte+0x2a8>)
 80023da:	f006 fd93 	bl	8008f04 <u8g2_DrawStr>
 80023de:	e07f      	b.n	80024e0 <display_Alerte+0x34c>
		else if (show_RSSI == 1)
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <display_Alerte+0x2b0>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d11b      	bne.n	8002420 <display_Alerte+0x28c>
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80023e8:	4913      	ldr	r1, [pc, #76]	; (8002438 <display_Alerte+0x2a4>)
 80023ea:	4814      	ldr	r0, [pc, #80]	; (800243c <display_Alerte+0x2a8>)
 80023ec:	f006 fe2c 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 0, 20, "Reseau ok a cette");
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <display_Alerte+0x2c0>)
 80023f2:	2214      	movs	r2, #20
 80023f4:	2100      	movs	r1, #0
 80023f6:	4811      	ldr	r0, [pc, #68]	; (800243c <display_Alerte+0x2a8>)
 80023f8:	f006 fd84 	bl	8008f04 <u8g2_DrawStr>
			sprintf(str_display, "position (RSSI%ddB)", TabGen[SIGFOX_RSSI]);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f107 0308 	add.w	r3, r7, #8
 8002408:	4913      	ldr	r1, [pc, #76]	; (8002458 <display_Alerte+0x2c4>)
 800240a:	4618      	mov	r0, r3
 800240c:	f016 fb24 	bl	8018a58 <siprintf>
			u8g2_DrawStr(&u8g2, 0, 30, str_display);
 8002410:	f107 0308 	add.w	r3, r7, #8
 8002414:	221e      	movs	r2, #30
 8002416:	2100      	movs	r1, #0
 8002418:	4808      	ldr	r0, [pc, #32]	; (800243c <display_Alerte+0x2a8>)
 800241a:	f006 fd73 	bl	8008f04 <u8g2_DrawStr>
}
 800241e:	e05f      	b.n	80024e0 <display_Alerte+0x34c>
		else if (TabGen[CHARGEC] == 1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	33ac      	adds	r3, #172	; 0xac
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d12e      	bne.n	8002488 <display_Alerte+0x2f4>
			u8g2_DrawStr(&u8g2, 2, 30, "Alertes desactivees");
 800242a:	4b0c      	ldr	r3, [pc, #48]	; (800245c <display_Alerte+0x2c8>)
 800242c:	221e      	movs	r2, #30
 800242e:	2102      	movs	r1, #2
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <display_Alerte+0x2a8>)
 8002432:	f006 fd67 	bl	8008f04 <u8g2_DrawStr>
}
 8002436:	e053      	b.n	80024e0 <display_Alerte+0x34c>
 8002438:	0801c6b8 	.word	0x0801c6b8
 800243c:	200026f8 	.word	0x200026f8
 8002440:	20001158 	.word	0x20001158
 8002444:	20000b34 	.word	0x20000b34
 8002448:	0801b75c 	.word	0x0801b75c
 800244c:	0801b770 	.word	0x0801b770
 8002450:	0801b784 	.word	0x0801b784
 8002454:	0801b790 	.word	0x0801b790
 8002458:	0801b7a4 	.word	0x0801b7a4
 800245c:	0801b7b8 	.word	0x0801b7b8
 8002460:	0801b7cc 	.word	0x0801b7cc
 8002464:	200028b0 	.word	0x200028b0
 8002468:	0801b7dc 	.word	0x0801b7dc
 800246c:	0801b7ec 	.word	0x0801b7ec
 8002470:	0801b804 	.word	0x0801b804
 8002474:	0801b818 	.word	0x0801b818
 8002478:	0801b82c 	.word	0x0801b82c
 800247c:	0801b834 	.word	0x0801b834
 8002480:	0801b83c 	.word	0x0801b83c
 8002484:	0801b84c 	.word	0x0801b84c
		else if (TabGen[RSSI_REP] != 0 || TabGen[SIGFOX_RSSI] != 0
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <display_Alerte+0x318>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d105      	bne.n	80024ac <display_Alerte+0x318>
				|| TabGen[LORAWAN_RSSI] != 0)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d011      	beq.n	80024d0 <display_Alerte+0x33c>
			u8g2_DrawStr(&u8g2, 2, 30, "Protection active");
 80024ac:	4b0e      	ldr	r3, [pc, #56]	; (80024e8 <display_Alerte+0x354>)
 80024ae:	221e      	movs	r2, #30
 80024b0:	2102      	movs	r1, #2
 80024b2:	480e      	ldr	r0, [pc, #56]	; (80024ec <display_Alerte+0x358>)
 80024b4:	f006 fd26 	bl	8008f04 <u8g2_DrawStr>
			if (TabGen[RSSI_REP] != 0)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00d      	beq.n	80024e0 <display_Alerte+0x34c>
				display_network_status(1, 70, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2146      	movs	r1, #70	; 0x46
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff fc99 	bl	8001e00 <display_network_status>
			if (TabGen[RSSI_REP] != 0)
 80024ce:	e007      	b.n	80024e0 <display_Alerte+0x34c>
			u8g2_DrawStr(&u8g2, 2, 30, "En attente de reseau");
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <display_Alerte+0x35c>)
 80024d2:	221e      	movs	r2, #30
 80024d4:	2102      	movs	r1, #2
 80024d6:	4805      	ldr	r0, [pc, #20]	; (80024ec <display_Alerte+0x358>)
 80024d8:	f006 fd14 	bl	8008f04 <u8g2_DrawStr>
}
 80024dc:	e000      	b.n	80024e0 <display_Alerte+0x34c>
			{
 80024de:	bf00      	nop
}
 80024e0:	bf00      	nop
 80024e2:	3798      	adds	r7, #152	; 0x98
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	0801b804 	.word	0x0801b804
 80024ec:	200026f8 	.word	0x200026f8
 80024f0:	0801b864 	.word	0x0801b864

080024f4 <display_wait>:

void display_wait(uint8_t step)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	4603      	mov	r3, r0
 80024fc:	71fb      	strb	r3, [r7, #7]
	switch (step)
 80024fe:	79fb      	ldrb	r3, [r7, #7]
 8002500:	3b01      	subs	r3, #1
 8002502:	2b07      	cmp	r3, #7
 8002504:	f200 8128 	bhi.w	8002758 <display_wait+0x264>
 8002508:	a201      	add	r2, pc, #4	; (adr r2, 8002510 <display_wait+0x1c>)
 800250a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800250e:	bf00      	nop
 8002510:	08002531 	.word	0x08002531
 8002514:	08002579 	.word	0x08002579
 8002518:	080025c1 	.word	0x080025c1
 800251c:	08002609 	.word	0x08002609
 8002520:	08002651 	.word	0x08002651
 8002524:	08002699 	.word	0x08002699
 8002528:	080026e1 	.word	0x080026e1
 800252c:	0800271d 	.word	0x0800271d
	{
	case 1:
		u8g2_FirstPage(&u8g2);
 8002530:	488b      	ldr	r0, [pc, #556]	; (8002760 <display_wait+0x26c>)
 8002532:	f005 ff8b 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading1_width, loading1_height,
 8002536:	4b8b      	ldr	r3, [pc, #556]	; (8002764 <display_wait+0x270>)
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	2320      	movs	r3, #32
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	2320      	movs	r3, #32
 8002540:	2200      	movs	r2, #0
 8002542:	2100      	movs	r1, #0
 8002544:	4886      	ldr	r0, [pc, #536]	; (8002760 <display_wait+0x26c>)
 8002546:	f005 feb3 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading1_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 800254a:	4987      	ldr	r1, [pc, #540]	; (8002768 <display_wait+0x274>)
 800254c:	4884      	ldr	r0, [pc, #528]	; (8002760 <display_wait+0x26c>)
 800254e:	f006 fd7b 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002552:	4b86      	ldr	r3, [pc, #536]	; (800276c <display_wait+0x278>)
 8002554:	220c      	movs	r2, #12
 8002556:	212d      	movs	r1, #45	; 0x2d
 8002558:	4881      	ldr	r0, [pc, #516]	; (8002760 <display_wait+0x26c>)
 800255a:	f006 fcd3 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 800255e:	4b84      	ldr	r3, [pc, #528]	; (8002770 <display_wait+0x27c>)
 8002560:	221c      	movs	r2, #28
 8002562:	2132      	movs	r1, #50	; 0x32
 8002564:	487e      	ldr	r0, [pc, #504]	; (8002760 <display_wait+0x26c>)
 8002566:	f006 fccd 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800256a:	487d      	ldr	r0, [pc, #500]	; (8002760 <display_wait+0x26c>)
 800256c:	f005 ff82 	bl	8008474 <u8g2_NextPage>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1df      	bne.n	8002536 <display_wait+0x42>
		break;
 8002576:	e0ef      	b.n	8002758 <display_wait+0x264>
	case 2:
		u8g2_FirstPage(&u8g2);
 8002578:	4879      	ldr	r0, [pc, #484]	; (8002760 <display_wait+0x26c>)
 800257a:	f005 ff67 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading2_width, loading2_height,
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <display_wait+0x280>)
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	2320      	movs	r3, #32
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2320      	movs	r3, #32
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	4874      	ldr	r0, [pc, #464]	; (8002760 <display_wait+0x26c>)
 800258e:	f005 fe8f 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading2_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8002592:	4975      	ldr	r1, [pc, #468]	; (8002768 <display_wait+0x274>)
 8002594:	4872      	ldr	r0, [pc, #456]	; (8002760 <display_wait+0x26c>)
 8002596:	f006 fd57 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800259a:	4b74      	ldr	r3, [pc, #464]	; (800276c <display_wait+0x278>)
 800259c:	220c      	movs	r2, #12
 800259e:	212d      	movs	r1, #45	; 0x2d
 80025a0:	486f      	ldr	r0, [pc, #444]	; (8002760 <display_wait+0x26c>)
 80025a2:	f006 fcaf 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 3 s");
 80025a6:	4b72      	ldr	r3, [pc, #456]	; (8002770 <display_wait+0x27c>)
 80025a8:	221c      	movs	r2, #28
 80025aa:	2132      	movs	r1, #50	; 0x32
 80025ac:	486c      	ldr	r0, [pc, #432]	; (8002760 <display_wait+0x26c>)
 80025ae:	f006 fca9 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80025b2:	486b      	ldr	r0, [pc, #428]	; (8002760 <display_wait+0x26c>)
 80025b4:	f005 ff5e 	bl	8008474 <u8g2_NextPage>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1df      	bne.n	800257e <display_wait+0x8a>
		break;
 80025be:	e0cb      	b.n	8002758 <display_wait+0x264>

	case 3:
		u8g2_FirstPage(&u8g2);
 80025c0:	4867      	ldr	r0, [pc, #412]	; (8002760 <display_wait+0x26c>)
 80025c2:	f005 ff43 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading3_width, loading3_height,
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <display_wait+0x284>)
 80025c8:	9301      	str	r3, [sp, #4]
 80025ca:	2320      	movs	r3, #32
 80025cc:	9300      	str	r3, [sp, #0]
 80025ce:	2320      	movs	r3, #32
 80025d0:	2200      	movs	r2, #0
 80025d2:	2100      	movs	r1, #0
 80025d4:	4862      	ldr	r0, [pc, #392]	; (8002760 <display_wait+0x26c>)
 80025d6:	f005 fe6b 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading3_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80025da:	4963      	ldr	r1, [pc, #396]	; (8002768 <display_wait+0x274>)
 80025dc:	4860      	ldr	r0, [pc, #384]	; (8002760 <display_wait+0x26c>)
 80025de:	f006 fd33 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 80025e2:	4b62      	ldr	r3, [pc, #392]	; (800276c <display_wait+0x278>)
 80025e4:	220c      	movs	r2, #12
 80025e6:	212d      	movs	r1, #45	; 0x2d
 80025e8:	485d      	ldr	r0, [pc, #372]	; (8002760 <display_wait+0x26c>)
 80025ea:	f006 fc8b 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 80025ee:	4b63      	ldr	r3, [pc, #396]	; (800277c <display_wait+0x288>)
 80025f0:	221c      	movs	r2, #28
 80025f2:	2132      	movs	r1, #50	; 0x32
 80025f4:	485a      	ldr	r0, [pc, #360]	; (8002760 <display_wait+0x26c>)
 80025f6:	f006 fc85 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80025fa:	4859      	ldr	r0, [pc, #356]	; (8002760 <display_wait+0x26c>)
 80025fc:	f005 ff3a 	bl	8008474 <u8g2_NextPage>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1df      	bne.n	80025c6 <display_wait+0xd2>
		break;
 8002606:	e0a7      	b.n	8002758 <display_wait+0x264>
	case 4:
		u8g2_FirstPage(&u8g2);
 8002608:	4855      	ldr	r0, [pc, #340]	; (8002760 <display_wait+0x26c>)
 800260a:	f005 ff1f 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading4_width, loading4_height,
 800260e:	4b5c      	ldr	r3, [pc, #368]	; (8002780 <display_wait+0x28c>)
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	2320      	movs	r3, #32
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2320      	movs	r3, #32
 8002618:	2200      	movs	r2, #0
 800261a:	2100      	movs	r1, #0
 800261c:	4850      	ldr	r0, [pc, #320]	; (8002760 <display_wait+0x26c>)
 800261e:	f005 fe47 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading4_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8002622:	4951      	ldr	r1, [pc, #324]	; (8002768 <display_wait+0x274>)
 8002624:	484e      	ldr	r0, [pc, #312]	; (8002760 <display_wait+0x26c>)
 8002626:	f006 fd0f 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 800262a:	4b50      	ldr	r3, [pc, #320]	; (800276c <display_wait+0x278>)
 800262c:	220c      	movs	r2, #12
 800262e:	212d      	movs	r1, #45	; 0x2d
 8002630:	484b      	ldr	r0, [pc, #300]	; (8002760 <display_wait+0x26c>)
 8002632:	f006 fc67 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 2 s");
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <display_wait+0x288>)
 8002638:	221c      	movs	r2, #28
 800263a:	2132      	movs	r1, #50	; 0x32
 800263c:	4848      	ldr	r0, [pc, #288]	; (8002760 <display_wait+0x26c>)
 800263e:	f006 fc61 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 8002642:	4847      	ldr	r0, [pc, #284]	; (8002760 <display_wait+0x26c>)
 8002644:	f005 ff16 	bl	8008474 <u8g2_NextPage>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1df      	bne.n	800260e <display_wait+0x11a>
		break;
 800264e:	e083      	b.n	8002758 <display_wait+0x264>

	case 5:
		u8g2_FirstPage(&u8g2);
 8002650:	4843      	ldr	r0, [pc, #268]	; (8002760 <display_wait+0x26c>)
 8002652:	f005 fefb 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading5_width, loading5_height,
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <display_wait+0x290>)
 8002658:	9301      	str	r3, [sp, #4]
 800265a:	2320      	movs	r3, #32
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2320      	movs	r3, #32
 8002660:	2200      	movs	r2, #0
 8002662:	2100      	movs	r1, #0
 8002664:	483e      	ldr	r0, [pc, #248]	; (8002760 <display_wait+0x26c>)
 8002666:	f005 fe23 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading5_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 800266a:	493f      	ldr	r1, [pc, #252]	; (8002768 <display_wait+0x274>)
 800266c:	483c      	ldr	r0, [pc, #240]	; (8002760 <display_wait+0x26c>)
 800266e:	f006 fceb 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 8002672:	4b3e      	ldr	r3, [pc, #248]	; (800276c <display_wait+0x278>)
 8002674:	220c      	movs	r2, #12
 8002676:	212d      	movs	r1, #45	; 0x2d
 8002678:	4839      	ldr	r0, [pc, #228]	; (8002760 <display_wait+0x26c>)
 800267a:	f006 fc43 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 800267e:	4b42      	ldr	r3, [pc, #264]	; (8002788 <display_wait+0x294>)
 8002680:	221c      	movs	r2, #28
 8002682:	2132      	movs	r1, #50	; 0x32
 8002684:	4836      	ldr	r0, [pc, #216]	; (8002760 <display_wait+0x26c>)
 8002686:	f006 fc3d 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800268a:	4835      	ldr	r0, [pc, #212]	; (8002760 <display_wait+0x26c>)
 800268c:	f005 fef2 	bl	8008474 <u8g2_NextPage>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d1df      	bne.n	8002656 <display_wait+0x162>
		break;
 8002696:	e05f      	b.n	8002758 <display_wait+0x264>
	case 6:
		u8g2_FirstPage(&u8g2);
 8002698:	4831      	ldr	r0, [pc, #196]	; (8002760 <display_wait+0x26c>)
 800269a:	f005 fed7 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading6_width, loading6_height,
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <display_wait+0x298>)
 80026a0:	9301      	str	r3, [sp, #4]
 80026a2:	2320      	movs	r3, #32
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	2320      	movs	r3, #32
 80026a8:	2200      	movs	r2, #0
 80026aa:	2100      	movs	r1, #0
 80026ac:	482c      	ldr	r0, [pc, #176]	; (8002760 <display_wait+0x26c>)
 80026ae:	f005 fdff 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading6_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80026b2:	492d      	ldr	r1, [pc, #180]	; (8002768 <display_wait+0x274>)
 80026b4:	482a      	ldr	r0, [pc, #168]	; (8002760 <display_wait+0x26c>)
 80026b6:	f006 fcc7 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 45, 12, "Extinction");
 80026ba:	4b2c      	ldr	r3, [pc, #176]	; (800276c <display_wait+0x278>)
 80026bc:	220c      	movs	r2, #12
 80026be:	212d      	movs	r1, #45	; 0x2d
 80026c0:	4827      	ldr	r0, [pc, #156]	; (8002760 <display_wait+0x26c>)
 80026c2:	f006 fc1f 	bl	8008f04 <u8g2_DrawStr>
			u8g2_DrawStr(&u8g2, 50, 28, "dans 1 s");
 80026c6:	4b30      	ldr	r3, [pc, #192]	; (8002788 <display_wait+0x294>)
 80026c8:	221c      	movs	r2, #28
 80026ca:	2132      	movs	r1, #50	; 0x32
 80026cc:	4824      	ldr	r0, [pc, #144]	; (8002760 <display_wait+0x26c>)
 80026ce:	f006 fc19 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 80026d2:	4823      	ldr	r0, [pc, #140]	; (8002760 <display_wait+0x26c>)
 80026d4:	f005 fece 	bl	8008474 <u8g2_NextPage>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1df      	bne.n	800269e <display_wait+0x1aa>
		break;
 80026de:	e03b      	b.n	8002758 <display_wait+0x264>

	case 7:
		u8g2_FirstPage(&u8g2);
 80026e0:	481f      	ldr	r0, [pc, #124]	; (8002760 <display_wait+0x26c>)
 80026e2:	f005 feb3 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading7_width, loading7_height,
 80026e6:	4b2a      	ldr	r3, [pc, #168]	; (8002790 <display_wait+0x29c>)
 80026e8:	9301      	str	r3, [sp, #4]
 80026ea:	2320      	movs	r3, #32
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	2320      	movs	r3, #32
 80026f0:	2200      	movs	r2, #0
 80026f2:	2100      	movs	r1, #0
 80026f4:	481a      	ldr	r0, [pc, #104]	; (8002760 <display_wait+0x26c>)
 80026f6:	f005 fddb 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading7_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 80026fa:	491b      	ldr	r1, [pc, #108]	; (8002768 <display_wait+0x274>)
 80026fc:	4818      	ldr	r0, [pc, #96]	; (8002760 <display_wait+0x26c>)
 80026fe:	f006 fca3 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 8002702:	4b1a      	ldr	r3, [pc, #104]	; (800276c <display_wait+0x278>)
 8002704:	2214      	movs	r2, #20
 8002706:	2128      	movs	r1, #40	; 0x28
 8002708:	4815      	ldr	r0, [pc, #84]	; (8002760 <display_wait+0x26c>)
 800270a:	f006 fbfb 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800270e:	4814      	ldr	r0, [pc, #80]	; (8002760 <display_wait+0x26c>)
 8002710:	f005 feb0 	bl	8008474 <u8g2_NextPage>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1e5      	bne.n	80026e6 <display_wait+0x1f2>
		break;
 800271a:	e01d      	b.n	8002758 <display_wait+0x264>

	case 8:
		u8g2_FirstPage(&u8g2);
 800271c:	4810      	ldr	r0, [pc, #64]	; (8002760 <display_wait+0x26c>)
 800271e:	f005 fe95 	bl	800844c <u8g2_FirstPage>
		do
		{
			u8g2_DrawXBM(&u8g2, 0, 0, loading8_width, loading8_height,
 8002722:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <display_wait+0x2a0>)
 8002724:	9301      	str	r3, [sp, #4]
 8002726:	2320      	movs	r3, #32
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	2320      	movs	r3, #32
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	480b      	ldr	r0, [pc, #44]	; (8002760 <display_wait+0x26c>)
 8002732:	f005 fdbd 	bl	80082b0 <u8g2_DrawXBM>
					(uint8_t*) loading8_bits);
			u8g2_SetFont(&u8g2, u8g2_font_t0_11_tr);
 8002736:	490c      	ldr	r1, [pc, #48]	; (8002768 <display_wait+0x274>)
 8002738:	4809      	ldr	r0, [pc, #36]	; (8002760 <display_wait+0x26c>)
 800273a:	f006 fc85 	bl	8009048 <u8g2_SetFont>
			u8g2_DrawStr(&u8g2, 40, 20, "Extinction");
 800273e:	4b0b      	ldr	r3, [pc, #44]	; (800276c <display_wait+0x278>)
 8002740:	2214      	movs	r2, #20
 8002742:	2128      	movs	r1, #40	; 0x28
 8002744:	4806      	ldr	r0, [pc, #24]	; (8002760 <display_wait+0x26c>)
 8002746:	f006 fbdd 	bl	8008f04 <u8g2_DrawStr>
		} while (u8g2_NextPage(&u8g2));
 800274a:	4805      	ldr	r0, [pc, #20]	; (8002760 <display_wait+0x26c>)
 800274c:	f005 fe92 	bl	8008474 <u8g2_NextPage>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1e5      	bne.n	8002722 <display_wait+0x22e>
		break;
 8002756:	bf00      	nop
	}
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	200026f8 	.word	0x200026f8
 8002764:	20000228 	.word	0x20000228
 8002768:	0801c6b8 	.word	0x0801c6b8
 800276c:	0801b87c 	.word	0x0801b87c
 8002770:	0801b888 	.word	0x0801b888
 8002774:	200002a8 	.word	0x200002a8
 8002778:	20000328 	.word	0x20000328
 800277c:	0801b894 	.word	0x0801b894
 8002780:	200003a8 	.word	0x200003a8
 8002784:	20000428 	.word	0x20000428
 8002788:	0801b8a0 	.word	0x0801b8a0
 800278c:	200004a8 	.word	0x200004a8
 8002790:	20000528 	.word	0x20000528
 8002794:	200005a8 	.word	0x200005a8

08002798 <display_Print>:

/*
 * Fonction permettant d'afficher un message basique
 */
void display_Print(char *msg)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
	u8g2_FirstPage(&u8g2);
 80027a0:	480b      	ldr	r0, [pc, #44]	; (80027d0 <display_Print+0x38>)
 80027a2:	f005 fe53 	bl	800844c <u8g2_FirstPage>
	do
	{
		u8g2_SetFont(&u8g2, u8g2_font_ncenB14_tr);
 80027a6:	490b      	ldr	r1, [pc, #44]	; (80027d4 <display_Print+0x3c>)
 80027a8:	4809      	ldr	r0, [pc, #36]	; (80027d0 <display_Print+0x38>)
 80027aa:	f006 fc4d 	bl	8009048 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 0, 15, msg);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	220f      	movs	r2, #15
 80027b2:	2100      	movs	r1, #0
 80027b4:	4806      	ldr	r0, [pc, #24]	; (80027d0 <display_Print+0x38>)
 80027b6:	f006 fba5 	bl	8008f04 <u8g2_DrawStr>
	} while (u8g2_NextPage(&u8g2));
 80027ba:	4805      	ldr	r0, [pc, #20]	; (80027d0 <display_Print+0x38>)
 80027bc:	f005 fe5a 	bl	8008474 <u8g2_NextPage>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1ef      	bne.n	80027a6 <display_Print+0xe>
}
 80027c6:	bf00      	nop
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	200026f8 	.word	0x200026f8
 80027d4:	0801caa4 	.word	0x0801caa4

080027d8 <u8x8_byte_hw_i2c>:
/*
 * fonction pour u8g2
 */
uint8_t u8x8_byte_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af02      	add	r7, sp, #8
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	607b      	str	r3, [r7, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	72fb      	strb	r3, [r7, #11]
 80027e6:	4613      	mov	r3, r2
 80027e8:	72bb      	strb	r3, [r7, #10]
	/* u8g2/u8x8 will never send more than 32 bytes between START_TRANSFER and END_TRANSFER */
	/* add extra byte for the i2c address */
	static uint8_t buffer[34];
	static uint8_t buf_idx;
	uint8_t *data;
	switch (msg)
 80027ea:	7afb      	ldrb	r3, [r7, #11]
 80027ec:	3b14      	subs	r3, #20
 80027ee:	2b0c      	cmp	r3, #12
 80027f0:	d844      	bhi.n	800287c <u8x8_byte_hw_i2c+0xa4>
 80027f2:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <u8x8_byte_hw_i2c+0x20>)
 80027f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f8:	08002881 	.word	0x08002881
 80027fc:	0800287d 	.word	0x0800287d
 8002800:	0800287d 	.word	0x0800287d
 8002804:	0800282d 	.word	0x0800282d
 8002808:	0800285d 	.word	0x0800285d
 800280c:	08002865 	.word	0x08002865
 8002810:	0800287d 	.word	0x0800287d
 8002814:	0800287d 	.word	0x0800287d
 8002818:	0800287d 	.word	0x0800287d
 800281c:	0800287d 	.word	0x0800287d
 8002820:	0800287d 	.word	0x0800287d
 8002824:	0800287d 	.word	0x0800287d
 8002828:	08002881 	.word	0x08002881
	{
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	617b      	str	r3, [r7, #20]
		while (arg_int > 0)
 8002830:	e010      	b.n	8002854 <u8x8_byte_hw_i2c+0x7c>
		{
			buffer[buf_idx++] = *data;
 8002832:	4b16      	ldr	r3, [pc, #88]	; (800288c <u8x8_byte_hw_i2c+0xb4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	1c5a      	adds	r2, r3, #1
 8002838:	b2d1      	uxtb	r1, r2
 800283a:	4a14      	ldr	r2, [pc, #80]	; (800288c <u8x8_byte_hw_i2c+0xb4>)
 800283c:	7011      	strb	r1, [r2, #0]
 800283e:	461a      	mov	r2, r3
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	7819      	ldrb	r1, [r3, #0]
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <u8x8_byte_hw_i2c+0xb8>)
 8002846:	5499      	strb	r1, [r3, r2]
			data++;
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	3301      	adds	r3, #1
 800284c:	617b      	str	r3, [r7, #20]
			arg_int--;
 800284e:	7abb      	ldrb	r3, [r7, #10]
 8002850:	3b01      	subs	r3, #1
 8002852:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0)
 8002854:	7abb      	ldrb	r3, [r7, #10]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1eb      	bne.n	8002832 <u8x8_byte_hw_i2c+0x5a>
		}
		break;
 800285a:	e012      	b.n	8002882 <u8x8_byte_hw_i2c+0xaa>
	case U8X8_MSG_BYTE_SET_DC:
		/* ignored for i2c */
		break;

	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <u8x8_byte_hw_i2c+0xb4>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
		break;
 8002862:	e00e      	b.n	8002882 <u8x8_byte_hw_i2c+0xaa>

	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&BIGOLED_I2C_PORT, (0x78), (uint8_t*) buffer,
 8002864:	4b09      	ldr	r3, [pc, #36]	; (800288c <u8x8_byte_hw_i2c+0xb4>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800286e:	9200      	str	r2, [sp, #0]
 8002870:	4a07      	ldr	r2, [pc, #28]	; (8002890 <u8x8_byte_hw_i2c+0xb8>)
 8002872:	2178      	movs	r1, #120	; 0x78
 8002874:	4807      	ldr	r0, [pc, #28]	; (8002894 <u8x8_byte_hw_i2c+0xbc>)
 8002876:	f00a fb5f 	bl	800cf38 <HAL_I2C_Master_Transmit>
				buf_idx, 1000);
		break;
 800287a:	e002      	b.n	8002882 <u8x8_byte_hw_i2c+0xaa>

	default:
		return 0;
 800287c:	2300      	movs	r3, #0
 800287e:	e001      	b.n	8002884 <u8x8_byte_hw_i2c+0xac>
		break;
 8002880:	bf00      	nop
	}
	return 1;
 8002882:	2301      	movs	r3, #1
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	20000b35 	.word	0x20000b35
 8002890:	20000b38 	.word	0x20000b38
 8002894:	20001d90 	.word	0x20001d90

08002898 <u8x8_gpio_and_delay>:
/*
 * Fonction pour u8g2
 */
uint8_t u8x8_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg,
U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	607b      	str	r3, [r7, #4]
 80028a2:	460b      	mov	r3, r1
 80028a4:	72fb      	strb	r3, [r7, #11]
 80028a6:	4613      	mov	r3, r2
 80028a8:	72bb      	strb	r3, [r7, #10]
	switch (msg)
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	3b28      	subs	r3, #40	; 0x28
 80028ae:	2b25      	cmp	r3, #37	; 0x25
 80028b0:	d867      	bhi.n	8002982 <u8x8_gpio_and_delay+0xea>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <u8x8_gpio_and_delay+0x20>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	08002951 	.word	0x08002951
 80028bc:	08002959 	.word	0x08002959
 80028c0:	08002983 	.word	0x08002983
 80028c4:	08002983 	.word	0x08002983
 80028c8:	08002983 	.word	0x08002983
 80028cc:	0800298d 	.word	0x0800298d
 80028d0:	08002983 	.word	0x08002983
 80028d4:	08002983 	.word	0x08002983
 80028d8:	08002983 	.word	0x08002983
 80028dc:	08002983 	.word	0x08002983
 80028e0:	08002983 	.word	0x08002983
 80028e4:	08002983 	.word	0x08002983
 80028e8:	08002983 	.word	0x08002983
 80028ec:	08002983 	.word	0x08002983
 80028f0:	08002983 	.word	0x08002983
 80028f4:	08002983 	.word	0x08002983
 80028f8:	08002983 	.word	0x08002983
 80028fc:	08002983 	.word	0x08002983
 8002900:	08002983 	.word	0x08002983
 8002904:	08002983 	.word	0x08002983
 8002908:	08002983 	.word	0x08002983
 800290c:	08002983 	.word	0x08002983
 8002910:	08002983 	.word	0x08002983
 8002914:	08002983 	.word	0x08002983
 8002918:	08002983 	.word	0x08002983
 800291c:	08002983 	.word	0x08002983
 8002920:	08002983 	.word	0x08002983
 8002924:	08002983 	.word	0x08002983
 8002928:	08002983 	.word	0x08002983
 800292c:	08002983 	.word	0x08002983
 8002930:	08002983 	.word	0x08002983
 8002934:	08002983 	.word	0x08002983
 8002938:	08002983 	.word	0x08002983
 800293c:	08002983 	.word	0x08002983
 8002940:	08002983 	.word	0x08002983
 8002944:	08002983 	.word	0x08002983
 8002948:	08002963 	.word	0x08002963
 800294c:	08002973 	.word	0x08002973
	{
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 8002950:	2001      	movs	r0, #1
 8002952:	f009 f9b9 	bl	800bcc8 <HAL_Delay>
		break;
 8002956:	e01a      	b.n	800298e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8002958:	7abb      	ldrb	r3, [r7, #10]
 800295a:	4618      	mov	r0, r3
 800295c:	f009 f9b4 	bl	800bcc8 <HAL_Delay>
		break;
 8002960:	e015      	b.n	800298e <u8x8_gpio_and_delay+0xf6>
		break;

	case U8X8_MSG_GPIO_I2C_CLOCK:
		// arg_int=0: Output low at I2C clock pin
		// arg_int=1: Input dir with pullup high for I2C clock pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, arg_int);
 8002962:	7abb      	ldrb	r3, [r7, #10]
 8002964:	461a      	mov	r2, r3
 8002966:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800296a:	480b      	ldr	r0, [pc, #44]	; (8002998 <u8x8_gpio_and_delay+0x100>)
 800296c:	f00a fa3c 	bl	800cde8 <HAL_GPIO_WritePin>
		break;
 8002970:	e00d      	b.n	800298e <u8x8_gpio_and_delay+0xf6>

	case U8X8_MSG_GPIO_I2C_DATA:
		// arg_int=0: Output low at I2C data pin
		// arg_int=1: Input dir with pullup high for I2C data pin
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, arg_int);
 8002972:	7abb      	ldrb	r3, [r7, #10]
 8002974:	461a      	mov	r2, r3
 8002976:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800297a:	4807      	ldr	r0, [pc, #28]	; (8002998 <u8x8_gpio_and_delay+0x100>)
 800297c:	f00a fa34 	bl	800cde8 <HAL_GPIO_WritePin>
		break;
 8002980:	e005      	b.n	800298e <u8x8_gpio_and_delay+0xf6>

	default:
		u8x8_SetGPIOResult(u8x8, 1);      // default return value
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		break;
 800298a:	e000      	b.n	800298e <u8x8_gpio_and_delay+0xf6>
		break;
 800298c:	bf00      	nop

	}
	return 1;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	48000400 	.word	0x48000400

0800299c <display_BatteryLvl>:

/*
 * Permet d'afficher le niveau de batterie
 */
void display_BatteryLvl(uint8_t lvl, uint8_t posXmes, uint8_t posYmes)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	4603      	mov	r3, r0
 80029a4:	71fb      	strb	r3, [r7, #7]
 80029a6:	460b      	mov	r3, r1
 80029a8:	71bb      	strb	r3, [r7, #6]
 80029aa:	4613      	mov	r3, r2
 80029ac:	717b      	strb	r3, [r7, #5]

	if (lvl <= 10)
 80029ae:	79fb      	ldrb	r3, [r7, #7]
 80029b0:	2b0a      	cmp	r3, #10
 80029b2:	d80a      	bhi.n	80029ca <display_BatteryLvl+0x2e>
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_0_width, bat_0_height,
 80029b4:	79b9      	ldrb	r1, [r7, #6]
 80029b6:	4b37      	ldr	r3, [pc, #220]	; (8002a94 <display_BatteryLvl+0xf8>)
 80029b8:	9301      	str	r3, [sp, #4]
 80029ba:	230c      	movs	r3, #12
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	2314      	movs	r3, #20
 80029c0:	2200      	movs	r2, #0
 80029c2:	4835      	ldr	r0, [pc, #212]	; (8002a98 <display_BatteryLvl+0xfc>)
 80029c4:	f005 fc74 	bl	80082b0 <u8g2_DrawXBM>
	else
	{
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width,
		BattertyError_height, (uint8_t*) BattertyError_bits);
	}
}
 80029c8:	e05f      	b.n	8002a8a <display_BatteryLvl+0xee>
	else if (lvl > 10 && lvl < 30)
 80029ca:	79fb      	ldrb	r3, [r7, #7]
 80029cc:	2b0a      	cmp	r3, #10
 80029ce:	d90d      	bls.n	80029ec <display_BatteryLvl+0x50>
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	2b1d      	cmp	r3, #29
 80029d4:	d80a      	bhi.n	80029ec <display_BatteryLvl+0x50>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_20_width, bat_20_height,
 80029d6:	79b9      	ldrb	r1, [r7, #6]
 80029d8:	4b30      	ldr	r3, [pc, #192]	; (8002a9c <display_BatteryLvl+0x100>)
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	230c      	movs	r3, #12
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2314      	movs	r3, #20
 80029e2:	2200      	movs	r2, #0
 80029e4:	482c      	ldr	r0, [pc, #176]	; (8002a98 <display_BatteryLvl+0xfc>)
 80029e6:	f005 fc63 	bl	80082b0 <u8g2_DrawXBM>
 80029ea:	e04e      	b.n	8002a8a <display_BatteryLvl+0xee>
	else if (lvl >= 30 && lvl < 50)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	2b1d      	cmp	r3, #29
 80029f0:	d90d      	bls.n	8002a0e <display_BatteryLvl+0x72>
 80029f2:	79fb      	ldrb	r3, [r7, #7]
 80029f4:	2b31      	cmp	r3, #49	; 0x31
 80029f6:	d80a      	bhi.n	8002a0e <display_BatteryLvl+0x72>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_40_width, bat_40_height,
 80029f8:	79b9      	ldrb	r1, [r7, #6]
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <display_BatteryLvl+0x104>)
 80029fc:	9301      	str	r3, [sp, #4]
 80029fe:	230c      	movs	r3, #12
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2314      	movs	r3, #20
 8002a04:	2200      	movs	r2, #0
 8002a06:	4824      	ldr	r0, [pc, #144]	; (8002a98 <display_BatteryLvl+0xfc>)
 8002a08:	f005 fc52 	bl	80082b0 <u8g2_DrawXBM>
 8002a0c:	e03d      	b.n	8002a8a <display_BatteryLvl+0xee>
	else if (lvl >= 50 && lvl < 70)
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	2b31      	cmp	r3, #49	; 0x31
 8002a12:	d90d      	bls.n	8002a30 <display_BatteryLvl+0x94>
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	2b45      	cmp	r3, #69	; 0x45
 8002a18:	d80a      	bhi.n	8002a30 <display_BatteryLvl+0x94>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_60_width, bat_60_height,
 8002a1a:	79b9      	ldrb	r1, [r7, #6]
 8002a1c:	4b21      	ldr	r3, [pc, #132]	; (8002aa4 <display_BatteryLvl+0x108>)
 8002a1e:	9301      	str	r3, [sp, #4]
 8002a20:	230c      	movs	r3, #12
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	2314      	movs	r3, #20
 8002a26:	2200      	movs	r2, #0
 8002a28:	481b      	ldr	r0, [pc, #108]	; (8002a98 <display_BatteryLvl+0xfc>)
 8002a2a:	f005 fc41 	bl	80082b0 <u8g2_DrawXBM>
 8002a2e:	e02c      	b.n	8002a8a <display_BatteryLvl+0xee>
	else if (lvl >= 70 && lvl < 90)
 8002a30:	79fb      	ldrb	r3, [r7, #7]
 8002a32:	2b45      	cmp	r3, #69	; 0x45
 8002a34:	d90d      	bls.n	8002a52 <display_BatteryLvl+0xb6>
 8002a36:	79fb      	ldrb	r3, [r7, #7]
 8002a38:	2b59      	cmp	r3, #89	; 0x59
 8002a3a:	d80a      	bhi.n	8002a52 <display_BatteryLvl+0xb6>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_80_width, bat_80_height,
 8002a3c:	79b9      	ldrb	r1, [r7, #6]
 8002a3e:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <display_BatteryLvl+0x10c>)
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	230c      	movs	r3, #12
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2314      	movs	r3, #20
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4813      	ldr	r0, [pc, #76]	; (8002a98 <display_BatteryLvl+0xfc>)
 8002a4c:	f005 fc30 	bl	80082b0 <u8g2_DrawXBM>
 8002a50:	e01b      	b.n	8002a8a <display_BatteryLvl+0xee>
	else if (lvl >= 90 && lvl <= 100)
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b59      	cmp	r3, #89	; 0x59
 8002a56:	d90d      	bls.n	8002a74 <display_BatteryLvl+0xd8>
 8002a58:	79fb      	ldrb	r3, [r7, #7]
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d80a      	bhi.n	8002a74 <display_BatteryLvl+0xd8>
		u8g2_DrawXBM(&u8g2, posXmes, 0, bat_100_width, bat_100_height,
 8002a5e:	79b9      	ldrb	r1, [r7, #6]
 8002a60:	4b12      	ldr	r3, [pc, #72]	; (8002aac <display_BatteryLvl+0x110>)
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	230c      	movs	r3, #12
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2314      	movs	r3, #20
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	480a      	ldr	r0, [pc, #40]	; (8002a98 <display_BatteryLvl+0xfc>)
 8002a6e:	f005 fc1f 	bl	80082b0 <u8g2_DrawXBM>
 8002a72:	e00a      	b.n	8002a8a <display_BatteryLvl+0xee>
		u8g2_DrawXBM(&u8g2, posXmes, 0, BattertyError_width,
 8002a74:	79b9      	ldrb	r1, [r7, #6]
 8002a76:	4b0e      	ldr	r3, [pc, #56]	; (8002ab0 <display_BatteryLvl+0x114>)
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	230c      	movs	r3, #12
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	2314      	movs	r3, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	4805      	ldr	r0, [pc, #20]	; (8002a98 <display_BatteryLvl+0xfc>)
 8002a84:	f005 fc14 	bl	80082b0 <u8g2_DrawXBM>
}
 8002a88:	e7ff      	b.n	8002a8a <display_BatteryLvl+0xee>
 8002a8a:	bf00      	nop
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20000628 	.word	0x20000628
 8002a98:	200026f8 	.word	0x200026f8
 8002a9c:	2000064c 	.word	0x2000064c
 8002aa0:	20000670 	.word	0x20000670
 8002aa4:	20000694 	.word	0x20000694
 8002aa8:	200006b8 	.word	0x200006b8
 8002aac:	200006dc 	.word	0x200006dc
 8002ab0:	20000700 	.word	0x20000700

08002ab4 <PowerBuzVib>:
#include "hes_buzvib.h"

void PowerBuzVib(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
	OutBuzOn();
 8002abc:	f001 f8be 	bl	8003c3c <OutBuzOn>
	OutMotorWu(1);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f001 f85d 	bl	8003b80 <OutMotorWu>
	HAL_Delay(Delay);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f009 f8fe 	bl	800bcc8 <HAL_Delay>
	OutBuzOff();
 8002acc:	f001 f8c0 	bl	8003c50 <OutBuzOff>
	OutMotorWu(0);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f001 f855 	bl	8003b80 <OutMotorWu>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <PowerVib>:
	HAL_Delay(Delay);
	OutBuzOff();
}

void PowerVib(uint32_t Delay)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
	OutMotorWu(1);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f001 f84a 	bl	8003b80 <OutMotorWu>
	HAL_Delay(Delay);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f009 f8eb 	bl	800bcc8 <HAL_Delay>
	OutMotorWu(0);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f001 f844 	bl	8003b80 <OutMotorWu>
 8002af8:	bf00      	nop
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <chargerRead>:

extern HAL_StatusTypeDef I2C1_OK;

//LP3947
void chargerRead(int *bmsEOC, int *bmsCharge, int TabGen[])
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08a      	sub	sp, #40	; 0x28
 8002b04:	af04      	add	r7, sp, #16
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]

	uint8_t buffer = 0x00;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	75fb      	strb	r3, [r7, #23]

	if (I2C1_OK == HAL_OK)
 8002b10:	4b16      	ldr	r3, [pc, #88]	; (8002b6c <chargerRead+0x6c>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d110      	bne.n	8002b3a <chargerRead+0x3a>
	{
		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C << 1, 0x01, 1,
 8002b18:	2364      	movs	r3, #100	; 0x64
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	9301      	str	r3, [sp, #4]
 8002b20:	f107 0317 	add.w	r3, r7, #23
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2301      	movs	r3, #1
 8002b28:	2201      	movs	r2, #1
 8002b2a:	218e      	movs	r1, #142	; 0x8e
 8002b2c:	4810      	ldr	r0, [pc, #64]	; (8002b70 <chargerRead+0x70>)
 8002b2e:	f00a fc0b 	bl	800d348 <HAL_I2C_Mem_Read>
 8002b32:	4603      	mov	r3, r0
 8002b34:	461a      	mov	r2, r3
 8002b36:	4b0d      	ldr	r3, [pc, #52]	; (8002b6c <chargerRead+0x6c>)
 8002b38:	701a      	strb	r2, [r3, #0]
				&buffer, 1, 100); // Charger
	}

	*bmsEOC = (int) ((buffer & ((uint8_t) 0x10)) / ((uint8_t) 0x10)); //10000
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	f003 0310 	and.w	r3, r3, #16
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	da00      	bge.n	8002b46 <chargerRead+0x46>
 8002b44:	330f      	adds	r3, #15
 8002b46:	111b      	asrs	r3, r3, #4
 8002b48:	461a      	mov	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	601a      	str	r2, [r3, #0]
	*bmsCharge = (int) ((buffer & ((uint8_t) 0x08)) / ((uint8_t) 0x08)); //1000
 8002b4e:	7dfb      	ldrb	r3, [r7, #23]
 8002b50:	f003 0308 	and.w	r3, r3, #8
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	da00      	bge.n	8002b5a <chargerRead+0x5a>
 8002b58:	3307      	adds	r3, #7
 8002b5a:	10db      	asrs	r3, r3, #3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	601a      	str	r2, [r3, #0]
//	if (I2C1_OK == HAL_OK)
//	{
//		I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, LP3947_I2C <<1, 0x00, 1, &buffer, 1, 50); // Charger
//	}

}
 8002b62:	bf00      	nop
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000c08 	.word	0x20000c08
 8002b70:	20001ddc 	.word	0x20001ddc
 8002b74:	00000000 	.word	0x00000000

08002b78 <ReadBat>:

//MAX17260
void ReadBat(int *percent, int bmsEOC, int bmsCharge, int TabGen[])
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b092      	sub	sp, #72	; 0x48
 8002b7c:	af04      	add	r7, sp, #16
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	603b      	str	r3, [r7, #0]
	uint8_t buffer[2];
	int battmVolt;
	int newPercent;
	int current;

	if (TabGen[LOCK_I2C1] == 0) // I2C available
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	33ec      	adds	r3, #236	; 0xec
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 813d 	bne.w	8002e0c <ReadBat+0x294>
	{
		buffer[1] = 0x00;
 8002b92:	2300      	movs	r3, #0
 8002b94:	757b      	strb	r3, [r7, #21]
		buffer[0] = 0x00;
 8002b96:	2300      	movs	r3, #0
 8002b98:	753b      	strb	r3, [r7, #20]

		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	33ec      	adds	r3, #236	; 0xec
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);

		// 0x36 => max17260
		// 0x47 => LP3947 (to test)

		if (I2C1_OK == HAL_OK)
 8002ba2:	4b9f      	ldr	r3, [pc, #636]	; (8002e20 <ReadBat+0x2a8>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f040 8086 	bne.w	8002cb8 <ReadBat+0x140>
		{
			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, 0x36 << 1, 0x19, 1,
 8002bac:	2364      	movs	r3, #100	; 0x64
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2301      	movs	r3, #1
 8002bbc:	2219      	movs	r2, #25
 8002bbe:	216c      	movs	r1, #108	; 0x6c
 8002bc0:	4898      	ldr	r0, [pc, #608]	; (8002e24 <ReadBat+0x2ac>)
 8002bc2:	f00a fbc1 	bl	800d348 <HAL_I2C_Mem_Read>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4b95      	ldr	r3, [pc, #596]	; (8002e20 <ReadBat+0x2a8>)
 8002bcc:	701a      	strb	r2, [r3, #0]
					buffer, 2, 100);
			uint32_t buff = buffer[1];
 8002bce:	7d7b      	ldrb	r3, [r7, #21]
 8002bd0:	633b      	str	r3, [r7, #48]	; 0x30
			buff = buff * 256;
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	021b      	lsls	r3, r3, #8
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
			//buff += buffer[0]	;
			buff = buff / 16.0;
 8002bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bda:	f7fd fc93 	bl	8000504 <__aeabi_ui2d>
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	4b91      	ldr	r3, [pc, #580]	; (8002e28 <ReadBat+0x2b0>)
 8002be4:	f7fd fe32 	bl	800084c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4610      	mov	r0, r2
 8002bee:	4619      	mov	r1, r3
 8002bf0:	f7fd ffda 	bl	8000ba8 <__aeabi_d2uiz>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	633b      	str	r3, [r7, #48]	; 0x30
			battmVolt = buff * 1.25;
 8002bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bfa:	f7fd fc83 	bl	8000504 <__aeabi_ui2d>
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	4b8a      	ldr	r3, [pc, #552]	; (8002e2c <ReadBat+0x2b4>)
 8002c04:	f7fd fcf8 	bl	80005f8 <__aeabi_dmul>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	4610      	mov	r0, r2
 8002c0e:	4619      	mov	r1, r3
 8002c10:	f7fd ffa2 	bl	8000b58 <__aeabi_d2iz>
 8002c14:	4603      	mov	r3, r0
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c
			TabGen[VBAT_mV] = battmVolt;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8002c1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c20:	601a      	str	r2, [r3, #0]
			if (battmVolt >= BAT_MIN)
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	f640 42e3 	movw	r2, #3299	; 0xce3
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	dd19      	ble.n	8002c60 <ReadBat+0xe8>
			{
				if (battmVolt < BAT_MAX)
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002c32:	4293      	cmp	r3, r2
 8002c34:	dc11      	bgt.n	8002c5a <ReadBat+0xe2>
				{
					buff = battmVolt - BAT_MIN;
 8002c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c38:	f6a3 43e4 	subw	r3, r3, #3300	; 0xce4
 8002c3c:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff * 100;
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	2264      	movs	r2, #100	; 0x64
 8002c42:	fb02 f303 	mul.w	r3, r2, r3
 8002c46:	633b      	str	r3, [r7, #48]	; 0x30
					buff = buff / (BAT_MAX - BAT_MIN);
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	4a79      	ldr	r2, [pc, #484]	; (8002e30 <ReadBat+0x2b8>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	633b      	str	r3, [r7, #48]	; 0x30

					newPercent = buff; //+ 5; // =(95 * ((A5 - 3100) / 700) + 5)
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
 8002c58:	e00c      	b.n	8002c74 <ReadBat+0xfc>
				}
				else
				{
					newPercent = 100;
 8002c5a:	2364      	movs	r3, #100	; 0x64
 8002c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c5e:	e009      	b.n	8002c74 <ReadBat+0xfc>
				}
			}
			else
			{
				if (battmVolt < BAT_MIN - 200)
 8002c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c62:	f640 421b 	movw	r2, #3099	; 0xc1b
 8002c66:	4293      	cmp	r3, r2
 8002c68:	dc02      	bgt.n	8002c70 <ReadBat+0xf8>
					newPercent = 255;
 8002c6a:	23ff      	movs	r3, #255	; 0xff
 8002c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c6e:	e001      	b.n	8002c74 <ReadBat+0xfc>
				else
					newPercent = 1;
 8002c70:	2301      	movs	r3, #1
 8002c72:	637b      	str	r3, [r7, #52]	; 0x34
			}

			if (battmVolt < 3800)
 8002c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c76:	f640 62d7 	movw	r2, #3799	; 0xed7
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	dc05      	bgt.n	8002c8a <ReadBat+0x112>
			{
				TabGen[LOW_BAT] = 1;
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002c84:	2201      	movs	r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	e004      	b.n	8002c94 <ReadBat+0x11c>
			}
			else
				TabGen[LOW_BAT] = 0;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]

			if ((newPercent < *percent) || (bmsEOC == 1) || (bmsCharge == 1)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	db08      	blt.n	8002cb0 <ReadBat+0x138>
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d005      	beq.n	8002cb0 <ReadBat+0x138>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d002      	beq.n	8002cb0 <ReadBat+0x138>
					|| newPercent == 255)
 8002caa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cac:	2bff      	cmp	r3, #255	; 0xff
 8002cae:	d108      	bne.n	8002cc2 <ReadBat+0x14a>
			{
				*percent = newPercent;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e004      	b.n	8002cc2 <ReadBat+0x14a>
			}
		}
		else
			*percent = TabGen[BAT_VALUE];
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	601a      	str	r2, [r3, #0]
		//HAL_Delay(1);		// bms // AvrgVoltage (mm 45s)

		TabGen[LOCK_I2C1] = 0;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	33ec      	adds	r3, #236	; 0xec
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

		uint16_t capacity_uV = 0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	857b      	strh	r3, [r7, #42]	; 0x2a
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x05, 1, buffer, 2, 20); // capacity measured

		capacity_uV = buffer[1] * 255 + buffer[0];
 8002cce:	7d7b      	ldrb	r3, [r7, #21]
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	0212      	lsls	r2, r2, #8
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	7d3b      	ldrb	r3, [r7, #20]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4413      	add	r3, r2
 8002ce0:	857b      	strh	r3, [r7, #42]	; 0x2a
		float capacity = (5 / 0.01) * capacity_uV / 1000; // capacity in mAH = (5.0uV / RSENSE) * capacity in uv / 1000
 8002ce2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fc1d 	bl	8000524 <__aeabi_i2d>
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	4b51      	ldr	r3, [pc, #324]	; (8002e34 <ReadBat+0x2bc>)
 8002cf0:	f7fd fc82 	bl	80005f8 <__aeabi_dmul>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	4610      	mov	r0, r2
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	f04f 0200 	mov.w	r2, #0
 8002d00:	4b4d      	ldr	r3, [pc, #308]	; (8002e38 <ReadBat+0x2c0>)
 8002d02:	f7fd fda3 	bl	800084c <__aeabi_ddiv>
 8002d06:	4602      	mov	r2, r0
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f7fd ff6b 	bl	8000be8 <__aeabi_d2f>
 8002d12:	4603      	mov	r3, r0
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24

		uint16_t cycles = 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	847b      	strh	r3, [r7, #34]	; 0x22
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x17, 1, buffer, 2, 20); //
		cycles = buffer[1] * 255 + buffer[0];
 8002d1a:	7d7b      	ldrb	r3, [r7, #21]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	461a      	mov	r2, r3
 8002d20:	0212      	lsls	r2, r2, #8
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	7d3b      	ldrb	r3, [r7, #20]
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4413      	add	r3, r2
 8002d2c:	847b      	strh	r3, [r7, #34]	; 0x22

		uint16_t percentage = 0;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	843b      	strh	r3, [r7, #32]

		int16_t avg_current = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	83fb      	strh	r3, [r7, #30]
//		if (I2C1_OK == HAL_OK)
//		{
//			I2C1_OK = HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x0B, 1, buffer, 2, 100); // avg current
//		}

		uint16_t temp = 0;
 8002d36:	2300      	movs	r3, #0
 8002d38:	83bb      	strh	r3, [r7, #28]
		temp = buffer[1];
 8002d3a:	7d7b      	ldrb	r3, [r7, #21]
 8002d3c:	83bb      	strh	r3, [r7, #28]
		temp = temp; //& 0b01111111;
		temp = temp << 8;
 8002d3e:	8bbb      	ldrh	r3, [r7, #28]
 8002d40:	021b      	lsls	r3, r3, #8
 8002d42:	83bb      	strh	r3, [r7, #28]
		temp = temp + buffer[0];
 8002d44:	7d3b      	ldrb	r3, [r7, #20]
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	8bbb      	ldrh	r3, [r7, #28]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	83bb      	strh	r3, [r7, #28]
		avg_current = (int16_t) temp;
 8002d4e:	8bbb      	ldrh	r3, [r7, #28]
 8002d50:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int16_t)0xcdde;
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] =ke
		avg_current = avg_current * (1.5625 / 0.01) / 1000;	// * (buffer[1] *255 + buffer[0]) ;
 8002d52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7fd fbe4 	bl	8000524 <__aeabi_i2d>
 8002d5c:	a32e      	add	r3, pc, #184	; (adr r3, 8002e18 <ReadBat+0x2a0>)
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	f7fd fc49 	bl	80005f8 <__aeabi_dmul>
 8002d66:	4602      	mov	r2, r0
 8002d68:	460b      	mov	r3, r1
 8002d6a:	4610      	mov	r0, r2
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	4b31      	ldr	r3, [pc, #196]	; (8002e38 <ReadBat+0x2c0>)
 8002d74:	f7fd fd6a 	bl	800084c <__aeabi_ddiv>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd feea 	bl	8000b58 <__aeabi_d2iz>
 8002d84:	4603      	mov	r3, r0
 8002d86:	83fb      	strh	r3, [r7, #30]
		TabGen[AVG_CURRENT] = (int) abs(avg_current);
 8002d88:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bfb8      	it	lt
 8002d90:	425b      	neglt	r3, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002d9a:	601a      	str	r2, [r3, #0]

		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x1C, 1, buffer, 2, 20); // min max current

		uint16_t min, max = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	837b      	strh	r3, [r7, #26]

		max = buffer[1];
 8002da0:	7d7b      	ldrb	r3, [r7, #21]
 8002da2:	837b      	strh	r3, [r7, #26]
		min = buffer[0];
 8002da4:	7d3b      	ldrb	r3, [r7, #20]
 8002da6:	833b      	strh	r3, [r7, #24]
		//temp = temp << 8 ;
		//temp = buffer[0];
		//(uint16_t)buffer[1] << 8 + buffer[0];
		avg_current = (int) min;
 8002da8:	8b3b      	ldrh	r3, [r7, #24]
 8002daa:	83fb      	strh	r3, [r7, #30]
		//avg_current = (int)((int8_t)buffer[1] *255 + (int8_t)buffer[0]);
		//avg_current = (((int)(buffer[1] *255 + buffer[0])*1.5625)/0.01) ;
		//TabGen[AVG_CURRENT] = buffer[1] *255 + buffer[0];
		//TabGen[AVG_CURRENT] = avg_current*(0.4/0.01)/1000;// * (buffer[1] *255 + buffer[0]) ;

		uint16_t time = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x20, 1, buffer, 2, 100); // TTF
		time = buffer[1] * 255 + buffer[0];
 8002db0:	7d7b      	ldrb	r3, [r7, #21]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	461a      	mov	r2, r3
 8002db6:	0212      	lsls	r2, r2, #8
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	7d3b      	ldrb	r3, [r7, #20]
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4413      	add	r3, r2
 8002dc2:	82fb      	strh	r3, [r7, #22]
		time = time / 60;
 8002dc4:	8afb      	ldrh	r3, [r7, #22]
 8002dc6:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <ReadBat+0x2c4>)
 8002dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dcc:	095b      	lsrs	r3, r3, #5
 8002dce:	82fb      	strh	r3, [r7, #22]
		time = time / 60;
 8002dd0:	8afb      	ldrh	r3, [r7, #22]
 8002dd2:	4a1a      	ldr	r2, [pc, #104]	; (8002e3c <ReadBat+0x2c4>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	095b      	lsrs	r3, r3, #5
 8002dda:	82fb      	strh	r3, [r7, #22]

		time = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	82fb      	strh	r3, [r7, #22]
		//HAL_I2C_Mem_Read(&CHARGER_I2C_PORT, MAX17260_I2C << 1, 0x11, 1, buffer, 2, 100); // TTE
		time = buffer[1] * 255 + buffer[0];
 8002de0:	7d7b      	ldrb	r3, [r7, #21]
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	461a      	mov	r2, r3
 8002de6:	0212      	lsls	r2, r2, #8
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b29a      	uxth	r2, r3
 8002dec:	7d3b      	ldrb	r3, [r7, #20]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	4413      	add	r3, r2
 8002df2:	82fb      	strh	r3, [r7, #22]
		time = time / 60;
 8002df4:	8afb      	ldrh	r3, [r7, #22]
 8002df6:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <ReadBat+0x2c4>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	82fb      	strh	r3, [r7, #22]
		time = time / 60;
 8002e00:	8afb      	ldrh	r3, [r7, #22]
 8002e02:	4a0e      	ldr	r2, [pc, #56]	; (8002e3c <ReadBat+0x2c4>)
 8002e04:	fba2 2303 	umull	r2, r3, r2, r3
 8002e08:	095b      	lsrs	r3, r3, #5
 8002e0a:	82fb      	strh	r3, [r7, #22]
	 HAL_Delay(100);
	 OutCmdBuzzer(0);
	 HAL_Delay(50);
	 }*/

}
 8002e0c:	bf00      	nop
 8002e0e:	3738      	adds	r7, #56	; 0x38
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}
 8002e14:	f3af 8000 	nop.w
 8002e18:	00000000 	.word	0x00000000
 8002e1c:	40638800 	.word	0x40638800
 8002e20:	20000c08 	.word	0x20000c08
 8002e24:	20001ddc 	.word	0x20001ddc
 8002e28:	40300000 	.word	0x40300000
 8002e2c:	3ff40000 	.word	0x3ff40000
 8002e30:	51eb851f 	.word	0x51eb851f
 8002e34:	407f4000 	.word	0x407f4000
 8002e38:	408f4000 	.word	0x408f4000
 8002e3c:	88888889 	.word	0x88888889

08002e40 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8002e44:	2200      	movs	r2, #0
 8002e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e4a:	2000      	movs	r0, #0
 8002e4c:	f000 f83e 	bl	8002ecc <ee_read>
 8002e50:	4603      	mov	r3, r0
#else
  return true;
#endif
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <ee_format>:
//##########################################################################################################
bool ee_format(bool keepRamData)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	71fb      	strb	r3, [r7, #7]
  uint32_t error;
  HAL_FLASH_Unlock();
 8002e62:	f009 fb49 	bl	800c4f8 <HAL_FLASH_Unlock>
#elif _EE_PAGE_OR_SECTOR == SECTOR
  flashErase.NbSectors = 1;
  flashErase.Sector =  _EE_ADDR_INUSE;
  flashErase.TypeErase = FLASH_TYPEERASE_SECTORS;
#elif _EE_PAGE_OR_SECTOR == PAGE_NUM
  flashErase.NbPages = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
  flashErase.Page = _EE_USE_FLASH_PAGE_OR_SECTOR;
 8002e6a:	237f      	movs	r3, #127	; 0x7f
 8002e6c:	617b      	str	r3, [r7, #20]
  flashErase.TypeErase = FLASH_TYPEERASE_PAGES;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
#endif
#ifdef _EE_FLASH_BANK
  flashErase.Banks = _EE_FLASH_BANK;
 8002e72:	2301      	movs	r3, #1
 8002e74:	613b      	str	r3, [r7, #16]
#endif
#ifdef _EE_VOLTAGE_RANGE
  flashErase.VoltageRange = _EE_VOLTAGE_RANGE;
#endif
  if (HAL_FLASHEx_Erase(&flashErase, &error) == HAL_OK)
 8002e76:	f107 021c 	add.w	r2, r7, #28
 8002e7a:	f107 030c 	add.w	r3, r7, #12
 8002e7e:	4611      	mov	r1, r2
 8002e80:	4618      	mov	r0, r3
 8002e82:	f009 fc1f 	bl	800c6c4 <HAL_FLASHEx_Erase>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d115      	bne.n	8002eb8 <ee_format+0x60>
  {
    HAL_FLASH_Lock();
 8002e8c:	f009 fb56 	bl	800c53c <HAL_FLASH_Lock>
    if (error != 0xFFFFFFFF)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e96:	d001      	beq.n	8002e9c <ee_format+0x44>
      return false;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	e010      	b.n	8002ebe <ee_format+0x66>
    else
    {
#if (_EE_USE_RAM_BYTE > 0)
      if (keepRamData == false)
 8002e9c:	79fb      	ldrb	r3, [r7, #7]
 8002e9e:	f083 0301 	eor.w	r3, r3, #1
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d005      	beq.n	8002eb4 <ee_format+0x5c>
        memset(ee_ram, 0xFF, _EE_USE_RAM_BYTE);
 8002ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eac:	21ff      	movs	r1, #255	; 0xff
 8002eae:	4806      	ldr	r0, [pc, #24]	; (8002ec8 <ee_format+0x70>)
 8002eb0:	f015 f8f2 	bl	8018098 <memset>
#endif
      return true;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e002      	b.n	8002ebe <ee_format+0x66>
    }
  }
  HAL_FLASH_Lock();
 8002eb8:	f009 fb40 	bl	800c53c <HAL_FLASH_Lock>
  return false;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3720      	adds	r7, #32
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	20001990 	.word	0x20001990

08002ecc <ee_read>:
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4413      	add	r3, r2
 8002ede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee2:	d901      	bls.n	8002ee8 <ee_read+0x1c>
    return false;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	e02b      	b.n	8002f40 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e021      	b.n	8002f32 <ee_read+0x66>
  {
    if (data != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00b      	beq.n	8002f0c <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002efa:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	701a      	strb	r2, [r3, #0]
      data++;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d20b      	bcs.n	8002f2c <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8002f1a:	f503 337e 	add.w	r3, r3, #260096	; 0x3f800
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	b2d9      	uxtb	r1, r3
 8002f22:	4a0a      	ldr	r2, [pc, #40]	; (8002f4c <ee_read+0x80>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4413      	add	r3, r2
 8002f28:	460a      	mov	r2, r1
 8002f2a:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	697a      	ldr	r2, [r7, #20]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d3d7      	bcc.n	8002eee <ee_read+0x22>
#endif
  }
  return true;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	371c      	adds	r7, #28
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	20001990 	.word	0x20001990

08002f50 <ee_write>:
//##########################################################################################################
bool ee_write(uint32_t startVirtualAddress, uint32_t len, uint8_t *data)
{
 8002f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f54:	b091      	sub	sp, #68	; 0x44
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002f5a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002f5c:	627a      	str	r2, [r7, #36]	; 0x24
  if ((startVirtualAddress + len) > _EE_SIZE)
 8002f5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f62:	4413      	add	r3, r2
 8002f64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f68:	d901      	bls.n	8002f6e <ee_write+0x1e>
    return false;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e0c2      	b.n	80030f4 <ee_write+0x1a4>
  if (data == NULL)
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <ee_write+0x28>
    return false;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e0bd      	b.n	80030f4 <ee_write+0x1a4>
  HAL_FLASH_Unlock();
 8002f78:	f009 fabe 	bl	800c4f8 <HAL_FLASH_Unlock>
      return false;
    }
  }
#endif
#ifdef FLASH_TYPEPROGRAM_DOUBLEWORD
  for (uint32_t i = 0; i < len; i += 8)
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f80:	e0b0      	b.n	80030e4 <ee_write+0x194>
  {
    uint64_t data64 = data[i];
 8002f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 1] * 0x100;
 8002f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9a:	4413      	add	r3, r2
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fa6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002faa:	1814      	adds	r4, r2, r0
 8002fac:	eb43 0501 	adc.w	r5, r3, r1
 8002fb0:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    data64 += data[i + 2] * 0x10000;
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	1c9a      	adds	r2, r3, #2
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	4413      	add	r3, r2
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	041b      	lsls	r3, r3, #16
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fca:	eb12 0800 	adds.w	r8, r2, r0
 8002fce:	eb43 0901 	adc.w	r9, r3, r1
 8002fd2:	e9c7 890c 	strd	r8, r9, [r7, #48]	; 0x30
    data64 += data[i + 3] * 0x1000000;
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fd8:	1cda      	adds	r2, r3, #3
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	4413      	add	r3, r2
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	061b      	lsls	r3, r3, #24
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8002fe8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fec:	eb12 0a00 	adds.w	sl, r2, r0
 8002ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ff4:	e9c7 ab0c 	strd	sl, fp, [r7, #48]	; 0x30
    data64 += data[i + 4] * 0x100000000;
 8002ff8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ffa:	1d1a      	adds	r2, r3, #4
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	4413      	add	r3, r2
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	b2da      	uxtb	r2, r3
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	f04f 0000 	mov.w	r0, #0
 800300c:	f04f 0100 	mov.w	r1, #0
 8003010:	0011      	movs	r1, r2
 8003012:	2000      	movs	r0, #0
 8003014:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003018:	1816      	adds	r6, r2, r0
 800301a:	61be      	str	r6, [r7, #24]
 800301c:	414b      	adcs	r3, r1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003024:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 5] * 0x10000000000;
 8003028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800302a:	1d5a      	adds	r2, r3, #5
 800302c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302e:	4413      	add	r3, r2
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2da      	uxtb	r2, r3
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f04f 0000 	mov.w	r0, #0
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	0211      	lsls	r1, r2, #8
 8003042:	2000      	movs	r0, #0
 8003044:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003048:	1816      	adds	r6, r2, r0
 800304a:	613e      	str	r6, [r7, #16]
 800304c:	414b      	adcs	r3, r1
 800304e:	617b      	str	r3, [r7, #20]
 8003050:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003054:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 6] * 0x1000000000000;
 8003058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800305a:	1d9a      	adds	r2, r3, #6
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	b2da      	uxtb	r2, r3
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	f04f 0000 	mov.w	r0, #0
 800306c:	f04f 0100 	mov.w	r1, #0
 8003070:	0411      	lsls	r1, r2, #16
 8003072:	2000      	movs	r0, #0
 8003074:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003078:	1816      	adds	r6, r2, r0
 800307a:	60be      	str	r6, [r7, #8]
 800307c:	414b      	adcs	r3, r1
 800307e:	60fb      	str	r3, [r7, #12]
 8003080:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003084:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    data64 += data[i + 7] * 0x100000000000000;
 8003088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308a:	1dda      	adds	r2, r3, #7
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	f04f 0000 	mov.w	r0, #0
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	0611      	lsls	r1, r2, #24
 80030a2:	2000      	movs	r0, #0
 80030a4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030a8:	1816      	adds	r6, r2, r0
 80030aa:	603e      	str	r6, [r7, #0]
 80030ac:	414b      	adcs	r3, r1
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, ((i + startVirtualAddress)) + _EE_ADDR_INUSE, data64) != HAL_OK)
 80030b8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	4413      	add	r3, r2
 80030be:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 80030c2:	f501 317e 	add.w	r1, r1, #260096	; 0x3f800
 80030c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80030ca:	2000      	movs	r0, #0
 80030cc:	f009 f9a8 	bl	800c420 <HAL_FLASH_Program>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <ee_write+0x18e>
    {
      HAL_FLASH_Lock();
 80030d6:	f009 fa31 	bl	800c53c <HAL_FLASH_Lock>
      return false;
 80030da:	2300      	movs	r3, #0
 80030dc:	e00a      	b.n	80030f4 <ee_write+0x1a4>
  for (uint32_t i = 0; i < len; i += 8)
 80030de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030e0:	3308      	adds	r3, #8
 80030e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f4ff af4a 	bcc.w	8002f82 <ee_write+0x32>
    }
  }
#endif
  HAL_FLASH_Lock();
 80030ee:	f009 fa25 	bl	800c53c <HAL_FLASH_Lock>
  return true;
 80030f2:	2301      	movs	r3, #1
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3744      	adds	r7, #68	; 0x44
 80030f8:	46bd      	mov	sp, r7
 80030fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003100 <ee_writeToRam>:
//##########################################################################################################
bool ee_writeToRam(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
#if (_EE_USE_RAM_BYTE > 0)
  if ((startVirtualAddress + len) > _EE_USE_RAM_BYTE)
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4413      	add	r3, r2
 8003112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003116:	d901      	bls.n	800311c <ee_writeToRam+0x1c>
    return false;
 8003118:	2300      	movs	r3, #0
 800311a:	e00d      	b.n	8003138 <ee_writeToRam+0x38>
  if (data == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <ee_writeToRam+0x26>
    return false;
 8003122:	2300      	movs	r3, #0
 8003124:	e008      	b.n	8003138 <ee_writeToRam+0x38>
  memcpy(&ee_ram[startVirtualAddress], data, len);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a05      	ldr	r2, [pc, #20]	; (8003140 <ee_writeToRam+0x40>)
 800312a:	4413      	add	r3, r2
 800312c:	68ba      	ldr	r2, [r7, #8]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4618      	mov	r0, r3
 8003132:	f014 ffa3 	bl	801807c <memcpy>
  return true;
 8003136:	2301      	movs	r3, #1
#else
  return false;
#endif
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20001990 	.word	0x20001990

08003144 <ee_commit>:
//##########################################################################################################
bool  ee_commit(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  if (ee_format(true) == false)
 8003148:	2001      	movs	r0, #1
 800314a:	f7ff fe85 	bl	8002e58 <ee_format>
 800314e:	4603      	mov	r3, r0
 8003150:	f083 0301 	eor.w	r3, r3, #1
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <ee_commit+0x1a>
    return false;
 800315a:	2300      	movs	r3, #0
 800315c:	e006      	b.n	800316c <ee_commit+0x28>
  return ee_write(0, _EE_USE_RAM_BYTE, ee_ram);
 800315e:	4a04      	ldr	r2, [pc, #16]	; (8003170 <ee_commit+0x2c>)
 8003160:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003164:	2000      	movs	r0, #0
 8003166:	f7ff fef3 	bl	8002f50 <ee_write>
 800316a:	4603      	mov	r3, r0
#else
  return false;
#endif
}
 800316c:	4618      	mov	r0, r3
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20001990 	.word	0x20001990

08003174 <mean>:
#include "hes_fall.h"



uint16_t mean(uint8_t *t, uint16_t val_initiale) {
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
	uint16_t a;
	a = 0;
 8003180:	2300      	movs	r3, #0
 8003182:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <mean+0x60>)
 8003186:	887b      	ldrh	r3, [r7, #2]
 8003188:	8013      	strh	r3, [r2, #0]
 800318a:	e00f      	b.n	80031ac <mean+0x38>
		a = a + t[i];
 800318c:	4b11      	ldr	r3, [pc, #68]	; (80031d4 <mean+0x60>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	461a      	mov	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	b29a      	uxth	r2, r3
 800319a:	89fb      	ldrh	r3, [r7, #14]
 800319c:	4413      	add	r3, r2
 800319e:	81fb      	strh	r3, [r7, #14]
	for (i = val_initiale; i <= val_initiale + 10; i++) {
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <mean+0x60>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <mean+0x60>)
 80031aa:	801a      	strh	r2, [r3, #0]
 80031ac:	4b09      	ldr	r3, [pc, #36]	; (80031d4 <mean+0x60>)
 80031ae:	881b      	ldrh	r3, [r3, #0]
 80031b0:	461a      	mov	r2, r3
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	330a      	adds	r3, #10
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dde8      	ble.n	800318c <mean+0x18>
	}
	a = a / 11;
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	4a06      	ldr	r2, [pc, #24]	; (80031d8 <mean+0x64>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	08db      	lsrs	r3, r3, #3
 80031c4:	81fb      	strh	r3, [r7, #14]

	return a;
 80031c6:	89fb      	ldrh	r3, [r7, #14]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	20000c1c 	.word	0x20000c1c
 80031d8:	ba2e8ba3 	.word	0xba2e8ba3

080031dc <test_chute>:



uint8_t test_chute(uint16_t *accl, uint8_t *v) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]

	uint32_t millis_begin;

	millis_begin = HAL_GetTick();
 80031e6:	f008 fd63 	bl	800bcb0 <HAL_GetTick>
 80031ea:	60f8      	str	r0, [r7, #12]

	/*double total_time;
	clock_t start, end;
	 start = clock();
	 srand(time(NULL));*/
	uint16_t i = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	82fb      	strh	r3, [r7, #22]

	uint8_t  a = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	757b      	strb	r3, [r7, #21]


	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 80031f4:	e051      	b.n	800329a <test_chute+0xbe>
		//CDC_Transmit_FS("Debut test chute\n",sizeof("Debut test chute\n"));
//    Serial.print("Debut test chute\n");
		if (accl[i] < 153) {                        // on detecte la chute et le nombre 153 ~ 0.80 en d�cimale
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	2b98      	cmp	r3, #152	; 0x98
 8003202:	d847      	bhi.n	8003294 <test_chute+0xb8>
			a = 1;
 8003204:	2301      	movs	r3, #1
 8003206:	757b      	strb	r3, [r7, #21]
			// CDC_Transmit_FS("a <0.8063",sizeof("a <0.8063idr"));
//          Serial.print("1er if");
			for (uint16_t j = i; j <= 2 + i; j++) {
 8003208:	8afb      	ldrh	r3, [r7, #22]
 800320a:	827b      	strh	r3, [r7, #18]
 800320c:	e00c      	b.n	8003228 <test_chute+0x4c>
				if (accl[j] > 153) {               // on test si la chute dure 30ms   le nombre 153 ~ 0.80 en d�cimale
 800320e:	8a7b      	ldrh	r3, [r7, #18]
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	4413      	add	r3, r2
 8003216:	881b      	ldrh	r3, [r3, #0]
 8003218:	2b99      	cmp	r3, #153	; 0x99
 800321a:	d902      	bls.n	8003222 <test_chute+0x46>
					a = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	757b      	strb	r3, [r7, #21]
					break;
 8003220:	e007      	b.n	8003232 <test_chute+0x56>
			for (uint16_t j = i; j <= 2 + i; j++) {
 8003222:	8a7b      	ldrh	r3, [r7, #18]
 8003224:	3301      	adds	r3, #1
 8003226:	827b      	strh	r3, [r7, #18]
 8003228:	8a7a      	ldrh	r2, [r7, #18]
 800322a:	8afb      	ldrh	r3, [r7, #22]
 800322c:	3302      	adds	r3, #2
 800322e:	429a      	cmp	r2, r3
 8003230:	dded      	ble.n	800320e <test_chute+0x32>
				}
			}
//
//         Serial.print("a==true");
			if (a == 1) {
 8003232:	7d7b      	ldrb	r3, [r7, #21]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d116      	bne.n	8003266 <test_chute+0x8a>
				// CDC_Transmit_FS("a==true",sizeof("a==true"));
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	823b      	strh	r3, [r7, #16]
 800323c:	e00e      	b.n	800325c <test_chute+0x80>

					if (accl[j] >= 207 ) { // /*2.5025*/){      207 ~ 2.50 en d�cimal
 800323e:	8a3b      	ldrh	r3, [r7, #16]
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	2bce      	cmp	r3, #206	; 0xce
 800324a:	d902      	bls.n	8003252 <test_chute+0x76>
						a = 1;
 800324c:	2301      	movs	r3, #1
 800324e:	757b      	strb	r3, [r7, #21]
						//		 CDC_Transmit_FS("acc supe � 8",sizeof("acc supe � 8"));
						break;
 8003250:	e009      	b.n	8003266 <test_chute+0x8a>
					}
					else {
						a = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	757b      	strb	r3, [r7, #21]
				for (uint16_t j = i ; j <= i + 2 + 56; j++) { // on cherche � detecter la chute !!!!!
 8003256:	8a3b      	ldrh	r3, [r7, #16]
 8003258:	3301      	adds	r3, #1
 800325a:	823b      	strh	r3, [r7, #16]
 800325c:	8a3a      	ldrh	r2, [r7, #16]
 800325e:	8afb      	ldrh	r3, [r7, #22]
 8003260:	333a      	adds	r3, #58	; 0x3a
 8003262:	429a      	cmp	r2, r3
 8003264:	ddeb      	ble.n	800323e <test_chute+0x62>
					}

				}

			}
			if (a == 1 ) {
 8003266:	7d7b      	ldrb	r3, [r7, #21]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d113      	bne.n	8003294 <test_chute+0xb8>
				uint16_t b;
				//   float angle;
				b = mean(v, i + 3 + 56 + 50);
 800326c:	8afb      	ldrh	r3, [r7, #22]
 800326e:	336d      	adds	r3, #109	; 0x6d
 8003270:	b29b      	uxth	r3, r3
 8003272:	4619      	mov	r1, r3
 8003274:	6838      	ldr	r0, [r7, #0]
 8003276:	f7ff ff7d 	bl	8003174 <mean>
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
//
//
////          angle =acos(b)*180/(3.14);                         // on calcul l'angle que fais le vecteur de la pesenteur avec l'axe y

//             //if (60<=angle){
				if (b <= 140 && b >= 114)
 800327e:	897b      	ldrh	r3, [r7, #10]
 8003280:	2b8c      	cmp	r3, #140	; 0x8c
 8003282:	d805      	bhi.n	8003290 <test_chute+0xb4>
 8003284:	897b      	ldrh	r3, [r7, #10]
 8003286:	2b71      	cmp	r3, #113	; 0x71
 8003288:	d902      	bls.n	8003290 <test_chute+0xb4>
				{ // 140 ~ 0.4   -0.4 ~ 114
					a = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	757b      	strb	r3, [r7, #21]
					break;
 800328e:	e00b      	b.n	80032a8 <test_chute+0xcc>
				}
				else
				{
					a = 0;
 8003290:	2300      	movs	r3, #0
 8003292:	757b      	strb	r3, [r7, #21]

			}

		}

		i = i + 1;
 8003294:	8afb      	ldrh	r3, [r7, #22]
 8003296:	3301      	adds	r3, #1
 8003298:	82fb      	strh	r3, [r7, #22]
	while (i <= 400 - 2 - 56 - 50 - 10 && a == 0 ) {
 800329a:	8afb      	ldrh	r3, [r7, #22]
 800329c:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 80032a0:	d802      	bhi.n	80032a8 <test_chute+0xcc>
 80032a2:	7d7b      	ldrb	r3, [r7, #21]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0a6      	beq.n	80031f6 <test_chute+0x1a>

	//sprintf(lcd_buf1, "%d\n",( (int) millis_tot));
	//CDC_Transmit_FS(lcd_buf1,sizeof(lcd_buf1));


	return a;
 80032a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <LedChargeIndic>:
#include "hes_fct.h"

extern struct config_data c1;

void LedChargeIndic(int TabGen[])
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b086      	sub	sp, #24
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	617b      	str	r3, [r7, #20]
	int bmsCharge = 0;
 80032be:	2300      	movs	r3, #0
 80032c0:	613b      	str	r3, [r7, #16]
	int percent = 1;
 80032c2:	2301      	movs	r3, #1
 80032c4:	60fb      	str	r3, [r7, #12]

	chargerRead(&bmsEOC, &bmsCharge, TabGen);
 80032c6:	f107 0110 	add.w	r1, r7, #16
 80032ca:	f107 0314 	add.w	r3, r7, #20
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fc15 	bl	8002b00 <chargerRead>
	ReadBat(&percent, 1, 1, TabGen);
 80032d6:	f107 000c 	add.w	r0, r7, #12
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2201      	movs	r2, #1
 80032de:	2101      	movs	r1, #1
 80032e0:	f7ff fc4a 	bl	8002b78 <ReadBat>

	if (percent == 0xFF)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2bff      	cmp	r3, #255	; 0xff
 80032e8:	d106      	bne.n	80032f8 <LedChargeIndic+0x46>
	{
		LedOn(0, 0, 100, TabGen);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2264      	movs	r2, #100	; 0x64
 80032ee:	2100      	movs	r1, #0
 80032f0:	2000      	movs	r0, #0
 80032f2:	f001 f9cd 	bl	8004690 <LedOn>
//	while ((bmsCharge == 1) || (bmsEOC == 1)) {chargerRead(&bmsEOC, &bmsCharge); HAL_Delay(3000);};
//	
//	
//	if ((bmsCharge == 0) &&	(bmsEOC == 0)) {		LedOn(0, 0, 0);
//	}
}
 80032f6:	e02c      	b.n	8003352 <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent < 100))
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d002      	beq.n	8003304 <LedChargeIndic+0x52>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d109      	bne.n	8003318 <LedChargeIndic+0x66>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b63      	cmp	r3, #99	; 0x63
 8003308:	dc06      	bgt.n	8003318 <LedChargeIndic+0x66>
			LedOn(50, 0, 0, TabGen);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	2100      	movs	r1, #0
 8003310:	2032      	movs	r0, #50	; 0x32
 8003312:	f001 f9bd 	bl	8004690 <LedOn>
		if (BOX4GAZ == 0)
 8003316:	e01c      	b.n	8003352 <LedChargeIndic+0xa0>
	else if (((bmsCharge == 1) || (bmsEOC == 1)) && (percent == 100))
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d002      	beq.n	8003324 <LedChargeIndic+0x72>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d109      	bne.n	8003338 <LedChargeIndic+0x86>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d106      	bne.n	8003338 <LedChargeIndic+0x86>
			LedOn(0, 0, 0, TabGen);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	2100      	movs	r1, #0
 8003330:	2000      	movs	r0, #0
 8003332:	f001 f9ad 	bl	8004690 <LedOn>
		if (BOX4GAZ == 0)
 8003336:	e00c      	b.n	8003352 <LedChargeIndic+0xa0>
	else if ((bmsCharge == 0) && (bmsEOC == 0))
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <LedChargeIndic+0xa0>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d106      	bne.n	8003352 <LedChargeIndic+0xa0>
		LedOn(0, 0, 0, TabGen);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	2100      	movs	r1, #0
 800334a:	2000      	movs	r0, #0
 800334c:	f001 f9a0 	bl	8004690 <LedOn>
}
 8003350:	e7ff      	b.n	8003352 <LedChargeIndic+0xa0>
 8003352:	bf00      	nop
 8003354:	3718      	adds	r7, #24
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	0000      	movs	r0, r0
 800335c:	0000      	movs	r0, r0
	...

08003360 <TaskAlertAcc>:
//	
//}

void TaskAlertAcc(float angle, float accres2, int TabAlert[], int TabGen[],
		float seuil)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	ed87 0a05 	vstr	s0, [r7, #20]
 800336a:	edc7 0a04 	vstr	s1, [r7, #16]
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	ed87 1a01 	vstr	s2, [r7, #4]
	// malaise

	if (c1.Verti_Actif == 1)
 8003376:	4b5c      	ldr	r3, [pc, #368]	; (80034e8 <TaskAlertAcc+0x188>)
 8003378:	7adb      	ldrb	r3, [r3, #11]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d131      	bne.n	80033e2 <TaskAlertAcc+0x82>
	{
		if ((angle < seuil) && (TabAlert[ALERT_MALAISE] == 0)
 800337e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003382:	edd7 7a01 	vldr	s15, [r7, #4]
 8003386:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800338a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338e:	d524      	bpl.n	80033da <TaskAlertAcc+0x7a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	3308      	adds	r3, #8
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d11f      	bne.n	80033da <TaskAlertAcc+0x7a>
				&& (TabGen[FALL_UP_DELAY] == 0) && (TabAlert[ALERT_FALL] == 0))
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	332c      	adds	r3, #44	; 0x2c
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d11a      	bne.n	80033da <TaskAlertAcc+0x7a>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	3334      	adds	r3, #52	; 0x34
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <TaskAlertAcc+0x7a>
		{
			TabGen[NS_MALAISE]++;
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	333c      	adds	r3, #60	; 0x3c
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	3201      	adds	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_MALAISE] >= TabGen[NMAXS_MALAISE])
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	333c      	adds	r3, #60	; 0x3c
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3330      	adds	r3, #48	; 0x30
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	db0c      	blt.n	80033e2 <TaskAlertAcc+0x82>
			{
				TabAlert[ALERT_MALAISE] = 1;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3308      	adds	r3, #8
 80033cc:	2201      	movs	r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	333c      	adds	r3, #60	; 0x3c
 80033d4:	2200      	movs	r2, #0
 80033d6:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_MALAISE] >= TabGen[NMAXS_MALAISE])
 80033d8:	e003      	b.n	80033e2 <TaskAlertAcc+0x82>
			}
		}
		else
		{
			TabGen[NS_MALAISE] = 0;
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	333c      	adds	r3, #60	; 0x3c
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]
		}
	}

	// immo

	if (c1.Immo_Actif == 1)
 80033e2:	4b41      	ldr	r3, [pc, #260]	; (80034e8 <TaskAlertAcc+0x188>)
 80033e4:	7a9b      	ldrb	r3, [r3, #10]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d13e      	bne.n	8003468 <TaskAlertAcc+0x108>
	{
		if (((accres2 < 1.2) && (accres2 > 0.8)) && (TabAlert[ALERT_MALAISE] == 0)
 80033ea:	6938      	ldr	r0, [r7, #16]
 80033ec:	f7fd f8ac 	bl	8000548 <__aeabi_f2d>
 80033f0:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80033f4:	4b3d      	ldr	r3, [pc, #244]	; (80034ec <TaskAlertAcc+0x18c>)
 80033f6:	f7fd fb71 	bl	8000adc <__aeabi_dcmplt>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02f      	beq.n	8003460 <TaskAlertAcc+0x100>
 8003400:	6938      	ldr	r0, [r7, #16]
 8003402:	f7fd f8a1 	bl	8000548 <__aeabi_f2d>
 8003406:	a336      	add	r3, pc, #216	; (adr r3, 80034e0 <TaskAlertAcc+0x180>)
 8003408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800340c:	f7fd fb84 	bl	8000b18 <__aeabi_dcmpgt>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d024      	beq.n	8003460 <TaskAlertAcc+0x100>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3308      	adds	r3, #8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11f      	bne.n	8003460 <TaskAlertAcc+0x100>
				&& (TabGen[FALL_UP_DELAY] == 0) && (TabAlert[ALERT_FALL] == 0))
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	332c      	adds	r3, #44	; 0x2c
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d11a      	bne.n	8003460 <TaskAlertAcc+0x100>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3334      	adds	r3, #52	; 0x34
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d115      	bne.n	8003460 <TaskAlertAcc+0x100>
		{
			TabGen[NS_IMMO]++;
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	3340      	adds	r3, #64	; 0x40
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	3201      	adds	r2, #1
 800343c:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_IMMO] >= TabGen[NMAXS_IMMO])
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3340      	adds	r3, #64	; 0x40
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	3334      	adds	r3, #52	; 0x34
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	db0c      	blt.n	8003468 <TaskAlertAcc+0x108>
			{
				TabAlert[ALERT_MALAISE] = 1;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3308      	adds	r3, #8
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
				TabGen[NS_IMMO] = 0;
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	3340      	adds	r3, #64	; 0x40
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_IMMO] >= TabGen[NMAXS_IMMO])
 800345e:	e003      	b.n	8003468 <TaskAlertAcc+0x108>
			}
		}
		else
		{
			TabGen[NS_IMMO] = 0;
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	3340      	adds	r3, #64	; 0x40
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
		}
	}

	//fall

	if (c1.chute_Actif == 1)
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <TaskAlertAcc+0x188>)
 800346a:	795b      	ldrb	r3, [r3, #5]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d132      	bne.n	80034d6 <TaskAlertAcc+0x176>
	{
		if ((angle < seuil) && (TabGen[FALL_DELAY] == 1)
 8003470:	ed97 7a05 	vldr	s14, [r7, #20]
 8003474:	edd7 7a01 	vldr	s15, [r7, #4]
 8003478:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800347c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003480:	d520      	bpl.n	80034c4 <TaskAlertAcc+0x164>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	3328      	adds	r3, #40	; 0x28
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d11b      	bne.n	80034c4 <TaskAlertAcc+0x164>
				&& (TabAlert[ALERT_MALAISE] == 0)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3308      	adds	r3, #8
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d116      	bne.n	80034c4 <TaskAlertAcc+0x164>
				&& (TabAlert[ALERT_FALL] == 0))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	3334      	adds	r3, #52	; 0x34
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d111      	bne.n	80034c4 <TaskAlertAcc+0x164>
		{
			TabGen[NS_FALL]++;
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3344      	adds	r3, #68	; 0x44
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	3201      	adds	r2, #1
 80034a8:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	3344      	adds	r3, #68	; 0x44
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	3338      	adds	r3, #56	; 0x38
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	db0d      	blt.n	80034d6 <TaskAlertAcc+0x176>
			{
				TabGen[FALL_UP_DELAY] = 1;
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	332c      	adds	r3, #44	; 0x2c
 80034be:	2201      	movs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]
			if (TabGen[NS_FALL] >= TabGen[NMAXS_FALL])
 80034c2:	e008      	b.n	80034d6 <TaskAlertAcc+0x176>
			}

		}
		else
		{
			TabGen[FALL_UP_DELAY] = 0;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	332c      	adds	r3, #44	; 0x2c
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
			TabGen[NS_FALL] = 0;
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3344      	adds	r3, #68	; 0x44
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80034d4:	e7ff      	b.n	80034d6 <TaskAlertAcc+0x176>
 80034d6:	bf00      	nop
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	9999999a 	.word	0x9999999a
 80034e4:	3fe99999 	.word	0x3fe99999
 80034e8:	20001158 	.word	0x20001158
 80034ec:	3ff33333 	.word	0x3ff33333

080034f0 <bootloader>:

unsigned char bootloader(unsigned char tps_appui)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	71fb      	strb	r3, [r7, #7]
	while (tps_appui > 0)
 80034fa:	e010      	b.n	800351e <bootloader+0x2e>
	{
		if (InSOS() == 1)
 80034fc:	f000 fb88 	bl	8003c10 <InSOS>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d109      	bne.n	800351a <bootloader+0x2a>
		{
			vibration_LBL(1, 250, 1000);
 8003506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800350a:	21fa      	movs	r1, #250	; 0xfa
 800350c:	2001      	movs	r0, #1
 800350e:	f007 fe25 	bl	800b15c <vibration_LBL>
			tps_appui--;
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	3b01      	subs	r3, #1
 8003516:	71fb      	strb	r3, [r7, #7]
 8003518:	e001      	b.n	800351e <bootloader+0x2e>
		}
		else
		{
			return 0;
 800351a:	2300      	movs	r3, #0
 800351c:	e003      	b.n	8003526 <bootloader+0x36>
	while (tps_appui > 0)
 800351e:	79fb      	ldrb	r3, [r7, #7]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1eb      	bne.n	80034fc <bootloader+0xc>
		}
	}
	return 1;
 8003524:	2301      	movs	r3, #1
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
	...

08003530 <default_value>:

extern uint8_t nb_parametre;
extern struct config_data c_default;
void default_value(void)
{
 8003530:	b5b0      	push	{r4, r5, r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	466b      	mov	r3, sp
 8003538:	461d      	mov	r5, r3
	uint8_t curent_conf[nb_parametre];
 800353a:	4b60      	ldr	r3, [pc, #384]	; (80036bc <default_value+0x18c>)
 800353c:	781c      	ldrb	r4, [r3, #0]
 800353e:	4623      	mov	r3, r4
 8003540:	3b01      	subs	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	b2e0      	uxtb	r0, r4
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	00cb      	lsls	r3, r1, #3
 8003554:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003558:	00c2      	lsls	r2, r0, #3
 800355a:	b2e0      	uxtb	r0, r4
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	00cb      	lsls	r3, r1, #3
 800356a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800356e:	00c2      	lsls	r2, r0, #3
 8003570:	4623      	mov	r3, r4
 8003572:	3307      	adds	r3, #7
 8003574:	08db      	lsrs	r3, r3, #3
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	ebad 0d03 	sub.w	sp, sp, r3
 800357c:	466b      	mov	r3, sp
 800357e:	3300      	adds	r3, #0
 8003580:	61bb      	str	r3, [r7, #24]
	uint8_t count2 = 0;
 8003582:	2300      	movs	r3, #0
 8003584:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	ee_init();
 8003588:	f7ff fc5a 	bl	8002e40 <ee_init>
	ee_read(0, sizeof(curent_conf), curent_conf);
 800358c:	4621      	mov	r1, r4
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	461a      	mov	r2, r3
 8003592:	2000      	movs	r0, #0
 8003594:	f7ff fc9a 	bl	8002ecc <ee_read>
	for (int i = 0; i <= sizeof(curent_conf); i++)
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e00d      	b.n	80035ba <default_value+0x8a>
	{
		if (curent_conf[i] == 255)
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2bff      	cmp	r3, #255	; 0xff
 80035a8:	d104      	bne.n	80035b4 <default_value+0x84>
		{
			count2++;
 80035aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ae:	3301      	adds	r3, #1
 80035b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	for (int i = 0; i <= sizeof(curent_conf); i++)
 80035b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b6:	3301      	adds	r3, #1
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
 80035ba:	4622      	mov	r2, r4
 80035bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035be:	429a      	cmp	r2, r3
 80035c0:	d2ed      	bcs.n	800359e <default_value+0x6e>
		}
	}
	if (count2 > 0)
 80035c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d073      	beq.n	80036b2 <default_value+0x182>
	{
		c_default.tps_immo = 15;	//default value OK
 80035ca:	4b3d      	ldr	r3, [pc, #244]	; (80036c0 <default_value+0x190>)
 80035cc:	220f      	movs	r2, #15
 80035ce:	701a      	strb	r2, [r3, #0]
		c_default.tps_PerteDeVerticalite = 10;	//default value OK
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <default_value+0x190>)
 80035d2:	220a      	movs	r2, #10
 80035d4:	705a      	strb	r2, [r3, #1]
		c_default.tps_GPS_ON = 1;	//default value OK
 80035d6:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <default_value+0x190>)
 80035d8:	2201      	movs	r2, #1
 80035da:	709a      	strb	r2, [r3, #2]
		c_default.tps_GPS_OFF = 1;	//default value OK
 80035dc:	4b38      	ldr	r3, [pc, #224]	; (80036c0 <default_value+0x190>)
 80035de:	2201      	movs	r2, #1
 80035e0:	70da      	strb	r2, [r3, #3]
		c_default.tps_Alarme = 30;	//default value OK
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <default_value+0x190>)
 80035e4:	221e      	movs	r2, #30
 80035e6:	711a      	strb	r2, [r3, #4]
		c_default.chute_Actif = 1;	//default value OK
 80035e8:	4b35      	ldr	r3, [pc, #212]	; (80036c0 <default_value+0x190>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	715a      	strb	r2, [r3, #5]
		c_default.loraP2P = 0;		//default value OK
 80035ee:	4b34      	ldr	r3, [pc, #208]	; (80036c0 <default_value+0x190>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	719a      	strb	r2, [r3, #6]
		c_default.com_sigfox = 1;	//default value OK
 80035f4:	4b32      	ldr	r3, [pc, #200]	; (80036c0 <default_value+0x190>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	71da      	strb	r2, [r3, #7]
		c_default.com_LoRa = 0; 	//default value OK
 80035fa:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <default_value+0x190>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	721a      	strb	r2, [r3, #8]
		c_default.GPS_Actif = 1;	//default value OK
 8003600:	4b2f      	ldr	r3, [pc, #188]	; (80036c0 <default_value+0x190>)
 8003602:	2201      	movs	r2, #1
 8003604:	725a      	strb	r2, [r3, #9]
		c_default.Immo_Actif = 1;	//default value OK
 8003606:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <default_value+0x190>)
 8003608:	2201      	movs	r2, #1
 800360a:	729a      	strb	r2, [r3, #10]
		c_default.Verti_Actif = 1;	//default value OK
 800360c:	4b2c      	ldr	r3, [pc, #176]	; (80036c0 <default_value+0x190>)
 800360e:	2201      	movs	r2, #1
 8003610:	72da      	strb	r2, [r3, #11]
		c_default.Sensibilite_chute = 0;
 8003612:	4b2b      	ldr	r3, [pc, #172]	; (80036c0 <default_value+0x190>)
 8003614:	2200      	movs	r2, #0
 8003616:	731a      	strb	r2, [r3, #12]
		c_default.tps_chute = 20;	//default value OK
 8003618:	4b29      	ldr	r3, [pc, #164]	; (80036c0 <default_value+0x190>)
 800361a:	2214      	movs	r2, #20
 800361c:	735a      	strb	r2, [r3, #13]
		c_default.Angle = 15;
 800361e:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <default_value+0x190>)
 8003620:	220f      	movs	r2, #15
 8003622:	739a      	strb	r2, [r3, #14]
		c_default.colision_Actif = 0;
 8003624:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <default_value+0x190>)
 8003626:	2200      	movs	r2, #0
 8003628:	73da      	strb	r2, [r3, #15]
		c_default.biGaz = 0;
 800362a:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <default_value+0x190>)
 800362c:	2200      	movs	r2, #0
 800362e:	741a      	strb	r2, [r3, #16]
		uint8_t data2[] =
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 8003630:	4b23      	ldr	r3, [pc, #140]	; (80036c0 <default_value+0x190>)
 8003632:	781b      	ldrb	r3, [r3, #0]
		uint8_t data2[] =
 8003634:	713b      	strb	r3, [r7, #4]
		{ c_default.tps_immo, c_default.tps_PerteDeVerticalite,
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <default_value+0x190>)
 8003638:	785b      	ldrb	r3, [r3, #1]
		uint8_t data2[] =
 800363a:	717b      	strb	r3, [r7, #5]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <default_value+0x190>)
 800363e:	789b      	ldrb	r3, [r3, #2]
		uint8_t data2[] =
 8003640:	71bb      	strb	r3, [r7, #6]
				c_default.tps_GPS_ON, c_default.tps_GPS_OFF,
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <default_value+0x190>)
 8003644:	78db      	ldrb	r3, [r3, #3]
		uint8_t data2[] =
 8003646:	71fb      	strb	r3, [r7, #7]
				c_default.tps_Alarme, c_default.chute_Actif, c_default.loraP2P,
 8003648:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <default_value+0x190>)
 800364a:	791b      	ldrb	r3, [r3, #4]
		uint8_t data2[] =
 800364c:	723b      	strb	r3, [r7, #8]
				c_default.tps_Alarme, c_default.chute_Actif, c_default.loraP2P,
 800364e:	4b1c      	ldr	r3, [pc, #112]	; (80036c0 <default_value+0x190>)
 8003650:	795b      	ldrb	r3, [r3, #5]
		uint8_t data2[] =
 8003652:	727b      	strb	r3, [r7, #9]
				c_default.tps_Alarme, c_default.chute_Actif, c_default.loraP2P,
 8003654:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <default_value+0x190>)
 8003656:	799b      	ldrb	r3, [r3, #6]
		uint8_t data2[] =
 8003658:	72bb      	strb	r3, [r7, #10]
				c_default.com_sigfox, c_default.com_LoRa, c_default.GPS_Actif,
 800365a:	4b19      	ldr	r3, [pc, #100]	; (80036c0 <default_value+0x190>)
 800365c:	79db      	ldrb	r3, [r3, #7]
		uint8_t data2[] =
 800365e:	72fb      	strb	r3, [r7, #11]
				c_default.com_sigfox, c_default.com_LoRa, c_default.GPS_Actif,
 8003660:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <default_value+0x190>)
 8003662:	7a1b      	ldrb	r3, [r3, #8]
		uint8_t data2[] =
 8003664:	733b      	strb	r3, [r7, #12]
				c_default.com_sigfox, c_default.com_LoRa, c_default.GPS_Actif,
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <default_value+0x190>)
 8003668:	7a5b      	ldrb	r3, [r3, #9]
		uint8_t data2[] =
 800366a:	737b      	strb	r3, [r7, #13]
				c_default.Immo_Actif, c_default.Verti_Actif,
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <default_value+0x190>)
 800366e:	7a9b      	ldrb	r3, [r3, #10]
		uint8_t data2[] =
 8003670:	73bb      	strb	r3, [r7, #14]
				c_default.Immo_Actif, c_default.Verti_Actif,
 8003672:	4b13      	ldr	r3, [pc, #76]	; (80036c0 <default_value+0x190>)
 8003674:	7adb      	ldrb	r3, [r3, #11]
		uint8_t data2[] =
 8003676:	73fb      	strb	r3, [r7, #15]
				c_default.Sensibilite_chute, c_default.tps_chute,
 8003678:	4b11      	ldr	r3, [pc, #68]	; (80036c0 <default_value+0x190>)
 800367a:	7b1b      	ldrb	r3, [r3, #12]
		uint8_t data2[] =
 800367c:	743b      	strb	r3, [r7, #16]
				c_default.Sensibilite_chute, c_default.tps_chute,
 800367e:	4b10      	ldr	r3, [pc, #64]	; (80036c0 <default_value+0x190>)
 8003680:	7b5b      	ldrb	r3, [r3, #13]
		uint8_t data2[] =
 8003682:	747b      	strb	r3, [r7, #17]
				c_default.Angle, c_default.colision_Actif, c_default.biGaz };
 8003684:	4b0e      	ldr	r3, [pc, #56]	; (80036c0 <default_value+0x190>)
 8003686:	7b9b      	ldrb	r3, [r3, #14]
		uint8_t data2[] =
 8003688:	74bb      	strb	r3, [r7, #18]
				c_default.Angle, c_default.colision_Actif, c_default.biGaz };
 800368a:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <default_value+0x190>)
 800368c:	7bdb      	ldrb	r3, [r3, #15]
		uint8_t data2[] =
 800368e:	74fb      	strb	r3, [r7, #19]
				c_default.Angle, c_default.colision_Actif, c_default.biGaz };
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <default_value+0x190>)
 8003692:	7c1b      	ldrb	r3, [r3, #16]
		uint8_t data2[] =
 8003694:	753b      	strb	r3, [r7, #20]
		ee_writeToRam(0, sizeof(data2), data2);
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	461a      	mov	r2, r3
 800369a:	2111      	movs	r1, #17
 800369c:	2000      	movs	r0, #0
 800369e:	f7ff fd2f 	bl	8003100 <ee_writeToRam>
		ee_commit();
 80036a2:	f7ff fd4f 	bl	8003144 <ee_commit>
		vibration_LBL(2, 200, 400);
 80036a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80036aa:	21c8      	movs	r1, #200	; 0xc8
 80036ac:	2002      	movs	r0, #2
 80036ae:	f007 fd55 	bl	800b15c <vibration_LBL>
 80036b2:	46ad      	mov	sp, r5
	}
}
 80036b4:	bf00      	nop
 80036b6:	3728      	adds	r7, #40	; 0x28
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bdb0      	pop	{r4, r5, r7, pc}
 80036bc:	200007f0 	.word	0x200007f0
 80036c0:	2000116c 	.word	0x2000116c

080036c4 <Load_configuration_value>:

extern uint8_t nb_flash[3];
void Load_configuration_value(void)
{
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	466b      	mov	r3, sp
 80036cc:	461d      	mov	r5, r3
	uint8_t curent_conf2[nb_parametre];
 80036ce:	4b39      	ldr	r3, [pc, #228]	; (80037b4 <Load_configuration_value+0xf0>)
 80036d0:	781c      	ldrb	r4, [r3, #0]
 80036d2:	4623      	mov	r3, r4
 80036d4:	3b01      	subs	r3, #1
 80036d6:	607b      	str	r3, [r7, #4]
 80036d8:	b2e0      	uxtb	r0, r4
 80036da:	f04f 0100 	mov.w	r1, #0
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	00cb      	lsls	r3, r1, #3
 80036e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80036ec:	00c2      	lsls	r2, r0, #3
 80036ee:	b2e0      	uxtb	r0, r4
 80036f0:	f04f 0100 	mov.w	r1, #0
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	00cb      	lsls	r3, r1, #3
 80036fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003702:	00c2      	lsls	r2, r0, #3
 8003704:	4623      	mov	r3, r4
 8003706:	3307      	adds	r3, #7
 8003708:	08db      	lsrs	r3, r3, #3
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	ebad 0d03 	sub.w	sp, sp, r3
 8003710:	466b      	mov	r3, sp
 8003712:	3300      	adds	r3, #0
 8003714:	603b      	str	r3, [r7, #0]
	ee_read(0, sizeof(curent_conf2), curent_conf2);
 8003716:	4621      	mov	r1, r4
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	2000      	movs	r0, #0
 800371e:	f7ff fbd5 	bl	8002ecc <ee_read>
	c1.tps_immo = curent_conf2[0];
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	781a      	ldrb	r2, [r3, #0]
 8003726:	4b24      	ldr	r3, [pc, #144]	; (80037b8 <Load_configuration_value+0xf4>)
 8003728:	701a      	strb	r2, [r3, #0]
	c1.tps_PerteDeVerticalite = curent_conf2[1];
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	785a      	ldrb	r2, [r3, #1]
 800372e:	4b22      	ldr	r3, [pc, #136]	; (80037b8 <Load_configuration_value+0xf4>)
 8003730:	705a      	strb	r2, [r3, #1]
	c1.tps_GPS_ON = curent_conf2[2];
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	789a      	ldrb	r2, [r3, #2]
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <Load_configuration_value+0xf4>)
 8003738:	709a      	strb	r2, [r3, #2]
	c1.tps_GPS_OFF = curent_conf2[3];
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	78da      	ldrb	r2, [r3, #3]
 800373e:	4b1e      	ldr	r3, [pc, #120]	; (80037b8 <Load_configuration_value+0xf4>)
 8003740:	70da      	strb	r2, [r3, #3]
	c1.tps_Alarme = curent_conf2[4];
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	791a      	ldrb	r2, [r3, #4]
 8003746:	4b1c      	ldr	r3, [pc, #112]	; (80037b8 <Load_configuration_value+0xf4>)
 8003748:	711a      	strb	r2, [r3, #4]
	c1.chute_Actif = curent_conf2[5];
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	795a      	ldrb	r2, [r3, #5]
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <Load_configuration_value+0xf4>)
 8003750:	715a      	strb	r2, [r3, #5]
	c1.loraP2P = curent_conf2[6];
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	799a      	ldrb	r2, [r3, #6]
 8003756:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <Load_configuration_value+0xf4>)
 8003758:	719a      	strb	r2, [r3, #6]
	c1.com_sigfox = curent_conf2[7];
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	79da      	ldrb	r2, [r3, #7]
 800375e:	4b16      	ldr	r3, [pc, #88]	; (80037b8 <Load_configuration_value+0xf4>)
 8003760:	71da      	strb	r2, [r3, #7]
	c1.com_LoRa = curent_conf2[8];
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	7a1a      	ldrb	r2, [r3, #8]
 8003766:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <Load_configuration_value+0xf4>)
 8003768:	721a      	strb	r2, [r3, #8]
	c1.GPS_Actif = curent_conf2[9];
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	7a5a      	ldrb	r2, [r3, #9]
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <Load_configuration_value+0xf4>)
 8003770:	725a      	strb	r2, [r3, #9]
	c1.Immo_Actif = curent_conf2[10];
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	7a9a      	ldrb	r2, [r3, #10]
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <Load_configuration_value+0xf4>)
 8003778:	729a      	strb	r2, [r3, #10]
	c1.Verti_Actif = curent_conf2[11];
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	7ada      	ldrb	r2, [r3, #11]
 800377e:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <Load_configuration_value+0xf4>)
 8003780:	72da      	strb	r2, [r3, #11]
	c1.Sensibilite_chute = curent_conf2[12];
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	7b1a      	ldrb	r2, [r3, #12]
 8003786:	4b0c      	ldr	r3, [pc, #48]	; (80037b8 <Load_configuration_value+0xf4>)
 8003788:	731a      	strb	r2, [r3, #12]
	c1.tps_chute = curent_conf2[13];
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	7b5a      	ldrb	r2, [r3, #13]
 800378e:	4b0a      	ldr	r3, [pc, #40]	; (80037b8 <Load_configuration_value+0xf4>)
 8003790:	735a      	strb	r2, [r3, #13]
	c1.Angle = curent_conf2[14];
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	7b9a      	ldrb	r2, [r3, #14]
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <Load_configuration_value+0xf4>)
 8003798:	739a      	strb	r2, [r3, #14]
	c1.colision_Actif = curent_conf2[15];
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	7bda      	ldrb	r2, [r3, #15]
 800379e:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <Load_configuration_value+0xf4>)
 80037a0:	73da      	strb	r2, [r3, #15]
	c1.biGaz = curent_conf2[16];
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	7c1a      	ldrb	r2, [r3, #16]
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <Load_configuration_value+0xf4>)
 80037a8:	741a      	strb	r2, [r3, #16]
 80037aa:	46ad      	mov	sp, r5
}
 80037ac:	bf00      	nop
 80037ae:	3708      	adds	r7, #8
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bdb0      	pop	{r4, r5, r7, pc}
 80037b4:	200007f0 	.word	0x200007f0
 80037b8:	20001158 	.word	0x20001158

080037bc <Load_ID_Sigfox>:

extern unsigned char ID_Sigfox[8];
extern uint8_t Rx_Nemeus[200];
void Load_ID_Sigfox(unsigned char Ask_ID_Sigfox)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
	if (Ask_ID_Sigfox == 1)
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d16c      	bne.n	80038a6 <Load_ID_Sigfox+0xea>
	{
		unsigned char i = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	77fb      	strb	r3, [r7, #31]
		unsigned char count_virgule = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	77bb      	strb	r3, [r7, #30]
		unsigned char len = sizeof(Rx_Nemeus);
 80037d4:	23c8      	movs	r3, #200	; 0xc8
 80037d6:	75fb      	strb	r3, [r7, #23]
		while (i < len)
 80037d8:	e04c      	b.n	8003874 <Load_ID_Sigfox+0xb8>
		{
			if ((Rx_Nemeus[i] == 'N') && (Rx_Nemeus[i + 4] == 'S')
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 80037de:	5cd3      	ldrb	r3, [r2, r3]
 80037e0:	2b4e      	cmp	r3, #78	; 0x4e
 80037e2:	d144      	bne.n	800386e <Load_ID_Sigfox+0xb2>
 80037e4:	7ffb      	ldrb	r3, [r7, #31]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4a33      	ldr	r2, [pc, #204]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 80037ea:	5cd3      	ldrb	r3, [r2, r3]
 80037ec:	2b53      	cmp	r3, #83	; 0x53
 80037ee:	d13e      	bne.n	800386e <Load_ID_Sigfox+0xb2>
					&& (Rx_Nemeus[i + 8] == 'L'))
 80037f0:	7ffb      	ldrb	r3, [r7, #31]
 80037f2:	3308      	adds	r3, #8
 80037f4:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 80037f6:	5cd3      	ldrb	r3, [r2, r3]
 80037f8:	2b4c      	cmp	r3, #76	; 0x4c
 80037fa:	d138      	bne.n	800386e <Load_ID_Sigfox+0xb2>
			{
				i = 0;
 80037fc:	2300      	movs	r3, #0
 80037fe:	77fb      	strb	r3, [r7, #31]
				while (i < len)
 8003800:	e030      	b.n	8003864 <Load_ID_Sigfox+0xa8>
				{
					if ((Rx_Nemeus[i] == ',') && (count_virgule == 2))
 8003802:	7ffb      	ldrb	r3, [r7, #31]
 8003804:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 8003806:	5cd3      	ldrb	r3, [r2, r3]
 8003808:	2b2c      	cmp	r3, #44	; 0x2c
 800380a:	d119      	bne.n	8003840 <Load_ID_Sigfox+0x84>
 800380c:	7fbb      	ldrb	r3, [r7, #30]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d116      	bne.n	8003840 <Load_ID_Sigfox+0x84>
					{
						for (int j = 0; j < 9; j++)
 8003812:	2300      	movs	r3, #0
 8003814:	61bb      	str	r3, [r7, #24]
 8003816:	e00d      	b.n	8003834 <Load_ID_Sigfox+0x78>
						{
							ID_Sigfox[j] = Rx_Nemeus[i + j + 1];
 8003818:	7ffa      	ldrb	r2, [r7, #31]
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	4413      	add	r3, r2
 800381e:	3301      	adds	r3, #1
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 8003822:	5cd1      	ldrb	r1, [r2, r3]
 8003824:	4a25      	ldr	r2, [pc, #148]	; (80038bc <Load_ID_Sigfox+0x100>)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	4413      	add	r3, r2
 800382a:	460a      	mov	r2, r1
 800382c:	701a      	strb	r2, [r3, #0]
						for (int j = 0; j < 9; j++)
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	3301      	adds	r3, #1
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	2b08      	cmp	r3, #8
 8003838:	ddee      	ble.n	8003818 <Load_ID_Sigfox+0x5c>
						}
						i = 210;
 800383a:	23d2      	movs	r3, #210	; 0xd2
 800383c:	77fb      	strb	r3, [r7, #31]
 800383e:	e011      	b.n	8003864 <Load_ID_Sigfox+0xa8>
					}
					else if ((Rx_Nemeus[i] == ',') && (count_virgule != 2))
 8003840:	7ffb      	ldrb	r3, [r7, #31]
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <Load_ID_Sigfox+0xfc>)
 8003844:	5cd3      	ldrb	r3, [r2, r3]
 8003846:	2b2c      	cmp	r3, #44	; 0x2c
 8003848:	d109      	bne.n	800385e <Load_ID_Sigfox+0xa2>
 800384a:	7fbb      	ldrb	r3, [r7, #30]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d006      	beq.n	800385e <Load_ID_Sigfox+0xa2>
					{
						count_virgule++;
 8003850:	7fbb      	ldrb	r3, [r7, #30]
 8003852:	3301      	adds	r3, #1
 8003854:	77bb      	strb	r3, [r7, #30]
						i++;
 8003856:	7ffb      	ldrb	r3, [r7, #31]
 8003858:	3301      	adds	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e002      	b.n	8003864 <Load_ID_Sigfox+0xa8>
					}
					else
						i++;
 800385e:	7ffb      	ldrb	r3, [r7, #31]
 8003860:	3301      	adds	r3, #1
 8003862:	77fb      	strb	r3, [r7, #31]
				while (i < len)
 8003864:	7ffa      	ldrb	r2, [r7, #31]
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	429a      	cmp	r2, r3
 800386a:	d3ca      	bcc.n	8003802 <Load_ID_Sigfox+0x46>
			if ((Rx_Nemeus[i] == 'N') && (Rx_Nemeus[i + 4] == 'S')
 800386c:	e002      	b.n	8003874 <Load_ID_Sigfox+0xb8>
				}
			}
			else
				i++;
 800386e:	7ffb      	ldrb	r3, [r7, #31]
 8003870:	3301      	adds	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
		while (i < len)
 8003874:	7ffa      	ldrb	r2, [r7, #31]
 8003876:	7dfb      	ldrb	r3, [r7, #23]
 8003878:	429a      	cmp	r2, r3
 800387a:	d3ae      	bcc.n	80037da <Load_ID_Sigfox+0x1e>
		}
		int value;
		char *endPtr;
		value = strtol(ID_Sigfox, &endPtr, 16);
 800387c:	f107 030c 	add.w	r3, r7, #12
 8003880:	2210      	movs	r2, #16
 8003882:	4619      	mov	r1, r3
 8003884:	480d      	ldr	r0, [pc, #52]	; (80038bc <Load_ID_Sigfox+0x100>)
 8003886:	f015 f9f7 	bl	8018c78 <strtol>
 800388a:	6138      	str	r0, [r7, #16]
		sprintf(ID_Sigfox, "%08X", value);
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	490c      	ldr	r1, [pc, #48]	; (80038c0 <Load_ID_Sigfox+0x104>)
 8003890:	480a      	ldr	r0, [pc, #40]	; (80038bc <Load_ID_Sigfox+0x100>)
 8003892:	f015 f8e1 	bl	8018a58 <siprintf>
		ee_writeToRam(96, sizeof(ID_Sigfox), ID_Sigfox);
 8003896:	4a09      	ldr	r2, [pc, #36]	; (80038bc <Load_ID_Sigfox+0x100>)
 8003898:	2108      	movs	r1, #8
 800389a:	2060      	movs	r0, #96	; 0x60
 800389c:	f7ff fc30 	bl	8003100 <ee_writeToRam>
		ee_commit();
 80038a0:	f7ff fc50 	bl	8003144 <ee_commit>
	}
	else
	{
		ee_read(96, sizeof(ID_Sigfox), ID_Sigfox);
	}
}
 80038a4:	e004      	b.n	80038b0 <Load_ID_Sigfox+0xf4>
		ee_read(96, sizeof(ID_Sigfox), ID_Sigfox);
 80038a6:	4a05      	ldr	r2, [pc, #20]	; (80038bc <Load_ID_Sigfox+0x100>)
 80038a8:	2108      	movs	r1, #8
 80038aa:	2060      	movs	r0, #96	; 0x60
 80038ac:	f7ff fb0e 	bl	8002ecc <ee_read>
}
 80038b0:	bf00      	nop
 80038b2:	3720      	adds	r7, #32
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20001e44 	.word	0x20001e44
 80038bc:	200007f4 	.word	0x200007f4
 80038c0:	0801b8ac 	.word	0x0801b8ac

080038c4 <AskSigFox_ID>:

extern int TabGen[NB_GEN];
extern uint8_t DMA_Done;
unsigned char AskSigFox_ID(void)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
	uint8_t curent_ID[sizeof(ID_Sigfox)];
	uint8_t count3 = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	73fb      	strb	r3, [r7, #15]
	ee_read(96, sizeof(curent_ID), curent_ID);
 80038ce:	463b      	mov	r3, r7
 80038d0:	461a      	mov	r2, r3
 80038d2:	2108      	movs	r1, #8
 80038d4:	2060      	movs	r0, #96	; 0x60
 80038d6:	f7ff faf9 	bl	8002ecc <ee_read>
	for (int i = 0; i <= sizeof(curent_ID); i++)
 80038da:	2300      	movs	r3, #0
 80038dc:	60bb      	str	r3, [r7, #8]
 80038de:	e02c      	b.n	800393a <AskSigFox_ID+0x76>
	{
		if ((curent_ID[i] == 255)
 80038e0:	463a      	mov	r2, r7
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4413      	add	r3, r2
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2bff      	cmp	r3, #255	; 0xff
 80038ea:	d020      	beq.n	800392e <AskSigFox_ID+0x6a>
				|| ((curent_ID[i] == '0') && (curent_ID[i + 1] == '0')
 80038ec:	463a      	mov	r2, r7
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4413      	add	r3, r2
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	2b30      	cmp	r3, #48	; 0x30
 80038f6:	d11d      	bne.n	8003934 <AskSigFox_ID+0x70>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	3301      	adds	r3, #1
 80038fc:	f107 0210 	add.w	r2, r7, #16
 8003900:	4413      	add	r3, r2
 8003902:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003906:	2b30      	cmp	r3, #48	; 0x30
 8003908:	d114      	bne.n	8003934 <AskSigFox_ID+0x70>
						&& (curent_ID[i + 2] == '0')
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3302      	adds	r3, #2
 800390e:	f107 0210 	add.w	r2, r7, #16
 8003912:	4413      	add	r3, r2
 8003914:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8003918:	2b30      	cmp	r3, #48	; 0x30
 800391a:	d10b      	bne.n	8003934 <AskSigFox_ID+0x70>
						&& (curent_ID[i + 3] == '0')))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3303      	adds	r3, #3
 8003920:	f107 0210 	add.w	r2, r7, #16
 8003924:	4413      	add	r3, r2
 8003926:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800392a:	2b30      	cmp	r3, #48	; 0x30
 800392c:	d102      	bne.n	8003934 <AskSigFox_ID+0x70>
		{
			count3++;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	3301      	adds	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i <= sizeof(curent_ID); i++)
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	3301      	adds	r3, #1
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d9cf      	bls.n	80038e0 <AskSigFox_ID+0x1c>
		}
	}
	if (count3 > 0)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d009      	beq.n	800395a <AskSigFox_ID+0x96>
	{
		WakeUpNemeus_forID();
 8003946:	f007 fbed 	bl	800b124 <WakeUpNemeus_forID>
		SendIdAskSF();
 800394a:	f001 f993 	bl	8004c74 <SendIdAskSF>
		HAL_Delay(300);
 800394e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003952:	f008 f9b9 	bl	800bcc8 <HAL_Delay>
		return 1;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <AskSigFox_ID+0x98>
	}
	else
	{
		return 0;
 800395a:	2300      	movs	r3, #0
	}
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <config_seuil>:

float config_seuil(void)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
	uint8_t sensibility = c1.Sensibilite_chute;
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <config_seuil+0x50>)
 800396c:	7b1b      	ldrb	r3, [r3, #12]
 800396e:	71fb      	strb	r3, [r7, #7]
	if (sensibility == 0)
 8003970:	79fb      	ldrb	r3, [r7, #7]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d101      	bne.n	800397a <config_seuil+0x16>
	{
		return 25; //Par défaut
 8003976:	4b10      	ldr	r3, [pc, #64]	; (80039b8 <config_seuil+0x54>)
 8003978:	e012      	b.n	80039a0 <config_seuil+0x3c>
	}
	if (sensibility != 0)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d00e      	beq.n	800399e <config_seuil+0x3a>
	{
		if (sensibility == 1)
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <config_seuil+0x26>
		{
			return 20;	//corresponds à un Angle
 8003986:	4b0d      	ldr	r3, [pc, #52]	; (80039bc <config_seuil+0x58>)
 8003988:	e00a      	b.n	80039a0 <config_seuil+0x3c>
		}
		if (sensibility == 2)
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	2b02      	cmp	r3, #2
 800398e:	d101      	bne.n	8003994 <config_seuil+0x30>
		{
			return 25;
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <config_seuil+0x54>)
 8003992:	e005      	b.n	80039a0 <config_seuil+0x3c>
		}
		if (sensibility == 3)
 8003994:	79fb      	ldrb	r3, [r7, #7]
 8003996:	2b03      	cmp	r3, #3
 8003998:	d101      	bne.n	800399e <config_seuil+0x3a>
		{
			return 30;
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <config_seuil+0x5c>)
 800399c:	e000      	b.n	80039a0 <config_seuil+0x3c>
		}
	}
}
 800399e:	e001      	b.n	80039a4 <config_seuil+0x40>
 80039a0:	ee07 3a90 	vmov	s15, r3
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20001158 	.word	0x20001158
 80039b8:	41c80000 	.word	0x41c80000
 80039bc:	41a00000 	.word	0x41a00000
 80039c0:	41f00000 	.word	0x41f00000

080039c4 <OuChaIsel>:
#include "hes_gpio_h3.h"

// function :  set output * to 1 (param. : 1) or to 0  (param. : 0)

// function :  set output OuChaIsel to 1 (param. : 1) or to 0  (param. : 0)
void OuChaIsel(int outputValue) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b082      	sub	sp, #8
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d105      	bne.n	80039de <OuChaIsel+0x1a>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_SET);
 80039d2:	2201      	movs	r2, #1
 80039d4:	2120      	movs	r1, #32
 80039d6:	4806      	ldr	r0, [pc, #24]	; (80039f0 <OuChaIsel+0x2c>)
 80039d8:	f009 fa06 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
  }
}
 80039dc:	e004      	b.n	80039e8 <OuChaIsel+0x24>
    HAL_GPIO_WritePin(GPIOB,CHA_ISEL_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	2120      	movs	r1, #32
 80039e2:	4803      	ldr	r0, [pc, #12]	; (80039f0 <OuChaIsel+0x2c>)
 80039e4:	f009 fa00 	bl	800cde8 <HAL_GPIO_WritePin>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	48000400 	.word	0x48000400

080039f4 <OutDone1>:

// function :  set output OutDone1 to 1 (param. : 1) or to 0  (param. : 0)
void OutDone1(int outputValue) {
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d105      	bne.n	8003a0e <OutDone1+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_SET);
 8003a02:	2201      	movs	r2, #1
 8003a04:	2110      	movs	r1, #16
 8003a06:	4806      	ldr	r0, [pc, #24]	; (8003a20 <OutDone1+0x2c>)
 8003a08:	f009 f9ee 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
  }
}
 8003a0c:	e004      	b.n	8003a18 <OutDone1+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_1_Pin, GPIO_PIN_RESET);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2110      	movs	r1, #16
 8003a12:	4803      	ldr	r0, [pc, #12]	; (8003a20 <OutDone1+0x2c>)
 8003a14:	f009 f9e8 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	48000400 	.word	0x48000400

08003a24 <OutDone2>:

// function :  set output OuDone2 to 1 (param. : 1) or to 0  (param. : 0)
void OutDone2(int outputValue) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <OutDone2+0x1a>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_SET);
 8003a32:	2201      	movs	r2, #1
 8003a34:	2108      	movs	r1, #8
 8003a36:	4806      	ldr	r0, [pc, #24]	; (8003a50 <OutDone2+0x2c>)
 8003a38:	f009 f9d6 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
  }
}
 8003a3c:	e004      	b.n	8003a48 <OutDone2+0x24>
    HAL_GPIO_WritePin(GPIOB,DONE_2_Pin, GPIO_PIN_RESET);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2108      	movs	r1, #8
 8003a42:	4803      	ldr	r0, [pc, #12]	; (8003a50 <OutDone2+0x2c>)
 8003a44:	f009 f9d0 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	48000400 	.word	0x48000400

08003a54 <OutDwmRst>:

// function :  set output OutDwmRst to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmRst(int outputValue) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d107      	bne.n	8003a72 <OutDwmRst+0x1e>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_SET);
 8003a62:	2201      	movs	r2, #1
 8003a64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a6c:	f009 f9bc 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
  }
}
 8003a70:	e006      	b.n	8003a80 <OutDwmRst+0x2c>
    HAL_GPIO_WritePin(GPIOA,DWM_RST_Pin, GPIO_PIN_RESET);
 8003a72:	2200      	movs	r2, #0
 8003a74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7c:	f009 f9b4 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <OutDwmWu>:

// function :  set output OutDwmWu to 1 (param. : 1) or to 0  (param. : 0)
void OutDwmWu(int outputValue) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d106      	bne.n	8003aa4 <OutDwmWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_SET);
 8003a96:	2201      	movs	r2, #1
 8003a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a9c:	4806      	ldr	r0, [pc, #24]	; (8003ab8 <OutDwmWu+0x30>)
 8003a9e:	f009 f9a3 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003aa2:	e005      	b.n	8003ab0 <OutDwmWu+0x28>
    HAL_GPIO_WritePin(GPIOB,DWM_WU_Pin, GPIO_PIN_RESET);
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003aaa:	4803      	ldr	r0, [pc, #12]	; (8003ab8 <OutDwmWu+0x30>)
 8003aac:	f009 f99c 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	48000400 	.word	0x48000400

08003abc <OutOledWu>:
}
*/

// for L433
// function :  set output OutOledWu to 1 (param. : 1) or to 0  (param. : 0)
void OutOledWu(int outputValue) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d106      	bne.n	8003ad8 <OutOledWu+0x1c>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_SET);
 8003aca:	2201      	movs	r2, #1
 8003acc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ad0:	4806      	ldr	r0, [pc, #24]	; (8003aec <OutOledWu+0x30>)
 8003ad2:	f009 f989 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003ad6:	e005      	b.n	8003ae4 <OutOledWu+0x28>
    HAL_GPIO_WritePin(GPIOB,OLED_WU_Pin, GPIO_PIN_RESET);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ade:	4803      	ldr	r0, [pc, #12]	; (8003aec <OutOledWu+0x30>)
 8003ae0:	f009 f982 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003ae4:	bf00      	nop
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	48000400 	.word	0x48000400

08003af0 <OutLoraWu>:

// function :  set output OutLoraWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLoraWu(int outputValue) {
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <OutLoraWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_SET);
 8003afe:	2201      	movs	r2, #1
 8003b00:	2104      	movs	r1, #4
 8003b02:	4806      	ldr	r0, [pc, #24]	; (8003b1c <OutLoraWu+0x2c>)
 8003b04:	f009 f970 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003b08:	e004      	b.n	8003b14 <OutLoraWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LORA_WU_Pin, GPIO_PIN_RESET);
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	2104      	movs	r1, #4
 8003b0e:	4803      	ldr	r0, [pc, #12]	; (8003b1c <OutLoraWu+0x2c>)
 8003b10:	f009 f96a 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003b14:	bf00      	nop
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	48000400 	.word	0x48000400

08003b20 <OutGpsRst>:

// function :  set output OutGpsRst to 1 (param. : 1) or to 0  (param. : 0)
void OutGpsRst(int outputValue) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d105      	bne.n	8003b3a <OutGpsRst+0x1a>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_SET);
 8003b2e:	2201      	movs	r2, #1
 8003b30:	2102      	movs	r1, #2
 8003b32:	4806      	ldr	r0, [pc, #24]	; (8003b4c <OutGpsRst+0x2c>)
 8003b34:	f009 f958 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
  }
}
 8003b38:	e004      	b.n	8003b44 <OutGpsRst+0x24>
    HAL_GPIO_WritePin(GPIOB,GPS_RST_Pin, GPIO_PIN_RESET);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2102      	movs	r1, #2
 8003b3e:	4803      	ldr	r0, [pc, #12]	; (8003b4c <OutGpsRst+0x2c>)
 8003b40:	f009 f952 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003b44:	bf00      	nop
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	48000400 	.word	0x48000400

08003b50 <OutLedWu>:

// function :  set output OutLedWu to 1 (param. : 1) or to 0  (param. : 0)
void OutLedWu(int outputValue) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d105      	bne.n	8003b6a <OutLedWu+0x1a>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_SET);
 8003b5e:	2201      	movs	r2, #1
 8003b60:	2101      	movs	r1, #1
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <OutLedWu+0x2c>)
 8003b64:	f009 f940 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
  }
}
 8003b68:	e004      	b.n	8003b74 <OutLedWu+0x24>
    HAL_GPIO_WritePin(GPIOB,LED_WU_Pin, GPIO_PIN_RESET);
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	2101      	movs	r1, #1
 8003b6e:	4803      	ldr	r0, [pc, #12]	; (8003b7c <OutLedWu+0x2c>)
 8003b70:	f009 f93a 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	48000400 	.word	0x48000400

08003b80 <OutMotorWu>:
    HAL_GPIO_WritePin(GPIOA,GAZ_WU_Pin, GPIO_PIN_RESET);
  }
}

// function :  set output OutMotorWu to 1 (param. : 1) or to 0  (param. : 0)
void OutMotorWu(int outputValue) {
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b082      	sub	sp, #8
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
	if (VIBOK==1)
	{
  if (outputValue==1) {
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d106      	bne.n	8003b9c <OutMotorWu+0x1c>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_SET);
 8003b8e:	2201      	movs	r2, #1
 8003b90:	2108      	movs	r1, #8
 8003b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b96:	f009 f927 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
  }
}
}
 8003b9a:	e005      	b.n	8003ba8 <OutMotorWu+0x28>
    HAL_GPIO_WritePin(GPIOA,MOTOR_WU_Pin, GPIO_PIN_RESET);
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	2108      	movs	r1, #8
 8003ba0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ba4:	f009 f920 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <OutOledRst>:

// function :  set output OutOledRst to 1 (param. : 1) or to 0  (param. : 0)
void OutOledRst(int outputValue) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b082      	sub	sp, #8
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  if (outputValue==1) {
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d106      	bne.n	8003bcc <OutOledRst+0x1c>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_SET);
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bc4:	4806      	ldr	r0, [pc, #24]	; (8003be0 <OutOledRst+0x30>)
 8003bc6:	f009 f90f 	bl	800cde8 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
  }
}
 8003bca:	e005      	b.n	8003bd8 <OutOledRst+0x28>
    HAL_GPIO_WritePin(OLED_RST_GPIO_Port,OLED_RST_Pin, GPIO_PIN_RESET);
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003bd2:	4803      	ldr	r0, [pc, #12]	; (8003be0 <OutOledRst+0x30>)
 8003bd4:	f009 f908 	bl	800cde8 <HAL_GPIO_WritePin>
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}
 8003be0:	48000800 	.word	0x48000800

08003be4 <InOn>:

// function :  read binary value of input * (param. : 1 for high value or param. : 0 for low value)

// function :  read binary value of input InOn (param. : 1 for high value or param. : 0 for low value)
int InOn(void) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_ON_Pin)) == 0)
 8003bee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf2:	4806      	ldr	r0, [pc, #24]	; (8003c0c <InOn+0x28>)
 8003bf4:	f009 f8e0 	bl	800cdb8 <HAL_GPIO_ReadPin>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <InOn+0x1e>
	{
		stateBP = 1 ; 
 8003bfe:	2301      	movs	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 8003c02:	687b      	ldr	r3, [r7, #4]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	48000400 	.word	0x48000400

08003c10 <InSOS>:

// function :  read binary value of input InSOS (param. : 1 for high value or param. : 0 for low value)
int InSOS(void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
	int stateBP = 0 ; 
 8003c16:	2300      	movs	r3, #0
 8003c18:	607b      	str	r3, [r7, #4]
  if (((int)HAL_GPIO_ReadPin(GPIOB,BP_SOS_Pin)) == 0)
 8003c1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c1e:	4806      	ldr	r0, [pc, #24]	; (8003c38 <InSOS+0x28>)
 8003c20:	f009 f8ca 	bl	800cdb8 <HAL_GPIO_ReadPin>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <InSOS+0x1e>
	{
		stateBP = 1 ; 
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	607b      	str	r3, [r7, #4]
	}
	return stateBP ;
 8003c2e:	687b      	ldr	r3, [r7, #4]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3708      	adds	r7, #8
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	48000400 	.word	0x48000400

08003c3c <OutBuzOn>:

// function : start Buzzer  
void OutBuzOn() {
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
	if (BUZOK==1){
HAL_TIM_PWM_Start(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 8003c40:	2100      	movs	r1, #0
 8003c42:	4802      	ldr	r0, [pc, #8]	; (8003c4c <OutBuzOn+0x10>)
 8003c44:	f00d f82c 	bl	8010ca0 <HAL_TIM_PWM_Start>
	}
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20003304 	.word	0x20003304

08003c50 <OutBuzOff>:

// function : stop Buzzer 
void OutBuzOff() {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
		if (BUZOK==1){
HAL_TIM_PWM_Stop(&BUZ_TIM_PORT,TIM_CHANNEL_1);
 8003c54:	2100      	movs	r1, #0
 8003c56:	4802      	ldr	r0, [pc, #8]	; (8003c60 <OutBuzOff+0x10>)
 8003c58:	f00d f900 	bl	8010e5c <HAL_TIM_PWM_Stop>
		}
}
 8003c5c:	bf00      	nop
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20003304 	.word	0x20003304

08003c64 <GpsStop>:

#include "hes_gps.h"

void GpsStop(void) {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b086      	sub	sp, #24
 8003c68:	af00      	add	r7, sp, #0
	
	OutGpsRst(1);
 8003c6a:	2001      	movs	r0, #1
 8003c6c:	f7ff ff58 	bl	8003b20 <OutGpsRst>
HAL_Delay(1);
 8003c70:	2001      	movs	r0, #1
 8003c72:	f008 f829 	bl	800bcc8 <HAL_Delay>
	 // hexadecimal messages to stop GPS
 uint8_t stop_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x16, 0x74};
 8003c76:	4a11      	ldr	r2, [pc, #68]	; (8003cbc <GpsStop+0x58>)
 8003c78:	f107 030c 	add.w	r3, r7, #12
 8003c7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 uint8_t stop_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};
 8003c82:	4a0f      	ldr	r2, [pc, #60]	; (8003cc0 <GpsStop+0x5c>)
 8003c84:	1d3b      	adds	r3, r7, #4
 8003c86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003c8a:	e883 0003 	stmia.w	r3, {r0, r1}
 

  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps1, sizeof(stop_gps1));
 8003c8e:	f107 030c 	add.w	r3, r7, #12
 8003c92:	220c      	movs	r2, #12
 8003c94:	4619      	mov	r1, r3
 8003c96:	480b      	ldr	r0, [pc, #44]	; (8003cc4 <GpsStop+0x60>)
 8003c98:	f00e f8a6 	bl	8011de8 <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 8003c9c:	2014      	movs	r0, #20
 8003c9e:	f008 f813 	bl	800bcc8 <HAL_Delay>
  HAL_UART_Transmit_IT(&GPS_UART_PORT, stop_gps2, sizeof(stop_gps2));
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2208      	movs	r2, #8
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4806      	ldr	r0, [pc, #24]	; (8003cc4 <GpsStop+0x60>)
 8003caa:	f00e f89d 	bl	8011de8 <HAL_UART_Transmit_IT>
  HAL_Delay(20);
 8003cae:	2014      	movs	r0, #20
 8003cb0:	f008 f80a 	bl	800bcc8 <HAL_Delay>
  //OutGpsRst(0);
}
 8003cb4:	bf00      	nop
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}
 8003cbc:	0801b8b4 	.word	0x0801b8b4
 8003cc0:	0801b8c0 	.word	0x0801b8c0
 8003cc4:	200034b0 	.word	0x200034b0

08003cc8 <CheckSum>:
3E 89 // check
*/


void CheckSum(uint8_t tab[], uint8_t size)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	70fb      	strb	r3, [r7, #3]
	uint8_t CK_A = 0, CK_B = 0;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	73fb      	strb	r3, [r7, #15]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73bb      	strb	r3, [r7, #14]
	int i;
	for( i = 2; i < size-2; i++)
 8003cdc:	2302      	movs	r3, #2
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	e00d      	b.n	8003cfe <CheckSum+0x36>
	{
		CK_A = CK_A + tab[i];
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	781a      	ldrb	r2, [r3, #0]
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	4413      	add	r3, r2
 8003cee:	73fb      	strb	r3, [r7, #15]
		CK_B = CK_B + CK_A;
 8003cf0:	7bba      	ldrb	r2, [r7, #14]
 8003cf2:	7bfb      	ldrb	r3, [r7, #15]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	73bb      	strb	r3, [r7, #14]
	for( i = 2; i < size-2; i++)
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60bb      	str	r3, [r7, #8]
 8003cfe:	78fb      	ldrb	r3, [r7, #3]
 8003d00:	3b02      	subs	r3, #2
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	dbec      	blt.n	8003ce2 <CheckSum+0x1a>
	}
	tab[i] = CK_A;
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	701a      	strb	r2, [r3, #0]
	i++;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	3301      	adds	r3, #1
 8003d16:	60bb      	str	r3, [r7, #8]
	tab[i] = CK_B;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	7bba      	ldrb	r2, [r7, #14]
 8003d20:	701a      	strb	r2, [r3, #0]
}
 8003d22:	bf00      	nop
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <GpsStart>:

void GpsStart(void) {
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b0b7      	sub	sp, #220	; 0xdc
 8003d34:	af00      	add	r7, sp, #0

  // hexadecimal messages to start GPS
uint8_t start_gps1[] = {0xB5, 0x62, 0x06, 0x04, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x17, 0x76}; //UBX-CFG-RST -> 04 -> hardware reset
 8003d36:	4a63      	ldr	r2, [pc, #396]	; (8003ec4 <GpsStart+0x194>)
 8003d38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003d3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003d3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
uint8_t start_gps2[] = {0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34};	// Poll receiver
 8003d42:	4a61      	ldr	r2, [pc, #388]	; (8003ec8 <GpsStart+0x198>)
 8003d44:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003d48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d4c:	e883 0003 	stmia.w	r3, {r0, r1}

 
uint8_t RMC_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X04, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X03, 0X3F};
 8003d50:	4b5e      	ldr	r3, [pc, #376]	; (8003ecc <GpsStart+0x19c>)
 8003d52:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8003d56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t VTG_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X05, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X04, 0X46};
 8003d5c:	4b5c      	ldr	r3, [pc, #368]	; (8003ed0 <GpsStart+0x1a0>)
 8003d5e:	f107 04a4 	add.w	r4, r7, #164	; 0xa4
 8003d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X02, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X01, 0X31};
 8003d68:	4b5a      	ldr	r3, [pc, #360]	; (8003ed4 <GpsStart+0x1a4>)
 8003d6a:	f107 0494 	add.w	r4, r7, #148	; 0x94
 8003d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GSV_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X03, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X02, 0X38};
 8003d74:	4b58      	ldr	r3, [pc, #352]	; (8003ed8 <GpsStart+0x1a8>)
 8003d76:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8003d7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t GLL_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X01, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X2A};
 8003d80:	4b56      	ldr	r3, [pc, #344]	; (8003edc <GpsStart+0x1ac>)
 8003d82:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8003d86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
// char GGA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0XFF, 0X23};
uint8_t GGA_On[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X00, 0X00, 0X01, 0X01, 0X00, 0X00, 0X00, 0X01, 0X2C};
 8003d8c:	4b54      	ldr	r3, [pc, #336]	; (8003ee0 <GpsStart+0x1b0>)
 8003d8e:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8003d92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
uint8_t ZDA_Off[] = { 0XB5, 0X62, 0X06, 0X01, 0X08, 0X00, 0XF0, 0X08, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X07, 0X5B};
 8003d98:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <GpsStart+0x1b4>)
 8003d9a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8003d9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003da0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

uint8_t POWER_MODE_ECO[] = { 0xB5, 0x62, 0x06, 0x86, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x5B};
 8003da4:	4b50      	ldr	r3, [pc, #320]	; (8003ee8 <GpsStart+0x1b8>)
 8003da6:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8003daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 

//Power Save Mode (PSM) allows a reduction in system power consumption by selectively switchingparts of the receiver on and off. It is selected using the message UBX-CFG-RXM and configured using UBX-CFG-PM2. It is recommended to use UBX-CFG-PMS instead if available (only supported inprotocol versions 18+) as it provides a simplified interface; see section Power mode setup fordetails
//CAM-M8Q-0-10  = >  SPG 3.01  => 18.00
uint8_t GNSS_Selection[] = { 0XB5, 0X62, 0X06, 0X3E, 0X3C,
 8003db0:	4a4e      	ldr	r2, [pc, #312]	; (8003eec <GpsStart+0x1bc>)
 8003db2:	463b      	mov	r3, r7
 8003db4:	4611      	mov	r1, r2
 8003db6:	2244      	movs	r2, #68	; 0x44
 8003db8:	4618      	mov	r0, r3
 8003dba:	f014 f95f 	bl	801807c <memcpy>
		0X00, 0X00};




CheckSum(GNSS_Selection, sizeof(GNSS_Selection));
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	2144      	movs	r1, #68	; 0x44
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7ff ff80 	bl	8003cc8 <CheckSum>

CheckSum(POWER_MODE_ECO, sizeof(POWER_MODE_ECO));
 8003dc8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003dcc:	2110      	movs	r1, #16
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff7a 	bl	8003cc8 <CheckSum>


OutGpsRst(1);
 8003dd4:	2001      	movs	r0, #1
 8003dd6:	f7ff fea3 	bl	8003b20 <OutGpsRst>
HAL_Delay(1);
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f007 ff74 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps1, sizeof(start_gps1));
 8003de0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003de4:	220c      	movs	r2, #12
 8003de6:	4619      	mov	r1, r3
 8003de8:	4841      	ldr	r0, [pc, #260]	; (8003ef0 <GpsStart+0x1c0>)
 8003dea:	f00d fffd 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003dee:	201e      	movs	r0, #30
 8003df0:	f007 ff6a 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, start_gps2, sizeof(start_gps2));
 8003df4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003df8:	2208      	movs	r2, #8
 8003dfa:	4619      	mov	r1, r3
 8003dfc:	483c      	ldr	r0, [pc, #240]	; (8003ef0 <GpsStart+0x1c0>)
 8003dfe:	f00d fff3 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e02:	201e      	movs	r0, #30
 8003e04:	f007 ff60 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, RMC_Off,sizeof(RMC_Off));
 8003e08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003e0c:	2210      	movs	r2, #16
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4837      	ldr	r0, [pc, #220]	; (8003ef0 <GpsStart+0x1c0>)
 8003e12:	f00d ffe9 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e16:	201e      	movs	r0, #30
 8003e18:	f007 ff56 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, VTG_Off,sizeof(VTG_Off));
 8003e1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003e20:	2210      	movs	r2, #16
 8003e22:	4619      	mov	r1, r3
 8003e24:	4832      	ldr	r0, [pc, #200]	; (8003ef0 <GpsStart+0x1c0>)
 8003e26:	f00d ffdf 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e2a:	201e      	movs	r0, #30
 8003e2c:	f007 ff4c 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSA_Off,sizeof(GSA_Off));
 8003e30:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003e34:	2210      	movs	r2, #16
 8003e36:	4619      	mov	r1, r3
 8003e38:	482d      	ldr	r0, [pc, #180]	; (8003ef0 <GpsStart+0x1c0>)
 8003e3a:	f00d ffd5 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e3e:	201e      	movs	r0, #30
 8003e40:	f007 ff42 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GSV_Off,sizeof(GSV_Off));
 8003e44:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003e48:	2210      	movs	r2, #16
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4828      	ldr	r0, [pc, #160]	; (8003ef0 <GpsStart+0x1c0>)
 8003e4e:	f00d ffcb 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e52:	201e      	movs	r0, #30
 8003e54:	f007 ff38 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GLL_Off,sizeof(GLL_Off));
 8003e58:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003e5c:	2210      	movs	r2, #16
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4823      	ldr	r0, [pc, #140]	; (8003ef0 <GpsStart+0x1c0>)
 8003e62:	f00d ffc1 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e66:	201e      	movs	r0, #30
 8003e68:	f007 ff2e 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, ZDA_Off,sizeof(ZDA_Off));
 8003e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003e70:	2210      	movs	r2, #16
 8003e72:	4619      	mov	r1, r3
 8003e74:	481e      	ldr	r0, [pc, #120]	; (8003ef0 <GpsStart+0x1c0>)
 8003e76:	f00d ffb7 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e7a:	201e      	movs	r0, #30
 8003e7c:	f007 ff24 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GGA_On,sizeof(GGA_On));
 8003e80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003e84:	2210      	movs	r2, #16
 8003e86:	4619      	mov	r1, r3
 8003e88:	4819      	ldr	r0, [pc, #100]	; (8003ef0 <GpsStart+0x1c0>)
 8003e8a:	f00d ffad 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003e8e:	201e      	movs	r0, #30
 8003e90:	f007 ff1a 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, GNSS_Selection,sizeof(GNSS_Selection));
 8003e94:	463b      	mov	r3, r7
 8003e96:	2244      	movs	r2, #68	; 0x44
 8003e98:	4619      	mov	r1, r3
 8003e9a:	4815      	ldr	r0, [pc, #84]	; (8003ef0 <GpsStart+0x1c0>)
 8003e9c:	f00d ffa4 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003ea0:	201e      	movs	r0, #30
 8003ea2:	f007 ff11 	bl	800bcc8 <HAL_Delay>

HAL_UART_Transmit_IT(&GPS_UART_PORT, POWER_MODE_ECO, sizeof(POWER_MODE_ECO));
 8003ea6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003eaa:	2210      	movs	r2, #16
 8003eac:	4619      	mov	r1, r3
 8003eae:	4810      	ldr	r0, [pc, #64]	; (8003ef0 <GpsStart+0x1c0>)
 8003eb0:	f00d ff9a 	bl	8011de8 <HAL_UART_Transmit_IT>
HAL_Delay(30);
 8003eb4:	201e      	movs	r0, #30
 8003eb6:	f007 ff07 	bl	800bcc8 <HAL_Delay>


}
 8003eba:	bf00      	nop
 8003ebc:	37dc      	adds	r7, #220	; 0xdc
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd90      	pop	{r4, r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	0801b8c8 	.word	0x0801b8c8
 8003ec8:	0801b8c0 	.word	0x0801b8c0
 8003ecc:	0801b8d4 	.word	0x0801b8d4
 8003ed0:	0801b8e4 	.word	0x0801b8e4
 8003ed4:	0801b8f4 	.word	0x0801b8f4
 8003ed8:	0801b904 	.word	0x0801b904
 8003edc:	0801b914 	.word	0x0801b914
 8003ee0:	0801b924 	.word	0x0801b924
 8003ee4:	0801b934 	.word	0x0801b934
 8003ee8:	0801b944 	.word	0x0801b944
 8003eec:	0801b954 	.word	0x0801b954
 8003ef0:	200034b0 	.word	0x200034b0

08003ef4 <Init_IMU>:
extern HAL_StatusTypeDef I2C1_OK;

extern uint8_t IMU_nodata;

void Init_IMU(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b086      	sub	sp, #24
 8003ef8:	af04      	add	r7, sp, #16

	IMU_nodata = 0;
 8003efa:	4b51      	ldr	r3, [pc, #324]	; (8004040 <Init_IMU+0x14c>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	701a      	strb	r2, [r3, #0]

	// MC3413
	if (Hard_conf[0] == '2')
 8003f00:	4b50      	ldr	r3, [pc, #320]	; (8004044 <Init_IMU+0x150>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	2b32      	cmp	r3, #50	; 0x32
 8003f06:	d13d      	bne.n	8003f84 <Init_IMU+0x90>
	{
		uint8_t check = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	71fb      	strb	r3, [r7, #7]
		uint8_t Data;

		Data = 0x00; // switch to standby mode be able to write in the registers
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MC3413, MC_PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8003f10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f14:	9302      	str	r3, [sp, #8]
 8003f16:	2301      	movs	r3, #1
 8003f18:	9301      	str	r3, [sp, #4]
 8003f1a:	1dbb      	adds	r3, r7, #6
 8003f1c:	9300      	str	r3, [sp, #0]
 8003f1e:	2301      	movs	r3, #1
 8003f20:	2207      	movs	r2, #7
 8003f22:	2198      	movs	r1, #152	; 0x98
 8003f24:	4848      	ldr	r0, [pc, #288]	; (8004048 <Init_IMU+0x154>)
 8003f26:	f009 f8fb 	bl	800d120 <HAL_I2C_Mem_Write>

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register // gyro
		Data = 0x09;
 8003f2a:	2309      	movs	r3, #9
 8003f2c:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MC3413, MC_SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8003f2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f32:	9302      	str	r3, [sp, #8]
 8003f34:	2301      	movs	r3, #1
 8003f36:	9301      	str	r3, [sp, #4]
 8003f38:	1dbb      	adds	r3, r7, #6
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	2208      	movs	r2, #8
 8003f40:	2198      	movs	r1, #152	; 0x98
 8003f42:	4841      	ldr	r0, [pc, #260]	; (8004048 <Init_IMU+0x154>)
 8003f44:	f009 f8ec 	bl	800d120 <HAL_I2C_Mem_Write>

		Data = 0x23; // 0xX3 : 10 bits , 0x12 : 8 bits, 0x00 : 6 bits
 8003f48:	2323      	movs	r3, #35	; 0x23
 8003f4a:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MC3413, MC_OUTCFG_REG, 1, &Data, 1, 1000);
 8003f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f50:	9302      	str	r3, [sp, #8]
 8003f52:	2301      	movs	r3, #1
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	1dbb      	adds	r3, r7, #6
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	2198      	movs	r1, #152	; 0x98
 8003f60:	4839      	ldr	r0, [pc, #228]	; (8004048 <Init_IMU+0x154>)
 8003f62:	f009 f8dd 	bl	800d120 <HAL_I2C_Mem_Write>

		//HAL_I2C_Mem_Read (&hi2c1, MPU3413_ADDR, PWR_MGMT_1_REG, 1, &check, 1, 1000);
		Data = 0x01; // goes in wake state, normal behaviour, config is already done
 8003f66:	2301      	movs	r3, #1
 8003f68:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c1, MC3413, MC_PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8003f6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	2301      	movs	r3, #1
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	1dbb      	adds	r3, r7, #6
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2301      	movs	r3, #1
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	2198      	movs	r1, #152	; 0x98
 8003f7e:	4832      	ldr	r0, [pc, #200]	; (8004048 <Init_IMU+0x154>)
 8003f80:	f009 f8ce 	bl	800d120 <HAL_I2C_Mem_Write>
	}

	//MPU6050_ADDR
	if (Hard_conf[0] == '1')
 8003f84:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <Init_IMU+0x150>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b31      	cmp	r3, #49	; 0x31
 8003f8a:	d139      	bne.n	8004000 <Init_IMU+0x10c>
		uint8_t check;
		uint8_t Data;

		// check device ID WHO_AM_I

		HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1,
 8003f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	2301      	movs	r3, #1
 8003f94:	9301      	str	r3, [sp, #4]
 8003f96:	1d7b      	adds	r3, r7, #5
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	2275      	movs	r2, #117	; 0x75
 8003f9e:	21d0      	movs	r1, #208	; 0xd0
 8003fa0:	4829      	ldr	r0, [pc, #164]	; (8004048 <Init_IMU+0x154>)
 8003fa2:	f009 f9d1 	bl	800d348 <HAL_I2C_Mem_Read>
				1000);

		//if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
		//{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1,
 8003faa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fae:	9302      	str	r3, [sp, #8]
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	1d3b      	adds	r3, r7, #4
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	2301      	movs	r3, #1
 8003fba:	226b      	movs	r2, #107	; 0x6b
 8003fbc:	21d0      	movs	r1, #208	; 0xd0
 8003fbe:	4822      	ldr	r0, [pc, #136]	; (8004048 <Init_IMU+0x154>)
 8003fc0:	f009 f8ae 	bl	800d120 <HAL_I2C_Mem_Write>
				1000);

		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register // gyro
		Data = 0x07;
 8003fc4:	2307      	movs	r3, #7
 8003fc6:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,
 8003fc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fcc:	9302      	str	r3, [sp, #8]
 8003fce:	2301      	movs	r3, #1
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	1d3b      	adds	r3, r7, #4
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	2219      	movs	r2, #25
 8003fda:	21d0      	movs	r1, #208	; 0xd0
 8003fdc:	481a      	ldr	r0, [pc, #104]	; (8004048 <Init_IMU+0x154>)
 8003fde:	f009 f89f 	bl	800d120 <HAL_I2C_Mem_Write>
				1000);

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 4g
		Data = 0x01;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	713b      	strb	r3, [r7, #4]
		HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,
 8003fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fea:	9302      	str	r3, [sp, #8]
 8003fec:	2301      	movs	r3, #1
 8003fee:	9301      	str	r3, [sp, #4]
 8003ff0:	1d3b      	adds	r3, r7, #4
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	221c      	movs	r2, #28
 8003ff8:	21d0      	movs	r1, #208	; 0xd0
 8003ffa:	4813      	ldr	r0, [pc, #76]	; (8004048 <Init_IMU+0x154>)
 8003ffc:	f009 f890 	bl	800d120 <HAL_I2C_Mem_Write>
		//HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
		//}
	}

	//DWM1001C
	if (Hard_conf[0] == '3')
 8004000:	4b10      	ldr	r3, [pc, #64]	; (8004044 <Init_IMU+0x150>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b33      	cmp	r3, #51	; 0x33
 8004006:	d117      	bne.n	8004038 <Init_IMU+0x144>
	{

		// HAL_I2C_Mem_Read(&hi2c1,0x33,0x0F, 1, &buffer_acc, 1, 10);

		uint8_t buffer2[2];
		buffer2[0] = 0x20;
 8004008:	2320      	movs	r3, #32
 800400a:	703b      	strb	r3, [r7, #0]
		buffer2[1] = 0x7F;
 800400c:	237f      	movs	r3, #127	; 0x7f
 800400e:	707b      	strb	r3, [r7, #1]
		HAL_I2C_Master_Transmit(&hi2c1, 0x32, buffer2, 2, 20); // 0x32
 8004010:	463a      	mov	r2, r7
 8004012:	2314      	movs	r3, #20
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2302      	movs	r3, #2
 8004018:	2132      	movs	r1, #50	; 0x32
 800401a:	480b      	ldr	r0, [pc, #44]	; (8004048 <Init_IMU+0x154>)
 800401c:	f008 ff8c 	bl	800cf38 <HAL_I2C_Master_Transmit>

		buffer2[0] = 0x23;
 8004020:	2323      	movs	r3, #35	; 0x23
 8004022:	703b      	strb	r3, [r7, #0]
		buffer2[1] = 0x18;
 8004024:	2318      	movs	r3, #24
 8004026:	707b      	strb	r3, [r7, #1]
		HAL_I2C_Master_Transmit(&hi2c1, 0x32, buffer2, 2, 20); // x032
 8004028:	463a      	mov	r2, r7
 800402a:	2314      	movs	r3, #20
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2302      	movs	r3, #2
 8004030:	2132      	movs	r1, #50	; 0x32
 8004032:	4805      	ldr	r0, [pc, #20]	; (8004048 <Init_IMU+0x154>)
 8004034:	f008 ff80 	bl	800cf38 <HAL_I2C_Master_Transmit>
	}
}
 8004038:	bf00      	nop
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000c24 	.word	0x20000c24
 8004044:	20000b5c 	.word	0x20000b5c
 8004048:	20001ddc 	.word	0x20001ddc

0800404c <Measure_IMU>:

extern uint8_t IMU_Count = 0;

void Measure_IMU(uint8_t buffer6[])
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b08a      	sub	sp, #40	; 0x28
 8004050:	af04      	add	r7, sp, #16
 8004052:	6078      	str	r0, [r7, #4]
	if (I2C1_OK == HAL_OK)
 8004054:	4b68      	ldr	r3, [pc, #416]	; (80041f8 <Measure_IMU+0x1ac>)
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	f040 808e 	bne.w	800417a <Measure_IMU+0x12e>
	{

		// MC3413
		if (Hard_conf[0] == '2')
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <Measure_IMU+0x1b0>)
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	2b32      	cmp	r3, #50	; 0x32
 8004064:	d131      	bne.n	80040ca <Measure_IMU+0x7e>
		{
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x0D, 1, &buffer6[0], 1,
 8004066:	230a      	movs	r3, #10
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	2301      	movs	r3, #1
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	2301      	movs	r3, #1
 8004074:	220d      	movs	r2, #13
 8004076:	2198      	movs	r1, #152	; 0x98
 8004078:	4861      	ldr	r0, [pc, #388]	; (8004200 <Measure_IMU+0x1b4>)
 800407a:	f009 f965 	bl	800d348 <HAL_I2C_Mem_Read>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	4b5d      	ldr	r3, [pc, #372]	; (80041f8 <Measure_IMU+0x1ac>)
 8004084:	701a      	strb	r2, [r3, #0]
					10); // xMSB
			//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2A, 1, &buffer6[2], 1, 10);   // yLSB
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x0F, 1, &buffer6[2], 1,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	3302      	adds	r3, #2
 800408a:	220a      	movs	r2, #10
 800408c:	9202      	str	r2, [sp, #8]
 800408e:	2201      	movs	r2, #1
 8004090:	9201      	str	r2, [sp, #4]
 8004092:	9300      	str	r3, [sp, #0]
 8004094:	2301      	movs	r3, #1
 8004096:	220f      	movs	r2, #15
 8004098:	2198      	movs	r1, #152	; 0x98
 800409a:	4859      	ldr	r0, [pc, #356]	; (8004200 <Measure_IMU+0x1b4>)
 800409c:	f009 f954 	bl	800d348 <HAL_I2C_Mem_Read>
 80040a0:	4603      	mov	r3, r0
 80040a2:	461a      	mov	r2, r3
 80040a4:	4b54      	ldr	r3, [pc, #336]	; (80041f8 <Measure_IMU+0x1ac>)
 80040a6:	701a      	strb	r2, [r3, #0]
					10); // yMSB
			//HAL_I2C_Mem_Read(&hi2c1, MPU3413_ADDR, 0x12, 1, &buffer6[4], 1, 10);   // zLSB
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MC3413, 0x11, 1, &buffer6[4], 1,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3304      	adds	r3, #4
 80040ac:	220a      	movs	r2, #10
 80040ae:	9202      	str	r2, [sp, #8]
 80040b0:	2201      	movs	r2, #1
 80040b2:	9201      	str	r2, [sp, #4]
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	2301      	movs	r3, #1
 80040b8:	2211      	movs	r2, #17
 80040ba:	2198      	movs	r1, #152	; 0x98
 80040bc:	4850      	ldr	r0, [pc, #320]	; (8004200 <Measure_IMU+0x1b4>)
 80040be:	f009 f943 	bl	800d348 <HAL_I2C_Mem_Read>
 80040c2:	4603      	mov	r3, r0
 80040c4:	461a      	mov	r2, r3
 80040c6:	4b4c      	ldr	r3, [pc, #304]	; (80041f8 <Measure_IMU+0x1ac>)
 80040c8:	701a      	strb	r2, [r3, #0]
					10); // zMSB
		}

		//MPU6050_ADDR
		if (Hard_conf[0] == '1')
 80040ca:	4b4c      	ldr	r3, [pc, #304]	; (80041fc <Measure_IMU+0x1b0>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	2b31      	cmp	r3, #49	; 0x31
 80040d0:	d11b      	bne.n	800410a <Measure_IMU+0xbe>
		{
			uint8_t Rec_Data[6];

			int16_t Accel_X_RAW = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	82fb      	strh	r3, [r7, #22]
			int16_t Accel_Y_RAW = 0;
 80040d6:	2300      	movs	r3, #0
 80040d8:	82bb      	strh	r3, [r7, #20]
			int16_t Accel_Z_RAW = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	827b      	strh	r3, [r7, #18]

			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,
 80040de:	2301      	movs	r3, #1
 80040e0:	9302      	str	r3, [sp, #8]
 80040e2:	2306      	movs	r3, #6
 80040e4:	9301      	str	r3, [sp, #4]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2301      	movs	r3, #1
 80040ec:	223b      	movs	r2, #59	; 0x3b
 80040ee:	21d0      	movs	r1, #208	; 0xd0
 80040f0:	4843      	ldr	r0, [pc, #268]	; (8004200 <Measure_IMU+0x1b4>)
 80040f2:	f009 f929 	bl	800d348 <HAL_I2C_Mem_Read>
 80040f6:	4603      	mov	r3, r0
 80040f8:	461a      	mov	r2, r3
 80040fa:	4b3f      	ldr	r3, [pc, #252]	; (80041f8 <Measure_IMU+0x1ac>)
 80040fc:	701a      	strb	r2, [r3, #0]
					1, buffer6, 6, 1);

			Accel_X_RAW = (int16_t) (Rec_Data[0]);   //<< 8 | Rec_Data [1]);
 80040fe:	7b3b      	ldrb	r3, [r7, #12]
 8004100:	82fb      	strh	r3, [r7, #22]
			Accel_Y_RAW = (int16_t) (Rec_Data[2]);   //<< 8 | Rec_Data [3]);
 8004102:	7bbb      	ldrb	r3, [r7, #14]
 8004104:	82bb      	strh	r3, [r7, #20]
			Accel_Z_RAW = (int16_t) (Rec_Data[4]);   //<< 8 | Rec_Data [5]);
 8004106:	7c3b      	ldrb	r3, [r7, #16]
 8004108:	827b      	strh	r3, [r7, #18]
		 we have to divide according to the Full scale value set in FS_SEL
		 I have configured FS_SEL = 0. So I am dividing by 16384.0
		 for more details check ACCEL_CONFIG Register              ****/

		//DWM1001C
		if (Hard_conf[0] == '3')
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <Measure_IMU+0x1b0>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2b33      	cmp	r3, #51	; 0x33
 8004110:	d139      	bne.n	8004186 <Measure_IMU+0x13a>
		{
			//HAL_I2C_Mem_Read(&hi2c1,0x33,0x28, 1, &buffer6[0], 1, 10);   // xLSB
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x29, 1, &buffer6[1], 1,
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3301      	adds	r3, #1
 8004116:	220a      	movs	r2, #10
 8004118:	9202      	str	r2, [sp, #8]
 800411a:	2201      	movs	r2, #1
 800411c:	9201      	str	r2, [sp, #4]
 800411e:	9300      	str	r3, [sp, #0]
 8004120:	2301      	movs	r3, #1
 8004122:	2229      	movs	r2, #41	; 0x29
 8004124:	2133      	movs	r1, #51	; 0x33
 8004126:	4836      	ldr	r0, [pc, #216]	; (8004200 <Measure_IMU+0x1b4>)
 8004128:	f009 f90e 	bl	800d348 <HAL_I2C_Mem_Read>
 800412c:	4603      	mov	r3, r0
 800412e:	461a      	mov	r2, r3
 8004130:	4b31      	ldr	r3, [pc, #196]	; (80041f8 <Measure_IMU+0x1ac>)
 8004132:	701a      	strb	r2, [r3, #0]
					10); // xMSB//  HAL_I2C_Mem_Read(&hi2c1,0x33,0x29, 1, &buffer6[1], 1, 10);   // xMSB
			//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2A, 1, &buffer6[2], 1, 10);   // yLSB
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x2B, 1, &buffer6[3], 1,
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3303      	adds	r3, #3
 8004138:	220a      	movs	r2, #10
 800413a:	9202      	str	r2, [sp, #8]
 800413c:	2201      	movs	r2, #1
 800413e:	9201      	str	r2, [sp, #4]
 8004140:	9300      	str	r3, [sp, #0]
 8004142:	2301      	movs	r3, #1
 8004144:	222b      	movs	r2, #43	; 0x2b
 8004146:	2133      	movs	r1, #51	; 0x33
 8004148:	482d      	ldr	r0, [pc, #180]	; (8004200 <Measure_IMU+0x1b4>)
 800414a:	f009 f8fd 	bl	800d348 <HAL_I2C_Mem_Read>
 800414e:	4603      	mov	r3, r0
 8004150:	461a      	mov	r2, r3
 8004152:	4b29      	ldr	r3, [pc, #164]	; (80041f8 <Measure_IMU+0x1ac>)
 8004154:	701a      	strb	r2, [r3, #0]
					10);   // yMSB
			//HAL_I2C_Mem_Read(&hi2c1,0x33,0x2C, 1, &buffer6[4], 1, 10);   // zLSB
			I2C1_OK = HAL_I2C_Mem_Read(&hi2c1, 0x33, 0x2D, 1, &buffer6[5], 1,
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	3305      	adds	r3, #5
 800415a:	220a      	movs	r2, #10
 800415c:	9202      	str	r2, [sp, #8]
 800415e:	2201      	movs	r2, #1
 8004160:	9201      	str	r2, [sp, #4]
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	2301      	movs	r3, #1
 8004166:	222d      	movs	r2, #45	; 0x2d
 8004168:	2133      	movs	r1, #51	; 0x33
 800416a:	4825      	ldr	r0, [pc, #148]	; (8004200 <Measure_IMU+0x1b4>)
 800416c:	f009 f8ec 	bl	800d348 <HAL_I2C_Mem_Read>
 8004170:	4603      	mov	r3, r0
 8004172:	461a      	mov	r2, r3
 8004174:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <Measure_IMU+0x1ac>)
 8004176:	701a      	strb	r2, [r3, #0]
 8004178:	e005      	b.n	8004186 <Measure_IMU+0x13a>
					10);   // zMSB
		}
	}
	else
	{
		HAL_Delay(10);
 800417a:	200a      	movs	r0, #10
 800417c:	f007 fda4 	bl	800bcc8 <HAL_Delay>
		I2C1_OK = HAL_OK;
 8004180:	4b1d      	ldr	r3, [pc, #116]	; (80041f8 <Measure_IMU+0x1ac>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]

//acceleration_mg[0]  = ((float)	(((int8_t) buffer6[1]))) / 32; 	
//acceleration_mg[1]  = ((float)	(	((int8_t) buffer6[3])) )/ 32; 		
//acceleration_mg[2]  = ((float)	(	((int8_t) buffer6[5]))) / 32; 	

	if (IMU_Count < 200 && IMU_nodata < 100)
 8004186:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <Measure_IMU+0x1b8>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2bc7      	cmp	r3, #199	; 0xc7
 800418c:	d82c      	bhi.n	80041e8 <Measure_IMU+0x19c>
 800418e:	4b1e      	ldr	r3, [pc, #120]	; (8004208 <Measure_IMU+0x1bc>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	2b63      	cmp	r3, #99	; 0x63
 8004194:	d828      	bhi.n	80041e8 <Measure_IMU+0x19c>
	{
		IMU_Count++;
 8004196:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <Measure_IMU+0x1b8>)
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	3301      	adds	r3, #1
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4b19      	ldr	r3, [pc, #100]	; (8004204 <Measure_IMU+0x1b8>)
 80041a0:	701a      	strb	r2, [r3, #0]
		if (buffer6[0] == 0 && buffer6[1] == 0 && buffer6[2] == 0
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d11e      	bne.n	80041e8 <Measure_IMU+0x19c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3301      	adds	r3, #1
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d119      	bne.n	80041e8 <Measure_IMU+0x19c>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3302      	adds	r3, #2
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d114      	bne.n	80041e8 <Measure_IMU+0x19c>
				&& buffer6[3] == 0 && buffer6[4] == 0 && buffer6[5] == 0)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	3303      	adds	r3, #3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10f      	bne.n	80041e8 <Measure_IMU+0x19c>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <Measure_IMU+0x19c>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3305      	adds	r3, #5
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d105      	bne.n	80041e8 <Measure_IMU+0x19c>
			IMU_nodata++;
 80041dc:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <Measure_IMU+0x1bc>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	4b08      	ldr	r3, [pc, #32]	; (8004208 <Measure_IMU+0x1bc>)
 80041e6:	701a      	strb	r2, [r3, #0]
	}
	imuMsr2floatG_y_bit_res16bit(buffer6); // compute norm of acceleration and Y axis acceleation
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f85b 	bl	80042a4 <imuMsr2floatG_y_bit_res16bit>

}
 80041ee:	bf00      	nop
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000c08 	.word	0x20000c08
 80041fc:	20000b5c 	.word	0x20000b5c
 8004200:	20001ddc 	.word	0x20001ddc
 8004204:	20000b5a 	.word	0x20000b5a
 8004208:	20000c24 	.word	0x20000c24

0800420c <absLBL>:

extern float acc[4];
extern float angle;
float absLBL(float a)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	ed87 0a01 	vstr	s0, [r7, #4]
	a = a >= 0 ? a : -a;
 8004216:	edd7 7a01 	vldr	s15, [r7, #4]
 800421a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800421e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004222:	db02      	blt.n	800422a <absLBL+0x1e>
 8004224:	edd7 7a01 	vldr	s15, [r7, #4]
 8004228:	e003      	b.n	8004232 <absLBL+0x26>
 800422a:	edd7 7a01 	vldr	s15, [r7, #4]
 800422e:	eef1 7a67 	vneg.f32	s15, s15
 8004232:	edc7 7a01 	vstr	s15, [r7, #4]
	return a;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	ee07 3a90 	vmov	s15, r3
}
 800423c:	eeb0 0a67 	vmov.f32	s0, s15
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	0000      	movs	r0, r0
 800424c:	0000      	movs	r0, r0
	...

08004250 <Degrees>:

float Degrees(double Radian)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	ed87 0b00 	vstr	d0, [r7]
	return (Radian * 180) / 3.1415;
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	4b10      	ldr	r3, [pc, #64]	; (80042a0 <Degrees+0x50>)
 8004260:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004264:	f7fc f9c8 	bl	80005f8 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	a309      	add	r3, pc, #36	; (adr r3, 8004298 <Degrees+0x48>)
 8004272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004276:	f7fc fae9 	bl	800084c <__aeabi_ddiv>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	f7fc fcb1 	bl	8000be8 <__aeabi_d2f>
 8004286:	4603      	mov	r3, r0
 8004288:	ee07 3a90 	vmov	s15, r3
}
 800428c:	eeb0 0a67 	vmov.f32	s0, s15
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	c083126f 	.word	0xc083126f
 800429c:	400921ca 	.word	0x400921ca
 80042a0:	40668000 	.word	0x40668000

080042a4 <imuMsr2floatG_y_bit_res16bit>:

void imuMsr2floatG_y_bit_res16bit(uint8_t buffer6[])
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	ed2d 8b02 	vpush	{d8}
 80042aa:	b086      	sub	sp, #24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
	//MPU6050_ADDR
	if (Hard_conf[0] == '1')
 80042b0:	4bce      	ldr	r3, [pc, #824]	; (80045ec <imuMsr2floatG_y_bit_res16bit+0x348>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b31      	cmp	r3, #49	; 0x31
 80042b6:	d17a      	bne.n	80043ae <imuMsr2floatG_y_bit_res16bit+0x10a>
	{
		acc[0] = ((float) (((int8_t) buffer6[0]))) / 64;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	b25b      	sxtb	r3, r3
 80042be:	ee07 3a90 	vmov	s15, r3
 80042c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042c6:	eddf 6aca 	vldr	s13, [pc, #808]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 80042ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ce:	4bc9      	ldr	r3, [pc, #804]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80042d0:	edc3 7a00 	vstr	s15, [r3]
		acc[1] = ((float) (((int8_t) buffer6[2]))) / 64;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3302      	adds	r3, #2
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	b25b      	sxtb	r3, r3
 80042dc:	ee07 3a90 	vmov	s15, r3
 80042e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80042e4:	eddf 6ac2 	vldr	s13, [pc, #776]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 80042e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80042ec:	4bc1      	ldr	r3, [pc, #772]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80042ee:	edc3 7a01 	vstr	s15, [r3, #4]
		acc[2] = ((float) (((int8_t) buffer6[4]))) / 64;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3304      	adds	r3, #4
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b25b      	sxtb	r3, r3
 80042fa:	ee07 3a90 	vmov	s15, r3
 80042fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004302:	eddf 6abb 	vldr	s13, [pc, #748]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 8004306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800430a:	4bba      	ldr	r3, [pc, #744]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 800430c:	edc3 7a02 	vstr	s15, [r3, #8]

		accy2 = absLBL(acc[0]);
 8004310:	4bb8      	ldr	r3, [pc, #736]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004312:	edd3 7a00 	vldr	s15, [r3]
 8004316:	eeb0 0a67 	vmov.f32	s0, s15
 800431a:	f7ff ff77 	bl	800420c <absLBL>
 800431e:	eef0 7a40 	vmov.f32	s15, s0
 8004322:	4bb5      	ldr	r3, [pc, #724]	; (80045f8 <imuMsr2floatG_y_bit_res16bit+0x354>)
 8004324:	edc3 7a00 	vstr	s15, [r3]
		accy = (uint16_t) (((acc[0]) + 4) * 255) / 8;  // y to top
 8004328:	4bb2      	ldr	r3, [pc, #712]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004332:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004336:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80045fc <imuMsr2floatG_y_bit_res16bit+0x358>
 800433a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800433e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004342:	ee17 3a90 	vmov	r3, s15
 8004346:	b29b      	uxth	r3, r3
 8004348:	08db      	lsrs	r3, r3, #3
 800434a:	b29a      	uxth	r2, r3
 800434c:	4bac      	ldr	r3, [pc, #688]	; (8004600 <imuMsr2floatG_y_bit_res16bit+0x35c>)
 800434e:	801a      	strh	r2, [r3, #0]

		double ang = absLBL(acc[0]) / absLBL(acc[2]);
 8004350:	4ba8      	ldr	r3, [pc, #672]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004352:	edd3 7a00 	vldr	s15, [r3]
 8004356:	eeb0 0a67 	vmov.f32	s0, s15
 800435a:	f7ff ff57 	bl	800420c <absLBL>
 800435e:	eeb0 8a40 	vmov.f32	s16, s0
 8004362:	4ba4      	ldr	r3, [pc, #656]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004364:	edd3 7a02 	vldr	s15, [r3, #8]
 8004368:	eeb0 0a67 	vmov.f32	s0, s15
 800436c:	f7ff ff4e 	bl	800420c <absLBL>
 8004370:	eef0 7a40 	vmov.f32	s15, s0
 8004374:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004378:	ee17 0a10 	vmov	r0, s14
 800437c:	f7fc f8e4 	bl	8000548 <__aeabi_f2d>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	e9c7 2304 	strd	r2, r3, [r7, #16]
		angle = Degrees(atan(ang));
 8004388:	ed97 0b04 	vldr	d0, [r7, #16]
 800438c:	f016 fe7c 	bl	801b088 <atan>
 8004390:	eeb0 7a40 	vmov.f32	s14, s0
 8004394:	eef0 7a60 	vmov.f32	s15, s1
 8004398:	eeb0 0a47 	vmov.f32	s0, s14
 800439c:	eef0 0a67 	vmov.f32	s1, s15
 80043a0:	f7ff ff56 	bl	8004250 <Degrees>
 80043a4:	eef0 7a40 	vmov.f32	s15, s0
 80043a8:	4b96      	ldr	r3, [pc, #600]	; (8004604 <imuMsr2floatG_y_bit_res16bit+0x360>)
 80043aa:	edc3 7a00 	vstr	s15, [r3]
	}

	// MC3413
	if (Hard_conf[0] == '2')
 80043ae:	4b8f      	ldr	r3, [pc, #572]	; (80045ec <imuMsr2floatG_y_bit_res16bit+0x348>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b32      	cmp	r3, #50	; 0x32
 80043b4:	d17a      	bne.n	80044ac <imuMsr2floatG_y_bit_res16bit+0x208>
	{
		acc[0] = ((float) (((int8_t) buffer6[0]))) / 64;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b25b      	sxtb	r3, r3
 80043bc:	ee07 3a90 	vmov	s15, r3
 80043c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043c4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 80043c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043cc:	4b89      	ldr	r3, [pc, #548]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80043ce:	edc3 7a00 	vstr	s15, [r3]
		acc[1] = ((float) (((int8_t) buffer6[2]))) / 64;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3302      	adds	r3, #2
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80043e2:	eddf 6a83 	vldr	s13, [pc, #524]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 80043e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80043ea:	4b82      	ldr	r3, [pc, #520]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80043ec:	edc3 7a01 	vstr	s15, [r3, #4]
		acc[2] = ((float) (((int8_t) buffer6[4]))) / 64;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3304      	adds	r3, #4
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	b25b      	sxtb	r3, r3
 80043f8:	ee07 3a90 	vmov	s15, r3
 80043fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004400:	eddf 6a7b 	vldr	s13, [pc, #492]	; 80045f0 <imuMsr2floatG_y_bit_res16bit+0x34c>
 8004404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004408:	4b7a      	ldr	r3, [pc, #488]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 800440a:	edc3 7a02 	vstr	s15, [r3, #8]

		accy2 = absLBL(acc[0]);
 800440e:	4b79      	ldr	r3, [pc, #484]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004410:	edd3 7a00 	vldr	s15, [r3]
 8004414:	eeb0 0a67 	vmov.f32	s0, s15
 8004418:	f7ff fef8 	bl	800420c <absLBL>
 800441c:	eef0 7a40 	vmov.f32	s15, s0
 8004420:	4b75      	ldr	r3, [pc, #468]	; (80045f8 <imuMsr2floatG_y_bit_res16bit+0x354>)
 8004422:	edc3 7a00 	vstr	s15, [r3]
		accy = (uint16_t) (((-acc[0]) + 4) * 255) / 8;  // y to top
 8004426:	4b73      	ldr	r3, [pc, #460]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004428:	edd3 7a00 	vldr	s15, [r3]
 800442c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004434:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80045fc <imuMsr2floatG_y_bit_res16bit+0x358>
 8004438:	ee67 7a87 	vmul.f32	s15, s15, s14
 800443c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004440:	ee17 3a90 	vmov	r3, s15
 8004444:	b29b      	uxth	r3, r3
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	b29a      	uxth	r2, r3
 800444a:	4b6d      	ldr	r3, [pc, #436]	; (8004600 <imuMsr2floatG_y_bit_res16bit+0x35c>)
 800444c:	801a      	strh	r2, [r3, #0]

		double ang = absLBL(acc[0]) / absLBL(acc[2]);
 800444e:	4b69      	ldr	r3, [pc, #420]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004450:	edd3 7a00 	vldr	s15, [r3]
 8004454:	eeb0 0a67 	vmov.f32	s0, s15
 8004458:	f7ff fed8 	bl	800420c <absLBL>
 800445c:	eeb0 8a40 	vmov.f32	s16, s0
 8004460:	4b64      	ldr	r3, [pc, #400]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004462:	edd3 7a02 	vldr	s15, [r3, #8]
 8004466:	eeb0 0a67 	vmov.f32	s0, s15
 800446a:	f7ff fecf 	bl	800420c <absLBL>
 800446e:	eef0 7a40 	vmov.f32	s15, s0
 8004472:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8004476:	ee17 0a10 	vmov	r0, s14
 800447a:	f7fc f865 	bl	8000548 <__aeabi_f2d>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	e9c7 2302 	strd	r2, r3, [r7, #8]
		angle = Degrees(atan(ang));
 8004486:	ed97 0b02 	vldr	d0, [r7, #8]
 800448a:	f016 fdfd 	bl	801b088 <atan>
 800448e:	eeb0 7a40 	vmov.f32	s14, s0
 8004492:	eef0 7a60 	vmov.f32	s15, s1
 8004496:	eeb0 0a47 	vmov.f32	s0, s14
 800449a:	eef0 0a67 	vmov.f32	s1, s15
 800449e:	f7ff fed7 	bl	8004250 <Degrees>
 80044a2:	eef0 7a40 	vmov.f32	s15, s0
 80044a6:	4b57      	ldr	r3, [pc, #348]	; (8004604 <imuMsr2floatG_y_bit_res16bit+0x360>)
 80044a8:	edc3 7a00 	vstr	s15, [r3]
	}

	//DWM1001C
	if (Hard_conf[0] == '3')
 80044ac:	4b4f      	ldr	r3, [pc, #316]	; (80045ec <imuMsr2floatG_y_bit_res16bit+0x348>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b33      	cmp	r3, #51	; 0x33
 80044b2:	d14c      	bne.n	800454e <imuMsr2floatG_y_bit_res16bit+0x2aa>
	{
		acc[0] = ((float) (((int8_t) buffer6[1]))) / 32;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	3301      	adds	r3, #1
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	b25b      	sxtb	r3, r3
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044c4:	eddf 6a50 	vldr	s13, [pc, #320]	; 8004608 <imuMsr2floatG_y_bit_res16bit+0x364>
 80044c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044cc:	4b49      	ldr	r3, [pc, #292]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80044ce:	edc3 7a00 	vstr	s15, [r3]
		acc[1] = ((float) (((int8_t) buffer6[3]))) / 32;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	3303      	adds	r3, #3
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	b25b      	sxtb	r3, r3
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80044e2:	eddf 6a49 	vldr	s13, [pc, #292]	; 8004608 <imuMsr2floatG_y_bit_res16bit+0x364>
 80044e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80044ea:	4b42      	ldr	r3, [pc, #264]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80044ec:	edc3 7a01 	vstr	s15, [r3, #4]
		acc[2] = ((float) (((int8_t) buffer6[5]))) / 32;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3305      	adds	r3, #5
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	ee07 3a90 	vmov	s15, r3
 80044fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004500:	eddf 6a41 	vldr	s13, [pc, #260]	; 8004608 <imuMsr2floatG_y_bit_res16bit+0x364>
 8004504:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004508:	4b3a      	ldr	r3, [pc, #232]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 800450a:	edc3 7a02 	vstr	s15, [r3, #8]

		accy2 = absLBL(acc[1]);
 800450e:	4b39      	ldr	r3, [pc, #228]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004510:	edd3 7a01 	vldr	s15, [r3, #4]
 8004514:	eeb0 0a67 	vmov.f32	s0, s15
 8004518:	f7ff fe78 	bl	800420c <absLBL>
 800451c:	eef0 7a40 	vmov.f32	s15, s0
 8004520:	4b35      	ldr	r3, [pc, #212]	; (80045f8 <imuMsr2floatG_y_bit_res16bit+0x354>)
 8004522:	edc3 7a00 	vstr	s15, [r3]
		accy = (uint16_t) (((-acc[1]) + 4) * 255) / 8;  // y to top
 8004526:	4b33      	ldr	r3, [pc, #204]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004528:	edd3 7a01 	vldr	s15, [r3, #4]
 800452c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004534:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80045fc <imuMsr2floatG_y_bit_res16bit+0x358>
 8004538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800453c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004540:	ee17 3a90 	vmov	r3, s15
 8004544:	b29b      	uxth	r3, r3
 8004546:	08db      	lsrs	r3, r3, #3
 8004548:	b29a      	uxth	r2, r3
 800454a:	4b2d      	ldr	r3, [pc, #180]	; (8004600 <imuMsr2floatG_y_bit_res16bit+0x35c>)
 800454c:	801a      	strh	r2, [r3, #0]
	}

	acc[3] = sqrt(acc[0] * acc[0] + acc[1] * acc[1] + acc[2] * acc[2]); //computation of result acceleration
 800454e:	4b29      	ldr	r3, [pc, #164]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004550:	ed93 7a00 	vldr	s14, [r3]
 8004554:	4b27      	ldr	r3, [pc, #156]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004556:	edd3 7a00 	vldr	s15, [r3]
 800455a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800455e:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004560:	edd3 6a01 	vldr	s13, [r3, #4]
 8004564:	4b23      	ldr	r3, [pc, #140]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004566:	edd3 7a01 	vldr	s15, [r3, #4]
 800456a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800456e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004572:	4b20      	ldr	r3, [pc, #128]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 8004574:	edd3 6a02 	vldr	s13, [r3, #8]
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 800457a:	edd3 7a02 	vldr	s15, [r3, #8]
 800457e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004586:	ee17 0a90 	vmov	r0, s15
 800458a:	f7fb ffdd 	bl	8000548 <__aeabi_f2d>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	ec43 2b10 	vmov	d0, r2, r3
 8004596:	f016 ff47 	bl	801b428 <sqrt>
 800459a:	ec53 2b10 	vmov	r2, r3, d0
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	f7fc fb21 	bl	8000be8 <__aeabi_d2f>
 80045a6:	4603      	mov	r3, r0
 80045a8:	4a12      	ldr	r2, [pc, #72]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80045aa:	60d3      	str	r3, [r2, #12]

	accres2 = acc[3];
 80045ac:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	4a16      	ldr	r2, [pc, #88]	; (800460c <imuMsr2floatG_y_bit_res16bit+0x368>)
 80045b2:	6013      	str	r3, [r2, #0]
	accres = (uint16_t) (((acc[3] + 4) * 255) / 8);
 80045b4:	4b0f      	ldr	r3, [pc, #60]	; (80045f4 <imuMsr2floatG_y_bit_res16bit+0x350>)
 80045b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80045ba:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80045be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80045c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80045fc <imuMsr2floatG_y_bit_res16bit+0x358>
 80045c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80045ca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80045ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80045d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d6:	ee17 3a90 	vmov	r3, s15
 80045da:	b29a      	uxth	r2, r3
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <imuMsr2floatG_y_bit_res16bit+0x36c>)
 80045de:	801a      	strh	r2, [r3, #0]
}
 80045e0:	bf00      	nop
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	ecbd 8b02 	vpop	{d8}
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	20000b5c 	.word	0x20000b5c
 80045f0:	42800000 	.word	0x42800000
 80045f4:	20001f70 	.word	0x20001f70
 80045f8:	20002068 	.word	0x20002068
 80045fc:	437f0000 	.word	0x437f0000
 8004600:	200026f4 	.word	0x200026f4
 8004604:	200028c8 	.word	0x200028c8
 8004608:	42000000 	.word	0x42000000
 800460c:	2000279c 	.word	0x2000279c
 8004610:	20002580 	.word	0x20002580

08004614 <LedOff>:
#include "hes_led.h"

void LedOff(int TabGen[]) {
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af02      	add	r7, sp, #8
 800461a:	6078      	str	r0, [r7, #4]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	33ec      	adds	r3, #236	; 0xec
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d12e      	bne.n	8004684 <LedOff+0x70>
	{	
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	33ec      	adds	r3, #236	; 0xec
 800462a:	2201      	movs	r2, #1
 800462c:	601a      	str	r2, [r3, #0]

  uint8_t buffer[3];

  OutLedWu(1);
 800462e:	2001      	movs	r0, #1
 8004630:	f7ff fa8e 	bl	8003b50 <OutLedWu>

  buffer[0] = 0x20;
 8004634:	2320      	movs	r3, #32
 8004636:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0x40;
 8004638:	2340      	movs	r3, #64	; 0x40
 800463a:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0x60;
 800463c:	2360      	movs	r3, #96	; 0x60
 800463e:	73bb      	strb	r3, [r7, #14]
	//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8004640:	f107 020c 	add.w	r2, r7, #12
 8004644:	230a      	movs	r3, #10
 8004646:	9300      	str	r3, [sp, #0]
 8004648:	2303      	movs	r3, #3
 800464a:	219a      	movs	r1, #154	; 0x9a
 800464c:	480f      	ldr	r0, [pc, #60]	; (800468c <LedOff+0x78>)
 800464e:	f008 fc73 	bl	800cf38 <HAL_I2C_Master_Transmit>

  buffer[0] = 0x80;
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	733b      	strb	r3, [r7, #12]
  buffer[1] = 0xA0;
 8004656:	23a0      	movs	r3, #160	; 0xa0
 8004658:	737b      	strb	r3, [r7, #13]
  buffer[2] = 0xC0;
 800465a:	23c0      	movs	r3, #192	; 0xc0
 800465c:	73bb      	strb	r3, [r7, #14]
		
	HAL_Delay(1);
 800465e:	2001      	movs	r0, #1
 8004660:	f007 fb32 	bl	800bcc8 <HAL_Delay>

  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A, buffer, 3,10);
 8004664:	f107 020c 	add.w	r2, r7, #12
 8004668:	230a      	movs	r3, #10
 800466a:	9300      	str	r3, [sp, #0]
 800466c:	2303      	movs	r3, #3
 800466e:	219a      	movs	r1, #154	; 0x9a
 8004670:	4806      	ldr	r0, [pc, #24]	; (800468c <LedOff+0x78>)
 8004672:	f008 fc61 	bl	800cf38 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1);
  OutLedWu(0);
 8004676:	2000      	movs	r0, #0
 8004678:	f7ff fa6a 	bl	8003b50 <OutLedWu>
		
		TabGen[LOCK_I2C1] = 0; 
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	33ec      	adds	r3, #236	; 0xec
 8004680:	2200      	movs	r2, #0
 8004682:	601a      	str	r2, [r3, #0]
	}
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	20001ddc 	.word	0x20001ddc

08004690 <LedOn>:

void LedOn(int red, int green, int blue, int TabGen[]) 
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]

	if(TabGen[LOCK_I2C1] == 0) // I2C available
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	33ec      	adds	r3, #236	; 0xec
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d137      	bne.n	8004718 <LedOn+0x88>
	{	

		
	TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	33ec      	adds	r3, #236	; 0xec
 80046ac:	2201      	movs	r2, #1
 80046ae:	601a      	str	r2, [r3, #0]
		
  uint8_t buffer[3];
	
	OutLedWu(1);
 80046b0:	2001      	movs	r0, #1
 80046b2:	f7ff fa4d 	bl	8003b50 <OutLedWu>


    buffer[0] = 0x20;
 80046b6:	2320      	movs	r3, #32
 80046b8:	753b      	strb	r3, [r7, #20]
    buffer[1] = 0x40;
 80046ba:	2340      	movs	r3, #64	; 0x40
 80046bc:	757b      	strb	r3, [r7, #21]
    buffer[2] = 0x60;
 80046be:	2360      	movs	r3, #96	; 0x60
 80046c0:	75bb      	strb	r3, [r7, #22]


  buffer[0] = buffer[0] + ((uint8_t)(red / 8));
 80046c2:	7d3a      	ldrb	r2, [r7, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	da00      	bge.n	80046cc <LedOn+0x3c>
 80046ca:	3307      	adds	r3, #7
 80046cc:	10db      	asrs	r3, r3, #3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	753b      	strb	r3, [r7, #20]
  buffer[1] = buffer[1] + ((uint8_t)(green / 8));
 80046d6:	7d7a      	ldrb	r2, [r7, #21]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da00      	bge.n	80046e0 <LedOn+0x50>
 80046de:	3307      	adds	r3, #7
 80046e0:	10db      	asrs	r3, r3, #3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	757b      	strb	r3, [r7, #21]
  buffer[2] = buffer[2] + ((uint8_t)(blue / 8));
 80046ea:	7dba      	ldrb	r2, [r7, #22]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	da00      	bge.n	80046f4 <LedOn+0x64>
 80046f2:	3307      	adds	r3, #7
 80046f4:	10db      	asrs	r3, r3, #3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	75bb      	strb	r3, [r7, #22]
		//HAL_Delay(1);
  HAL_I2C_Master_Transmit(&LED_I2C_PORT,0x9A , buffer, 3,10);
 80046fe:	f107 0214 	add.w	r2, r7, #20
 8004702:	230a      	movs	r3, #10
 8004704:	9300      	str	r3, [sp, #0]
 8004706:	2303      	movs	r3, #3
 8004708:	219a      	movs	r1, #154	; 0x9a
 800470a:	4805      	ldr	r0, [pc, #20]	; (8004720 <LedOn+0x90>)
 800470c:	f008 fc14 	bl	800cf38 <HAL_I2C_Master_Transmit>
		//HAL_Delay(1);
		TabGen[LOCK_I2C1] = 0; // I2C locked for interrupt on TIM7
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	33ec      	adds	r3, #236	; 0xec
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
	}
  //HAL_I2C_Master_Transmit(&hi2c1,0x47<<1,0x01,1,10);
 8004718:	bf00      	nop
 800471a:	3718      	adds	r7, #24
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	20001ddc 	.word	0x20001ddc

08004724 <PowerSave>:
#include "hes_powersave.h"


int PowerSave(void) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b082      	sub	sp, #8
 8004728:	af00      	add	r7, sp, #0

  int powerSave = 0 ; 
 800472a:	2300      	movs	r3, #0
 800472c:	607b      	str	r3, [r7, #4]
	
	 if (InOn() == 0)
 800472e:	f7ff fa59 	bl	8003be4 <InOn>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <PowerSave+0x2a>
	 {
		 OutDone1(1); //Start Powersave part 1
 8004738:	2001      	movs	r0, #1
 800473a:	f7ff f95b 	bl	80039f4 <OutDone1>
		 OutDone2(0); //Start Powersave part 2
 800473e:	2000      	movs	r0, #0
 8004740:	f7ff f970 	bl	8003a24 <OutDone2>
		 powerSave = 1;
 8004744:	2301      	movs	r3, #1
 8004746:	607b      	str	r3, [r7, #4]
		 HAL_Delay(100);
 8004748:	2064      	movs	r0, #100	; 0x64
 800474a:	f007 fabd 	bl	800bcc8 <HAL_Delay>
	}

  return powerSave ;
 800474e:	687b      	ldr	r3, [r7, #4]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3708      	adds	r7, #8
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <AskProperties>:

unsigned char Hard_conf[1] = "";
unsigned char Client[16] = "";

void AskProperties(uint8_t re_Hard_conf, unsigned char *re_Client)
{
 8004758:	b590      	push	{r4, r7, lr}
 800475a:	b08b      	sub	sp, #44	; 0x2c
 800475c:	af04      	add	r7, sp, #16
 800475e:	4603      	mov	r3, r0
 8004760:	6039      	str	r1, [r7, #0]
 8004762:	71fb      	strb	r3, [r7, #7]
	uint8_t commit = 0;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
	uint8_t new_Client = 0;
 8004768:	2300      	movs	r3, #0
 800476a:	75bb      	strb	r3, [r7, #22]
	unsigned char buffer_prop;

	//L'ecture du choix de l'imu et du nom client dans l'eeprom
	ee_read(256, sizeof(Hard_conf), Hard_conf);
 800476c:	4a3d      	ldr	r2, [pc, #244]	; (8004864 <AskProperties+0x10c>)
 800476e:	2101      	movs	r1, #1
 8004770:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004774:	f7fe fbaa 	bl	8002ecc <ee_read>
	ee_read(272, sizeof(Client), Client);
 8004778:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <AskProperties+0x110>)
 800477a:	2110      	movs	r1, #16
 800477c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8004780:	f7fe fba4 	bl	8002ecc <ee_read>

	//Test si le choix de l'IMU a changer
	if (re_Hard_conf != Hard_conf)
 8004784:	79fb      	ldrb	r3, [r7, #7]
 8004786:	461a      	mov	r2, r3
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <AskProperties+0x10c>)
 800478a:	429a      	cmp	r2, r3
 800478c:	d00a      	beq.n	80047a4 <AskProperties+0x4c>
	{
		Hard_conf[0] = re_Hard_conf;
 800478e:	4a35      	ldr	r2, [pc, #212]	; (8004864 <AskProperties+0x10c>)
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	7013      	strb	r3, [r2, #0]
		ee_writeToRam(256, sizeof(Hard_conf), Hard_conf);
 8004794:	4a33      	ldr	r2, [pc, #204]	; (8004864 <AskProperties+0x10c>)
 8004796:	2101      	movs	r1, #1
 8004798:	f44f 7080 	mov.w	r0, #256	; 0x100
 800479c:	f7fe fcb0 	bl	8003100 <ee_writeToRam>
		commit = 1;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
	}

	//Test si le nom du client a changer
	for (int l = 0; l <= 16; l++)
 80047a4:	2300      	movs	r3, #0
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	e010      	b.n	80047cc <AskProperties+0x74>
	{
		if (re_Client[l] != Client[l])
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	4413      	add	r3, r2
 80047b0:	781a      	ldrb	r2, [r3, #0]
 80047b2:	492d      	ldr	r1, [pc, #180]	; (8004868 <AskProperties+0x110>)
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	440b      	add	r3, r1
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d003      	beq.n	80047c6 <AskProperties+0x6e>
		{
			new_Client = 1;
 80047be:	2301      	movs	r3, #1
 80047c0:	75bb      	strb	r3, [r7, #22]
			l = 16;
 80047c2:	2310      	movs	r3, #16
 80047c4:	613b      	str	r3, [r7, #16]
	for (int l = 0; l <= 16; l++)
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	3301      	adds	r3, #1
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	2b10      	cmp	r3, #16
 80047d0:	ddeb      	ble.n	80047aa <AskProperties+0x52>
		}
	}
	if (new_Client == 1)
 80047d2:	7dbb      	ldrb	r3, [r7, #22]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d119      	bne.n	800480c <AskProperties+0xb4>
	{
		for (int j = 0; j <= 16; j++)
 80047d8:	2300      	movs	r3, #0
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e00b      	b.n	80047f6 <AskProperties+0x9e>
		{
			Client[j] = re_Client[j];
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4413      	add	r3, r2
 80047e4:	7819      	ldrb	r1, [r3, #0]
 80047e6:	4a20      	ldr	r2, [pc, #128]	; (8004868 <AskProperties+0x110>)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4413      	add	r3, r2
 80047ec:	460a      	mov	r2, r1
 80047ee:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j <= 16; j++)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	3301      	adds	r3, #1
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b10      	cmp	r3, #16
 80047fa:	ddf0      	ble.n	80047de <AskProperties+0x86>
		}
		ee_writeToRam(272, sizeof(Client), Client);
 80047fc:	4a1a      	ldr	r2, [pc, #104]	; (8004868 <AskProperties+0x110>)
 80047fe:	2110      	movs	r1, #16
 8004800:	f44f 7088 	mov.w	r0, #272	; 0x110
 8004804:	f7fe fc7c 	bl	8003100 <ee_writeToRam>
		commit = 1;
 8004808:	2301      	movs	r3, #1
 800480a:	75fb      	strb	r3, [r7, #23]
	}

	//Ecriture dans l'eeprom si il y a des changements
	if (commit == 1)
 800480c:	7dfb      	ldrb	r3, [r7, #23]
 800480e:	2b01      	cmp	r3, #1
 8004810:	d106      	bne.n	8004820 <AskProperties+0xc8>
	{
		ee_commit();
 8004812:	f7fe fc97 	bl	8003144 <ee_commit>
		vibration_LBL(2, 200, 200);
 8004816:	22c8      	movs	r2, #200	; 0xc8
 8004818:	21c8      	movs	r1, #200	; 0xc8
 800481a:	2002      	movs	r0, #2
 800481c:	f006 fc9e 	bl	800b15c <vibration_LBL>
	}
	sprintf(buffer_prop, "INFO,%s,%d,%d,%s,%s,%s", ID_Sigfox, TabGen[VBAT_mV],
 8004820:	7afb      	ldrb	r3, [r7, #11]
 8004822:	4618      	mov	r0, r3
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <AskProperties+0x114>)
 8004826:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <AskProperties+0x114>)
 800482c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004830:	490d      	ldr	r1, [pc, #52]	; (8004868 <AskProperties+0x110>)
 8004832:	9103      	str	r1, [sp, #12]
 8004834:	490e      	ldr	r1, [pc, #56]	; (8004870 <AskProperties+0x118>)
 8004836:	9102      	str	r1, [sp, #8]
 8004838:	490a      	ldr	r1, [pc, #40]	; (8004864 <AskProperties+0x10c>)
 800483a:	9101      	str	r1, [sp, #4]
 800483c:	9300      	str	r3, [sp, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	4a0c      	ldr	r2, [pc, #48]	; (8004874 <AskProperties+0x11c>)
 8004842:	490d      	ldr	r1, [pc, #52]	; (8004878 <AskProperties+0x120>)
 8004844:	f014 f908 	bl	8018a58 <siprintf>
			TabGen[BAT_VALUE], Hard_conf, Code_name, Client);
	CDC_Transmit_FS(buffer_prop, strlen(buffer_prop));
 8004848:	7afc      	ldrb	r4, [r7, #11]
 800484a:	7afb      	ldrb	r3, [r7, #11]
 800484c:	4618      	mov	r0, r3
 800484e:	f7fb fcbf 	bl	80001d0 <strlen>
 8004852:	4603      	mov	r3, r0
 8004854:	4619      	mov	r1, r3
 8004856:	4620      	mov	r0, r4
 8004858:	f7fc ff5c 	bl	8001714 <CDC_Transmit_FS>
}
 800485c:	bf00      	nop
 800485e:	371c      	adds	r7, #28
 8004860:	46bd      	mov	sp, r7
 8004862:	bd90      	pop	{r4, r7, pc}
 8004864:	20000b5c 	.word	0x20000b5c
 8004868:	20000b60 	.word	0x20000b60
 800486c:	20002584 	.word	0x20002584
 8004870:	200007ac 	.word	0x200007ac
 8004874:	200007f4 	.word	0x200007f4
 8004878:	0801b998 	.word	0x0801b998

0800487c <LoadProperties>:

void LoadProperties(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
	uint8_t default_name;
	uint8_t commit2 = 0;
 8004882:	2300      	movs	r3, #0
 8004884:	71bb      	strb	r3, [r7, #6]
	ee_read(256, sizeof(Hard_conf), Hard_conf);
 8004886:	4a2b      	ldr	r2, [pc, #172]	; (8004934 <LoadProperties+0xb8>)
 8004888:	2101      	movs	r1, #1
 800488a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800488e:	f7fe fb1d 	bl	8002ecc <ee_read>
	ee_read(272, sizeof(Client), Client);
 8004892:	4a29      	ldr	r2, [pc, #164]	; (8004938 <LoadProperties+0xbc>)
 8004894:	2110      	movs	r1, #16
 8004896:	f44f 7088 	mov.w	r0, #272	; 0x110
 800489a:	f7fe fb17 	bl	8002ecc <ee_read>
	if ((Hard_conf[0] != '1') && (Hard_conf[0] != '2') && (Hard_conf[0] != '3'))
 800489e:	4b25      	ldr	r3, [pc, #148]	; (8004934 <LoadProperties+0xb8>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b31      	cmp	r3, #49	; 0x31
 80048a4:	d012      	beq.n	80048cc <LoadProperties+0x50>
 80048a6:	4b23      	ldr	r3, [pc, #140]	; (8004934 <LoadProperties+0xb8>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b32      	cmp	r3, #50	; 0x32
 80048ac:	d00e      	beq.n	80048cc <LoadProperties+0x50>
 80048ae:	4b21      	ldr	r3, [pc, #132]	; (8004934 <LoadProperties+0xb8>)
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b33      	cmp	r3, #51	; 0x33
 80048b4:	d00a      	beq.n	80048cc <LoadProperties+0x50>
	{
		Hard_conf[0] = '2'; // MC3413 par défaut
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <LoadProperties+0xb8>)
 80048b8:	2232      	movs	r2, #50	; 0x32
 80048ba:	701a      	strb	r2, [r3, #0]
		ee_writeToRam(256, sizeof(Hard_conf), Hard_conf);
 80048bc:	4a1d      	ldr	r2, [pc, #116]	; (8004934 <LoadProperties+0xb8>)
 80048be:	2101      	movs	r1, #1
 80048c0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80048c4:	f7fe fc1c 	bl	8003100 <ee_writeToRam>
		commit2 = 1;
 80048c8:	2301      	movs	r3, #1
 80048ca:	71bb      	strb	r3, [r7, #6]
	}
	for (int i = 0; i <= strlen(Client); i++)
 80048cc:	2300      	movs	r3, #0
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	e00b      	b.n	80048ea <LoadProperties+0x6e>
	{
		if (Client[i] == 255)
 80048d2:	4a19      	ldr	r2, [pc, #100]	; (8004938 <LoadProperties+0xbc>)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	4413      	add	r3, r2
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2bff      	cmp	r3, #255	; 0xff
 80048dc:	d102      	bne.n	80048e4 <LoadProperties+0x68>
		{
			default_name++;
 80048de:	79fb      	ldrb	r3, [r7, #7]
 80048e0:	3301      	adds	r3, #1
 80048e2:	71fb      	strb	r3, [r7, #7]
	for (int i = 0; i <= strlen(Client); i++)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	603b      	str	r3, [r7, #0]
 80048ea:	4813      	ldr	r0, [pc, #76]	; (8004938 <LoadProperties+0xbc>)
 80048ec:	f7fb fc70 	bl	80001d0 <strlen>
 80048f0:	4602      	mov	r2, r0
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d2ec      	bcs.n	80048d2 <LoadProperties+0x56>
		}
	}
	if(default_name > 0){
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00b      	beq.n	8004916 <LoadProperties+0x9a>
		sprintf(Client,"Hestiam");
 80048fe:	490f      	ldr	r1, [pc, #60]	; (800493c <LoadProperties+0xc0>)
 8004900:	480d      	ldr	r0, [pc, #52]	; (8004938 <LoadProperties+0xbc>)
 8004902:	f014 f8a9 	bl	8018a58 <siprintf>
		ee_writeToRam(272, sizeof(Client), Client);
 8004906:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <LoadProperties+0xbc>)
 8004908:	2110      	movs	r1, #16
 800490a:	f44f 7088 	mov.w	r0, #272	; 0x110
 800490e:	f7fe fbf7 	bl	8003100 <ee_writeToRam>
		commit2 = 1;
 8004912:	2301      	movs	r3, #1
 8004914:	71bb      	strb	r3, [r7, #6]
	}
	if(commit2 != 0){
 8004916:	79bb      	ldrb	r3, [r7, #6]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d007      	beq.n	800492c <LoadProperties+0xb0>
		ee_commit();
 800491c:	f7fe fc12 	bl	8003144 <ee_commit>
		vibration_LBL(1, 0, 500);
 8004920:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004924:	2100      	movs	r1, #0
 8004926:	2001      	movs	r0, #1
 8004928:	f006 fc18 	bl	800b15c <vibration_LBL>
	}
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000b5c 	.word	0x20000b5c
 8004938:	20000b60 	.word	0x20000b60
 800493c:	0801b9b0 	.word	0x0801b9b0

08004940 <ScreenOn>:
  OutOledRst(1);
	HAL_Delay(1);
}


void ScreenOn() {
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(0);
	else
	{
		OutOledWu(1);
 8004944:	2001      	movs	r0, #1
 8004946:	f7ff f8b9 	bl	8003abc <OutOledWu>
		OutOledRst(1);
 800494a:	2001      	movs	r0, #1
 800494c:	f7ff f930 	bl	8003bb0 <OutOledRst>
		OutOledWu(0);
 8004950:	2000      	movs	r0, #0
 8004952:	f7ff f8b3 	bl	8003abc <OutOledWu>
		HAL_Delay(1);
 8004956:	2001      	movs	r0, #1
 8004958:	f007 f9b6 	bl	800bcc8 <HAL_Delay>
		OutOledRst(1);
 800495c:	2001      	movs	r0, #1
 800495e:	f7ff f927 	bl	8003bb0 <OutOledRst>
		HAL_Delay(1);
 8004962:	2001      	movs	r0, #1
 8004964:	f007 f9b0 	bl	800bcc8 <HAL_Delay>
	}
}
 8004968:	bf00      	nop
 800496a:	bd80      	pop	{r7, pc}

0800496c <ScreenOff>:

void ScreenOff() {
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
	if(BOX4GAZ)
		OutOledWu(1);
	else
	{
	  OutOledWu(1);
 8004970:	2001      	movs	r0, #1
 8004972:	f7ff f8a3 	bl	8003abc <OutOledWu>
		OutOledRst(0);
 8004976:	2000      	movs	r0, #0
 8004978:	f7ff f91a 	bl	8003bb0 <OutOledRst>
	}
}
 800497c:	bf00      	nop
 800497e:	bd80      	pop	{r7, pc}

08004980 <InitTaskState>:
#include "hes_sequencer.h"

void InitTaskState(uint32_t Tab[], uint32_t nbDelay) {
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]

  Tab[0] = 1; // On / Off
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  Tab[1] = nbDelay; // NbDelay
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	3304      	adds	r3, #4
 8004994:	683a      	ldr	r2, [r7, #0]
 8004996:	601a      	str	r2, [r3, #0]
  Tab[2] = 1; // currentState
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	3308      	adds	r3, #8
 800499c:	2201      	movs	r2, #1
 800499e:	601a      	str	r2, [r3, #0]
  Tab[3] = 0; // previousState
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	330c      	adds	r3, #12
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
  Tab[4] = 0; // currentDelay
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3310      	adds	r3, #16
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <TaskState>:

int TaskState(uint32_t Tab[]) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  // currentState  <= Tab[2]; // init : 1
  // previousState <= Tab[3]; // init : 0
  // delayGo       <= Tab[4]; // init : 0

  uint32_t millis;
  int state = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  if (Tab[0] == 1) 
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d13e      	bne.n	8004a4e <TaskState+0x92>
	{ // if doOn
    millis = HAL_GetTick();
 80049d0:	f007 f96e 	bl	800bcb0 <HAL_GetTick>
 80049d4:	60b8      	str	r0, [r7, #8]
    if (Tab[2] == Tab[3]) 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3308      	adds	r3, #8
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	330c      	adds	r3, #12
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d12a      	bne.n	8004a3c <TaskState+0x80>
		{                                 // if (previousState == currentState)
      if ((millis - Tab[4]) >= Tab[((size_t)(Tab[2] + 4))]) //  if ( (millis - delayGo) >= Tab[currentState + 4] )
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3310      	adds	r3, #16
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	1ad2      	subs	r2, r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	3308      	adds	r3, #8
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3304      	adds	r3, #4
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	440b      	add	r3, r1
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d324      	bcc.n	8004a4e <TaskState+0x92>
      {
        state = Tab[2];      // state = currentState
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	3308      	adds	r3, #8
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
        Tab[2] = Tab[2] + 1; // currentState = currentState + 1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	3308      	adds	r3, #8
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3308      	adds	r3, #8
 8004a16:	3201      	adds	r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
        if (Tab[2] > Tab[1]) // if (currentState > nbDelay )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3308      	adds	r3, #8
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d911      	bls.n	8004a4e <TaskState+0x92>
        {
          Tab[2] = 1; // currentState  = 1 ;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
          Tab[3] = 0; // previousState = 0 ;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	330c      	adds	r3, #12
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
 8004a3a:	e008      	b.n	8004a4e <TaskState+0x92>
        }
      }
    } 
		else 
		{
      Tab[4] = millis; // delayGo  <= millis
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3310      	adds	r3, #16
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	601a      	str	r2, [r3, #0]
      Tab[3] = Tab[2]; // previousState <= currentState
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	330c      	adds	r3, #12
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6892      	ldr	r2, [r2, #8]
 8004a4c:	601a      	str	r2, [r3, #0]
    }
  }
  return state;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <WakeUpNemeusLS>:
//##############################################################
// Nemeus module 
//##############################################################

void WakeUpNemeusLS(void) 
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0
	OutLoraWu(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f7ff f847 	bl	8003af0 <OutLoraWu>
	HAL_Delay(3);
 8004a62:	2003      	movs	r0, #3
 8004a64:	f007 f930 	bl	800bcc8 <HAL_Delay>
	OutLoraWu(0);
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7ff f841 	bl	8003af0 <OutLoraWu>
}
 8004a6e:	bf00      	nop
 8004a70:	bd80      	pop	{r7, pc}
	...

08004a74 <RebootNemeusLS>:

extern uint8_t DUAL_STATE_LS;

void RebootNemeusLS(int TabGen[]) 
{
 8004a74:	b590      	push	{r4, r7, lr}
 8004a76:	b0a1      	sub	sp, #132	; 0x84
 8004a78:	af1e      	add	r7, sp, #120	; 0x78
 8004a7a:	6078      	str	r0, [r7, #4]
		//SendMess("\n", NEMEUS_UART_PORT);
		SendMess("AT+GA=DIND,1,8401\n", NEMEUS_UART_PORT);
 8004a7c:	4c0a      	ldr	r4, [pc, #40]	; (8004aa8 <RebootNemeusLS+0x34>)
 8004a7e:	4668      	mov	r0, sp
 8004a80:	f104 030c 	add.w	r3, r4, #12
 8004a84:	2278      	movs	r2, #120	; 0x78
 8004a86:	4619      	mov	r1, r3
 8004a88:	f013 faf8 	bl	801807c <memcpy>
 8004a8c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004a90:	4806      	ldr	r0, [pc, #24]	; (8004aac <RebootNemeusLS+0x38>)
 8004a92:	f000 fd9b 	bl	80055cc <SendMess>
		//SendMess("AT+SF=?\n");
		//SendMess("AT+MAC=RDEVUID\n"); // DevEui
		//SendMess("AT+MAC=RAPPUID\n"); //AppEui
		//SendMess("AT+MAC=RAPPKEY\n", NEMEUS_UART_PORT); //AppKey
		HAL_Delay(2000);
 8004a96:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a9a:	f007 f915 	bl	800bcc8 <HAL_Delay>


}
 8004a9e:	bf00      	nop
 8004aa0:	370c      	adds	r7, #12
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd90      	pop	{r4, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20003534 	.word	0x20003534
 8004aac:	0801b9b8 	.word	0x0801b9b8

08004ab0 <TurnOffAllLayers>:

void TurnOffAllLayers(void)
{
 8004ab0:	b590      	push	{r4, r7, lr}
 8004ab2:	b09f      	sub	sp, #124	; 0x7c
 8004ab4:	af1e      	add	r7, sp, #120	; 0x78
	SendMess("AT+RFTX=?\n", NEMEUS_UART_PORT); // Lora reception stop
 8004ab6:	4c2a      	ldr	r4, [pc, #168]	; (8004b60 <TurnOffAllLayers+0xb0>)
 8004ab8:	4668      	mov	r0, sp
 8004aba:	f104 030c 	add.w	r3, r4, #12
 8004abe:	2278      	movs	r2, #120	; 0x78
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	f013 fadb 	bl	801807c <memcpy>
 8004ac6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004aca:	4826      	ldr	r0, [pc, #152]	; (8004b64 <TurnOffAllLayers+0xb4>)
 8004acc:	f000 fd7e 	bl	80055cc <SendMess>
	HAL_Delay(100);
 8004ad0:	2064      	movs	r0, #100	; 0x64
 8004ad2:	f007 f8f9 	bl	800bcc8 <HAL_Delay>
	SendMess("AT+RFRX=STOP\n", NEMEUS_UART_PORT); // Lora reception stop
 8004ad6:	4c22      	ldr	r4, [pc, #136]	; (8004b60 <TurnOffAllLayers+0xb0>)
 8004ad8:	4668      	mov	r0, sp
 8004ada:	f104 030c 	add.w	r3, r4, #12
 8004ade:	2278      	movs	r2, #120	; 0x78
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	f013 facb 	bl	801807c <memcpy>
 8004ae6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004aea:	481f      	ldr	r0, [pc, #124]	; (8004b68 <TurnOffAllLayers+0xb8>)
 8004aec:	f000 fd6e 	bl	80055cc <SendMess>
	HAL_Delay(100);
 8004af0:	2064      	movs	r0, #100	; 0x64
 8004af2:	f007 f8e9 	bl	800bcc8 <HAL_Delay>
	SendMess("AT+SF=OFF\n", NEMEUS_UART_PORT); // Sigfox stop
 8004af6:	4c1a      	ldr	r4, [pc, #104]	; (8004b60 <TurnOffAllLayers+0xb0>)
 8004af8:	4668      	mov	r0, sp
 8004afa:	f104 030c 	add.w	r3, r4, #12
 8004afe:	2278      	movs	r2, #120	; 0x78
 8004b00:	4619      	mov	r1, r3
 8004b02:	f013 fabb 	bl	801807c <memcpy>
 8004b06:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b0a:	4818      	ldr	r0, [pc, #96]	; (8004b6c <TurnOffAllLayers+0xbc>)
 8004b0c:	f000 fd5e 	bl	80055cc <SendMess>
	HAL_Delay(100);
 8004b10:	2064      	movs	r0, #100	; 0x64
 8004b12:	f007 f8d9 	bl	800bcc8 <HAL_Delay>
	SendMess("AT+MAC=OFF\n", NEMEUS_UART_PORT); // LoraWan layer off
 8004b16:	4c12      	ldr	r4, [pc, #72]	; (8004b60 <TurnOffAllLayers+0xb0>)
 8004b18:	4668      	mov	r0, sp
 8004b1a:	f104 030c 	add.w	r3, r4, #12
 8004b1e:	2278      	movs	r2, #120	; 0x78
 8004b20:	4619      	mov	r1, r3
 8004b22:	f013 faab 	bl	801807c <memcpy>
 8004b26:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b2a:	4811      	ldr	r0, [pc, #68]	; (8004b70 <TurnOffAllLayers+0xc0>)
 8004b2c:	f000 fd4e 	bl	80055cc <SendMess>
	HAL_Delay(100);
 8004b30:	2064      	movs	r0, #100	; 0x64
 8004b32:	f007 f8c9 	bl	800bcc8 <HAL_Delay>
	SendMess("AT+RF=OFF\n", NEMEUS_UART_PORT); // Radio layer off
 8004b36:	4c0a      	ldr	r4, [pc, #40]	; (8004b60 <TurnOffAllLayers+0xb0>)
 8004b38:	4668      	mov	r0, sp
 8004b3a:	f104 030c 	add.w	r3, r4, #12
 8004b3e:	2278      	movs	r2, #120	; 0x78
 8004b40:	4619      	mov	r1, r3
 8004b42:	f013 fa9b 	bl	801807c <memcpy>
 8004b46:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b4a:	480a      	ldr	r0, [pc, #40]	; (8004b74 <TurnOffAllLayers+0xc4>)
 8004b4c:	f000 fd3e 	bl	80055cc <SendMess>
	HAL_Delay(100);
 8004b50:	2064      	movs	r0, #100	; 0x64
 8004b52:	f007 f8b9 	bl	800bcc8 <HAL_Delay>
}
 8004b56:	bf00      	nop
 8004b58:	3704      	adds	r7, #4
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd90      	pop	{r4, r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	20003534 	.word	0x20003534
 8004b64:	0801b9cc 	.word	0x0801b9cc
 8004b68:	0801b9d8 	.word	0x0801b9d8
 8004b6c:	0801b9e8 	.word	0x0801b9e8
 8004b70:	0801b9f4 	.word	0x0801b9f4
 8004b74:	0801ba00 	.word	0x0801ba00

08004b78 <LoraWanOn>:
// LoraWan, to Objenious or similar
//##############################################################

// Activate the LoraWan layer
void LoraWanOn(void)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b09f      	sub	sp, #124	; 0x7c
 8004b7c:	af1e      	add	r7, sp, #120	; 0x78
	if(c1.com_LoRa == 1)
 8004b7e:	4b12      	ldr	r3, [pc, #72]	; (8004bc8 <LoraWanOn+0x50>)
 8004b80:	7a1b      	ldrb	r3, [r3, #8]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d11c      	bne.n	8004bc0 <LoraWanOn+0x48>
	{
		//TurnOffAllLayers();
		SendMess("AT+MAC=SDR,SF12BW125,10,001F,0,0\n", NEMEUS_UART_PORT);  // active lorawan
 8004b86:	4c11      	ldr	r4, [pc, #68]	; (8004bcc <LoraWanOn+0x54>)
 8004b88:	4668      	mov	r0, sp
 8004b8a:	f104 030c 	add.w	r3, r4, #12
 8004b8e:	2278      	movs	r2, #120	; 0x78
 8004b90:	4619      	mov	r1, r3
 8004b92:	f013 fa73 	bl	801807c <memcpy>
 8004b96:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004b9a:	480d      	ldr	r0, [pc, #52]	; (8004bd0 <LoraWanOn+0x58>)
 8004b9c:	f000 fd16 	bl	80055cc <SendMess>
		HAL_Delay(200);
 8004ba0:	20c8      	movs	r0, #200	; 0xc8
 8004ba2:	f007 f891 	bl	800bcc8 <HAL_Delay>
		SendMess("AT+MAC=ON,3,A,1\n", NEMEUS_UART_PORT);  // active lorawan
 8004ba6:	4c09      	ldr	r4, [pc, #36]	; (8004bcc <LoraWanOn+0x54>)
 8004ba8:	4668      	mov	r0, sp
 8004baa:	f104 030c 	add.w	r3, r4, #12
 8004bae:	2278      	movs	r2, #120	; 0x78
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f013 fa63 	bl	801807c <memcpy>
 8004bb6:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004bba:	4806      	ldr	r0, [pc, #24]	; (8004bd4 <LoraWanOn+0x5c>)
 8004bbc:	f000 fd06 	bl	80055cc <SendMess>

	}
}
 8004bc0:	bf00      	nop
 8004bc2:	3704      	adds	r7, #4
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd90      	pop	{r4, r7, pc}
 8004bc8:	20001158 	.word	0x20001158
 8004bcc:	20003534 	.word	0x20003534
 8004bd0:	0801ba24 	.word	0x0801ba24
 8004bd4:	0801ba48 	.word	0x0801ba48

08004bd8 <SendOnLora>:
	}
}

// Send a message when you finally joined LoraWan network
void SendOnLora(void)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b09f      	sub	sp, #124	; 0x7c
 8004bdc:	af1e      	add	r7, sp, #120	; 0x78
	if(c1.com_LoRa == 1)
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <SendOnLora+0x38>)
 8004be0:	7a1b      	ldrb	r3, [r3, #8]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d110      	bne.n	8004c08 <SendOnLora+0x30>
	{
		HAL_Delay(1000);
 8004be6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004bea:	f007 f86d 	bl	800bcc8 <HAL_Delay>
		SendMess("AT+MAC=SNDBIN,000000000000,6,2,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
 8004bee:	4c09      	ldr	r4, [pc, #36]	; (8004c14 <SendOnLora+0x3c>)
 8004bf0:	4668      	mov	r0, sp
 8004bf2:	f104 030c 	add.w	r3, r4, #12
 8004bf6:	2278      	movs	r2, #120	; 0x78
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f013 fa3f 	bl	801807c <memcpy>
 8004bfe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004c02:	4805      	ldr	r0, [pc, #20]	; (8004c18 <SendOnLora+0x40>)
 8004c04:	f000 fce2 	bl	80055cc <SendMess>
	}
}
 8004c08:	bf00      	nop
 8004c0a:	3704      	adds	r7, #4
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd90      	pop	{r4, r7, pc}
 8004c10:	20001158 	.word	0x20001158
 8004c14:	20003534 	.word	0x20003534
 8004c18:	0801ba70 	.word	0x0801ba70

08004c1c <SendMessLoraWan>:

// Send a string of hexa using LoraWan, to objenious
void SendMessLoraWan(char buffer_lorawan[])
{
 8004c1c:	b5b0      	push	{r4, r5, r7, lr}
 8004c1e:	b0aa      	sub	sp, #168	; 0xa8
 8004c20:	af1e      	add	r7, sp, #120	; 0x78
 8004c22:	6078      	str	r0, [r7, #4]
	if(c1.com_LoRa == 1)
 8004c24:	4b10      	ldr	r3, [pc, #64]	; (8004c68 <SendMessLoraWan+0x4c>)
 8004c26:	7a1b      	ldrb	r3, [r3, #8]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d119      	bne.n	8004c60 <SendMessLoraWan+0x44>
	{
		char buffer_all[40];
		sprintf(buffer_all,"AT+MAC=SNDBIN,%s,3,2,0\n", buffer_lorawan);  // %s,buffersig
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	490e      	ldr	r1, [pc, #56]	; (8004c6c <SendMessLoraWan+0x50>)
 8004c34:	4618      	mov	r0, r3
 8004c36:	f013 ff0f 	bl	8018a58 <siprintf>
		SendMess(buffer_all, NEMEUS_UART_PORT);
 8004c3a:	4c0d      	ldr	r4, [pc, #52]	; (8004c70 <SendMessLoraWan+0x54>)
 8004c3c:	f107 0508 	add.w	r5, r7, #8
 8004c40:	4668      	mov	r0, sp
 8004c42:	f104 030c 	add.w	r3, r4, #12
 8004c46:	2278      	movs	r2, #120	; 0x78
 8004c48:	4619      	mov	r1, r3
 8004c4a:	f013 fa17 	bl	801807c <memcpy>
 8004c4e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004c52:	4628      	mov	r0, r5
 8004c54:	f000 fcba 	bl	80055cc <SendMess>
		HAL_Delay(1000);
 8004c58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004c5c:	f007 f834 	bl	800bcc8 <HAL_Delay>

	}
}
 8004c60:	bf00      	nop
 8004c62:	3730      	adds	r7, #48	; 0x30
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bdb0      	pop	{r4, r5, r7, pc}
 8004c68:	20001158 	.word	0x20001158
 8004c6c:	0801ba94 	.word	0x0801ba94
 8004c70:	20003534 	.word	0x20003534

08004c74 <SendIdAskSF>:
// Sigfox, to backend.sigfox (no private network possible)
//##############################################################

// Ask Nemeus module the current state of the Sigfox layer
void SendIdAskSF(void)
{
 8004c74:	b590      	push	{r4, r7, lr}
 8004c76:	b09f      	sub	sp, #124	; 0x7c
 8004c78:	af1e      	add	r7, sp, #120	; 0x78
		if (c1.com_sigfox == 1)
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <SendIdAskSF+0x30>)
 8004c7c:	79db      	ldrb	r3, [r3, #7]
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d10c      	bne.n	8004c9c <SendIdAskSF+0x28>
	{
		SendMess("AT+SF=?\n", NEMEUS_UART_PORT);
 8004c82:	4c09      	ldr	r4, [pc, #36]	; (8004ca8 <SendIdAskSF+0x34>)
 8004c84:	4668      	mov	r0, sp
 8004c86:	f104 030c 	add.w	r3, r4, #12
 8004c8a:	2278      	movs	r2, #120	; 0x78
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f013 f9f5 	bl	801807c <memcpy>
 8004c92:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004c96:	4805      	ldr	r0, [pc, #20]	; (8004cac <SendIdAskSF+0x38>)
 8004c98:	f000 fc98 	bl	80055cc <SendMess>
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	3704      	adds	r7, #4
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd90      	pop	{r4, r7, pc}
 8004ca4:	20001158 	.word	0x20001158
 8004ca8:	20003534 	.word	0x20003534
 8004cac:	0801baac 	.word	0x0801baac

08004cb0 <SigfoxOn>:

// Turn on Sigfox layer
void SigfoxOn(void)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b09f      	sub	sp, #124	; 0x7c
 8004cb4:	af1e      	add	r7, sp, #120	; 0x78
	if (c1.com_sigfox == 1)
 8004cb6:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <SigfoxOn+0x38>)
 8004cb8:	79db      	ldrb	r3, [r3, #7]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d110      	bne.n	8004ce0 <SigfoxOn+0x30>
	{
		//SendMess("AT+GA= DIND,1,880201\n", NEMEUS_UART_PORT);

		SendMess("AT+SF=ON\n", NEMEUS_UART_PORT);
 8004cbe:	4c0b      	ldr	r4, [pc, #44]	; (8004cec <SigfoxOn+0x3c>)
 8004cc0:	4668      	mov	r0, sp
 8004cc2:	f104 030c 	add.w	r3, r4, #12
 8004cc6:	2278      	movs	r2, #120	; 0x78
 8004cc8:	4619      	mov	r1, r3
 8004cca:	f013 f9d7 	bl	801807c <memcpy>
 8004cce:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004cd2:	4807      	ldr	r0, [pc, #28]	; (8004cf0 <SigfoxOn+0x40>)
 8004cd4:	f000 fc7a 	bl	80055cc <SendMess>
		HAL_Delay(1000);
 8004cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cdc:	f006 fff4 	bl	800bcc8 <HAL_Delay>
	}
}
 8004ce0:	bf00      	nop
 8004ce2:	3704      	adds	r7, #4
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd90      	pop	{r4, r7, pc}
 8004ce8:	20001158 	.word	0x20001158
 8004cec:	20003534 	.word	0x20003534
 8004cf0:	0801bab8 	.word	0x0801bab8

08004cf4 <SendMessSigfox>:

// Send a string of hexa using Sigfox
void SendMessSigfox(char buffer_sig[], int TabGen[]) 
{
 8004cf4:	b5b0      	push	{r4, r5, r7, lr}
 8004cf6:	b0ae      	sub	sp, #184	; 0xb8
 8004cf8:	af1e      	add	r7, sp, #120	; 0x78
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
	if (c1.com_sigfox == 1)
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <SendMessSigfox+0x60>)
 8004d00:	79db      	ldrb	r3, [r3, #7]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d122      	bne.n	8004d4c <SendMessSigfox+0x58>
	{
		char buffer_all[50];

		if (strlen(buffer_sig) < 10)
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f7fb fa62 	bl	80001d0 <strlen>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	d806      	bhi.n	8004d20 <SendMessSigfox+0x2c>
			sprintf(buffer_all,"AT+SF=SNDBIN,100000000000,0\n"); // ERROR // should wait 5s before using nemeus module
 8004d12:	f107 030c 	add.w	r3, r7, #12
 8004d16:	4910      	ldr	r1, [pc, #64]	; (8004d58 <SendMessSigfox+0x64>)
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f013 fe9d 	bl	8018a58 <siprintf>
 8004d1e:	e006      	b.n	8004d2e <SendMessSigfox+0x3a>
		else
			sprintf(buffer_all,"AT+SF=SNDBIN,%s,0\n", buffer_sig); // ERROR // should wait 5s before using nemeus module
 8004d20:	f107 030c 	add.w	r3, r7, #12
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	490d      	ldr	r1, [pc, #52]	; (8004d5c <SendMessSigfox+0x68>)
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f013 fe95 	bl	8018a58 <siprintf>
		
		SendMess(buffer_all, NEMEUS_UART_PORT);		//AT+SF=SNDB / IN,1050d4f / 7499298001 / 100,0\n"
 8004d2e:	4c0c      	ldr	r4, [pc, #48]	; (8004d60 <SendMessSigfox+0x6c>)
 8004d30:	f107 050c 	add.w	r5, r7, #12
 8004d34:	4668      	mov	r0, sp
 8004d36:	f104 030c 	add.w	r3, r4, #12
 8004d3a:	2278      	movs	r2, #120	; 0x78
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	f013 f99d 	bl	801807c <memcpy>
 8004d42:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fc40 	bl	80055cc <SendMess>
	}
}
 8004d4c:	bf00      	nop
 8004d4e:	3740      	adds	r7, #64	; 0x40
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bdb0      	pop	{r4, r5, r7, pc}
 8004d54:	20001158 	.word	0x20001158
 8004d58:	0801bac4 	.word	0x0801bac4
 8004d5c:	0801bae4 	.word	0x0801bae4
 8004d60:	20003534 	.word	0x20003534

08004d64 <SendOnMessSigfox>:

//Message sent at startup
void SendOnMessSigfox(uint8_t b_downlink)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b0a1      	sub	sp, #132	; 0x84
 8004d68:	af1e      	add	r7, sp, #120	; 0x78
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
	if (c1.com_sigfox == 1)
 8004d6e:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <SendOnMessSigfox+0x60>)
 8004d70:	79db      	ldrb	r3, [r3, #7]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d121      	bne.n	8004dba <SendOnMessSigfox+0x56>
	{	
		HAL_Delay(500);
 8004d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004d7a:	f006 ffa5 	bl	800bcc8 <HAL_Delay>
		if (b_downlink == 1)
 8004d7e:	79fb      	ldrb	r3, [r7, #7]
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10d      	bne.n	8004da0 <SendOnMessSigfox+0x3c>
			SendMess("AT+SF=SNDBIN,000000000000,1\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
 8004d84:	4c10      	ldr	r4, [pc, #64]	; (8004dc8 <SendOnMessSigfox+0x64>)
 8004d86:	4668      	mov	r0, sp
 8004d88:	f104 030c 	add.w	r3, r4, #12
 8004d8c:	2278      	movs	r2, #120	; 0x78
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f013 f974 	bl	801807c <memcpy>
 8004d94:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004d98:	480c      	ldr	r0, [pc, #48]	; (8004dcc <SendOnMessSigfox+0x68>)
 8004d9a:	f000 fc17 	bl	80055cc <SendMess>
		else
			SendMess("AT+SF=SNDBIN,FFFFFFFFFFFF,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
	}
}
 8004d9e:	e00c      	b.n	8004dba <SendOnMessSigfox+0x56>
			SendMess("AT+SF=SNDBIN,FFFFFFFFFFFF,0\n", NEMEUS_UART_PORT); // should wait 5s before using nemeus module
 8004da0:	4c09      	ldr	r4, [pc, #36]	; (8004dc8 <SendOnMessSigfox+0x64>)
 8004da2:	4668      	mov	r0, sp
 8004da4:	f104 030c 	add.w	r3, r4, #12
 8004da8:	2278      	movs	r2, #120	; 0x78
 8004daa:	4619      	mov	r1, r3
 8004dac:	f013 f966 	bl	801807c <memcpy>
 8004db0:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004db4:	4806      	ldr	r0, [pc, #24]	; (8004dd0 <SendOnMessSigfox+0x6c>)
 8004db6:	f000 fc09 	bl	80055cc <SendMess>
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20001158 	.word	0x20001158
 8004dc8:	20003534 	.word	0x20003534
 8004dcc:	0801baf8 	.word	0x0801baf8
 8004dd0:	0801bb18 	.word	0x0801bb18

08004dd4 <SendTestLora>:
// LORA P2P (point to point), private Lora network
//##############################################################

//
void SendTestLora(void)
{
 8004dd4:	b590      	push	{r4, r7, lr}
 8004dd6:	b09f      	sub	sp, #124	; 0x7c
 8004dd8:	af1e      	add	r7, sp, #120	; 0x78
	if(c1.loraP2P == 1)
 8004dda:	4b17      	ldr	r3, [pc, #92]	; (8004e38 <SendTestLora+0x64>)
 8004ddc:	799b      	ldrb	r3, [r3, #6]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d126      	bne.n	8004e30 <SendTestLora+0x5c>
	{
		SendMess("AT+RF=ON\n", NEMEUS_UART_PORT);
 8004de2:	4c16      	ldr	r4, [pc, #88]	; (8004e3c <SendTestLora+0x68>)
 8004de4:	4668      	mov	r0, sp
 8004de6:	f104 030c 	add.w	r3, r4, #12
 8004dea:	2278      	movs	r2, #120	; 0x78
 8004dec:	4619      	mov	r1, r3
 8004dee:	f013 f945 	bl	801807c <memcpy>
 8004df2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004df6:	4812      	ldr	r0, [pc, #72]	; (8004e40 <SendTestLora+0x6c>)
 8004df8:	f000 fbe8 	bl	80055cc <SendMess>
		SendMess("AT+RFTX=SET,LORA,868100000,14,125000,7\n", NEMEUS_UART_PORT);
 8004dfc:	4c0f      	ldr	r4, [pc, #60]	; (8004e3c <SendTestLora+0x68>)
 8004dfe:	4668      	mov	r0, sp
 8004e00:	f104 030c 	add.w	r3, r4, #12
 8004e04:	2278      	movs	r2, #120	; 0x78
 8004e06:	4619      	mov	r1, r3
 8004e08:	f013 f938 	bl	801807c <memcpy>
 8004e0c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004e10:	480c      	ldr	r0, [pc, #48]	; (8004e44 <SendTestLora+0x70>)
 8004e12:	f000 fbdb 	bl	80055cc <SendMess>
		SendMess("AT+RFTX=SNDBIN,000000000000,1\n", NEMEUS_UART_PORT);
 8004e16:	4c09      	ldr	r4, [pc, #36]	; (8004e3c <SendTestLora+0x68>)
 8004e18:	4668      	mov	r0, sp
 8004e1a:	f104 030c 	add.w	r3, r4, #12
 8004e1e:	2278      	movs	r2, #120	; 0x78
 8004e20:	4619      	mov	r1, r3
 8004e22:	f013 f92b 	bl	801807c <memcpy>
 8004e26:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004e2a:	4807      	ldr	r0, [pc, #28]	; (8004e48 <SendTestLora+0x74>)
 8004e2c:	f000 fbce 	bl	80055cc <SendMess>
	}
}
 8004e30:	bf00      	nop
 8004e32:	3704      	adds	r7, #4
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	20001158 	.word	0x20001158
 8004e3c:	20003534 	.word	0x20003534
 8004e40:	0801bc40 	.word	0x0801bc40
 8004e44:	0801bc4c 	.word	0x0801bc4c
 8004e48:	0801bc74 	.word	0x0801bc74

08004e4c <SendMessLora>:

// Send a message using Lora P2P
void SendMessLora(char buffer_Lora[])
{
 8004e4c:	b5b0      	push	{r4, r5, r7, lr}
 8004e4e:	b0aa      	sub	sp, #168	; 0xa8
 8004e50:	af1e      	add	r7, sp, #120	; 0x78
 8004e52:	6078      	str	r0, [r7, #4]
		if(c1.loraP2P == 1)
 8004e54:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <SendMessLora+0x44>)
 8004e56:	799b      	ldrb	r3, [r3, #6]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d115      	bne.n	8004e88 <SendMessLora+0x3c>
	{
		char buffer_all[34];

		sprintf(buffer_all,"AT+RFTX=SNDBIN,%s,3\n", buffer_Lora);  //  %s,buffersig
 8004e5c:	f107 030c 	add.w	r3, r7, #12
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	490c      	ldr	r1, [pc, #48]	; (8004e94 <SendMessLora+0x48>)
 8004e64:	4618      	mov	r0, r3
 8004e66:	f013 fdf7 	bl	8018a58 <siprintf>
		SendMess(buffer_all, NEMEUS_UART_PORT);
 8004e6a:	4c0b      	ldr	r4, [pc, #44]	; (8004e98 <SendMessLora+0x4c>)
 8004e6c:	f107 050c 	add.w	r5, r7, #12
 8004e70:	4668      	mov	r0, sp
 8004e72:	f104 030c 	add.w	r3, r4, #12
 8004e76:	2278      	movs	r2, #120	; 0x78
 8004e78:	4619      	mov	r1, r3
 8004e7a:	f013 f8ff 	bl	801807c <memcpy>
 8004e7e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 fba2 	bl	80055cc <SendMess>
	}
}
 8004e88:	bf00      	nop
 8004e8a:	3730      	adds	r7, #48	; 0x30
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8004e90:	20001158 	.word	0x20001158
 8004e94:	0801bc94 	.word	0x0801bc94
 8004e98:	20003534 	.word	0x20003534

08004e9c <ContinuousRxLora>:

// Activate the Lora/LoraWan listening mode to intercept messages
void ContinuousRxLora(void)
{
 8004e9c:	b590      	push	{r4, r7, lr}
 8004e9e:	b09f      	sub	sp, #124	; 0x7c
 8004ea0:	af1e      	add	r7, sp, #120	; 0x78
	if(c1.loraP2P == 1)
 8004ea2:	4b18      	ldr	r3, [pc, #96]	; (8004f04 <ContinuousRxLora+0x68>)
 8004ea4:	799b      	ldrb	r3, [r3, #6]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d128      	bne.n	8004efc <ContinuousRxLora+0x60>
	{
		TurnOffAllLayers();
 8004eaa:	f7ff fe01 	bl	8004ab0 <TurnOffAllLayers>
		SendMess("AT+RFTX=SET,LORA,868100000,14,125000,7\n", NEMEUS_UART_PORT);
 8004eae:	4c16      	ldr	r4, [pc, #88]	; (8004f08 <ContinuousRxLora+0x6c>)
 8004eb0:	4668      	mov	r0, sp
 8004eb2:	f104 030c 	add.w	r3, r4, #12
 8004eb6:	2278      	movs	r2, #120	; 0x78
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f013 f8df 	bl	801807c <memcpy>
 8004ebe:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004ec2:	4812      	ldr	r0, [pc, #72]	; (8004f0c <ContinuousRxLora+0x70>)
 8004ec4:	f000 fb82 	bl	80055cc <SendMess>
		SendMess("AT+RF=ON\n", NEMEUS_UART_PORT);
 8004ec8:	4c0f      	ldr	r4, [pc, #60]	; (8004f08 <ContinuousRxLora+0x6c>)
 8004eca:	4668      	mov	r0, sp
 8004ecc:	f104 030c 	add.w	r3, r4, #12
 8004ed0:	2278      	movs	r2, #120	; 0x78
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	f013 f8d2 	bl	801807c <memcpy>
 8004ed8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004edc:	480c      	ldr	r0, [pc, #48]	; (8004f10 <ContinuousRxLora+0x74>)
 8004ede:	f000 fb75 	bl	80055cc <SendMess>
		SendMess("AT+RFRX=CONTRX\n", NEMEUS_UART_PORT);
 8004ee2:	4c09      	ldr	r4, [pc, #36]	; (8004f08 <ContinuousRxLora+0x6c>)
 8004ee4:	4668      	mov	r0, sp
 8004ee6:	f104 030c 	add.w	r3, r4, #12
 8004eea:	2278      	movs	r2, #120	; 0x78
 8004eec:	4619      	mov	r1, r3
 8004eee:	f013 f8c5 	bl	801807c <memcpy>
 8004ef2:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004ef6:	4807      	ldr	r0, [pc, #28]	; (8004f14 <ContinuousRxLora+0x78>)
 8004ef8:	f000 fb68 	bl	80055cc <SendMess>
	}
}
 8004efc:	bf00      	nop
 8004efe:	3704      	adds	r7, #4
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd90      	pop	{r4, r7, pc}
 8004f04:	20001158 	.word	0x20001158
 8004f08:	20003534 	.word	0x20003534
 8004f0c:	0801bc4c 	.word	0x0801bc4c
 8004f10:	0801bc40 	.word	0x0801bc40
 8004f14:	0801bcac 	.word	0x0801bcac

08004f18 <BuildMessGPS>:

}


void BuildMessGPS(char buffer_sig[], int TabGen[], float TabFloatValue[], uint32_t TabGpsTimer[])
{  
 8004f18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f1a:	b0ad      	sub	sp, #180	; 0xb4
 8004f1c:	af0e      	add	r7, sp, #56	; 0x38
 8004f1e:	6378      	str	r0, [r7, #52]	; 0x34
 8004f20:	6339      	str	r1, [r7, #48]	; 0x30
 8004f22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f24:	62bb      	str	r3, [r7, #40]	; 0x28
	
	char b1;
	char b2; 
  char buffer1 ;
	int signe_value = -1 ;
 8004f26:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2a:	673b      	str	r3, [r7, #112]	; 0x70
	int elapsed_time_GPS = 0;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
	int val1byte = 0 ;
 8004f30:	2300      	movs	r3, #0
 8004f32:	667b      	str	r3, [r7, #100]	; 0x64
	int val2byte = 0 ;
 8004f34:	2300      	movs	r3, #0
 8004f36:	66bb      	str	r3, [r7, #104]	; 0x68
	int val3to7byte = 0 ;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	663b      	str	r3, [r7, #96]	; 0x60
	int val8to12byte = 0 ;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t buffer = 0x00 ;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	char buffer_long[5] ;
	char buffer_lat2[5] ;
	char buffer_long2[5] ;
	char buffer_last_gps[3];
	
	if (TabFloatValue[LONGI] > 0)	{		signe_value = 1 ;	}
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	3318      	adds	r3, #24
 8004f4a:	edd3 7a00 	vldr	s15, [r3]
 8004f4e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	dd01      	ble.n	8004f5c <BuildMessGPS+0x44>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	673b      	str	r3, [r7, #112]	; 0x70
//malaise + 8
//malaise - 9



	if (TabGen[SIG_ALERT] == ALERT_SOS)
 8004f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5e:	33e0      	adds	r3, #224	; 0xe0
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d110      	bne.n	8004f88 <BuildMessGPS+0x70>
	{	if (signe_value == 1) {  b1 = '0' ;b2='0';}	else	{  b1 = '1' ;b2='0';}	}
 8004f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <BuildMessGPS+0x62>
 8004f6c:	2330      	movs	r3, #48	; 0x30
 8004f6e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f72:	2330      	movs	r3, #48	; 0x30
 8004f74:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004f78:	e0cb      	b.n	8005112 <BuildMessGPS+0x1fa>
 8004f7a:	2331      	movs	r3, #49	; 0x31
 8004f7c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f80:	2330      	movs	r3, #48	; 0x30
 8004f82:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004f86:	e0c4      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_FALL)
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	33e0      	adds	r3, #224	; 0xe0
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b0d      	cmp	r3, #13
 8004f90:	d110      	bne.n	8004fb4 <BuildMessGPS+0x9c>
	{	if (signe_value == 1) {  b1 = '2' ;b2='0';}	else	{  b1 = '3' ;b2='0';}	}
 8004f92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d106      	bne.n	8004fa6 <BuildMessGPS+0x8e>
 8004f98:	2332      	movs	r3, #50	; 0x32
 8004f9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004f9e:	2330      	movs	r3, #48	; 0x30
 8004fa0:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004fa4:	e0b5      	b.n	8005112 <BuildMessGPS+0x1fa>
 8004fa6:	2333      	movs	r3, #51	; 0x33
 8004fa8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004fac:	2330      	movs	r3, #48	; 0x30
 8004fae:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004fb2:	e0ae      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_LOWBAT)
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	33e0      	adds	r3, #224	; 0xe0
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	2b06      	cmp	r3, #6
 8004fbc:	d110      	bne.n	8004fe0 <BuildMessGPS+0xc8>
	{	if (signe_value == 1) {  b1 = '4' ;b2='0';}	else	{  b1 = '5' ;b2='0';}	}
 8004fbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d106      	bne.n	8004fd2 <BuildMessGPS+0xba>
 8004fc4:	2334      	movs	r3, #52	; 0x34
 8004fc6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004fca:	2330      	movs	r3, #48	; 0x30
 8004fcc:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004fd0:	e09f      	b.n	8005112 <BuildMessGPS+0x1fa>
 8004fd2:	2335      	movs	r3, #53	; 0x35
 8004fd4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004fd8:	2330      	movs	r3, #48	; 0x30
 8004fda:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004fde:	e098      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_MALAISE)
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	33e0      	adds	r3, #224	; 0xe0
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d110      	bne.n	800500c <BuildMessGPS+0xf4>
	{	if (signe_value == 1) {  b1 = '8' ;b2='0';}	else	{  b1 = '9' ;b2='0';}	}
 8004fea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d106      	bne.n	8004ffe <BuildMessGPS+0xe6>
 8004ff0:	2338      	movs	r3, #56	; 0x38
 8004ff2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8004ff6:	2330      	movs	r3, #48	; 0x30
 8004ff8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8004ffc:	e089      	b.n	8005112 <BuildMessGPS+0x1fa>
 8004ffe:	2339      	movs	r3, #57	; 0x39
 8005000:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005004:	2330      	movs	r3, #48	; 0x30
 8005006:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800500a:	e082      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_O2)
 800500c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500e:	33e0      	adds	r3, #224	; 0xe0
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b09      	cmp	r3, #9
 8005014:	d110      	bne.n	8005038 <BuildMessGPS+0x120>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='0';}	else	{  b1 = 'A' ;b2='1';}	}
 8005016:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005018:	2b01      	cmp	r3, #1
 800501a:	d106      	bne.n	800502a <BuildMessGPS+0x112>
 800501c:	2341      	movs	r3, #65	; 0x41
 800501e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005022:	2330      	movs	r3, #48	; 0x30
 8005024:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005028:	e073      	b.n	8005112 <BuildMessGPS+0x1fa>
 800502a:	2341      	movs	r3, #65	; 0x41
 800502c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005030:	2331      	movs	r3, #49	; 0x31
 8005032:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005036:	e06c      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVME)
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	33e0      	adds	r3, #224	; 0xe0
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b07      	cmp	r3, #7
 8005040:	d110      	bne.n	8005064 <BuildMessGPS+0x14c>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='2';}	else	{  b1 = 'A' ;b2='3';}	}
 8005042:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005044:	2b01      	cmp	r3, #1
 8005046:	d106      	bne.n	8005056 <BuildMessGPS+0x13e>
 8005048:	2341      	movs	r3, #65	; 0x41
 800504a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800504e:	2332      	movs	r3, #50	; 0x32
 8005050:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005054:	e05d      	b.n	8005112 <BuildMessGPS+0x1fa>
 8005056:	2341      	movs	r3, #65	; 0x41
 8005058:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800505c:	2333      	movs	r3, #51	; 0x33
 800505e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005062:	e056      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVLCT)
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	33e0      	adds	r3, #224	; 0xe0
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b08      	cmp	r3, #8
 800506c:	d110      	bne.n	8005090 <BuildMessGPS+0x178>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='4';}	else	{  b1 = 'A' ;b2='5';}	}
 800506e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005070:	2b01      	cmp	r3, #1
 8005072:	d106      	bne.n	8005082 <BuildMessGPS+0x16a>
 8005074:	2341      	movs	r3, #65	; 0x41
 8005076:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800507a:	2334      	movs	r3, #52	; 0x34
 800507c:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005080:	e047      	b.n	8005112 <BuildMessGPS+0x1fa>
 8005082:	2341      	movs	r3, #65	; 0x41
 8005084:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005088:	2335      	movs	r3, #53	; 0x35
 800508a:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 800508e:	e040      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVME)
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	33e0      	adds	r3, #224	; 0xe0
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2b0a      	cmp	r3, #10
 8005098:	d110      	bne.n	80050bc <BuildMessGPS+0x1a4>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='6';}	else	{  b1 = 'A' ;b2='7';}	}
 800509a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509c:	2b01      	cmp	r3, #1
 800509e:	d106      	bne.n	80050ae <BuildMessGPS+0x196>
 80050a0:	2341      	movs	r3, #65	; 0x41
 80050a2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80050a6:	2336      	movs	r3, #54	; 0x36
 80050a8:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80050ac:	e031      	b.n	8005112 <BuildMessGPS+0x1fa>
 80050ae:	2341      	movs	r3, #65	; 0x41
 80050b0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80050b4:	2337      	movs	r3, #55	; 0x37
 80050b6:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80050ba:	e02a      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_COVLCT)
 80050bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050be:	33e0      	adds	r3, #224	; 0xe0
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b0b      	cmp	r3, #11
 80050c4:	d110      	bne.n	80050e8 <BuildMessGPS+0x1d0>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='8';}	else	{  b1 = 'A' ;b2='9';}	}
 80050c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d106      	bne.n	80050da <BuildMessGPS+0x1c2>
 80050cc:	2341      	movs	r3, #65	; 0x41
 80050ce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80050d2:	2338      	movs	r3, #56	; 0x38
 80050d4:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80050d8:	e01b      	b.n	8005112 <BuildMessGPS+0x1fa>
 80050da:	2341      	movs	r3, #65	; 0x41
 80050dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80050e0:	2339      	movs	r3, #57	; 0x39
 80050e2:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 80050e6:	e014      	b.n	8005112 <BuildMessGPS+0x1fa>
	else if (TabGen[SIG_ALERT] == ALERT_EX)
 80050e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ea:	33e0      	adds	r3, #224	; 0xe0
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2b0c      	cmp	r3, #12
 80050f0:	d10f      	bne.n	8005112 <BuildMessGPS+0x1fa>
	{	if (signe_value == 1) {  b1 = 'B' ;b2='0';}	else	{  b1 = 'B' ;b2='1';}	}
 80050f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d106      	bne.n	8005106 <BuildMessGPS+0x1ee>
 80050f8:	2342      	movs	r3, #66	; 0x42
 80050fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80050fe:	2330      	movs	r3, #48	; 0x30
 8005100:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76
 8005104:	e005      	b.n	8005112 <BuildMessGPS+0x1fa>
 8005106:	2342      	movs	r3, #66	; 0x42
 8005108:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800510c:	2331      	movs	r3, #49	; 0x31
 800510e:	f887 3076 	strb.w	r3, [r7, #118]	; 0x76

	
	
	

	val2byte = TabGen[BAT_VALUE] / 10 ;
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	33a8      	adds	r3, #168	; 0xa8
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7b      	ldr	r2, [pc, #492]	; (8005308 <BuildMessGPS+0x3f0>)
 800511a:	fb82 1203 	smull	r1, r2, r2, r3
 800511e:	1092      	asrs	r2, r2, #2
 8005120:	17db      	asrs	r3, r3, #31
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte > 9)
 8005126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005128:	2b09      	cmp	r3, #9
 800512a:	dd01      	ble.n	8005130 <BuildMessGPS+0x218>
	{val2byte = 9 ;}
 800512c:	2309      	movs	r3, #9
 800512e:	66bb      	str	r3, [r7, #104]	; 0x68
	if (val2byte < 0)
 8005130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005132:	2b00      	cmp	r3, #0
 8005134:	da01      	bge.n	800513a <BuildMessGPS+0x222>
	{val2byte = 0 ;}
 8005136:	2300      	movs	r3, #0
 8005138:	66bb      	str	r3, [r7, #104]	; 0x68

	val3to7byte = (int) (    roundf ( (float) ( fabs(TabFloatValue[LATI] * 10000)  )  ) );
 800513a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800513c:	3314      	adds	r3, #20
 800513e:	edd3 7a00 	vldr	s15, [r3]
 8005142:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800530c <BuildMessGPS+0x3f4>
 8005146:	ee67 7a87 	vmul.f32	s15, s15, s14
 800514a:	eef0 7ae7 	vabs.f32	s15, s15
 800514e:	eeb0 0a67 	vmov.f32	s0, s15
 8005152:	f016 f943 	bl	801b3dc <roundf>
 8005156:	eef0 7a40 	vmov.f32	s15, s0
 800515a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800515e:	ee17 3a90 	vmov	r3, s15
 8005162:	663b      	str	r3, [r7, #96]	; 0x60
	val8to12byte = (int) ( roundf ( (float) ( fabs(TabFloatValue[LONGI] * 100000)  ) )  );
 8005164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005166:	3318      	adds	r3, #24
 8005168:	edd3 7a00 	vldr	s15, [r3]
 800516c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005310 <BuildMessGPS+0x3f8>
 8005170:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005174:	eef0 7ae7 	vabs.f32	s15, s15
 8005178:	eeb0 0a67 	vmov.f32	s0, s15
 800517c:	f016 f92e 	bl	801b3dc <roundf>
 8005180:	eef0 7a40 	vmov.f32	s15, s0
 8005184:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005188:	ee17 3a90 	vmov	r3, s15
 800518c:	65fb      	str	r3, [r7, #92]	; 0x5c

	buffer = (uint8_t) ( val1byte * 16 + val2byte );
 800518e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005190:	b2db      	uxtb	r3, r3
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005198:	b2db      	uxtb	r3, r3
 800519a:	4413      	add	r3, r2
 800519c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	elapsed_time_GPS = (int)((HAL_GetTick() - TabGpsTimer[LAST_UPDATE_GPS]) / 60000 + 1) ;
 80051a0:	f006 fd86 	bl	800bcb0 <HAL_GetTick>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	3308      	adds	r3, #8
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	4a59      	ldr	r2, [pc, #356]	; (8005314 <BuildMessGPS+0x3fc>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	0b9b      	lsrs	r3, r3, #14
 80051b6:	3301      	adds	r3, #1
 80051b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (TabGpsTimer[LAST_UPDATE_GPS] == 0)
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	3308      	adds	r3, #8
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <BuildMessGPS+0x2b0>
		elapsed_time_GPS = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	66fb      	str	r3, [r7, #108]	; 0x6c
	
	//elapsed_time_GPS = 8*60-1;
	if (elapsed_time_GPS > 8 * 60)  // 0x1E0  max, more than 8 hours => 0xFFF
 80051c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ca:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80051ce:	dd02      	ble.n	80051d6 <BuildMessGPS+0x2be>
		elapsed_time_GPS = 4095; // 0xFFF
 80051d0:	f640 73ff 	movw	r3, #4095	; 0xfff
 80051d4:	66fb      	str	r3, [r7, #108]	; 0x6c
	

	//elapsed_time_GPS = 8*60-1;
	decimal2hexa(val3to7byte, buffer_lat, 5);
 80051d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051d8:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80051dc:	2205      	movs	r2, #5
 80051de:	4618      	mov	r0, r3
 80051e0:	f000 fa12 	bl	8005608 <decimal2hexa>
	decimal2hexa(val8to12byte, buffer_long, 5);
 80051e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e6:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80051ea:	2205      	movs	r2, #5
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fa0b 	bl	8005608 <decimal2hexa>
	decimal2hexa(elapsed_time_GPS, buffer_last_gps, 3); 
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80051f8:	2203      	movs	r2, #3
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fa04 	bl	8005608 <decimal2hexa>
	


	buffer_lat2[0] = buffer_lat[0];
 8005200:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8005204:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	buffer_lat2[1] = buffer_lat[1];
 8005208:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800520c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	buffer_lat2[2] = buffer_lat[2];
 8005210:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8005214:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	buffer_lat2[3] = buffer_lat[3];
 8005218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800521c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	buffer_lat2[4] = buffer_lat[4];
 8005220:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005224:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	buffer_long2[0]  = buffer_long[0];
 8005228:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800522c:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer_long2[1]  = buffer_long[1];
 8005230:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005234:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer_long2[2]  = buffer_long[2];
 8005238:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800523c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer_long2[3]  = buffer_long[3];
 8005240:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005244:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer_long2[4]  = buffer_long[4];
 8005248:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800524c:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40



	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005250:	f897 1077 	ldrb.w	r1, [r7, #119]	; 0x77
 8005254:	f897 0076 	ldrb.w	r0, [r7, #118]	; 0x76
	b1, b2,  //15
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8005258:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800525c:	461d      	mov	r5, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 800525e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005262:	461e      	mov	r6, r3
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8005264:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 800526a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800526e:	623b      	str	r3, [r7, #32]
	buffer_lat2[0], buffer_lat2[1], buffer_lat2[2], buffer_lat2[3], buffer_lat2[4], 			// latitude in hexa
 8005270:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005274:	61fb      	str	r3, [r7, #28]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8005276:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800527a:	61bb      	str	r3, [r7, #24]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800527c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005280:	617b      	str	r3, [r7, #20]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8005282:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005286:	613b      	str	r3, [r7, #16]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 8005288:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800528c:	60fb      	str	r3, [r7, #12]
	buffer_long2[0], buffer_long2[1], buffer_long2[2], buffer_long2[3], buffer_long2[4],  // longitude in hexa
 800528e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005292:	60bb      	str	r3, [r7, #8]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 8005294:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 8005298:	607b      	str	r3, [r7, #4]
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 800529a:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 800529e:	461c      	mov	r4, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 80052a0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 80052a4:	461a      	mov	r2, r3
	buffer_last_gps[0], buffer_last_gps[1], buffer_last_gps[2], TabGen[ID_ALERT]); 													// last gps acquisition in hexa
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f503 738a 	add.w	r3, r3, #276	; 0x114
	sprintf(buffer_sig, "%c%c%c%c%c%c%c%c%c%c%c%c%c%c%c1%d", //
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	930d      	str	r3, [sp, #52]	; 0x34
 80052b0:	920c      	str	r2, [sp, #48]	; 0x30
 80052b2:	940b      	str	r4, [sp, #44]	; 0x2c
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	920a      	str	r2, [sp, #40]	; 0x28
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	9209      	str	r2, [sp, #36]	; 0x24
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	9208      	str	r2, [sp, #32]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	9207      	str	r2, [sp, #28]
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	9206      	str	r2, [sp, #24]
 80052c8:	69ba      	ldr	r2, [r7, #24]
 80052ca:	9205      	str	r2, [sp, #20]
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	9204      	str	r2, [sp, #16]
 80052d0:	6a3a      	ldr	r2, [r7, #32]
 80052d2:	9203      	str	r2, [sp, #12]
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	9601      	str	r6, [sp, #4]
 80052da:	9500      	str	r5, [sp, #0]
 80052dc:	4603      	mov	r3, r0
 80052de:	460a      	mov	r2, r1
 80052e0:	490d      	ldr	r1, [pc, #52]	; (8005318 <BuildMessGPS+0x400>)
 80052e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80052e4:	f013 fbb8 	bl	8018a58 <siprintf>
	//49,68,70


	if(c1.com_LoRa == 1 && c1.com_sigfox == 1)
 80052e8:	4b0c      	ldr	r3, [pc, #48]	; (800531c <BuildMessGPS+0x404>)
 80052ea:	7a1b      	ldrb	r3, [r3, #8]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <BuildMessGPS+0x3e8>
 80052f0:	4b0a      	ldr	r3, [pc, #40]	; (800531c <BuildMessGPS+0x404>)
 80052f2:	79db      	ldrb	r3, [r3, #7]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d103      	bne.n	8005300 <BuildMessGPS+0x3e8>
		buffer_sig[15] = '2';
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	330f      	adds	r3, #15
 80052fc:	2232      	movs	r2, #50	; 0x32
 80052fe:	701a      	strb	r2, [r3, #0]

}
 8005300:	bf00      	nop
 8005302:	377c      	adds	r7, #124	; 0x7c
 8005304:	46bd      	mov	sp, r7
 8005306:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005308:	66666667 	.word	0x66666667
 800530c:	461c4000 	.word	0x461c4000
 8005310:	47c35000 	.word	0x47c35000
 8005314:	45e7b273 	.word	0x45e7b273
 8005318:	0801bcc4 	.word	0x0801bcc4
 800531c:	20001158 	.word	0x20001158

08005320 <FuncLoraMessNoGPS>:




void FuncLoraMessNoGPS(char buffer_lora[], int TabGen[], float TabFloatValue[], uint32_t TabGpsTimer[])
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08c      	sub	sp, #48	; 0x30
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	603b      	str	r3, [r7, #0]

	char b1;
	char b2;
  char buffer1 ;
	int signe_value = -1 ;
 800532e:	f04f 33ff 	mov.w	r3, #4294967295
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
	int elapsed_time_GPS = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	623b      	str	r3, [r7, #32]
	int val1byte = 0 ;
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
	int val2byte = 0 ;
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
	int val3to7byte = 0 ;
 8005340:	2300      	movs	r3, #0
 8005342:	61bb      	str	r3, [r7, #24]
	int val8to12byte = 0 ;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
	uint8_t buffer = 0x00 ;
 8005348:	2300      	movs	r3, #0
 800534a:	74fb      	strb	r3, [r7, #19]


	if (TabFloatValue[LONGI] > 0)	{		signe_value = 1 ;	}
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3318      	adds	r3, #24
 8005350:	edd3 7a00 	vldr	s15, [r3]
 8005354:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800535c:	dd01      	ble.n	8005362 <FuncLoraMessNoGPS+0x42>
 800535e:	2301      	movs	r3, #1
 8005360:	62bb      	str	r3, [r7, #40]	; 0x28
//malaise + 8
//malaise - 9



	if (TabGen[SIG_ALERT] == ALERT_SOS)
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	33e0      	adds	r3, #224	; 0xe0
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d110      	bne.n	800538e <FuncLoraMessNoGPS+0x6e>
	{	if (signe_value == 1) {  b1 = '0' ;b2='0';}	else	{  b1 = '1' ;b2='0';}	}
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	2b01      	cmp	r3, #1
 8005370:	d106      	bne.n	8005380 <FuncLoraMessNoGPS+0x60>
 8005372:	2330      	movs	r3, #48	; 0x30
 8005374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005378:	2330      	movs	r3, #48	; 0x30
 800537a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800537e:	e0cb      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 8005380:	2331      	movs	r3, #49	; 0x31
 8005382:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005386:	2330      	movs	r3, #48	; 0x30
 8005388:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800538c:	e0c4      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_FALL)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	33e0      	adds	r3, #224	; 0xe0
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b0d      	cmp	r3, #13
 8005396:	d110      	bne.n	80053ba <FuncLoraMessNoGPS+0x9a>
	{	if (signe_value == 1) {  b1 = '2' ;b2='0';}	else	{  b1 = '3' ;b2='0';}	}
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	2b01      	cmp	r3, #1
 800539c:	d106      	bne.n	80053ac <FuncLoraMessNoGPS+0x8c>
 800539e:	2332      	movs	r3, #50	; 0x32
 80053a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053a4:	2330      	movs	r3, #48	; 0x30
 80053a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80053aa:	e0b5      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 80053ac:	2333      	movs	r3, #51	; 0x33
 80053ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053b2:	2330      	movs	r3, #48	; 0x30
 80053b4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80053b8:	e0ae      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_LOWBAT)
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	33e0      	adds	r3, #224	; 0xe0
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2b06      	cmp	r3, #6
 80053c2:	d110      	bne.n	80053e6 <FuncLoraMessNoGPS+0xc6>
	{	if (signe_value == 1) {  b1 = '4' ;b2='0';}	else	{  b1 = '5' ;b2='0';}	}
 80053c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d106      	bne.n	80053d8 <FuncLoraMessNoGPS+0xb8>
 80053ca:	2334      	movs	r3, #52	; 0x34
 80053cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053d0:	2330      	movs	r3, #48	; 0x30
 80053d2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80053d6:	e09f      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 80053d8:	2335      	movs	r3, #53	; 0x35
 80053da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053de:	2330      	movs	r3, #48	; 0x30
 80053e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80053e4:	e098      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_MALAISE)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	33e0      	adds	r3, #224	; 0xe0
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d110      	bne.n	8005412 <FuncLoraMessNoGPS+0xf2>
	{	if (signe_value == 1) {  b1 = '8' ;b2='0';}	else	{  b1 = '9' ;b2='0';}	}
 80053f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d106      	bne.n	8005404 <FuncLoraMessNoGPS+0xe4>
 80053f6:	2338      	movs	r3, #56	; 0x38
 80053f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053fc:	2330      	movs	r3, #48	; 0x30
 80053fe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005402:	e089      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 8005404:	2339      	movs	r3, #57	; 0x39
 8005406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800540a:	2330      	movs	r3, #48	; 0x30
 800540c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005410:	e082      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_O2)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	33e0      	adds	r3, #224	; 0xe0
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b09      	cmp	r3, #9
 800541a:	d110      	bne.n	800543e <FuncLoraMessNoGPS+0x11e>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='0';}	else	{  b1 = 'A' ;b2='1';}	}
 800541c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541e:	2b01      	cmp	r3, #1
 8005420:	d106      	bne.n	8005430 <FuncLoraMessNoGPS+0x110>
 8005422:	2341      	movs	r3, #65	; 0x41
 8005424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005428:	2330      	movs	r3, #48	; 0x30
 800542a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800542e:	e073      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 8005430:	2341      	movs	r3, #65	; 0x41
 8005432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005436:	2331      	movs	r3, #49	; 0x31
 8005438:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800543c:	e06c      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVME)
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	33e0      	adds	r3, #224	; 0xe0
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b07      	cmp	r3, #7
 8005446:	d110      	bne.n	800546a <FuncLoraMessNoGPS+0x14a>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='2';}	else	{  b1 = 'A' ;b2='3';}	}
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	2b01      	cmp	r3, #1
 800544c:	d106      	bne.n	800545c <FuncLoraMessNoGPS+0x13c>
 800544e:	2341      	movs	r3, #65	; 0x41
 8005450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005454:	2332      	movs	r3, #50	; 0x32
 8005456:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800545a:	e05d      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 800545c:	2341      	movs	r3, #65	; 0x41
 800545e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005462:	2333      	movs	r3, #51	; 0x33
 8005464:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005468:	e056      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_H2SVLCT)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	33e0      	adds	r3, #224	; 0xe0
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	2b08      	cmp	r3, #8
 8005472:	d110      	bne.n	8005496 <FuncLoraMessNoGPS+0x176>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='4';}	else	{  b1 = 'A' ;b2='5';}	}
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2b01      	cmp	r3, #1
 8005478:	d106      	bne.n	8005488 <FuncLoraMessNoGPS+0x168>
 800547a:	2341      	movs	r3, #65	; 0x41
 800547c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005480:	2334      	movs	r3, #52	; 0x34
 8005482:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005486:	e047      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 8005488:	2341      	movs	r3, #65	; 0x41
 800548a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800548e:	2335      	movs	r3, #53	; 0x35
 8005490:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005494:	e040      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_COVME)
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	33e0      	adds	r3, #224	; 0xe0
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b0a      	cmp	r3, #10
 800549e:	d110      	bne.n	80054c2 <FuncLoraMessNoGPS+0x1a2>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='6';}	else	{  b1 = 'A' ;b2='7';}	}
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d106      	bne.n	80054b4 <FuncLoraMessNoGPS+0x194>
 80054a6:	2341      	movs	r3, #65	; 0x41
 80054a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054ac:	2336      	movs	r3, #54	; 0x36
 80054ae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80054b2:	e031      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 80054b4:	2341      	movs	r3, #65	; 0x41
 80054b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054ba:	2337      	movs	r3, #55	; 0x37
 80054bc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80054c0:	e02a      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_COVLCT)
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	33e0      	adds	r3, #224	; 0xe0
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b0b      	cmp	r3, #11
 80054ca:	d110      	bne.n	80054ee <FuncLoraMessNoGPS+0x1ce>
	{	if (signe_value == 1) {  b1 = 'A' ;b2='8';}	else	{  b1 = 'A' ;b2='9';}	}
 80054cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d106      	bne.n	80054e0 <FuncLoraMessNoGPS+0x1c0>
 80054d2:	2341      	movs	r3, #65	; 0x41
 80054d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054d8:	2338      	movs	r3, #56	; 0x38
 80054da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80054de:	e01b      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 80054e0:	2341      	movs	r3, #65	; 0x41
 80054e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80054e6:	2339      	movs	r3, #57	; 0x39
 80054e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80054ec:	e014      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	else if (TabGen[SIG_ALERT] == ALERT_EX)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	33e0      	adds	r3, #224	; 0xe0
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d10f      	bne.n	8005518 <FuncLoraMessNoGPS+0x1f8>
	{	if (signe_value == 1) {  b1 = 'B' ;b2='0';}	else	{  b1 = 'B' ;b2='1';}	}
 80054f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d106      	bne.n	800550c <FuncLoraMessNoGPS+0x1ec>
 80054fe:	2342      	movs	r3, #66	; 0x42
 8005500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005504:	2330      	movs	r3, #48	; 0x30
 8005506:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800550a:	e005      	b.n	8005518 <FuncLoraMessNoGPS+0x1f8>
 800550c:	2342      	movs	r3, #66	; 0x42
 800550e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005512:	2331      	movs	r3, #49	; 0x31
 8005514:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e


	val2byte = TabGen[BAT_VALUE] / 10 ;
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	33a8      	adds	r3, #168	; 0xa8
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a27      	ldr	r2, [pc, #156]	; (80055bc <FuncLoraMessNoGPS+0x29c>)
 8005520:	fb82 1203 	smull	r1, r2, r2, r3
 8005524:	1092      	asrs	r2, r2, #2
 8005526:	17db      	asrs	r3, r3, #31
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
	if (val2byte > 9)
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	2b09      	cmp	r3, #9
 8005530:	dd01      	ble.n	8005536 <FuncLoraMessNoGPS+0x216>
	{val2byte = 9 ;}
 8005532:	2309      	movs	r3, #9
 8005534:	627b      	str	r3, [r7, #36]	; 0x24
	if (val2byte < 0)
 8005536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	da01      	bge.n	8005540 <FuncLoraMessNoGPS+0x220>
	{val2byte = 0 ;}
 800553c:	2300      	movs	r3, #0
 800553e:	627b      	str	r3, [r7, #36]	; 0x24

	val3to7byte = (int) (    roundf ( (float) ( fabs(TabFloatValue[LATI] * 10000)  )  ) );
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3314      	adds	r3, #20
 8005544:	edd3 7a00 	vldr	s15, [r3]
 8005548:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80055c0 <FuncLoraMessNoGPS+0x2a0>
 800554c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005550:	eef0 7ae7 	vabs.f32	s15, s15
 8005554:	eeb0 0a67 	vmov.f32	s0, s15
 8005558:	f015 ff40 	bl	801b3dc <roundf>
 800555c:	eef0 7a40 	vmov.f32	s15, s0
 8005560:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005564:	ee17 3a90 	vmov	r3, s15
 8005568:	61bb      	str	r3, [r7, #24]
	val8to12byte = (int) ( roundf ( (float) ( fabs(TabFloatValue[LONGI] * 100000)  ) )  );
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3318      	adds	r3, #24
 800556e:	edd3 7a00 	vldr	s15, [r3]
 8005572:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80055c4 <FuncLoraMessNoGPS+0x2a4>
 8005576:	ee67 7a87 	vmul.f32	s15, s15, s14
 800557a:	eef0 7ae7 	vabs.f32	s15, s15
 800557e:	eeb0 0a67 	vmov.f32	s0, s15
 8005582:	f015 ff2b 	bl	801b3dc <roundf>
 8005586:	eef0 7a40 	vmov.f32	s15, s0
 800558a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800558e:	ee17 3a90 	vmov	r3, s15
 8005592:	617b      	str	r3, [r7, #20]

	buffer = (uint8_t) ( val1byte * 16 + val2byte );
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	b2db      	uxtb	r3, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	b2da      	uxtb	r2, r3
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	4413      	add	r3, r2
 80055a2:	74fb      	strb	r3, [r7, #19]


	sprintf(buffer_lora, "%c%c0389", b1, b2 );
 80055a4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80055a8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80055ac:	4906      	ldr	r1, [pc, #24]	; (80055c8 <FuncLoraMessNoGPS+0x2a8>)
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f013 fa52 	bl	8018a58 <siprintf>
	//49,68,70

}
 80055b4:	bf00      	nop
 80055b6:	3730      	adds	r7, #48	; 0x30
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}
 80055bc:	66666667 	.word	0x66666667
 80055c0:	461c4000 	.word	0x461c4000
 80055c4:	47c35000 	.word	0x47c35000
 80055c8:	0801bce8 	.word	0x0801bce8

080055cc <SendMess>:
//##############################################################



void SendMess(char *char_in, UART_HandleTypeDef huart)
{
 80055cc:	b084      	sub	sp, #16
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b084      	sub	sp, #16
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
 80055d6:	f107 001c 	add.w	r0, r7, #28
 80055da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint32_t Timeout_local = 1000;
 80055de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055e2:	60fb      	str	r3, [r7, #12]
	//HAL_UART_Transmit(&NEMEUS_UART_PORT,((uint8_t *)char_in),sizeof(*char_in)-1,Timeout_local  );
	
	HAL_UART_Transmit(&huart,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7fa fdf3 	bl	80001d0 <strlen>
 80055ea:	4603      	mov	r3, r0
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	f107 001c 	add.w	r0, r7, #28
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6879      	ldr	r1, [r7, #4]
 80055f6:	f00c fb63 	bl	8011cc0 <HAL_UART_Transmit>
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005604:	b004      	add	sp, #16
 8005606:	4770      	bx	lr

08005608 <decimal2hexa>:
	HAL_UART_Transmit(&huart1,((uint8_t *)char_in),strlen(char_in),Timeout_local  );
}


void decimal2hexa(unsigned int decimal,char hexa[],unsigned int size_char)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
   static char const hexaset[] = "0123456789ABCDEF";
   //unsigned int quotient = decimal;
   unsigned int size = size_char;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	617b      	str	r3, [r7, #20]
	
	for(unsigned int i=0;i<size_char;i++)
 8005618:	2300      	movs	r3, #0
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	e007      	b.n	800562e <decimal2hexa+0x26>
	{
		hexa[i] = '0';
 800561e:	68ba      	ldr	r2, [r7, #8]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	4413      	add	r3, r2
 8005624:	2230      	movs	r2, #48	; 0x30
 8005626:	701a      	strb	r2, [r3, #0]
	for(unsigned int i=0;i<size_char;i++)
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	3301      	adds	r3, #1
 800562c:	613b      	str	r3, [r7, #16]
 800562e:	693a      	ldr	r2, [r7, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	429a      	cmp	r2, r3
 8005634:	d3f3      	bcc.n	800561e <decimal2hexa+0x16>
	}

	do
	{
		 size--;
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	3b01      	subs	r3, #1
 800563a:	617b      	str	r3, [r7, #20]
		 hexa[size] = hexaset[decimal % 16];
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	68b9      	ldr	r1, [r7, #8]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	440b      	add	r3, r1
 8005648:	4907      	ldr	r1, [pc, #28]	; (8005668 <decimal2hexa+0x60>)
 800564a:	5c8a      	ldrb	r2, [r1, r2]
 800564c:	701a      	strb	r2, [r3, #0]
		 decimal /= 16;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	091b      	lsrs	r3, r3, #4
 8005652:	60fb      	str	r3, [r7, #12]
	}
	while(decimal != 0);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1ed      	bne.n	8005636 <decimal2hexa+0x2e>
}
 800565a:	bf00      	nop
 800565c:	bf00      	nop
 800565e:	371c      	adds	r7, #28
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	0801bea8 	.word	0x0801bea8

0800566c <TaskBigScreen>:
}

void TaskBigScreen(uint32_t Tab[], int TabAlert[], int TabGen[],
		float TabFloatValue[], uint32_t TabGpsTimer[], uint32_t TabAlertAll[],
		char name[])
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b096      	sub	sp, #88	; 0x58
 8005670:	af06      	add	r7, sp, #24
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
 8005678:	603b      	str	r3, [r7, #0]
	char str_h2S[10];
	char str_o2[10];
	char str_co[10];
	char str_ex[10];

	if (TabGen[SCREENSTATE] == 1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	33d0      	adds	r3, #208	; 0xd0
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d148      	bne.n	8005716 <TaskBigScreen+0xaa>
	{
		switch (TaskState(Tab))
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f7ff f999 	bl	80049bc <TaskState>
 800568a:	4603      	mov	r3, r0
 800568c:	2b03      	cmp	r3, #3
 800568e:	d037      	beq.n	8005700 <TaskBigScreen+0x94>
 8005690:	2b03      	cmp	r3, #3
 8005692:	dc47      	bgt.n	8005724 <TaskBigScreen+0xb8>
 8005694:	2b01      	cmp	r3, #1
 8005696:	d002      	beq.n	800569e <TaskBigScreen+0x32>
 8005698:	2b02      	cmp	r3, #2
 800569a:	d026      	beq.n	80056ea <TaskBigScreen+0x7e>
			}
			break;
		}
	}

}
 800569c:	e042      	b.n	8005724 <TaskBigScreen+0xb8>
			if (TabGen[TYPE_ALERT] == NONE_ALERT)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	3390      	adds	r3, #144	; 0x90
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d138      	bne.n	800571a <TaskBigScreen+0xae>
				status_GPS = (uint8_t) TabGen[STATUT_GPS];
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	33a0      	adds	r3, #160	; 0xa0
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	b2da      	uxtb	r2, r3
 80056b0:	4b1e      	ldr	r3, [pc, #120]	; (800572c <TaskBigScreen+0xc0>)
 80056b2:	701a      	strb	r2, [r3, #0]
				batteryLevel = (uint8_t) TabGen[BAT_VALUE];
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	33a8      	adds	r3, #168	; 0xa8
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	b2da      	uxtb	r2, r3
 80056bc:	4b1c      	ldr	r3, [pc, #112]	; (8005730 <TaskBigScreen+0xc4>)
 80056be:	701a      	strb	r2, [r3, #0]
				display_dco(TabFloatValue, TabAlert, TabGen, TabGpsTimer, name,
 80056c0:	f107 0310 	add.w	r3, r7, #16
 80056c4:	9304      	str	r3, [sp, #16]
 80056c6:	f107 031c 	add.w	r3, r7, #28
 80056ca:	9303      	str	r3, [sp, #12]
 80056cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056d6:	9301      	str	r3, [sp, #4]
 80056d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056da:	9300      	str	r3, [sp, #0]
 80056dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68b9      	ldr	r1, [r7, #8]
 80056e2:	6838      	ldr	r0, [r7, #0]
 80056e4:	f7fc f894 	bl	8001810 <display_dco>
			break;
 80056e8:	e017      	b.n	800571a <TaskBigScreen+0xae>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3390      	adds	r3, #144	; 0x90
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d014      	beq.n	800571e <TaskBigScreen+0xb2>
				display_AlerteDanger(TabGen, TabAlertAll, 0);
 80056f4:	2200      	movs	r2, #0
 80056f6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7fc fbf7 	bl	8001eec <display_AlerteDanger>
			break;
 80056fe:	e00e      	b.n	800571e <TaskBigScreen+0xb2>
			if (TabGen[TYPE_ALERT] != NONE_ALERT)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3390      	adds	r3, #144	; 0x90
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00b      	beq.n	8005722 <TaskBigScreen+0xb6>
				display_AlerteDanger(TabGen, TabAlertAll, 1);
 800570a:	2201      	movs	r2, #1
 800570c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f7fc fbec 	bl	8001eec <display_AlerteDanger>
			break;
 8005714:	e005      	b.n	8005722 <TaskBigScreen+0xb6>
	}
 8005716:	bf00      	nop
 8005718:	e004      	b.n	8005724 <TaskBigScreen+0xb8>
			break;
 800571a:	bf00      	nop
 800571c:	e002      	b.n	8005724 <TaskBigScreen+0xb8>
			break;
 800571e:	bf00      	nop
 8005720:	e000      	b.n	8005724 <TaskBigScreen+0xb8>
			break;
 8005722:	bf00      	nop
}
 8005724:	bf00      	nop
 8005726:	3740      	adds	r7, #64	; 0x40
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}
 800572c:	20000c0d 	.word	0x20000c0d
 8005730:	20000c0c 	.word	0x20000c0c

08005734 <TaskLedBlinking>:

void TaskLedBlinking(uint32_t Tab[], int TabGen[])
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
	if (TabGen[CHARGEC] == 1)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	33ac      	adds	r3, #172	; 0xac
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d112      	bne.n	800576e <TaskLedBlinking+0x3a>
	{
		if (TabGen[BAT_VALUE] >= 100)
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	33a8      	adds	r3, #168	; 0xa8
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b63      	cmp	r3, #99	; 0x63
 8005750:	dd06      	ble.n	8005760 <TaskLedBlinking+0x2c>
			LedOn(0, 100, 0, TabGen);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2200      	movs	r2, #0
 8005756:	2164      	movs	r1, #100	; 0x64
 8005758:	2000      	movs	r0, #0
 800575a:	f7fe ff99 	bl	8004690 <LedOn>

		default:
			break;
		}
	}
}
 800575e:	e029      	b.n	80057b4 <TaskLedBlinking+0x80>
			LedOn(100, 0, 0, TabGen);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	2200      	movs	r2, #0
 8005764:	2100      	movs	r1, #0
 8005766:	2064      	movs	r0, #100	; 0x64
 8005768:	f7fe ff92 	bl	8004690 <LedOn>
}
 800576c:	e022      	b.n	80057b4 <TaskLedBlinking+0x80>
		switch (TaskState(Tab))
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7ff f924 	bl	80049bc <TaskState>
 8005774:	4603      	mov	r3, r0
 8005776:	2b01      	cmp	r3, #1
 8005778:	d002      	beq.n	8005780 <TaskLedBlinking+0x4c>
 800577a:	2b02      	cmp	r3, #2
 800577c:	d00d      	beq.n	800579a <TaskLedBlinking+0x66>
			break;
 800577e:	e019      	b.n	80057b4 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR0], TabGen[LEDV0], TabGen[LEDB0], TabGen);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	33c0      	adds	r3, #192	; 0xc0
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	33c4      	adds	r3, #196	; 0xc4
 800578a:	6819      	ldr	r1, [r3, #0]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	33c8      	adds	r3, #200	; 0xc8
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	f7fe ff7c 	bl	8004690 <LedOn>
			break;
 8005798:	e00c      	b.n	80057b4 <TaskLedBlinking+0x80>
			LedOn(TabGen[LEDR], TabGen[LEDV], TabGen[LEDB], TabGen);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	33b4      	adds	r3, #180	; 0xb4
 800579e:	6818      	ldr	r0, [r3, #0]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	33b8      	adds	r3, #184	; 0xb8
 80057a4:	6819      	ldr	r1, [r3, #0]
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	33bc      	adds	r3, #188	; 0xbc
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	f7fe ff6f 	bl	8004690 <LedOn>
			break;
 80057b2:	bf00      	nop
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <TaskUpdateUpperLed>:

void TaskUpdateUpperLed(uint32_t Tab[], int TabGen[])
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	6039      	str	r1, [r7, #0]

	switch (TaskState(Tab))
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7ff f8f8 	bl	80049bc <TaskState>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	f040 80b5 	bne.w	800593e <TaskUpdateUpperLed+0x182>
	{
	case 1:
		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	33ac      	adds	r3, #172	; 0xac
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d004      	beq.n	80057e8 <TaskUpdateUpperLed+0x2c>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	33b0      	adds	r3, #176	; 0xb0
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d11c      	bne.n	8005822 <TaskUpdateUpperLed+0x66>
				&& (TabGen[BAT_VALUE] < 100))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	33a8      	adds	r3, #168	; 0xa8
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b63      	cmp	r3, #99	; 0x63
 80057f0:	dc17      	bgt.n	8005822 <TaskUpdateUpperLed+0x66>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 50;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	33b4      	adds	r3, #180	; 0xb4
 80057f6:	2232      	movs	r2, #50	; 0x32
 80057f8:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 0;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	33b8      	adds	r3, #184	; 0xb8
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	33bc      	adds	r3, #188	; 0xbc
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 50;
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	33c0      	adds	r3, #192	; 0xc0
 800580e:	2232      	movs	r2, #50	; 0x32
 8005810:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	33c4      	adds	r3, #196	; 0xc4
 8005816:	2200      	movs	r2, #0
 8005818:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	33c8      	adds	r3, #200	; 0xc8
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 0;
				TabGen[LEDB0] = 0;
			}
		}

		if (((TabGen[CHARGEC] == 1) || (TabGen[EOC] == 1))
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	33ac      	adds	r3, #172	; 0xac
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d004      	beq.n	8005836 <TaskUpdateUpperLed+0x7a>
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	33b0      	adds	r3, #176	; 0xb0
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d11c      	bne.n	8005870 <TaskUpdateUpperLed+0xb4>
				&& (TabGen[BAT_VALUE] == 100))
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	33a8      	adds	r3, #168	; 0xa8
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b64      	cmp	r3, #100	; 0x64
 800583e:	d117      	bne.n	8005870 <TaskUpdateUpperLed+0xb4>
		{
			if (BOX4GAZ == 0)
			{
				TabGen[LEDR] = 0;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	33b4      	adds	r3, #180	; 0xb4
 8005844:	2200      	movs	r2, #0
 8005846:	601a      	str	r2, [r3, #0]
				TabGen[LEDV] = 50;
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	33b8      	adds	r3, #184	; 0xb8
 800584c:	2232      	movs	r2, #50	; 0x32
 800584e:	601a      	str	r2, [r3, #0]
				TabGen[LEDB] = 0;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	33bc      	adds	r3, #188	; 0xbc
 8005854:	2200      	movs	r2, #0
 8005856:	601a      	str	r2, [r3, #0]
				TabGen[LEDR0] = 0;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	33c0      	adds	r3, #192	; 0xc0
 800585c:	2200      	movs	r2, #0
 800585e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 50;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	33c4      	adds	r3, #196	; 0xc4
 8005864:	2232      	movs	r2, #50	; 0x32
 8005866:	601a      	str	r2, [r3, #0]
				TabGen[LEDB0] = 0;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	33c8      	adds	r3, #200	; 0xc8
 800586c:	2200      	movs	r2, #0
 800586e:	601a      	str	r2, [r3, #0]
				TabGen[LEDV0] = 250;
				TabGen[LEDB0] = 0;
			}
		}

		if ((TabGen[CHARGEC] == 0) && (TabGen[EOC] == 0))
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	33ac      	adds	r3, #172	; 0xac
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d163      	bne.n	8005942 <TaskUpdateUpperLed+0x186>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	33b0      	adds	r3, #176	; 0xb0
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d15e      	bne.n	8005942 <TaskUpdateUpperLed+0x186>
		{
			if ((TabGen[BAT_VALUE] >= 50))
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	33a8      	adds	r3, #168	; 0xa8
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b31      	cmp	r3, #49	; 0x31
 800588c:	dd17      	ble.n	80058be <TaskUpdateUpperLed+0x102>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 0;
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	33b4      	adds	r3, #180	; 0xb4
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 50;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	33b8      	adds	r3, #184	; 0xb8
 800589a:	2232      	movs	r2, #50	; 0x32
 800589c:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	33bc      	adds	r3, #188	; 0xbc
 80058a2:	2200      	movs	r2, #0
 80058a4:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	33c0      	adds	r3, #192	; 0xc0
 80058aa:	2200      	movs	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	33c4      	adds	r3, #196	; 0xc4
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	33c8      	adds	r3, #200	; 0xc8
 80058ba:	2200      	movs	r2, #0
 80058bc:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if ((TabGen[BAT_VALUE] < 50) && (TabGen[BAT_VALUE] >= 20))
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	33a8      	adds	r3, #168	; 0xa8
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b31      	cmp	r3, #49	; 0x31
 80058c6:	dc1c      	bgt.n	8005902 <TaskUpdateUpperLed+0x146>
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	33a8      	adds	r3, #168	; 0xa8
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b13      	cmp	r3, #19
 80058d0:	dd17      	ble.n	8005902 <TaskUpdateUpperLed+0x146>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 127;
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	33b4      	adds	r3, #180	; 0xb4
 80058d6:	227f      	movs	r2, #127	; 0x7f
 80058d8:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 10;
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	33b8      	adds	r3, #184	; 0xb8
 80058de:	220a      	movs	r2, #10
 80058e0:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	33bc      	adds	r3, #188	; 0xbc
 80058e6:	2200      	movs	r2, #0
 80058e8:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	33c0      	adds	r3, #192	; 0xc0
 80058ee:	2200      	movs	r2, #0
 80058f0:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	33c4      	adds	r3, #196	; 0xc4
 80058f6:	2200      	movs	r2, #0
 80058f8:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	33c8      	adds	r3, #200	; 0xc8
 80058fe:	2200      	movs	r2, #0
 8005900:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
					TabGen[LEDV0] = 0;
					TabGen[LEDB0] = 0;
				}
			}
			if (TabGen[BAT_VALUE] < 20)
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	33a8      	adds	r3, #168	; 0xa8
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2b13      	cmp	r3, #19
 800590a:	dc1a      	bgt.n	8005942 <TaskUpdateUpperLed+0x186>
			{
				if (BOX4GAZ == 0)
				{
					TabGen[LEDR] = 100;
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	33b4      	adds	r3, #180	; 0xb4
 8005910:	2264      	movs	r2, #100	; 0x64
 8005912:	601a      	str	r2, [r3, #0]
					TabGen[LEDV] = 0;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	33b8      	adds	r3, #184	; 0xb8
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]
					TabGen[LEDB] = 0;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	33bc      	adds	r3, #188	; 0xbc
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
					TabGen[LEDR0] = 0;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	33c0      	adds	r3, #192	; 0xc0
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
					TabGen[LEDV0] = 0;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	33c4      	adds	r3, #196	; 0xc4
 8005930:	2200      	movs	r2, #0
 8005932:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	33c8      	adds	r3, #200	; 0xc8
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
					TabGen[LEDB0] = 0;
				}
			}
		}

		break;
 800593c:	e001      	b.n	8005942 <TaskUpdateUpperLed+0x186>

	default:
		break;
 800593e:	bf00      	nop
 8005940:	e000      	b.n	8005944 <TaskUpdateUpperLed+0x188>
		break;
 8005942:	bf00      	nop
	}
}
 8005944:	bf00      	nop
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <TaskCharger>:
//		break;
//	}
//}

void TaskCharger(int TabGen[])
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	int bmsEOC = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
	int bmsCharge = 0;
 8005958:	2300      	movs	r3, #0
 800595a:	60bb      	str	r3, [r7, #8]
	//*bmsEOC_out = InEOC();
	//*bmsCharge_out = InCHG();

	// by I2C

	if (TabGen[LOCK_I2C1] == 0) // I2C available
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	33ec      	adds	r3, #236	; 0xec
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <TaskCharger+0x3a>
	{
		TabGen[LOCK_I2C1] = 1; // I2C locked for interrupt on TIM7
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	33ec      	adds	r3, #236	; 0xec
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]

		//HAL_Delay(1);
		chargerRead(&bmsEOC, &bmsCharge, TabGen);
 800596e:	f107 0108 	add.w	r1, r7, #8
 8005972:	f107 030c 	add.w	r3, r7, #12
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd f8c1 	bl	8002b00 <chargerRead>
		//HAL_Delay(1);

		TabGen[LOCK_I2C1] = 0;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	33ec      	adds	r3, #236	; 0xec
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]
	}

	TabGen[EOC] = bmsEOC;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	33b0      	adds	r3, #176	; 0xb0
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	601a      	str	r2, [r3, #0]
	TabGen[CHARGEC] = bmsCharge;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	33ac      	adds	r3, #172	; 0xac
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	601a      	str	r2, [r3, #0]

}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <TaskReadBat>:
//		break;
//	} 
//}

void TaskReadBat(int TabGen[])
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
	int percent;

	ReadBat(&percent, 1, 1, TabGen);
 80059a6:	f107 000c 	add.w	r0, r7, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	2101      	movs	r1, #1
 80059b0:	f7fd f8e2 	bl	8002b78 <ReadBat>
	TabGen[BAT_VALUE] = percent;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	33a8      	adds	r3, #168	; 0xa8
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	601a      	str	r2, [r3, #0]
}
 80059bc:	bf00      	nop
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <TaskExtButton>:

extern uint32_t low_bat_shutdown;

void TaskExtButton(int TabGen[])
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]

	int i = 0;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60fb      	str	r3, [r7, #12]
	int butOn = 1;
 80059d0:	2301      	movs	r3, #1
 80059d2:	60bb      	str	r3, [r7, #8]

	if ((TabGen[NS_ON] > 30 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)) // >3s
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	3358      	adds	r3, #88	; 0x58
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b1e      	cmp	r3, #30
 80059dc:	dc05      	bgt.n	80059ea <TaskExtButton+0x26>
 80059de:	4ba3      	ldr	r3, [pc, #652]	; (8005c6c <TaskExtButton+0x2a8>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4aa3      	ldr	r2, [pc, #652]	; (8005c70 <TaskExtButton+0x2ac>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	f240 813c 	bls.w	8005c62 <TaskExtButton+0x29e>
	{
		PowerVib(100);
 80059ea:	2064      	movs	r0, #100	; 0x64
 80059ec:	f7fd f877 	bl	8002ade <PowerVib>

//		ScreenMessExt3s();
		display_wait(1);
 80059f0:	2001      	movs	r0, #1
 80059f2:	f7fc fd7f 	bl	80024f4 <display_wait>

		i = 0;
 80059f6:	2300      	movs	r3, #0
 80059f8:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 80059fa:	e00f      	b.n	8005a1c <TaskExtButton+0x58>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 80059fc:	200a      	movs	r0, #10
 80059fe:	f006 f963 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005a02:	f7fe f8ef 	bl	8003be4 <InOn>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d102      	bne.n	8005a12 <TaskExtButton+0x4e>
			{
				butOn = 1;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	e001      	b.n	8005a16 <TaskExtButton+0x52>
			}
			else
			{
				butOn = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2b31      	cmp	r3, #49	; 0x31
 8005a20:	dc07      	bgt.n	8005a32 <TaskExtButton+0x6e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d0e9      	beq.n	80059fc <TaskExtButton+0x38>
 8005a28:	4b90      	ldr	r3, [pc, #576]	; (8005c6c <TaskExtButton+0x2a8>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a90      	ldr	r2, [pc, #576]	; (8005c70 <TaskExtButton+0x2ac>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d8e4      	bhi.n	80059fc <TaskExtButton+0x38>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d004      	beq.n	8005a42 <TaskExtButton+0x7e>
 8005a38:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <TaskExtButton+0x2a8>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a8c      	ldr	r2, [pc, #560]	; (8005c70 <TaskExtButton+0x2ac>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d902      	bls.n	8005a48 <TaskExtButton+0x84>
		{
			//ScreenMessExt2s();
			display_wait(2);
 8005a42:	2002      	movs	r0, #2
 8005a44:	f7fc fd56 	bl	80024f4 <display_wait>

		}
		i = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005a4c:	e00f      	b.n	8005a6e <TaskExtButton+0xaa>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005a4e:	200a      	movs	r0, #10
 8005a50:	f006 f93a 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005a54:	f7fe f8c6 	bl	8003be4 <InOn>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d102      	bne.n	8005a64 <TaskExtButton+0xa0>
			{
				butOn = 1;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	60bb      	str	r3, [r7, #8]
 8005a62:	e001      	b.n	8005a68 <TaskExtButton+0xa4>
			}
			else
			{
				butOn = 0;
 8005a64:	2300      	movs	r3, #0
 8005a66:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2b31      	cmp	r3, #49	; 0x31
 8005a72:	dc07      	bgt.n	8005a84 <TaskExtButton+0xc0>
				&& (butOn || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d1e9      	bne.n	8005a4e <TaskExtButton+0x8a>
 8005a7a:	4b7c      	ldr	r3, [pc, #496]	; (8005c6c <TaskExtButton+0x2a8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a7c      	ldr	r2, [pc, #496]	; (8005c70 <TaskExtButton+0x2ac>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d8e4      	bhi.n	8005a4e <TaskExtButton+0x8a>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d004      	beq.n	8005a94 <TaskExtButton+0xd0>
 8005a8a:	4b78      	ldr	r3, [pc, #480]	; (8005c6c <TaskExtButton+0x2a8>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a78      	ldr	r2, [pc, #480]	; (8005c70 <TaskExtButton+0x2ac>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d902      	bls.n	8005a9a <TaskExtButton+0xd6>
		{
			//ScreenMessExt1s();
			display_wait(3);
 8005a94:	2003      	movs	r0, #3
 8005a96:	f7fc fd2d 	bl	80024f4 <display_wait>
		}
		i = 0;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005a9e:	e00f      	b.n	8005ac0 <TaskExtButton+0xfc>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005aa0:	200a      	movs	r0, #10
 8005aa2:	f006 f911 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005aa6:	f7fe f89d 	bl	8003be4 <InOn>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d102      	bne.n	8005ab6 <TaskExtButton+0xf2>
			{
				butOn = 1;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	60bb      	str	r3, [r7, #8]
 8005ab4:	e001      	b.n	8005aba <TaskExtButton+0xf6>
			}
			else
			{
				butOn = 0;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2b31      	cmp	r3, #49	; 0x31
 8005ac4:	dc07      	bgt.n	8005ad6 <TaskExtButton+0x112>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d0e9      	beq.n	8005aa0 <TaskExtButton+0xdc>
 8005acc:	4b67      	ldr	r3, [pc, #412]	; (8005c6c <TaskExtButton+0x2a8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a67      	ldr	r2, [pc, #412]	; (8005c70 <TaskExtButton+0x2ac>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d8e4      	bhi.n	8005aa0 <TaskExtButton+0xdc>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d004      	beq.n	8005ae6 <TaskExtButton+0x122>
 8005adc:	4b63      	ldr	r3, [pc, #396]	; (8005c6c <TaskExtButton+0x2a8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a63      	ldr	r2, [pc, #396]	; (8005c70 <TaskExtButton+0x2ac>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d902      	bls.n	8005aec <TaskExtButton+0x128>
		{
			//ScreenMessExt1s();
			display_wait(4);
 8005ae6:	2004      	movs	r0, #4
 8005ae8:	f7fc fd04 	bl	80024f4 <display_wait>
		}
		i = 0;
 8005aec:	2300      	movs	r3, #0
 8005aee:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005af0:	e00f      	b.n	8005b12 <TaskExtButton+0x14e>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005af2:	200a      	movs	r0, #10
 8005af4:	f006 f8e8 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005af8:	f7fe f874 	bl	8003be4 <InOn>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d102      	bne.n	8005b08 <TaskExtButton+0x144>
			{
				butOn = 1;
 8005b02:	2301      	movs	r3, #1
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	e001      	b.n	8005b0c <TaskExtButton+0x148>
			}
			else
			{
				butOn = 0;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b31      	cmp	r3, #49	; 0x31
 8005b16:	dc07      	bgt.n	8005b28 <TaskExtButton+0x164>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d0e9      	beq.n	8005af2 <TaskExtButton+0x12e>
 8005b1e:	4b53      	ldr	r3, [pc, #332]	; (8005c6c <TaskExtButton+0x2a8>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a53      	ldr	r2, [pc, #332]	; (8005c70 <TaskExtButton+0x2ac>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d8e4      	bhi.n	8005af2 <TaskExtButton+0x12e>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d004      	beq.n	8005b38 <TaskExtButton+0x174>
 8005b2e:	4b4f      	ldr	r3, [pc, #316]	; (8005c6c <TaskExtButton+0x2a8>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a4f      	ldr	r2, [pc, #316]	; (8005c70 <TaskExtButton+0x2ac>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d902      	bls.n	8005b3e <TaskExtButton+0x17a>
		{
			//ScreenMessExt1s();
			display_wait(5);
 8005b38:	2005      	movs	r0, #5
 8005b3a:	f7fc fcdb 	bl	80024f4 <display_wait>
		}
		i = 0;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005b42:	e00f      	b.n	8005b64 <TaskExtButton+0x1a0>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005b44:	200a      	movs	r0, #10
 8005b46:	f006 f8bf 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005b4a:	f7fe f84b 	bl	8003be4 <InOn>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d102      	bne.n	8005b5a <TaskExtButton+0x196>
			{
				butOn = 1;
 8005b54:	2301      	movs	r3, #1
 8005b56:	60bb      	str	r3, [r7, #8]
 8005b58:	e001      	b.n	8005b5e <TaskExtButton+0x19a>
			}
			else
			{
				butOn = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3301      	adds	r3, #1
 8005b62:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2b31      	cmp	r3, #49	; 0x31
 8005b68:	dc07      	bgt.n	8005b7a <TaskExtButton+0x1b6>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d0e9      	beq.n	8005b44 <TaskExtButton+0x180>
 8005b70:	4b3e      	ldr	r3, [pc, #248]	; (8005c6c <TaskExtButton+0x2a8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a3e      	ldr	r2, [pc, #248]	; (8005c70 <TaskExtButton+0x2ac>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d8e4      	bhi.n	8005b44 <TaskExtButton+0x180>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d004      	beq.n	8005b8a <TaskExtButton+0x1c6>
 8005b80:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <TaskExtButton+0x2a8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a3a      	ldr	r2, [pc, #232]	; (8005c70 <TaskExtButton+0x2ac>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d902      	bls.n	8005b90 <TaskExtButton+0x1cc>
		{
			//ScreenMessExt1s();
			display_wait(6);
 8005b8a:	2006      	movs	r0, #6
 8005b8c:	f7fc fcb2 	bl	80024f4 <display_wait>
		}
		i = 0;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005b94:	e00f      	b.n	8005bb6 <TaskExtButton+0x1f2>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005b96:	200a      	movs	r0, #10
 8005b98:	f006 f896 	bl	800bcc8 <HAL_Delay>
			if ((InOn() == 1))
 8005b9c:	f7fe f822 	bl	8003be4 <InOn>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d102      	bne.n	8005bac <TaskExtButton+0x1e8>
			{
				butOn = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	e001      	b.n	8005bb0 <TaskExtButton+0x1ec>
			}
			else
			{
				butOn = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60bb      	str	r3, [r7, #8]
			}
			i = i + 1;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b31      	cmp	r3, #49	; 0x31
 8005bba:	dc07      	bgt.n	8005bcc <TaskExtButton+0x208>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	d0e9      	beq.n	8005b96 <TaskExtButton+0x1d2>
 8005bc2:	4b2a      	ldr	r3, [pc, #168]	; (8005c6c <TaskExtButton+0x2a8>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a2a      	ldr	r2, [pc, #168]	; (8005c70 <TaskExtButton+0x2ac>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d8e4      	bhi.n	8005b96 <TaskExtButton+0x1d2>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d004      	beq.n	8005bdc <TaskExtButton+0x218>
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <TaskExtButton+0x2a8>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a26      	ldr	r2, [pc, #152]	; (8005c70 <TaskExtButton+0x2ac>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d902      	bls.n	8005be2 <TaskExtButton+0x21e>
		{
			//ScreenMessExt1s();
			display_wait(7);
 8005bdc:	2007      	movs	r0, #7
 8005bde:	f7fc fc89 	bl	80024f4 <display_wait>
		}
		i = 0;
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
		while ((i < 50)
 8005be6:	e007      	b.n	8005bf8 <TaskExtButton+0x234>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
		{
			HAL_Delay(10);
 8005be8:	200a      	movs	r0, #10
 8005bea:	f006 f86d 	bl	800bcc8 <HAL_Delay>
			//}
			//else
			//{
			//butOn = 0;
			//}
			i = i + 1;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	60fb      	str	r3, [r7, #12]
			butOn = 1; // Even if you stop pressing the ON/OFF button, device will turn off while showing "Extinction"
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	60bb      	str	r3, [r7, #8]
		while ((i < 50)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b31      	cmp	r3, #49	; 0x31
 8005bfc:	dc07      	bgt.n	8005c0e <TaskExtButton+0x24a>
				&& (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT))
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d0f1      	beq.n	8005be8 <TaskExtButton+0x224>
 8005c04:	4b19      	ldr	r3, [pc, #100]	; (8005c6c <TaskExtButton+0x2a8>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <TaskExtButton+0x2ac>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d8ec      	bhi.n	8005be8 <TaskExtButton+0x224>
		}
		if (butOn == 1 || low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT)
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d004      	beq.n	8005c1e <TaskExtButton+0x25a>
 8005c14:	4b15      	ldr	r3, [pc, #84]	; (8005c6c <TaskExtButton+0x2a8>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a15      	ldr	r2, [pc, #84]	; (8005c70 <TaskExtButton+0x2ac>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d921      	bls.n	8005c62 <TaskExtButton+0x29e>
		{
			//ScreenMessExtOnly();
			display_wait(8);
 8005c1e:	2008      	movs	r0, #8
 8005c20:	f7fc fc68 	bl	80024f4 <display_wait>

			PowerVib(100);
 8005c24:	2064      	movs	r0, #100	; 0x64
 8005c26:	f7fc ff5a 	bl	8002ade <PowerVib>
			HAL_Delay(500);
 8005c2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c2e:	f006 f84b 	bl	800bcc8 <HAL_Delay>
			LedOff(TabGen);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fe fcee 	bl	8004614 <LedOff>
			//ScreenMessEmpty();
			display_Print("");
 8005c38:	480e      	ldr	r0, [pc, #56]	; (8005c74 <TaskExtButton+0x2b0>)
 8005c3a:	f7fc fdad 	bl	8002798 <display_Print>
			//HAL_Delay(2000);
			TabGen[STOPDEVICE] = 1;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	33cc      	adds	r3, #204	; 0xcc
 8005c42:	2201      	movs	r2, #1
 8005c44:	601a      	str	r2, [r3, #0]
			//  HAL_Delay(1);
			//  OutDone(1);
			//  HAL_Delay(1);
			//  OutDone(0);
			//  HAL_Delay(1000);
			HAL_Delay(2000);
 8005c46:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c4a:	f006 f83d 	bl	800bcc8 <HAL_Delay>
			OutDone1(1); //Start Powersave part 1
 8005c4e:	2001      	movs	r0, #1
 8005c50:	f7fd fed0 	bl	80039f4 <OutDone1>
			OutDone2(0); //Start Powersave part 2
 8005c54:	2000      	movs	r0, #0
 8005c56:	f7fd fee5 	bl	8003a24 <OutDone2>
			//powerSave = 1;
			HAL_Delay(1000);
 8005c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c5e:	f006 f833 	bl	800bcc8 <HAL_Delay>
		}
	}
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20000c04 	.word	0x20000c04
 8005c70:	000186a0 	.word	0x000186a0
 8005c74:	0801bd0c 	.word	0x0801bd0c

08005c78 <TaskFallTest>:

void TaskFallTest(int TabAlert[], int TabGen[])
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]

	int fallBrutal = 0;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]

	if ((TabGen[FALL_DELAY] == 0) && (TabAlert[ALERT_FALL] == 0)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	3328      	adds	r3, #40	; 0x28
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d14a      	bne.n	8005d26 <TaskFallTest+0xae>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3334      	adds	r3, #52	; 0x34
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d145      	bne.n	8005d26 <TaskFallTest+0xae>
			&& (TabAlert[ALERT_MALAISE] == 0))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d140      	bne.n	8005d26 <TaskFallTest+0xae>
	{
		if (TabGen[FALL_COND_3] == 1)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	3378      	adds	r3, #120	; 0x78
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d112      	bne.n	8005cd4 <TaskFallTest+0x5c>
		{
			TabGen[FALL_COND_3] = 0;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	3378      	adds	r3, #120	; 0x78
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	601a      	str	r2, [r3, #0]
			uint8_t z = 0;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	72fb      	strb	r3, [r7, #11]
			z = test_chute(ar_full, y_full);
 8005cba:	492a      	ldr	r1, [pc, #168]	; (8005d64 <TaskFallTest+0xec>)
 8005cbc:	482a      	ldr	r0, [pc, #168]	; (8005d68 <TaskFallTest+0xf0>)
 8005cbe:	f7fd fa8d 	bl	80031dc <test_chute>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	72fb      	strb	r3, [r7, #11]
//			for ( int k = 0; k < 400 ; k++) // on teste si on a un grand pic qui va caract�riser surement une chute pas besoin de v�rifier l'angle
//			{
//				if (ar_full[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			if (z == 1)
 8005cc6:	7afb      	ldrb	r3, [r7, #11]
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d103      	bne.n	8005cd4 <TaskFallTest+0x5c>
			{
				TabGen[FALL_DELAY] = 1;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	3328      	adds	r3, #40	; 0x28
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
			}
		}
		if (TabGen[FALL_COND_4] == 1)
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	337c      	adds	r3, #124	; 0x7c
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d112      	bne.n	8005d04 <TaskFallTest+0x8c>
		{
			uint8_t z = 0;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	72bb      	strb	r3, [r7, #10]
			z = test_chute(arr, yy);
 8005ce2:	4922      	ldr	r1, [pc, #136]	; (8005d6c <TaskFallTest+0xf4>)
 8005ce4:	4822      	ldr	r0, [pc, #136]	; (8005d70 <TaskFallTest+0xf8>)
 8005ce6:	f7fd fa79 	bl	80031dc <test_chute>
 8005cea:	4603      	mov	r3, r0
 8005cec:	72bb      	strb	r3, [r7, #10]
//			{
//				if (arr[k] > NBECHBRUTALFALL)
//				{fallBrutal = 1;}
//			}
			//z= test_chute(ar_full,y_full);
			if (z == 1)
 8005cee:	7abb      	ldrb	r3, [r7, #10]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d103      	bne.n	8005cfc <TaskFallTest+0x84>
			{
				TabGen[FALL_DELAY] = 1;
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	3328      	adds	r3, #40	; 0x28
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
			}
			TabGen[FALL_COND_4] = 0;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	337c      	adds	r3, #124	; 0x7c
 8005d00:	2200      	movs	r2, #0
 8005d02:	601a      	str	r2, [r3, #0]
		}
		if (fallBrutal == 1)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d10d      	bne.n	8005d26 <TaskFallTest+0xae>
		{
			fallBrutal = 0;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
			TabAlert[ALERT_FALL] = 1;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	3334      	adds	r3, #52	; 0x34
 8005d12:	2201      	movs	r2, #1
 8005d14:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	332c      	adds	r3, #44	; 0x2c
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	3328      	adds	r3, #40	; 0x28
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[FALL_DELAY] == 1) && (TabAlert[ALERT_FALL] == 0))
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	3328      	adds	r3, #40	; 0x28
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d115      	bne.n	8005d5c <TaskFallTest+0xe4>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	3334      	adds	r3, #52	; 0x34
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d110      	bne.n	8005d5c <TaskFallTest+0xe4>
	{
		if (TabGen[FALL_UP_DELAY] == 1)
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	332c      	adds	r3, #44	; 0x2c
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d10b      	bne.n	8005d5c <TaskFallTest+0xe4>
		{
			TabAlert[ALERT_FALL] = 1;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	3334      	adds	r3, #52	; 0x34
 8005d48:	2201      	movs	r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]
			TabGen[FALL_UP_DELAY] = 0;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	332c      	adds	r3, #44	; 0x2c
 8005d50:	2200      	movs	r2, #0
 8005d52:	601a      	str	r2, [r3, #0]
			TabGen[FALL_DELAY] = 0;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	3328      	adds	r3, #40	; 0x28
 8005d58:	2200      	movs	r2, #0
 8005d5a:	601a      	str	r2, [r3, #0]
		}
	}

}
 8005d5c:	bf00      	nop
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20003170 	.word	0x20003170
 8005d68:	200028e0 	.word	0x200028e0
 8005d6c:	20002fa0 	.word	0x20002fa0
 8005d70:	20002260 	.word	0x20002260

08005d74 <TaskAlertAll>:

void TaskAlertAll(int TabAlert[], int TabGen[], uint32_t TabAlertAll[],
		float TabFloatValue[]) // int *sosRelach, uint32_t *OnLength, uint32_t *On_nb_sample, int *sigSend, char lcd_buf1[], char lcd_buf2[], uint32_t  *nS_malaise, uint32_t  *nS_immo, uint32_t  *nS_fall, int *h2sAlerte, int *COAlerte, int *sos, int *fallmalaise, int *send_mess, uint32_t *SOS_nb_sample, uint32_t *alert_t0, uint32_t *alert_duration, uint32_t *sosLength, int *malaise, int *fall, int *alert_on, int *alert_on_previous, int *gps_on, int *buz_on, int *ledAlert)
{
 8005d74:	b590      	push	{r4, r7, lr}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
//#define NB_GAZ_END    11

//uint8_t charuart[11];
	uint32_t millis2;

	millis2 = HAL_GetTick();
 8005d82:	f005 ff95 	bl	800bcb0 <HAL_GetTick>
 8005d86:	6138      	str	r0, [r7, #16]

//char bufferSig[30];

	if (TabGen[ALERT_ON] == 0)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f040 80fe 	bne.w	8005f8e <TaskAlertAll+0x21a>
	{
		if (TabAlert[ALERT_SOS] == 1)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3304      	adds	r3, #4
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d104      	bne.n	8005da6 <TaskAlertAll+0x32>
		{
			TabGen[TYPE_ALERT] = ALERT_SOS;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	3390      	adds	r3, #144	; 0x90
 8005da0:	2201      	movs	r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e0f3      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_FALL] == 1
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3334      	adds	r3, #52	; 0x34
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d113      	bne.n	8005dd8 <TaskAlertAll+0x64>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005db0:	f005 ff7e 	bl	800bcb0 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	3308      	adds	r3, #8
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d908      	bls.n	8005dd8 <TaskAlertAll+0x64>
		{
			TabGen[TYPE_ALERT] = ALERT_FALL;
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	3390      	adds	r3, #144	; 0x90
 8005dca:	220d      	movs	r2, #13
 8005dcc:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e0da      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_MALAISE] == 1
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d113      	bne.n	8005e0a <TaskAlertAll+0x96>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005de2:	f005 ff65 	bl	800bcb0 <HAL_GetTick>
 8005de6:	4602      	mov	r2, r0
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	3308      	adds	r3, #8
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d908      	bls.n	8005e0a <TaskAlertAll+0x96>
		{
			TabGen[TYPE_ALERT] = ALERT_MALAISE;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	3390      	adds	r3, #144	; 0x90
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	3308      	adds	r3, #8
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	e0c1      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_EX] == 1)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3330      	adds	r3, #48	; 0x30
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d113      	bne.n	8005e3c <TaskAlertAll+0xc8>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005e14:	f005 ff4c 	bl	800bcb0 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	3308      	adds	r3, #8
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d908      	bls.n	8005e3c <TaskAlertAll+0xc8>
		{
			TabGen[TYPE_ALERT] = ALERT_EX;
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	3390      	adds	r3, #144	; 0x90
 8005e2e:	220c      	movs	r2, #12
 8005e30:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	3308      	adds	r3, #8
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e0a8      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_O2] == 1)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3324      	adds	r3, #36	; 0x24
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d113      	bne.n	8005e6e <TaskAlertAll+0xfa>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005e46:	f005 ff33 	bl	800bcb0 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3308      	adds	r3, #8
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	1ad3      	subs	r3, r2, r3
 8005e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d908      	bls.n	8005e6e <TaskAlertAll+0xfa>
		{
			TabGen[TYPE_ALERT] = ALERT_O2;
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	3390      	adds	r3, #144	; 0x90
 8005e60:	2209      	movs	r2, #9
 8005e62:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3308      	adds	r3, #8
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	601a      	str	r2, [r3, #0]
 8005e6c:	e08f      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVME] == 1)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	3328      	adds	r3, #40	; 0x28
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d113      	bne.n	8005ea0 <TaskAlertAll+0x12c>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005e78:	f005 ff1a 	bl	800bcb0 <HAL_GetTick>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	3308      	adds	r3, #8
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d908      	bls.n	8005ea0 <TaskAlertAll+0x12c>
		{
			TabGen[TYPE_ALERT] = ALERT_COVME;
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3390      	adds	r3, #144	; 0x90
 8005e92:	220a      	movs	r2, #10
 8005e94:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3308      	adds	r3, #8
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	601a      	str	r2, [r3, #0]
 8005e9e:	e076      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVME] == 1)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	331c      	adds	r3, #28
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d113      	bne.n	8005ed2 <TaskAlertAll+0x15e>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005eaa:	f005 ff01 	bl	800bcb0 <HAL_GetTick>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3308      	adds	r3, #8
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d908      	bls.n	8005ed2 <TaskAlertAll+0x15e>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVME;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3390      	adds	r3, #144	; 0x90
 8005ec4:	2207      	movs	r2, #7
 8005ec6:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3308      	adds	r3, #8
 8005ecc:	693a      	ldr	r2, [r7, #16]
 8005ece:	601a      	str	r2, [r3, #0]
 8005ed0:	e05d      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_COVLCT] == 1)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	332c      	adds	r3, #44	; 0x2c
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d113      	bne.n	8005f04 <TaskAlertAll+0x190>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005edc:	f005 fee8 	bl	800bcb0 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	3308      	adds	r3, #8
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d908      	bls.n	8005f04 <TaskAlertAll+0x190>
		{
			TabGen[TYPE_ALERT] = ALERT_COVLCT;
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	3390      	adds	r3, #144	; 0x90
 8005ef6:	220b      	movs	r2, #11
 8005ef8:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3308      	adds	r3, #8
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	e044      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if ((TabAlert[ALERT_H2SVLCT] == 1)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	3320      	adds	r3, #32
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d113      	bne.n	8005f36 <TaskAlertAll+0x1c2>
				&& ((HAL_GetTick() - TabAlertAll[ALL_TIM_3]) > NB_MS_REALERTGAZ))
 8005f0e:	f005 fecf 	bl	800bcb0 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3308      	adds	r3, #8
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d908      	bls.n	8005f36 <TaskAlertAll+0x1c2>
		{
			TabGen[TYPE_ALERT] = ALERT_H2SVLCT;
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	3390      	adds	r3, #144	; 0x90
 8005f28:	2208      	movs	r2, #8
 8005f2a:	601a      	str	r2, [r3, #0]
			TabAlertAll[ALL_TIM_3] = millis2;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	3308      	adds	r3, #8
 8005f30:	693a      	ldr	r2, [r7, #16]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e02b      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_SONO] == 1)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	330c      	adds	r3, #12
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d104      	bne.n	8005f4a <TaskAlertAll+0x1d6>
		{
			TabGen[TYPE_ALERT] = ALERT_SONO;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	3390      	adds	r3, #144	; 0x90
 8005f44:	2203      	movs	r2, #3
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e021      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_COL] == 1)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	3310      	adds	r3, #16
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d104      	bne.n	8005f5e <TaskAlertAll+0x1ea>
		{
			TabGen[TYPE_ALERT] = ALERT_COL;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	3390      	adds	r3, #144	; 0x90
 8005f58:	2204      	movs	r2, #4
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e017      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_DIST] == 1)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3314      	adds	r3, #20
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	d104      	bne.n	8005f72 <TaskAlertAll+0x1fe>
		{
			TabGen[TYPE_ALERT] = ALERT_DIST;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	3390      	adds	r3, #144	; 0x90
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e00d      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else if (TabAlert[ALERT_LOWBAT] == 1)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	3318      	adds	r3, #24
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d104      	bne.n	8005f86 <TaskAlertAll+0x212>
		{
			TabGen[TYPE_ALERT] = ALERT_LOWBAT;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	3390      	adds	r3, #144	; 0x90
 8005f80:	2206      	movs	r2, #6
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e003      	b.n	8005f8e <TaskAlertAll+0x21a>
		}
		else
		{
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	3390      	adds	r3, #144	; 0x90
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	601a      	str	r2, [r3, #0]
		}
	}

	if ((TabGen[TYPE_ALERT] != NONE_ALERT) && (TabGen[ALERT_ON] == 0))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	3390      	adds	r3, #144	; 0x90
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d077      	beq.n	8006088 <TaskAlertAll+0x314>
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d173      	bne.n	8006088 <TaskAlertAll+0x314>
	{
		TabAlertAll[ALL_TIM_1] = HAL_GetTick(); // beg. timer
 8005fa0:	f005 fe86 	bl	800bcb0 <HAL_GetTick>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_ON] = 1;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]
		TabGen[GPS_ON] = 1;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
		// Big Led Blinking (major)
		if ((TabAlert[ALERT_FALL] == 1) || (TabAlert[ALERT_MALAISE] == 1)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3334      	adds	r3, #52	; 0x34
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d027      	beq.n	8006012 <TaskAlertAll+0x29e>
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3308      	adds	r3, #8
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d022      	beq.n	8006012 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_SOS] == 1) || (TabAlert[ALERT_EX] == 1)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d01d      	beq.n	8006012 <TaskAlertAll+0x29e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	3330      	adds	r3, #48	; 0x30
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d018      	beq.n	8006012 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_O2] == 1) || (TabAlert[ALERT_COVLCT] == 1)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	3324      	adds	r3, #36	; 0x24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d013      	beq.n	8006012 <TaskAlertAll+0x29e>
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	332c      	adds	r3, #44	; 0x2c
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b01      	cmp	r3, #1
 8005ff2:	d00e      	beq.n	8006012 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_H2SVLCT] == 1) || (TabAlert[ALERT_COL] == 1)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3320      	adds	r3, #32
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d009      	beq.n	8006012 <TaskAlertAll+0x29e>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3310      	adds	r3, #16
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d004      	beq.n	8006012 <TaskAlertAll+0x29e>
				|| (TabAlert[ALERT_DIST])) // Big Alert
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3314      	adds	r3, #20
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d013      	beq.n	800603a <TaskAlertAll+0x2c6>
		{
			TabGen[BUZ_ON_FAST] = 1;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	3308      	adds	r3, #8
 8006016:	2201      	movs	r2, #1
 8006018:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_FAST] = 1;
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	330c      	adds	r3, #12
 800601e:	2201      	movs	r2, #1
 8006020:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_FAST] = 1;
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3310      	adds	r3, #16
 8006026:	2201      	movs	r2, #1
 8006028:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 800602a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800602e:	2203      	movs	r2, #3
 8006030:	4971      	ldr	r1, [pc, #452]	; (80061f8 <TaskAlertAll+0x484>)
 8006032:	4872      	ldr	r0, [pc, #456]	; (80061fc <TaskAlertAll+0x488>)
 8006034:	f00b fe44 	bl	8011cc0 <HAL_UART_Transmit>
 8006038:	e026      	b.n	8006088 <TaskAlertAll+0x314>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

		}
		else if ((TabAlert[ALERT_COVME] == 1) || (TabAlert[ALERT_H2SVME] == 1)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	3328      	adds	r3, #40	; 0x28
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b01      	cmp	r3, #1
 8006042:	d00e      	beq.n	8006062 <TaskAlertAll+0x2ee>
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	331c      	adds	r3, #28
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d009      	beq.n	8006062 <TaskAlertAll+0x2ee>
				|| (TabAlert[ALERT_SONO] == 1) || (TabAlert[ALERT_LOWBAT]))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	330c      	adds	r3, #12
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d004      	beq.n	8006062 <TaskAlertAll+0x2ee>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	3318      	adds	r3, #24
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d012      	beq.n	8006088 <TaskAlertAll+0x314>
		{
			TabGen[BUZ_ON_SLOW] = 1;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	3314      	adds	r3, #20
 8006066:	2201      	movs	r2, #1
 8006068:	601a      	str	r2, [r3, #0]
			TabGen[LED_ON_SLOW] = 1;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	3318      	adds	r3, #24
 800606e:	2201      	movs	r2, #1
 8006070:	601a      	str	r2, [r3, #0]
			TabGen[VIB_ON_SLOW] = 1;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	331c      	adds	r3, #28
 8006076:	2201      	movs	r2, #1
 8006078:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A050B010C1D",
 800607a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800607e:	2203      	movs	r2, #3
 8006080:	495d      	ldr	r1, [pc, #372]	; (80061f8 <TaskAlertAll+0x484>)
 8006082:	485e      	ldr	r0, [pc, #376]	; (80061fc <TaskAlertAll+0x488>)
 8006084:	f00b fe1c 	bl	8011cc0 <HAL_UART_Transmit>

		}

	}

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
 800608c:	e008      	b.n	80060a0 <TaskAlertAll+0x32c>
	{
		TabAlert[i_fct] = 0;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	009b      	lsls	r3, r3, #2
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4413      	add	r3, r2
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++) // clear all alert
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	3301      	adds	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	2b0d      	cmp	r3, #13
 80060a4:	ddf3      	ble.n	800608e <TaskAlertAll+0x31a>
	}

	if (TabGen[ALERT_ON] == 1)  // if Alert Actually
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	f040 80a0 	bne.w	80061f0 <TaskAlertAll+0x47c>
	{
		if (TabGen[SOS_PUSH_LONG] == 1) // if long punch on SOS or ON/off button
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	3320      	adds	r3, #32
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d137      	bne.n	800612a <TaskAlertAll+0x3b6>
		{
			TabGen[ALERT_ON] = 0;     // clear alert
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	333c      	adds	r3, #60	; 0x3c
 80060c4:	2200      	movs	r2, #0
 80060c6:	601a      	str	r2, [r3, #0]
			TabGen[NS_IMMO] = 0;
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3340      	adds	r3, #64	; 0x40
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	3320      	adds	r3, #32
 80060d4:	2200      	movs	r2, #0
 80060d6:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3390      	adds	r3, #144	; 0x90
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",
 80060e0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80060e4:	2203      	movs	r2, #3
 80060e6:	4946      	ldr	r1, [pc, #280]	; (8006200 <TaskAlertAll+0x48c>)
 80060e8:	4844      	ldr	r0, [pc, #272]	; (80061fc <TaskAlertAll+0x488>)
 80060ea:	f00b fde9 	bl	8011cc0 <HAL_UART_Transmit>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500); // A periodicité, B fréquence, C on/off

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f103 0408 	add.w	r4, r3, #8
 80060f4:	f005 fddc 	bl	800bcb0 <HAL_GetTick>
 80060f8:	4603      	mov	r3, r0
 80060fa:	6023      	str	r3, [r4, #0]

			TabFloatValue[O2_VALUE] = 21;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	3304      	adds	r3, #4
 8006100:	4a40      	ldr	r2, [pc, #256]	; (8006204 <TaskAlertAll+0x490>)
 8006102:	601a      	str	r2, [r3, #0]
			TabFloatValue[CO_VALUE] = 0;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	3308      	adds	r3, #8
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	601a      	str	r2, [r3, #0]
			TabFloatValue[EX_VALUE] = 0;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	330c      	adds	r3, #12
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
			TabFloatValue[H2S_VALUE] = 0;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
			TabFloatValue[DB_VALUE] = 0;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	3310      	adds	r3, #16
 8006124:	f04f 0200 	mov.w	r2, #0
 8006128:	601a      	str	r2, [r3, #0]

		}

		if ((HAL_GetTick() - TabAlertAll[ALL_TIM_1]) > (c1.tps_Alarme * 1000)) // if timer to cancel alert is over
 800612a:	f005 fdc1 	bl	800bcb0 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	4a34      	ldr	r2, [pc, #208]	; (8006208 <TaskAlertAll+0x494>)
 8006138:	7912      	ldrb	r2, [r2, #4]
 800613a:	4611      	mov	r1, r2
 800613c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006140:	fb02 f201 	mul.w	r2, r2, r1
 8006144:	4293      	cmp	r3, r2
 8006146:	d953      	bls.n	80061f0 <TaskAlertAll+0x47c>
		{
			TabGen[NS_MALAISE] = 0;
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	333c      	adds	r3, #60	; 0x3c
 800614c:	2200      	movs	r2, #0
 800614e:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_PENDING] = 1;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006156:	2201      	movs	r2, #1
 8006158:	601a      	str	r2, [r3, #0]

			if (c1.com_sigfox == 1)
 800615a:	4b2b      	ldr	r3, [pc, #172]	; (8006208 <TaskAlertAll+0x494>)
 800615c:	79db      	ldrb	r3, [r3, #7]
 800615e:	2b01      	cmp	r3, #1
 8006160:	d103      	bne.n	800616a <TaskAlertAll+0x3f6>
			{

				TabGen[SIGFOX_SEND] = 1;   // send sigfox mess
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	3324      	adds	r3, #36	; 0x24
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]
			}
			if (c1.com_LoRa == 1)
 800616a:	4b27      	ldr	r3, [pc, #156]	; (8006208 <TaskAlertAll+0x494>)
 800616c:	7a1b      	ldrb	r3, [r3, #8]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d112      	bne.n	8006198 <TaskAlertAll+0x424>
			{
				if (c1.com_sigfox == 0)
 8006172:	4b25      	ldr	r3, [pc, #148]	; (8006208 <TaskAlertAll+0x494>)
 8006174:	79db      	ldrb	r3, [r3, #7]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <TaskAlertAll+0x412>
					TabGen[LORA_SEND] = 1; // send lora mess
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006180:	2201      	movs	r2, #1
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e008      	b.n	8006198 <TaskAlertAll+0x424>
				else
				{
					TabGen[DUAL_SEND] = 1;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800618c:	2201      	movs	r2, #1
 800618e:	601a      	str	r2, [r3, #0]
					TabGen[SIGFOX_SEND] = 0;
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	3324      	adds	r3, #36	; 0x24
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
				}
				//TabGen[SIGFOX_SEND] = 0;

			}
			if (c1.loraP2P == 1)
 8006198:	4b1b      	ldr	r3, [pc, #108]	; (8006208 <TaskAlertAll+0x494>)
 800619a:	799b      	ldrb	r3, [r3, #6]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d104      	bne.n	80061aa <TaskAlertAll+0x436>
			{
				TabGen[LORAP2P_SEND] = 1; // send lora mess
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
			}

			TabGen[SIG_ALERT] = TabGen[TYPE_ALERT];
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	33e0      	adds	r3, #224	; 0xe0
 80061ae:	68ba      	ldr	r2, [r7, #8]
 80061b0:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80061b4:	601a      	str	r2, [r3, #0]

			TabGen[NS_IMMO] = 0;
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	3340      	adds	r3, #64	; 0x40
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
			TabGen[ALERT_ON] = 0;     // clear alert
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
			TabGen[SOS_PUSH_LONG] = 0;  // clear push button
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	3320      	adds	r3, #32
 80061c8:	2200      	movs	r2, #0
 80061ca:	601a      	str	r2, [r3, #0]
			TabGen[TYPE_ALERT] = NONE_ALERT;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3390      	adds	r3, #144	; 0x90
 80061d0:	2200      	movs	r2, #0
 80061d2:	601a      	str	r2, [r3, #0]

			HAL_UART_Transmit(&huart1, (uint8_t*) "A000B000C0D",
 80061d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80061d8:	2203      	movs	r2, #3
 80061da:	4909      	ldr	r1, [pc, #36]	; (8006200 <TaskAlertAll+0x48c>)
 80061dc:	4807      	ldr	r0, [pc, #28]	; (80061fc <TaskAlertAll+0x488>)
 80061de:	f00b fd6f 	bl	8011cc0 <HAL_UART_Transmit>
					sizeof((uint8_t*) "A050B010C1D") - 1, 500);

			TabAlertAll[ALL_TIM_3] = HAL_GetTick();
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f103 0408 	add.w	r4, r3, #8
 80061e8:	f005 fd62 	bl	800bcb0 <HAL_GetTick>
 80061ec:	4603      	mov	r3, r0
 80061ee:	6023      	str	r3, [r4, #0]
		}
	}

}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd90      	pop	{r4, r7, pc}
 80061f8:	0801bd10 	.word	0x0801bd10
 80061fc:	2000342c 	.word	0x2000342c
 8006200:	0801bd1c 	.word	0x0801bd1c
 8006204:	41a80000 	.word	0x41a80000
 8006208:	20001158 	.word	0x20001158

0800620c <TaskOnScreen>:

extern uint8_t REBOOT_FROM_WATCHDOG;

void TaskOnScreen(int TabGen[], uint32_t *Timer_screen)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
//		display_InitBis();
//		TabGen[SCREENSTATE] = 1;
//		TabGen[SCREENSTATEON] = 0 ;
//	}

	if ((TabGen[RE_ON_SCREEN] == 1) || (TabGen[TYPE_ALERT] != NONE_ALERT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3350      	adds	r3, #80	; 0x50
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d004      	beq.n	800622a <TaskOnScreen+0x1e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3390      	adds	r3, #144	; 0x90
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d016      	beq.n	8006258 <TaskOnScreen+0x4c>
	{

		TabGen[RE_ON_SCREEN] = 0;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3350      	adds	r3, #80	; 0x50
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
		*Timer_screen = HAL_GetTick() - 1;
 8006232:	f005 fd3d 	bl	800bcb0 <HAL_GetTick>
 8006236:	4603      	mov	r3, r0
 8006238:	1e5a      	subs	r2, r3, #1
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	601a      	str	r2, [r3, #0]
		if (TabGen[SCREENSTATE] == 0)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	33d0      	adds	r3, #208	; 0xd0
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d107      	bne.n	8006258 <TaskOnScreen+0x4c>
		{
			ScreenOn();
 8006248:	f7fe fb7a 	bl	8004940 <ScreenOn>
			display_InitBis();
 800624c:	f7fb fac4 	bl	80017d8 <display_InitBis>
			TabGen[SCREENSTATE] = 1;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	33d0      	adds	r3, #208	; 0xd0
 8006254:	2201      	movs	r2, #1
 8006256:	601a      	str	r2, [r3, #0]
		}
	}

	if ((HAL_GetTick() - *Timer_screen) > (SEC_ONOFF_SCREEN * 1000))
 8006258:	f005 fd2a 	bl	800bcb0 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	f644 6220 	movw	r2, #20000	; 0x4e20
 8006268:	4293      	cmp	r3, r2
 800626a:	d905      	bls.n	8006278 <TaskOnScreen+0x6c>
	{
		//REBOOT_FROM_WATCHDOG = 0;
		ScreenOff();
 800626c:	f7fe fb7e 	bl	800496c <ScreenOff>
		TabGen[SCREENSTATE] = 0;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	33d0      	adds	r3, #208	; 0xd0
 8006274:	2200      	movs	r2, #0
 8006276:	601a      	str	r2, [r3, #0]
	}
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <TaskGPS>:

void TaskGPS(uint8_t RxI[], int TabGen[], uint32_t TabGpsTimer[],
		float TabFloatValue[])
{
 8006280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006284:	b088      	sub	sp, #32
 8006286:	af00      	add	r7, sp, #0
 8006288:	60f8      	str	r0, [r7, #12]
 800628a:	60b9      	str	r1, [r7, #8]
 800628c:	607a      	str	r2, [r7, #4]
 800628e:	603b      	str	r3, [r7, #0]

	float lati = 0;
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	61fb      	str	r3, [r7, #28]
	float longi = 0;
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	61bb      	str	r3, [r7, #24]

	if (c1.GPS_Actif == 1) // GPS IS ENABLED
 800629c:	4bda      	ldr	r3, [pc, #872]	; (8006608 <TaskGPS+0x388>)
 800629e:	7a5b      	ldrb	r3, [r3, #9]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f040 8284 	bne.w	80067ae <TaskGPS+0x52e>
	{
		if (TabGen[GPS_ON] == 1)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	3304      	adds	r3, #4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	f040 827e 	bne.w	80067ae <TaskGPS+0x52e>
		{
//			if ((RxI[0] == '$') && (RxI[1] == 'G') && (RxI[2] == 'N') && (RxI[3] == 'G') && (RxI[4] == 'G') && (RxI[5] == 'A'))
//			{

			if ((RxI[6] == ',') && (RxI[16] == ',') && (RxI[27] == ',')
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3306      	adds	r3, #6
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	2b2c      	cmp	r3, #44	; 0x2c
 80062ba:	f040 8278 	bne.w	80067ae <TaskGPS+0x52e>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	3310      	adds	r3, #16
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b2c      	cmp	r3, #44	; 0x2c
 80062c6:	f040 8272 	bne.w	80067ae <TaskGPS+0x52e>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	331b      	adds	r3, #27
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	2b2c      	cmp	r3, #44	; 0x2c
 80062d2:	f040 826c 	bne.w	80067ae <TaskGPS+0x52e>
					&& (RxI[29] == ',') && (RxI[41] == ',') && (RxI[43] == ','))
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	331d      	adds	r3, #29
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	2b2c      	cmp	r3, #44	; 0x2c
 80062de:	f040 8266 	bne.w	80067ae <TaskGPS+0x52e>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3329      	adds	r3, #41	; 0x29
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	2b2c      	cmp	r3, #44	; 0x2c
 80062ea:	f040 8260 	bne.w	80067ae <TaskGPS+0x52e>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	332b      	adds	r3, #43	; 0x2b
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	2b2c      	cmp	r3, #44	; 0x2c
 80062f6:	f040 825a 	bne.w	80067ae <TaskGPS+0x52e>
			{
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	3311      	adds	r3, #17
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	461a      	mov	r2, r3
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3312      	adds	r3, #18
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	3b30      	subs	r3, #48	; 0x30
 8006316:	4413      	add	r3, r2
						+ ((RxI[19] - 48) * pow(10, 6)
 8006318:	4618      	mov	r0, r3
 800631a:	f7fa f903 	bl	8000524 <__aeabi_i2d>
 800631e:	4604      	mov	r4, r0
 8006320:	460d      	mov	r5, r1
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	3313      	adds	r3, #19
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	3b30      	subs	r3, #48	; 0x30
 800632a:	4618      	mov	r0, r3
 800632c:	f7fa f8fa 	bl	8000524 <__aeabi_i2d>
 8006330:	a3ad      	add	r3, pc, #692	; (adr r3, 80065e8 <TaskGPS+0x368>)
 8006332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006336:	f7fa f95f 	bl	80005f8 <__aeabi_dmul>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4690      	mov	r8, r2
 8006340:	4699      	mov	r9, r3
								+ (RxI[20] - 48) * pow(10, 5)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3314      	adds	r3, #20
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	3b30      	subs	r3, #48	; 0x30
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f8ea 	bl	8000524 <__aeabi_i2d>
 8006350:	a3a7      	add	r3, pc, #668	; (adr r3, 80065f0 <TaskGPS+0x370>)
 8006352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006356:	f7fa f94f 	bl	80005f8 <__aeabi_dmul>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4640      	mov	r0, r8
 8006360:	4649      	mov	r1, r9
 8006362:	f7f9 ff93 	bl	800028c <__adddf3>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4690      	mov	r8, r2
 800636c:	4699      	mov	r9, r3
								+ (RxI[22] - 48) * pow(10, 4)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3316      	adds	r3, #22
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	3b30      	subs	r3, #48	; 0x30
 8006376:	4618      	mov	r0, r3
 8006378:	f7fa f8d4 	bl	8000524 <__aeabi_i2d>
 800637c:	a39e      	add	r3, pc, #632	; (adr r3, 80065f8 <TaskGPS+0x378>)
 800637e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006382:	f7fa f939 	bl	80005f8 <__aeabi_dmul>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4640      	mov	r0, r8
 800638c:	4649      	mov	r1, r9
 800638e:	f7f9 ff7d 	bl	800028c <__adddf3>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4690      	mov	r8, r2
 8006398:	4699      	mov	r9, r3
								+ (RxI[23] - 48) * pow(10, 3)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	3317      	adds	r3, #23
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	3b30      	subs	r3, #48	; 0x30
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7fa f8be 	bl	8000524 <__aeabi_i2d>
 80063a8:	f04f 0200 	mov.w	r2, #0
 80063ac:	4b97      	ldr	r3, [pc, #604]	; (800660c <TaskGPS+0x38c>)
 80063ae:	f7fa f923 	bl	80005f8 <__aeabi_dmul>
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	4640      	mov	r0, r8
 80063b8:	4649      	mov	r1, r9
 80063ba:	f7f9 ff67 	bl	800028c <__adddf3>
 80063be:	4602      	mov	r2, r0
 80063c0:	460b      	mov	r3, r1
 80063c2:	4690      	mov	r8, r2
 80063c4:	4699      	mov	r9, r3
								+ (RxI[24] - 48) * pow(10, 2)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	3318      	adds	r3, #24
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	3b30      	subs	r3, #48	; 0x30
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fa f8a8 	bl	8000524 <__aeabi_i2d>
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	4b8d      	ldr	r3, [pc, #564]	; (8006610 <TaskGPS+0x390>)
 80063da:	f7fa f90d 	bl	80005f8 <__aeabi_dmul>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4640      	mov	r0, r8
 80063e4:	4649      	mov	r1, r9
 80063e6:	f7f9 ff51 	bl	800028c <__adddf3>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4690      	mov	r8, r2
 80063f0:	4699      	mov	r9, r3
								+ (RxI[25] - 48) * 10 + RxI[26] - 48) * 0.00001
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3319      	adds	r3, #25
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4618      	mov	r0, r3
 8006406:	f7fa f88d 	bl	8000524 <__aeabi_i2d>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4640      	mov	r0, r8
 8006410:	4649      	mov	r1, r9
 8006412:	f7f9 ff3b 	bl	800028c <__adddf3>
 8006416:	4602      	mov	r2, r0
 8006418:	460b      	mov	r3, r1
 800641a:	4690      	mov	r8, r2
 800641c:	4699      	mov	r9, r3
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	331a      	adds	r3, #26
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fa f87d 	bl	8000524 <__aeabi_i2d>
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	4640      	mov	r0, r8
 8006430:	4649      	mov	r1, r9
 8006432:	f7f9 ff2b 	bl	800028c <__adddf3>
 8006436:	4602      	mov	r2, r0
 8006438:	460b      	mov	r3, r1
 800643a:	4610      	mov	r0, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f04f 0200 	mov.w	r2, #0
 8006442:	4b74      	ldr	r3, [pc, #464]	; (8006614 <TaskGPS+0x394>)
 8006444:	f7f9 ff20 	bl	8000288 <__aeabi_dsub>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4610      	mov	r0, r2
 800644e:	4619      	mov	r1, r3
 8006450:	a36b      	add	r3, pc, #428	; (adr r3, 8006600 <TaskGPS+0x380>)
 8006452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006456:	f7fa f8cf 	bl	80005f8 <__aeabi_dmul>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4610      	mov	r0, r2
 8006460:	4619      	mov	r1, r3
								/ 60;
 8006462:	f04f 0200 	mov.w	r2, #0
 8006466:	4b6c      	ldr	r3, [pc, #432]	; (8006618 <TaskGPS+0x398>)
 8006468:	f7fa f9f0 	bl	800084c <__aeabi_ddiv>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
						+ ((RxI[19] - 48) * pow(10, 6)
 8006470:	4620      	mov	r0, r4
 8006472:	4629      	mov	r1, r5
 8006474:	f7f9 ff0a 	bl	800028c <__adddf3>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
				lati = ((RxI[17] - 48) * 10 + (RxI[18] - 48))
 800647c:	4610      	mov	r0, r2
 800647e:	4619      	mov	r1, r3
 8006480:	f7fa fbb2 	bl	8000be8 <__aeabi_d2f>
 8006484:	4603      	mov	r3, r0
 8006486:	61fb      	str	r3, [r7, #28]
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	331e      	adds	r3, #30
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	3b30      	subs	r3, #48	; 0x30
 8006490:	4618      	mov	r0, r3
 8006492:	f7fa f847 	bl	8000524 <__aeabi_i2d>
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	4b5d      	ldr	r3, [pc, #372]	; (8006610 <TaskGPS+0x390>)
 800649c:	f7fa f8ac 	bl	80005f8 <__aeabi_dmul>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4614      	mov	r4, r2
 80064a6:	461d      	mov	r5, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	331f      	adds	r3, #31
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	005b      	lsls	r3, r3, #1
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7fa f832 	bl	8000524 <__aeabi_i2d>
 80064c0:	4602      	mov	r2, r0
 80064c2:	460b      	mov	r3, r1
 80064c4:	4620      	mov	r0, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	f7f9 fee0 	bl	800028c <__adddf3>
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	4614      	mov	r4, r2
 80064d2:	461d      	mov	r5, r3
						+ (RxI[32] - 48))
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	3320      	adds	r3, #32
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	3b30      	subs	r3, #48	; 0x30
 80064dc:	4618      	mov	r0, r3
 80064de:	f7fa f821 	bl	8000524 <__aeabi_i2d>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4620      	mov	r0, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7f9 fecf 	bl	800028c <__adddf3>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4614      	mov	r4, r2
 80064f4:	461d      	mov	r5, r3
						+ ((RxI[33] - 48) * pow(10, 6)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3321      	adds	r3, #33	; 0x21
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	4618      	mov	r0, r3
 8006500:	f7fa f810 	bl	8000524 <__aeabi_i2d>
 8006504:	a338      	add	r3, pc, #224	; (adr r3, 80065e8 <TaskGPS+0x368>)
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	f7fa f875 	bl	80005f8 <__aeabi_dmul>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4690      	mov	r8, r2
 8006514:	4699      	mov	r9, r3
								+ (RxI[34] - 48) * pow(10, 5)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	3322      	adds	r3, #34	; 0x22
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	3b30      	subs	r3, #48	; 0x30
 800651e:	4618      	mov	r0, r3
 8006520:	f7fa f800 	bl	8000524 <__aeabi_i2d>
 8006524:	a332      	add	r3, pc, #200	; (adr r3, 80065f0 <TaskGPS+0x370>)
 8006526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652a:	f7fa f865 	bl	80005f8 <__aeabi_dmul>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4640      	mov	r0, r8
 8006534:	4649      	mov	r1, r9
 8006536:	f7f9 fea9 	bl	800028c <__adddf3>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4690      	mov	r8, r2
 8006540:	4699      	mov	r9, r3
								+ (RxI[36] - 48) * pow(10, 4)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3324      	adds	r3, #36	; 0x24
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	3b30      	subs	r3, #48	; 0x30
 800654a:	4618      	mov	r0, r3
 800654c:	f7f9 ffea 	bl	8000524 <__aeabi_i2d>
 8006550:	a329      	add	r3, pc, #164	; (adr r3, 80065f8 <TaskGPS+0x378>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7fa f84f 	bl	80005f8 <__aeabi_dmul>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4640      	mov	r0, r8
 8006560:	4649      	mov	r1, r9
 8006562:	f7f9 fe93 	bl	800028c <__adddf3>
 8006566:	4602      	mov	r2, r0
 8006568:	460b      	mov	r3, r1
 800656a:	4690      	mov	r8, r2
 800656c:	4699      	mov	r9, r3
								+ (RxI[37] - 48) * pow(10, 3)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3325      	adds	r3, #37	; 0x25
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	3b30      	subs	r3, #48	; 0x30
 8006576:	4618      	mov	r0, r3
 8006578:	f7f9 ffd4 	bl	8000524 <__aeabi_i2d>
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	4b22      	ldr	r3, [pc, #136]	; (800660c <TaskGPS+0x38c>)
 8006582:	f7fa f839 	bl	80005f8 <__aeabi_dmul>
 8006586:	4602      	mov	r2, r0
 8006588:	460b      	mov	r3, r1
 800658a:	4640      	mov	r0, r8
 800658c:	4649      	mov	r1, r9
 800658e:	f7f9 fe7d 	bl	800028c <__adddf3>
 8006592:	4602      	mov	r2, r0
 8006594:	460b      	mov	r3, r1
 8006596:	4690      	mov	r8, r2
 8006598:	4699      	mov	r9, r3
								+ (RxI[38] - 48) * pow(10, 2)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	3326      	adds	r3, #38	; 0x26
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	3b30      	subs	r3, #48	; 0x30
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7f9 ffbe 	bl	8000524 <__aeabi_i2d>
 80065a8:	f04f 0200 	mov.w	r2, #0
 80065ac:	4b18      	ldr	r3, [pc, #96]	; (8006610 <TaskGPS+0x390>)
 80065ae:	f7fa f823 	bl	80005f8 <__aeabi_dmul>
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	4640      	mov	r0, r8
 80065b8:	4649      	mov	r1, r9
 80065ba:	f7f9 fe67 	bl	800028c <__adddf3>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4690      	mov	r8, r2
 80065c4:	4699      	mov	r9, r3
								+ (RxI[39] - 48) * 10 + RxI[40] - 48) * 0.00001
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3327      	adds	r3, #39	; 0x27
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	4618      	mov	r0, r3
 80065da:	f7f9 ffa3 	bl	8000524 <__aeabi_i2d>
 80065de:	4602      	mov	r2, r0
 80065e0:	460b      	mov	r3, r1
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	e019      	b.n	800661c <TaskGPS+0x39c>
 80065e8:	00000000 	.word	0x00000000
 80065ec:	412e8480 	.word	0x412e8480
 80065f0:	00000000 	.word	0x00000000
 80065f4:	40f86a00 	.word	0x40f86a00
 80065f8:	00000000 	.word	0x00000000
 80065fc:	40c38800 	.word	0x40c38800
 8006600:	88e368f1 	.word	0x88e368f1
 8006604:	3ee4f8b5 	.word	0x3ee4f8b5
 8006608:	20001158 	.word	0x20001158
 800660c:	408f4000 	.word	0x408f4000
 8006610:	40590000 	.word	0x40590000
 8006614:	40480000 	.word	0x40480000
 8006618:	404e0000 	.word	0x404e0000
 800661c:	f7f9 fe36 	bl	800028c <__adddf3>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	4690      	mov	r8, r2
 8006626:	4699      	mov	r9, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3328      	adds	r3, #40	; 0x28
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	4618      	mov	r0, r3
 8006630:	f7f9 ff78 	bl	8000524 <__aeabi_i2d>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4640      	mov	r0, r8
 800663a:	4649      	mov	r1, r9
 800663c:	f7f9 fe26 	bl	800028c <__adddf3>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4610      	mov	r0, r2
 8006646:	4619      	mov	r1, r3
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	4b5c      	ldr	r3, [pc, #368]	; (80067c0 <TaskGPS+0x540>)
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4610      	mov	r0, r2
 8006658:	4619      	mov	r1, r3
 800665a:	a357      	add	r3, pc, #348	; (adr r3, 80067b8 <TaskGPS+0x538>)
 800665c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006660:	f7f9 ffca 	bl	80005f8 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4610      	mov	r0, r2
 800666a:	4619      	mov	r1, r3
								/ 60;
 800666c:	f04f 0200 	mov.w	r2, #0
 8006670:	4b54      	ldr	r3, [pc, #336]	; (80067c4 <TaskGPS+0x544>)
 8006672:	f7fa f8eb 	bl	800084c <__aeabi_ddiv>
 8006676:	4602      	mov	r2, r0
 8006678:	460b      	mov	r3, r1
						+ ((RxI[33] - 48) * pow(10, 6)
 800667a:	4620      	mov	r0, r4
 800667c:	4629      	mov	r1, r5
 800667e:	f7f9 fe05 	bl	800028c <__adddf3>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
				longi = ((RxI[30] - 48) * pow(10, 2) + (RxI[31] - 48) * 10
 8006686:	4610      	mov	r0, r2
 8006688:	4619      	mov	r1, r3
 800668a:	f7fa faad 	bl	8000be8 <__aeabi_d2f>
 800668e:	4603      	mov	r3, r0
 8006690:	61bb      	str	r3, [r7, #24]
				if (RxI[28] == 'S')
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	331c      	adds	r3, #28
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b53      	cmp	r3, #83	; 0x53
 800669a:	d105      	bne.n	80066a8 <TaskGPS+0x428>
				{
					lati = -lati;
 800669c:	edd7 7a07 	vldr	s15, [r7, #28]
 80066a0:	eef1 7a67 	vneg.f32	s15, s15
 80066a4:	edc7 7a07 	vstr	s15, [r7, #28]
				}
				if (RxI[42] == 'W')
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	332a      	adds	r3, #42	; 0x2a
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b57      	cmp	r3, #87	; 0x57
 80066b0:	d105      	bne.n	80066be <TaskGPS+0x43e>
				{
					longi = -longi;
 80066b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80066b6:	eef1 7a67 	vneg.f32	s15, s15
 80066ba:	edc7 7a06 	vstr	s15, [r7, #24]
				}
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 80066be:	edd7 7a07 	vldr	s15, [r7, #28]
 80066c2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80067c8 <TaskGPS+0x548>
 80066c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ce:	dc00      	bgt.n	80066d2 <TaskGPS+0x452>
				}
			}
			//	}
		}
	}
}
 80066d0:	e06d      	b.n	80067ae <TaskGPS+0x52e>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 80066d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80066d6:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80067cc <TaskGPS+0x54c>
 80066da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e2:	d400      	bmi.n	80066e6 <TaskGPS+0x466>
}
 80066e4:	e063      	b.n	80067ae <TaskGPS+0x52e>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 80066e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80066ea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 80066ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f6:	dc00      	bgt.n	80066fa <TaskGPS+0x47a>
}
 80066f8:	e059      	b.n	80067ae <TaskGPS+0x52e>
				if ((lati > 35) && (lati < 60) && (longi > -10) && (longi < 10)) // France
 80066fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80066fe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006702:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670a:	d400      	bmi.n	800670e <TaskGPS+0x48e>
}
 800670c:	e04f      	b.n	80067ae <TaskGPS+0x52e>
					int sat = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	617b      	str	r3, [r7, #20]
					if (RxI[46] >= '0' && RxI[46] <= '9' && RxI[47] >= '0'
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	332e      	adds	r3, #46	; 0x2e
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b2f      	cmp	r3, #47	; 0x2f
 800671a:	d921      	bls.n	8006760 <TaskGPS+0x4e0>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	332e      	adds	r3, #46	; 0x2e
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b39      	cmp	r3, #57	; 0x39
 8006724:	d81c      	bhi.n	8006760 <TaskGPS+0x4e0>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	332f      	adds	r3, #47	; 0x2f
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b2f      	cmp	r3, #47	; 0x2f
 800672e:	d917      	bls.n	8006760 <TaskGPS+0x4e0>
							&& RxI[47] <= '9')
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	332f      	adds	r3, #47	; 0x2f
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	2b39      	cmp	r3, #57	; 0x39
 8006738:	d812      	bhi.n	8006760 <TaskGPS+0x4e0>
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	332e      	adds	r3, #46	; 0x2e
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	005b      	lsls	r3, r3, #1
 800674c:	461a      	mov	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	332f      	adds	r3, #47	; 0x2f
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	441a      	add	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	f503 7380 	add.w	r3, r3, #256	; 0x100
								- '0';
 800675c:	3a30      	subs	r2, #48	; 0x30
						TabGen[NB_SATT_FOUND] = (RxI[46] - '0') * 10 + RxI[47]
 800675e:	601a      	str	r2, [r3, #0]
					TabGpsTimer[LAST_UPDATE_GPS] = HAL_GetTick();
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f103 0408 	add.w	r4, r3, #8
 8006766:	f005 faa3 	bl	800bcb0 <HAL_GetTick>
 800676a:	4603      	mov	r3, r0
 800676c:	6023      	str	r3, [r4, #0]
					TabFloatValue[LATI] = lati;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	3314      	adds	r3, #20
 8006772:	69fa      	ldr	r2, [r7, #28]
 8006774:	601a      	str	r2, [r3, #0]
					TabFloatValue[LONGI] = longi;
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	3318      	adds	r3, #24
 800677a:	69ba      	ldr	r2, [r7, #24]
 800677c:	601a      	str	r2, [r3, #0]
					TabGen[STATUT_GPS] = 1;
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	33a0      	adds	r3, #160	; 0xa0
 8006782:	2201      	movs	r2, #1
 8006784:	601a      	str	r2, [r3, #0]
					if (TabGen[GPS_GOOD] == 0)
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	33e4      	adds	r3, #228	; 0xe4
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10e      	bne.n	80067ae <TaskGPS+0x52e>
						TabGpsTimer[GPS_FIRST_START] = HAL_GetTick();//- (c1.tps_GPS_ON * 60 * 1000) + (GPSSTOP * 60 * 1000) ;  //LAST CHANGE 18h10-07/10
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	1d1c      	adds	r4, r3, #4
 8006794:	f005 fa8c 	bl	800bcb0 <HAL_GetTick>
 8006798:	4603      	mov	r3, r0
 800679a:	6023      	str	r3, [r4, #0]
						TabGen[GPS_GOOD] = 1;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	33e4      	adds	r3, #228	; 0xe4
 80067a0:	2201      	movs	r2, #1
 80067a2:	601a      	str	r2, [r3, #0]
						TabGen[GPS_DURATION] = 1;
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 80067aa:	2201      	movs	r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
}
 80067ae:	bf00      	nop
 80067b0:	3720      	adds	r7, #32
 80067b2:	46bd      	mov	sp, r7
 80067b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80067b8:	88e368f1 	.word	0x88e368f1
 80067bc:	3ee4f8b5 	.word	0x3ee4f8b5
 80067c0:	40480000 	.word	0x40480000
 80067c4:	404e0000 	.word	0x404e0000
 80067c8:	420c0000 	.word	0x420c0000
 80067cc:	42700000 	.word	0x42700000

080067d0 <TaskSendLoraWan>:
}

// LoraWan to Objenious
void TaskSendLoraWan(int TabGen[], float TabFloatValue[],
		uint32_t TabGpsTimer[])
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b08c      	sub	sp, #48	; 0x30
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
	char bufferLoraWan[32];

	if ((c1.com_LoRa == 1) && (TabGen[LORA_SEND] == 1))
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <TaskSendLoraWan+0xa0>)
 80067de:	7a1b      	ldrb	r3, [r3, #8]
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	d141      	bne.n	8006868 <TaskSendLoraWan+0x98>
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d13b      	bne.n	8006868 <TaskSendLoraWan+0x98>
	{
		TabGen[RE_ON_SCREEN] = 1;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	3350      	adds	r3, #80	; 0x50
 80067f4:	2201      	movs	r2, #1
 80067f6:	601a      	str	r2, [r3, #0]
		TabGen[LORA_SEND] = 0;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]

		display_SendMess();
 8006802:	f7fb fc93 	bl	800212c <display_SendMess>

		OutBuzOff();
 8006806:	f7fd fa23 	bl	8003c50 <OutBuzOff>
		OutMotorWu(0);
 800680a:	2000      	movs	r0, #0
 800680c:	f7fd f9b8 	bl	8003b80 <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	2100      	movs	r1, #0
 8006816:	2000      	movs	r0, #0
 8006818:	f7fd ff3a 	bl	8004690 <LedOn>

		srand(HAL_GetTick());
 800681c:	f005 fa48 	bl	800bcb0 <HAL_GetTick>
 8006820:	4603      	mov	r3, r0
 8006822:	4618      	mov	r0, r3
 8006824:	f012 f8aa 	bl	801897c <srand>
		TabGen[ID_ALERT] = rand() % 99;
 8006828:	f012 f8d6 	bl	80189d8 <rand>
 800682c:	4602      	mov	r2, r0
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f503 708a 	add.w	r0, r3, #276	; 0x114
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <TaskSendLoraWan+0xa4>)
 8006836:	fb83 1302 	smull	r1, r3, r3, r2
 800683a:	4413      	add	r3, r2
 800683c:	1199      	asrs	r1, r3, #6
 800683e:	17d3      	asrs	r3, r2, #31
 8006840:	1ac9      	subs	r1, r1, r3
 8006842:	460b      	mov	r3, r1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	440b      	add	r3, r1
 8006848:	0159      	lsls	r1, r3, #5
 800684a:	440b      	add	r3, r1
 800684c:	1ad1      	subs	r1, r2, r3
 800684e:	6001      	str	r1, [r0, #0]

		BuildMessGPS(bufferLoraWan, TabGen, TabFloatValue, TabGpsTimer);
 8006850:	f107 0010 	add.w	r0, r7, #16
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	68f9      	ldr	r1, [r7, #12]
 800685a:	f7fe fb5d 	bl	8004f18 <BuildMessGPS>
		SendMessLoraWan(bufferLoraWan);
 800685e:	f107 0310 	add.w	r3, r7, #16
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe f9da 	bl	8004c1c <SendMessLoraWan>
	}
}
 8006868:	bf00      	nop
 800686a:	3730      	adds	r7, #48	; 0x30
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	20001158 	.word	0x20001158
 8006874:	a57eb503 	.word	0xa57eb503

08006878 <TaskSendSigfox>:
extern IWDG_HandleTypeDef hiwdg;

//Sigfox to antenna
void TaskSendSigfox(int TabGen[], float TabFloatValue[], uint32_t TabTimer[],
		char WifiName[])
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	; 0x38
 800687c:	af00      	add	r7, sp, #0
 800687e:	60f8      	str	r0, [r7, #12]
 8006880:	60b9      	str	r1, [r7, #8]
 8006882:	607a      	str	r2, [r7, #4]
 8006884:	603b      	str	r3, [r7, #0]
	char bufferSig[40];

	if ((c1.com_sigfox == 1) && (TabGen[SIGFOX_SEND] == 1))
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <TaskSendSigfox+0xc8>)
 8006888:	79db      	ldrb	r3, [r3, #7]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d153      	bne.n	8006936 <TaskSendSigfox+0xbe>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3324      	adds	r3, #36	; 0x24
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d14e      	bne.n	8006936 <TaskSendSigfox+0xbe>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8006898:	482a      	ldr	r0, [pc, #168]	; (8006944 <TaskSendSigfox+0xcc>)
 800689a:	f007 f968 	bl	800db6e <HAL_IWDG_Refresh>
		RebootNemeusLS(TabGen); // Override duty cycle limitation, must wait 9 min before sending another message
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7fe f8e8 	bl	8004a74 <RebootNemeusLS>

		TabGen[RE_ON_SCREEN] = 1;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3350      	adds	r3, #80	; 0x50
 80068a8:	2201      	movs	r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

		display_SendMess();
 80068ac:	f7fb fc3e 	bl	800212c <display_SendMess>
		SigfoxOn();
 80068b0:	f7fe f9fe 	bl	8004cb0 <SigfoxOn>

		OutBuzOff();
 80068b4:	f7fd f9cc 	bl	8003c50 <OutBuzOff>
		OutMotorWu(0);
 80068b8:	2000      	movs	r0, #0
 80068ba:	f7fd f961 	bl	8003b80 <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	2100      	movs	r1, #0
 80068c4:	2000      	movs	r0, #0
 80068c6:	f7fd fee3 	bl	8004690 <LedOn>
		if (WIFI == 1)
			BuildMessWifi(bufferSig, TabGen, TabFloatValue, TabTimer, WifiName);
		else
			BuildMessGPS(bufferSig, TabGen, TabFloatValue, TabTimer);
 80068ca:	f107 0010 	add.w	r0, r7, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68f9      	ldr	r1, [r7, #12]
 80068d4:	f7fe fb20 	bl	8004f18 <BuildMessGPS>

		HAL_IWDG_Refresh(&hiwdg);
 80068d8:	481a      	ldr	r0, [pc, #104]	; (8006944 <TaskSendSigfox+0xcc>)
 80068da:	f007 f948 	bl	800db6e <HAL_IWDG_Refresh>

		SendMessSigfox(bufferSig, TabGen);
 80068de:	f107 0310 	add.w	r3, r7, #16
 80068e2:	68f9      	ldr	r1, [r7, #12]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fe fa05 	bl	8004cf4 <SendMessSigfox>

		HAL_Delay(5000);
 80068ea:	f241 3088 	movw	r0, #5000	; 0x1388
 80068ee:	f005 f9eb 	bl	800bcc8 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 80068f2:	4814      	ldr	r0, [pc, #80]	; (8006944 <TaskSendSigfox+0xcc>)
 80068f4:	f007 f93b 	bl	800db6e <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80068f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80068fc:	f005 f9e4 	bl	800bcc8 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 8006900:	4810      	ldr	r0, [pc, #64]	; (8006944 <TaskSendSigfox+0xcc>)
 8006902:	f007 f934 	bl	800db6e <HAL_IWDG_Refresh>

		TabGen[SIGFOX_SEND] = 0;
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	3324      	adds	r3, #36	; 0x24
 800690a:	2200      	movs	r2, #0
 800690c:	601a      	str	r2, [r3, #0]
		TabGen[LORA_SEND] = 0;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]
		TabGen[ID_ALERT] = 0;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_PENDING] = 0;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006928:	2200      	movs	r2, #0
 800692a:	601a      	str	r2, [r3, #0]
		RebootNemeusLS(TabGen);
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f7fe f8a1 	bl	8004a74 <RebootNemeusLS>
		SigfoxOn();
 8006932:	f7fe f9bd 	bl	8004cb0 <SigfoxOn>
	}
}
 8006936:	bf00      	nop
 8006938:	3738      	adds	r7, #56	; 0x38
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20001158 	.word	0x20001158
 8006944:	20001e28 	.word	0x20001e28

08006948 <TaskSendDUAL>:

//Sigfox to antenna
void TaskSendDUAL(int TabGen[], float TabFloatValue[], uint32_t TabTimer[],
		char WifiName[])
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b08e      	sub	sp, #56	; 0x38
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
 8006954:	603b      	str	r3, [r7, #0]
	char bufferDual[40];

	if (TabGen[DUAL_SEND] == 1)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b01      	cmp	r3, #1
 8006960:	d177      	bne.n	8006a52 <TaskSendDUAL+0x10a>
	{
		srand(HAL_GetTick());
 8006962:	f005 f9a5 	bl	800bcb0 <HAL_GetTick>
 8006966:	4603      	mov	r3, r0
 8006968:	4618      	mov	r0, r3
 800696a:	f012 f807 	bl	801897c <srand>
		TabGen[ID_ALERT] = (rand() % 98) + 1;
 800696e:	f012 f833 	bl	80189d8 <rand>
 8006972:	4602      	mov	r2, r0
 8006974:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <TaskSendDUAL+0x114>)
 8006976:	fb83 1302 	smull	r1, r3, r3, r2
 800697a:	1159      	asrs	r1, r3, #5
 800697c:	17d3      	asrs	r3, r2, #31
 800697e:	1acb      	subs	r3, r1, r3
 8006980:	2162      	movs	r1, #98	; 0x62
 8006982:	fb01 f303 	mul.w	r3, r1, r3
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	f502 728a 	add.w	r2, r2, #276	; 0x114
 800698e:	3301      	adds	r3, #1
 8006990:	6013      	str	r3, [r2, #0]
		display_SendMess();
 8006992:	f7fb fbcb 	bl	800212c <display_SendMess>
		TabGen[RE_ON_SCREEN] = 1;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	3350      	adds	r3, #80	; 0x50
 800699a:	2201      	movs	r2, #1
 800699c:	601a      	str	r2, [r3, #0]
		OutBuzOff();
 800699e:	f7fd f957 	bl	8003c50 <OutBuzOff>
		OutMotorWu(0);
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7fd f8ec 	bl	8003b80 <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	2200      	movs	r2, #0
 80069ac:	2100      	movs	r1, #0
 80069ae:	2000      	movs	r0, #0
 80069b0:	f7fd fe6e 	bl	8004690 <LedOn>
		if (WIFI == 1)
			BuildMessWifi(bufferDual, TabGen, TabFloatValue, TabTimer,
					WifiName);
		else
			BuildMessGPS(bufferDual, TabGen, TabFloatValue, TabTimer);
 80069b4:	f107 0010 	add.w	r0, r7, #16
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	f7fe faab 	bl	8004f18 <BuildMessGPS>

		SendMessLoraWan(bufferDual);
 80069c2:	f107 0310 	add.w	r3, r7, #16
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe f928 	bl	8004c1c <SendMessLoraWan>
		RebootNemeusLS(TabGen);
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f7fe f851 	bl	8004a74 <RebootNemeusLS>
		HAL_Delay(5000);
 80069d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80069d6:	f005 f977 	bl	800bcc8 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80069da:	4821      	ldr	r0, [pc, #132]	; (8006a60 <TaskSendDUAL+0x118>)
 80069dc:	f007 f8c7 	bl	800db6e <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 80069e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80069e4:	f005 f970 	bl	800bcc8 <HAL_Delay>

		HAL_IWDG_Refresh(&hiwdg);
 80069e8:	481d      	ldr	r0, [pc, #116]	; (8006a60 <TaskSendDUAL+0x118>)
 80069ea:	f007 f8c0 	bl	800db6e <HAL_IWDG_Refresh>

		RebootNemeusLS(TabGen); // Override duty cycle limitation, must wait 9 min before sending another message
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fe f840 	bl	8004a74 <RebootNemeusLS>
		SigfoxOn();
 80069f4:	f7fe f95c 	bl	8004cb0 <SigfoxOn>

		HAL_IWDG_Refresh(&hiwdg);
 80069f8:	4819      	ldr	r0, [pc, #100]	; (8006a60 <TaskSendDUAL+0x118>)
 80069fa:	f007 f8b8 	bl	800db6e <HAL_IWDG_Refresh>
		SendMessSigfox(bufferDual, TabGen);
 80069fe:	f107 0310 	add.w	r3, r7, #16
 8006a02:	68f9      	ldr	r1, [r7, #12]
 8006a04:	4618      	mov	r0, r3
 8006a06:	f7fe f975 	bl	8004cf4 <SendMessSigfox>

		HAL_Delay(5000);
 8006a0a:	f241 3088 	movw	r0, #5000	; 0x1388
 8006a0e:	f005 f95b 	bl	800bcc8 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 8006a12:	4813      	ldr	r0, [pc, #76]	; (8006a60 <TaskSendDUAL+0x118>)
 8006a14:	f007 f8ab 	bl	800db6e <HAL_IWDG_Refresh>
		HAL_Delay(5000);
 8006a18:	f241 3088 	movw	r0, #5000	; 0x1388
 8006a1c:	f005 f954 	bl	800bcc8 <HAL_Delay>
		HAL_IWDG_Refresh(&hiwdg);
 8006a20:	480f      	ldr	r0, [pc, #60]	; (8006a60 <TaskSendDUAL+0x118>)
 8006a22:	f007 f8a4 	bl	800db6e <HAL_IWDG_Refresh>

		TabGen[DUAL_SEND] = 0;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
		TabGen[ID_ALERT] = 0;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
		TabGen[ALERT_PENDING] = 0;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]
		RebootNemeusLS(TabGen);
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f7fe f815 	bl	8004a74 <RebootNemeusLS>
		SigfoxOn();
 8006a4a:	f7fe f931 	bl	8004cb0 <SigfoxOn>
		LoraWanOn();
 8006a4e:	f7fe f893 	bl	8004b78 <LoraWanOn>
	}
}
 8006a52:	bf00      	nop
 8006a54:	3738      	adds	r7, #56	; 0x38
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	5397829d 	.word	0x5397829d
 8006a60:	20001e28 	.word	0x20001e28

08006a64 <TaskButtonManager>:

	}
}

void TaskButtonManager(int TabGen[], int TabAlert[])
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
	//if (TabGen[I_READ_BUTTON] == 10)  // button management
	//{
	if (InOn() == 1)
 8006a6e:	f7fd f8b9 	bl	8003be4 <InOn>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d12a      	bne.n	8006ace <TaskButtonManager+0x6a>
	{
		if (TabGen[ALERT_ON] == 0) // EJ : button on to update GPS
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <TaskButtonManager+0x24>
		{
			TabGen[FORCE_GPS] = 1;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	33f0      	adds	r3, #240	; 0xf0
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
//					TabGen[STATUT_GPS] = 0 ;
//					TabGen[GPS_GOOD] = 0 ;
		}

		TabGen[RE_ON_SCREEN] = 1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3350      	adds	r3, #80	; 0x50
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	601a      	str	r2, [r3, #0]
		TabGen[ON_ON] = 1;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	3354      	adds	r3, #84	; 0x54
 8006a94:	2201      	movs	r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON]++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3358      	adds	r3, #88	; 0x58
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	3201      	adds	r2, #1
 8006aa0:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_ON] > (ON_TOUCH * 100))
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	3358      	adds	r3, #88	; 0x58
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2bc8      	cmp	r3, #200	; 0xc8
 8006aaa:	dd18      	ble.n	8006ade <TaskButtonManager+0x7a>
		{
			if (TabGen[ALERT_ON] == 1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d107      	bne.n	8006ac4 <TaskButtonManager+0x60>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3320      	adds	r3, #32
 8006ab8:	2201      	movs	r2, #1
 8006aba:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	333c      	adds	r3, #60	; 0x3c
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
			}
			TabGen[NS_SOS] = 0;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	3360      	adds	r3, #96	; 0x60
 8006ac8:	2200      	movs	r2, #0
 8006aca:	601a      	str	r2, [r3, #0]
 8006acc:	e007      	b.n	8006ade <TaskButtonManager+0x7a>
		}
	}
	else
	{
		TabGen[ON_ON] = 0;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	3354      	adds	r3, #84	; 0x54
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
		TabGen[NS_ON] = 0;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	3358      	adds	r3, #88	; 0x58
 8006ada:	2200      	movs	r2, #0
 8006adc:	601a      	str	r2, [r3, #0]
	}

	if (InSOS() == 1)
 8006ade:	f7fd f897 	bl	8003c10 <InSOS>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d140      	bne.n	8006b6a <TaskButtonManager+0x106>
	{
		TabGen[FORCE_GPS] = 1;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	33f0      	adds	r3, #240	; 0xf0
 8006aec:	2201      	movs	r2, #1
 8006aee:	601a      	str	r2, [r3, #0]

		TabGen[RE_ON_SCREEN] = 1;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	3350      	adds	r3, #80	; 0x50
 8006af4:	2201      	movs	r2, #1
 8006af6:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 1;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	335c      	adds	r3, #92	; 0x5c
 8006afc:	2201      	movs	r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS]++;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3360      	adds	r3, #96	; 0x60
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	3201      	adds	r2, #1
 8006b08:	601a      	str	r2, [r3, #0]
		if (TabGen[NS_SOS] > (SOS_TOUCH))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	3360      	adds	r3, #96	; 0x60
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	dd36      	ble.n	8006b82 <TaskButtonManager+0x11e>
		{
			if (TabGen[ALERT_ON] == 1 && TabGen[SOS_RELEACH] == 1)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d110      	bne.n	8006b3e <TaskButtonManager+0xda>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	3364      	adds	r3, #100	; 0x64
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d10b      	bne.n	8006b3e <TaskButtonManager+0xda>
			{
				TabGen[SOS_PUSH_LONG] = 1;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	3320      	adds	r3, #32
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	333c      	adds	r3, #60	; 0x3c
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
				TabGen[NS_SOS] = 0;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	3360      	adds	r3, #96	; 0x60
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
			}

			if (TabGen[NS_SOS] > (SOS_TOUCH * 100))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	3360      	adds	r3, #96	; 0x60
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	2b64      	cmp	r3, #100	; 0x64
 8006b46:	dd1c      	ble.n	8006b82 <TaskButtonManager+0x11e>
			{
				if (TabGen[ALERT_ON] == 0)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d118      	bne.n	8006b82 <TaskButtonManager+0x11e>
				{

					TabAlert[ALERT_SOS] = 1;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	3304      	adds	r3, #4
 8006b54:	2201      	movs	r2, #1
 8006b56:	601a      	str	r2, [r3, #0]
					TabGen[NS_SOS] = 0;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	3360      	adds	r3, #96	; 0x60
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	601a      	str	r2, [r3, #0]
					TabGen[SOS_RELEACH] = 0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3364      	adds	r3, #100	; 0x64
 8006b64:	2200      	movs	r2, #0
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e00b      	b.n	8006b82 <TaskButtonManager+0x11e>
//				TabGen[NS_SOS] = 0 ;
//			}
	}
	else
	{
		TabGen[SOS_RELEACH] = 1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	3364      	adds	r3, #100	; 0x64
 8006b6e:	2201      	movs	r2, #1
 8006b70:	601a      	str	r2, [r3, #0]
		TabGen[SOS_ON] = 0;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	335c      	adds	r3, #92	; 0x5c
 8006b76:	2200      	movs	r2, #0
 8006b78:	601a      	str	r2, [r3, #0]
		TabGen[NS_SOS] = 0;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3360      	adds	r3, #96	; 0x60
 8006b7e:	2200      	movs	r2, #0
 8006b80:	601a      	str	r2, [r3, #0]
	}
	TabGen[I_READ_BUTTON] = 0;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	334c      	adds	r3, #76	; 0x4c
 8006b86:	2200      	movs	r2, #0
 8006b88:	601a      	str	r2, [r3, #0]

	if ((TabGen[ON_ON] == 1) || (TabGen[SOS_ON] == 1))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3354      	adds	r3, #84	; 0x54
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d004      	beq.n	8006b9e <TaskButtonManager+0x13a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	335c      	adds	r3, #92	; 0x5c
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d11b      	bne.n	8006bd6 <TaskButtonManager+0x172>
	{

		if (TabGen[CHARGEC] == 0)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	33ac      	adds	r3, #172	; 0xac
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d105      	bne.n	8006bb4 <TaskButtonManager+0x150>
			LedOn(50, 0, 0, TabGen);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	2032      	movs	r0, #50	; 0x32
 8006bb0:	f7fd fd6e 	bl	8004690 <LedOn>

		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	33ac      	adds	r3, #172	; 0xac
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d117      	bne.n	8006bee <TaskButtonManager+0x18a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3354      	adds	r3, #84	; 0x54
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d112      	bne.n	8006bee <TaskButtonManager+0x18a>
			LedOn(50, 0, 0, TabGen);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2032      	movs	r0, #50	; 0x32
 8006bd0:	f7fd fd5e 	bl	8004690 <LedOn>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 8006bd4:	e00b      	b.n	8006bee <TaskButtonManager+0x18a>
	}
	else
	{
		if (TabGen[CHARGEC] == 0)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	33ac      	adds	r3, #172	; 0xac
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <TaskButtonManager+0x18c>
			LedOn(0, 0, 0, TabGen);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	2100      	movs	r1, #0
 8006be6:	2000      	movs	r0, #0
 8006be8:	f7fd fd52 	bl	8004690 <LedOn>
	 else
	 {
	 TabGen[I_READ_BUTTON]++ ;
	 }*/

}
 8006bec:	e000      	b.n	8006bf0 <TaskButtonManager+0x18c>
		if (TabGen[CHARGEC] == 1 && (TabGen[ON_ON] == 1))
 8006bee:	bf00      	nop
}
 8006bf0:	bf00      	nop
 8006bf2:	3708      	adds	r7, #8
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <TaskAlertManager>:

void TaskAlertManager(int TabGen[], int *i_led)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
	if (TabGen[ALERT_ON] == 1) // if there is an alert
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d16e      	bne.n	8006ce8 <TaskAlertManager+0xf0>
	{
		if ((TabGen[BUZ_ON_FAST] == 1) && (TabGen[LED_ON_FAST] == 1)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	3308      	adds	r3, #8
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d12f      	bne.n	8006c74 <TaskAlertManager+0x7c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	330c      	adds	r3, #12
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d12a      	bne.n	8006c74 <TaskAlertManager+0x7c>
				&& (TabGen[VIB_ON_FAST] == 1)) // fast vibration, blinking, and noise mode
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3310      	adds	r3, #16
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d125      	bne.n	8006c74 <TaskAlertManager+0x7c>
		{
			if (*i_led == 1)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d105      	bne.n	8006c3c <TaskAlertManager+0x44>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	22c8      	movs	r2, #200	; 0xc8
 8006c34:	21c8      	movs	r1, #200	; 0xc8
 8006c36:	20fa      	movs	r0, #250	; 0xfa
 8006c38:	f7fd fd2a 	bl	8004690 <LedOn>
#ifndef debug_sound_vibration
				OutBuzOn();			// buzzer on  // EJ : stop sound for debug
				OutMotorWu(1);				// vibration on
#endif
			}
			if (*i_led == 10)   // after 100 ms
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2b0a      	cmp	r3, #10
 8006c42:	d10a      	bne.n	8006c5a <TaskAlertManager+0x62>
			{
				LedOn(0, 0, 0, TabGen); // turn led off
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	2100      	movs	r1, #0
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f7fd fd20 	bl	8004690 <LedOn>
				OutBuzOff();		// buzzer off
 8006c50:	f7fc fffe 	bl	8003c50 <OutBuzOff>
				OutMotorWu(0);	// vibration on
 8006c54:	2000      	movs	r0, #0
 8006c56:	f7fc ff93 	bl	8003b80 <OutMotorWu>
			}
			if (*i_led == 100) // every 1 sec
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b64      	cmp	r3, #100	; 0x64
 8006c60:	d102      	bne.n	8006c68 <TaskAlertManager+0x70>
			{
				*i_led = 0;     // restart
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e039      	b.n	8006ce8 <TaskAlertManager+0xf0>
		}
		else if ((TabGen[BUZ_ON_SLOW] == 1) && (TabGen[LED_ON_SLOW] == 1)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3314      	adds	r3, #20
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d134      	bne.n	8006ce8 <TaskAlertManager+0xf0>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3318      	adds	r3, #24
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d12f      	bne.n	8006ce8 <TaskAlertManager+0xf0>
				&& (TabGen[VIB_ON_SLOW] == 1)) // slow vibration, blinking, and noise mode
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	331c      	adds	r3, #28
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d12a      	bne.n	8006ce8 <TaskAlertManager+0xf0>
		{
			if (*i_led == 1)
 8006c92:	683b      	ldr	r3, [r7, #0]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d10a      	bne.n	8006cb0 <TaskAlertManager+0xb8>
			{
				LedOn(250, 200, 200, TabGen); // turn led on
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	22c8      	movs	r2, #200	; 0xc8
 8006c9e:	21c8      	movs	r1, #200	; 0xc8
 8006ca0:	20fa      	movs	r0, #250	; 0xfa
 8006ca2:	f7fd fcf5 	bl	8004690 <LedOn>
				OutBuzOn();						// buzzer on
 8006ca6:	f7fc ffc9 	bl	8003c3c <OutBuzOn>
				OutMotorWu(1);				// vibration on
 8006caa:	2001      	movs	r0, #1
 8006cac:	f7fc ff68 	bl	8003b80 <OutMotorWu>
			}
			if (*i_led == 10) 		// after 100 ms
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b0a      	cmp	r3, #10
 8006cb6:	d10a      	bne.n	8006cce <TaskAlertManager+0xd6>
			{
				LedOn(0, 0, 0, TabGen); 	// turn led off
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	2000      	movs	r0, #0
 8006cc0:	f7fd fce6 	bl	8004690 <LedOn>
				OutBuzOff();			// buzzer off
 8006cc4:	f7fc ffc4 	bl	8003c50 <OutBuzOff>
				OutMotorWu(0);		// vibration off
 8006cc8:	2000      	movs	r0, #0
 8006cca:	f7fc ff59 	bl	8003b80 <OutMotorWu>
			}
			if (*i_led == 1000) 	// every 10 sec
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cd6:	d102      	bne.n	8006cde <TaskAlertManager+0xe6>
			{
				*i_led = 0; 			// restart
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	601a      	str	r2, [r3, #0]
			}
			(*i_led)++;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	601a      	str	r2, [r3, #0]
		}
	}
	if ((TabGen[ALERT_ON_PREVIOUS] == 1) && (TabGen[ALERT_ON] == 0))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	3348      	adds	r3, #72	; 0x48
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d12a      	bne.n	8006d48 <TaskAlertManager+0x150>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d126      	bne.n	8006d48 <TaskAlertManager+0x150>
	{
		LedOn(0, 0, 0, TabGen);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	2100      	movs	r1, #0
 8006d00:	2000      	movs	r0, #0
 8006d02:	f7fd fcc5 	bl	8004690 <LedOn>
		OutBuzOff();
 8006d06:	f7fc ffa3 	bl	8003c50 <OutBuzOff>
		OutMotorWu(0);
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	f7fc ff38 	bl	8003b80 <OutMotorWu>
		TabGen[ALERT_ON_PREVIOUS] = 0;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	3348      	adds	r3, #72	; 0x48
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3368      	adds	r3, #104	; 0x68
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	336c      	adds	r3, #108	; 0x6c
 8006d24:	2200      	movs	r2, #0
 8006d26:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3370      	adds	r3, #112	; 0x70
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	3374      	adds	r3, #116	; 0x74
 8006d34:	2201      	movs	r2, #1
 8006d36:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	3378      	adds	r3, #120	; 0x78
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	337c      	adds	r3, #124	; 0x7c
 8006d44:	2200      	movs	r2, #0
 8006d46:	601a      	str	r2, [r3, #0]

	}

	if ((TabGen[ALERT_ON_PREVIOUS] == 0) && (TabGen[ALERT_ON] == 1))
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3348      	adds	r3, #72	; 0x48
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d11f      	bne.n	8006d92 <TaskAlertManager+0x19a>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d11b      	bne.n	8006d92 <TaskAlertManager+0x19a>
	{
		TabGen[ALERT_ON_PREVIOUS] = 1;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	3348      	adds	r3, #72	; 0x48
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]

		TabGen[FALL_IND_1] = 0;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3368      	adds	r3, #104	; 0x68
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_2] = 0;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	336c      	adds	r3, #108	; 0x6c
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_1] = 0;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	3370      	adds	r3, #112	; 0x70
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 1;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	3374      	adds	r3, #116	; 0x74
 8006d7e:	2201      	movs	r2, #1
 8006d80:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_3] = 0;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3378      	adds	r3, #120	; 0x78
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_4] = 0;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	337c      	adds	r3, #124	; 0x7c
 8006d8e:	2200      	movs	r2, #0
 8006d90:	601a      	str	r2, [r3, #0]
	}
}
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
	...

08006d9c <TaskFallManager>:

void TaskFallManager(uint16_t ar[], uint8_t y[], uint16_t accres, uint8_t accy,
		int TabGen[])
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	4611      	mov	r1, r2
 8006da8:	461a      	mov	r2, r3
 8006daa:	460b      	mov	r3, r1
 8006dac:	80fb      	strh	r3, [r7, #6]
 8006dae:	4613      	mov	r3, r2
 8006db0:	717b      	strb	r3, [r7, #5]
	uint16_t i_full;

	if (TabGen[FALL_IND_1] < 200 && TabGen[FALL_COND_2])
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	3368      	adds	r3, #104	; 0x68
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2bc7      	cmp	r3, #199	; 0xc7
 8006dba:	dc19      	bgt.n	8006df0 <TaskFallManager+0x54>
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	3374      	adds	r3, #116	; 0x74
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d014      	beq.n	8006df0 <TaskFallManager+0x54>
	{ // teste2 est initialis� en true ce if s'execute une seule fois pour remplie les 200 premiers elements du tableau
		ar[TabGen[FALL_IND_1]] = accres;
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	3368      	adds	r3, #104	; 0x68
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	88fa      	ldrh	r2, [r7, #6]
 8006dd4:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 8006dd6:	6a3b      	ldr	r3, [r7, #32]
 8006dd8:	3368      	adds	r3, #104	; 0x68
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	461a      	mov	r2, r3
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	4413      	add	r3, r2
 8006de2:	797a      	ldrb	r2, [r7, #5]
 8006de4:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	3368      	adds	r3, #104	; 0x68
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	3201      	adds	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
	}

	if ((TabGen[FALL_IND_1] == 200) && (TabGen[FALL_COND_2]))
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	3368      	adds	r3, #104	; 0x68
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	2bc8      	cmp	r3, #200	; 0xc8
 8006df8:	d10c      	bne.n	8006e14 <TaskFallManager+0x78>
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	3374      	adds	r3, #116	; 0x74
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d007      	beq.n	8006e14 <TaskFallManager+0x78>
	{ // lorsque les 2OO premieres elements sont remplis dans le 1er tableau la valeur de test2 sera false donc le 1er if ne devient plus activ�
		TabGen[FALL_COND_1] = 1; //la variable test va nous permettre de savoir que les 200 premiers element du tableau sont bien remplis
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	3370      	adds	r3, #112	; 0x70
 8006e08:	2201      	movs	r2, #1
 8006e0a:	601a      	str	r2, [r3, #0]
		TabGen[FALL_COND_2] = 0;
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	3374      	adds	r3, #116	; 0x74
 8006e10:	2200      	movs	r2, #0
 8006e12:	601a      	str	r2, [r3, #0]
	}

	// notez bien que les 2 tableaux sont d�phas� dans le temps par 2s.
	if (TabGen[FALL_COND_1] && 200 <= TabGen[FALL_IND_1]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	3370      	adds	r3, #112	; 0x70
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d06f      	beq.n	8006efe <TaskFallManager+0x162>
 8006e1e:	6a3b      	ldr	r3, [r7, #32]
 8006e20:	3368      	adds	r3, #104	; 0x68
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2bc7      	cmp	r3, #199	; 0xc7
 8006e26:	dd6a      	ble.n	8006efe <TaskFallManager+0x162>
			&& TabGen[FALL_IND_1] <= 399 && 0 <= TabGen[FALL_IND_2]
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	3368      	adds	r3, #104	; 0x68
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006e32:	da64      	bge.n	8006efe <TaskFallManager+0x162>
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	336c      	adds	r3, #108	; 0x6c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	db5f      	blt.n	8006efe <TaskFallManager+0x162>
			&& TabGen[FALL_IND_2] <= 199)
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	336c      	adds	r3, #108	; 0x6c
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2bc7      	cmp	r3, #199	; 0xc7
 8006e46:	dc5a      	bgt.n	8006efe <TaskFallManager+0x162>
	{ // cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		ar[TabGen[FALL_IND_1]] = accres;
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	3368      	adds	r3, #104	; 0x68
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = accy;
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	3368      	adds	r3, #104	; 0x68
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	4413      	add	r3, r2
 8006e64:	797a      	ldrb	r2, [r7, #5]
 8006e66:	701a      	strb	r2, [r3, #0]
		arr[TabGen[FALL_IND_2]] = ar[TabGen[FALL_IND_1]];
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	3368      	adds	r3, #104	; 0x68
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	68fa      	ldr	r2, [r7, #12]
 8006e72:	441a      	add	r2, r3
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	336c      	adds	r3, #108	; 0x6c
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	8811      	ldrh	r1, [r2, #0]
 8006e7c:	4a5b      	ldr	r2, [pc, #364]	; (8006fec <TaskFallManager+0x250>)
 8006e7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = y[TabGen[FALL_IND_1]];
 8006e82:	6a3b      	ldr	r3, [r7, #32]
 8006e84:	3368      	adds	r3, #104	; 0x68
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	461a      	mov	r2, r3
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	441a      	add	r2, r3
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	336c      	adds	r3, #108	; 0x6c
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	7811      	ldrb	r1, [r2, #0]
 8006e96:	4a56      	ldr	r2, [pc, #344]	; (8006ff0 <TaskFallManager+0x254>)
 8006e98:	54d1      	strb	r1, [r2, r3]
		TabGen[FALL_IND_2]++;
 8006e9a:	6a3b      	ldr	r3, [r7, #32]
 8006e9c:	336c      	adds	r3, #108	; 0x6c
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	3201      	adds	r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8006ea4:	6a3b      	ldr	r3, [r7, #32]
 8006ea6:	3368      	adds	r3, #104	; 0x68
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	3201      	adds	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_1] == 400)
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	3368      	adds	r3, #104	; 0x68
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006eb8:	d121      	bne.n	8006efe <TaskFallManager+0x162>
		{
			for (i_full = 0; i_full < 400; i_full++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	82fb      	strh	r3, [r7, #22]
 8006ebe:	e012      	b.n	8006ee6 <TaskFallManager+0x14a>
			{
				ar_full[i_full] = ar[i_full];
 8006ec0:	8afb      	ldrh	r3, [r7, #22]
 8006ec2:	005b      	lsls	r3, r3, #1
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	441a      	add	r2, r3
 8006ec8:	8afb      	ldrh	r3, [r7, #22]
 8006eca:	8811      	ldrh	r1, [r2, #0]
 8006ecc:	4a49      	ldr	r2, [pc, #292]	; (8006ff4 <TaskFallManager+0x258>)
 8006ece:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = y[i_full];
 8006ed2:	8afb      	ldrh	r3, [r7, #22]
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	441a      	add	r2, r3
 8006ed8:	8afb      	ldrh	r3, [r7, #22]
 8006eda:	7811      	ldrb	r1, [r2, #0]
 8006edc:	4a46      	ldr	r2, [pc, #280]	; (8006ff8 <TaskFallManager+0x25c>)
 8006ede:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 8006ee0:	8afb      	ldrh	r3, [r7, #22]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	82fb      	strh	r3, [r7, #22]
 8006ee6:	8afb      	ldrh	r3, [r7, #22]
 8006ee8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006eec:	d3e8      	bcc.n	8006ec0 <TaskFallManager+0x124>
			}
			TabGen[FALL_IND_1] = 0;
 8006eee:	6a3b      	ldr	r3, [r7, #32]
 8006ef0:	3368      	adds	r3, #104	; 0x68
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_3] = 1;
 8006ef6:	6a3b      	ldr	r3, [r7, #32]
 8006ef8:	3378      	adds	r3, #120	; 0x78
 8006efa:	2201      	movs	r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
		}
	}

	if (TabGen[FALL_COND_1] && 0 <= TabGen[FALL_IND_1]
 8006efe:	6a3b      	ldr	r3, [r7, #32]
 8006f00:	3370      	adds	r3, #112	; 0x70
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d06a      	beq.n	8006fde <TaskFallManager+0x242>
 8006f08:	6a3b      	ldr	r3, [r7, #32]
 8006f0a:	3368      	adds	r3, #104	; 0x68
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	db65      	blt.n	8006fde <TaskFallManager+0x242>
			&& TabGen[FALL_IND_1] <= 199 && 200 <= TabGen[FALL_IND_2]
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	3368      	adds	r3, #104	; 0x68
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2bc7      	cmp	r3, #199	; 0xc7
 8006f1a:	dc60      	bgt.n	8006fde <TaskFallManager+0x242>
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	336c      	adds	r3, #108	; 0x6c
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2bc7      	cmp	r3, #199	; 0xc7
 8006f24:	dd5b      	ble.n	8006fde <TaskFallManager+0x242>
			&& TabGen[FALL_IND_2] <= 399)
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	336c      	adds	r3, #108	; 0x6c
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006f30:	da55      	bge.n	8006fde <TaskFallManager+0x242>
	{ //	cette �tape permet de remplir les deux tableaux � la fois et avec la m�me valeur pour avoir des valeurs en temps r�el
		arr[TabGen[FALL_IND_2]] = accres;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	336c      	adds	r3, #108	; 0x6c
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	492c      	ldr	r1, [pc, #176]	; (8006fec <TaskFallManager+0x250>)
 8006f3a:	88fa      	ldrh	r2, [r7, #6]
 8006f3c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		yy[TabGen[FALL_IND_2]] = accy;
 8006f40:	6a3b      	ldr	r3, [r7, #32]
 8006f42:	336c      	adds	r3, #108	; 0x6c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	492a      	ldr	r1, [pc, #168]	; (8006ff0 <TaskFallManager+0x254>)
 8006f48:	797a      	ldrb	r2, [r7, #5]
 8006f4a:	54ca      	strb	r2, [r1, r3]
		ar[TabGen[FALL_IND_1]] = arr[TabGen[FALL_IND_2]];
 8006f4c:	6a3b      	ldr	r3, [r7, #32]
 8006f4e:	336c      	adds	r3, #108	; 0x6c
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	6a3b      	ldr	r3, [r7, #32]
 8006f54:	3368      	adds	r3, #104	; 0x68
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	005b      	lsls	r3, r3, #1
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	440b      	add	r3, r1
 8006f5e:	4923      	ldr	r1, [pc, #140]	; (8006fec <TaskFallManager+0x250>)
 8006f60:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8006f64:	801a      	strh	r2, [r3, #0]
		y[TabGen[FALL_IND_1]] = yy[TabGen[FALL_IND_2]];
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	336c      	adds	r3, #108	; 0x6c
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	6a3b      	ldr	r3, [r7, #32]
 8006f6e:	3368      	adds	r3, #104	; 0x68
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4619      	mov	r1, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	440b      	add	r3, r1
 8006f78:	491d      	ldr	r1, [pc, #116]	; (8006ff0 <TaskFallManager+0x254>)
 8006f7a:	5c8a      	ldrb	r2, [r1, r2]
 8006f7c:	701a      	strb	r2, [r3, #0]
		TabGen[FALL_IND_2]++;
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	336c      	adds	r3, #108	; 0x6c
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	3201      	adds	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
		TabGen[FALL_IND_1]++;
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	3368      	adds	r3, #104	; 0x68
 8006f8c:	681a      	ldr	r2, [r3, #0]
 8006f8e:	3201      	adds	r2, #1
 8006f90:	601a      	str	r2, [r3, #0]
		if (TabGen[FALL_IND_2] == 400)
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	336c      	adds	r3, #108	; 0x6c
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006f9c:	d11f      	bne.n	8006fde <TaskFallManager+0x242>
		{
			for (i_full = 0; i_full < 400; i_full++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	82fb      	strh	r3, [r7, #22]
 8006fa2:	e010      	b.n	8006fc6 <TaskFallManager+0x22a>
			{
				ar_full[i_full] = arr[i_full];
 8006fa4:	8afa      	ldrh	r2, [r7, #22]
 8006fa6:	8afb      	ldrh	r3, [r7, #22]
 8006fa8:	4910      	ldr	r1, [pc, #64]	; (8006fec <TaskFallManager+0x250>)
 8006faa:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8006fae:	4a11      	ldr	r2, [pc, #68]	; (8006ff4 <TaskFallManager+0x258>)
 8006fb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				y_full[i_full] = yy[i_full];
 8006fb4:	8afa      	ldrh	r2, [r7, #22]
 8006fb6:	8afb      	ldrh	r3, [r7, #22]
 8006fb8:	490d      	ldr	r1, [pc, #52]	; (8006ff0 <TaskFallManager+0x254>)
 8006fba:	5c89      	ldrb	r1, [r1, r2]
 8006fbc:	4a0e      	ldr	r2, [pc, #56]	; (8006ff8 <TaskFallManager+0x25c>)
 8006fbe:	54d1      	strb	r1, [r2, r3]
			for (i_full = 0; i_full < 400; i_full++)
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	82fb      	strh	r3, [r7, #22]
 8006fc6:	8afb      	ldrh	r3, [r7, #22]
 8006fc8:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006fcc:	d3ea      	bcc.n	8006fa4 <TaskFallManager+0x208>
			}
			TabGen[FALL_IND_2] = 0;
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	336c      	adds	r3, #108	; 0x6c
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
			TabGen[FALL_COND_4] = 1;
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	337c      	adds	r3, #124	; 0x7c
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
		}
	}
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	20002260 	.word	0x20002260
 8006ff0:	20002fa0 	.word	0x20002fa0
 8006ff4:	200028e0 	.word	0x200028e0
 8006ff8:	20003170 	.word	0x20003170

08006ffc <TaskSendLoraNoGPS>:

void TaskSendLoraNoGPS(int TabGen[], float TabFloatValue[],
		uint32_t TabGpsTimer[])
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	; 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
	char bufferLora[32];

	if ((c1.loraP2P == 1) && (TabGen[LORAP2P_SEND] == 1) && SUEZ == 0)
 8007008:	4b18      	ldr	r3, [pc, #96]	; (800706c <TaskSendLoraNoGPS+0x70>)
 800700a:	799b      	ldrb	r3, [r3, #6]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d129      	bne.n	8007064 <TaskSendLoraNoGPS+0x68>
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d123      	bne.n	8007064 <TaskSendLoraNoGPS+0x68>
	{
		TabGen[RE_ON_SCREEN] = 1;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	3350      	adds	r3, #80	; 0x50
 8007020:	2201      	movs	r2, #1
 8007022:	601a      	str	r2, [r3, #0]
		TabGen[LORAP2P_SEND] = 0;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800702a:	2200      	movs	r2, #0
 800702c:	601a      	str	r2, [r3, #0]
		display_SendMess();
 800702e:	f7fb f87d 	bl	800212c <display_SendMess>
		//WakeUpNemeusLS();
		//RebootNemeusLS();
		OutBuzOff();
 8007032:	f7fc fe0d 	bl	8003c50 <OutBuzOff>

		OutMotorWu(0);
 8007036:	2000      	movs	r0, #0
 8007038:	f7fc fda2 	bl	8003b80 <OutMotorWu>
		LedOn(0, 0, 0, TabGen);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	2100      	movs	r1, #0
 8007042:	2000      	movs	r0, #0
 8007044:	f7fd fb24 	bl	8004690 <LedOn>
		//LoraOn();
		FuncLoraMessNoGPS(bufferLora, TabGen, TabFloatValue, TabGpsTimer);
 8007048:	f107 0010 	add.w	r0, r7, #16
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	f7fe f965 	bl	8005320 <FuncLoraMessNoGPS>
			SendMessLora811(bufferLora);
			EnableLoraReceive811();
		}
		else
		{
			SendMessLora(bufferLora);
 8007056:	f107 0310 	add.w	r3, r7, #16
 800705a:	4618      	mov	r0, r3
 800705c:	f7fd fef6 	bl	8004e4c <SendMessLora>
			ContinuousRxLora();
 8007060:	f7fd ff1c 	bl	8004e9c <ContinuousRxLora>
		}
	}
}
 8007064:	bf00      	nop
 8007066:	3730      	adds	r7, #48	; 0x30
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20001158 	.word	0x20001158

08007070 <Task_Read_Nemeus>:
extern uint32_t time_network_rep;
extern uint8_t network_state;
extern uint8_t DUAL_STATE_LS;

void Task_Read_Nemeus(void)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
// SIGFOX
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'S')
 8007076:	4b55      	ldr	r3, [pc, #340]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b2b      	cmp	r3, #43	; 0x2b
 800707c:	f040 80db 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
 8007080:	4b52      	ldr	r3, [pc, #328]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007082:	785b      	ldrb	r3, [r3, #1]
 8007084:	2b53      	cmp	r3, #83	; 0x53
 8007086:	f040 80d6 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[2] == 'F') && (Rx_bufferNemeus[3] == ':')
 800708a:	4b50      	ldr	r3, [pc, #320]	; (80071cc <Task_Read_Nemeus+0x15c>)
 800708c:	789b      	ldrb	r3, [r3, #2]
 800708e:	2b46      	cmp	r3, #70	; 0x46
 8007090:	f040 80d1 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
 8007094:	4b4d      	ldr	r3, [pc, #308]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007096:	78db      	ldrb	r3, [r3, #3]
 8007098:	2b3a      	cmp	r3, #58	; 0x3a
 800709a:	f040 80cc 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
			&& (Rx_bufferNemeus[4] == ' '))
 800709e:	4b4b      	ldr	r3, [pc, #300]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070a0:	791b      	ldrb	r3, [r3, #4]
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	f040 80c7 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
	{
		if ( //
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 80070a8:	4b48      	ldr	r3, [pc, #288]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070aa:	795b      	ldrb	r3, [r3, #5]
		if ( //
 80070ac:	2b53      	cmp	r3, #83	; 0x53
 80070ae:	d102      	bne.n	80070b6 <Task_Read_Nemeus+0x46>
		(Rx_bufferNemeus[5] == 'S') && (Rx_bufferNemeus[6] == 'N')
 80070b0:	4b46      	ldr	r3, [pc, #280]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070b2:	799b      	ldrb	r3, [r3, #6]
 80070b4:	2b4e      	cmp	r3, #78	; 0x4e
		{
			//TabGen[SIGFOX_STATE] = 10;
		}

		if ( //
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 80070b6:	4b45      	ldr	r3, [pc, #276]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070b8:	795b      	ldrb	r3, [r3, #5]
		if ( //
 80070ba:	2b52      	cmp	r3, #82	; 0x52
 80070bc:	f040 80bb 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
		(Rx_bufferNemeus[5] == 'R') && (Rx_bufferNemeus[6] == 'C')
 80070c0:	4b42      	ldr	r3, [pc, #264]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070c2:	799b      	ldrb	r3, [r3, #6]
 80070c4:	2b43      	cmp	r3, #67	; 0x43
 80070c6:	f040 80b6 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[7] == 'V') && (Rx_bufferNemeus[8] == 'B')
 80070ca:	4b40      	ldr	r3, [pc, #256]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070cc:	79db      	ldrb	r3, [r3, #7]
 80070ce:	2b56      	cmp	r3, #86	; 0x56
 80070d0:	f040 80b1 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
 80070d4:	4b3d      	ldr	r3, [pc, #244]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070d6:	7a1b      	ldrb	r3, [r3, #8]
 80070d8:	2b42      	cmp	r3, #66	; 0x42
 80070da:	f040 80ac 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
				&& (Rx_bufferNemeus[9] == 'I') && (Rx_bufferNemeus[10] == 'N'))
 80070de:	4b3b      	ldr	r3, [pc, #236]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070e0:	7a5b      	ldrb	r3, [r3, #9]
 80070e2:	2b49      	cmp	r3, #73	; 0x49
 80070e4:	f040 80a7 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
 80070e8:	4b38      	ldr	r3, [pc, #224]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070ea:	7a9b      	ldrb	r3, [r3, #10]
 80070ec:	2b4e      	cmp	r3, #78	; 0x4e
 80070ee:	f040 80a2 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
		{
			if (  //
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 80070f2:	4b36      	ldr	r3, [pc, #216]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070f4:	7b1b      	ldrb	r3, [r3, #12]
			if (  //
 80070f6:	2b31      	cmp	r3, #49	; 0x31
 80070f8:	f040 809d 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
			(Rx_bufferNemeus[12] == '1') && (Rx_bufferNemeus[13] == '2')
 80070fc:	4b33      	ldr	r3, [pc, #204]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80070fe:	7b5b      	ldrb	r3, [r3, #13]
 8007100:	2b32      	cmp	r3, #50	; 0x32
 8007102:	f040 8098 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[14] == '3')
 8007106:	4b31      	ldr	r3, [pc, #196]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007108:	7b9b      	ldrb	r3, [r3, #14]
 800710a:	2b33      	cmp	r3, #51	; 0x33
 800710c:	f040 8093 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
					&& (Rx_bufferNemeus[15] == '4'))
 8007110:	4b2e      	ldr	r3, [pc, #184]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007112:	7bdb      	ldrb	r3, [r3, #15]
 8007114:	2b34      	cmp	r3, #52	; 0x34
 8007116:	f040 808e 	bne.w	8007236 <Task_Read_Nemeus+0x1c6>
			{
				uint8_t nbcomma = 0;
 800711a:	2300      	movs	r3, #0
 800711c:	73fb      	strb	r3, [r7, #15]
				uint8_t nbchar = 0;
 800711e:	2300      	movs	r3, #0
 8007120:	73bb      	strb	r3, [r7, #14]

				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 8007122:	e00a      	b.n	800713a <Task_Read_Nemeus+0xca>
				{
					if (Rx_bufferNemeus[nbchar] == ',')
 8007124:	7bbb      	ldrb	r3, [r7, #14]
 8007126:	4a29      	ldr	r2, [pc, #164]	; (80071cc <Task_Read_Nemeus+0x15c>)
 8007128:	5cd3      	ldrb	r3, [r2, r3]
 800712a:	2b2c      	cmp	r3, #44	; 0x2c
 800712c:	d102      	bne.n	8007134 <Task_Read_Nemeus+0xc4>
						nbcomma++;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
 8007130:	3301      	adds	r3, #1
 8007132:	73fb      	strb	r3, [r7, #15]
					nbchar++;
 8007134:	7bbb      	ldrb	r3, [r7, #14]
 8007136:	3301      	adds	r3, #1
 8007138:	73bb      	strb	r3, [r7, #14]
				while (nbcomma < 2 && nbchar <= MAXITNEMEUS)
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d802      	bhi.n	8007146 <Task_Read_Nemeus+0xd6>
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	2bc8      	cmp	r3, #200	; 0xc8
 8007144:	d9ee      	bls.n	8007124 <Task_Read_Nemeus+0xb4>
				}

				if (Rx_bufferNemeus[nbchar] == '-') // RSSI AVAILABLE
 8007146:	7bbb      	ldrb	r3, [r7, #14]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <Task_Read_Nemeus+0x15c>)
 800714a:	5cd3      	ldrb	r3, [r2, r3]
 800714c:	2b2d      	cmp	r3, #45	; 0x2d
 800714e:	d172      	bne.n	8007236 <Task_Read_Nemeus+0x1c6>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8007150:	2064      	movs	r0, #100	; 0x64
 8007152:	f7fb fcc4 	bl	8002ade <PowerVib>
#endif

					if (DUAL_STATE_LS == ACK_SF_PENDING)
 8007156:	4b1e      	ldr	r3, [pc, #120]	; (80071d0 <Task_Read_Nemeus+0x160>)
 8007158:	781b      	ldrb	r3, [r3, #0]
 800715a:	2b04      	cmp	r3, #4
 800715c:	d10a      	bne.n	8007174 <Task_Read_Nemeus+0x104>
					{
						//SendOnMessSigfox(1);
						TabTimer[ACK_TIMER] = HAL_GetTick();
 800715e:	f004 fda7 	bl	800bcb0 <HAL_GetTick>
 8007162:	4603      	mov	r3, r0
 8007164:	4a1b      	ldr	r2, [pc, #108]	; (80071d4 <Task_Read_Nemeus+0x164>)
 8007166:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8007168:	4b1b      	ldr	r3, [pc, #108]	; (80071d8 <Task_Read_Nemeus+0x168>)
 800716a:	2201      	movs	r2, #1
 800716c:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <Task_Read_Nemeus+0x160>)
 8007170:	2200      	movs	r2, #0
 8007172:	701a      	strb	r2, [r3, #0]

					}

					if (DUAL_STATE_LS == ACK_SF_PENDING_2)
 8007174:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <Task_Read_Nemeus+0x160>)
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	2b06      	cmp	r3, #6
 800717a:	d10c      	bne.n	8007196 <Task_Read_Nemeus+0x126>
					{
						TabTimer[ACK_TIMER] = HAL_GetTick();
 800717c:	f004 fd98 	bl	800bcb0 <HAL_GetTick>
 8007180:	4603      	mov	r3, r0
 8007182:	4a14      	ldr	r2, [pc, #80]	; (80071d4 <Task_Read_Nemeus+0x164>)
 8007184:	60d3      	str	r3, [r2, #12]
						TabGen[RE_ON_SCREEN] = 1;
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <Task_Read_Nemeus+0x168>)
 8007188:	2201      	movs	r2, #1
 800718a:	651a      	str	r2, [r3, #80]	; 0x50
						DUAL_STATE_LS = NO_ACK_PENDING;
 800718c:	4b10      	ldr	r3, [pc, #64]	; (80071d0 <Task_Read_Nemeus+0x160>)
 800718e:	2200      	movs	r2, #0
 8007190:	701a      	strb	r2, [r3, #0]
						LoraWanOn();
 8007192:	f7fd fcf1 	bl	8004b78 <LoraWanOn>
					}

					//RebootNemeusLS(TabGen);

					if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 8007196:	7bbb      	ldrb	r3, [r7, #14]
 8007198:	3303      	adds	r3, #3
 800719a:	4a0c      	ldr	r2, [pc, #48]	; (80071cc <Task_Read_Nemeus+0x15c>)
 800719c:	5cd3      	ldrb	r3, [r2, r3]
 800719e:	2b2e      	cmp	r3, #46	; 0x2e
 80071a0:	d11c      	bne.n	80071dc <Task_Read_Nemeus+0x16c>
					{
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 80071a2:	7bbb      	ldrb	r3, [r7, #14]
 80071a4:	3301      	adds	r3, #1
 80071a6:	4a09      	ldr	r2, [pc, #36]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80071a8:	5cd3      	ldrb	r3, [r2, r3]
 80071aa:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
								- '0') * 10
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	005b      	lsls	r3, r3, #1
 80071b6:	4619      	mov	r1, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0');
 80071b8:	7bbb      	ldrb	r3, [r7, #14]
 80071ba:	3302      	adds	r3, #2
 80071bc:	4a03      	ldr	r2, [pc, #12]	; (80071cc <Task_Read_Nemeus+0x15c>)
 80071be:	5cd3      	ldrb	r3, [r2, r3]
 80071c0:	3b30      	subs	r3, #48	; 0x30
 80071c2:	440b      	add	r3, r1
						TabGen[SIGFOX_RSSI] = -(Rx_bufferNemeus[nbchar + 1]
 80071c4:	4a04      	ldr	r2, [pc, #16]	; (80071d8 <Task_Read_Nemeus+0x168>)
 80071c6:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80071ca:	e034      	b.n	8007236 <Task_Read_Nemeus+0x1c6>
 80071cc:	200027e8 	.word	0x200027e8
 80071d0:	20000c0b 	.word	0x20000c0b
 80071d4:	200028b0 	.word	0x200028b0
 80071d8:	20002584 	.word	0x20002584
					}
					else // 3 digits => -XXX.XX
					{
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	3301      	adds	r3, #1
 80071e0:	4a98      	ldr	r2, [pc, #608]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80071e2:	5cd3      	ldrb	r3, [r2, r3]
								- '0') * 100
 80071e4:	3b30      	subs	r3, #48	; 0x30
 80071e6:	2264      	movs	r2, #100	; 0x64
 80071e8:	fb02 f103 	mul.w	r1, r2, r3
								+ (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 80071ec:	7bbb      	ldrb	r3, [r7, #14]
 80071ee:	3302      	adds	r3, #2
 80071f0:	4a94      	ldr	r2, [pc, #592]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80071f2:	5cd3      	ldrb	r3, [r2, r3]
 80071f4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80071f8:	4613      	mov	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4413      	add	r3, r2
 80071fe:	005b      	lsls	r3, r3, #1
 8007200:	18ca      	adds	r2, r1, r3
								+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	3303      	adds	r3, #3
 8007206:	498f      	ldr	r1, [pc, #572]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007208:	5ccb      	ldrb	r3, [r1, r3]
 800720a:	3b30      	subs	r3, #48	; 0x30
 800720c:	4413      	add	r3, r2
						TabGen[SIGFOX_RSSI] = -((Rx_bufferNemeus[nbchar + 1]
 800720e:	425b      	negs	r3, r3
 8007210:	4a8d      	ldr	r2, [pc, #564]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007212:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138

						if (TabGen[SIGFOX_RSSI] <= -150
 8007216:	4b8c      	ldr	r3, [pc, #560]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007218:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800721c:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8007220:	da09      	bge.n	8007236 <Task_Read_Nemeus+0x1c6>
								&& TabGen[SIGFOX_RSSI] >= -10)
 8007222:	4b89      	ldr	r3, [pc, #548]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007224:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8007228:	f113 0f0a 	cmn.w	r3, #10
 800722c:	db03      	blt.n	8007236 <Task_Read_Nemeus+0x1c6>
						{
							TabGen[SIGFOX_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 800722e:	4b86      	ldr	r3, [pc, #536]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007230:	2200      	movs	r2, #0
 8007232:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			}
		}
	}

	// LORA (Orange or Objenious)
	if ((Rx_bufferNemeus[0] == '+') && (Rx_bufferNemeus[1] == 'M')
 8007236:	4b83      	ldr	r3, [pc, #524]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b2b      	cmp	r3, #43	; 0x2b
 800723c:	f040 817e 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
 8007240:	4b80      	ldr	r3, [pc, #512]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007242:	785b      	ldrb	r3, [r3, #1]
 8007244:	2b4d      	cmp	r3, #77	; 0x4d
 8007246:	f040 8179 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[2] == 'A') && (Rx_bufferNemeus[3] == 'C')
 800724a:	4b7e      	ldr	r3, [pc, #504]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800724c:	789b      	ldrb	r3, [r3, #2]
 800724e:	2b41      	cmp	r3, #65	; 0x41
 8007250:	f040 8174 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
 8007254:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007256:	78db      	ldrb	r3, [r3, #3]
 8007258:	2b43      	cmp	r3, #67	; 0x43
 800725a:	f040 816f 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
			&& (Rx_bufferNemeus[4] == ':'))
 800725e:	4b79      	ldr	r3, [pc, #484]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007260:	791b      	ldrb	r3, [r3, #4]
 8007262:	2b3a      	cmp	r3, #58	; 0x3a
 8007264:	f040 816a 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
	{
		if ((Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'D')
 8007268:	4b76      	ldr	r3, [pc, #472]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800726a:	799b      	ldrb	r3, [r3, #6]
 800726c:	2b52      	cmp	r3, #82	; 0x52
 800726e:	d155      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
 8007270:	4b74      	ldr	r3, [pc, #464]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007272:	79db      	ldrb	r3, [r3, #7]
 8007274:	2b44      	cmp	r3, #68	; 0x44
 8007276:	d151      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[8] == 'E') && (Rx_bufferNemeus[9] == 'V')
 8007278:	4b72      	ldr	r3, [pc, #456]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800727a:	7a1b      	ldrb	r3, [r3, #8]
 800727c:	2b45      	cmp	r3, #69	; 0x45
 800727e:	d14d      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
 8007280:	4b70      	ldr	r3, [pc, #448]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007282:	7a5b      	ldrb	r3, [r3, #9]
 8007284:	2b56      	cmp	r3, #86	; 0x56
 8007286:	d149      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
				&& (Rx_bufferNemeus[10] == 'A') && (Rx_bufferNemeus[11] == 'D'))
 8007288:	4b6e      	ldr	r3, [pc, #440]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800728a:	7a9b      	ldrb	r3, [r3, #10]
 800728c:	2b41      	cmp	r3, #65	; 0x41
 800728e:	d145      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
 8007290:	4b6c      	ldr	r3, [pc, #432]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007292:	7adb      	ldrb	r3, [r3, #11]
 8007294:	2b44      	cmp	r3, #68	; 0x44
 8007296:	d141      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
		{
			if (  //
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 8007298:	4b6a      	ldr	r3, [pc, #424]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800729a:	7bdb      	ldrb	r3, [r3, #15]
			if (  //
 800729c:	2b30      	cmp	r3, #48	; 0x30
 800729e:	d11b      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
			(Rx_bufferNemeus[15] != '0') || (Rx_bufferNemeus[16] != '0')
 80072a0:	4b68      	ldr	r3, [pc, #416]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072a2:	7c1b      	ldrb	r3, [r3, #16]
 80072a4:	2b30      	cmp	r3, #48	; 0x30
 80072a6:	d117      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[17] != '0')
 80072a8:	4b66      	ldr	r3, [pc, #408]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072aa:	7c5b      	ldrb	r3, [r3, #17]
 80072ac:	2b30      	cmp	r3, #48	; 0x30
 80072ae:	d113      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[18] != '0')
 80072b0:	4b64      	ldr	r3, [pc, #400]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072b2:	7c9b      	ldrb	r3, [r3, #18]
 80072b4:	2b30      	cmp	r3, #48	; 0x30
 80072b6:	d10f      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[19] != '0')
 80072b8:	4b62      	ldr	r3, [pc, #392]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072ba:	7cdb      	ldrb	r3, [r3, #19]
 80072bc:	2b30      	cmp	r3, #48	; 0x30
 80072be:	d10b      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[20] != '0')
 80072c0:	4b60      	ldr	r3, [pc, #384]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072c2:	7d1b      	ldrb	r3, [r3, #20]
 80072c4:	2b30      	cmp	r3, #48	; 0x30
 80072c6:	d107      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[21] != '0')
 80072c8:	4b5e      	ldr	r3, [pc, #376]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072ca:	7d5b      	ldrb	r3, [r3, #21]
 80072cc:	2b30      	cmp	r3, #48	; 0x30
 80072ce:	d103      	bne.n	80072d8 <Task_Read_Nemeus+0x268>
					|| (Rx_bufferNemeus[22] != '0'))
 80072d0:	4b5c      	ldr	r3, [pc, #368]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80072d2:	7d9b      	ldrb	r3, [r3, #22]
 80072d4:	2b30      	cmp	r3, #48	; 0x30
 80072d6:	d021      	beq.n	800731c <Task_Read_Nemeus+0x2ac>
			{
				// --'UN'SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 80072d8:	4b5b      	ldr	r3, [pc, #364]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 80072da:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d11c      	bne.n	800731c <Task_Read_Nemeus+0x2ac>
				{
					HAL_Delay(500);
 80072e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80072e6:	f004 fcef 	bl	800bcc8 <HAL_Delay>
					SendOnLora();
 80072ea:	f7fd fc75 	bl	8004bd8 <SendOnLora>

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 80072ee:	2064      	movs	r0, #100	; 0x64
 80072f0:	f7fb fbf5 	bl	8002ade <PowerVib>
#endif
					AskJoinTimeLoraWan = HAL_GetTick();
 80072f4:	f004 fcdc 	bl	800bcb0 <HAL_GetTick>
 80072f8:	4603      	mov	r3, r0
 80072fa:	4a54      	ldr	r2, [pc, #336]	; (800744c <Task_Read_Nemeus+0x3dc>)
 80072fc:	6013      	str	r3, [r2, #0]

					TabTimer[ACK_TIMER] = HAL_GetTick();
 80072fe:	f004 fcd7 	bl	800bcb0 <HAL_GetTick>
 8007302:	4603      	mov	r3, r0
 8007304:	4a52      	ldr	r2, [pc, #328]	; (8007450 <Task_Read_Nemeus+0x3e0>)
 8007306:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 8007308:	4b4f      	ldr	r3, [pc, #316]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 800730a:	2201      	movs	r2, #1
 800730c:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 800730e:	4b4e      	ldr	r3, [pc, #312]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007310:	2202      	movs	r2, #2
 8007312:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 8007316:	4b4f      	ldr	r3, [pc, #316]	; (8007454 <Task_Read_Nemeus+0x3e4>)
 8007318:	2202      	movs	r2, #2
 800731a:	701a      	strb	r2, [r3, #0]
				}

			}
		}

		if ((Rx_bufferNemeus[14] == ',' && Rx_bufferNemeus[6] != 'R')
 800731c:	4b49      	ldr	r3, [pc, #292]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800731e:	7b9b      	ldrb	r3, [r3, #14]
 8007320:	2b2c      	cmp	r3, #44	; 0x2c
 8007322:	d103      	bne.n	800732c <Task_Read_Nemeus+0x2bc>
 8007324:	4b47      	ldr	r3, [pc, #284]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007326:	799b      	ldrb	r3, [r3, #6]
 8007328:	2b52      	cmp	r3, #82	; 0x52
 800732a:	d103      	bne.n	8007334 <Task_Read_Nemeus+0x2c4>
				|| GA_Nem == 1)
 800732c:	4b4a      	ldr	r3, [pc, #296]	; (8007458 <Task_Read_Nemeus+0x3e8>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d141      	bne.n	80073b8 <Task_Read_Nemeus+0x348>
		{
			if (  //
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 8007334:	4b43      	ldr	r3, [pc, #268]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007336:	799b      	ldrb	r3, [r3, #6]
			if (  //
 8007338:	2b30      	cmp	r3, #48	; 0x30
 800733a:	d11b      	bne.n	8007374 <Task_Read_Nemeus+0x304>
			(Rx_bufferNemeus[6] != '0') || (Rx_bufferNemeus[7] != '0')
 800733c:	4b41      	ldr	r3, [pc, #260]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800733e:	79db      	ldrb	r3, [r3, #7]
 8007340:	2b30      	cmp	r3, #48	; 0x30
 8007342:	d117      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[8] != '0')
 8007344:	4b3f      	ldr	r3, [pc, #252]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007346:	7a1b      	ldrb	r3, [r3, #8]
 8007348:	2b30      	cmp	r3, #48	; 0x30
 800734a:	d113      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[9] != '0')
 800734c:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800734e:	7a5b      	ldrb	r3, [r3, #9]
 8007350:	2b30      	cmp	r3, #48	; 0x30
 8007352:	d10f      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[10] != '0')
 8007354:	4b3b      	ldr	r3, [pc, #236]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007356:	7a9b      	ldrb	r3, [r3, #10]
 8007358:	2b30      	cmp	r3, #48	; 0x30
 800735a:	d10b      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[11] != '0')
 800735c:	4b39      	ldr	r3, [pc, #228]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800735e:	7adb      	ldrb	r3, [r3, #11]
 8007360:	2b30      	cmp	r3, #48	; 0x30
 8007362:	d107      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[12] != '0')
 8007364:	4b37      	ldr	r3, [pc, #220]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007366:	7b1b      	ldrb	r3, [r3, #12]
 8007368:	2b30      	cmp	r3, #48	; 0x30
 800736a:	d103      	bne.n	8007374 <Task_Read_Nemeus+0x304>
					|| (Rx_bufferNemeus[13] != '0'))
 800736c:	4b35      	ldr	r3, [pc, #212]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 800736e:	7b5b      	ldrb	r3, [r3, #13]
 8007370:	2b30      	cmp	r3, #48	; 0x30
 8007372:	d021      	beq.n	80073b8 <Task_Read_Nemeus+0x348>
			{
				// SOLICITED ANSWER, JOIN OK
				if (TabGen[LORAWAN_STATE] == LW_WAIT_JOIN)
 8007374:	4b34      	ldr	r3, [pc, #208]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 8007376:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 800737a:	2b01      	cmp	r3, #1
 800737c:	d11c      	bne.n	80073b8 <Task_Read_Nemeus+0x348>
				{
					HAL_Delay(500);
 800737e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007382:	f004 fca1 	bl	800bcc8 <HAL_Delay>
					SendOnLora();
 8007386:	f7fd fc27 	bl	8004bd8 <SendOnLora>

					AskJoinTimeLoraWan = HAL_GetTick();
 800738a:	f004 fc91 	bl	800bcb0 <HAL_GetTick>
 800738e:	4603      	mov	r3, r0
 8007390:	4a2e      	ldr	r2, [pc, #184]	; (800744c <Task_Read_Nemeus+0x3dc>)
 8007392:	6013      	str	r3, [r2, #0]

#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8007394:	2064      	movs	r0, #100	; 0x64
 8007396:	f7fb fba2 	bl	8002ade <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 800739a:	f004 fc89 	bl	800bcb0 <HAL_GetTick>
 800739e:	4603      	mov	r3, r0
 80073a0:	4a2b      	ldr	r2, [pc, #172]	; (8007450 <Task_Read_Nemeus+0x3e0>)
 80073a2:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 80073a4:	4b28      	ldr	r3, [pc, #160]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	651a      	str	r2, [r3, #80]	; 0x50
					TabGen[LORAWAN_STATE] = LW_JOIN_OK;
 80073aa:	4b27      	ldr	r3, [pc, #156]	; (8007448 <Task_Read_Nemeus+0x3d8>)
 80073ac:	2202      	movs	r2, #2
 80073ae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
					DUAL_STATE_LS = ACK_LORA_PENDING;
 80073b2:	4b28      	ldr	r3, [pc, #160]	; (8007454 <Task_Read_Nemeus+0x3e4>)
 80073b4:	2202      	movs	r2, #2
 80073b6:	701a      	strb	r2, [r3, #0]
				}
			}
		}

		if ( //
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 80073b8:	4b22      	ldr	r3, [pc, #136]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073ba:	799b      	ldrb	r3, [r3, #6]
		if ( //
 80073bc:	2b52      	cmp	r3, #82	; 0x52
 80073be:	f040 80bd 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
		(Rx_bufferNemeus[6] == 'R') && (Rx_bufferNemeus[7] == 'C')
 80073c2:	4b20      	ldr	r3, [pc, #128]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073c4:	79db      	ldrb	r3, [r3, #7]
 80073c6:	2b43      	cmp	r3, #67	; 0x43
 80073c8:	f040 80b8 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[8] == 'V') && (Rx_bufferNemeus[9] == 'B')
 80073cc:	4b1d      	ldr	r3, [pc, #116]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073ce:	7a1b      	ldrb	r3, [r3, #8]
 80073d0:	2b56      	cmp	r3, #86	; 0x56
 80073d2:	f040 80b3 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
 80073d6:	4b1b      	ldr	r3, [pc, #108]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073d8:	7a5b      	ldrb	r3, [r3, #9]
 80073da:	2b42      	cmp	r3, #66	; 0x42
 80073dc:	f040 80ae 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
				&& (Rx_bufferNemeus[10] == 'I') && (Rx_bufferNemeus[11] == 'N'))
 80073e0:	4b18      	ldr	r3, [pc, #96]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073e2:	7a9b      	ldrb	r3, [r3, #10]
 80073e4:	2b49      	cmp	r3, #73	; 0x49
 80073e6:	f040 80a9 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
 80073ea:	4b16      	ldr	r3, [pc, #88]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 80073ec:	7adb      	ldrb	r3, [r3, #11]
 80073ee:	2b4e      	cmp	r3, #78	; 0x4e
 80073f0:	f040 80a4 	bne.w	800753c <Task_Read_Nemeus+0x4cc>
		{

			uint8_t nbcomma = 0;
 80073f4:	2300      	movs	r3, #0
 80073f6:	737b      	strb	r3, [r7, #13]
			uint8_t nbchar = 0;
 80073f8:	2300      	movs	r3, #0
 80073fa:	733b      	strb	r3, [r7, #12]
			uint8_t pending_downlink = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	70fb      	strb	r3, [r7, #3]

			// PARSING ',' to look for RSSI
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8007400:	e012      	b.n	8007428 <Task_Read_Nemeus+0x3b8>
			{
				if (Rx_bufferNemeus[nbchar] == ',')
 8007402:	7b3b      	ldrb	r3, [r7, #12]
 8007404:	4a0f      	ldr	r2, [pc, #60]	; (8007444 <Task_Read_Nemeus+0x3d4>)
 8007406:	5cd3      	ldrb	r3, [r2, r3]
 8007408:	2b2c      	cmp	r3, #44	; 0x2c
 800740a:	d102      	bne.n	8007412 <Task_Read_Nemeus+0x3a2>
					nbcomma++;
 800740c:	7b7b      	ldrb	r3, [r7, #13]
 800740e:	3301      	adds	r3, #1
 8007410:	737b      	strb	r3, [r7, #13]
				if (nbcomma == 2)
 8007412:	7b7b      	ldrb	r3, [r7, #13]
 8007414:	2b02      	cmp	r3, #2
 8007416:	d104      	bne.n	8007422 <Task_Read_Nemeus+0x3b2>
					if (nbchar + 1 == 't')
 8007418:	7b3b      	ldrb	r3, [r7, #12]
 800741a:	2b73      	cmp	r3, #115	; 0x73
 800741c:	d101      	bne.n	8007422 <Task_Read_Nemeus+0x3b2>
						pending_downlink = 1; // not use, never true
 800741e:	2301      	movs	r3, #1
 8007420:	70fb      	strb	r3, [r7, #3]

				nbchar++;
 8007422:	7b3b      	ldrb	r3, [r7, #12]
 8007424:	3301      	adds	r3, #1
 8007426:	733b      	strb	r3, [r7, #12]
			while (nbcomma < 4 && nbchar <= MAXITNEMEUS)
 8007428:	7b7b      	ldrb	r3, [r7, #13]
 800742a:	2b03      	cmp	r3, #3
 800742c:	d802      	bhi.n	8007434 <Task_Read_Nemeus+0x3c4>
 800742e:	7b3b      	ldrb	r3, [r7, #12]
 8007430:	2bc8      	cmp	r3, #200	; 0xc8
 8007432:	d9e6      	bls.n	8007402 <Task_Read_Nemeus+0x392>
			}

			// TESTING LORA SUCCESSFUL, TIME TO TEST SIGFOX
			if (DUAL_STATE_LS == ACK_LORA_PENDING)
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <Task_Read_Nemeus+0x3e4>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b02      	cmp	r3, #2
 800743a:	d122      	bne.n	8007482 <Task_Read_Nemeus+0x412>
			{
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 800743c:	2300      	movs	r3, #0
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	e014      	b.n	800746c <Task_Read_Nemeus+0x3fc>
 8007442:	bf00      	nop
 8007444:	200027e8 	.word	0x200027e8
 8007448:	20002584 	.word	0x20002584
 800744c:	20000c28 	.word	0x20000c28
 8007450:	200028b0 	.word	0x200028b0
 8007454:	20000c0b 	.word	0x20000c0b
 8007458:	20000c14 	.word	0x20000c14
				{
					Rx_Nemeus[i_fct] = 0;
 800745c:	4a43      	ldr	r2, [pc, #268]	; (800756c <Task_Read_Nemeus+0x4fc>)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	4413      	add	r3, r2
 8007462:	2200      	movs	r2, #0
 8007464:	701a      	strb	r2, [r3, #0]
				for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	3301      	adds	r3, #1
 800746a:	60bb      	str	r3, [r7, #8]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2bc7      	cmp	r3, #199	; 0xc7
 8007470:	ddf4      	ble.n	800745c <Task_Read_Nemeus+0x3ec>
				}

				DUAL_STATE_LS = SF_DELAY_ON;
 8007472:	4b3f      	ldr	r3, [pc, #252]	; (8007570 <Task_Read_Nemeus+0x500>)
 8007474:	2203      	movs	r2, #3
 8007476:	701a      	strb	r2, [r3, #0]
				AskJoinTimeLoraWan = HAL_GetTick();
 8007478:	f004 fc1a 	bl	800bcb0 <HAL_GetTick>
 800747c:	4603      	mov	r3, r0
 800747e:	4a3d      	ldr	r2, [pc, #244]	; (8007574 <Task_Read_Nemeus+0x504>)
 8007480:	6013      	str	r3, [r2, #0]

			}

			// IF THERE IS A '-' IT MEANS THE MESSAGE IS RECEIVED FROM AN ANTENNA
			if (Rx_bufferNemeus[nbchar] == '-')	//if (Rx_Nemeus[22] == '-')
 8007482:	7b3b      	ldrb	r3, [r7, #12]
 8007484:	4a3c      	ldr	r2, [pc, #240]	; (8007578 <Task_Read_Nemeus+0x508>)
 8007486:	5cd3      	ldrb	r3, [r2, r3]
 8007488:	2b2d      	cmp	r3, #45	; 0x2d
 800748a:	d157      	bne.n	800753c <Task_Read_Nemeus+0x4cc>
//						TabGen[ALERT_PENDING] = 0;
//						TabGen[SIGFOX_SEND] = 0;
//						TabGen[ALERT_PENDING] = 0;
//					}

				if (TabGen[LORAWAN_RSSI] == 0)
 800748c:	4b3b      	ldr	r3, [pc, #236]	; (800757c <Task_Read_Nemeus+0x50c>)
 800748e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007492:	2b00      	cmp	r3, #0
 8007494:	d10a      	bne.n	80074ac <Task_Read_Nemeus+0x43c>
				{
#ifndef debug_sound_vibration
					PowerBuzVib(100);
#endif
#ifdef debug_sound_vibration
					PowerVib(100);
 8007496:	2064      	movs	r0, #100	; 0x64
 8007498:	f7fb fb21 	bl	8002ade <PowerVib>
#endif

					TabTimer[ACK_TIMER] = HAL_GetTick();
 800749c:	f004 fc08 	bl	800bcb0 <HAL_GetTick>
 80074a0:	4603      	mov	r3, r0
 80074a2:	4a37      	ldr	r2, [pc, #220]	; (8007580 <Task_Read_Nemeus+0x510>)
 80074a4:	60d3      	str	r3, [r2, #12]
					TabGen[RE_ON_SCREEN] = 1;
 80074a6:	4b35      	ldr	r3, [pc, #212]	; (800757c <Task_Read_Nemeus+0x50c>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	651a      	str	r2, [r3, #80]	; 0x50
				}

				if (Rx_bufferNemeus[nbchar + 3] == '.') // 2 digit => -XX.XX
 80074ac:	7b3b      	ldrb	r3, [r7, #12]
 80074ae:	3303      	adds	r3, #3
 80074b0:	4a31      	ldr	r2, [pc, #196]	; (8007578 <Task_Read_Nemeus+0x508>)
 80074b2:	5cd3      	ldrb	r3, [r2, r3]
 80074b4:	2b2e      	cmp	r3, #46	; 0x2e
 80074b6:	d114      	bne.n	80074e2 <Task_Read_Nemeus+0x472>
				{
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 80074b8:	7b3b      	ldrb	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	4a2e      	ldr	r2, [pc, #184]	; (8007578 <Task_Read_Nemeus+0x508>)
 80074be:	5cd3      	ldrb	r3, [r2, r3]
 80074c0:	f1c3 0230 	rsb	r2, r3, #48	; 0x30
							* 10 + (Rx_bufferNemeus[nbchar + 2] - '0');
 80074c4:	4613      	mov	r3, r2
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	4413      	add	r3, r2
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	4619      	mov	r1, r3
 80074ce:	7b3b      	ldrb	r3, [r7, #12]
 80074d0:	3302      	adds	r3, #2
 80074d2:	4a29      	ldr	r2, [pc, #164]	; (8007578 <Task_Read_Nemeus+0x508>)
 80074d4:	5cd3      	ldrb	r3, [r2, r3]
 80074d6:	3b30      	subs	r3, #48	; 0x30
 80074d8:	440b      	add	r3, r1
					TabGen[LORAWAN_RSSI] = -(Rx_bufferNemeus[nbchar + 1] - '0')
 80074da:	4a28      	ldr	r2, [pc, #160]	; (800757c <Task_Read_Nemeus+0x50c>)
 80074dc:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c
 80074e0:	e02c      	b.n	800753c <Task_Read_Nemeus+0x4cc>
				}
				else // 3 digits => -XXX.XX
				{
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 80074e2:	7b3b      	ldrb	r3, [r7, #12]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a24      	ldr	r2, [pc, #144]	; (8007578 <Task_Read_Nemeus+0x508>)
 80074e8:	5cd3      	ldrb	r3, [r2, r3]
 80074ea:	3b30      	subs	r3, #48	; 0x30
							* 100 + (Rx_bufferNemeus[nbchar + 2] - '0') * 10
 80074ec:	2264      	movs	r2, #100	; 0x64
 80074ee:	fb02 f103 	mul.w	r1, r2, r3
 80074f2:	7b3b      	ldrb	r3, [r7, #12]
 80074f4:	3302      	adds	r3, #2
 80074f6:	4a20      	ldr	r2, [pc, #128]	; (8007578 <Task_Read_Nemeus+0x508>)
 80074f8:	5cd3      	ldrb	r3, [r2, r3]
 80074fa:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	005b      	lsls	r3, r3, #1
 8007506:	18ca      	adds	r2, r1, r3
							+ (Rx_bufferNemeus[nbchar + 3] - '0'));
 8007508:	7b3b      	ldrb	r3, [r7, #12]
 800750a:	3303      	adds	r3, #3
 800750c:	491a      	ldr	r1, [pc, #104]	; (8007578 <Task_Read_Nemeus+0x508>)
 800750e:	5ccb      	ldrb	r3, [r1, r3]
 8007510:	3b30      	subs	r3, #48	; 0x30
 8007512:	4413      	add	r3, r2
					TabGen[LORAWAN_RSSI] = -((Rx_bufferNemeus[nbchar + 1] - '0')
 8007514:	425b      	negs	r3, r3
 8007516:	4a19      	ldr	r2, [pc, #100]	; (800757c <Task_Read_Nemeus+0x50c>)
 8007518:	f8c2 313c 	str.w	r3, [r2, #316]	; 0x13c

					if (TabGen[LORAWAN_RSSI] <= -150
 800751c:	4b17      	ldr	r3, [pc, #92]	; (800757c <Task_Read_Nemeus+0x50c>)
 800751e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8007522:	f113 0f95 	cmn.w	r3, #149	; 0x95
 8007526:	da09      	bge.n	800753c <Task_Read_Nemeus+0x4cc>
							&& TabGen[LORAWAN_RSSI] >= -10)
 8007528:	4b14      	ldr	r3, [pc, #80]	; (800757c <Task_Read_Nemeus+0x50c>)
 800752a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800752e:	f113 0f0a 	cmn.w	r3, #10
 8007532:	db03      	blt.n	800753c <Task_Read_Nemeus+0x4cc>
					{
						TabGen[LORAWAN_RSSI] = 0; // if RSSI is not between -10 and -150 dB, value is considered false
 8007534:	4b11      	ldr	r3, [pc, #68]	; (800757c <Task_Read_Nemeus+0x50c>)
 8007536:	2200      	movs	r2, #0
 8007538:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
//				}
		}
	}

	// CLEAR DMA BUFFER
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 800753c:	2300      	movs	r3, #0
 800753e:	607b      	str	r3, [r7, #4]
 8007540:	e00c      	b.n	800755c <Task_Read_Nemeus+0x4ec>
	{
		Rx_Nemeus[i_fct] = 0;
 8007542:	4a0a      	ldr	r2, [pc, #40]	; (800756c <Task_Read_Nemeus+0x4fc>)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4413      	add	r3, r2
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
		Rx_bufferNemeus[i_fct] = 0;
 800754c:	4a0a      	ldr	r2, [pc, #40]	; (8007578 <Task_Read_Nemeus+0x508>)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4413      	add	r3, r2
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAXITNEMEUS; i_fct++)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3301      	adds	r3, #1
 800755a:	607b      	str	r3, [r7, #4]
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2bc7      	cmp	r3, #199	; 0xc7
 8007560:	ddef      	ble.n	8007542 <Task_Read_Nemeus+0x4d2>
	}
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}
 800756c:	20001e44 	.word	0x20001e44
 8007570:	20000c0b 	.word	0x20000c0b
 8007574:	20000c28 	.word	0x20000c28
 8007578:	200027e8 	.word	0x200027e8
 800757c:	20002584 	.word	0x20002584
 8007580:	200028b0 	.word	0x200028b0

08007584 <Repeater_Link_Management>:
		}
	}
}

void Repeater_Link_Management(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
	if (ping_rep_ok == 1)
 8007588:	4b36      	ldr	r3, [pc, #216]	; (8007664 <Repeater_Link_Management+0xe0>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d112      	bne.n	80075b6 <Repeater_Link_Management+0x32>
	{
		network_state = 0;
 8007590:	4b35      	ldr	r3, [pc, #212]	; (8007668 <Repeater_Link_Management+0xe4>)
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
		ping_rep_ok = 0;
 8007596:	4b33      	ldr	r3, [pc, #204]	; (8007664 <Repeater_Link_Management+0xe0>)
 8007598:	2200      	movs	r2, #0
 800759a:	701a      	strb	r2, [r3, #0]
		//PowerVib(100);
		TabGen[STATUS_REP] = 1;
 800759c:	4b33      	ldr	r3, [pc, #204]	; (800766c <Repeater_Link_Management+0xe8>)
 800759e:	2201      	movs	r2, #1
 80075a0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		time_network_rep = HAL_GetTick();
 80075a4:	f004 fb84 	bl	800bcb0 <HAL_GetTick>
 80075a8:	4603      	mov	r3, r0
 80075aa:	4a31      	ldr	r2, [pc, #196]	; (8007670 <Repeater_Link_Management+0xec>)
 80075ac:	6013      	str	r3, [r2, #0]
		millis = time_network_rep;
 80075ae:	4b30      	ldr	r3, [pc, #192]	; (8007670 <Repeater_Link_Management+0xec>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a30      	ldr	r2, [pc, #192]	; (8007674 <Repeater_Link_Management+0xf0>)
 80075b4:	6013      	str	r3, [r2, #0]
	}
	if (TabGen[STATUS_REP] == 1)
 80075b6:	4b2d      	ldr	r3, [pc, #180]	; (800766c <Repeater_Link_Management+0xe8>)
 80075b8:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d14e      	bne.n	800765e <Repeater_Link_Management+0xda>
	{
		if ((network_state == 0)
 80075c0:	4b29      	ldr	r3, [pc, #164]	; (8007668 <Repeater_Link_Management+0xe4>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d10e      	bne.n	80075e6 <Repeater_Link_Management+0x62>
				&& ((millis - time_network_rep)
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <Repeater_Link_Management+0xf0>)
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	4b28      	ldr	r3, [pc, #160]	; (8007670 <Repeater_Link_Management+0xec>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d905      	bls.n	80075e6 <Repeater_Link_Management+0x62>
						> (TIME_BETWEEN_PING * 1 * 1000 + 1000)))
		{
			network_state = 1;
 80075da:	4b23      	ldr	r3, [pc, #140]	; (8007668 <Repeater_Link_Management+0xe4>)
 80075dc:	2201      	movs	r2, #1
 80075de:	701a      	strb	r2, [r3, #0]
#ifdef debug_sound_vibration
			PowerVib(100);
 80075e0:	2064      	movs	r0, #100	; 0x64
 80075e2:	f7fb fa7c 	bl	8002ade <PowerVib>
			PowerBuzVib(100);
#endif
			//ContinuousRxLora();
		}

		if ((network_state == 1)
 80075e6:	4b20      	ldr	r3, [pc, #128]	; (8007668 <Repeater_Link_Management+0xe4>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d114      	bne.n	8007618 <Repeater_Link_Management+0x94>
				&& ((millis - time_network_rep)
 80075ee:	4b21      	ldr	r3, [pc, #132]	; (8007674 <Repeater_Link_Management+0xf0>)
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <Repeater_Link_Management+0xec>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f245 2208 	movw	r2, #21000	; 0x5208
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d90b      	bls.n	8007618 <Repeater_Link_Management+0x94>
						> (TIME_BETWEEN_PING * 2 * 1000 + 1000)))
		{
			network_state = 2;
 8007600:	4b19      	ldr	r3, [pc, #100]	; (8007668 <Repeater_Link_Management+0xe4>)
 8007602:	2202      	movs	r2, #2
 8007604:	701a      	strb	r2, [r3, #0]

#ifdef debug_sound_vibration
			PowerVib(100);
 8007606:	2064      	movs	r0, #100	; 0x64
 8007608:	f7fb fa69 	bl	8002ade <PowerVib>
			HAL_Delay(200);
 800760c:	20c8      	movs	r0, #200	; 0xc8
 800760e:	f004 fb5b 	bl	800bcc8 <HAL_Delay>
			PowerVib(100);
 8007612:	2064      	movs	r0, #100	; 0x64
 8007614:	f7fb fa63 	bl	8002ade <PowerVib>
			HAL_Delay(200);
			PowerBuzVib(100);
#endif
		}

		if ((network_state == 2)
 8007618:	4b13      	ldr	r3, [pc, #76]	; (8007668 <Repeater_Link_Management+0xe4>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b02      	cmp	r3, #2
 800761e:	d11e      	bne.n	800765e <Repeater_Link_Management+0xda>
				&& ((millis - time_network_rep)
 8007620:	4b14      	ldr	r3, [pc, #80]	; (8007674 <Repeater_Link_Management+0xf0>)
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	4b12      	ldr	r3, [pc, #72]	; (8007670 <Repeater_Link_Management+0xec>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	f647 1218 	movw	r2, #31000	; 0x7918
 800762e:	4293      	cmp	r3, r2
 8007630:	d915      	bls.n	800765e <Repeater_Link_Management+0xda>
						> (TIME_BETWEEN_PING * 3 * 1000 + 1000)))
		{
			network_state = 3;
 8007632:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <Repeater_Link_Management+0xe4>)
 8007634:	2203      	movs	r2, #3
 8007636:	701a      	strb	r2, [r3, #0]
#ifdef debug_sound_vibration
			PowerVib(100);
 8007638:	2064      	movs	r0, #100	; 0x64
 800763a:	f7fb fa50 	bl	8002ade <PowerVib>
			HAL_Delay(200);
 800763e:	20c8      	movs	r0, #200	; 0xc8
 8007640:	f004 fb42 	bl	800bcc8 <HAL_Delay>
			PowerVib(100);
 8007644:	2064      	movs	r0, #100	; 0x64
 8007646:	f7fb fa4a 	bl	8002ade <PowerVib>
			HAL_Delay(200);
 800764a:	20c8      	movs	r0, #200	; 0xc8
 800764c:	f004 fb3c 	bl	800bcc8 <HAL_Delay>
			PowerVib(100);
 8007650:	2064      	movs	r0, #100	; 0x64
 8007652:	f7fb fa44 	bl	8002ade <PowerVib>
			HAL_Delay(200);
			PowerBuzVib(100);
			HAL_Delay(200);
			PowerBuzVib(100);
#endif
			TabGen[STATUS_REP] = 0;
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <Repeater_Link_Management+0xe8>)
 8007658:	2200      	movs	r2, #0
 800765a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
		}
	}
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000c0a 	.word	0x20000c0a
 8007668:	20000c09 	.word	0x20000c09
 800766c:	20002584 	.word	0x20002584
 8007670:	20000bf8 	.word	0x20000bf8
 8007674:	20000bf4 	.word	0x20000bf4

08007678 <Battery_Charger_Management>:
extern volatile uint8_t Flag[];
extern uint8_t USB_In_Event;
extern float TabFloatValue[];

void Battery_Charger_Management(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	if (Flag[F_CHARGER] == 1)
 800767e:	4ba4      	ldr	r3, [pc, #656]	; (8007910 <Battery_Charger_Management+0x298>)
 8007680:	785b      	ldrb	r3, [r3, #1]
 8007682:	b2db      	uxtb	r3, r3
 8007684:	2b01      	cmp	r3, #1
 8007686:	d165      	bne.n	8007754 <Battery_Charger_Management+0xdc>
	{
		Flag[F_CHARGER] = 0;
 8007688:	4ba1      	ldr	r3, [pc, #644]	; (8007910 <Battery_Charger_Management+0x298>)
 800768a:	2200      	movs	r2, #0
 800768c:	705a      	strb	r2, [r3, #1]
		TaskCharger(TabGen);
 800768e:	48a1      	ldr	r0, [pc, #644]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007690:	f7fe f95c 	bl	800594c <TaskCharger>
		if (TabGen[CHARGEC] == 0)
 8007694:	4b9f      	ldr	r3, [pc, #636]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007696:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800769a:	2b00      	cmp	r3, #0
 800769c:	d127      	bne.n	80076ee <Battery_Charger_Management+0x76>
		{
			if (USB_In_Event == 1)
 800769e:	4b9e      	ldr	r3, [pc, #632]	; (8007918 <Battery_Charger_Management+0x2a0>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d123      	bne.n	80076ee <Battery_Charger_Management+0x76>
			{
				USB_In_Event = 0;
 80076a6:	4b9c      	ldr	r3, [pc, #624]	; (8007918 <Battery_Charger_Management+0x2a0>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 80076ac:	4b99      	ldr	r3, [pc, #612]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 80076b2:	2032      	movs	r0, #50	; 0x32
 80076b4:	f7fb fa13 	bl	8002ade <PowerVib>

				TabGen[ALERT_ON] = 0; // clear alert
 80076b8:	4b96      	ldr	r3, [pc, #600]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076ba:	2200      	movs	r2, #0
 80076bc:	601a      	str	r2, [r3, #0]
				TabGen[NS_MALAISE] = 0;
 80076be:	4b95      	ldr	r3, [pc, #596]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076c0:	2200      	movs	r2, #0
 80076c2:	63da      	str	r2, [r3, #60]	; 0x3c
				TabGen[NS_IMMO] = 0;
 80076c4:	4b93      	ldr	r3, [pc, #588]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
				for (uint8_t i = 0; i < NB_ALERT; i++)
 80076ca:	2300      	movs	r3, #0
 80076cc:	71fb      	strb	r3, [r7, #7]
 80076ce:	e007      	b.n	80076e0 <Battery_Charger_Management+0x68>
					TabAlert[i] = 0;
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	4a92      	ldr	r2, [pc, #584]	; (800791c <Battery_Charger_Management+0x2a4>)
 80076d4:	2100      	movs	r1, #0
 80076d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (uint8_t i = 0; i < NB_ALERT; i++)
 80076da:	79fb      	ldrb	r3, [r7, #7]
 80076dc:	3301      	adds	r3, #1
 80076de:	71fb      	strb	r3, [r7, #7]
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	2b0d      	cmp	r3, #13
 80076e4:	d9f4      	bls.n	80076d0 <Battery_Charger_Management+0x58>
				TabGen[TYPE_ALERT] = NONE_ALERT;
 80076e6:	4b8b      	ldr	r3, [pc, #556]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076e8:	2200      	movs	r2, #0
 80076ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			}
		}
		if (TabGen[CHARGEC] == 1)
 80076ee:	4b89      	ldr	r3, [pc, #548]	; (8007914 <Battery_Charger_Management+0x29c>)
 80076f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d12d      	bne.n	8007754 <Battery_Charger_Management+0xdc>
		{
			if (USB_In_Event == 0)
 80076f8:	4b87      	ldr	r3, [pc, #540]	; (8007918 <Battery_Charger_Management+0x2a0>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d108      	bne.n	8007712 <Battery_Charger_Management+0x9a>
			{
				USB_In_Event = 1;
 8007700:	4b85      	ldr	r3, [pc, #532]	; (8007918 <Battery_Charger_Management+0x2a0>)
 8007702:	2201      	movs	r2, #1
 8007704:	701a      	strb	r2, [r3, #0]
				TabGen[RE_ON_SCREEN] = 1;
 8007706:	4b83      	ldr	r3, [pc, #524]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007708:	2201      	movs	r2, #1
 800770a:	651a      	str	r2, [r3, #80]	; 0x50
				PowerVib(50);
 800770c:	2032      	movs	r0, #50	; 0x32
 800770e:	f7fb f9e6 	bl	8002ade <PowerVib>
			}
			TabGen[ALERT_ON] = 0; // clear alert
 8007712:	4b80      	ldr	r3, [pc, #512]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007714:	2200      	movs	r2, #0
 8007716:	601a      	str	r2, [r3, #0]
			TabGen[NS_MALAISE] = 0;
 8007718:	4b7e      	ldr	r3, [pc, #504]	; (8007914 <Battery_Charger_Management+0x29c>)
 800771a:	2200      	movs	r2, #0
 800771c:	63da      	str	r2, [r3, #60]	; 0x3c
			TabGen[NS_IMMO] = 0;
 800771e:	4b7d      	ldr	r3, [pc, #500]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007720:	2200      	movs	r2, #0
 8007722:	641a      	str	r2, [r3, #64]	; 0x40
			for (uint8_t i = 0; i < NB_ALERT; i++)
 8007724:	2300      	movs	r3, #0
 8007726:	71bb      	strb	r3, [r7, #6]
 8007728:	e007      	b.n	800773a <Battery_Charger_Management+0xc2>
				TabAlert[i] = 0;
 800772a:	79bb      	ldrb	r3, [r7, #6]
 800772c:	4a7b      	ldr	r2, [pc, #492]	; (800791c <Battery_Charger_Management+0x2a4>)
 800772e:	2100      	movs	r1, #0
 8007730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (uint8_t i = 0; i < NB_ALERT; i++)
 8007734:	79bb      	ldrb	r3, [r7, #6]
 8007736:	3301      	adds	r3, #1
 8007738:	71bb      	strb	r3, [r7, #6]
 800773a:	79bb      	ldrb	r3, [r7, #6]
 800773c:	2b0d      	cmp	r3, #13
 800773e:	d9f4      	bls.n	800772a <Battery_Charger_Management+0xb2>
			TabGen[TYPE_ALERT] = NONE_ALERT;
 8007740:	4b74      	ldr	r3, [pc, #464]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007742:	2200      	movs	r2, #0
 8007744:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
			TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 8007748:	4b75      	ldr	r3, [pc, #468]	; (8007920 <Battery_Charger_Management+0x2a8>)
 800774a:	4a76      	ldr	r2, [pc, #472]	; (8007924 <Battery_Charger_Management+0x2ac>)
 800774c:	4971      	ldr	r1, [pc, #452]	; (8007914 <Battery_Charger_Management+0x29c>)
 800774e:	4873      	ldr	r0, [pc, #460]	; (800791c <Battery_Charger_Management+0x2a4>)
 8007750:	f7fe fb10 	bl	8005d74 <TaskAlertAll>
		}
	}

#ifndef BATT//debug_sound_vibration
	if (Flag[F_BATTERY] == 1)
 8007754:	4b6e      	ldr	r3, [pc, #440]	; (8007910 <Battery_Charger_Management+0x298>)
 8007756:	789b      	ldrb	r3, [r3, #2]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b01      	cmp	r3, #1
 800775c:	f040 80b8 	bne.w	80078d0 <Battery_Charger_Management+0x258>
	{
		Flag[F_BATTERY] = 0;
 8007760:	4b6b      	ldr	r3, [pc, #428]	; (8007910 <Battery_Charger_Management+0x298>)
 8007762:	2200      	movs	r2, #0
 8007764:	709a      	strb	r2, [r3, #2]
		TaskReadBat(TabGen);
 8007766:	486b      	ldr	r0, [pc, #428]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007768:	f7fe f919 	bl	800599e <TaskReadBat>
		// Battery level between 15 - 20, do nothing
		if (TabGen[BAT_VALUE] > 15 && TabGen[BAT_VALUE] < 20)
 800776c:	4b69      	ldr	r3, [pc, #420]	; (8007914 <Battery_Charger_Management+0x29c>)
 800776e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007772:	2b0f      	cmp	r3, #15
 8007774:	dd10      	ble.n	8007798 <Battery_Charger_Management+0x120>
 8007776:	4b67      	ldr	r3, [pc, #412]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007778:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800777c:	2b13      	cmp	r3, #19
 800777e:	dc0b      	bgt.n	8007798 <Battery_Charger_Management+0x120>
		{
			batt_20 = 1; //
 8007780:	4b69      	ldr	r3, [pc, #420]	; (8007928 <Battery_Charger_Management+0x2b0>)
 8007782:	2201      	movs	r2, #1
 8007784:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 8007786:	4b69      	ldr	r3, [pc, #420]	; (800792c <Battery_Charger_Management+0x2b4>)
 8007788:	2200      	movs	r2, #0
 800778a:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 800778c:	4b68      	ldr	r3, [pc, #416]	; (8007930 <Battery_Charger_Management+0x2b8>)
 800778e:	2200      	movs	r2, #0
 8007790:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 8007792:	4b68      	ldr	r3, [pc, #416]	; (8007934 <Battery_Charger_Management+0x2bc>)
 8007794:	2200      	movs	r2, #0
 8007796:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 10 - 15. If the battery was previously above 15 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] > 10 && TabGen[BAT_VALUE] < 15)
 8007798:	4b5e      	ldr	r3, [pc, #376]	; (8007914 <Battery_Charger_Management+0x29c>)
 800779a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800779e:	2b0a      	cmp	r3, #10
 80077a0:	dd2b      	ble.n	80077fa <Battery_Charger_Management+0x182>
 80077a2:	4b5c      	ldr	r3, [pc, #368]	; (8007914 <Battery_Charger_Management+0x29c>)
 80077a4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077a8:	2b0e      	cmp	r3, #14
 80077aa:	dc26      	bgt.n	80077fa <Battery_Charger_Management+0x182>
		{
			if (batt_20 == 1)
 80077ac:	4b5e      	ldr	r3, [pc, #376]	; (8007928 <Battery_Charger_Management+0x2b0>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d116      	bne.n	80077e2 <Battery_Charger_Management+0x16a>
			{
				PowerBuzVib(100);
 80077b4:	2064      	movs	r0, #100	; 0x64
 80077b6:	f7fb f97d 	bl	8002ab4 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 80077ba:	4b56      	ldr	r3, [pc, #344]	; (8007914 <Battery_Charger_Management+0x29c>)
 80077bc:	2200      	movs	r2, #0
 80077be:	2100      	movs	r1, #0
 80077c0:	20fa      	movs	r0, #250	; 0xfa
 80077c2:	f7fc ff65 	bl	8004690 <LedOn>
				HAL_Delay(50);
 80077c6:	2032      	movs	r0, #50	; 0x32
 80077c8:	f004 fa7e 	bl	800bcc8 <HAL_Delay>
				PowerBuzVib(100);
 80077cc:	2064      	movs	r0, #100	; 0x64
 80077ce:	f7fb f971 	bl	8002ab4 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 80077d2:	4b50      	ldr	r3, [pc, #320]	; (8007914 <Battery_Charger_Management+0x29c>)
 80077d4:	2201      	movs	r2, #1
 80077d6:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 80077d8:	f004 fa6a 	bl	800bcb0 <HAL_GetTick>
 80077dc:	4603      	mov	r3, r0
 80077de:	4a56      	ldr	r2, [pc, #344]	; (8007938 <Battery_Charger_Management+0x2c0>)
 80077e0:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 80077e2:	4b51      	ldr	r3, [pc, #324]	; (8007928 <Battery_Charger_Management+0x2b0>)
 80077e4:	2200      	movs	r2, #0
 80077e6:	701a      	strb	r2, [r3, #0]
			batt_15 = 1; //
 80077e8:	4b50      	ldr	r3, [pc, #320]	; (800792c <Battery_Charger_Management+0x2b4>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 80077ee:	4b50      	ldr	r3, [pc, #320]	; (8007930 <Battery_Charger_Management+0x2b8>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 80077f4:	4b4f      	ldr	r3, [pc, #316]	; (8007934 <Battery_Charger_Management+0x2bc>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 5 - 10. If the battery was previously above 10 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] > 5 && TabGen[BAT_VALUE] < 10)
 80077fa:	4b46      	ldr	r3, [pc, #280]	; (8007914 <Battery_Charger_Management+0x29c>)
 80077fc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007800:	2b05      	cmp	r3, #5
 8007802:	dd2b      	ble.n	800785c <Battery_Charger_Management+0x1e4>
 8007804:	4b43      	ldr	r3, [pc, #268]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007806:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800780a:	2b09      	cmp	r3, #9
 800780c:	dc26      	bgt.n	800785c <Battery_Charger_Management+0x1e4>
		{
			if (batt_15 == 1)
 800780e:	4b47      	ldr	r3, [pc, #284]	; (800792c <Battery_Charger_Management+0x2b4>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d116      	bne.n	8007844 <Battery_Charger_Management+0x1cc>
			{
				PowerBuzVib(100);
 8007816:	2064      	movs	r0, #100	; 0x64
 8007818:	f7fb f94c 	bl	8002ab4 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 800781c:	4b3d      	ldr	r3, [pc, #244]	; (8007914 <Battery_Charger_Management+0x29c>)
 800781e:	2200      	movs	r2, #0
 8007820:	2100      	movs	r1, #0
 8007822:	20fa      	movs	r0, #250	; 0xfa
 8007824:	f7fc ff34 	bl	8004690 <LedOn>
				HAL_Delay(50);
 8007828:	2032      	movs	r0, #50	; 0x32
 800782a:	f004 fa4d 	bl	800bcc8 <HAL_Delay>
				PowerBuzVib(100);
 800782e:	2064      	movs	r0, #100	; 0x64
 8007830:	f7fb f940 	bl	8002ab4 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 8007834:	4b37      	ldr	r3, [pc, #220]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007836:	2201      	movs	r2, #1
 8007838:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 800783a:	f004 fa39 	bl	800bcb0 <HAL_GetTick>
 800783e:	4603      	mov	r3, r0
 8007840:	4a3d      	ldr	r2, [pc, #244]	; (8007938 <Battery_Charger_Management+0x2c0>)
 8007842:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 8007844:	4b38      	ldr	r3, [pc, #224]	; (8007928 <Battery_Charger_Management+0x2b0>)
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <Battery_Charger_Management+0x2b4>)
 800784c:	2200      	movs	r2, #0
 800784e:	701a      	strb	r2, [r3, #0]
			batt_10 = 1; //
 8007850:	4b37      	ldr	r3, [pc, #220]	; (8007930 <Battery_Charger_Management+0x2b8>)
 8007852:	2201      	movs	r2, #1
 8007854:	701a      	strb	r2, [r3, #0]
			batt_5 = 0;
 8007856:	4b37      	ldr	r3, [pc, #220]	; (8007934 <Battery_Charger_Management+0x2bc>)
 8007858:	2200      	movs	r2, #0
 800785a:	701a      	strb	r2, [r3, #0]
		}
		// Battery level between 0 - 5. If the battery was previously above 5 => vibration and buzzer because battery level is decreasing
		if (TabGen[BAT_VALUE] < 5)
 800785c:	4b2d      	ldr	r3, [pc, #180]	; (8007914 <Battery_Charger_Management+0x29c>)
 800785e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007862:	2b04      	cmp	r3, #4
 8007864:	dc34      	bgt.n	80078d0 <Battery_Charger_Management+0x258>
		{
			if (batt_10 == 1)
 8007866:	4b32      	ldr	r3, [pc, #200]	; (8007930 <Battery_Charger_Management+0x2b8>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d116      	bne.n	800789c <Battery_Charger_Management+0x224>
			{
				PowerBuzVib(100);
 800786e:	2064      	movs	r0, #100	; 0x64
 8007870:	f7fb f920 	bl	8002ab4 <PowerBuzVib>
				LedOn(250, 0, 0, TabGen);
 8007874:	4b27      	ldr	r3, [pc, #156]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007876:	2200      	movs	r2, #0
 8007878:	2100      	movs	r1, #0
 800787a:	20fa      	movs	r0, #250	; 0xfa
 800787c:	f7fc ff08 	bl	8004690 <LedOn>
				HAL_Delay(50);
 8007880:	2032      	movs	r0, #50	; 0x32
 8007882:	f004 fa21 	bl	800bcc8 <HAL_Delay>
				PowerBuzVib(100);
 8007886:	2064      	movs	r0, #100	; 0x64
 8007888:	f7fb f914 	bl	8002ab4 <PowerBuzVib>
				TabGen[RE_ON_SCREEN] = 1;
 800788c:	4b21      	ldr	r3, [pc, #132]	; (8007914 <Battery_Charger_Management+0x29c>)
 800788e:	2201      	movs	r2, #1
 8007890:	651a      	str	r2, [r3, #80]	; 0x50
				TabTimer[TIMER_LOW_BAT] = HAL_GetTick();
 8007892:	f004 fa0d 	bl	800bcb0 <HAL_GetTick>
 8007896:	4603      	mov	r3, r0
 8007898:	4a27      	ldr	r2, [pc, #156]	; (8007938 <Battery_Charger_Management+0x2c0>)
 800789a:	6153      	str	r3, [r2, #20]
			}
			batt_20 = 0;
 800789c:	4b22      	ldr	r3, [pc, #136]	; (8007928 <Battery_Charger_Management+0x2b0>)
 800789e:	2200      	movs	r2, #0
 80078a0:	701a      	strb	r2, [r3, #0]
			batt_15 = 0;
 80078a2:	4b22      	ldr	r3, [pc, #136]	; (800792c <Battery_Charger_Management+0x2b4>)
 80078a4:	2200      	movs	r2, #0
 80078a6:	701a      	strb	r2, [r3, #0]
			batt_10 = 0;
 80078a8:	4b21      	ldr	r3, [pc, #132]	; (8007930 <Battery_Charger_Management+0x2b8>)
 80078aa:	2200      	movs	r2, #0
 80078ac:	701a      	strb	r2, [r3, #0]
			batt_5 = 1; //
 80078ae:	4b21      	ldr	r3, [pc, #132]	; (8007934 <Battery_Charger_Management+0x2bc>)
 80078b0:	2201      	movs	r2, #1
 80078b2:	701a      	strb	r2, [r3, #0]
			if (TabGen[CHARGEC] == 0)
 80078b4:	4b17      	ldr	r3, [pc, #92]	; (8007914 <Battery_Charger_Management+0x29c>)
 80078b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d105      	bne.n	80078ca <Battery_Charger_Management+0x252>
			{
				low_bat_shutdown++;
 80078be:	4b1f      	ldr	r3, [pc, #124]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	4a1d      	ldr	r2, [pc, #116]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078c6:	6013      	str	r3, [r2, #0]
 80078c8:	e002      	b.n	80078d0 <Battery_Charger_Management+0x258>
			}
			else
				low_bat_shutdown = 0;
 80078ca:	4b1c      	ldr	r3, [pc, #112]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (TabGen[BAT_VALUE] == 255)
 80078d0:	4b10      	ldr	r3, [pc, #64]	; (8007914 <Battery_Charger_Management+0x29c>)
 80078d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80078d6:	2bff      	cmp	r3, #255	; 0xff
 80078d8:	d115      	bne.n	8007906 <Battery_Charger_Management+0x28e>
	{
		if (TabGen[CHARGEC] == 0)
 80078da:	4b0e      	ldr	r3, [pc, #56]	; (8007914 <Battery_Charger_Management+0x29c>)
 80078dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d105      	bne.n	80078f0 <Battery_Charger_Management+0x278>
		{
			low_bat_shutdown++;
 80078e4:	4b15      	ldr	r3, [pc, #84]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	3301      	adds	r3, #1
 80078ea:	4a14      	ldr	r2, [pc, #80]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	e002      	b.n	80078f6 <Battery_Charger_Management+0x27e>
		}
		else
			low_bat_shutdown = 0;
 80078f0:	4b12      	ldr	r3, [pc, #72]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]

		if (low_bat_shutdown > TIME_BEFORE_SHUTDOWN_LOWBAT - 10)
 80078f6:	4b11      	ldr	r3, [pc, #68]	; (800793c <Battery_Charger_Management+0x2c4>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a11      	ldr	r2, [pc, #68]	; (8007940 <Battery_Charger_Management+0x2c8>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d902      	bls.n	8007906 <Battery_Charger_Management+0x28e>
			TabGen[RE_ON_SCREEN] = 1;
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <Battery_Charger_Management+0x29c>)
 8007902:	2201      	movs	r2, #1
 8007904:	651a      	str	r2, [r3, #80]	; 0x50
	}

#endif
}
 8007906:	bf00      	nop
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	20002c7c 	.word	0x20002c7c
 8007914:	20002584 	.word	0x20002584
 8007918:	20000c10 	.word	0x20000c10
 800791c:	20003130 	.word	0x20003130
 8007920:	20002c20 	.word	0x20002c20
 8007924:	20001f80 	.word	0x20001f80
 8007928:	20000bfd 	.word	0x20000bfd
 800792c:	20000bfe 	.word	0x20000bfe
 8007930:	20000bff 	.word	0x20000bff
 8007934:	20000c00 	.word	0x20000c00
 8007938:	200028b0 	.word	0x200028b0
 800793c:	20000c04 	.word	0x20000c04
 8007940:	00018696 	.word	0x00018696

08007944 <GPS_Management>:

void GPS_Management(void)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
	if (TabGen[FORCE_GPS] == 1)
 8007948:	4b37      	ldr	r3, [pc, #220]	; (8007a28 <GPS_Management+0xe4>)
 800794a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800794e:	2b01      	cmp	r3, #1
 8007950:	d106      	bne.n	8007960 <GPS_Management+0x1c>
	{
		TabGen[GPS_ON] = 1;
 8007952:	4b35      	ldr	r3, [pc, #212]	; (8007a28 <GPS_Management+0xe4>)
 8007954:	2201      	movs	r2, #1
 8007956:	605a      	str	r2, [r3, #4]
		TabGen[FORCE_GPS] = 0;
 8007958:	4b33      	ldr	r3, [pc, #204]	; (8007a28 <GPS_Management+0xe4>)
 800795a:	2200      	movs	r2, #0
 800795c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	}

	// STEP 1
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 0)) // IF GPS MUST BE ON BUT WASN'T ALREADY
 8007960:	4b31      	ldr	r3, [pc, #196]	; (8007a28 <GPS_Management+0xe4>)
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d11e      	bne.n	80079a6 <GPS_Management+0x62>
 8007968:	4b2f      	ldr	r3, [pc, #188]	; (8007a28 <GPS_Management+0xe4>)
 800796a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800796e:	2b00      	cmp	r3, #0
 8007970:	d119      	bne.n	80079a6 <GPS_Management+0x62>
	{
		// GPS is on, first start.
		TabGen[GPS_ON_PREVIOUS] = 1;
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <GPS_Management+0xe4>)
 8007974:	2201      	movs	r2, #1
 8007976:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		TabTimer[GPS_FIRST_START] = millis;
 800797a:	4b2c      	ldr	r3, [pc, #176]	; (8007a2c <GPS_Management+0xe8>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a2c      	ldr	r2, [pc, #176]	; (8007a30 <GPS_Management+0xec>)
 8007980:	6053      	str	r3, [r2, #4]
		GpsStart();
 8007982:	f7fc f9d5 	bl	8003d30 <GpsStart>
		TabGen[GPS_GOOD] = 0;
 8007986:	4b28      	ldr	r3, [pc, #160]	; (8007a28 <GPS_Management+0xe4>)
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		if (millis - TabTimer[LAST_UPDATE_GPS] > 10 * 60 * 1000)
 800798e:	4b27      	ldr	r3, [pc, #156]	; (8007a2c <GPS_Management+0xe8>)
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <GPS_Management+0xec>)
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	4a26      	ldr	r2, [pc, #152]	; (8007a34 <GPS_Management+0xf0>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d903      	bls.n	80079a6 <GPS_Management+0x62>
			TabGen[GPS_DURATION] = 10;
 800799e:	4b22      	ldr	r3, [pc, #136]	; (8007a28 <GPS_Management+0xe4>)
 80079a0:	220a      	movs	r2, #10
 80079a2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	// STEP 2
	if ((TabGen[GPS_ON] == 1) && (TabGen[GPS_ON_PREVIOUS] == 1)) // IF GPS IS ON ALREADY
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <GPS_Management+0xe4>)
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d11f      	bne.n	80079ee <GPS_Management+0xaa>
 80079ae:	4b1e      	ldr	r3, [pc, #120]	; (8007a28 <GPS_Management+0xe4>)
 80079b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d11a      	bne.n	80079ee <GPS_Management+0xaa>
	{
		if ((millis - TabTimer[GPS_FIRST_START])
 80079b8:	4b1c      	ldr	r3, [pc, #112]	; (8007a2c <GPS_Management+0xe8>)
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <GPS_Management+0xec>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	1ad3      	subs	r3, r2, r3
				> (TabGen[GPS_DURATION] * 60 * 1000)) // in minutes
 80079c2:	4a19      	ldr	r2, [pc, #100]	; (8007a28 <GPS_Management+0xe4>)
 80079c4:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
 80079c8:	f64e 2160 	movw	r1, #60000	; 0xea60
 80079cc:	fb01 f202 	mul.w	r2, r1, r2
		if ((millis - TabTimer[GPS_FIRST_START])
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d90c      	bls.n	80079ee <GPS_Management+0xaa>
		{
			TabGen[GPS_ON] = 0;
 80079d4:	4b14      	ldr	r3, [pc, #80]	; (8007a28 <GPS_Management+0xe4>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	605a      	str	r2, [r3, #4]
			TabGen[GPS_ON_PREVIOUS] = 0;
 80079da:	4b13      	ldr	r3, [pc, #76]	; (8007a28 <GPS_Management+0xe4>)
 80079dc:	2200      	movs	r2, #0
 80079de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			TabTimer[GPS_REPEAT_START] = millis;
 80079e2:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <GPS_Management+0xe8>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a12      	ldr	r2, [pc, #72]	; (8007a30 <GPS_Management+0xec>)
 80079e8:	6013      	str	r3, [r2, #0]
			GpsStop();
 80079ea:	f7fc f93b 	bl	8003c64 <GpsStop>
		}
	}

	// STEP 3
	if ((TabGen[GPS_ON] == 0) && (TabGen[GPS_ON_PREVIOUS] == 0))
 80079ee:	4b0e      	ldr	r3, [pc, #56]	; (8007a28 <GPS_Management+0xe4>)
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d115      	bne.n	8007a22 <GPS_Management+0xde>
 80079f6:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <GPS_Management+0xe4>)
 80079f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d110      	bne.n	8007a22 <GPS_Management+0xde>
	{
		// GPS is not on => turn it on
		if ((millis - TabTimer[GPS_REPEAT_START])
 8007a00:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <GPS_Management+0xe8>)
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <GPS_Management+0xec>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	1ad3      	subs	r3, r2, r3
				> (c1.tps_GPS_OFF * 60 * 1000)) // in minutes
 8007a0a:	4a0b      	ldr	r2, [pc, #44]	; (8007a38 <GPS_Management+0xf4>)
 8007a0c:	78d2      	ldrb	r2, [r2, #3]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	f64e 2260 	movw	r2, #60000	; 0xea60
 8007a14:	fb02 f201 	mul.w	r2, r2, r1
		if ((millis - TabTimer[GPS_REPEAT_START])
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d902      	bls.n	8007a22 <GPS_Management+0xde>
		{
			TabGen[GPS_ON] = 1;
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <GPS_Management+0xe4>)
 8007a1e:	2201      	movs	r2, #1
 8007a20:	605a      	str	r2, [r3, #4]
		}
	}
}
 8007a22:	bf00      	nop
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	20002584 	.word	0x20002584
 8007a2c:	20000bf4 	.word	0x20000bf4
 8007a30:	200028b0 	.word	0x200028b0
 8007a34:	000927c0 	.word	0x000927c0
 8007a38:	20001158 	.word	0x20001158

08007a3c <Task_USB_Configuration>:


//Gestion de la réception des données de la console transmise par USB
void Task_USB_Configuration(void)
{
 8007a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a40:	b0d4      	sub	sp, #336	; 0x150
 8007a42:	af10      	add	r7, sp, #64	; 0x40
	uint8_t len = sizeof(received_data);
 8007a44:	2340      	movs	r3, #64	; 0x40
 8007a46:	f887 3102 	strb.w	r3, [r7, #258]	; 0x102
	uint8_t count = 0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103

	if (len > 0)
 8007a50:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 83b1 	beq.w	80081bc <Task_USB_Configuration+0x780>
	{
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 8007a5a:	e004      	b.n	8007a66 <Task_USB_Configuration+0x2a>
				&& (received_data[count] != 'p') && (count < len))
		{
			count++;
 8007a5c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007a60:	3301      	adds	r3, #1
 8007a62:	f887 3103 	strb.w	r3, [r7, #259]	; 0x103
		while ((received_data[count] != 'r') && (received_data[count] != 'w')
 8007a66:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007a6a:	4a95      	ldr	r2, [pc, #596]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007a6c:	5cd3      	ldrb	r3, [r2, r3]
 8007a6e:	2b72      	cmp	r3, #114	; 0x72
 8007a70:	d011      	beq.n	8007a96 <Task_USB_Configuration+0x5a>
 8007a72:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007a76:	4a92      	ldr	r2, [pc, #584]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007a78:	5cd3      	ldrb	r3, [r2, r3]
 8007a7a:	2b77      	cmp	r3, #119	; 0x77
 8007a7c:	d00b      	beq.n	8007a96 <Task_USB_Configuration+0x5a>
				&& (received_data[count] != 'p') && (count < len))
 8007a7e:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007a82:	4a8f      	ldr	r2, [pc, #572]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007a84:	5cd3      	ldrb	r3, [r2, r3]
 8007a86:	2b70      	cmp	r3, #112	; 0x70
 8007a88:	d005      	beq.n	8007a96 <Task_USB_Configuration+0x5a>
 8007a8a:	f897 2103 	ldrb.w	r2, [r7, #259]	; 0x103
 8007a8e:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d3e2      	bcc.n	8007a5c <Task_USB_Configuration+0x20>
		}
		if ((received_data[count] == 'r') && (received_data[count + 1] == 'e') //Envoi de toutes les infos du dati soit : la config, l'id sigfox, Le choix d'IMU etc...
 8007a96:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007a9a:	4a89      	ldr	r2, [pc, #548]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007a9c:	5cd3      	ldrb	r3, [r2, r3]
 8007a9e:	2b72      	cmp	r3, #114	; 0x72
 8007aa0:	f040 80ad 	bne.w	8007bfe <Task_USB_Configuration+0x1c2>
 8007aa4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a85      	ldr	r2, [pc, #532]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007aac:	5cd3      	ldrb	r3, [r2, r3]
 8007aae:	2b65      	cmp	r3, #101	; 0x65
 8007ab0:	f040 80a5 	bne.w	8007bfe <Task_USB_Configuration+0x1c2>
				&& (received_data[count + 2] == 'a')
 8007ab4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007ab8:	3302      	adds	r3, #2
 8007aba:	4a81      	ldr	r2, [pc, #516]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007abc:	5cd3      	ldrb	r3, [r2, r3]
 8007abe:	2b61      	cmp	r3, #97	; 0x61
 8007ac0:	f040 809d 	bne.w	8007bfe <Task_USB_Configuration+0x1c2>
				&& (received_data[count + 3] == 'd'))
 8007ac4:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007ac8:	3303      	adds	r3, #3
 8007aca:	4a7d      	ldr	r2, [pc, #500]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007acc:	5cd3      	ldrb	r3, [r2, r3]
 8007ace:	2b64      	cmp	r3, #100	; 0x64
 8007ad0:	f040 8095 	bne.w	8007bfe <Task_USB_Configuration+0x1c2>
		{
			uint8_t send_buffer2[64];
			uint8_t send_buffer3[64];
			sprintf(send_buffer3, "INFO,%s,%d,%d,%s,%s,%s", ID_Sigfox,
 8007ad4:	4b7b      	ldr	r3, [pc, #492]	; (8007cc4 <Task_USB_Configuration+0x288>)
 8007ad6:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 8007ada:	4b7a      	ldr	r3, [pc, #488]	; (8007cc4 <Task_USB_Configuration+0x288>)
 8007adc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007ae0:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8007ae4:	4978      	ldr	r1, [pc, #480]	; (8007cc8 <Task_USB_Configuration+0x28c>)
 8007ae6:	9103      	str	r1, [sp, #12]
 8007ae8:	4978      	ldr	r1, [pc, #480]	; (8007ccc <Task_USB_Configuration+0x290>)
 8007aea:	9102      	str	r1, [sp, #8]
 8007aec:	4978      	ldr	r1, [pc, #480]	; (8007cd0 <Task_USB_Configuration+0x294>)
 8007aee:	9101      	str	r1, [sp, #4]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	4613      	mov	r3, r2
 8007af4:	4a77      	ldr	r2, [pc, #476]	; (8007cd4 <Task_USB_Configuration+0x298>)
 8007af6:	4978      	ldr	r1, [pc, #480]	; (8007cd8 <Task_USB_Configuration+0x29c>)
 8007af8:	f010 ffae 	bl	8018a58 <siprintf>
					TabGen[VBAT_mV], TabGen[BAT_VALUE], Hard_conf, Code_name,
					Client);
			CDC_Transmit_FS(send_buffer3, strlen(send_buffer3)); //Transmit USB
 8007afc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7f8 fb65 	bl	80001d0 <strlen>
 8007b06:	4602      	mov	r2, r0
 8007b08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7f9 fe00 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 8007b14:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007b18:	461a      	mov	r2, r3
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	4868      	ldr	r0, [pc, #416]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007b1e:	f010 fabb 	bl	8018098 <memset>
			vibration_LBL(1, 0, 200);
 8007b22:	22c8      	movs	r2, #200	; 0xc8
 8007b24:	2100      	movs	r1, #0
 8007b26:	2001      	movs	r0, #1
 8007b28:	f003 fb18 	bl	800b15c <vibration_LBL>
			ee_init();
 8007b2c:	f7fb f988 	bl	8002e40 <ee_init>
			ee_read(0, nb_parametre, send_buffer2); //Read eeprom (add: 0x0803F800)
 8007b30:	4b6a      	ldr	r3, [pc, #424]	; (8007cdc <Task_USB_Configuration+0x2a0>)
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	4619      	mov	r1, r3
 8007b36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	2000      	movs	r0, #0
 8007b3e:	f7fb f9c5 	bl	8002ecc <ee_read>
			sprintf(send_buffer2,
					"CONFIG,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d",
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 8007b42:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
			sprintf(send_buffer2,
 8007b46:	469c      	mov	ip, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 8007b48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
			sprintf(send_buffer2,
 8007b4c:	469e      	mov	lr, r3
					send_buffer2[0], send_buffer2[1], send_buffer2[2],
 8007b4e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
			sprintf(send_buffer2,
 8007b52:	461d      	mov	r5, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 8007b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			sprintf(send_buffer2,
 8007b58:	461e      	mov	r6, r3
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 8007b5a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
			sprintf(send_buffer2,
 8007b5e:	627b      	str	r3, [r7, #36]	; 0x24
					send_buffer2[3], send_buffer2[4], send_buffer2[5],
 8007b60:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
			sprintf(send_buffer2,
 8007b64:	623b      	str	r3, [r7, #32]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 8007b66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
			sprintf(send_buffer2,
 8007b6a:	61fb      	str	r3, [r7, #28]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 8007b6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
			sprintf(send_buffer2,
 8007b70:	61bb      	str	r3, [r7, #24]
					send_buffer2[6], send_buffer2[7], send_buffer2[8],
 8007b72:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
			sprintf(send_buffer2,
 8007b76:	617b      	str	r3, [r7, #20]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8007b78:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
			sprintf(send_buffer2,
 8007b7c:	613b      	str	r3, [r7, #16]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8007b7e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
			sprintf(send_buffer2,
 8007b82:	60fb      	str	r3, [r7, #12]
					send_buffer2[9], send_buffer2[10], send_buffer2[11],
 8007b84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
			sprintf(send_buffer2,
 8007b88:	60bb      	str	r3, [r7, #8]
					send_buffer2[12], send_buffer2[13], send_buffer2[14],
 8007b8a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
			sprintf(send_buffer2,
 8007b8e:	607b      	str	r3, [r7, #4]
					send_buffer2[12], send_buffer2[13], send_buffer2[14],
 8007b90:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
			sprintf(send_buffer2,
 8007b94:	461c      	mov	r4, r3
					send_buffer2[12], send_buffer2[13], send_buffer2[14],
 8007b96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
			sprintf(send_buffer2,
 8007b9a:	4619      	mov	r1, r3
					send_buffer2[15], send_buffer2[16]);
 8007b9c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
			sprintf(send_buffer2,
 8007ba0:	461a      	mov	r2, r3
					send_buffer2[15], send_buffer2[16]);
 8007ba2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
			sprintf(send_buffer2,
 8007ba6:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8007baa:	930e      	str	r3, [sp, #56]	; 0x38
 8007bac:	920d      	str	r2, [sp, #52]	; 0x34
 8007bae:	910c      	str	r1, [sp, #48]	; 0x30
 8007bb0:	940b      	str	r4, [sp, #44]	; 0x2c
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	920a      	str	r2, [sp, #40]	; 0x28
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	9209      	str	r2, [sp, #36]	; 0x24
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	9208      	str	r2, [sp, #32]
 8007bbe:	693a      	ldr	r2, [r7, #16]
 8007bc0:	9207      	str	r2, [sp, #28]
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	9206      	str	r2, [sp, #24]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	9205      	str	r2, [sp, #20]
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	9204      	str	r2, [sp, #16]
 8007bce:	6a3a      	ldr	r2, [r7, #32]
 8007bd0:	9203      	str	r2, [sp, #12]
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	9302      	str	r3, [sp, #8]
 8007bd6:	9601      	str	r6, [sp, #4]
 8007bd8:	9500      	str	r5, [sp, #0]
 8007bda:	4673      	mov	r3, lr
 8007bdc:	4662      	mov	r2, ip
 8007bde:	4940      	ldr	r1, [pc, #256]	; (8007ce0 <Task_USB_Configuration+0x2a4>)
 8007be0:	f010 ff3a 	bl	8018a58 <siprintf>
			CDC_Transmit_FS(send_buffer2, strlen(send_buffer2));//Transmit USB
 8007be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f8 faf1 	bl	80001d0 <strlen>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7f9 fd8c 	bl	8001714 <CDC_Transmit_FS>
		{
 8007bfc:	e2de      	b.n	80081bc <Task_USB_Configuration+0x780>
		}
		else if ((received_data[count] == 'w')	//Reception de la nouvelle config
 8007bfe:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007c02:	4a2f      	ldr	r2, [pc, #188]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007c04:	5cd3      	ldrb	r3, [r2, r3]
 8007c06:	2b77      	cmp	r3, #119	; 0x77
 8007c08:	f040 8268 	bne.w	80080dc <Task_USB_Configuration+0x6a0>
				&& (received_data[count + 1] == 'r')
 8007c0c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007c10:	3301      	adds	r3, #1
 8007c12:	4a2b      	ldr	r2, [pc, #172]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007c14:	5cd3      	ldrb	r3, [r2, r3]
 8007c16:	2b72      	cmp	r3, #114	; 0x72
 8007c18:	f040 8260 	bne.w	80080dc <Task_USB_Configuration+0x6a0>
				&& (received_data[count + 2] == 'i')
 8007c1c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007c20:	3302      	adds	r3, #2
 8007c22:	4a27      	ldr	r2, [pc, #156]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007c24:	5cd3      	ldrb	r3, [r2, r3]
 8007c26:	2b69      	cmp	r3, #105	; 0x69
 8007c28:	f040 8258 	bne.w	80080dc <Task_USB_Configuration+0x6a0>
				&& (received_data[count + 3] == 't')
 8007c2c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007c30:	3303      	adds	r3, #3
 8007c32:	4a23      	ldr	r2, [pc, #140]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007c34:	5cd3      	ldrb	r3, [r2, r3]
 8007c36:	2b74      	cmp	r3, #116	; 0x74
 8007c38:	f040 8250 	bne.w	80080dc <Task_USB_Configuration+0x6a0>
				&& (received_data[count + 4] == 'e'))
 8007c3c:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8007c40:	3304      	adds	r3, #4
 8007c42:	4a1f      	ldr	r2, [pc, #124]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007c44:	5cd3      	ldrb	r3, [r2, r3]
 8007c46:	2b65      	cmp	r3, #101	; 0x65
 8007c48:	f040 8248 	bne.w	80080dc <Task_USB_Configuration+0x6a0>
		{
 8007c4c:	466b      	mov	r3, sp
 8007c4e:	4698      	mov	r8, r3
			vibration_LBL(1, 0, 200);
 8007c50:	22c8      	movs	r2, #200	; 0xc8
 8007c52:	2100      	movs	r1, #0
 8007c54:	2001      	movs	r0, #1
 8007c56:	f003 fa81 	bl	800b15c <vibration_LBL>
			unsigned char *config_data_received;
			int tabint[nb_parametre];
 8007c5a:	4b20      	ldr	r3, [pc, #128]	; (8007cdc <Task_USB_Configuration+0x2a0>)
 8007c5c:	781c      	ldrb	r4, [r3, #0]
 8007c5e:	4623      	mov	r3, r4
 8007c60:	3b01      	subs	r3, #1
 8007c62:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007c66:	b2e0      	uxtb	r0, r4
 8007c68:	f04f 0100 	mov.w	r1, #0
 8007c6c:	f04f 0200 	mov.w	r2, #0
 8007c70:	f04f 0300 	mov.w	r3, #0
 8007c74:	014b      	lsls	r3, r1, #5
 8007c76:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c7a:	0142      	lsls	r2, r0, #5
 8007c7c:	b2e0      	uxtb	r0, r4
 8007c7e:	f04f 0100 	mov.w	r1, #0
 8007c82:	f04f 0200 	mov.w	r2, #0
 8007c86:	f04f 0300 	mov.w	r3, #0
 8007c8a:	014b      	lsls	r3, r1, #5
 8007c8c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c90:	0142      	lsls	r2, r0, #5
 8007c92:	4623      	mov	r3, r4
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	3307      	adds	r3, #7
 8007c98:	08db      	lsrs	r3, r3, #3
 8007c9a:	00db      	lsls	r3, r3, #3
 8007c9c:	ebad 0d03 	sub.w	sp, sp, r3
 8007ca0:	ab10      	add	r3, sp, #64	; 0x40
 8007ca2:	3303      	adds	r3, #3
 8007ca4:	089b      	lsrs	r3, r3, #2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			uint8_t send_buffer[64];
			unsigned char i = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
			config_data_received = strtok(received_data, ",");
 8007cb2:	490c      	ldr	r1, [pc, #48]	; (8007ce4 <Task_USB_Configuration+0x2a8>)
 8007cb4:	4802      	ldr	r0, [pc, #8]	; (8007cc0 <Task_USB_Configuration+0x284>)
 8007cb6:	f010 feff 	bl	8018ab8 <strtok>
 8007cba:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
			while (config_data_received != NULL)
 8007cbe:	e05b      	b.n	8007d78 <Task_USB_Configuration+0x33c>
 8007cc0:	20001568 	.word	0x20001568
 8007cc4:	20002584 	.word	0x20002584
 8007cc8:	20000b60 	.word	0x20000b60
 8007ccc:	200007ac 	.word	0x200007ac
 8007cd0:	20000b5c 	.word	0x20000b5c
 8007cd4:	200007f4 	.word	0x200007f4
 8007cd8:	0801bd44 	.word	0x0801bd44
 8007cdc:	200007f0 	.word	0x200007f0
 8007ce0:	0801bd5c 	.word	0x0801bd5c
 8007ce4:	0801bdb8 	.word	0x0801bdb8
			{
 8007ce8:	466b      	mov	r3, sp
 8007cea:	461d      	mov	r5, r3
				unsigned char tabtemp2[nb_parametre];
 8007cec:	4bb5      	ldr	r3, [pc, #724]	; (8007fc4 <Task_USB_Configuration+0x588>)
 8007cee:	781c      	ldrb	r4, [r3, #0]
 8007cf0:	4623      	mov	r3, r4
 8007cf2:	3b01      	subs	r3, #1
 8007cf4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007cf8:	b2e0      	uxtb	r0, r4
 8007cfa:	f04f 0100 	mov.w	r1, #0
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	00cb      	lsls	r3, r1, #3
 8007d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007d0c:	00c2      	lsls	r2, r0, #3
 8007d0e:	b2e0      	uxtb	r0, r4
 8007d10:	f04f 0100 	mov.w	r1, #0
 8007d14:	f04f 0200 	mov.w	r2, #0
 8007d18:	f04f 0300 	mov.w	r3, #0
 8007d1c:	00cb      	lsls	r3, r1, #3
 8007d1e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8007d22:	00c2      	lsls	r2, r0, #3
 8007d24:	4623      	mov	r3, r4
 8007d26:	3307      	adds	r3, #7
 8007d28:	08db      	lsrs	r3, r3, #3
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	ebad 0d03 	sub.w	sp, sp, r3
 8007d30:	ab10      	add	r3, sp, #64	; 0x40
 8007d32:	3300      	adds	r3, #0
 8007d34:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
				sprintf(tabtemp2, "%s", config_data_received);
 8007d38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d3c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007d40:	49a1      	ldr	r1, [pc, #644]	; (8007fc8 <Task_USB_Configuration+0x58c>)
 8007d42:	4618      	mov	r0, r3
 8007d44:	f010 fe88 	bl	8018a58 <siprintf>
				tabint[i] = atoi(tabtemp2);
 8007d48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007d4c:	f897 4108 	ldrb.w	r4, [r7, #264]	; 0x108
 8007d50:	4618      	mov	r0, r3
 8007d52:	f010 f965 	bl	8018020 <atoi>
 8007d56:	4602      	mov	r2, r0
 8007d58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d5c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				config_data_received = strtok(NULL, ",");
 8007d60:	499a      	ldr	r1, [pc, #616]	; (8007fcc <Task_USB_Configuration+0x590>)
 8007d62:	2000      	movs	r0, #0
 8007d64:	f010 fea8 	bl	8018ab8 <strtok>
 8007d68:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
				i++;
 8007d6c:	f897 3108 	ldrb.w	r3, [r7, #264]	; 0x108
 8007d70:	3301      	adds	r3, #1
 8007d72:	f887 3108 	strb.w	r3, [r7, #264]	; 0x108
 8007d76:	46ad      	mov	sp, r5
			while (config_data_received != NULL)
 8007d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1b3      	bne.n	8007ce8 <Task_USB_Configuration+0x2ac>
			}	//Split de la chaine de caractère par ',' puis convert to int
			c1.tps_immo = tabint[1];
 8007d80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	b2da      	uxtb	r2, r3
 8007d88:	4b91      	ldr	r3, [pc, #580]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007d8a:	701a      	strb	r2, [r3, #0]
			c1.tps_PerteDeVerticalite = tabint[2];
 8007d8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	4b8e      	ldr	r3, [pc, #568]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007d96:	705a      	strb	r2, [r3, #1]
			c1.tps_GPS_ON = tabint[3];
 8007d98:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	4b8b      	ldr	r3, [pc, #556]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007da2:	709a      	strb	r2, [r3, #2]
			c1.tps_GPS_OFF = tabint[4];
 8007da4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	4b88      	ldr	r3, [pc, #544]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dae:	70da      	strb	r2, [r3, #3]
			c1.tps_Alarme = tabint[5];
 8007db0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	4b85      	ldr	r3, [pc, #532]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dba:	711a      	strb	r2, [r3, #4]
			c1.chute_Actif = tabint[6];
 8007dbc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	b2da      	uxtb	r2, r3
 8007dc4:	4b82      	ldr	r3, [pc, #520]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dc6:	715a      	strb	r2, [r3, #5]
			c1.loraP2P = tabint[7];
 8007dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	b2da      	uxtb	r2, r3
 8007dd0:	4b7f      	ldr	r3, [pc, #508]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dd2:	719a      	strb	r2, [r3, #6]
			c1.com_sigfox = tabint[8];
 8007dd4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dd8:	6a1b      	ldr	r3, [r3, #32]
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	4b7c      	ldr	r3, [pc, #496]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dde:	71da      	strb	r2, [r3, #7]
			c1.com_LoRa = tabint[9];
 8007de0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	4b79      	ldr	r3, [pc, #484]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007dea:	721a      	strb	r2, [r3, #8]
			c1.GPS_Actif = tabint[10];
 8007dec:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df2:	b2da      	uxtb	r2, r3
 8007df4:	4b76      	ldr	r3, [pc, #472]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007df6:	725a      	strb	r2, [r3, #9]
			c1.Immo_Actif = tabint[11];
 8007df8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	4b73      	ldr	r3, [pc, #460]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e02:	729a      	strb	r2, [r3, #10]
			c1.Verti_Actif = tabint[12];
 8007e04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e0a:	b2da      	uxtb	r2, r3
 8007e0c:	4b70      	ldr	r3, [pc, #448]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e0e:	72da      	strb	r2, [r3, #11]
			c1.Sensibilite_chute = tabint[13];
 8007e10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	4b6d      	ldr	r3, [pc, #436]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e1a:	731a      	strb	r2, [r3, #12]
			c1.tps_chute = tabint[14];
 8007e1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	4b6a      	ldr	r3, [pc, #424]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e26:	735a      	strb	r2, [r3, #13]
			c1.Angle = tabint[15];
 8007e28:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	4b67      	ldr	r3, [pc, #412]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e32:	739a      	strb	r2, [r3, #14]
			c1.colision_Actif = tabint[16];
 8007e34:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	4b64      	ldr	r3, [pc, #400]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e3e:	73da      	strb	r2, [r3, #15]
			c1.biGaz = tabint[17];
 8007e40:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	4b61      	ldr	r3, [pc, #388]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e4a:	741a      	strb	r2, [r3, #16]
			uint8_t buffer[] = "config ok";
 8007e4c:	4a61      	ldr	r2, [pc, #388]	; (8007fd4 <Task_USB_Configuration+0x598>)
 8007e4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007e52:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e54:	c303      	stmia	r3!, {r0, r1}
 8007e56:	801a      	strh	r2, [r3, #0]
			CDC_Transmit_FS(buffer, sizeof(buffer));
 8007e58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8007e5c:	210a      	movs	r1, #10
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7f9 fc58 	bl	8001714 <CDC_Transmit_FS>
			memset(received_data, 0, len);
 8007e64:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	485a      	ldr	r0, [pc, #360]	; (8007fd8 <Task_USB_Configuration+0x59c>)
 8007e6e:	f010 f913 	bl	8018098 <memset>

			//eeprom
			ee_init();
 8007e72:	f7fa ffe5 	bl	8002e40 <ee_init>
			uint8_t d[] =
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 8007e76:	4b56      	ldr	r3, [pc, #344]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
			uint8_t d[] =
 8007e7a:	f887 30d0 	strb.w	r3, [r7, #208]	; 0xd0
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 8007e7e:	4b54      	ldr	r3, [pc, #336]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e80:	785b      	ldrb	r3, [r3, #1]
			uint8_t d[] =
 8007e82:	f887 30d1 	strb.w	r3, [r7, #209]	; 0xd1
			{ c1.tps_immo, c1.tps_PerteDeVerticalite, c1.tps_GPS_ON,
 8007e86:	4b52      	ldr	r3, [pc, #328]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e88:	789b      	ldrb	r3, [r3, #2]
			uint8_t d[] =
 8007e8a:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif, c1.loraP2P,
 8007e8e:	4b50      	ldr	r3, [pc, #320]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e90:	78db      	ldrb	r3, [r3, #3]
			uint8_t d[] =
 8007e92:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif, c1.loraP2P,
 8007e96:	4b4e      	ldr	r3, [pc, #312]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007e98:	791b      	ldrb	r3, [r3, #4]
			uint8_t d[] =
 8007e9a:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif, c1.loraP2P,
 8007e9e:	4b4c      	ldr	r3, [pc, #304]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ea0:	795b      	ldrb	r3, [r3, #5]
			uint8_t d[] =
 8007ea2:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
					c1.tps_GPS_OFF, c1.tps_Alarme, c1.chute_Actif, c1.loraP2P,
 8007ea6:	4b4a      	ldr	r3, [pc, #296]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ea8:	799b      	ldrb	r3, [r3, #6]
			uint8_t d[] =
 8007eaa:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
					c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif, c1.Immo_Actif,
 8007eae:	4b48      	ldr	r3, [pc, #288]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007eb0:	79db      	ldrb	r3, [r3, #7]
			uint8_t d[] =
 8007eb2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
					c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif, c1.Immo_Actif,
 8007eb6:	4b46      	ldr	r3, [pc, #280]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007eb8:	7a1b      	ldrb	r3, [r3, #8]
			uint8_t d[] =
 8007eba:	f887 30d8 	strb.w	r3, [r7, #216]	; 0xd8
					c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif, c1.Immo_Actif,
 8007ebe:	4b44      	ldr	r3, [pc, #272]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ec0:	7a5b      	ldrb	r3, [r3, #9]
			uint8_t d[] =
 8007ec2:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9
					c1.com_sigfox, c1.com_LoRa, c1.GPS_Actif, c1.Immo_Actif,
 8007ec6:	4b42      	ldr	r3, [pc, #264]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ec8:	7a9b      	ldrb	r3, [r3, #10]
			uint8_t d[] =
 8007eca:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
					c1.Verti_Actif, c1.Sensibilite_chute, c1.tps_chute,
 8007ece:	4b40      	ldr	r3, [pc, #256]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ed0:	7adb      	ldrb	r3, [r3, #11]
			uint8_t d[] =
 8007ed2:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
					c1.Verti_Actif, c1.Sensibilite_chute, c1.tps_chute,
 8007ed6:	4b3e      	ldr	r3, [pc, #248]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ed8:	7b1b      	ldrb	r3, [r3, #12]
			uint8_t d[] =
 8007eda:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
					c1.Verti_Actif, c1.Sensibilite_chute, c1.tps_chute,
 8007ede:	4b3c      	ldr	r3, [pc, #240]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ee0:	7b5b      	ldrb	r3, [r3, #13]
			uint8_t d[] =
 8007ee2:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
					c1.Angle, c1.colision_Actif, c1.biGaz };
 8007ee6:	4b3a      	ldr	r3, [pc, #232]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ee8:	7b9b      	ldrb	r3, [r3, #14]
			uint8_t d[] =
 8007eea:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
					c1.Angle, c1.colision_Actif, c1.biGaz };
 8007eee:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ef0:	7bdb      	ldrb	r3, [r3, #15]
			uint8_t d[] =
 8007ef2:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
					c1.Angle, c1.colision_Actif, c1.biGaz };
 8007ef6:	4b36      	ldr	r3, [pc, #216]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007ef8:	7c1b      	ldrb	r3, [r3, #16]
			uint8_t d[] =
 8007efa:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
			uint8_t dr[sizeof(d)];
			ee_read(0, sizeof(d), dr);
 8007efe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8007f02:	461a      	mov	r2, r3
 8007f04:	2111      	movs	r1, #17
 8007f06:	2000      	movs	r0, #0
 8007f08:	f7fa ffe0 	bl	8002ecc <ee_read>
			if ((c1.tps_immo != dr[0]) || (c1.tps_PerteDeVerticalite != dr[1])	//Comparaison des nouveaux paramètre avec les anciens
 8007f0c:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f0e:	781a      	ldrb	r2, [r3, #0]
 8007f10:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d16d      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f18:	4b2d      	ldr	r3, [pc, #180]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f1a:	785a      	ldrb	r2, [r3, #1]
 8007f1c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d167      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.tps_GPS_ON != dr[2]) || (c1.tps_GPS_OFF != dr[3])
 8007f24:	4b2a      	ldr	r3, [pc, #168]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f26:	789a      	ldrb	r2, [r3, #2]
 8007f28:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d161      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f30:	4b27      	ldr	r3, [pc, #156]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f32:	78da      	ldrb	r2, [r3, #3]
 8007f34:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8007f38:	429a      	cmp	r2, r3
 8007f3a:	d15b      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.tps_Alarme != dr[4]) || (c1.chute_Actif != dr[5])
 8007f3c:	4b24      	ldr	r3, [pc, #144]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f3e:	791a      	ldrb	r2, [r3, #4]
 8007f40:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d155      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f48:	4b21      	ldr	r3, [pc, #132]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f4a:	795a      	ldrb	r2, [r3, #5]
 8007f4c:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d14f      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.loraP2P != dr[6]) || (c1.com_sigfox != dr[7])
 8007f54:	4b1e      	ldr	r3, [pc, #120]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f56:	799a      	ldrb	r2, [r3, #6]
 8007f58:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d149      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f62:	79da      	ldrb	r2, [r3, #7]
 8007f64:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d143      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.com_LoRa != dr[8]) || (c1.GPS_Actif != dr[9])
 8007f6c:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f6e:	7a1a      	ldrb	r2, [r3, #8]
 8007f70:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d13d      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f78:	4b15      	ldr	r3, [pc, #84]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f7a:	7a5a      	ldrb	r2, [r3, #9]
 8007f7c:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d137      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.Immo_Actif != dr[10]) || (c1.Verti_Actif != dr[11])
 8007f84:	4b12      	ldr	r3, [pc, #72]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f86:	7a9a      	ldrb	r2, [r3, #10]
 8007f88:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d131      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f92:	7ada      	ldrb	r2, [r3, #11]
 8007f94:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d12b      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.Sensibilite_chute != dr[12])
 8007f9c:	4b0c      	ldr	r3, [pc, #48]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007f9e:	7b1a      	ldrb	r2, [r3, #12]
 8007fa0:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d125      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
					|| (c1.tps_chute != dr[13]) || (c1.Angle != dr[14])
 8007fa8:	4b09      	ldr	r3, [pc, #36]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007faa:	7b5a      	ldrb	r2, [r3, #13]
 8007fac:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8007fb0:	429a      	cmp	r2, r3
 8007fb2:	d11f      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007fb4:	4b06      	ldr	r3, [pc, #24]	; (8007fd0 <Task_USB_Configuration+0x594>)
 8007fb6:	7b9a      	ldrb	r2, [r3, #14]
 8007fb8:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d119      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007fc0:	e00c      	b.n	8007fdc <Task_USB_Configuration+0x5a0>
 8007fc2:	bf00      	nop
 8007fc4:	200007f0 	.word	0x200007f0
 8007fc8:	0801bdbc 	.word	0x0801bdbc
 8007fcc:	0801bdb8 	.word	0x0801bdb8
 8007fd0:	20001158 	.word	0x20001158
 8007fd4:	0801bdc0 	.word	0x0801bdc0
 8007fd8:	20001568 	.word	0x20001568
					|| (c1.colision_Actif != dr[15]) || (c1.biGaz != dr[16]))
 8007fdc:	4b7a      	ldr	r3, [pc, #488]	; (80081c8 <Task_USB_Configuration+0x78c>)
 8007fde:	7bda      	ldrb	r2, [r3, #15]
 8007fe0:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d105      	bne.n	8007ff4 <Task_USB_Configuration+0x5b8>
 8007fe8:	4b77      	ldr	r3, [pc, #476]	; (80081c8 <Task_USB_Configuration+0x78c>)
 8007fea:	7c1a      	ldrb	r2, [r3, #16]
 8007fec:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d00d      	beq.n	8008010 <Task_USB_Configuration+0x5d4>
			{
				ee_writeToRam(0, sizeof(d), d);
 8007ff4:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2111      	movs	r1, #17
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f7fb f87f 	bl	8003100 <ee_writeToRam>
				ee_commit();	//Ecriture dans l'eeprom (add: 0x0803F800)
 8008002:	f7fb f89f 	bl	8003144 <ee_commit>
				vibration_LBL(2, 200, 200);
 8008006:	22c8      	movs	r2, #200	; 0xc8
 8008008:	21c8      	movs	r1, #200	; 0xc8
 800800a:	2002      	movs	r0, #2
 800800c:	f003 f8a6 	bl	800b15c <vibration_LBL>
			}
			ee_read(0, sizeof(d), dr);
 8008010:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8008014:	461a      	mov	r2, r3
 8008016:	2111      	movs	r1, #17
 8008018:	2000      	movs	r0, #0
 800801a:	f7fa ff57 	bl	8002ecc <ee_read>
			sprintf(send_buffer,
					"CONFIG,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d,%02d",
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 800801e:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
			sprintf(send_buffer,
 8008022:	469c      	mov	ip, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8008024:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
			sprintf(send_buffer,
 8008028:	469e      	mov	lr, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 800802a:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
			sprintf(send_buffer,
 800802e:	461e      	mov	r6, r3
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8008030:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
			sprintf(send_buffer,
 8008034:	627b      	str	r3, [r7, #36]	; 0x24
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8008036:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
			sprintf(send_buffer,
 800803a:	623b      	str	r3, [r7, #32]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 800803c:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
			sprintf(send_buffer,
 8008040:	61fb      	str	r3, [r7, #28]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8008042:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
			sprintf(send_buffer,
 8008046:	61bb      	str	r3, [r7, #24]
					dr[0], dr[1], dr[2], dr[3], dr[4], dr[5], dr[6], dr[7],
 8008048:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
			sprintf(send_buffer,
 800804c:	617b      	str	r3, [r7, #20]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 800804e:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
			sprintf(send_buffer,
 8008052:	613b      	str	r3, [r7, #16]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 8008054:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
			sprintf(send_buffer,
 8008058:	60fb      	str	r3, [r7, #12]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 800805a:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
			sprintf(send_buffer,
 800805e:	60bb      	str	r3, [r7, #8]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 8008060:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
			sprintf(send_buffer,
 8008064:	607b      	str	r3, [r7, #4]
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 8008066:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
			sprintf(send_buffer,
 800806a:	461d      	mov	r5, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 800806c:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
			sprintf(send_buffer,
 8008070:	461c      	mov	r4, r3
					dr[8], dr[9], dr[10], dr[11], dr[12], dr[13], dr[14],
 8008072:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
			sprintf(send_buffer,
 8008076:	4619      	mov	r1, r3
					dr[15], dr[16]);
 8008078:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
			sprintf(send_buffer,
 800807c:	461a      	mov	r2, r3
					dr[15], dr[16]);
 800807e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
			sprintf(send_buffer,
 8008082:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8008086:	930e      	str	r3, [sp, #56]	; 0x38
 8008088:	920d      	str	r2, [sp, #52]	; 0x34
 800808a:	910c      	str	r1, [sp, #48]	; 0x30
 800808c:	940b      	str	r4, [sp, #44]	; 0x2c
 800808e:	950a      	str	r5, [sp, #40]	; 0x28
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	9209      	str	r2, [sp, #36]	; 0x24
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	9208      	str	r2, [sp, #32]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	9207      	str	r2, [sp, #28]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	9206      	str	r2, [sp, #24]
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	9205      	str	r2, [sp, #20]
 80080a4:	69ba      	ldr	r2, [r7, #24]
 80080a6:	9204      	str	r2, [sp, #16]
 80080a8:	69fa      	ldr	r2, [r7, #28]
 80080aa:	9203      	str	r2, [sp, #12]
 80080ac:	6a3a      	ldr	r2, [r7, #32]
 80080ae:	9202      	str	r2, [sp, #8]
 80080b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	9600      	str	r6, [sp, #0]
 80080b6:	4673      	mov	r3, lr
 80080b8:	4662      	mov	r2, ip
 80080ba:	4944      	ldr	r1, [pc, #272]	; (80081cc <Task_USB_Configuration+0x790>)
 80080bc:	f010 fccc 	bl	8018a58 <siprintf>
			CDC_Transmit_FS(send_buffer, strlen(send_buffer)); //Renvoi de la config fraichement chargée
 80080c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80080c4:	4618      	mov	r0, r3
 80080c6:	f7f8 f883 	bl	80001d0 <strlen>
 80080ca:	4602      	mov	r2, r0
 80080cc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7f9 fb1e 	bl	8001714 <CDC_Transmit_FS>
 80080d8:	46c5      	mov	sp, r8
		{
 80080da:	e06f      	b.n	80081bc <Task_USB_Configuration+0x780>
		}
		else if ((received_data[count] == 'p')	//Reception des données de properties (ex: nom du client, nom du code, Choix de la config Hardware)
 80080dc:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80080e0:	4a3b      	ldr	r2, [pc, #236]	; (80081d0 <Task_USB_Configuration+0x794>)
 80080e2:	5cd3      	ldrb	r3, [r2, r3]
 80080e4:	2b70      	cmp	r3, #112	; 0x70
 80080e6:	d169      	bne.n	80081bc <Task_USB_Configuration+0x780>
				&& (received_data[count + 1] == 'r')
 80080e8:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80080ec:	3301      	adds	r3, #1
 80080ee:	4a38      	ldr	r2, [pc, #224]	; (80081d0 <Task_USB_Configuration+0x794>)
 80080f0:	5cd3      	ldrb	r3, [r2, r3]
 80080f2:	2b72      	cmp	r3, #114	; 0x72
 80080f4:	d162      	bne.n	80081bc <Task_USB_Configuration+0x780>
				&& (received_data[count + 2] == 'o')
 80080f6:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 80080fa:	3302      	adds	r3, #2
 80080fc:	4a34      	ldr	r2, [pc, #208]	; (80081d0 <Task_USB_Configuration+0x794>)
 80080fe:	5cd3      	ldrb	r3, [r2, r3]
 8008100:	2b6f      	cmp	r3, #111	; 0x6f
 8008102:	d15b      	bne.n	80081bc <Task_USB_Configuration+0x780>
				&& (received_data[count + 3] == 'p'))
 8008104:	f897 3103 	ldrb.w	r3, [r7, #259]	; 0x103
 8008108:	3303      	adds	r3, #3
 800810a:	4a31      	ldr	r2, [pc, #196]	; (80081d0 <Task_USB_Configuration+0x794>)
 800810c:	5cd3      	ldrb	r3, [r2, r3]
 800810e:	2b70      	cmp	r3, #112	; 0x70
 8008110:	d154      	bne.n	80081bc <Task_USB_Configuration+0x780>
		{
			uint8_t re_Hard_conf;
			unsigned char re_Client[16];
			uint8_t i = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			while (i < len)
 8008118:	e03a      	b.n	8008190 <Task_USB_Configuration+0x754>
			{
				if ((received_data[i] == ',') && (received_data[i + 2] == ',')) //Split de la chaine de caractère par ','
 800811a:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800811e:	4a2c      	ldr	r2, [pc, #176]	; (80081d0 <Task_USB_Configuration+0x794>)
 8008120:	5cd3      	ldrb	r3, [r2, r3]
 8008122:	2b2c      	cmp	r3, #44	; 0x2c
 8008124:	d12f      	bne.n	8008186 <Task_USB_Configuration+0x74a>
 8008126:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800812a:	3302      	adds	r3, #2
 800812c:	4a28      	ldr	r2, [pc, #160]	; (80081d0 <Task_USB_Configuration+0x794>)
 800812e:	5cd3      	ldrb	r3, [r2, r3]
 8008130:	2b2c      	cmp	r3, #44	; 0x2c
 8008132:	d128      	bne.n	8008186 <Task_USB_Configuration+0x74a>
				{
					uint8_t j = i + 3;
 8008134:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8008138:	3303      	adds	r3, #3
 800813a:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
					re_Hard_conf = received_data[i + 1];
 800813e:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 8008142:	3301      	adds	r3, #1
 8008144:	4a22      	ldr	r2, [pc, #136]	; (80081d0 <Task_USB_Configuration+0x794>)
 8008146:	5cd3      	ldrb	r3, [r2, r3]
 8008148:	f887 3109 	strb.w	r3, [r7, #265]	; 0x109
					for (int k = 0; k <= 16; k++)
 800814c:	2300      	movs	r3, #0
 800814e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008152:	e014      	b.n	800817e <Task_USB_Configuration+0x742>
					{
						re_Client[k] = received_data[j];
 8008154:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8008158:	4a1d      	ldr	r2, [pc, #116]	; (80081d0 <Task_USB_Configuration+0x794>)
 800815a:	5cd1      	ldrb	r1, [r2, r3]
 800815c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8008160:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008164:	4413      	add	r3, r2
 8008166:	460a      	mov	r2, r1
 8008168:	701a      	strb	r2, [r3, #0]
						j++;
 800816a:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 800816e:	3301      	adds	r3, #1
 8008170:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
					for (int k = 0; k <= 16; k++)
 8008174:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008178:	3301      	adds	r3, #1
 800817a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800817e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8008182:	2b10      	cmp	r3, #16
 8008184:	dde6      	ble.n	8008154 <Task_USB_Configuration+0x718>
					}
				}
				i++;
 8008186:	f897 310a 	ldrb.w	r3, [r7, #266]	; 0x10a
 800818a:	3301      	adds	r3, #1
 800818c:	f887 310a 	strb.w	r3, [r7, #266]	; 0x10a
			while (i < len)
 8008190:	f897 210a 	ldrb.w	r2, [r7, #266]	; 0x10a
 8008194:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 8008198:	429a      	cmp	r2, r3
 800819a:	d3be      	bcc.n	800811a <Task_USB_Configuration+0x6de>
			}
			memset(received_data, 0, len);
 800819c:	f897 3102 	ldrb.w	r3, [r7, #258]	; 0x102
 80081a0:	461a      	mov	r2, r3
 80081a2:	2100      	movs	r1, #0
 80081a4:	480a      	ldr	r0, [pc, #40]	; (80081d0 <Task_USB_Configuration+0x794>)
 80081a6:	f00f ff77 	bl	8018098 <memset>
			AskProperties(re_Hard_conf,re_Client);	//Envoi des données reçu et traiter pour comparaison et écriture
 80081aa:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80081ae:	f897 3109 	ldrb.w	r3, [r7, #265]	; 0x109
 80081b2:	4611      	mov	r1, r2
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7fc facf 	bl	8004758 <AskProperties>
		}
	}
}
 80081ba:	e7ff      	b.n	80081bc <Task_USB_Configuration+0x780>
 80081bc:	bf00      	nop
 80081be:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80081c2:	46bd      	mov	sp, r7
 80081c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081c8:	20001158 	.word	0x20001158
 80081cc:	0801bd5c 	.word	0x0801bd5c
 80081d0:	20001568 	.word	0x20001568

080081d4 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b086      	sub	sp, #24
 80081d8:	af02      	add	r7, sp, #8
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	4608      	mov	r0, r1
 80081de:	4611      	mov	r1, r2
 80081e0:	461a      	mov	r2, r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	70fb      	strb	r3, [r7, #3]
 80081e6:	460b      	mov	r3, r1
 80081e8:	70bb      	strb	r3, [r7, #2]
 80081ea:	4613      	mov	r3, r2
 80081ec:	707b      	strb	r3, [r7, #1]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 80081f4:	73bb      	strb	r3, [r7, #14]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 80081f6:	7bbb      	ldrb	r3, [r7, #14]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	bf0c      	ite	eq
 80081fc:	2301      	moveq	r3, #1
 80081fe:	2300      	movne	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	737b      	strb	r3, [r7, #13]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8008204:	78fa      	ldrb	r2, [r7, #3]
 8008206:	787b      	ldrb	r3, [r7, #1]
 8008208:	4413      	add	r3, r2
 800820a:	b2d8      	uxtb	r0, r3
 800820c:	78bb      	ldrb	r3, [r7, #2]
 800820e:	3301      	adds	r3, #1
 8008210:	b2db      	uxtb	r3, r3
 8008212:	78ba      	ldrb	r2, [r7, #2]
 8008214:	78f9      	ldrb	r1, [r7, #3]
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	4603      	mov	r3, r0
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 f853 	bl	80092c6 <u8g2_IsIntersection>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d040      	beq.n	80082a8 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8008226:	2301      	movs	r3, #1
 8008228:	73fb      	strb	r3, [r7, #15]
  while(len > 0) {
 800822a:	e035      	b.n	8008298 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	781a      	ldrb	r2, [r3, #0]
 8008230:	7bfb      	ldrb	r3, [r7, #15]
 8008232:	4013      	ands	r3, r2
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00c      	beq.n	8008254 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7bba      	ldrb	r2, [r7, #14]
 800823e:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8008242:	78ba      	ldrb	r2, [r7, #2]
 8008244:	78f9      	ldrb	r1, [r7, #3]
 8008246:	2300      	movs	r3, #0
 8008248:	9300      	str	r3, [sp, #0]
 800824a:	2301      	movs	r3, #1
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 ff84 	bl	800915a <u8g2_DrawHVLine>
 8008252:	e010      	b.n	8008276 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7b7a      	ldrb	r2, [r7, #13]
 8008262:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8008266:	78ba      	ldrb	r2, [r7, #2]
 8008268:	78f9      	ldrb	r1, [r7, #3]
 800826a:	2300      	movs	r3, #0
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	2301      	movs	r3, #1
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 ff72 	bl	800915a <u8g2_DrawHVLine>
    }
    x++;
 8008276:	78fb      	ldrb	r3, [r7, #3]
 8008278:	3301      	adds	r3, #1
 800827a:	70fb      	strb	r3, [r7, #3]
    mask <<= 1;
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	73fb      	strb	r3, [r7, #15]
    if ( mask == 0 )
 8008282:	7bfb      	ldrb	r3, [r7, #15]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 8008288:	2301      	movs	r3, #1
 800828a:	73fb      	strb	r3, [r7, #15]
      b++;
 800828c:	69bb      	ldr	r3, [r7, #24]
 800828e:	3301      	adds	r3, #1
 8008290:	61bb      	str	r3, [r7, #24]
    }
    len--;
 8008292:	787b      	ldrb	r3, [r7, #1]
 8008294:	3b01      	subs	r3, #1
 8008296:	707b      	strb	r3, [r7, #1]
  while(len > 0) {
 8008298:	787b      	ldrb	r3, [r7, #1]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1c6      	bne.n	800822c <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	7bba      	ldrb	r2, [r7, #14]
 80082a2:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
 80082a6:	e000      	b.n	80082aa <u8g2_DrawHXBM+0xd6>
    return;
 80082a8:	bf00      	nop
}
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af02      	add	r7, sp, #8
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	4608      	mov	r0, r1
 80082ba:	4611      	mov	r1, r2
 80082bc:	461a      	mov	r2, r3
 80082be:	4603      	mov	r3, r0
 80082c0:	70fb      	strb	r3, [r7, #3]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70bb      	strb	r3, [r7, #2]
 80082c6:	4613      	mov	r3, r2
 80082c8:	707b      	strb	r3, [r7, #1]
  u8g2_uint_t blen;
  blen = w;
 80082ca:	787b      	ldrb	r3, [r7, #1]
 80082cc:	73fb      	strb	r3, [r7, #15]
  blen += 7;
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	3307      	adds	r3, #7
 80082d2:	73fb      	strb	r3, [r7, #15]
  blen >>= 3;
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	08db      	lsrs	r3, r3, #3
 80082d8:	73fb      	strb	r3, [r7, #15]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80082da:	78fa      	ldrb	r2, [r7, #3]
 80082dc:	787b      	ldrb	r3, [r7, #1]
 80082de:	4413      	add	r3, r2
 80082e0:	b2d8      	uxtb	r0, r3
 80082e2:	78ba      	ldrb	r2, [r7, #2]
 80082e4:	7e3b      	ldrb	r3, [r7, #24]
 80082e6:	4413      	add	r3, r2
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	78ba      	ldrb	r2, [r7, #2]
 80082ec:	78f9      	ldrb	r1, [r7, #3]
 80082ee:	9300      	str	r3, [sp, #0]
 80082f0:	4603      	mov	r3, r0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 ffe7 	bl	80092c6 <u8g2_IsIntersection>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d017      	beq.n	800832e <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 80082fe:	e012      	b.n	8008326 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8008300:	7878      	ldrb	r0, [r7, #1]
 8008302:	78ba      	ldrb	r2, [r7, #2]
 8008304:	78f9      	ldrb	r1, [r7, #3]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	4603      	mov	r3, r0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f7ff ff61 	bl	80081d4 <u8g2_DrawHXBM>
    bitmap += blen;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	4413      	add	r3, r2
 8008318:	61fb      	str	r3, [r7, #28]
    y++;
 800831a:	78bb      	ldrb	r3, [r7, #2]
 800831c:	3301      	adds	r3, #1
 800831e:	70bb      	strb	r3, [r7, #2]
    h--;
 8008320:	7e3b      	ldrb	r3, [r7, #24]
 8008322:	3b01      	subs	r3, #1
 8008324:	763b      	strb	r3, [r7, #24]
  while( h > 0 )
 8008326:	7e3b      	ldrb	r3, [r7, #24]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d1e9      	bne.n	8008300 <u8g2_DrawXBM+0x50>
 800832c:	e000      	b.n	8008330 <u8g2_DrawXBM+0x80>
    return;
 800832e:	bf00      	nop
  }
}
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}

08008336 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8008336:	b580      	push	{r7, lr}
 8008338:	b084      	sub	sp, #16
 800833a:	af00      	add	r7, sp, #0
 800833c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	7c1b      	ldrb	r3, [r3, #16]
 8008344:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800834c:	461a      	mov	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	fb02 f303 	mul.w	r3, r2, r3
 8008354:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	00db      	lsls	r3, r3, #3
 800835a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	68fa      	ldr	r2, [r7, #12]
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f00f fe97 	bl	8018098 <memset>
}
 800836a:	bf00      	nop
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}

08008372 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8008372:	b580      	push	{r7, lr}
 8008374:	b086      	sub	sp, #24
 8008376:	af02      	add	r7, sp, #8
 8008378:	6078      	str	r0, [r7, #4]
 800837a:	460b      	mov	r3, r1
 800837c:	70fb      	strb	r3, [r7, #3]
 800837e:	4613      	mov	r3, r2
 8008380:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	7c1b      	ldrb	r3, [r3, #16]
 8008388:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8008394:	7bfb      	ldrb	r3, [r7, #15]
 8008396:	b29b      	uxth	r3, r3
 8008398:	89ba      	ldrh	r2, [r7, #12]
 800839a:	fb12 f303 	smulbb	r3, r2, r3
 800839e:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80083a0:	89bb      	ldrh	r3, [r7, #12]
 80083a2:	00db      	lsls	r3, r3, #3
 80083a4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80083a6:	89bb      	ldrh	r3, [r7, #12]
 80083a8:	68ba      	ldr	r2, [r7, #8]
 80083aa:	4413      	add	r3, r2
 80083ac:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80083ae:	7bf9      	ldrb	r1, [r7, #15]
 80083b0:	78ba      	ldrb	r2, [r7, #2]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	9300      	str	r3, [sp, #0]
 80083b6:	460b      	mov	r3, r1
 80083b8:	2100      	movs	r1, #0
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f001 fc95 	bl	8009cea <u8x8_DrawTile>
}
 80083c0:	bf00      	nop
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083da:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083e2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	7c5b      	ldrb	r3, [r3, #17]
 80083ea:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80083ec:	7bba      	ldrb	r2, [r7, #14]
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
 80083f0:	4619      	mov	r1, r3
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f7ff ffbd 	bl	8008372 <u8g2_send_tile_row>
    src_row++;
 80083f8:	7bfb      	ldrb	r3, [r7, #15]
 80083fa:	3301      	adds	r3, #1
 80083fc:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 80083fe:	7bbb      	ldrb	r3, [r7, #14]
 8008400:	3301      	adds	r3, #1
 8008402:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8008404:	7bfa      	ldrb	r2, [r7, #15]
 8008406:	7b7b      	ldrb	r3, [r7, #13]
 8008408:	429a      	cmp	r2, r3
 800840a:	d203      	bcs.n	8008414 <u8g2_send_buffer+0x4c>
 800840c:	7bba      	ldrb	r2, [r7, #14]
 800840e:	7b3b      	ldrb	r3, [r7, #12]
 8008410:	429a      	cmp	r2, r3
 8008412:	d3eb      	bcc.n	80083ec <u8g2_send_buffer+0x24>
}
 8008414:	bf00      	nop
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <u8g2_SetBufferCurrTileRow>:
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b082      	sub	sp, #8
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  u8g2->cb->update_dimension(u8g2);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	4798      	blx	r3
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 800845a:	2b00      	cmp	r3, #0
 800845c:	d002      	beq.n	8008464 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7ff ff69 	bl	8008336 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8008464:	2100      	movs	r1, #0
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7ff ffd8 	bl	800841c <u8g2_SetBufferCurrTileRow>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f7ff ffa3 	bl	80083c8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008488:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8008490:	7bfb      	ldrb	r3, [r7, #15]
 8008492:	4413      	add	r3, r2
 8008494:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	7c5b      	ldrb	r3, [r3, #17]
 800849c:	7bfa      	ldrb	r2, [r7, #15]
 800849e:	429a      	cmp	r2, r3
 80084a0:	d304      	bcc.n	80084ac <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f001 fc72 	bl	8009d8c <u8x8_RefreshDisplay>
    return 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	e00d      	b.n	80084c8 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f893 3087 	ldrb.w	r3, [r3, #135]	; 0x87
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d002      	beq.n	80084bc <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7ff ff3d 	bl	8008336 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80084bc:	7bfb      	ldrb	r3, [r7, #15]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f7ff ffab 	bl	800841c <u8g2_SetBufferCurrTileRow>
  return 1;
 80084c6:	2301      	movs	r3, #1
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3710      	adds	r7, #16
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff ffb7 	bl	800844c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f7ff ffc8 	bl	8008474 <u8g2_NextPage>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1f9      	bne.n	80084de <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80084ea:	2100      	movs	r1, #0
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f7ff ff95 	bl	800841c <u8g2_SetBufferCurrTileRow>
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <u8g2_m_16_4_1>:
/* generated code, codebuild, u8g2 project */

#include "u8g2.h"

uint8_t *u8g2_m_16_4_1(uint8_t *page_cnt)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 1;
  return 0;
  #else
  static uint8_t buf[128];
  *page_cnt = 1;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	701a      	strb	r2, [r3, #0]
  return buf;
 800850a:	4b03      	ldr	r3, [pc, #12]	; (8008518 <u8g2_m_16_4_1+0x1c>)
  #endif
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr
 8008518:	20000b70 	.word	0x20000b70

0800851c <u8g2_Setup_ssd1306_i2c_128x32_univision_1>:
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 */
/* ssd1306 1 */
void u8g2_Setup_ssd1306_i2c_128x32_univision_1(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b088      	sub	sp, #32
 8008520:	af02      	add	r7, sp, #8
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x32_univision, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4a0b      	ldr	r2, [pc, #44]	; (8008560 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x44>)
 8008532:	490c      	ldr	r1, [pc, #48]	; (8008564 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x48>)
 8008534:	68f8      	ldr	r0, [r7, #12]
 8008536:	f001 fc8d 	bl	8009e54 <u8x8_Setup>
  buf = u8g2_m_16_4_1(&tile_buf_height);
 800853a:	f107 0313 	add.w	r3, r7, #19
 800853e:	4618      	mov	r0, r3
 8008540:	f7ff ffdc 	bl	80084fc <u8g2_m_16_4_1>
 8008544:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8008546:	7cfa      	ldrb	r2, [r7, #19]
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	9300      	str	r3, [sp, #0]
 800854c:	4b06      	ldr	r3, [pc, #24]	; (8008568 <u8g2_Setup_ssd1306_i2c_128x32_univision_1+0x4c>)
 800854e:	6979      	ldr	r1, [r7, #20]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 ffa1 	bl	8009498 <u8g2_SetupBuffer>
}
 8008556:	bf00      	nop
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	0800999d 	.word	0x0800999d
 8008564:	08009c09 	.word	0x08009c09
 8008568:	0800931d 	.word	0x0800931d

0800856c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	460b      	mov	r3, r1
 8008576:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	4413      	add	r3, r2
 800857e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	781b      	ldrb	r3, [r3, #0]
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	460b      	mov	r3, r1
 800859a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800859c:	78fb      	ldrb	r3, [r7, #3]
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	4413      	add	r3, r2
 80085a2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	81fb      	strh	r3, [r7, #14]
    font++;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	3301      	adds	r3, #1
 80085ae:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80085b0:	89fb      	ldrh	r3, [r7, #14]
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b29a      	uxth	r2, r3
 80085bc:	89fb      	ldrh	r3, [r7, #14]
 80085be:	4413      	add	r3, r2
 80085c0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80085c2:	89fb      	ldrh	r3, [r7, #14]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3714      	adds	r7, #20
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80085da:	2100      	movs	r1, #0
 80085dc:	6838      	ldr	r0, [r7, #0]
 80085de:	f7ff ffc5 	bl	800856c <u8g2_font_get_byte>
 80085e2:	4603      	mov	r3, r0
 80085e4:	461a      	mov	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80085ea:	2101      	movs	r1, #1
 80085ec:	6838      	ldr	r0, [r7, #0]
 80085ee:	f7ff ffbd 	bl	800856c <u8g2_font_get_byte>
 80085f2:	4603      	mov	r3, r0
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80085fa:	2102      	movs	r1, #2
 80085fc:	6838      	ldr	r0, [r7, #0]
 80085fe:	f7ff ffb5 	bl	800856c <u8g2_font_get_byte>
 8008602:	4603      	mov	r3, r0
 8008604:	461a      	mov	r2, r3
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800860a:	2103      	movs	r1, #3
 800860c:	6838      	ldr	r0, [r7, #0]
 800860e:	f7ff ffad 	bl	800856c <u8g2_font_get_byte>
 8008612:	4603      	mov	r3, r0
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800861a:	2104      	movs	r1, #4
 800861c:	6838      	ldr	r0, [r7, #0]
 800861e:	f7ff ffa5 	bl	800856c <u8g2_font_get_byte>
 8008622:	4603      	mov	r3, r0
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800862a:	2105      	movs	r1, #5
 800862c:	6838      	ldr	r0, [r7, #0]
 800862e:	f7ff ff9d 	bl	800856c <u8g2_font_get_byte>
 8008632:	4603      	mov	r3, r0
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800863a:	2106      	movs	r1, #6
 800863c:	6838      	ldr	r0, [r7, #0]
 800863e:	f7ff ff95 	bl	800856c <u8g2_font_get_byte>
 8008642:	4603      	mov	r3, r0
 8008644:	461a      	mov	r2, r3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800864a:	2107      	movs	r1, #7
 800864c:	6838      	ldr	r0, [r7, #0]
 800864e:	f7ff ff8d 	bl	800856c <u8g2_font_get_byte>
 8008652:	4603      	mov	r3, r0
 8008654:	461a      	mov	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800865a:	2108      	movs	r1, #8
 800865c:	6838      	ldr	r0, [r7, #0]
 800865e:	f7ff ff85 	bl	800856c <u8g2_font_get_byte>
 8008662:	4603      	mov	r3, r0
 8008664:	461a      	mov	r2, r3
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800866a:	2109      	movs	r1, #9
 800866c:	6838      	ldr	r0, [r7, #0]
 800866e:	f7ff ff7d 	bl	800856c <u8g2_font_get_byte>
 8008672:	4603      	mov	r3, r0
 8008674:	b25a      	sxtb	r2, r3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800867a:	210a      	movs	r1, #10
 800867c:	6838      	ldr	r0, [r7, #0]
 800867e:	f7ff ff75 	bl	800856c <u8g2_font_get_byte>
 8008682:	4603      	mov	r3, r0
 8008684:	b25a      	sxtb	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800868a:	210b      	movs	r1, #11
 800868c:	6838      	ldr	r0, [r7, #0]
 800868e:	f7ff ff6d 	bl	800856c <u8g2_font_get_byte>
 8008692:	4603      	mov	r3, r0
 8008694:	b25a      	sxtb	r2, r3
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800869a:	210c      	movs	r1, #12
 800869c:	6838      	ldr	r0, [r7, #0]
 800869e:	f7ff ff65 	bl	800856c <u8g2_font_get_byte>
 80086a2:	4603      	mov	r3, r0
 80086a4:	b25a      	sxtb	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80086aa:	210d      	movs	r1, #13
 80086ac:	6838      	ldr	r0, [r7, #0]
 80086ae:	f7ff ff5d 	bl	800856c <u8g2_font_get_byte>
 80086b2:	4603      	mov	r3, r0
 80086b4:	b25a      	sxtb	r2, r3
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80086ba:	210e      	movs	r1, #14
 80086bc:	6838      	ldr	r0, [r7, #0]
 80086be:	f7ff ff55 	bl	800856c <u8g2_font_get_byte>
 80086c2:	4603      	mov	r3, r0
 80086c4:	b25a      	sxtb	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80086ca:	210f      	movs	r1, #15
 80086cc:	6838      	ldr	r0, [r7, #0]
 80086ce:	f7ff ff4d 	bl	800856c <u8g2_font_get_byte>
 80086d2:	4603      	mov	r3, r0
 80086d4:	b25a      	sxtb	r2, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80086da:	2110      	movs	r1, #16
 80086dc:	6838      	ldr	r0, [r7, #0]
 80086de:	f7ff ff45 	bl	800856c <u8g2_font_get_byte>
 80086e2:	4603      	mov	r3, r0
 80086e4:	b25a      	sxtb	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80086ea:	2111      	movs	r1, #17
 80086ec:	6838      	ldr	r0, [r7, #0]
 80086ee:	f7ff ff4f 	bl	8008590 <u8g2_font_get_word>
 80086f2:	4603      	mov	r3, r0
 80086f4:	461a      	mov	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80086fa:	2113      	movs	r1, #19
 80086fc:	6838      	ldr	r0, [r7, #0]
 80086fe:	f7ff ff47 	bl	8008590 <u8g2_font_get_word>
 8008702:	4603      	mov	r3, r0
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800870a:	2115      	movs	r1, #21
 800870c:	6838      	ldr	r0, [r7, #0]
 800870e:	f7ff ff3f 	bl	8008590 <u8g2_font_get_word>
 8008712:	4603      	mov	r3, r0
 8008714:	461a      	mov	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	82da      	strh	r2, [r3, #22]
#endif
}
 800871a:	bf00      	nop
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8008722:	b480      	push	{r7}
 8008724:	b085      	sub	sp, #20
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
 800872a:	460b      	mov	r3, r1
 800872c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	7a9b      	ldrb	r3, [r3, #10]
 8008732:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800873c:	7bfa      	ldrb	r2, [r7, #15]
 800873e:	7b7b      	ldrb	r3, [r7, #13]
 8008740:	fa42 f303 	asr.w	r3, r2, r3
 8008744:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8008746:	7b7b      	ldrb	r3, [r7, #13]
 8008748:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800874a:	7bba      	ldrb	r2, [r7, #14]
 800874c:	78fb      	ldrb	r3, [r7, #3]
 800874e:	4413      	add	r3, r2
 8008750:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8008752:	7bbb      	ldrb	r3, [r7, #14]
 8008754:	2b07      	cmp	r3, #7
 8008756:	d91a      	bls.n	800878e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8008758:	2308      	movs	r3, #8
 800875a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800875c:	7b3a      	ldrb	r2, [r7, #12]
 800875e:	7b7b      	ldrb	r3, [r7, #13]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	1c5a      	adds	r2, r3, #1
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	7b3b      	ldrb	r3, [r7, #12]
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	b25a      	sxtb	r2, r3
 800877e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008782:	4313      	orrs	r3, r2
 8008784:	b25b      	sxtb	r3, r3
 8008786:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8008788:	7bbb      	ldrb	r3, [r7, #14]
 800878a:	3b08      	subs	r3, #8
 800878c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	b2db      	uxtb	r3, r3
 800879a:	43db      	mvns	r3, r3
 800879c:	b2da      	uxtb	r2, r3
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	4013      	ands	r3, r2
 80087a2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	7bba      	ldrb	r2, [r7, #14]
 80087a8:	729a      	strb	r2, [r3, #10]
  return val;
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3714      	adds	r7, #20
 80087b0:	46bd      	mov	sp, r7
 80087b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b6:	4770      	bx	lr

080087b8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	4619      	mov	r1, r3
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f7ff ffaa 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 80087ce:	4603      	mov	r3, r0
 80087d0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80087d2:	2301      	movs	r3, #1
 80087d4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80087d6:	78fb      	ldrb	r3, [r7, #3]
 80087d8:	3b01      	subs	r3, #1
 80087da:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80087dc:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80087e0:	78fb      	ldrb	r3, [r7, #3]
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80087e8:	7bfa      	ldrb	r2, [r7, #15]
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	73fb      	strb	r3, [r7, #15]
  return v;
 80087f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80087fe:	b490      	push	{r4, r7}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	4604      	mov	r4, r0
 8008806:	4608      	mov	r0, r1
 8008808:	4611      	mov	r1, r2
 800880a:	461a      	mov	r2, r3
 800880c:	4623      	mov	r3, r4
 800880e:	71fb      	strb	r3, [r7, #7]
 8008810:	4603      	mov	r3, r0
 8008812:	71bb      	strb	r3, [r7, #6]
 8008814:	460b      	mov	r3, r1
 8008816:	717b      	strb	r3, [r7, #5]
 8008818:	4613      	mov	r3, r2
 800881a:	713b      	strb	r3, [r7, #4]
  switch(dir)
 800881c:	793b      	ldrb	r3, [r7, #4]
 800881e:	2b02      	cmp	r3, #2
 8008820:	d010      	beq.n	8008844 <u8g2_add_vector_y+0x46>
 8008822:	2b02      	cmp	r3, #2
 8008824:	dc13      	bgt.n	800884e <u8g2_add_vector_y+0x50>
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <u8g2_add_vector_y+0x32>
 800882a:	2b01      	cmp	r3, #1
 800882c:	d005      	beq.n	800883a <u8g2_add_vector_y+0x3c>
 800882e:	e00e      	b.n	800884e <u8g2_add_vector_y+0x50>
  {
    case 0:
      dy += y;
 8008830:	797a      	ldrb	r2, [r7, #5]
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	4413      	add	r3, r2
 8008836:	71fb      	strb	r3, [r7, #7]
      break;
 8008838:	e00e      	b.n	8008858 <u8g2_add_vector_y+0x5a>
    case 1:
      dy += x;
 800883a:	79ba      	ldrb	r2, [r7, #6]
 800883c:	79fb      	ldrb	r3, [r7, #7]
 800883e:	4413      	add	r3, r2
 8008840:	71fb      	strb	r3, [r7, #7]
      break;
 8008842:	e009      	b.n	8008858 <u8g2_add_vector_y+0x5a>
    case 2:
      dy -= y;
 8008844:	797b      	ldrb	r3, [r7, #5]
 8008846:	79fa      	ldrb	r2, [r7, #7]
 8008848:	1ad3      	subs	r3, r2, r3
 800884a:	71fb      	strb	r3, [r7, #7]
      break;
 800884c:	e004      	b.n	8008858 <u8g2_add_vector_y+0x5a>
    default:
      dy -= x;
 800884e:	79bb      	ldrb	r3, [r7, #6]
 8008850:	79fa      	ldrb	r2, [r7, #7]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	71fb      	strb	r3, [r7, #7]
      break;      
 8008856:	bf00      	nop
  }
  return dy;
 8008858:	79fb      	ldrb	r3, [r7, #7]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3708      	adds	r7, #8
 800885e:	46bd      	mov	sp, r7
 8008860:	bc90      	pop	{r4, r7}
 8008862:	4770      	bx	lr

08008864 <u8g2_add_vector_x>:

static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) U8G2_NOINLINE;
static u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8008864:	b490      	push	{r4, r7}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	4604      	mov	r4, r0
 800886c:	4608      	mov	r0, r1
 800886e:	4611      	mov	r1, r2
 8008870:	461a      	mov	r2, r3
 8008872:	4623      	mov	r3, r4
 8008874:	71fb      	strb	r3, [r7, #7]
 8008876:	4603      	mov	r3, r0
 8008878:	71bb      	strb	r3, [r7, #6]
 800887a:	460b      	mov	r3, r1
 800887c:	717b      	strb	r3, [r7, #5]
 800887e:	4613      	mov	r3, r2
 8008880:	713b      	strb	r3, [r7, #4]
  switch(dir)
 8008882:	793b      	ldrb	r3, [r7, #4]
 8008884:	2b02      	cmp	r3, #2
 8008886:	d010      	beq.n	80088aa <u8g2_add_vector_x+0x46>
 8008888:	2b02      	cmp	r3, #2
 800888a:	dc13      	bgt.n	80088b4 <u8g2_add_vector_x+0x50>
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <u8g2_add_vector_x+0x32>
 8008890:	2b01      	cmp	r3, #1
 8008892:	d005      	beq.n	80088a0 <u8g2_add_vector_x+0x3c>
 8008894:	e00e      	b.n	80088b4 <u8g2_add_vector_x+0x50>
  {
    case 0:
      dx += x;
 8008896:	79ba      	ldrb	r2, [r7, #6]
 8008898:	79fb      	ldrb	r3, [r7, #7]
 800889a:	4413      	add	r3, r2
 800889c:	71fb      	strb	r3, [r7, #7]
      break;
 800889e:	e00e      	b.n	80088be <u8g2_add_vector_x+0x5a>
    case 1:
      dx -= y;
 80088a0:	797b      	ldrb	r3, [r7, #5]
 80088a2:	79fa      	ldrb	r2, [r7, #7]
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	71fb      	strb	r3, [r7, #7]
      break;
 80088a8:	e009      	b.n	80088be <u8g2_add_vector_x+0x5a>
    case 2:
      dx -= x;
 80088aa:	79bb      	ldrb	r3, [r7, #6]
 80088ac:	79fa      	ldrb	r2, [r7, #7]
 80088ae:	1ad3      	subs	r3, r2, r3
 80088b0:	71fb      	strb	r3, [r7, #7]
      break;
 80088b2:	e004      	b.n	80088be <u8g2_add_vector_x+0x5a>
    default:
      dx += y;
 80088b4:	797a      	ldrb	r2, [r7, #5]
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	4413      	add	r3, r2
 80088ba:	71fb      	strb	r3, [r7, #7]
      break;      
 80088bc:	bf00      	nop
  }
  return dx;
 80088be:	79fb      	ldrb	r3, [r7, #7]
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3708      	adds	r7, #8
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bc90      	pop	{r4, r7}
 80088c8:	4770      	bx	lr

080088ca <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80088ca:	b580      	push	{r7, lr}
 80088cc:	b088      	sub	sp, #32
 80088ce:	af02      	add	r7, sp, #8
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	460b      	mov	r3, r1
 80088d4:	70fb      	strb	r3, [r7, #3]
 80088d6:	4613      	mov	r3, r2
 80088d8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3358      	adds	r3, #88	; 0x58
 80088de:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80088e0:	78fb      	ldrb	r3, [r7, #3]
 80088e2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	f993 3006 	ldrsb.w	r3, [r3, #6]
 80088ea:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	f993 3007 	ldrsb.w	r3, [r3, #7]
 80088f2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80088fa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80088fc:	7bfa      	ldrb	r2, [r7, #15]
 80088fe:	7d7b      	ldrb	r3, [r7, #21]
 8008900:	1ad3      	subs	r3, r2, r3
 8008902:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8008904:	7bfb      	ldrb	r3, [r7, #15]
 8008906:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8008908:	7dfa      	ldrb	r2, [r7, #23]
 800890a:	7bfb      	ldrb	r3, [r7, #15]
 800890c:	429a      	cmp	r2, r3
 800890e:	d201      	bcs.n	8008914 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8008910:	7dfb      	ldrb	r3, [r7, #23]
 8008912:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	791b      	ldrb	r3, [r3, #4]
 8008918:	73bb      	strb	r3, [r7, #14]
    y = decode->target_y;
 800891a:	693b      	ldr	r3, [r7, #16]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	737b      	strb	r3, [r7, #13]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8008920:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8008924:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	7b9b      	ldrb	r3, [r3, #14]
 800892c:	7bb8      	ldrb	r0, [r7, #14]
 800892e:	f7ff ff99 	bl	8008864 <u8g2_add_vector_x>
 8008932:	4603      	mov	r3, r0
 8008934:	73bb      	strb	r3, [r7, #14]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8008936:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800893a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	7b9b      	ldrb	r3, [r3, #14]
 8008942:	7b78      	ldrb	r0, [r7, #13]
 8008944:	f7ff ff5b 	bl	80087fe <u8g2_add_vector_y>
 8008948:	4603      	mov	r3, r0
 800894a:	737b      	strb	r3, [r7, #13]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800894c:	78bb      	ldrb	r3, [r7, #2]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00f      	beq.n	8008972 <u8g2_font_decode_len+0xa8>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	7b1a      	ldrb	r2, [r3, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	7b9b      	ldrb	r3, [r3, #14]
 8008960:	7db8      	ldrb	r0, [r7, #22]
 8008962:	7b7a      	ldrb	r2, [r7, #13]
 8008964:	7bb9      	ldrb	r1, [r7, #14]
 8008966:	9300      	str	r3, [sp, #0]
 8008968:	4603      	mov	r3, r0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 fbf5 	bl	800915a <u8g2_DrawHVLine>
 8008970:	e012      	b.n	8008998 <u8g2_font_decode_len+0xce>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	7adb      	ldrb	r3, [r3, #11]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d10e      	bne.n	8008998 <u8g2_font_decode_len+0xce>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	7b5a      	ldrb	r2, [r3, #13]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
      u8g2_DrawHVLine(u8g2, 
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	7b9b      	ldrb	r3, [r3, #14]
 8008988:	7db8      	ldrb	r0, [r7, #22]
 800898a:	7b7a      	ldrb	r2, [r7, #13]
 800898c:	7bb9      	ldrb	r1, [r7, #14]
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	4603      	mov	r3, r0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fbe1 	bl	800915a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8008998:	7dfa      	ldrb	r2, [r7, #23]
 800899a:	7bfb      	ldrb	r3, [r7, #15]
 800899c:	429a      	cmp	r2, r3
 800899e:	d309      	bcc.n	80089b4 <u8g2_font_decode_len+0xea>
      break;
    cnt -= rem;
 80089a0:	7dfa      	ldrb	r2, [r7, #23]
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80089a8:	2300      	movs	r3, #0
 80089aa:	757b      	strb	r3, [r7, #21]
    ly++;
 80089ac:	7d3b      	ldrb	r3, [r7, #20]
 80089ae:	3301      	adds	r3, #1
 80089b0:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80089b2:	e79f      	b.n	80088f4 <u8g2_font_decode_len+0x2a>
      break;
 80089b4:	bf00      	nop
  }
  lx += cnt;
 80089b6:	7d7a      	ldrb	r2, [r7, #21]
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	4413      	add	r3, r2
 80089bc:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80089be:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	719a      	strb	r2, [r3, #6]
  decode->y = ly;
 80089c6:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	71da      	strb	r2, [r3, #7]
  
}
 80089ce:	bf00      	nop
 80089d0:	3718      	adds	r7, #24
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	3358      	adds	r3, #88	; 0x58
 80089e4:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	729a      	strb	r2, [r3, #10]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80089f8:	4619      	mov	r1, r3
 80089fa:	68f8      	ldr	r0, [r7, #12]
 80089fc:	f7ff fe91 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 8008a00:	4603      	mov	r3, r0
 8008a02:	b25a      	sxtb	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	721a      	strb	r2, [r3, #8]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008a0e:	4619      	mov	r1, r3
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff fe86 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 8008a16:	4603      	mov	r3, r0
 8008a18:	b25a      	sxtb	r2, r3
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	725a      	strb	r2, [r3, #9]
  
  decode->fg_color = u8g2->draw_color;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f893 2086 	ldrb.w	r2, [r3, #134]	; 0x86
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	731a      	strb	r2, [r3, #12]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	7b1b      	ldrb	r3, [r3, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	bf0c      	ite	eq
 8008a30:	2301      	moveq	r3, #1
 8008a32:	2300      	movne	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	461a      	mov	r2, r3
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	735a      	strb	r2, [r3, #13]
}
 8008a3c:	bf00      	nop
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b088      	sub	sp, #32
 8008a48:	af02      	add	r7, sp, #8
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	3358      	adds	r3, #88	; 0x58
 8008a52:	613b      	str	r3, [r7, #16]
    
  u8g2_font_setup_decode(u8g2, glyph_data);
 8008a54:	6839      	ldr	r1, [r7, #0]
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f7ff ffbd 	bl	80089d6 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008a62:	73fb      	strb	r3, [r7, #15]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6938      	ldr	r0, [r7, #16]
 8008a6e:	f7ff fea3 	bl	80087b8 <u8g2_font_decode_get_signed_bits>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6938      	ldr	r0, [r7, #16]
 8008a80:	f7ff fe9a 	bl	80087b8 <u8g2_font_decode_get_signed_bits>
 8008a84:	4603      	mov	r3, r0
 8008a86:	737b      	strb	r3, [r7, #13]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a8e:	4619      	mov	r1, r3
 8008a90:	6938      	ldr	r0, [r7, #16]
 8008a92:	f7ff fe91 	bl	80087b8 <u8g2_font_decode_get_signed_bits>
 8008a96:	4603      	mov	r3, r0
 8008a98:	733b      	strb	r3, [r7, #12]
  
  if ( decode->glyph_width > 0 )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f340 80cf 	ble.w	8008c44 <u8g2_font_decode_glyph+0x200>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	7918      	ldrb	r0, [r3, #4]
 8008aaa:	7bfa      	ldrb	r2, [r7, #15]
 8008aac:	7b7b      	ldrb	r3, [r7, #13]
 8008aae:	4413      	add	r3, r2
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	425b      	negs	r3, r3
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	b25a      	sxtb	r2, r3
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	7b9b      	ldrb	r3, [r3, #14]
 8008abc:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8008ac0:	f7ff fed0 	bl	8008864 <u8g2_add_vector_x>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	461a      	mov	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	711a      	strb	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	7958      	ldrb	r0, [r3, #5]
 8008ad0:	7bfa      	ldrb	r2, [r7, #15]
 8008ad2:	7b7b      	ldrb	r3, [r7, #13]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	b2db      	uxtb	r3, r3
 8008ad8:	425b      	negs	r3, r3
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	b25a      	sxtb	r2, r3
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	7b9b      	ldrb	r3, [r3, #14]
 8008ae2:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8008ae6:	f7ff fe8a 	bl	80087fe <u8g2_add_vector_y>
 8008aea:	4603      	mov	r3, r0
 8008aec:	461a      	mov	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	715a      	strb	r2, [r3, #5]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	791b      	ldrb	r3, [r3, #4]
 8008af6:	75fb      	strb	r3, [r7, #23]
      y0 = decode->target_y;
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	795b      	ldrb	r3, [r3, #5]
 8008afc:	757b      	strb	r3, [r7, #21]
      x1 = x0;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	75bb      	strb	r3, [r7, #22]
      y1 = y0;
 8008b02:	7d7b      	ldrb	r3, [r7, #21]
 8008b04:	753b      	strb	r3, [r7, #20]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	7b9b      	ldrb	r3, [r3, #14]
 8008b0a:	2b03      	cmp	r3, #3
 8008b0c:	d852      	bhi.n	8008bb4 <u8g2_font_decode_glyph+0x170>
 8008b0e:	a201      	add	r2, pc, #4	; (adr r2, 8008b14 <u8g2_font_decode_glyph+0xd0>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b25 	.word	0x08008b25
 8008b18:	08008b3d 	.word	0x08008b3d
 8008b1c:	08008b61 	.word	0x08008b61
 8008b20:	08008b91 	.word	0x08008b91
      {
	case 0:
	    x1 += decode->glyph_width;
 8008b24:	693b      	ldr	r3, [r7, #16]
 8008b26:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b2a:	b2da      	uxtb	r2, r3
 8008b2c:	7dbb      	ldrb	r3, [r7, #22]
 8008b2e:	4413      	add	r3, r2
 8008b30:	75bb      	strb	r3, [r7, #22]
	    y1 += h;
 8008b32:	7bfa      	ldrb	r2, [r7, #15]
 8008b34:	7d3b      	ldrb	r3, [r7, #20]
 8008b36:	4413      	add	r3, r2
 8008b38:	753b      	strb	r3, [r7, #20]
	    break;
 8008b3a:	e03b      	b.n	8008bb4 <u8g2_font_decode_glyph+0x170>
	case 1:
	    x0 -= h;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
 8008b3e:	7dfa      	ldrb	r2, [r7, #23]
 8008b40:	1ad3      	subs	r3, r2, r3
 8008b42:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008b44:	7dfb      	ldrb	r3, [r7, #23]
 8008b46:	3301      	adds	r3, #1
 8008b48:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8008b4a:	7dbb      	ldrb	r3, [r7, #22]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	75bb      	strb	r3, [r7, #22]
	    y1 += decode->glyph_width;
 8008b50:	693b      	ldr	r3, [r7, #16]
 8008b52:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	7d3b      	ldrb	r3, [r7, #20]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	753b      	strb	r3, [r7, #20]
	    break;
 8008b5e:	e029      	b.n	8008bb4 <u8g2_font_decode_glyph+0x170>
	case 2:
	    x0 -= decode->glyph_width;
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	7dfa      	ldrb	r2, [r7, #23]
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	75fb      	strb	r3, [r7, #23]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008b6e:	7dfb      	ldrb	r3, [r7, #23]
 8008b70:	3301      	adds	r3, #1
 8008b72:	75fb      	strb	r3, [r7, #23]
	    x1++;
 8008b74:	7dbb      	ldrb	r3, [r7, #22]
 8008b76:	3301      	adds	r3, #1
 8008b78:	75bb      	strb	r3, [r7, #22]
	    y0 -= h;
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	7d7a      	ldrb	r2, [r7, #21]
 8008b7e:	1ad3      	subs	r3, r2, r3
 8008b80:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008b82:	7d7b      	ldrb	r3, [r7, #21]
 8008b84:	3301      	adds	r3, #1
 8008b86:	757b      	strb	r3, [r7, #21]
	    y1++;
 8008b88:	7d3b      	ldrb	r3, [r7, #20]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	753b      	strb	r3, [r7, #20]
	    break;	  
 8008b8e:	e011      	b.n	8008bb4 <u8g2_font_decode_glyph+0x170>
	case 3:
	    x1 += h;
 8008b90:	7bfa      	ldrb	r2, [r7, #15]
 8008b92:	7dbb      	ldrb	r3, [r7, #22]
 8008b94:	4413      	add	r3, r2
 8008b96:	75bb      	strb	r3, [r7, #22]
	    y0 -= decode->glyph_width;
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	7d7a      	ldrb	r2, [r7, #21]
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	757b      	strb	r3, [r7, #21]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8008ba6:	7d7b      	ldrb	r3, [r7, #21]
 8008ba8:	3301      	adds	r3, #1
 8008baa:	757b      	strb	r3, [r7, #21]
	    y1++;
 8008bac:	7d3b      	ldrb	r3, [r7, #20]
 8008bae:	3301      	adds	r3, #1
 8008bb0:	753b      	strb	r3, [r7, #20]
	    break;	  
 8008bb2:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8008bb4:	7db8      	ldrb	r0, [r7, #22]
 8008bb6:	7d7a      	ldrb	r2, [r7, #21]
 8008bb8:	7df9      	ldrb	r1, [r7, #23]
 8008bba:	7d3b      	ldrb	r3, [r7, #20]
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fb80 	bl	80092c6 <u8g2_IsIntersection>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d102      	bne.n	8008bd2 <u8g2_font_decode_glyph+0x18e>
	return d;
 8008bcc:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008bd0:	e03a      	b.n	8008c48 <u8g2_font_decode_glyph+0x204>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	719a      	strb	r2, [r3, #6]
    decode->y = 0;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	71da      	strb	r2, [r3, #7]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
 8008be4:	4619      	mov	r1, r3
 8008be6:	6938      	ldr	r0, [r7, #16]
 8008be8:	f7ff fd9b 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 8008bec:	4603      	mov	r3, r0
 8008bee:	72fb      	strb	r3, [r7, #11]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	6938      	ldr	r0, [r7, #16]
 8008bfa:	f7ff fd92 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	72bb      	strb	r3, [r7, #10]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	2200      	movs	r2, #0
 8008c06:	4619      	mov	r1, r3
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f7ff fe5e 	bl	80088ca <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8008c0e:	7abb      	ldrb	r3, [r7, #10]
 8008c10:	2201      	movs	r2, #1
 8008c12:	4619      	mov	r1, r3
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f7ff fe58 	bl	80088ca <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	6938      	ldr	r0, [r7, #16]
 8008c1e:	f7ff fd80 	bl	8008722 <u8g2_font_decode_get_unsigned_bits>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d1ec      	bne.n	8008c02 <u8g2_font_decode_glyph+0x1be>

      if ( decode->y >= h )
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8008c2e:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	dd00      	ble.n	8008c38 <u8g2_font_decode_glyph+0x1f4>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8008c36:	e7d2      	b.n	8008bde <u8g2_font_decode_glyph+0x19a>
	break;
 8008c38:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	7b1a      	ldrb	r2, [r3, #12]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  }
  return d;
 8008c44:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b086      	sub	sp, #24
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	460b      	mov	r3, r1
 8008c5a:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c60:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	3317      	adds	r3, #23
 8008c66:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8008c68:	887b      	ldrh	r3, [r7, #2]
 8008c6a:	2bff      	cmp	r3, #255	; 0xff
 8008c6c:	d82a      	bhi.n	8008cc4 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8008c6e:	887b      	ldrh	r3, [r7, #2]
 8008c70:	2b60      	cmp	r3, #96	; 0x60
 8008c72:	d907      	bls.n	8008c84 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	4413      	add	r3, r2
 8008c80:	617b      	str	r3, [r7, #20]
 8008c82:	e009      	b.n	8008c98 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8008c84:	887b      	ldrh	r3, [r7, #2]
 8008c86:	2b40      	cmp	r3, #64	; 0x40
 8008c88:	d906      	bls.n	8008c98 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8008c90:	461a      	mov	r2, r3
 8008c92:	697b      	ldr	r3, [r7, #20]
 8008c94:	4413      	add	r3, r2
 8008c96:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	781b      	ldrb	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d04e      	beq.n	8008d40 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	b29b      	uxth	r3, r3
 8008ca8:	887a      	ldrh	r2, [r7, #2]
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d102      	bne.n	8008cb4 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	e049      	b.n	8008d48 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	461a      	mov	r2, r3
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	4413      	add	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8008cc2:	e7e9      	b.n	8008c98 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	; 0x7e
 8008cca:	461a      	mov	r2, r3
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	4413      	add	r3, r2
 8008cd0:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6938      	ldr	r0, [r7, #16]
 8008cda:	f7ff fc59 	bl	8008590 <u8g2_font_get_word>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	461a      	mov	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8008ce8:	2102      	movs	r1, #2
 8008cea:	6938      	ldr	r0, [r7, #16]
 8008cec:	f7ff fc50 	bl	8008590 <u8g2_font_get_word>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8008cfa:	89fa      	ldrh	r2, [r7, #14]
 8008cfc:	887b      	ldrh	r3, [r7, #2]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d3e9      	bcc.n	8008cd6 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8008d08:	89fb      	ldrh	r3, [r7, #14]
 8008d0a:	021b      	lsls	r3, r3, #8
 8008d0c:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	3301      	adds	r3, #1
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	89fb      	ldrh	r3, [r7, #14]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8008d1c:	89fb      	ldrh	r3, [r7, #14]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d010      	beq.n	8008d44 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8008d22:	89fa      	ldrh	r2, [r7, #14]
 8008d24:	887b      	ldrh	r3, [r7, #2]
 8008d26:	429a      	cmp	r2, r3
 8008d28:	d102      	bne.n	8008d30 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	3303      	adds	r3, #3
 8008d2e:	e00b      	b.n	8008d48 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	3302      	adds	r3, #2
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	461a      	mov	r2, r3
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8008d3e:	e7e0      	b.n	8008d02 <u8g2_font_get_glyph_data+0xb2>
	break;
 8008d40:	bf00      	nop
 8008d42:	e000      	b.n	8008d46 <u8g2_font_get_glyph_data+0xf6>
	break;
 8008d44:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3718      	adds	r7, #24
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b084      	sub	sp, #16
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	4608      	mov	r0, r1
 8008d5a:	4611      	mov	r1, r2
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	4603      	mov	r3, r0
 8008d60:	70fb      	strb	r3, [r7, #3]
 8008d62:	460b      	mov	r3, r1
 8008d64:	70bb      	strb	r3, [r7, #2]
 8008d66:	4613      	mov	r3, r2
 8008d68:	803b      	strh	r3, [r7, #0]
  u8g2_uint_t dx = 0;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	73fb      	strb	r3, [r7, #15]
  u8g2->font_decode.target_x = x;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	78fa      	ldrb	r2, [r7, #3]
 8008d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  u8g2->font_decode.target_y = y;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	78ba      	ldrb	r2, [r7, #2]
 8008d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8008d7e:	883b      	ldrh	r3, [r7, #0]
 8008d80:	4619      	mov	r1, r3
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f7ff ff64 	bl	8008c50 <u8g2_font_get_glyph_data>
 8008d88:	60b8      	str	r0, [r7, #8]
  if ( glyph_data != NULL )
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8008d90:	68b9      	ldr	r1, [r7, #8]
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7ff fe56 	bl	8008a44 <u8g2_font_decode_glyph>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
  }
  return dx;
 8008d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
	...

08008da8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b082      	sub	sp, #8
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	4608      	mov	r0, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	461a      	mov	r2, r3
 8008db6:	4603      	mov	r3, r0
 8008db8:	70fb      	strb	r3, [r7, #3]
 8008dba:	460b      	mov	r3, r1
 8008dbc:	70bb      	strb	r3, [r7, #2]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d833      	bhi.n	8008e34 <u8g2_DrawGlyph+0x8c>
 8008dcc:	a201      	add	r2, pc, #4	; (adr r2, 8008dd4 <u8g2_DrawGlyph+0x2c>)
 8008dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd2:	bf00      	nop
 8008dd4:	08008de5 	.word	0x08008de5
 8008dd8:	08008df9 	.word	0x08008df9
 8008ddc:	08008e0d 	.word	0x08008e0d
 8008de0:	08008e21 	.word	0x08008e21
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	4798      	blx	r3
 8008dec:	4603      	mov	r3, r0
 8008dee:	461a      	mov	r2, r3
 8008df0:	78bb      	ldrb	r3, [r7, #2]
 8008df2:	4413      	add	r3, r2
 8008df4:	70bb      	strb	r3, [r7, #2]
      break;
 8008df6:	e01d      	b.n	8008e34 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	4798      	blx	r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	461a      	mov	r2, r3
 8008e04:	78fb      	ldrb	r3, [r7, #3]
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	70fb      	strb	r3, [r7, #3]
      break;
 8008e0a:	e013      	b.n	8008e34 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	4798      	blx	r3
 8008e14:	4603      	mov	r3, r0
 8008e16:	461a      	mov	r2, r3
 8008e18:	78bb      	ldrb	r3, [r7, #2]
 8008e1a:	1a9b      	subs	r3, r3, r2
 8008e1c:	70bb      	strb	r3, [r7, #2]
      break;
 8008e1e:	e009      	b.n	8008e34 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	4798      	blx	r3
 8008e28:	4603      	mov	r3, r0
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	78fb      	ldrb	r3, [r7, #3]
 8008e2e:	4413      	add	r3, r2
 8008e30:	70fb      	strb	r3, [r7, #3]
      break;
 8008e32:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8008e34:	883b      	ldrh	r3, [r7, #0]
 8008e36:	78ba      	ldrb	r2, [r7, #2]
 8008e38:	78f9      	ldrb	r1, [r7, #3]
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7ff ff88 	bl	8008d50 <u8g2_font_draw_glyph>
 8008e40:	4603      	mov	r3, r0
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	bf00      	nop

08008e4c <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	607b      	str	r3, [r7, #4]
 8008e56:	460b      	mov	r3, r1
 8008e58:	72fb      	strb	r3, [r7, #11]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	72bb      	strb	r3, [r7, #10]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 fc6e 	bl	8009740 <u8x8_utf8_init>
  sum = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	75fb      	strb	r3, [r7, #23]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	685b      	ldr	r3, [r3, #4]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7812      	ldrb	r2, [r2, #0]
 8008e70:	4611      	mov	r1, r2
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	4798      	blx	r3
 8008e76:	4603      	mov	r3, r0
 8008e78:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8008e7a:	8abb      	ldrh	r3, [r7, #20]
 8008e7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d038      	beq.n	8008ef6 <u8g2_draw_string+0xaa>
      break;
    str++;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	3301      	adds	r3, #1
 8008e88:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8008e8a:	8abb      	ldrh	r3, [r7, #20]
 8008e8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d0e9      	beq.n	8008e68 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8008e94:	8abb      	ldrh	r3, [r7, #20]
 8008e96:	7aba      	ldrb	r2, [r7, #10]
 8008e98:	7af9      	ldrb	r1, [r7, #11]
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f7ff ff84 	bl	8008da8 <u8g2_DrawGlyph>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	74fb      	strb	r3, [r7, #19]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8008eaa:	2b03      	cmp	r3, #3
 8008eac:	d81e      	bhi.n	8008eec <u8g2_draw_string+0xa0>
 8008eae:	a201      	add	r2, pc, #4	; (adr r2, 8008eb4 <u8g2_draw_string+0x68>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ec5 	.word	0x08008ec5
 8008eb8:	08008ecf 	.word	0x08008ecf
 8008ebc:	08008ed9 	.word	0x08008ed9
 8008ec0:	08008ee3 	.word	0x08008ee3
      {
	case 0:
	  x += delta;
 8008ec4:	7afa      	ldrb	r2, [r7, #11]
 8008ec6:	7cfb      	ldrb	r3, [r7, #19]
 8008ec8:	4413      	add	r3, r2
 8008eca:	72fb      	strb	r3, [r7, #11]
	  break;
 8008ecc:	e00e      	b.n	8008eec <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8008ece:	7aba      	ldrb	r2, [r7, #10]
 8008ed0:	7cfb      	ldrb	r3, [r7, #19]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	72bb      	strb	r3, [r7, #10]
	  break;
 8008ed6:	e009      	b.n	8008eec <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8008ed8:	7afa      	ldrb	r2, [r7, #11]
 8008eda:	7cfb      	ldrb	r3, [r7, #19]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	72fb      	strb	r3, [r7, #11]
	  break;
 8008ee0:	e004      	b.n	8008eec <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8008ee2:	7aba      	ldrb	r2, [r7, #10]
 8008ee4:	7cfb      	ldrb	r3, [r7, #19]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	72bb      	strb	r3, [r7, #10]
	  break;
 8008eea:	bf00      	nop
      }
#else
      x += delta;
#endif

      sum += delta;    
 8008eec:	7dfa      	ldrb	r2, [r7, #23]
 8008eee:	7cfb      	ldrb	r3, [r7, #19]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	75fb      	strb	r3, [r7, #23]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8008ef4:	e7b8      	b.n	8008e68 <u8g2_draw_string+0x1c>
      break;
 8008ef6:	bf00      	nop
    }
  }
  return sum;
 8008ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	3718      	adds	r7, #24
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop

08008f04 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	607b      	str	r3, [r7, #4]
 8008f0e:	460b      	mov	r3, r1
 8008f10:	72fb      	strb	r3, [r7, #11]
 8008f12:	4613      	mov	r3, r2
 8008f14:	72bb      	strb	r3, [r7, #10]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	4a06      	ldr	r2, [pc, #24]	; (8008f34 <u8g2_DrawStr+0x30>)
 8008f1a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8008f1c:	7aba      	ldrb	r2, [r7, #10]
 8008f1e:	7af9      	ldrb	r1, [r7, #11]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7ff ff92 	bl	8008e4c <u8g2_draw_string>
 8008f28:	4603      	mov	r3, r0
}
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	3710      	adds	r7, #16
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	0800975d 	.word	0x0800975d

08008f38 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b083      	sub	sp, #12
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d05d      	beq.n	8009004 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f993 2075 	ldrsb.w	r2, [r3, #117]	; 0x75
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f993 2076 	ldrsb.w	r2, [r3, #118]	; 0x76
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d04d      	beq.n	8009006 <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d11c      	bne.n	8008fae <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f993 3077 	ldrsb.w	r3, [r3, #119]	; 0x77
 8008f80:	429a      	cmp	r2, r3
 8008f82:	da05      	bge.n	8008f90 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f993 2077 	ldrsb.w	r2, [r3, #119]	; 0x77
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f993 3078 	ldrsb.w	r3, [r3, #120]	; 0x78
 8008f9c:	429a      	cmp	r2, r3
 8008f9e:	dd32      	ble.n	8009006 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f993 2078 	ldrsb.w	r2, [r3, #120]	; 0x78
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8008fac:	e02b      	b.n	8009006 <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f993 3082 	ldrsb.w	r3, [r3, #130]	; 0x82
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8008fc4:	440b      	add	r3, r1
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	da0d      	bge.n	8008fe6 <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8008fd0:	b2da      	uxtb	r2, r3
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8008fd8:	b2db      	uxtb	r3, r3
 8008fda:	4413      	add	r3, r2
 8008fdc:	b2db      	uxtb	r3, r3
 8008fde:	b25a      	sxtb	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f993 3074 	ldrsb.w	r3, [r3, #116]	; 0x74
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	dd07      	ble.n	8009006 <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f993 2074 	ldrsb.w	r2, [r3, #116]	; 0x74
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f883 2083 	strb.w	r2, [r3, #131]	; 0x83
 8009002:	e000      	b.n	8009006 <u8g2_UpdateRefHeight+0xce>
    return;
 8009004:	bf00      	nop
  }  
}
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  return 0;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
	...

08009028 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	4a04      	ldr	r2, [pc, #16]	; (8009044 <u8g2_SetFontPosBaseline+0x1c>)
 8009034:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009036:	bf00      	nop
 8009038:	370c      	adds	r7, #12
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
 8009042:	bf00      	nop
 8009044:	08009011 	.word	0x08009011

08009048 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b082      	sub	sp, #8
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009056:	683a      	ldr	r2, [r7, #0]
 8009058:	429a      	cmp	r2, r3
 800905a:	d00b      	beq.n	8009074 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	683a      	ldr	r2, [r7, #0]
 8009060:	651a      	str	r2, [r3, #80]	; 0x50
    u8g2_read_font_info(&(u8g2->font_info), font);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	3368      	adds	r3, #104	; 0x68
 8009066:	6839      	ldr	r1, [r7, #0]
 8009068:	4618      	mov	r0, r3
 800906a:	f7ff fab1 	bl	80085d0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f7ff ff62 	bl	8008f38 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8009074:	bf00      	nop
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800907c:	b480      	push	{r7}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	4611      	mov	r1, r2
 8009088:	461a      	mov	r2, r3
 800908a:	460b      	mov	r3, r1
 800908c:	71fb      	strb	r3, [r7, #7]
 800908e:	4613      	mov	r3, r2
 8009090:	71bb      	strb	r3, [r7, #6]
  u8g2_uint_t a = *ap;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	75fb      	strb	r3, [r7, #23]
  u8g2_uint_t b;
  b  = a;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
 800909a:	75bb      	strb	r3, [r7, #22]
  b += *len;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	781a      	ldrb	r2, [r3, #0]
 80090a0:	7dbb      	ldrb	r3, [r7, #22]
 80090a2:	4413      	add	r3, r2
 80090a4:	75bb      	strb	r3, [r7, #22]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80090a6:	7dfa      	ldrb	r2, [r7, #23]
 80090a8:	7dbb      	ldrb	r3, [r7, #22]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d90b      	bls.n	80090c6 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80090ae:	7dfa      	ldrb	r2, [r7, #23]
 80090b0:	79bb      	ldrb	r3, [r7, #6]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d205      	bcs.n	80090c2 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80090b6:	79bb      	ldrb	r3, [r7, #6]
 80090b8:	75bb      	strb	r3, [r7, #22]
      b--;
 80090ba:	7dbb      	ldrb	r3, [r7, #22]
 80090bc:	3b01      	subs	r3, #1
 80090be:	75bb      	strb	r3, [r7, #22]
 80090c0:	e001      	b.n	80090c6 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80090c2:	79fb      	ldrb	r3, [r7, #7]
 80090c4:	75fb      	strb	r3, [r7, #23]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80090c6:	7dfa      	ldrb	r2, [r7, #23]
 80090c8:	79bb      	ldrb	r3, [r7, #6]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	d301      	bcc.n	80090d2 <u8g2_clip_intersection2+0x56>
    return 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e01c      	b.n	800910c <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80090d2:	7dba      	ldrb	r2, [r7, #22]
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d801      	bhi.n	80090de <u8g2_clip_intersection2+0x62>
    return 0;
 80090da:	2300      	movs	r3, #0
 80090dc:	e016      	b.n	800910c <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80090de:	7dfa      	ldrb	r2, [r7, #23]
 80090e0:	79fb      	ldrb	r3, [r7, #7]
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d201      	bcs.n	80090ea <u8g2_clip_intersection2+0x6e>
    a = c;
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	75fb      	strb	r3, [r7, #23]
  if ( b > d )
 80090ea:	7dba      	ldrb	r2, [r7, #22]
 80090ec:	79bb      	ldrb	r3, [r7, #6]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d901      	bls.n	80090f6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80090f2:	79bb      	ldrb	r3, [r7, #6]
 80090f4:	75bb      	strb	r3, [r7, #22]
  
  *ap = a;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	7dfa      	ldrb	r2, [r7, #23]
 80090fa:	701a      	strb	r2, [r3, #0]
  b -= a;
 80090fc:	7dba      	ldrb	r2, [r7, #22]
 80090fe:	7dfb      	ldrb	r3, [r7, #23]
 8009100:	1ad3      	subs	r3, r2, r3
 8009102:	75bb      	strb	r3, [r7, #22]
  *len = b;
 8009104:	68bb      	ldr	r3, [r7, #8]
 8009106:	7dba      	ldrb	r2, [r7, #22]
 8009108:	701a      	strb	r2, [r3, #0]
  return 1;
 800910a:	2301      	movs	r3, #1
}
 800910c:	4618      	mov	r0, r3
 800910e:	371c      	adds	r7, #28
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr

08009118 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8009118:	b590      	push	{r4, r7, lr}
 800911a:	b085      	sub	sp, #20
 800911c:	af02      	add	r7, sp, #8
 800911e:	6078      	str	r0, [r7, #4]
 8009120:	4608      	mov	r0, r1
 8009122:	4611      	mov	r1, r2
 8009124:	461a      	mov	r2, r3
 8009126:	4603      	mov	r3, r0
 8009128:	70fb      	strb	r3, [r7, #3]
 800912a:	460b      	mov	r3, r1
 800912c:	70bb      	strb	r3, [r7, #2]
 800912e:	4613      	mov	r3, r2
 8009130:	707b      	strb	r3, [r7, #1]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009138:	78ba      	ldrb	r2, [r7, #2]
 800913a:	1ad3      	subs	r3, r2, r3
 800913c:	70bb      	strb	r3, [r7, #2]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8009142:	7878      	ldrb	r0, [r7, #1]
 8009144:	78ba      	ldrb	r2, [r7, #2]
 8009146:	78f9      	ldrb	r1, [r7, #3]
 8009148:	7e3b      	ldrb	r3, [r7, #24]
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4603      	mov	r3, r0
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	47a0      	blx	r4
}
 8009152:	bf00      	nop
 8009154:	370c      	adds	r7, #12
 8009156:	46bd      	mov	sp, r7
 8009158:	bd90      	pop	{r4, r7, pc}

0800915a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800915a:	b590      	push	{r4, r7, lr}
 800915c:	b085      	sub	sp, #20
 800915e:	af02      	add	r7, sp, #8
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	4608      	mov	r0, r1
 8009164:	4611      	mov	r1, r2
 8009166:	461a      	mov	r2, r3
 8009168:	4603      	mov	r3, r0
 800916a:	70fb      	strb	r3, [r7, #3]
 800916c:	460b      	mov	r3, r1
 800916e:	70bb      	strb	r3, [r7, #2]
 8009170:	4613      	mov	r3, r2
 8009172:	707b      	strb	r3, [r7, #1]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800917a:	2b00      	cmp	r3, #0
 800917c:	d06d      	beq.n	800925a <u8g2_DrawHVLine+0x100>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800917e:	787b      	ldrb	r3, [r7, #1]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d06a      	beq.n	800925a <u8g2_DrawHVLine+0x100>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8009184:	787b      	ldrb	r3, [r7, #1]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d918      	bls.n	80091bc <u8g2_DrawHVLine+0x62>
      {
	if ( dir == 2 )
 800918a:	7e3b      	ldrb	r3, [r7, #24]
 800918c:	2b02      	cmp	r3, #2
 800918e:	d109      	bne.n	80091a4 <u8g2_DrawHVLine+0x4a>
	{
	  x -= len;
 8009190:	78fa      	ldrb	r2, [r7, #3]
 8009192:	787b      	ldrb	r3, [r7, #1]
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	b2db      	uxtb	r3, r3
 8009198:	70fb      	strb	r3, [r7, #3]
	  x++;
 800919a:	78fb      	ldrb	r3, [r7, #3]
 800919c:	3301      	adds	r3, #1
 800919e:	b2db      	uxtb	r3, r3
 80091a0:	70fb      	strb	r3, [r7, #3]
 80091a2:	e00b      	b.n	80091bc <u8g2_DrawHVLine+0x62>
	}
	else if ( dir == 3 )
 80091a4:	7e3b      	ldrb	r3, [r7, #24]
 80091a6:	2b03      	cmp	r3, #3
 80091a8:	d108      	bne.n	80091bc <u8g2_DrawHVLine+0x62>
	{
	  y -= len;
 80091aa:	78ba      	ldrb	r2, [r7, #2]
 80091ac:	787b      	ldrb	r3, [r7, #1]
 80091ae:	1ad3      	subs	r3, r2, r3
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	70bb      	strb	r3, [r7, #2]
	  y++;
 80091b4:	78bb      	ldrb	r3, [r7, #2]
 80091b6:	3301      	adds	r3, #1
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	70bb      	strb	r3, [r7, #2]
	}
      }
      dir &= 1;  
 80091bc:	7e3b      	ldrb	r3, [r7, #24]
 80091be:	f003 0301 	and.w	r3, r3, #1
 80091c2:	763b      	strb	r3, [r7, #24]
      
      /* clip against the user window */
      if ( dir == 0 )
 80091c4:	7e3b      	ldrb	r3, [r7, #24]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d119      	bne.n	80091fe <u8g2_DrawHVLine+0xa4>
      {
	if ( y < u8g2->user_y0 )
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 80091d0:	78bb      	ldrb	r3, [r7, #2]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d838      	bhi.n	8009248 <u8g2_DrawHVLine+0xee>
	  return;
	if ( y >= u8g2->user_y1 )
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80091dc:	78bb      	ldrb	r3, [r7, #2]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d934      	bls.n	800924c <u8g2_DrawHVLine+0xf2>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80091ee:	1c79      	adds	r1, r7, #1
 80091f0:	1cf8      	adds	r0, r7, #3
 80091f2:	f7ff ff43 	bl	800907c <u8g2_clip_intersection2>
 80091f6:	4603      	mov	r3, r0
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d119      	bne.n	8009230 <u8g2_DrawHVLine+0xd6>
	  return;
 80091fc:	e02d      	b.n	800925a <u8g2_DrawHVLine+0x100>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009204:	78fb      	ldrb	r3, [r7, #3]
 8009206:	429a      	cmp	r2, r3
 8009208:	d822      	bhi.n	8009250 <u8g2_DrawHVLine+0xf6>
	  return;
	if ( x >= u8g2->user_x1 )
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009210:	78fb      	ldrb	r3, [r7, #3]
 8009212:	429a      	cmp	r2, r3
 8009214:	d91e      	bls.n	8009254 <u8g2_DrawHVLine+0xfa>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009222:	1c79      	adds	r1, r7, #1
 8009224:	1cb8      	adds	r0, r7, #2
 8009226:	f7ff ff29 	bl	800907c <u8g2_clip_intersection2>
 800922a:	4603      	mov	r3, r0
 800922c:	2b00      	cmp	r3, #0
 800922e:	d013      	beq.n	8009258 <u8g2_DrawHVLine+0xfe>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009234:	689c      	ldr	r4, [r3, #8]
 8009236:	78f9      	ldrb	r1, [r7, #3]
 8009238:	78ba      	ldrb	r2, [r7, #2]
 800923a:	7878      	ldrb	r0, [r7, #1]
 800923c:	7e3b      	ldrb	r3, [r7, #24]
 800923e:	9300      	str	r3, [sp, #0]
 8009240:	4603      	mov	r3, r0
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	47a0      	blx	r4
 8009246:	e008      	b.n	800925a <u8g2_DrawHVLine+0x100>
	  return;
 8009248:	bf00      	nop
 800924a:	e006      	b.n	800925a <u8g2_DrawHVLine+0x100>
	  return;
 800924c:	bf00      	nop
 800924e:	e004      	b.n	800925a <u8g2_DrawHVLine+0x100>
	  return;
 8009250:	bf00      	nop
 8009252:	e002      	b.n	800925a <u8g2_DrawHVLine+0x100>
	  return;
 8009254:	bf00      	nop
 8009256:	e000      	b.n	800925a <u8g2_DrawHVLine+0x100>
	  return;
 8009258:	bf00      	nop
    }
}
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	bd90      	pop	{r4, r7, pc}

08009260 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8009260:	b490      	push	{r4, r7}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	4604      	mov	r4, r0
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	461a      	mov	r2, r3
 800926e:	4623      	mov	r3, r4
 8009270:	71fb      	strb	r3, [r7, #7]
 8009272:	4603      	mov	r3, r0
 8009274:	71bb      	strb	r3, [r7, #6]
 8009276:	460b      	mov	r3, r1
 8009278:	717b      	strb	r3, [r7, #5]
 800927a:	4613      	mov	r3, r2
 800927c:	713b      	strb	r3, [r7, #4]
  if ( v0 < a1 )		// v0 <= a1
 800927e:	797a      	ldrb	r2, [r7, #5]
 8009280:	79bb      	ldrb	r3, [r7, #6]
 8009282:	429a      	cmp	r2, r3
 8009284:	d20d      	bcs.n	80092a2 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8009286:	793a      	ldrb	r2, [r7, #4]
 8009288:	79fb      	ldrb	r3, [r7, #7]
 800928a:	429a      	cmp	r2, r3
 800928c:	d901      	bls.n	8009292 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800928e:	2301      	movs	r3, #1
 8009290:	e014      	b.n	80092bc <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8009292:	797a      	ldrb	r2, [r7, #5]
 8009294:	793b      	ldrb	r3, [r7, #4]
 8009296:	429a      	cmp	r2, r3
 8009298:	d901      	bls.n	800929e <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800929a:	2301      	movs	r3, #1
 800929c:	e00e      	b.n	80092bc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800929e:	2300      	movs	r3, #0
 80092a0:	e00c      	b.n	80092bc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80092a2:	793a      	ldrb	r2, [r7, #4]
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d907      	bls.n	80092ba <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80092aa:	797a      	ldrb	r2, [r7, #5]
 80092ac:	793b      	ldrb	r3, [r7, #4]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d901      	bls.n	80092b6 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80092b2:	2301      	movs	r3, #1
 80092b4:	e002      	b.n	80092bc <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80092b6:	2300      	movs	r3, #0
 80092b8:	e000      	b.n	80092bc <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80092ba:	2300      	movs	r3, #0
    }
  }
}
 80092bc:	4618      	mov	r0, r3
 80092be:	3708      	adds	r7, #8
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc90      	pop	{r4, r7}
 80092c4:	4770      	bx	lr

080092c6 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
 80092ce:	4608      	mov	r0, r1
 80092d0:	4611      	mov	r1, r2
 80092d2:	461a      	mov	r2, r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	70fb      	strb	r3, [r7, #3]
 80092d8:	460b      	mov	r3, r1
 80092da:	70bb      	strb	r3, [r7, #2]
 80092dc:	4613      	mov	r3, r2
 80092de:	707b      	strb	r3, [r7, #1]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f893 0047 	ldrb.w	r0, [r3, #71]	; 0x47
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 1048 	ldrb.w	r1, [r3, #72]	; 0x48
 80092ec:	7c3b      	ldrb	r3, [r7, #16]
 80092ee:	78ba      	ldrb	r2, [r7, #2]
 80092f0:	f7ff ffb6 	bl	8009260 <u8g2_is_intersection_decision_tree>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <u8g2_IsIntersection+0x38>
    return 0; 
 80092fa:	2300      	movs	r3, #0
 80092fc:	e00a      	b.n	8009314 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f893 0045 	ldrb.w	r0, [r3, #69]	; 0x45
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
 800930a:	787b      	ldrb	r3, [r7, #1]
 800930c:	78fa      	ldrb	r2, [r7, #3]
 800930e:	f7ff ffa7 	bl	8009260 <u8g2_is_intersection_decision_tree>
 8009312:	4603      	mov	r3, r0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3708      	adds	r7, #8
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800931c:	b480      	push	{r7}
 800931e:	b087      	sub	sp, #28
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	4608      	mov	r0, r1
 8009326:	4611      	mov	r1, r2
 8009328:	461a      	mov	r2, r3
 800932a:	4603      	mov	r3, r0
 800932c:	70fb      	strb	r3, [r7, #3]
 800932e:	460b      	mov	r3, r1
 8009330:	70bb      	strb	r3, [r7, #2]
 8009332:	4613      	mov	r3, r2
 8009334:	707b      	strb	r3, [r7, #1]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8009336:	78bb      	ldrb	r3, [r7, #2]
 8009338:	74fb      	strb	r3, [r7, #19]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 800933a:	7cfb      	ldrb	r3, [r7, #19]
 800933c:	f003 0307 	and.w	r3, r3, #7
 8009340:	74fb      	strb	r3, [r7, #19]
  mask = 1;
 8009342:	2301      	movs	r3, #1
 8009344:	743b      	strb	r3, [r7, #16]
  mask <<= bit_pos;
 8009346:	7c3a      	ldrb	r2, [r7, #16]
 8009348:	7cfb      	ldrb	r3, [r7, #19]
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	743b      	strb	r3, [r7, #16]

  or_mask = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	74bb      	strb	r3, [r7, #18]
  xor_mask = 0;
 8009354:	2300      	movs	r3, #0
 8009356:	747b      	strb	r3, [r7, #17]
  if ( u8g2->draw_color <= 1 )
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800935e:	2b01      	cmp	r3, #1
 8009360:	d801      	bhi.n	8009366 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8009362:	7c3b      	ldrb	r3, [r7, #16]
 8009364:	74bb      	strb	r3, [r7, #18]
  if ( u8g2->draw_color != 1 )
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 800936c:	2b01      	cmp	r3, #1
 800936e:	d001      	beq.n	8009374 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8009370:	7c3b      	ldrb	r3, [r7, #16]
 8009372:	747b      	strb	r3, [r7, #17]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8009374:	78bb      	ldrb	r3, [r7, #2]
 8009376:	81fb      	strh	r3, [r7, #14]
  offset &= ~7;
 8009378:	89fb      	ldrh	r3, [r7, #14]
 800937a:	f023 0307 	bic.w	r3, r3, #7
 800937e:	81fb      	strh	r3, [r7, #14]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	7c1b      	ldrb	r3, [r3, #16]
 8009386:	b29b      	uxth	r3, r3
 8009388:	89fa      	ldrh	r2, [r7, #14]
 800938a:	fb12 f303 	smulbb	r3, r2, r3
 800938e:	81fb      	strh	r3, [r7, #14]
  ptr = u8g2->tile_buf_ptr;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009394:	617b      	str	r3, [r7, #20]
  ptr += offset;
 8009396:	89fb      	ldrh	r3, [r7, #14]
 8009398:	697a      	ldr	r2, [r7, #20]
 800939a:	4413      	add	r3, r2
 800939c:	617b      	str	r3, [r7, #20]
  ptr += x;
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4413      	add	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]
  
  if ( dir == 0 )
 80093a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d117      	bne.n	80093de <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	781a      	ldrb	r2, [r3, #0]
 80093b2:	7cbb      	ldrb	r3, [r7, #18]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	781a      	ldrb	r2, [r3, #0]
 80093c0:	7c7b      	ldrb	r3, [r7, #17]
 80093c2:	4053      	eors	r3, r2
 80093c4:	b2da      	uxtb	r2, r3
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	701a      	strb	r2, [r3, #0]
	ptr++;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	3301      	adds	r3, #1
 80093ce:	617b      	str	r3, [r7, #20]
	len--;
 80093d0:	787b      	ldrb	r3, [r7, #1]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	707b      	strb	r3, [r7, #1]
      } while( len != 0 );
 80093d6:	787b      	ldrb	r3, [r7, #1]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1e8      	bne.n	80093ae <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80093dc:	e039      	b.n	8009452 <u8g2_ll_hvline_vertical_top_lsb+0x136>
      *ptr |= or_mask;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	781a      	ldrb	r2, [r3, #0]
 80093e2:	7cbb      	ldrb	r3, [r7, #18]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	7c7b      	ldrb	r3, [r7, #17]
 80093f2:	4053      	eors	r3, r2
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80093fa:	7cfb      	ldrb	r3, [r7, #19]
 80093fc:	3301      	adds	r3, #1
 80093fe:	74fb      	strb	r3, [r7, #19]
      bit_pos &= 7;
 8009400:	7cfb      	ldrb	r3, [r7, #19]
 8009402:	f003 0307 	and.w	r3, r3, #7
 8009406:	74fb      	strb	r3, [r7, #19]
      len--;
 8009408:	787b      	ldrb	r3, [r7, #1]
 800940a:	3b01      	subs	r3, #1
 800940c:	707b      	strb	r3, [r7, #1]
      if ( bit_pos == 0 )
 800940e:	7cfb      	ldrb	r3, [r7, #19]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d115      	bne.n	8009440 <u8g2_ll_hvline_vertical_top_lsb+0x124>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800941a:	461a      	mov	r2, r3
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	4413      	add	r3, r2
 8009420:	617b      	str	r3, [r7, #20]
	if ( u8g2->draw_color <= 1 )
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009428:	2b01      	cmp	r3, #1
 800942a:	d801      	bhi.n	8009430 <u8g2_ll_hvline_vertical_top_lsb+0x114>
	  or_mask  = 1;
 800942c:	2301      	movs	r3, #1
 800942e:	74bb      	strb	r3, [r7, #18]
	if ( u8g2->draw_color != 1 )
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	f893 3086 	ldrb.w	r3, [r3, #134]	; 0x86
 8009436:	2b01      	cmp	r3, #1
 8009438:	d008      	beq.n	800944c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	  xor_mask = 1;
 800943a:	2301      	movs	r3, #1
 800943c:	747b      	strb	r3, [r7, #17]
 800943e:	e005      	b.n	800944c <u8g2_ll_hvline_vertical_top_lsb+0x130>
	or_mask <<= 1;
 8009440:	7cbb      	ldrb	r3, [r7, #18]
 8009442:	005b      	lsls	r3, r3, #1
 8009444:	74bb      	strb	r3, [r7, #18]
	xor_mask <<= 1;
 8009446:	7c7b      	ldrb	r3, [r7, #17]
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	747b      	strb	r3, [r7, #17]
    } while( len != 0 );
 800944c:	787b      	ldrb	r3, [r7, #1]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1c5      	bne.n	80093de <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
  u8g2->clip_y0 = 0;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	22ff      	movs	r2, #255	; 0xff
 800947a:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	22ff      	movs	r2, #255	; 0xff
 8009482:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  
  u8g2->cb->update_page_win(u8g2);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	4798      	blx	r3
}
 8009490:	bf00      	nop
 8009492:	3708      	adds	r7, #8
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}

08009498 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b084      	sub	sp, #16
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	603b      	str	r3, [r7, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2200      	movs	r2, #0
 80094ac:	651a      	str	r2, [r3, #80]	; 0x50
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	683a      	ldr	r2, [r7, #0]
 80094b2:	631a      	str	r2, [r3, #48]	; 0x30
  
  u8g2->tile_buf_ptr = buf;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38
  u8g2->tile_buf_height = tile_buf_height;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	79fa      	ldrb	r2, [r7, #7]
 80094be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  u8g2->tile_curr_row = 0;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
  u8g2->bitmap_transparency = 0;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
  
  u8g2->draw_color = 1;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 2086 	strb.w	r2, [r3, #134]	; 0x86
  u8g2->is_auto_page_clear = 1;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2087 	strb.w	r2, [r3, #135]	; 0x87
  
  u8g2->cb = u8g2_cb;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	69ba      	ldr	r2, [r7, #24]
 80094ee:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->cb->update_dimension(u8g2);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	68f8      	ldr	r0, [r7, #12]
 80094f8:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f7ff ffaf 	bl	800945e <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8009500:	68f8      	ldr	r0, [r7, #12]
 8009502:	f7ff fd91 	bl	8009028 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
#endif
}
 800950e:	bf00      	nop
 8009510:	3710      	adds	r7, #16
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8009516:	b480      	push	{r7}
 8009518:	b085      	sub	sp, #20
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800952a:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 800952c:	7bfb      	ldrb	r3, [r7, #15]
 800952e:	00db      	lsls	r3, r3, #3
 8009530:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_height = t;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	7bfa      	ldrb	r2, [r7, #15]
 8009536:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  
  t = display_info->tile_width;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	7c1b      	ldrb	r3, [r3, #16]
 800953e:	73fb      	strb	r3, [r7, #15]
#ifndef U8G2_16BIT
  if ( t >= 32 )
 8009540:	7bfb      	ldrb	r3, [r7, #15]
 8009542:	2b1f      	cmp	r3, #31
 8009544:	d901      	bls.n	800954a <u8g2_update_dimension_common+0x34>
    t = 31;
 8009546:	231f      	movs	r3, #31
 8009548:	73fb      	strb	r3, [r7, #15]
#endif
  t *= 8;
 800954a:	7bfb      	ldrb	r3, [r7, #15]
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_buf_width = t;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	7bfa      	ldrb	r2, [r7, #15]
 8009554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_curr_row;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	00db      	lsls	r3, r3, #3
 8009564:	73fb      	strb	r3, [r7, #15]
  u8g2->pixel_curr_row = t;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	7bfa      	ldrb	r2, [r7, #15]
 800956a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  t = u8g2->tile_buf_height;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009574:	73fb      	strb	r3, [r7, #15]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 800957e:	4413      	add	r3, r2
 8009580:	68ba      	ldr	r2, [r7, #8]
 8009582:	7c52      	ldrb	r2, [r2, #17]
 8009584:	4293      	cmp	r3, r2
 8009586:	dd06      	ble.n	8009596 <u8g2_update_dimension_common+0x80>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	7c5a      	ldrb	r2, [r3, #17]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009592:	1ad3      	subs	r3, r2, r3
 8009594:	73fb      	strb	r3, [r7, #15]
  t *= 8;
 8009596:	7bfb      	ldrb	r3, [r7, #15]
 8009598:	00db      	lsls	r3, r3, #3
 800959a:	73fb      	strb	r3, [r7, #15]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  u8g2->buf_y1 = u8g2->buf_y0;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	4413      	add	r3, r2
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#else
  u8g2->width = 240;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	22f0      	movs	r2, #240	; 0xf0
 80095ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  if ( display_info->pixel_width <= 240 )
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	8a9b      	ldrh	r3, [r3, #20]
 80095d2:	2bf0      	cmp	r3, #240	; 0xf0
 80095d4:	d805      	bhi.n	80095e2 <u8g2_update_dimension_common+0xcc>
    u8g2->width = display_info->pixel_width;
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	8a9b      	ldrh	r3, [r3, #20]
 80095da:	b2da      	uxtb	r2, r3
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  u8g2->height = display_info->pixel_height;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	8adb      	ldrh	r3, [r3, #22]
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
#endif

}
 80095ee:	bf00      	nop
 80095f0:	3714      	adds	r7, #20
 80095f2:	46bd      	mov	sp, r7
 80095f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f8:	4770      	bx	lr

080095fa <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af02      	add	r7, sp, #8
 8009600:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f893 1049 	ldrb.w	r1, [r3, #73]	; 0x49
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800961a:	9300      	str	r3, [sp, #0]
 800961c:	4603      	mov	r3, r0
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f7ff fe51 	bl	80092c6 <u8g2_IsIntersection>
 8009624:	4603      	mov	r3, r0
 8009626:	2b00      	cmp	r3, #0
 8009628:	d104      	bne.n	8009634 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8009632:	e03b      	b.n	80096ac <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2201      	movs	r2, #1
 8009638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009648:	429a      	cmp	r2, r3
 800964a:	d205      	bcs.n	8009658 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009664:	429a      	cmp	r2, r3
 8009666:	d905      	bls.n	8009674 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8009680:	429a      	cmp	r2, r3
 8009682:	d205      	bcs.n	8009690 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800969c:	429a      	cmp	r2, r3
 800969e:	d905      	bls.n	80096ac <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
}
 80096ac:	bf00      	nop
 80096ae:	3708      	adds	r7, #8
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b082      	sub	sp, #8
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f7ff ff2a 	bl	8009516 <u8g2_update_dimension_common>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
  
  u8g2->user_y0 = u8g2->buf_y0;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  u8g2->user_y1 = u8g2->buf_y1;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f7ff ff7b 	bl	80095fa <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b084      	sub	sp, #16
 8009710:	af02      	add	r7, sp, #8
 8009712:	6078      	str	r0, [r7, #4]
 8009714:	4608      	mov	r0, r1
 8009716:	4611      	mov	r1, r2
 8009718:	461a      	mov	r2, r3
 800971a:	4603      	mov	r3, r0
 800971c:	70fb      	strb	r3, [r7, #3]
 800971e:	460b      	mov	r3, r1
 8009720:	70bb      	strb	r3, [r7, #2]
 8009722:	4613      	mov	r3, r2
 8009724:	707b      	strb	r3, [r7, #1]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8009726:	7878      	ldrb	r0, [r7, #1]
 8009728:	78ba      	ldrb	r2, [r7, #2]
 800972a:	78f9      	ldrb	r1, [r7, #3]
 800972c:	7c3b      	ldrb	r3, [r7, #16]
 800972e:	9300      	str	r3, [sp, #0]
 8009730:	4603      	mov	r3, r0
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f7ff fcf0 	bl	8009118 <u8g2_draw_hv_line_2dir>
}
 8009738:	bf00      	nop
 800973a:	3708      	adds	r7, #8
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}

08009740 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8009768:	78fb      	ldrb	r3, [r7, #3]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d002      	beq.n	8009774 <u8x8_ascii_next+0x18>
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	2b0a      	cmp	r3, #10
 8009772:	d102      	bne.n	800977a <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8009774:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009778:	e001      	b.n	800977e <u8x8_ascii_next+0x22>
  return b;
 800977a:	78fb      	ldrb	r3, [r7, #3]
 800977c:	b29b      	uxth	r3, r3
}
 800977e:	4618      	mov	r0, r3
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800978a:	b590      	push	{r4, r7, lr}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	460b      	mov	r3, r1
 8009794:	607a      	str	r2, [r7, #4]
 8009796:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	691c      	ldr	r4, [r3, #16]
 800979c:	7afa      	ldrb	r2, [r7, #11]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2117      	movs	r1, #23
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	47a0      	blx	r4
 80097a6:	4603      	mov	r3, r0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3714      	adds	r7, #20
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd90      	pop	{r4, r7, pc}

080097b0 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80097bc:	1cfb      	adds	r3, r7, #3
 80097be:	461a      	mov	r2, r3
 80097c0:	2101      	movs	r1, #1
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f7ff ffe1 	bl	800978a <u8x8_byte_SendBytes>
 80097c8:	4603      	mov	r3, r0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3708      	adds	r7, #8
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}

080097d2 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80097d2:	b590      	push	{r4, r7, lr}
 80097d4:	b083      	sub	sp, #12
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	691c      	ldr	r4, [r3, #16]
 80097de:	2300      	movs	r3, #0
 80097e0:	2200      	movs	r2, #0
 80097e2:	2118      	movs	r1, #24
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	47a0      	blx	r4
 80097e8:	4603      	mov	r3, r0
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	370c      	adds	r7, #12
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}

080097f2 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80097f2:	b590      	push	{r4, r7, lr}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	691c      	ldr	r4, [r3, #16]
 80097fe:	2300      	movs	r3, #0
 8009800:	2200      	movs	r2, #0
 8009802:	2119      	movs	r1, #25
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	47a0      	blx	r4
 8009808:	4603      	mov	r3, r0
}
 800980a:	4618      	mov	r0, r3
 800980c:	370c      	adds	r7, #12
 800980e:	46bd      	mov	sp, r7
 8009810:	bd90      	pop	{r4, r7, pc}

08009812 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8009812:	b590      	push	{r4, r7, lr}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
 800981a:	460b      	mov	r3, r1
 800981c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	68dc      	ldr	r4, [r3, #12]
 8009822:	78fa      	ldrb	r2, [r7, #3]
 8009824:	2300      	movs	r3, #0
 8009826:	2115      	movs	r1, #21
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	47a0      	blx	r4
 800982c:	4603      	mov	r3, r0
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	bd90      	pop	{r4, r7, pc}

08009836 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8009836:	b590      	push	{r4, r7, lr}
 8009838:	b083      	sub	sp, #12
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
 800983e:	460b      	mov	r3, r1
 8009840:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	68dc      	ldr	r4, [r3, #12]
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	2300      	movs	r3, #0
 800984a:	2116      	movs	r1, #22
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	47a0      	blx	r4
 8009850:	4603      	mov	r3, r0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	bd90      	pop	{r4, r7, pc}

0800985a <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800985a:	b590      	push	{r4, r7, lr}
 800985c:	b085      	sub	sp, #20
 800985e:	af00      	add	r7, sp, #0
 8009860:	60f8      	str	r0, [r7, #12]
 8009862:	460b      	mov	r3, r1
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68dc      	ldr	r4, [r3, #12]
 800986c:	7afa      	ldrb	r2, [r7, #11]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2117      	movs	r1, #23
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	47a0      	blx	r4
 8009876:	4603      	mov	r3, r0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3714      	adds	r7, #20
 800987c:	46bd      	mov	sp, r7
 800987e:	bd90      	pop	{r4, r7, pc}

08009880 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8009880:	b590      	push	{r4, r7, lr}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68dc      	ldr	r4, [r3, #12]
 800988c:	2300      	movs	r3, #0
 800988e:	2200      	movs	r2, #0
 8009890:	2118      	movs	r1, #24
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	47a0      	blx	r4
 8009896:	4603      	mov	r3, r0
}
 8009898:	4618      	mov	r0, r3
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	bd90      	pop	{r4, r7, pc}

080098a0 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80098a0:	b590      	push	{r4, r7, lr}
 80098a2:	b083      	sub	sp, #12
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	68dc      	ldr	r4, [r3, #12]
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	2119      	movs	r1, #25
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	47a0      	blx	r4
 80098b6:	4603      	mov	r3, r0
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd90      	pop	{r4, r7, pc}

080098c0 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	73fb      	strb	r3, [r7, #15]
    data++;
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	3301      	adds	r3, #1
 80098d4:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2bfe      	cmp	r3, #254	; 0xfe
 80098da:	d031      	beq.n	8009940 <u8x8_cad_SendSequence+0x80>
 80098dc:	2bfe      	cmp	r3, #254	; 0xfe
 80098de:	dc3d      	bgt.n	800995c <u8x8_cad_SendSequence+0x9c>
 80098e0:	2b19      	cmp	r3, #25
 80098e2:	dc3b      	bgt.n	800995c <u8x8_cad_SendSequence+0x9c>
 80098e4:	2b18      	cmp	r3, #24
 80098e6:	da23      	bge.n	8009930 <u8x8_cad_SendSequence+0x70>
 80098e8:	2b16      	cmp	r3, #22
 80098ea:	dc02      	bgt.n	80098f2 <u8x8_cad_SendSequence+0x32>
 80098ec:	2b15      	cmp	r3, #21
 80098ee:	da03      	bge.n	80098f8 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80098f0:	e034      	b.n	800995c <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80098f2:	2b17      	cmp	r3, #23
 80098f4:	d00e      	beq.n	8009914 <u8x8_cad_SendSequence+0x54>
	return;
 80098f6:	e031      	b.n	800995c <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	68dc      	ldr	r4, [r3, #12]
 8009902:	7bba      	ldrb	r2, [r7, #14]
 8009904:	7bf9      	ldrb	r1, [r7, #15]
 8009906:	2300      	movs	r3, #0
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	47a0      	blx	r4
	  data++;
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	3301      	adds	r3, #1
 8009910:	603b      	str	r3, [r7, #0]
	  break;
 8009912:	e022      	b.n	800995a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800991a:	f107 030e 	add.w	r3, r7, #14
 800991e:	461a      	mov	r2, r3
 8009920:	2101      	movs	r1, #1
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7ff ff99 	bl	800985a <u8x8_cad_SendData>
	  data++;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	3301      	adds	r3, #1
 800992c:	603b      	str	r3, [r7, #0]
	  break;
 800992e:	e014      	b.n	800995a <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	68dc      	ldr	r4, [r3, #12]
 8009934:	7bf9      	ldrb	r1, [r7, #15]
 8009936:	2300      	movs	r3, #0
 8009938:	2200      	movs	r2, #0
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	47a0      	blx	r4
	  break;
 800993e:	e00c      	b.n	800995a <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	461a      	mov	r2, r3
 800994a:	2129      	movs	r1, #41	; 0x29
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 fa2c 	bl	8009daa <u8x8_gpio_call>
	  data++;
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	603b      	str	r3, [r7, #0]
	  break;
 8009958:	bf00      	nop
    cmd = *data;
 800995a:	e7b6      	b.n	80098ca <u8x8_cad_SendSequence+0xa>
	return;
 800995c:	bf00      	nop
    }
  }
}
 800995e:	3714      	adds	r7, #20
 8009960:	46bd      	mov	sp, r7
 8009962:	bd90      	pop	{r4, r7, pc}

08009964 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8009964:	b590      	push	{r4, r7, lr}
 8009966:	b085      	sub	sp, #20
 8009968:	af00      	add	r7, sp, #0
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	460b      	mov	r3, r1
 800996e:	607a      	str	r2, [r7, #4]
 8009970:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8009972:	68f8      	ldr	r0, [r7, #12]
 8009974:	f7ff ff2d 	bl	80097d2 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8009978:	2140      	movs	r1, #64	; 0x40
 800997a:	68f8      	ldr	r0, [r7, #12]
 800997c:	f7ff ff18 	bl	80097b0 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691c      	ldr	r4, [r3, #16]
 8009984:	7afa      	ldrb	r2, [r7, #11]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	2117      	movs	r1, #23
 800998a:	68f8      	ldr	r0, [r7, #12]
 800998c:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800998e:	68f8      	ldr	r0, [r7, #12]
 8009990:	f7ff ff2f 	bl	80097f2 <u8x8_byte_EndTransfer>
}
 8009994:	bf00      	nop
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	bd90      	pop	{r4, r7, pc}

0800999c <u8x8_cad_ssd13xx_fast_i2c>:
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800999c:	b590      	push	{r4, r7, lr}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	60f8      	str	r0, [r7, #12]
 80099a4:	607b      	str	r3, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	72fb      	strb	r3, [r7, #11]
 80099aa:	4613      	mov	r3, r2
 80099ac:	72bb      	strb	r3, [r7, #10]
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
 80099ae:	7afb      	ldrb	r3, [r7, #11]
 80099b0:	3b14      	subs	r3, #20
 80099b2:	2b05      	cmp	r3, #5
 80099b4:	d86e      	bhi.n	8009a94 <u8x8_cad_ssd13xx_fast_i2c+0xf8>
 80099b6:	a201      	add	r2, pc, #4	; (adr r2, 80099bc <u8x8_cad_ssd13xx_fast_i2c+0x20>)
 80099b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099bc:	08009a53 	.word	0x08009a53
 80099c0:	080099d5 	.word	0x080099d5
 80099c4:	08009a03 	.word	0x08009a03
 80099c8:	08009a0f 	.word	0x08009a0f
 80099cc:	08009a77 	.word	0x08009a77
 80099d0:	08009a7f 	.word	0x08009a7f
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
 80099d4:	4b33      	ldr	r3, [pc, #204]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d002      	beq.n	80099e2 <u8x8_cad_ssd13xx_fast_i2c+0x46>
	 u8x8_byte_EndTransfer(u8x8); 
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f7ff ff08 	bl	80097f2 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
 80099e2:	68f8      	ldr	r0, [r7, #12]
 80099e4:	f7ff fef5 	bl	80097d2 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
 80099e8:	2100      	movs	r1, #0
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7ff fee0 	bl	80097b0 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80099f0:	7abb      	ldrb	r3, [r7, #10]
 80099f2:	4619      	mov	r1, r3
 80099f4:	68f8      	ldr	r0, [r7, #12]
 80099f6:	f7ff fedb 	bl	80097b0 <u8x8_byte_SendByte>
      in_transfer = 1;
 80099fa:	4b2a      	ldr	r3, [pc, #168]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	701a      	strb	r2, [r3, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
 8009a00:	e04a      	b.n	8009a98 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
 8009a02:	7abb      	ldrb	r3, [r7, #10]
 8009a04:	4619      	mov	r1, r3
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f7ff fed2 	bl	80097b0 <u8x8_byte_SendByte>
      break;      
 8009a0c:	e044      	b.n	8009a98 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
 8009a0e:	4b25      	ldr	r3, [pc, #148]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <u8x8_cad_ssd13xx_fast_i2c+0x80>
	u8x8_byte_EndTransfer(u8x8); 
 8009a16:	68f8      	ldr	r0, [r7, #12]
 8009a18:	f7ff feeb 	bl	80097f2 <u8x8_byte_EndTransfer>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8009a20:	e00a      	b.n	8009a38 <u8x8_cad_ssd13xx_fast_i2c+0x9c>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8009a22:	697a      	ldr	r2, [r7, #20]
 8009a24:	2118      	movs	r1, #24
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff ff9c 	bl	8009964 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8009a2c:	7abb      	ldrb	r3, [r7, #10]
 8009a2e:	3b18      	subs	r3, #24
 8009a30:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	3318      	adds	r3, #24
 8009a36:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8009a38:	7abb      	ldrb	r3, [r7, #10]
 8009a3a:	2b18      	cmp	r3, #24
 8009a3c:	d8f1      	bhi.n	8009a22 <u8x8_cad_ssd13xx_fast_i2c+0x86>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8009a3e:	7abb      	ldrb	r3, [r7, #10]
 8009a40:	697a      	ldr	r2, [r7, #20]
 8009a42:	4619      	mov	r1, r3
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7ff ff8d 	bl	8009964 <u8x8_i2c_data_transfer>
      in_transfer = 0;
 8009a4a:	4b16      	ldr	r3, [pc, #88]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	701a      	strb	r2, [r3, #0]
      break;
 8009a50:	e022      	b.n	8009a98 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a58:	2bff      	cmp	r3, #255	; 0xff
 8009a5a:	d103      	bne.n	8009a64 <u8x8_cad_ssd13xx_fast_i2c+0xc8>
	u8x8->i2c_address = 0x078;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	2278      	movs	r2, #120	; 0x78
 8009a60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	691c      	ldr	r4, [r3, #16]
 8009a68:	7aba      	ldrb	r2, [r7, #10]
 8009a6a:	7af9      	ldrb	r1, [r7, #11]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	47a0      	blx	r4
 8009a72:	4603      	mov	r3, r0
 8009a74:	e011      	b.n	8009a9a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
 8009a76:	4b0b      	ldr	r3, [pc, #44]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	701a      	strb	r2, [r3, #0]
      break;
 8009a7c:	e00c      	b.n	8009a98 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8009a80:	781b      	ldrb	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d002      	beq.n	8009a8c <u8x8_cad_ssd13xx_fast_i2c+0xf0>
	u8x8_byte_EndTransfer(u8x8); 
 8009a86:	68f8      	ldr	r0, [r7, #12]
 8009a88:	f7ff feb3 	bl	80097f2 <u8x8_byte_EndTransfer>
      in_transfer = 0;
 8009a8c:	4b05      	ldr	r3, [pc, #20]	; (8009aa4 <u8x8_cad_ssd13xx_fast_i2c+0x108>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	701a      	strb	r2, [r3, #0]
      break;
 8009a92:	e001      	b.n	8009a98 <u8x8_cad_ssd13xx_fast_i2c+0xfc>
    default:
      return 0;
 8009a94:	2300      	movs	r3, #0
 8009a96:	e000      	b.n	8009a9a <u8x8_cad_ssd13xx_fast_i2c+0xfe>
  }
  return 1;
 8009a98:	2301      	movs	r3, #1
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	20000bf0 	.word	0x20000bf0

08009aa8 <u8x8_d_ssd1306_128x32_generic>:
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_128x32_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	607b      	str	r3, [r7, #4]
 8009ab2:	460b      	mov	r3, r1
 8009ab4:	72fb      	strb	r3, [r7, #11]
 8009ab6:	4613      	mov	r3, r2
 8009ab8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8009aba:	7afb      	ldrb	r3, [r7, #11]
 8009abc:	3b0a      	subs	r3, #10
 8009abe:	2b05      	cmp	r3, #5
 8009ac0:	f200 8090 	bhi.w	8009be4 <u8x8_d_ssd1306_128x32_generic+0x13c>
 8009ac4:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <u8x8_d_ssd1306_128x32_generic+0x24>)
 8009ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aca:	bf00      	nop
 8009acc:	08009ae5 	.word	0x08009ae5
 8009ad0:	08009af5 	.word	0x08009af5
 8009ad4:	08009be5 	.word	0x08009be5
 8009ad8:	08009b0f 	.word	0x08009b0f
 8009adc:	08009b41 	.word	0x08009b41
 8009ae0:	08009b61 	.word	0x08009b61
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
      break;
    */
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 f8c3 	bl	8009c70 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_init_seq);    
 8009aea:	4942      	ldr	r1, [pc, #264]	; (8009bf4 <u8x8_d_ssd1306_128x32_generic+0x14c>)
 8009aec:	68f8      	ldr	r0, [r7, #12]
 8009aee:	f7ff fee7 	bl	80098c0 <u8x8_cad_SendSequence>
      break;
 8009af2:	e079      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8009af4:	7abb      	ldrb	r3, [r7, #10]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d104      	bne.n	8009b04 <u8x8_d_ssd1306_128x32_generic+0x5c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave0_seq);
 8009afa:	493f      	ldr	r1, [pc, #252]	; (8009bf8 <u8x8_d_ssd1306_128x32_generic+0x150>)
 8009afc:	68f8      	ldr	r0, [r7, #12]
 8009afe:	f7ff fedf 	bl	80098c0 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
      break;
 8009b02:	e071      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_powersave1_seq);
 8009b04:	493d      	ldr	r1, [pc, #244]	; (8009bfc <u8x8_d_ssd1306_128x32_generic+0x154>)
 8009b06:	68f8      	ldr	r0, [r7, #12]
 8009b08:	f7ff feda 	bl	80098c0 <u8x8_cad_SendSequence>
      break;
 8009b0c:	e06c      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8009b0e:	7abb      	ldrb	r3, [r7, #10]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d10a      	bne.n	8009b2a <u8x8_d_ssd1306_128x32_generic+0x82>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip0_seq);
 8009b14:	493a      	ldr	r1, [pc, #232]	; (8009c00 <u8x8_d_ssd1306_128x32_generic+0x158>)
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fed2 	bl	80098c0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	7c9a      	ldrb	r2, [r3, #18]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8009b28:	e05e      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x32_univision_flip1_seq);
 8009b2a:	4936      	ldr	r1, [pc, #216]	; (8009c04 <u8x8_d_ssd1306_128x32_generic+0x15c>)
 8009b2c:	68f8      	ldr	r0, [r7, #12]
 8009b2e:	f7ff fec7 	bl	80098c0 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	7cda      	ldrb	r2, [r3, #19]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8009b3e:	e053      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8009b40:	68f8      	ldr	r0, [r7, #12]
 8009b42:	f7ff fe9d 	bl	8009880 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8009b46:	2181      	movs	r1, #129	; 0x81
 8009b48:	68f8      	ldr	r0, [r7, #12]
 8009b4a:	f7ff fe62 	bl	8009812 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
 8009b4e:	7abb      	ldrb	r3, [r7, #10]
 8009b50:	4619      	mov	r1, r3
 8009b52:	68f8      	ldr	r0, [r7, #12]
 8009b54:	f7ff fe6f 	bl	8009836 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	f7ff fea1 	bl	80098a0 <u8x8_cad_EndTransfer>
      break;
 8009b5e:	e043      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8009b60:	68f8      	ldr	r0, [r7, #12]
 8009b62:	f7ff fe8d 	bl	8009880 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	795b      	ldrb	r3, [r3, #5]
 8009b6a:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8009b6c:	7dfb      	ldrb	r3, [r7, #23]
 8009b6e:	00db      	lsls	r3, r3, #3
 8009b70:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8009b78:	7dfb      	ldrb	r3, [r7, #23]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	75fb      	strb	r3, [r7, #23]
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8009b7e:	7dfb      	ldrb	r3, [r7, #23]
 8009b80:	091b      	lsrs	r3, r3, #4
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	f043 0310 	orr.w	r3, r3, #16
 8009b88:	b2db      	uxtb	r3, r3
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f7ff fe40 	bl	8009812 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 8009b92:	7dfb      	ldrb	r3, [r7, #23]
 8009b94:	f003 030f 	and.w	r3, r3, #15
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	4619      	mov	r1, r3
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f7ff fe38 	bl	8009812 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	799b      	ldrb	r3, [r3, #6]
 8009ba6:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	4619      	mov	r1, r3
 8009bae:	68f8      	ldr	r0, [r7, #12]
 8009bb0:	f7ff fe2f 	bl	8009812 <u8x8_cad_SendCmd>
      
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	791b      	ldrb	r3, [r3, #4]
 8009bb8:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8009bc0:	7dbb      	ldrb	r3, [r7, #22]
 8009bc2:	00db      	lsls	r3, r3, #3
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	693a      	ldr	r2, [r7, #16]
 8009bc8:	4619      	mov	r1, r3
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f7ff fe45 	bl	800985a <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8009bd0:	7abb      	ldrb	r3, [r7, #10]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8009bd6:	7abb      	ldrb	r3, [r7, #10]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1eb      	bne.n	8009bb4 <u8x8_d_ssd1306_128x32_generic+0x10c>
      
      u8x8_cad_EndTransfer(u8x8);
 8009bdc:	68f8      	ldr	r0, [r7, #12]
 8009bde:	f7ff fe5f 	bl	80098a0 <u8x8_cad_EndTransfer>
      break;
 8009be2:	e001      	b.n	8009be8 <u8x8_d_ssd1306_128x32_generic+0x140>
    default:
      return 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	e000      	b.n	8009bea <u8x8_d_ssd1306_128x32_generic+0x142>
  }
  return 1;
 8009be8:	2301      	movs	r3, #1
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3718      	adds	r7, #24
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	0801d304 	.word	0x0801d304
 8009bf8:	0801d33c 	.word	0x0801d33c
 8009bfc:	0801d344 	.word	0x0801d344
 8009c00:	0801d34c 	.word	0x0801d34c
 8009c04:	0801d354 	.word	0x0801d354

08009c08 <u8x8_d_ssd1306_128x32_univision>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 32
};

uint8_t u8x8_d_ssd1306_128x32_univision(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	60f8      	str	r0, [r7, #12]
 8009c10:	607b      	str	r3, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	72fb      	strb	r3, [r7, #11]
 8009c16:	4613      	mov	r3, r2
 8009c18:	72bb      	strb	r3, [r7, #10]
    if ( msg == U8X8_MSG_DISPLAY_SETUP_MEMORY )
 8009c1a:	7afb      	ldrb	r3, [r7, #11]
 8009c1c:	2b09      	cmp	r3, #9
 8009c1e:	d105      	bne.n	8009c2c <u8x8_d_ssd1306_128x32_univision+0x24>
    {
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x32_univision_display_info);
 8009c20:	4908      	ldr	r1, [pc, #32]	; (8009c44 <u8x8_d_ssd1306_128x32_univision+0x3c>)
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f000 f810 	bl	8009c48 <u8x8_d_helper_display_setup_memory>
      return 1;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e006      	b.n	8009c3a <u8x8_d_ssd1306_128x32_univision+0x32>
    }
    return u8x8_d_ssd1306_128x32_generic(u8x8, msg, arg_int, arg_ptr);
 8009c2c:	7aba      	ldrb	r2, [r7, #10]
 8009c2e:	7af9      	ldrb	r1, [r7, #11]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	68f8      	ldr	r0, [r7, #12]
 8009c34:	f7ff ff38 	bl	8009aa8 <u8x8_d_ssd1306_128x32_generic>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	0801d35c 	.word	0x0801d35c

08009c48 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b083      	sub	sp, #12
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
 8009c50:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	683a      	ldr	r2, [r7, #0]
 8009c56:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	7c9a      	ldrb	r2, [r3, #18]
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8009c70:	b590      	push	{r4, r7, lr}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	695c      	ldr	r4, [r3, #20]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	2200      	movs	r2, #0
 8009c80:	2128      	movs	r1, #40	; 0x28
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	68dc      	ldr	r4, [r3, #12]
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2114      	movs	r1, #20
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8009c94:	2201      	movs	r2, #1
 8009c96:	214b      	movs	r1, #75	; 0x4b
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f886 	bl	8009daa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	791b      	ldrb	r3, [r3, #4]
 8009ca4:	461a      	mov	r2, r3
 8009ca6:	2129      	movs	r1, #41	; 0x29
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 f87e 	bl	8009daa <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8009cae:	2200      	movs	r2, #0
 8009cb0:	214b      	movs	r1, #75	; 0x4b
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f000 f879 	bl	8009daa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	791b      	ldrb	r3, [r3, #4]
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	2129      	movs	r1, #41	; 0x29
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f871 	bl	8009daa <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8009cc8:	2201      	movs	r2, #1
 8009cca:	214b      	movs	r1, #75	; 0x4b
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f86c 	bl	8009daa <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	795b      	ldrb	r3, [r3, #5]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	2129      	movs	r1, #41	; 0x29
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 f864 	bl	8009daa <u8x8_gpio_call>
}    
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd90      	pop	{r4, r7, pc}

08009cea <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8009cea:	b590      	push	{r4, r7, lr}
 8009cec:	b085      	sub	sp, #20
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	461a      	mov	r2, r3
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	70fb      	strb	r3, [r7, #3]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70bb      	strb	r3, [r7, #2]
 8009d00:	4613      	mov	r3, r2
 8009d02:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8009d08:	78bb      	ldrb	r3, [r7, #2]
 8009d0a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8009d0c:	787b      	ldrb	r3, [r7, #1]
 8009d0e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8009d10:	6a3b      	ldr	r3, [r7, #32]
 8009d12:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	689c      	ldr	r4, [r3, #8]
 8009d18:	f107 0308 	add.w	r3, r7, #8
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	210f      	movs	r1, #15
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	47a0      	blx	r4
 8009d24:	4603      	mov	r3, r0
}
 8009d26:	4618      	mov	r0, r3
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd90      	pop	{r4, r7, pc}

08009d2e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8009d2e:	b590      	push	{r4, r7, lr}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689c      	ldr	r4, [r3, #8]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	2109      	movs	r1, #9
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	47a0      	blx	r4
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd90      	pop	{r4, r7, pc}

08009d4c <u8x8_InitDisplay>:

void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	689c      	ldr	r4, [r3, #8]
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	210a      	movs	r1, #10
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	47a0      	blx	r4
}
 8009d62:	bf00      	nop
 8009d64:	370c      	adds	r7, #12
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd90      	pop	{r4, r7, pc}

08009d6a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8009d6a:	b590      	push	{r4, r7, lr}
 8009d6c:	b083      	sub	sp, #12
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	6078      	str	r0, [r7, #4]
 8009d72:	460b      	mov	r3, r1
 8009d74:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	689c      	ldr	r4, [r3, #8]
 8009d7a:	78fa      	ldrb	r2, [r7, #3]
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	210b      	movs	r1, #11
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	47a0      	blx	r4
}
 8009d84:	bf00      	nop
 8009d86:	370c      	adds	r7, #12
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd90      	pop	{r4, r7, pc}

08009d8c <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689c      	ldr	r4, [r3, #8]
 8009d98:	2300      	movs	r3, #0
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2110      	movs	r1, #16
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	47a0      	blx	r4
}
 8009da2:	bf00      	nop
 8009da4:	370c      	adds	r7, #12
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd90      	pop	{r4, r7, pc}

08009daa <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8009daa:	b590      	push	{r4, r7, lr}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
 8009db6:	4613      	mov	r3, r2
 8009db8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	695c      	ldr	r4, [r3, #20]
 8009dbe:	78ba      	ldrb	r2, [r7, #2]
 8009dc0:	78f9      	ldrb	r1, [r7, #3]
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	47a0      	blx	r4
}
 8009dc8:	bf00      	nop
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd90      	pop	{r4, r7, pc}

08009dd0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b085      	sub	sp, #20
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	607b      	str	r3, [r7, #4]
 8009dda:	460b      	mov	r3, r1
 8009ddc:	72fb      	strb	r3, [r7, #11]
 8009dde:	4613      	mov	r3, r2
 8009de0:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a13      	ldr	r2, [pc, #76]	; (8009e50 <u8x8_SetupDefaults+0x60>)
 8009e02:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a12      	ldr	r2, [pc, #72]	; (8009e50 <u8x8_SetupDefaults+0x60>)
 8009e08:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a10      	ldr	r2, [pc, #64]	; (8009e50 <u8x8_SetupDefaults+0x60>)
 8009e0e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	4a0f      	ldr	r2, [pc, #60]	; (8009e50 <u8x8_SetupDefaults+0x60>)
 8009e14:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    u8x8->device_address = 0;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	2200      	movs	r2, #0
 8009e22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	2200      	movs	r2, #0
 8009e2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
    u8x8->bus_clock = 0;		/* issue 769 */
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2200      	movs	r2, #0
 8009e32:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	22ff      	movs	r2, #255	; 0xff
 8009e38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	22ff      	movs	r2, #255	; 0xff
 8009e40:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	08009dd1 	.word	0x08009dd1

08009e54 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
 8009e60:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8009e62:	68f8      	ldr	r0, [r7, #12]
 8009e64:	f7ff ffc4 	bl	8009df0 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	68ba      	ldr	r2, [r7, #8]
 8009e6c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	69ba      	ldr	r2, [r7, #24]
 8009e7e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f7ff ff54 	bl	8009d2e <u8x8_SetupMemory>
}
 8009e86:	bf00      	nop
 8009e88:	3710      	adds	r7, #16
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
	...

08009e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b082      	sub	sp, #8
 8009e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009e96:	4b14      	ldr	r3, [pc, #80]	; (8009ee8 <MX_DMA_Init+0x58>)
 8009e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9a:	4a13      	ldr	r2, [pc, #76]	; (8009ee8 <MX_DMA_Init+0x58>)
 8009e9c:	f043 0301 	orr.w	r3, r3, #1
 8009ea0:	6493      	str	r3, [r2, #72]	; 0x48
 8009ea2:	4b11      	ldr	r3, [pc, #68]	; (8009ee8 <MX_DMA_Init+0x58>)
 8009ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ea6:	f003 0301 	and.w	r3, r3, #1
 8009eaa:	607b      	str	r3, [r7, #4]
 8009eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	2100      	movs	r1, #0
 8009eb2:	200d      	movs	r0, #13
 8009eb4:	f002 f807 	bl	800bec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8009eb8:	200d      	movs	r0, #13
 8009eba:	f002 f820 	bl	800befe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	200f      	movs	r0, #15
 8009ec4:	f001 ffff 	bl	800bec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8009ec8:	200f      	movs	r0, #15
 8009eca:	f002 f818 	bl	800befe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8009ece:	2200      	movs	r2, #0
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	2010      	movs	r0, #16
 8009ed4:	f001 fff7 	bl	800bec6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8009ed8:	2010      	movs	r0, #16
 8009eda:	f002 f810 	bl	800befe <HAL_NVIC_EnableIRQ>

}
 8009ede:	bf00      	nop
 8009ee0:	3708      	adds	r7, #8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	40021000 	.word	0x40021000

08009eec <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b08a      	sub	sp, #40	; 0x28
 8009ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ef2:	f107 0314 	add.w	r3, r7, #20
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	601a      	str	r2, [r3, #0]
 8009efa:	605a      	str	r2, [r3, #4]
 8009efc:	609a      	str	r2, [r3, #8]
 8009efe:	60da      	str	r2, [r3, #12]
 8009f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009f02:	4b6d      	ldr	r3, [pc, #436]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f06:	4a6c      	ldr	r2, [pc, #432]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f08:	f043 0304 	orr.w	r3, r3, #4
 8009f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f0e:	4b6a      	ldr	r3, [pc, #424]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f12:	f003 0304 	and.w	r3, r3, #4
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009f1a:	4b67      	ldr	r3, [pc, #412]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1e:	4a66      	ldr	r2, [pc, #408]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f26:	4b64      	ldr	r3, [pc, #400]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f32:	4b61      	ldr	r3, [pc, #388]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f36:	4a60      	ldr	r2, [pc, #384]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f38:	f043 0301 	orr.w	r3, r3, #1
 8009f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f3e:	4b5e      	ldr	r3, [pc, #376]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f42:	f003 0301 	and.w	r3, r3, #1
 8009f46:	60bb      	str	r3, [r7, #8]
 8009f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f4a:	4b5b      	ldr	r3, [pc, #364]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f4e:	4a5a      	ldr	r2, [pc, #360]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f50:	f043 0302 	orr.w	r3, r3, #2
 8009f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f56:	4b58      	ldr	r3, [pc, #352]	; (800a0b8 <MX_GPIO_Init+0x1cc>)
 8009f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f5a:	f003 0302 	and.w	r3, r3, #2
 8009f5e:	607b      	str	r3, [r7, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RST_GPIO_Port, OLED_RST_Pin, GPIO_PIN_RESET);
 8009f62:	2200      	movs	r2, #0
 8009f64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f68:	4854      	ldr	r0, [pc, #336]	; (800a0bc <MX_GPIO_Init+0x1d0>)
 8009f6a:	f002 ff3d 	bl	800cde8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MOTOR_WU_Pin|GAZ_WU_Pin|DWM_RST_Pin, GPIO_PIN_RESET);
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f44f 71c4 	mov.w	r1, #392	; 0x188
 8009f74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009f78:	f002 ff36 	bl	800cde8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_WU_Pin|LORA_WU_Pin|DWM_WU_Pin|DONE_2_Pin
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	f248 013d 	movw	r1, #32829	; 0x803d
 8009f82:	484f      	ldr	r0, [pc, #316]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 8009f84:	f002 ff30 	bl	800cde8 <HAL_GPIO_WritePin>
                          |DONE_1_Pin|CHA_ISEL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPS_RST_Pin|OLED_WU_Pin, GPIO_PIN_SET);
 8009f88:	2201      	movs	r2, #1
 8009f8a:	f241 0102 	movw	r1, #4098	; 0x1002
 8009f8e:	484c      	ldr	r0, [pc, #304]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 8009f90:	f002 ff2a 	bl	800cde8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OLED_RST_Pin;
 8009f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009f98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_RST_GPIO_Port, &GPIO_InitStruct);
 8009fa6:	f107 0314 	add.w	r3, r7, #20
 8009faa:	4619      	mov	r1, r3
 8009fac:	4843      	ldr	r0, [pc, #268]	; (800a0bc <MX_GPIO_Init+0x1d0>)
 8009fae:	f002 fcaf 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009fb2:	2333      	movs	r3, #51	; 0x33
 8009fb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fbe:	f107 0314 	add.w	r3, r7, #20
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fc8:	f002 fca2 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = MOTOR_WU_Pin|GAZ_WU_Pin;
 8009fcc:	2388      	movs	r3, #136	; 0x88
 8009fce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fdc:	f107 0314 	add.w	r3, r7, #20
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009fe6:	f002 fc93 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_WU_Pin|LORA_WU_Pin;
 8009fea:	2305      	movs	r3, #5
 8009fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8009ff2:	2302      	movs	r3, #2
 8009ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ffa:	f107 0314 	add.w	r3, r7, #20
 8009ffe:	4619      	mov	r1, r3
 800a000:	482f      	ldr	r0, [pc, #188]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 800a002:	f002 fc85 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = GPS_RST_Pin|OLED_WU_Pin;
 800a006:	f241 0302 	movw	r3, #4098	; 0x1002
 800a00a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a00c:	2301      	movs	r3, #1
 800a00e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a010:	2301      	movs	r3, #1
 800a012:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a014:	2300      	movs	r3, #0
 800a016:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a018:	f107 0314 	add.w	r3, r7, #20
 800a01c:	4619      	mov	r1, r3
 800a01e:	4828      	ldr	r0, [pc, #160]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 800a020:	f002 fc76 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DWM_WU_Pin|DONE_2_Pin|DONE_1_Pin;
 800a024:	f248 0318 	movw	r3, #32792	; 0x8018
 800a028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a02a:	2301      	movs	r3, #1
 800a02c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a032:	2300      	movs	r3, #0
 800a034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a036:	f107 0314 	add.w	r3, r7, #20
 800a03a:	4619      	mov	r1, r3
 800a03c:	4820      	ldr	r0, [pc, #128]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 800a03e:	f002 fc67 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DWM_RST_Pin;
 800a042:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a048:	2301      	movs	r3, #1
 800a04a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a04c:	2302      	movs	r3, #2
 800a04e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a050:	2300      	movs	r3, #0
 800a052:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DWM_RST_GPIO_Port, &GPIO_InitStruct);
 800a054:	f107 0314 	add.w	r3, r7, #20
 800a058:	4619      	mov	r1, r3
 800a05a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a05e:	f002 fc57 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CHA_ISEL_Pin;
 800a062:	2320      	movs	r3, #32
 800a064:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a066:	2301      	movs	r3, #1
 800a068:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a06a:	2300      	movs	r3, #0
 800a06c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a06e:	2302      	movs	r3, #2
 800a070:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CHA_ISEL_GPIO_Port, &GPIO_InitStruct);
 800a072:	f107 0314 	add.w	r3, r7, #20
 800a076:	4619      	mov	r1, r3
 800a078:	4811      	ldr	r0, [pc, #68]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 800a07a:	f002 fc49 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a07e:	2308      	movs	r3, #8
 800a080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a082:	2303      	movs	r3, #3
 800a084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a086:	2300      	movs	r3, #0
 800a088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800a08a:	f107 0314 	add.w	r3, r7, #20
 800a08e:	4619      	mov	r1, r3
 800a090:	480c      	ldr	r0, [pc, #48]	; (800a0c4 <MX_GPIO_Init+0x1d8>)
 800a092:	f002 fc3d 	bl	800c910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BP_ON_Pin|BP_SOS_Pin;
 800a096:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a09a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a09c:	2300      	movs	r3, #0
 800a09e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0a4:	f107 0314 	add.w	r3, r7, #20
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4805      	ldr	r0, [pc, #20]	; (800a0c0 <MX_GPIO_Init+0x1d4>)
 800a0ac:	f002 fc30 	bl	800c910 <HAL_GPIO_Init>

}
 800a0b0:	bf00      	nop
 800a0b2:	3728      	adds	r7, #40	; 0x28
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	40021000 	.word	0x40021000
 800a0bc:	48000800 	.word	0x48000800
 800a0c0:	48000400 	.word	0x48000400
 800a0c4:	48001c00 	.word	0x48001c00

0800a0c8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800a0c8:	b580      	push	{r7, lr}
 800a0ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a0cc:	4b1b      	ldr	r3, [pc, #108]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0ce:	4a1c      	ldr	r2, [pc, #112]	; (800a140 <MX_I2C1_Init+0x78>)
 800a0d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800a0d2:	4b1a      	ldr	r3, [pc, #104]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0d4:	4a1b      	ldr	r2, [pc, #108]	; (800a144 <MX_I2C1_Init+0x7c>)
 800a0d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a0d8:	4b18      	ldr	r3, [pc, #96]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0da:	2200      	movs	r2, #0
 800a0dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a0de:	4b17      	ldr	r3, [pc, #92]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a0e4:	4b15      	ldr	r3, [pc, #84]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a0ea:	4b14      	ldr	r3, [pc, #80]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a0f0:	4b12      	ldr	r3, [pc, #72]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a0f6:	4b11      	ldr	r3, [pc, #68]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a0fc:	4b0f      	ldr	r3, [pc, #60]	; (800a13c <MX_I2C1_Init+0x74>)
 800a0fe:	2200      	movs	r2, #0
 800a100:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a102:	480e      	ldr	r0, [pc, #56]	; (800a13c <MX_I2C1_Init+0x74>)
 800a104:	f002 fe88 	bl	800ce18 <HAL_I2C_Init>
 800a108:	4603      	mov	r3, r0
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d001      	beq.n	800a112 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a10e:	f001 f87d 	bl	800b20c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a112:	2100      	movs	r1, #0
 800a114:	4809      	ldr	r0, [pc, #36]	; (800a13c <MX_I2C1_Init+0x74>)
 800a116:	f003 fc4d 	bl	800d9b4 <HAL_I2CEx_ConfigAnalogFilter>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a120:	f001 f874 	bl	800b20c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a124:	2100      	movs	r1, #0
 800a126:	4805      	ldr	r0, [pc, #20]	; (800a13c <MX_I2C1_Init+0x74>)
 800a128:	f003 fc8f 	bl	800da4a <HAL_I2CEx_ConfigDigitalFilter>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d001      	beq.n	800a136 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a132:	f001 f86b 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a136:	bf00      	nop
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop
 800a13c:	20001ddc 	.word	0x20001ddc
 800a140:	40005400 	.word	0x40005400
 800a144:	00303d5b 	.word	0x00303d5b

0800a148 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a14c:	4b1b      	ldr	r3, [pc, #108]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a14e:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <MX_I2C2_Init+0x78>)
 800a150:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x0010061A;
 800a152:	4b1a      	ldr	r3, [pc, #104]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a154:	4a1b      	ldr	r2, [pc, #108]	; (800a1c4 <MX_I2C2_Init+0x7c>)
 800a156:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800a158:	4b18      	ldr	r3, [pc, #96]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a15a:	2200      	movs	r2, #0
 800a15c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a15e:	4b17      	ldr	r3, [pc, #92]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a160:	2201      	movs	r2, #1
 800a162:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a164:	4b15      	ldr	r3, [pc, #84]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a166:	2200      	movs	r2, #0
 800a168:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800a16a:	4b14      	ldr	r3, [pc, #80]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a16c:	2200      	movs	r2, #0
 800a16e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a170:	4b12      	ldr	r3, [pc, #72]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a172:	2200      	movs	r2, #0
 800a174:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a176:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a178:	2200      	movs	r2, #0
 800a17a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a17c:	4b0f      	ldr	r3, [pc, #60]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a17e:	2200      	movs	r2, #0
 800a180:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a182:	480e      	ldr	r0, [pc, #56]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a184:	f002 fe48 	bl	800ce18 <HAL_I2C_Init>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d001      	beq.n	800a192 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800a18e:	f001 f83d 	bl	800b20c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a192:	2100      	movs	r1, #0
 800a194:	4809      	ldr	r0, [pc, #36]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a196:	f003 fc0d 	bl	800d9b4 <HAL_I2CEx_ConfigAnalogFilter>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800a1a0:	f001 f834 	bl	800b20c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a1a4:	2100      	movs	r1, #0
 800a1a6:	4805      	ldr	r0, [pc, #20]	; (800a1bc <MX_I2C2_Init+0x74>)
 800a1a8:	f003 fc4f 	bl	800da4a <HAL_I2CEx_ConfigDigitalFilter>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d001      	beq.n	800a1b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800a1b2:	f001 f82b 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a1b6:	bf00      	nop
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20001d90 	.word	0x20001d90
 800a1c0:	40005800 	.word	0x40005800
 800a1c4:	0010061a 	.word	0x0010061a

0800a1c8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08c      	sub	sp, #48	; 0x30
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1d0:	f107 031c 	add.w	r3, r7, #28
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	601a      	str	r2, [r3, #0]
 800a1d8:	605a      	str	r2, [r3, #4]
 800a1da:	609a      	str	r2, [r3, #8]
 800a1dc:	60da      	str	r2, [r3, #12]
 800a1de:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a2e      	ldr	r2, [pc, #184]	; (800a2a0 <HAL_I2C_MspInit+0xd8>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d128      	bne.n	800a23c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a1ea:	4b2e      	ldr	r3, [pc, #184]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1ee:	4a2d      	ldr	r2, [pc, #180]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a1f0:	f043 0302 	orr.w	r3, r3, #2
 800a1f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a1f6:	4b2b      	ldr	r3, [pc, #172]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	61bb      	str	r3, [r7, #24]
 800a200:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL1_Pin|SDA1_Pin;
 800a202:	23c0      	movs	r3, #192	; 0xc0
 800a204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a206:	2312      	movs	r3, #18
 800a208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a20a:	2301      	movs	r3, #1
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a20e:	2303      	movs	r3, #3
 800a210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a212:	2304      	movs	r3, #4
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a216:	f107 031c 	add.w	r3, r7, #28
 800a21a:	4619      	mov	r1, r3
 800a21c:	4822      	ldr	r0, [pc, #136]	; (800a2a8 <HAL_I2C_MspInit+0xe0>)
 800a21e:	f002 fb77 	bl	800c910 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a222:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a226:	4a1f      	ldr	r2, [pc, #124]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a22c:	6593      	str	r3, [r2, #88]	; 0x58
 800a22e:	4b1d      	ldr	r3, [pc, #116]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a23a:	e02d      	b.n	800a298 <HAL_I2C_MspInit+0xd0>
  else if(i2cHandle->Instance==I2C2)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a1a      	ldr	r2, [pc, #104]	; (800a2ac <HAL_I2C_MspInit+0xe4>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d128      	bne.n	800a298 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a246:	4b17      	ldr	r3, [pc, #92]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a24a:	4a16      	ldr	r2, [pc, #88]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a24c:	f043 0302 	orr.w	r3, r3, #2
 800a250:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a252:	4b14      	ldr	r3, [pc, #80]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	f003 0302 	and.w	r3, r3, #2
 800a25a:	613b      	str	r3, [r7, #16]
 800a25c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SCL2_OLED_Pin|SDA2_OLED_Pin;
 800a25e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800a262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a264:	2312      	movs	r3, #18
 800a266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a268:	2301      	movs	r3, #1
 800a26a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a26c:	2303      	movs	r3, #3
 800a26e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a270:	2304      	movs	r3, #4
 800a272:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a274:	f107 031c 	add.w	r3, r7, #28
 800a278:	4619      	mov	r1, r3
 800a27a:	480b      	ldr	r0, [pc, #44]	; (800a2a8 <HAL_I2C_MspInit+0xe0>)
 800a27c:	f002 fb48 	bl	800c910 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a280:	4b08      	ldr	r3, [pc, #32]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a284:	4a07      	ldr	r2, [pc, #28]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a286:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a28a:	6593      	str	r3, [r2, #88]	; 0x58
 800a28c:	4b05      	ldr	r3, [pc, #20]	; (800a2a4 <HAL_I2C_MspInit+0xdc>)
 800a28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a290:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a294:	60fb      	str	r3, [r7, #12]
 800a296:	68fb      	ldr	r3, [r7, #12]
}
 800a298:	bf00      	nop
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	40005400 	.word	0x40005400
 800a2a4:	40021000 	.word	0x40021000
 800a2a8:	48000400 	.word	0x48000400
 800a2ac:	40005800 	.word	0x40005800

0800a2b0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <MX_IWDG_Init+0x34>)
 800a2b6:	4a0c      	ldr	r2, [pc, #48]	; (800a2e8 <MX_IWDG_Init+0x38>)
 800a2b8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_128;
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <MX_IWDG_Init+0x34>)
 800a2bc:	2205      	movs	r2, #5
 800a2be:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800a2c0:	4b08      	ldr	r3, [pc, #32]	; (800a2e4 <MX_IWDG_Init+0x34>)
 800a2c2:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a2c6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3750;
 800a2c8:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <MX_IWDG_Init+0x34>)
 800a2ca:	f640 62a6 	movw	r2, #3750	; 0xea6
 800a2ce:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800a2d0:	4804      	ldr	r0, [pc, #16]	; (800a2e4 <MX_IWDG_Init+0x34>)
 800a2d2:	f003 fc06 	bl	800dae2 <HAL_IWDG_Init>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d001      	beq.n	800a2e0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 800a2dc:	f000 ff96 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800a2e0:	bf00      	nop
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	20001e28 	.word	0x20001e28
 800a2e8:	40003000 	.word	0x40003000

0800a2ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	ed2d 8b02 	vpush	{d8}
 800a2f2:	b0f2      	sub	sp, #456	; 0x1c8
 800a2f4:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	//EE_Status ee_status = EE_OK;
	int powersave = 0;
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

	uint32_t upperLedTab[LTAB + 2]; // Tab[0]  <= 1 for ON or 0 for OFF
	upperLedTab[LTABD + 1] = 20;		// dt1 before task 1
 800a2fc:	2314      	movs	r3, #20
 800a2fe:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
	upperLedTab[LTABD + 2] = 9980;	// dt2 after	task 1
 800a302:	f242 63fc 	movw	r3, #9980	; 0x26fc
 800a306:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
	InitTaskState(upperLedTab, 2);
 800a30a:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800a30e:	2102      	movs	r1, #2
 800a310:	4618      	mov	r0, r3
 800a312:	f7fa fb35 	bl	8004980 <InitTaskState>

	uint32_t sosTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	sosTab[LTABD + 1] = 10;		// dt1 before task 1
 800a316:	230a      	movs	r3, #10
 800a318:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	InitTaskState(sosTab, 1);
 800a31c:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 800a320:	2101      	movs	r1, #1
 800a322:	4618      	mov	r0, r3
 800a324:	f7fa fb2c 	bl	8004980 <InitTaskState>

	// for REGAZ
	uint32_t ScreenTab[LTAB + 3]; // Tab[0] <= 1 for ON or 0 for OFF
	ScreenTab[LTABD + 1] = 50;	 // dt1 before task 1
 800a328:	2332      	movs	r3, #50	; 0x32
 800a32a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	ScreenTab[LTABD + 2] = 300;	 // dt1 before task 2
 800a32e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800a332:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	ScreenTab[LTABD + 3] = 50;	 // dt1 before task 3
 800a336:	2332      	movs	r3, #50	; 0x32
 800a338:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
	InitTaskState(ScreenTab, 3);
 800a33c:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a340:	2103      	movs	r1, #3
 800a342:	4618      	mov	r0, r3
 800a344:	f7fa fb1c 	bl	8004980 <InitTaskState>

	uint32_t BatTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	BatTab[LTABD + 1] = 5000;		 // dt1 before task 1
 800a348:	f241 3388 	movw	r3, #5000	; 0x1388
 800a34c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	InitTaskState(BatTab, 1);
 800a350:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800a354:	2101      	movs	r1, #1
 800a356:	4618      	mov	r0, r3
 800a358:	f7fa fb12 	bl	8004980 <InitTaskState>

	uint32_t chargerTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	chargerTab[LTABD + 1] = 500;		// dt1 before task 1     // EJ : was 500
 800a35c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800a360:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	InitTaskState(chargerTab, 1);
 800a364:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800a368:	2101      	movs	r1, #1
 800a36a:	4618      	mov	r0, r3
 800a36c:	f7fa fb08 	bl	8004980 <InitTaskState>

	uint32_t updateLedTab[LTAB + 1]; // Tab[0] <= 1 for ON or 0 for OFF
	updateLedTab[LTABD + 1] = 100;	 // dt1 before task 1
 800a370:	2364      	movs	r3, #100	; 0x64
 800a372:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	InitTaskState(updateLedTab, 1);
 800a376:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a37a:	2101      	movs	r1, #1
 800a37c:	4618      	mov	r0, r3
 800a37e:	f7fa faff 	bl	8004980 <InitTaskState>

	uint32_t Timer_screen;
	uint32_t TimerLastLoraMessage = 0;
 800a382:	2300      	movs	r3, #0
 800a384:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
	uint32_t TimerLastSigfoxMessage = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184

	/*!-----END DCO AJOUT----!*/

	/*!--------DCO AJOUT----------------!*/

	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 800a38e:	2300      	movs	r3, #0
 800a390:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800a394:	e00a      	b.n	800a3ac <main+0xc0>
	{
		TabAlert[i_fct] = 0;
 800a396:	4ab8      	ldr	r2, [pc, #736]	; (800a678 <main+0x38c>)
 800a398:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a39c:	2100      	movs	r1, #0
 800a39e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_ALERT; i_fct++)
 800a3a2:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800a3ac:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 800a3b0:	2b0d      	cmp	r3, #13
 800a3b2:	ddf0      	ble.n	800a396 <main+0xaa>
	}
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800a3ba:	e00a      	b.n	800a3d2 <main+0xe6>
	{
		TabGen[i_fct] = 0;
 800a3bc:	4aaf      	ldr	r2, [pc, #700]	; (800a67c <main+0x390>)
 800a3be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a3c2:	2100      	movs	r1, #0
 800a3c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_GEN; i_fct++)
 800a3c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a3cc:	3301      	adds	r3, #1
 800a3ce:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800a3d2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800a3d6:	2b5a      	cmp	r3, #90	; 0x5a
 800a3d8:	ddf0      	ble.n	800a3bc <main+0xd0>
	}
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800a3e0:	e00a      	b.n	800a3f8 <main+0x10c>
	{
		TabTimer[i_fct] = 0;
 800a3e2:	4aa7      	ldr	r2, [pc, #668]	; (800a680 <main+0x394>)
 800a3e4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a3e8:	2100      	movs	r1, #0
 800a3ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < NB_TIMER; i_fct++)
 800a3ee:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a3f2:	3301      	adds	r3, #1
 800a3f4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800a3f8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800a3fc:	2b05      	cmp	r3, #5
 800a3fe:	ddf0      	ble.n	800a3e2 <main+0xf6>
	}
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 800a400:	2300      	movs	r3, #0
 800a402:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800a406:	e00c      	b.n	800a422 <main+0x136>
	{
		TabFloatValue[i_fct] = 0;
 800a408:	4a9e      	ldr	r2, [pc, #632]	; (800a684 <main+0x398>)
 800a40a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4413      	add	r3, r2
 800a412:	f04f 0200 	mov.w	r2, #0
 800a416:	601a      	str	r2, [r3, #0]
	for (int i_fct = 0; i_fct < NB_FLOATVALUE; i_fct++)
 800a418:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a41c:	3301      	adds	r3, #1
 800a41e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 800a422:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800a426:	2b16      	cmp	r3, #22
 800a428:	ddee      	ble.n	800a408 <main+0x11c>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a430:	e00a      	b.n	800a448 <main+0x15c>
	{
		TabDist[i_fct] = 0;
 800a432:	4a95      	ldr	r2, [pc, #596]	; (800a688 <main+0x39c>)
 800a434:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a438:	2100      	movs	r1, #0
 800a43a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 800a43e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a442:	3301      	adds	r3, #1
 800a444:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a448:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800a44c:	2b04      	cmp	r3, #4
 800a44e:	ddf0      	ble.n	800a432 <main+0x146>
	}
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 800a450:	2300      	movs	r3, #0
 800a452:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800a456:	e00a      	b.n	800a46e <main+0x182>
	{
		Rx_bufferNemeus[i_fct] = 0;
 800a458:	4a8c      	ldr	r2, [pc, #560]	; (800a68c <main+0x3a0>)
 800a45a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a45e:	4413      	add	r3, r2
 800a460:	2200      	movs	r2, #0
 800a462:	701a      	strb	r2, [r3, #0]
	for (int i_fct = 0; i_fct < MAX_TAB_DIST; i_fct++)
 800a464:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a468:	3301      	adds	r3, #1
 800a46a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800a46e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800a472:	2b04      	cmp	r3, #4
 800a474:	ddf0      	ble.n	800a458 <main+0x16c>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800a476:	f001 fbb2 	bl	800bbde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800a47a:	f000 fd51 	bl	800af20 <SystemClock_Config>

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */

	MX_GPIO_Init();
 800a47e:	f7ff fd35 	bl	8009eec <MX_GPIO_Init>

	if (InOn() == 1 && bootloader(3) == 1)
 800a482:	f7f9 fbaf 	bl	8003be4 <InOn>
 800a486:	4603      	mov	r3, r0
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d14a      	bne.n	800a522 <main+0x236>
 800a48c:	2003      	movs	r0, #3
 800a48e:	f7f9 f82f 	bl	80034f0 <bootloader>
 800a492:	4603      	mov	r3, r0
 800a494:	2b01      	cmp	r3, #1
 800a496:	d144      	bne.n	800a522 <main+0x236>
	{
		GPIO_InitTypeDef GPIO_InitStruct =
 800a498:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	605a      	str	r2, [r3, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
 800a4a4:	60da      	str	r2, [r3, #12]
 800a4a6:	611a      	str	r2, [r3, #16]
		{ 0 };
		USB_DFU();
 800a4a8:	f00c ffbc 	bl	8017424 <USB_DFU>
		OutDone1(0); //Stop Powersave part 1
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f7f9 faa1 	bl	80039f4 <OutDone1>
		OutDone2(1); //Stop Powersave part 2
 800a4b2:	2001      	movs	r0, #1
 800a4b4:	f7f9 fab6 	bl	8003a24 <OutDone2>

		/*Configure GPIO pins : PAPin PAPin */

		LedOn(0, 0, 100, TabGen);
 800a4b8:	4b70      	ldr	r3, [pc, #448]	; (800a67c <main+0x390>)
 800a4ba:	2264      	movs	r2, #100	; 0x64
 800a4bc:	2100      	movs	r1, #0
 800a4be:	2000      	movs	r0, #0
 800a4c0:	f7fa f8e6 	bl	8004690 <LedOn>
		HAL_GPIO_DeInit(GPIOA, MOTOR_WU_Pin);
 800a4c4:	2108      	movs	r1, #8
 800a4c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4ca:	f002 fb9b 	bl	800cc04 <HAL_GPIO_DeInit>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800a4ce:	4b70      	ldr	r3, [pc, #448]	; (800a690 <main+0x3a4>)
 800a4d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4d2:	4a6f      	ldr	r2, [pc, #444]	; (800a690 <main+0x3a4>)
 800a4d4:	f043 0301 	orr.w	r3, r3, #1
 800a4d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a4da:	4b6d      	ldr	r3, [pc, #436]	; (800a690 <main+0x3a4>)
 800a4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4de:	f003 0301 	and.w	r3, r3, #1
 800a4e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a4e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
		HAL_GPIO_WritePin(GPIOA, MOTOR_WU_Pin, GPIO_PIN_SET);
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	2108      	movs	r1, #8
 800a4ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a4f2:	f002 fc79 	bl	800cde8 <HAL_GPIO_WritePin>

		GPIO_InitStruct.Pin = MOTOR_WU_Pin;
 800a4f6:	2308      	movs	r3, #8
 800a4f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
		GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800a502:	2302      	movs	r3, #2
 800a504:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a508:	2300      	movs	r3, #0
 800a50a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a50e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800a512:	4619      	mov	r1, r3
 800a514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a518:	f002 f9fa 	bl	800c910 <HAL_GPIO_Init>

		jumpToBootloader();
 800a51c:	f000 fe3c 	bl	800b198 <jumpToBootloader>
	{
 800a520:	e015      	b.n	800a54e <main+0x262>
	}
	else
	{
		HAL_MspInit();
 800a522:	f000 fe7b 	bl	800b21c <HAL_MspInit>
		MX_DMA_Init();
 800a526:	f7ff fcb3 	bl	8009e90 <MX_DMA_Init>
		MX_I2C1_Init();
 800a52a:	f7ff fdcd 	bl	800a0c8 <MX_I2C1_Init>
		MX_I2C2_Init();
 800a52e:	f7ff fe0b 	bl	800a148 <MX_I2C2_Init>
		MX_USART1_UART_Init();
 800a532:	f001 f941 	bl	800b7b8 <MX_USART1_UART_Init>
		MX_USART2_UART_Init();
 800a536:	f001 f96f 	bl	800b818 <MX_USART2_UART_Init>
		MX_USART3_UART_Init();
 800a53a:	f001 f99d 	bl	800b878 <MX_USART3_UART_Init>
		MX_TIM7_Init();
 800a53e:	f001 f815 	bl	800b56c <MX_TIM7_Init>
		MX_TIM16_Init();
 800a542:	f001 f849 	bl	800b5d8 <MX_TIM16_Init>
		MX_IWDG_Init();
 800a546:	f7ff feb3 	bl	800a2b0 <MX_IWDG_Init>
		Hes_USB_Config_Mode();
 800a54a:	f00c ff3b 	bl	80173c4 <Hes_USB_Config_Mode>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_GPIO_WritePin(GAZ_WU_GPIO_Port, GAZ_WU_Pin, GPIO_PIN_SET);
 800a54e:	2201      	movs	r2, #1
 800a550:	2180      	movs	r1, #128	; 0x80
 800a552:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a556:	f002 fc47 	bl	800cde8 <HAL_GPIO_WritePin>
	OuChaIsel(0);
 800a55a:	2000      	movs	r0, #0
 800a55c:	f7f9 fa32 	bl	80039c4 <OuChaIsel>

	OutDone1(0); //Stop Powersave part 1
 800a560:	2000      	movs	r0, #0
 800a562:	f7f9 fa47 	bl	80039f4 <OutDone1>
	OutDone2(1); //Stop Powersave part 2
 800a566:	2001      	movs	r0, #1
 800a568:	f7f9 fa5c 	bl	8003a24 <OutDone2>
	HAL_Delay(1);
 800a56c:	2001      	movs	r0, #1
 800a56e:	f001 fbab 	bl	800bcc8 <HAL_Delay>
	OutLedWu(1);
 800a572:	2001      	movs	r0, #1
 800a574:	f7f9 faec 	bl	8003b50 <OutLedWu>

	TabGen[GPS_DURATION] = 10;
 800a578:	4b40      	ldr	r3, [pc, #256]	; (800a67c <main+0x390>)
 800a57a:	220a      	movs	r2, #10
 800a57c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	LedChargeIndic(TabGen);
 800a580:	483e      	ldr	r0, [pc, #248]	; (800a67c <main+0x390>)
 800a582:	f7f8 fe96 	bl	80032b2 <LedChargeIndic>

	if (RCC->CSR & 1 << RCC_CSR_IWDGRSTF_Pos)
 800a586:	4b42      	ldr	r3, [pc, #264]	; (800a690 <main+0x3a4>)
 800a588:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a58c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d011      	beq.n	800a5b8 <main+0x2cc>
	{

		__HAL_RCC_CLEAR_RESET_FLAGS();
 800a594:	4b3e      	ldr	r3, [pc, #248]	; (800a690 <main+0x3a4>)
 800a596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a59a:	4a3d      	ldr	r2, [pc, #244]	; (800a690 <main+0x3a4>)
 800a59c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a5a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
		OutDone1(0); //Stop Powersave part 1
 800a5a4:	2000      	movs	r0, #0
 800a5a6:	f7f9 fa25 	bl	80039f4 <OutDone1>
		OutDone2(1); //Stop Powersave part 2
 800a5aa:	2001      	movs	r0, #1
 800a5ac:	f7f9 fa3a 	bl	8003a24 <OutDone2>

		REBOOT_FROM_WATCHDOG = 1;
 800a5b0:	4b38      	ldr	r3, [pc, #224]	; (800a694 <main+0x3a8>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	701a      	strb	r2, [r3, #0]
 800a5b6:	e003      	b.n	800a5c0 <main+0x2d4>
	}
	else
		powersave = PowerSave();
 800a5b8:	f7fa f8b4 	bl	8004724 <PowerSave>
 800a5bc:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
	//RCC_GetFlagStatus(RCC_FLAG_IWDGRST);

	//Chargement config
	default_value();
 800a5c0:	f7f8 ffb6 	bl	8003530 <default_value>
	Load_configuration_value();
 800a5c4:	f7f9 f87e 	bl	80036c4 <Load_configuration_value>
	LoadProperties();
 800a5c8:	f7fa f958 	bl	800487c <LoadProperties>
	//Démarrage Nemeus et enregistrement/chargement de l'Id_sigfox
	Load_ID_Sigfox(AskSigFox_ID());
 800a5cc:	f7f9 f97a 	bl	80038c4 <AskSigFox_ID>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7f9 f8f2 	bl	80037bc <Load_ID_Sigfox>

	TabGen[NMAXS_MALAISE] = c1.tps_PerteDeVerticalite * 60 * 100; // duration of malaise on sample (100 Hz) x [s] ;
 800a5d8:	4b2f      	ldr	r3, [pc, #188]	; (800a698 <main+0x3ac>)
 800a5da:	785b      	ldrb	r3, [r3, #1]
 800a5dc:	461a      	mov	r2, r3
 800a5de:	f241 7370 	movw	r3, #6000	; 0x1770
 800a5e2:	fb03 f302 	mul.w	r3, r3, r2
 800a5e6:	4a25      	ldr	r2, [pc, #148]	; (800a67c <main+0x390>)
 800a5e8:	6313      	str	r3, [r2, #48]	; 0x30
	TabGen[NMAXS_IMMO] = c1.tps_immo * 60 * 100; // duration of immo on sample (100 Hz) x [s] ;
 800a5ea:	4b2b      	ldr	r3, [pc, #172]	; (800a698 <main+0x3ac>)
 800a5ec:	781b      	ldrb	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f241 7370 	movw	r3, #6000	; 0x1770
 800a5f4:	fb03 f302 	mul.w	r3, r3, r2
 800a5f8:	4a20      	ldr	r2, [pc, #128]	; (800a67c <main+0x390>)
 800a5fa:	6353      	str	r3, [r2, #52]	; 0x34
	TabGen[NMAXS_FALL] = c1.tps_chute * 100; // duration of fall on sample (100 Hz) x [s] ;
 800a5fc:	4b26      	ldr	r3, [pc, #152]	; (800a698 <main+0x3ac>)
 800a5fe:	7b5b      	ldrb	r3, [r3, #13]
 800a600:	461a      	mov	r2, r3
 800a602:	2364      	movs	r3, #100	; 0x64
 800a604:	fb03 f302 	mul.w	r3, r3, r2
 800a608:	4a1c      	ldr	r2, [pc, #112]	; (800a67c <main+0x390>)
 800a60a:	6393      	str	r3, [r2, #56]	; 0x38
	TabGen[FALL_COND_2] = 1;
 800a60c:	4b1b      	ldr	r3, [pc, #108]	; (800a67c <main+0x390>)
 800a60e:	2201      	movs	r2, #1
 800a610:	675a      	str	r2, [r3, #116]	; 0x74
	TabGen[GPS_START_IT] = 1;
 800a612:	4b1a      	ldr	r3, [pc, #104]	; (800a67c <main+0x390>)
 800a614:	2201      	movs	r2, #1
 800a616:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	TabGen[TYPE_ALERT] = NONE_ALERT;
 800a61a:	4b18      	ldr	r3, [pc, #96]	; (800a67c <main+0x390>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	TabGen[BAT_VALUE] = 100;
 800a622:	4b16      	ldr	r3, [pc, #88]	; (800a67c <main+0x390>)
 800a624:	2264      	movs	r2, #100	; 0x64
 800a626:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	TabGen[SCREENSTATE] = 1;
 800a62a:	4b14      	ldr	r3, [pc, #80]	; (800a67c <main+0x390>)
 800a62c:	2201      	movs	r2, #1
 800a62e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	if (powersave == 0)
 800a632:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800a636:	2b00      	cmp	r3, #0
 800a638:	d108      	bne.n	800a64c <main+0x360>
	{
		HAL_Delay(2);
 800a63a:	2002      	movs	r0, #2
 800a63c:	f001 fb44 	bl	800bcc8 <HAL_Delay>
		LedOn(0, 0, 50, TabGen);
 800a640:	4b0e      	ldr	r3, [pc, #56]	; (800a67c <main+0x390>)
 800a642:	2232      	movs	r2, #50	; 0x32
 800a644:	2100      	movs	r1, #0
 800a646:	2000      	movs	r0, #0
 800a648:	f7fa f822 	bl	8004690 <LedOn>
			PowerBuzVib(100);
#endif

	}

	HAL_TIM_Base_Start_IT(&htim7);
 800a64c:	4813      	ldr	r0, [pc, #76]	; (800a69c <main+0x3b0>)
 800a64e:	f006 fa71 	bl	8010b34 <HAL_TIM_Base_Start_IT>

	ScreenOn();
 800a652:	f7fa f975 	bl	8004940 <ScreenOn>
	display_Init(!REBOOT_FROM_WATCHDOG);
 800a656:	4b0f      	ldr	r3, [pc, #60]	; (800a694 <main+0x3a8>)
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	bf0c      	ite	eq
 800a65e:	2301      	moveq	r3, #1
 800a660:	2300      	movne	r3, #0
 800a662:	b2db      	uxtb	r3, r3
 800a664:	4618      	mov	r0, r3
 800a666:	f7f7 f88d 	bl	8001784 <display_Init>
	if (BOX4GAZ == 1)
	{
		HAL_GPIO_WritePin(GAZ_WU_GPIO_Port, GAZ_WU_Pin, GPIO_PIN_RESET);
	}

	if (c1.GPS_Actif == 0)
 800a66a:	4b0b      	ldr	r3, [pc, #44]	; (800a698 <main+0x3ac>)
 800a66c:	7a5b      	ldrb	r3, [r3, #9]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d116      	bne.n	800a6a0 <main+0x3b4>
	{
		GpsStop();
 800a672:	f7f9 faf7 	bl	8003c64 <GpsStop>
 800a676:	e016      	b.n	800a6a6 <main+0x3ba>
 800a678:	20003130 	.word	0x20003130
 800a67c:	20002584 	.word	0x20002584
 800a680:	200028b0 	.word	0x200028b0
 800a684:	20002c20 	.word	0x20002c20
 800a688:	20002054 	.word	0x20002054
 800a68c:	200027e8 	.word	0x200027e8
 800a690:	40021000 	.word	0x40021000
 800a694:	20000bf1 	.word	0x20000bf1
 800a698:	20001158 	.word	0x20001158
 800a69c:	20003350 	.word	0x20003350
	}
	else
	{
		TabGen[GPS_ON] = 1;
 800a6a0:	4b7a      	ldr	r3, [pc, #488]	; (800a88c <main+0x5a0>)
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	605a      	str	r2, [r3, #4]
	}

	// IMU INITIALISATION

	Init_IMU();
 800a6a6:	f7f9 fc25 	bl	8003ef4 <Init_IMU>

	/*!--------DCO AJOUT----------------!*/

	OutDwmRst(0);
 800a6aa:	2000      	movs	r0, #0
 800a6ac:	f7f9 f9d2 	bl	8003a54 <OutDwmRst>
	OutDwmWu(0);
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	f7f9 f9e9 	bl	8003a88 <OutDwmWu>

	/*!--------DCO AJOUT----------------!*/

	if (SUEZ == 0)
	{
		if (DMA_Done == 0)
 800a6b6:	4b76      	ldr	r3, [pc, #472]	; (800a890 <main+0x5a4>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d104      	bne.n	800a6c8 <main+0x3dc>
		{
			WakeUpNemeusLS();
 800a6be:	f7fa f9cb 	bl	8004a58 <WakeUpNemeusLS>
			RebootNemeusLS(TabGen);
 800a6c2:	4872      	ldr	r0, [pc, #456]	; (800a88c <main+0x5a0>)
 800a6c4:	f7fa f9d6 	bl	8004a74 <RebootNemeusLS>
		}

		if (c1.com_sigfox == 1 && TabGen[SIGFOX_STATE] == 0 && c1.com_LoRa == 0)
 800a6c8:	4b72      	ldr	r3, [pc, #456]	; (800a894 <main+0x5a8>)
 800a6ca:	79db      	ldrb	r3, [r3, #7]
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d120      	bne.n	800a712 <main+0x426>
 800a6d0:	4b6e      	ldr	r3, [pc, #440]	; (800a88c <main+0x5a0>)
 800a6d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d11b      	bne.n	800a712 <main+0x426>
 800a6da:	4b6e      	ldr	r3, [pc, #440]	; (800a894 <main+0x5a8>)
 800a6dc:	7a1b      	ldrb	r3, [r3, #8]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d117      	bne.n	800a712 <main+0x426>
		{
			SigfoxOn();
 800a6e2:	f7fa fae5 	bl	8004cb0 <SigfoxOn>
			TimerLastSigfoxMessage = HAL_GetTick();
 800a6e6:	f001 fae3 	bl	800bcb0 <HAL_GetTick>
 800a6ea:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
			TabGen[SIGFOX_STATE] = 1;
 800a6ee:	4b67      	ldr	r3, [pc, #412]	; (800a88c <main+0x5a0>)
 800a6f0:	2201      	movs	r2, #1
 800a6f2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
			SendOnMessSigfox(!REBOOT_FROM_WATCHDOG);
 800a6f6:	4b68      	ldr	r3, [pc, #416]	; (800a898 <main+0x5ac>)
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	bf0c      	ite	eq
 800a6fe:	2301      	moveq	r3, #1
 800a700:	2300      	movne	r3, #0
 800a702:	b2db      	uxtb	r3, r3
 800a704:	4618      	mov	r0, r3
 800a706:	f7fa fb2d 	bl	8004d64 <SendOnMessSigfox>
			DUAL_STATE_LS = ACK_SF_PENDING;
 800a70a:	4b64      	ldr	r3, [pc, #400]	; (800a89c <main+0x5b0>)
 800a70c:	2204      	movs	r2, #4
 800a70e:	701a      	strb	r2, [r3, #0]
 800a710:	e01b      	b.n	800a74a <main+0x45e>
		}
		else if (c1.com_LoRa == 1)
 800a712:	4b60      	ldr	r3, [pc, #384]	; (800a894 <main+0x5a8>)
 800a714:	7a1b      	ldrb	r3, [r3, #8]
 800a716:	2b01      	cmp	r3, #1
 800a718:	d117      	bne.n	800a74a <main+0x45e>
		{
			if (c1.com_sigfox == 1)
 800a71a:	4b5e      	ldr	r3, [pc, #376]	; (800a894 <main+0x5a8>)
 800a71c:	79db      	ldrb	r3, [r3, #7]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d101      	bne.n	800a726 <main+0x43a>
				SigfoxOn();
 800a722:	f7fa fac5 	bl	8004cb0 <SigfoxOn>
			HAL_Delay(1000);
 800a726:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a72a:	f001 facd 	bl	800bcc8 <HAL_Delay>

			LoraWanOn();
 800a72e:	f7fa fa23 	bl	8004b78 <LoraWanOn>

			AskJoinTimeLoraWan = HAL_GetTick();
 800a732:	f001 fabd 	bl	800bcb0 <HAL_GetTick>
 800a736:	4603      	mov	r3, r0
 800a738:	4a59      	ldr	r2, [pc, #356]	; (800a8a0 <main+0x5b4>)
 800a73a:	6013      	str	r3, [r2, #0]
			TabGen[LORAWAN_STATE] = LW_WAIT_JOIN;
 800a73c:	4b53      	ldr	r3, [pc, #332]	; (800a88c <main+0x5a0>)
 800a73e:	2201      	movs	r2, #1
 800a740:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			DUAL_STATE_LS = LW_JOIN_PENDING;
 800a744:	4b55      	ldr	r3, [pc, #340]	; (800a89c <main+0x5b0>)
 800a746:	2201      	movs	r2, #1
 800a748:	701a      	strb	r2, [r3, #0]
		}
		TimerLastSigfoxMessage = HAL_GetTick();
 800a74a:	f001 fab1 	bl	800bcb0 <HAL_GetTick>
 800a74e:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
	}

	if (c1.loraP2P == 1)
 800a752:	4b50      	ldr	r3, [pc, #320]	; (800a894 <main+0x5a8>)
 800a754:	799b      	ldrb	r3, [r3, #6]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d107      	bne.n	800a76a <main+0x47e>
			}
			EnableLoraReceive811();
		}
		else
		{
			if (REBOOT_FROM_WATCHDOG == 0)
 800a75a:	4b4f      	ldr	r3, [pc, #316]	; (800a898 <main+0x5ac>)
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d103      	bne.n	800a76a <main+0x47e>
			{
				SendTestLora();
 800a762:	f7fa fb37 	bl	8004dd4 <SendTestLora>
				ContinuousRxLora();
 800a766:	f7fa fb99 	bl	8004e9c <ContinuousRxLora>
			}
		}
	}

	HAL_TIM_Base_Start_IT(&htim7);
 800a76a:	484e      	ldr	r0, [pc, #312]	; (800a8a4 <main+0x5b8>)
 800a76c:	f006 f9e2 	bl	8010b34 <HAL_TIM_Base_Start_IT>
	HAL_Delay(1);
 800a770:	2001      	movs	r0, #1
 800a772:	f001 faa9 	bl	800bcc8 <HAL_Delay>
	if (c1.GPS_Actif == 1)
 800a776:	4b47      	ldr	r3, [pc, #284]	; (800a894 <main+0x5a8>)
 800a778:	7a5b      	ldrb	r3, [r3, #9]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d102      	bne.n	800a784 <main+0x498>
	{
		TabGen[GPS_ON] = 1;
 800a77e:	4b43      	ldr	r3, [pc, #268]	; (800a88c <main+0x5a0>)
 800a780:	2201      	movs	r2, #1
 800a782:	605a      	str	r2, [r3, #4]
	}
	Timer_screen = HAL_GetTick();
 800a784:	f001 fa94 	bl	800bcb0 <HAL_GetTick>
 800a788:	4603      	mov	r3, r0
 800a78a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	if (REBOOT_FROM_WATCHDOG == 0)
		PowerBuzVib(100);
	//PowerBuz(100);
#endif

	timeBeforeDMA_SF = HAL_GetTick();
 800a78e:	f001 fa8f 	bl	800bcb0 <HAL_GetTick>
 800a792:	4603      	mov	r3, r0
 800a794:	4a44      	ldr	r2, [pc, #272]	; (800a8a8 <main+0x5bc>)
 800a796:	6013      	str	r3, [r2, #0]
		//WifiName "NoName";
	}

	if (DMA_GPS_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart2, Rx_datagps, MAXITGPS);
 800a798:	2264      	movs	r2, #100	; 0x64
 800a79a:	4944      	ldr	r1, [pc, #272]	; (800a8ac <main+0x5c0>)
 800a79c:	4844      	ldr	r0, [pc, #272]	; (800a8b0 <main+0x5c4>)
 800a79e:	f007 fb7f 	bl	8011ea0 <HAL_UART_Receive_DMA>
	if (DMA_RAK_ON == 1)
	{
		HAL_UART_Receive_DMA(&huart1, Rx_RAK811, MAXITRAK);
	}

	if ((DMA_NEMEUS_ON) == 1 && (DMA_Done == 0))
 800a7a2:	4b3b      	ldr	r3, [pc, #236]	; (800a890 <main+0x5a4>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d104      	bne.n	800a7b4 <main+0x4c8>
	{
		HAL_UART_Receive_DMA(&huart3, Rx_Nemeus, MAXITNEMEUS);
 800a7aa:	22c8      	movs	r2, #200	; 0xc8
 800a7ac:	4941      	ldr	r1, [pc, #260]	; (800a8b4 <main+0x5c8>)
 800a7ae:	4842      	ldr	r0, [pc, #264]	; (800a8b8 <main+0x5cc>)
 800a7b0:	f007 fb76 	bl	8011ea0 <HAL_UART_Receive_DMA>
	/* ----------------------------------WHILE BEGIN---------------------------------------------*/

	while (1)
	{

		uint32_t Time_Now = HAL_GetTick();
 800a7b4:	f001 fa7c 	bl	800bcb0 <HAL_GetTick>
 800a7b8:	f8c7 0180 	str.w	r0, [r7, #384]	; 0x180
		millis = HAL_GetTick();
 800a7bc:	f001 fa78 	bl	800bcb0 <HAL_GetTick>
 800a7c0:	4603      	mov	r3, r0
 800a7c2:	4a3e      	ldr	r2, [pc, #248]	; (800a8bc <main+0x5d0>)
 800a7c4:	6013      	str	r3, [r2, #0]

		HAL_IWDG_Refresh(&hiwdg);
 800a7c6:	483e      	ldr	r0, [pc, #248]	; (800a8c0 <main+0x5d4>)
 800a7c8:	f003 f9d1 	bl	800db6e <HAL_IWDG_Refresh>
			ComputeAlerteGaz(TabAlert, TabFloatValue);
		}

// ##########################GPS################################################

		if (TabGen[GPS_GOOD] == 1)
 800a7cc:	4b2f      	ldr	r3, [pc, #188]	; (800a88c <main+0x5a0>)
 800a7ce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d10d      	bne.n	800a7f2 <main+0x506>
		{
			if (millis - TabTimer[LAST_UPDATE_GPS] < 15 * 60 * 1000)
 800a7d6:	4b39      	ldr	r3, [pc, #228]	; (800a8bc <main+0x5d0>)
 800a7d8:	681a      	ldr	r2, [r3, #0]
 800a7da:	4b3a      	ldr	r3, [pc, #232]	; (800a8c4 <main+0x5d8>)
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	1ad3      	subs	r3, r2, r3
 800a7e0:	4a39      	ldr	r2, [pc, #228]	; (800a8c8 <main+0x5dc>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d805      	bhi.n	800a7f2 <main+0x506>
				TabGen[GPS_DURATION] = c1.tps_GPS_ON;
 800a7e6:	4b2b      	ldr	r3, [pc, #172]	; (800a894 <main+0x5a8>)
 800a7e8:	789b      	ldrb	r3, [r3, #2]
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	4b27      	ldr	r3, [pc, #156]	; (800a88c <main+0x5a0>)
 800a7ee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		}

		if (c1.GPS_Actif == 1) // GPS IS ENABLED
 800a7f2:	4b28      	ldr	r3, [pc, #160]	; (800a894 <main+0x5a8>)
 800a7f4:	7a5b      	ldrb	r3, [r3, #9]
 800a7f6:	2b01      	cmp	r3, #1
 800a7f8:	d101      	bne.n	800a7fe <main+0x512>
		{
			GPS_Management();
 800a7fa:	f7fd f8a3 	bl	8007944 <GPS_Management>
				//BuildMessWifi(bufferWifi, TabGen, TabFloatValue,  TabTimer, WifiName);
				CheckWifi = HAL_GetTick();
			}
		}

		if (c1.loraP2P == 1)
 800a7fe:	4b25      	ldr	r3, [pc, #148]	; (800a894 <main+0x5a8>)
 800a800:	799b      	ldrb	r3, [r3, #6]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d104      	bne.n	800a810 <main+0x524>
		{
			TaskSendLoraNoGPS(TabGen, TabFloatValue, TabTimer);
 800a806:	4a2f      	ldr	r2, [pc, #188]	; (800a8c4 <main+0x5d8>)
 800a808:	4930      	ldr	r1, [pc, #192]	; (800a8cc <main+0x5e0>)
 800a80a:	4820      	ldr	r0, [pc, #128]	; (800a88c <main+0x5a0>)
 800a80c:	f7fc fbf6 	bl	8006ffc <TaskSendLoraNoGPS>
		}

		if (c1.com_LoRa == 1)
 800a810:	4b20      	ldr	r3, [pc, #128]	; (800a894 <main+0x5a8>)
 800a812:	7a1b      	ldrb	r3, [r3, #8]
 800a814:	2b01      	cmp	r3, #1
 800a816:	f040 8088 	bne.w	800a92a <main+0x63e>
		{ 	// RSSI MANAGEMENT
			if ((DUAL_STATE_LS == NO_ACK_SF_RETRY) || // Downlink failed for sigfox, try again
 800a81a:	4b20      	ldr	r3, [pc, #128]	; (800a89c <main+0x5b0>)
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	2b05      	cmp	r3, #5
 800a820:	d01f      	beq.n	800a862 <main+0x576>
					(((HAL_GetTick() - AskJoinTimeLoraWan) > 1 * 15 * 1000)
 800a822:	f001 fa45 	bl	800bcb0 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	4b1d      	ldr	r3, [pc, #116]	; (800a8a0 <main+0x5b4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	1ad3      	subs	r3, r2, r3
			if ((DUAL_STATE_LS == NO_ACK_SF_RETRY) || // Downlink failed for sigfox, try again
 800a82e:	f643 2298 	movw	r2, #15000	; 0x3a98
 800a832:	4293      	cmp	r3, r2
 800a834:	d903      	bls.n	800a83e <main+0x552>
							&& (DUAL_STATE_LS == SF_DELAY_ON)) || // If Lora with ACK ok -> Sigfox msg in 10 seconds
 800a836:	4b19      	ldr	r3, [pc, #100]	; (800a89c <main+0x5b0>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	2b03      	cmp	r3, #3
 800a83c:	d011      	beq.n	800a862 <main+0x576>
					(((HAL_GetTick() - AskJoinTimeLoraWan) > 1 * 30 * 1000)
 800a83e:	f001 fa37 	bl	800bcb0 <HAL_GetTick>
 800a842:	4602      	mov	r2, r0
 800a844:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <main+0x5b4>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	1ad3      	subs	r3, r2, r3
							&& (DUAL_STATE_LS == SF_DELAY_ON)) || // If Lora with ACK ok -> Sigfox msg in 10 seconds
 800a84a:	f247 5230 	movw	r2, #30000	; 0x7530
 800a84e:	4293      	cmp	r3, r2
 800a850:	d949      	bls.n	800a8e6 <main+0x5fa>
							&& ((DUAL_STATE_LS == ACK_LORA_PENDING)
 800a852:	4b12      	ldr	r3, [pc, #72]	; (800a89c <main+0x5b0>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d003      	beq.n	800a862 <main+0x576>
									|| (DUAL_STATE_LS == LW_JOIN_PENDING)))) // If Lora with ACK not ok 30 seconds after start, Sigfox msg
 800a85a:	4b10      	ldr	r3, [pc, #64]	; (800a89c <main+0x5b0>)
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d141      	bne.n	800a8e6 <main+0x5fa>
			{
				//TIME TO SEND SIGFOX ON MESSQGE TO GET RSSI
				if (DUAL_STATE_LS == NO_ACK_SF_RETRY
 800a862:	4b0e      	ldr	r3, [pc, #56]	; (800a89c <main+0x5b0>)
 800a864:	781b      	ldrb	r3, [r3, #0]
 800a866:	2b05      	cmp	r3, #5
 800a868:	d003      	beq.n	800a872 <main+0x586>
						|| DUAL_STATE_LS == LW_JOIN_PENDING)
 800a86a:	4b0c      	ldr	r3, [pc, #48]	; (800a89c <main+0x5b0>)
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d12e      	bne.n	800a8d0 <main+0x5e4>
				{
					RebootNemeusLS(TabGen);
 800a872:	4806      	ldr	r0, [pc, #24]	; (800a88c <main+0x5a0>)
 800a874:	f7fa f8fe 	bl	8004a74 <RebootNemeusLS>
					DUAL_STATE_LS = ACK_SF_PENDING_2;
 800a878:	4b08      	ldr	r3, [pc, #32]	; (800a89c <main+0x5b0>)
 800a87a:	2206      	movs	r2, #6
 800a87c:	701a      	strb	r2, [r3, #0]
					PowerVib(100);
 800a87e:	2064      	movs	r0, #100	; 0x64
 800a880:	f7f8 f92d 	bl	8002ade <PowerVib>

					SigfoxOn();
 800a884:	f7fa fa14 	bl	8004cb0 <SigfoxOn>
 800a888:	e025      	b.n	800a8d6 <main+0x5ea>
 800a88a:	bf00      	nop
 800a88c:	20002584 	.word	0x20002584
 800a890:	20000bfc 	.word	0x20000bfc
 800a894:	20001158 	.word	0x20001158
 800a898:	20000bf1 	.word	0x20000bf1
 800a89c:	20000c0b 	.word	0x20000c0b
 800a8a0:	20000c28 	.word	0x20000c28
 800a8a4:	20003350 	.word	0x20003350
 800a8a8:	200007ec 	.word	0x200007ec
 800a8ac:	20001f0c 	.word	0x20001f0c
 800a8b0:	200034b0 	.word	0x200034b0
 800a8b4:	20001e44 	.word	0x20001e44
 800a8b8:	20003534 	.word	0x20003534
 800a8bc:	20000bf4 	.word	0x20000bf4
 800a8c0:	20001e28 	.word	0x20001e28
 800a8c4:	200028b0 	.word	0x200028b0
 800a8c8:	000dbb9f 	.word	0x000dbb9f
 800a8cc:	20002c20 	.word	0x20002c20
				}
				else
					DUAL_STATE_LS = ACK_SF_PENDING;
 800a8d0:	4bb8      	ldr	r3, [pc, #736]	; (800abb4 <main+0x8c8>)
 800a8d2:	2204      	movs	r2, #4
 800a8d4:	701a      	strb	r2, [r3, #0]
				SendOnMessSigfox(1);
 800a8d6:	2001      	movs	r0, #1
 800a8d8:	f7fa fa44 	bl	8004d64 <SendOnMessSigfox>

				AskJoinTimeLoraWan = HAL_GetTick();
 800a8dc:	f001 f9e8 	bl	800bcb0 <HAL_GetTick>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	4ab5      	ldr	r2, [pc, #724]	; (800abb8 <main+0x8cc>)
 800a8e4:	6013      	str	r3, [r2, #0]

			}

			if (((HAL_GetTick() - AskJoinTimeLoraWan) > 1 * 30 * 1000)
 800a8e6:	f001 f9e3 	bl	800bcb0 <HAL_GetTick>
 800a8ea:	4602      	mov	r2, r0
 800a8ec:	4bb2      	ldr	r3, [pc, #712]	; (800abb8 <main+0x8cc>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	1ad3      	subs	r3, r2, r3
 800a8f2:	f247 5230 	movw	r2, #30000	; 0x7530
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d908      	bls.n	800a90c <main+0x620>
					&& (DUAL_STATE_LS == ACK_SF_PENDING_2))
 800a8fa:	4bae      	ldr	r3, [pc, #696]	; (800abb4 <main+0x8c8>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b06      	cmp	r3, #6
 800a900:	d104      	bne.n	800a90c <main+0x620>
			{ // WAITING FOR DL SIGFOX 2 BUT NEVER RECEIVED
				LoraWanOn();
 800a902:	f7fa f939 	bl	8004b78 <LoraWanOn>
				DUAL_STATE_LS = NO_ACK_PENDING;
 800a906:	4bab      	ldr	r3, [pc, #684]	; (800abb4 <main+0x8c8>)
 800a908:	2200      	movs	r2, #0
 800a90a:	701a      	strb	r2, [r3, #0]
			}

			if (TabGen[ALERT_PENDING] == 1 && TabGen[LORA_SEND] == 1)
 800a90c:	4bab      	ldr	r3, [pc, #684]	; (800abbc <main+0x8d0>)
 800a90e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a912:	2b01      	cmp	r3, #1
 800a914:	d109      	bne.n	800a92a <main+0x63e>
 800a916:	4ba9      	ldr	r3, [pc, #676]	; (800abbc <main+0x8d0>)
 800a918:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d104      	bne.n	800a92a <main+0x63e>
			{
				TaskSendLoraWan(TabGen, TabFloatValue, TabTimer);
 800a920:	4aa7      	ldr	r2, [pc, #668]	; (800abc0 <main+0x8d4>)
 800a922:	49a8      	ldr	r1, [pc, #672]	; (800abc4 <main+0x8d8>)
 800a924:	48a5      	ldr	r0, [pc, #660]	; (800abbc <main+0x8d0>)
 800a926:	f7fb ff53 	bl	80067d0 <TaskSendLoraWan>
				//TimerLastLoraMessage = HAL_GetTick();
			}
		}

		if (TabGen[DUAL_SEND] == 1)
 800a92a:	4ba4      	ldr	r3, [pc, #656]	; (800abbc <main+0x8d0>)
 800a92c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 800a930:	2b01      	cmp	r3, #1
 800a932:	d105      	bne.n	800a940 <main+0x654>
			TaskSendDUAL(TabGen, TabFloatValue, TabTimer, WifiName);
 800a934:	4ba4      	ldr	r3, [pc, #656]	; (800abc8 <main+0x8dc>)
 800a936:	4aa2      	ldr	r2, [pc, #648]	; (800abc0 <main+0x8d4>)
 800a938:	49a2      	ldr	r1, [pc, #648]	; (800abc4 <main+0x8d8>)
 800a93a:	48a0      	ldr	r0, [pc, #640]	; (800abbc <main+0x8d0>)
 800a93c:	f7fc f804 	bl	8006948 <TaskSendDUAL>

		if (c1.com_sigfox == 1)
 800a940:	4ba2      	ldr	r3, [pc, #648]	; (800abcc <main+0x8e0>)
 800a942:	79db      	ldrb	r3, [r3, #7]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d10e      	bne.n	800a966 <main+0x67a>
		{
			if (TabGen[ALERT_PENDING] == 1 && TabGen[SIGFOX_SEND] == 1)
 800a948:	4b9c      	ldr	r3, [pc, #624]	; (800abbc <main+0x8d0>)
 800a94a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d109      	bne.n	800a966 <main+0x67a>
 800a952:	4b9a      	ldr	r3, [pc, #616]	; (800abbc <main+0x8d0>)
 800a954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a956:	2b01      	cmp	r3, #1
 800a958:	d105      	bne.n	800a966 <main+0x67a>
				TaskSendSigfox(TabGen, TabFloatValue, TabTimer, WifiName);
 800a95a:	4b9b      	ldr	r3, [pc, #620]	; (800abc8 <main+0x8dc>)
 800a95c:	4a98      	ldr	r2, [pc, #608]	; (800abc0 <main+0x8d4>)
 800a95e:	4999      	ldr	r1, [pc, #612]	; (800abc4 <main+0x8d8>)
 800a960:	4896      	ldr	r0, [pc, #600]	; (800abbc <main+0x8d0>)
 800a962:	f7fb ff89 	bl	8006878 <TaskSendSigfox>
			}
		}			
		#endif			

		// ########################## MESSAGE MANAGEMENT END ##############################
		Task_USB_Configuration();
 800a966:	f7fd f869 	bl	8007a3c <Task_USB_Configuration>

		TaskExtButton(TabGen);
 800a96a:	4894      	ldr	r0, [pc, #592]	; (800abbc <main+0x8d0>)
 800a96c:	f7fb f82a 	bl	80059c4 <TaskExtButton>

		TaskFallTest(TabAlert, TabGen);
 800a970:	4992      	ldr	r1, [pc, #584]	; (800abbc <main+0x8d0>)
 800a972:	4897      	ldr	r0, [pc, #604]	; (800abd0 <main+0x8e4>)
 800a974:	f7fb f980 	bl	8005c78 <TaskFallTest>

		TaskUpdateUpperLed(updateLedTab, TabGen); // bug +
 800a978:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800a97c:	498f      	ldr	r1, [pc, #572]	; (800abbc <main+0x8d0>)
 800a97e:	4618      	mov	r0, r3
 800a980:	f7fa ff1c 	bl	80057bc <TaskUpdateUpperLed>

		TaskLedBlinking(upperLedTab, TabGen);
 800a984:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 800a988:	498c      	ldr	r1, [pc, #560]	; (800abbc <main+0x8d0>)
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fa fed2 	bl	8005734 <TaskLedBlinking>

		TaskOnScreen(TabGen, &Timer_screen);
 800a990:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800a994:	4619      	mov	r1, r3
 800a996:	4889      	ldr	r0, [pc, #548]	; (800abbc <main+0x8d0>)
 800a998:	f7fb fc38 	bl	800620c <TaskOnScreen>

		TaskBigScreen(ScreenTab, TabAlert, TabGen, TabFloatValue, TabTimer,
 800a99c:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 800a9a0:	4b89      	ldr	r3, [pc, #548]	; (800abc8 <main+0x8dc>)
 800a9a2:	9302      	str	r3, [sp, #8]
 800a9a4:	4b8b      	ldr	r3, [pc, #556]	; (800abd4 <main+0x8e8>)
 800a9a6:	9301      	str	r3, [sp, #4]
 800a9a8:	4b85      	ldr	r3, [pc, #532]	; (800abc0 <main+0x8d4>)
 800a9aa:	9300      	str	r3, [sp, #0]
 800a9ac:	4b85      	ldr	r3, [pc, #532]	; (800abc4 <main+0x8d8>)
 800a9ae:	4a83      	ldr	r2, [pc, #524]	; (800abbc <main+0x8d0>)
 800a9b0:	4987      	ldr	r1, [pc, #540]	; (800abd0 <main+0x8e4>)
 800a9b2:	f7fa fe5b 	bl	800566c <TaskBigScreen>
				TabAlertAll, WifiName);

		if (TabGen[CHARGEC] == 0)
 800a9b6:	4b81      	ldr	r3, [pc, #516]	; (800abbc <main+0x8d0>)
 800a9b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d105      	bne.n	800a9cc <main+0x6e0>
			TaskAlertAll(TabAlert, TabGen, TabAlertAll, TabFloatValue);
 800a9c0:	4b80      	ldr	r3, [pc, #512]	; (800abc4 <main+0x8d8>)
 800a9c2:	4a84      	ldr	r2, [pc, #528]	; (800abd4 <main+0x8e8>)
 800a9c4:	497d      	ldr	r1, [pc, #500]	; (800abbc <main+0x8d0>)
 800a9c6:	4882      	ldr	r0, [pc, #520]	; (800abd0 <main+0x8e4>)
 800a9c8:	f7fb f9d4 	bl	8005d74 <TaskAlertAll>

		Battery_Charger_Management();
 800a9cc:	f7fc fe54 	bl	8007678 <Battery_Charger_Management>
//			Flag[F_CHARGER] = 1;
//			Battery_Charger_Management();
//		}

		// EVERY 100 HZ
		if (Flag[F_100HZ] == 1)
 800a9d0:	4b81      	ldr	r3, [pc, #516]	; (800abd8 <main+0x8ec>)
 800a9d2:	78db      	ldrb	r3, [r3, #3]
 800a9d4:	b2db      	uxtb	r3, r3
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d130      	bne.n	800aa3c <main+0x750>
		{

			Flag[F_100HZ] = 0;
 800a9da:	4b7f      	ldr	r3, [pc, #508]	; (800abd8 <main+0x8ec>)
 800a9dc:	2200      	movs	r2, #0
 800a9de:	70da      	strb	r2, [r3, #3]

			if (TabGen[ALERT_ON] == 0)
 800a9e0:	4b76      	ldr	r3, [pc, #472]	; (800abbc <main+0x8d0>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d129      	bne.n	800aa3c <main+0x750>
			{
				if (TabGen[LOCK_I2C1] == 0)  // check I2C1 is available
 800a9e8:	4b74      	ldr	r3, [pc, #464]	; (800abbc <main+0x8d0>)
 800a9ea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d124      	bne.n	800aa3c <main+0x750>
				{
					Measure_IMU(buffer6); // read 6x register of IMU
 800a9f2:	487a      	ldr	r0, [pc, #488]	; (800abdc <main+0x8f0>)
 800a9f4:	f7f9 fb2a 	bl	800404c <Measure_IMU>

					TaskAlertAcc(angle, accres, TabAlert, TabGen, config_seuil()); // check Alert for Malaise and Immo
 800a9f8:	4b79      	ldr	r3, [pc, #484]	; (800abe0 <main+0x8f4>)
 800a9fa:	ed93 8a00 	vldr	s16, [r3]
 800a9fe:	4b79      	ldr	r3, [pc, #484]	; (800abe4 <main+0x8f8>)
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	ee07 3a90 	vmov	s15, r3
 800aa06:	eef8 8a67 	vcvt.f32.u32	s17, s15
 800aa0a:	f7f8 ffab 	bl	8003964 <config_seuil>
 800aa0e:	eef0 7a40 	vmov.f32	s15, s0
 800aa12:	eeb0 1a67 	vmov.f32	s2, s15
 800aa16:	4969      	ldr	r1, [pc, #420]	; (800abbc <main+0x8d0>)
 800aa18:	486d      	ldr	r0, [pc, #436]	; (800abd0 <main+0x8e4>)
 800aa1a:	eef0 0a68 	vmov.f32	s1, s17
 800aa1e:	eeb0 0a48 	vmov.f32	s0, s16
 800aa22:	f7f8 fc9d 	bl	8003360 <TaskAlertAcc>

					TaskFallManager(ar, y, accres, accy, TabGen);
 800aa26:	4b6f      	ldr	r3, [pc, #444]	; (800abe4 <main+0x8f8>)
 800aa28:	881a      	ldrh	r2, [r3, #0]
 800aa2a:	4b6f      	ldr	r3, [pc, #444]	; (800abe8 <main+0x8fc>)
 800aa2c:	881b      	ldrh	r3, [r3, #0]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	4962      	ldr	r1, [pc, #392]	; (800abbc <main+0x8d0>)
 800aa32:	9100      	str	r1, [sp, #0]
 800aa34:	496d      	ldr	r1, [pc, #436]	; (800abec <main+0x900>)
 800aa36:	486e      	ldr	r0, [pc, #440]	; (800abf0 <main+0x904>)
 800aa38:	f7fc f9b0 	bl	8006d9c <TaskFallManager>
				}
			}
		}

		if (c1.loraP2P == 1)
 800aa3c:	4b63      	ldr	r3, [pc, #396]	; (800abcc <main+0x8e0>)
 800aa3e:	799b      	ldrb	r3, [r3, #6]
 800aa40:	2b01      	cmp	r3, #1
 800aa42:	d101      	bne.n	800aa48 <main+0x75c>
					Task_Read_Incoming_Rak();
				}
				else
					once_rak = 1;
			}
			Repeater_Link_Management();
 800aa44:	f7fc fd9e 	bl	8007584 <Repeater_Link_Management>
		}

		if (DMA_GPS_ON == 1 && c1.GPS_Actif == 1)
 800aa48:	4b60      	ldr	r3, [pc, #384]	; (800abcc <main+0x8e0>)
 800aa4a:	7a5b      	ldrb	r3, [r3, #9]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	f040 80dc 	bne.w	800ac0a <main+0x91e>
		{
			uint8_t buffer[MAXITGPS] =
 800aa52:	463b      	mov	r3, r7
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]
 800aa58:	3304      	adds	r3, #4
 800aa5a:	2260      	movs	r2, #96	; 0x60
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f00d fb1a 	bl	8018098 <memset>
			{ 0 };
			if (Time_Now % 1000 == 0 && once_gps == 1)
 800aa64:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800aa68:	4b62      	ldr	r3, [pc, #392]	; (800abf4 <main+0x908>)
 800aa6a:	fba3 1302 	umull	r1, r3, r3, r2
 800aa6e:	099b      	lsrs	r3, r3, #6
 800aa70:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800aa74:	fb01 f303 	mul.w	r3, r1, r3
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	f040 80c2 	bne.w	800ac04 <main+0x918>
 800aa80:	4b5d      	ldr	r3, [pc, #372]	; (800abf8 <main+0x90c>)
 800aa82:	781b      	ldrb	r3, [r3, #0]
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	f040 80bd 	bne.w	800ac04 <main+0x918>
			{
				once_gps = 0;
 800aa8a:	4b5b      	ldr	r3, [pc, #364]	; (800abf8 <main+0x90c>)
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 800aa90:	2300      	movs	r3, #0
 800aa92:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
				for (uint8_t y = 0; y < MAXITGPS; y++)
 800aa96:	2300      	movs	r3, #0
 800aa98:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
 800aa9c:	e00c      	b.n	800aab8 <main+0x7cc>
				{
					buffer[y] = Rx_datagps[y];
 800aa9e:	f897 21b2 	ldrb.w	r2, [r7, #434]	; 0x1b2
 800aaa2:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 800aaa6:	4955      	ldr	r1, [pc, #340]	; (800abfc <main+0x910>)
 800aaa8:	5c89      	ldrb	r1, [r1, r2]
 800aaaa:	463a      	mov	r2, r7
 800aaac:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 800aaae:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 800aab2:	3301      	adds	r3, #1
 800aab4:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
 800aab8:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 800aabc:	2b63      	cmp	r3, #99	; 0x63
 800aabe:	d9ee      	bls.n	800aa9e <main+0x7b2>
				}

				while (i < MAXITGPS)
 800aac0:	e056      	b.n	800ab70 <main+0x884>
				{
					if (buffer[i] == '$')
 800aac2:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800aac6:	463a      	mov	r2, r7
 800aac8:	5cd3      	ldrb	r3, [r2, r3]
 800aaca:	2b24      	cmp	r3, #36	; 0x24
 800aacc:	d14b      	bne.n	800ab66 <main+0x87a>
					{
						uint8_t y = 0;
 800aace:	2300      	movs	r3, #0
 800aad0:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
						Rx_Buffergps[y++] = buffer[i++];
 800aad4:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800aad8:	1c5a      	adds	r2, r3, #1
 800aada:	f887 21b3 	strb.w	r2, [r7, #435]	; 0x1b3
 800aade:	4619      	mov	r1, r3
 800aae0:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800aae4:	1c5a      	adds	r2, r3, #1
 800aae6:	f887 21b4 	strb.w	r2, [r7, #436]	; 0x1b4
 800aaea:	461a      	mov	r2, r3
 800aaec:	463b      	mov	r3, r7
 800aaee:	5c59      	ldrb	r1, [r3, r1]
 800aaf0:	4b43      	ldr	r3, [pc, #268]	; (800ac00 <main+0x914>)
 800aaf2:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITGPS; y++)
 800aaf4:	e033      	b.n	800ab5e <main+0x872>
						{
							if (buffer[i] != '\r')
 800aaf6:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800aafa:	463a      	mov	r2, r7
 800aafc:	5cd3      	ldrb	r3, [r2, r3]
 800aafe:	2b0d      	cmp	r3, #13
 800ab00:	d024      	beq.n	800ab4c <main+0x860>
							{
								if (i == MAXITGPS && y < MAXITGPS)
 800ab02:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ab06:	2b64      	cmp	r3, #100	; 0x64
 800ab08:	d106      	bne.n	800ab18 <main+0x82c>
 800ab0a:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab0e:	2b63      	cmp	r3, #99	; 0x63
 800ab10:	d802      	bhi.n	800ab18 <main+0x82c>
									i = 0; // wrapping the circular buffer
 800ab12:	2300      	movs	r3, #0
 800ab14:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3

								Rx_Buffergps[y] = buffer[i++];
 800ab18:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ab1c:	1c5a      	adds	r2, r3, #1
 800ab1e:	f887 21b3 	strb.w	r2, [r7, #435]	; 0x1b3
 800ab22:	4619      	mov	r1, r3
 800ab24:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab28:	463a      	mov	r2, r7
 800ab2a:	5c51      	ldrb	r1, [r2, r1]
 800ab2c:	4a34      	ldr	r2, [pc, #208]	; (800ac00 <main+0x914>)
 800ab2e:	54d1      	strb	r1, [r2, r3]
 800ab30:	e010      	b.n	800ab54 <main+0x868>
							}
							else
							{
								for (y; y < MAXITGPS; y++)
								{
									Rx_Buffergps[y] = 0;
 800ab32:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab36:	4a32      	ldr	r2, [pc, #200]	; (800ac00 <main+0x914>)
 800ab38:	2100      	movs	r1, #0
 800ab3a:	54d1      	strb	r1, [r2, r3]
									i = MAXITGPS;
 800ab3c:	2364      	movs	r3, #100	; 0x64
 800ab3e:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
								for (y; y < MAXITGPS; y++)
 800ab42:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab46:	3301      	adds	r3, #1
 800ab48:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 800ab4c:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab50:	2b63      	cmp	r3, #99	; 0x63
 800ab52:	d9ee      	bls.n	800ab32 <main+0x846>
						for (y; y < MAXITGPS; y++)
 800ab54:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab58:	3301      	adds	r3, #1
 800ab5a:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
 800ab5e:	f897 31b4 	ldrb.w	r3, [r7, #436]	; 0x1b4
 800ab62:	2b63      	cmp	r3, #99	; 0x63
 800ab64:	d9c7      	bls.n	800aaf6 <main+0x80a>
								}
							}
						}
					}
					i++;
 800ab66:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
				while (i < MAXITGPS)
 800ab70:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 800ab74:	2b63      	cmp	r3, #99	; 0x63
 800ab76:	d9a4      	bls.n	800aac2 <main+0x7d6>
				}
				TaskGPS(Rx_Buffergps, TabGen, TabTimer, TabFloatValue);
 800ab78:	4b12      	ldr	r3, [pc, #72]	; (800abc4 <main+0x8d8>)
 800ab7a:	4a11      	ldr	r2, [pc, #68]	; (800abc0 <main+0x8d4>)
 800ab7c:	490f      	ldr	r1, [pc, #60]	; (800abbc <main+0x8d0>)
 800ab7e:	4820      	ldr	r0, [pc, #128]	; (800ac00 <main+0x914>)
 800ab80:	f7fb fb7e 	bl	8006280 <TaskGPS>

				for (uint8_t y = 0; y < MAXITGPS; y++)
 800ab84:	2300      	movs	r3, #0
 800ab86:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 800ab8a:	e00e      	b.n	800abaa <main+0x8be>
				{
					Rx_datagps[y] = 0;
 800ab8c:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800ab90:	4a1a      	ldr	r2, [pc, #104]	; (800abfc <main+0x910>)
 800ab92:	2100      	movs	r1, #0
 800ab94:	54d1      	strb	r1, [r2, r3]
					Rx_Buffergps[y] = 0;
 800ab96:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800ab9a:	4a19      	ldr	r2, [pc, #100]	; (800ac00 <main+0x914>)
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITGPS; y++)
 800aba0:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800aba4:	3301      	adds	r3, #1
 800aba6:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 800abaa:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 800abae:	2b63      	cmp	r3, #99	; 0x63
 800abb0:	d9ec      	bls.n	800ab8c <main+0x8a0>
			{
 800abb2:	e02a      	b.n	800ac0a <main+0x91e>
 800abb4:	20000c0b 	.word	0x20000c0b
 800abb8:	20000c28 	.word	0x20000c28
 800abbc:	20002584 	.word	0x20002584
 800abc0:	200028b0 	.word	0x200028b0
 800abc4:	20002c20 	.word	0x20002c20
 800abc8:	20002c00 	.word	0x20002c00
 800abcc:	20001158 	.word	0x20001158
 800abd0:	20003130 	.word	0x20003130
 800abd4:	20001f80 	.word	0x20001f80
 800abd8:	20002c7c 	.word	0x20002c7c
 800abdc:	20003168 	.word	0x20003168
 800abe0:	200028c8 	.word	0x200028c8
 800abe4:	20002580 	.word	0x20002580
 800abe8:	200026f4 	.word	0x200026f4
 800abec:	200020d0 	.word	0x200020d0
 800abf0:	20002c80 	.word	0x20002c80
 800abf4:	10624dd3 	.word	0x10624dd3
 800abf8:	200007fc 	.word	0x200007fc
 800abfc:	20001f0c 	.word	0x20001f0c
 800ac00:	20001f8c 	.word	0x20001f8c
				}
			}
			else
				once_gps = 1;
 800ac04:	4bbf      	ldr	r3, [pc, #764]	; (800af04 <main+0xc18>)
 800ac06:	2201      	movs	r2, #1
 800ac08:	701a      	strb	r2, [r3, #0]
		}

		if (DMA_NEMEUS_ON == 1)
		{
			uint8_t save_pos_start = MAXITNEMEUS;
 800ac0a:	23c8      	movs	r3, #200	; 0xc8
 800ac0c:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
			uint8_t save_pos_end = MAXITNEMEUS;
 800ac10:	23c8      	movs	r3, #200	; 0xc8
 800ac12:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
			uint8_t copy = 0;
 800ac16:	2300      	movs	r3, #0
 800ac18:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193

			if (Time_Now % 1000 == 0 && once_nem == 1)
 800ac1c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800ac20:	4bb9      	ldr	r3, [pc, #740]	; (800af08 <main+0xc1c>)
 800ac22:	fba3 1302 	umull	r1, r3, r3, r2
 800ac26:	099b      	lsrs	r3, r3, #6
 800ac28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac2c:	fb01 f303 	mul.w	r3, r1, r3
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	f040 815f 	bne.w	800aef6 <main+0xc0a>
 800ac38:	4bb4      	ldr	r3, [pc, #720]	; (800af0c <main+0xc20>)
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	2b01      	cmp	r3, #1
 800ac3e:	f040 815a 	bne.w	800aef6 <main+0xc0a>
			{
				once_nem = 0;
 800ac42:	4bb2      	ldr	r3, [pc, #712]	; (800af0c <main+0xc20>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	701a      	strb	r2, [r3, #0]
				uint8_t i = 0;
 800ac48:	2300      	movs	r3, #0
 800ac4a:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
				uint8_t buffer[MAXITNEMEUS] =
 800ac4e:	463b      	mov	r3, r7
 800ac50:	2200      	movs	r2, #0
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	3304      	adds	r3, #4
 800ac56:	22c4      	movs	r2, #196	; 0xc4
 800ac58:	2100      	movs	r1, #0
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f00d fa1c 	bl	8018098 <memset>
				{ 0 };
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 800ac60:	2300      	movs	r3, #0
 800ac62:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
 800ac66:	e00c      	b.n	800ac82 <main+0x996>
				{
					buffer[y] = Rx_Nemeus[y];
 800ac68:	f897 2191 	ldrb.w	r2, [r7, #401]	; 0x191
 800ac6c:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 800ac70:	49a7      	ldr	r1, [pc, #668]	; (800af10 <main+0xc24>)
 800ac72:	5c89      	ldrb	r1, [r1, r2]
 800ac74:	463a      	mov	r2, r7
 800ac76:	54d1      	strb	r1, [r2, r3]
				for (uint8_t y = 0; y < MAXITNEMEUS; y++)
 800ac78:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	f887 3191 	strb.w	r3, [r7, #401]	; 0x191
 800ac82:	f897 3191 	ldrb.w	r3, [r7, #401]	; 0x191
 800ac86:	2bc7      	cmp	r3, #199	; 0xc7
 800ac88:	d9ee      	bls.n	800ac68 <main+0x97c>
				}

				while (i < MAXITNEMEUS)
 800ac8a:	e10b      	b.n	800aea4 <main+0xbb8>
				{
					if (buffer[i] == '+')
 800ac8c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ac90:	463a      	mov	r2, r7
 800ac92:	5cd3      	ldrb	r3, [r2, r3]
 800ac94:	2b2b      	cmp	r3, #43	; 0x2b
 800ac96:	d159      	bne.n	800ad4c <main+0xa60>
					{
						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'M'))
 800ac98:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ac9c:	2bc6      	cmp	r3, #198	; 0xc6
 800ac9e:	d806      	bhi.n	800acae <main+0x9c2>
 800aca0:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800aca4:	3301      	adds	r3, #1
 800aca6:	463a      	mov	r2, r7
 800aca8:	5cd3      	ldrb	r3, [r2, r3]
 800acaa:	2b4d      	cmp	r3, #77	; 0x4d
 800acac:	d007      	beq.n	800acbe <main+0x9d2>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'M')))
 800acae:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800acb2:	2bc7      	cmp	r3, #199	; 0xc7
 800acb4:	d120      	bne.n	800acf8 <main+0xa0c>
 800acb6:	463b      	mov	r3, r7
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	2b4d      	cmp	r3, #77	; 0x4d
 800acbc:	d11c      	bne.n	800acf8 <main+0xa0c>
						{
							if (buffer[i + 6] == 'R' || buffer[i + 14] == ','
 800acbe:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800acc2:	3306      	adds	r3, #6
 800acc4:	463a      	mov	r2, r7
 800acc6:	5cd3      	ldrb	r3, [r2, r3]
 800acc8:	2b52      	cmp	r3, #82	; 0x52
 800acca:	d00a      	beq.n	800ace2 <main+0x9f6>
 800accc:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800acd0:	330e      	adds	r3, #14
 800acd2:	463a      	mov	r2, r7
 800acd4:	5cd3      	ldrb	r3, [r2, r3]
 800acd6:	2b2c      	cmp	r3, #44	; 0x2c
 800acd8:	d003      	beq.n	800ace2 <main+0x9f6>
									|| GA_Nem == 1)
 800acda:	4b8e      	ldr	r3, [pc, #568]	; (800af14 <main+0xc28>)
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	2b01      	cmp	r3, #1
 800ace0:	d10a      	bne.n	800acf8 <main+0xa0c>
							{
								copy = 1;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
								if (GA_Nem != 0)
 800ace8:	4b8a      	ldr	r3, [pc, #552]	; (800af14 <main+0xc28>)
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <main+0xa0c>
									save_pos_start = i;
 800acf0:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800acf4:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'G'))
 800acf8:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800acfc:	2bc6      	cmp	r3, #198	; 0xc6
 800acfe:	d806      	bhi.n	800ad0e <main+0xa22>
 800ad00:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad04:	3301      	adds	r3, #1
 800ad06:	463a      	mov	r2, r7
 800ad08:	5cd3      	ldrb	r3, [r2, r3]
 800ad0a:	2b47      	cmp	r3, #71	; 0x47
 800ad0c:	d007      	beq.n	800ad1e <main+0xa32>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'G')))
 800ad0e:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad12:	2bc7      	cmp	r3, #199	; 0xc7
 800ad14:	d11a      	bne.n	800ad4c <main+0xa60>
 800ad16:	463b      	mov	r3, r7
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b47      	cmp	r3, #71	; 0x47
 800ad1c:	d116      	bne.n	800ad4c <main+0xa60>
						{
							GA_Nem = 1;
 800ad1e:	4b7d      	ldr	r3, [pc, #500]	; (800af14 <main+0xc28>)
 800ad20:	2201      	movs	r2, #1
 800ad22:	701a      	strb	r2, [r3, #0]
							save_pos_start = i;
 800ad24:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad28:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
							if (i + 16 < 100 && buffer[i + 16] == '\r')
 800ad2c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad30:	2b53      	cmp	r3, #83	; 0x53
 800ad32:	d80b      	bhi.n	800ad4c <main+0xa60>
 800ad34:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad38:	3310      	adds	r3, #16
 800ad3a:	463a      	mov	r2, r7
 800ad3c:	5cd3      	ldrb	r3, [r2, r3]
 800ad3e:	2b0d      	cmp	r3, #13
 800ad40:	d104      	bne.n	800ad4c <main+0xa60>
							{
								save_pos_end = i + 16;
 800ad42:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad46:	3310      	adds	r3, #16
 800ad48:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
							}
						}
					}
					if (buffer[i] == 'R')
 800ad4c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad50:	463a      	mov	r2, r7
 800ad52:	5cd3      	ldrb	r3, [r2, r3]
 800ad54:	2b52      	cmp	r3, #82	; 0x52
 800ad56:	d148      	bne.n	800adea <main+0xafe>
					{
						if (buffer[i + 1] == 'R' || buffer[i - 1] == 'E')
 800ad58:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	463a      	mov	r2, r7
 800ad60:	5cd3      	ldrb	r3, [r2, r3]
 800ad62:	2b52      	cmp	r3, #82	; 0x52
 800ad64:	d006      	beq.n	800ad74 <main+0xa88>
 800ad66:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad6a:	3b01      	subs	r3, #1
 800ad6c:	463a      	mov	r2, r7
 800ad6e:	5cd3      	ldrb	r3, [r2, r3]
 800ad70:	2b45      	cmp	r3, #69	; 0x45
 800ad72:	d11b      	bne.n	800adac <main+0xac0>
						{
							if (buffer[i - 11] == 'S' && buffer[i - 10] == 'F')
 800ad74:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad78:	3b0b      	subs	r3, #11
 800ad7a:	463a      	mov	r2, r7
 800ad7c:	5cd3      	ldrb	r3, [r2, r3]
 800ad7e:	2b53      	cmp	r3, #83	; 0x53
 800ad80:	d114      	bne.n	800adac <main+0xac0>
 800ad82:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad86:	3b0a      	subs	r3, #10
 800ad88:	463a      	mov	r2, r7
 800ad8a:	5cd3      	ldrb	r3, [r2, r3]
 800ad8c:	2b46      	cmp	r3, #70	; 0x46
 800ad8e:	d10d      	bne.n	800adac <main+0xac0>
							{
								//ERROR: End of SF Reception windows
								copy = 2;
 800ad90:	2302      	movs	r3, #2
 800ad92:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
								save_pos_start = i;
 800ad96:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ad9a:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
								if (DUAL_STATE_LS == ACK_SF_PENDING)
 800ad9e:	4b5e      	ldr	r3, [pc, #376]	; (800af18 <main+0xc2c>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d102      	bne.n	800adac <main+0xac0>
									DUAL_STATE_LS = NO_ACK_SF_RETRY;
 800ada6:	4b5c      	ldr	r3, [pc, #368]	; (800af18 <main+0xc2c>)
 800ada8:	2205      	movs	r2, #5
 800adaa:	701a      	strb	r2, [r3, #0]

							}
						}

						if (((i < MAXITNEMEUS - 1) && (buffer[i + 1] == 'C'))
 800adac:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800adb0:	2bc6      	cmp	r3, #198	; 0xc6
 800adb2:	d806      	bhi.n	800adc2 <main+0xad6>
 800adb4:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800adb8:	3301      	adds	r3, #1
 800adba:	463a      	mov	r2, r7
 800adbc:	5cd3      	ldrb	r3, [r2, r3]
 800adbe:	2b43      	cmp	r3, #67	; 0x43
 800adc0:	d007      	beq.n	800add2 <main+0xae6>
								|| ((i == MAXITNEMEUS - 1) && (buffer[0] == 'C')))
 800adc2:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800adc6:	2bc7      	cmp	r3, #199	; 0xc7
 800adc8:	d10f      	bne.n	800adea <main+0xafe>
 800adca:	463b      	mov	r3, r7
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	2b43      	cmp	r3, #67	; 0x43
 800add0:	d10b      	bne.n	800adea <main+0xafe>
						{
							copy = 1;
 800add2:	2301      	movs	r3, #1
 800add4:	f887 3193 	strb.w	r3, [r7, #403]	; 0x193
							i = i - 5;
 800add8:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800addc:	3b05      	subs	r3, #5
 800adde:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
							save_pos_start = i;
 800ade2:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ade6:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
						}
					}

					if (copy == 1)
 800adea:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800adee:	2b01      	cmp	r3, #1
 800adf0:	d153      	bne.n	800ae9a <main+0xbae>
					{
						uint8_t y = 0;
 800adf2:	2300      	movs	r3, #0
 800adf4:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
						Rx_bufferNemeus[y++] = buffer[i++];
 800adf8:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800adfc:	1c5a      	adds	r2, r3, #1
 800adfe:	f887 2192 	strb.w	r2, [r7, #402]	; 0x192
 800ae02:	4619      	mov	r1, r3
 800ae04:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae08:	1c5a      	adds	r2, r3, #1
 800ae0a:	f887 2190 	strb.w	r2, [r7, #400]	; 0x190
 800ae0e:	461a      	mov	r2, r3
 800ae10:	463b      	mov	r3, r7
 800ae12:	5c59      	ldrb	r1, [r3, r1]
 800ae14:	4b41      	ldr	r3, [pc, #260]	; (800af1c <main+0xc30>)
 800ae16:	5499      	strb	r1, [r3, r2]

						for (y; y < MAXITNEMEUS; y++)
 800ae18:	e03b      	b.n	800ae92 <main+0xba6>
						{
							if (buffer[i] != '\r')
 800ae1a:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ae1e:	463a      	mov	r2, r7
 800ae20:	5cd3      	ldrb	r3, [r2, r3]
 800ae22:	2b0d      	cmp	r3, #13
 800ae24:	d017      	beq.n	800ae56 <main+0xb6a>
							{
								if (i == MAXITNEMEUS && y < MAXITNEMEUS)
 800ae26:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ae2a:	2bc8      	cmp	r3, #200	; 0xc8
 800ae2c:	d106      	bne.n	800ae3c <main+0xb50>
 800ae2e:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae32:	2bc7      	cmp	r3, #199	; 0xc7
 800ae34:	d802      	bhi.n	800ae3c <main+0xb50>
									i = 0; // wrapping the circular buffer
 800ae36:	2300      	movs	r3, #0
 800ae38:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192

								Rx_bufferNemeus[y] = buffer[i++];
 800ae3c:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ae40:	1c5a      	adds	r2, r3, #1
 800ae42:	f887 2192 	strb.w	r2, [r7, #402]	; 0x192
 800ae46:	4619      	mov	r1, r3
 800ae48:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae4c:	463a      	mov	r2, r7
 800ae4e:	5c51      	ldrb	r1, [r2, r1]
 800ae50:	4a32      	ldr	r2, [pc, #200]	; (800af1c <main+0xc30>)
 800ae52:	54d1      	strb	r1, [r2, r3]
 800ae54:	e018      	b.n	800ae88 <main+0xb9c>
							}
							else
							{
								save_pos_end = i;
 800ae56:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ae5a:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
								for (y; y < MAXITNEMEUS; y++)
 800ae5e:	e009      	b.n	800ae74 <main+0xb88>
								{
									Rx_bufferNemeus[y] = 0;
 800ae60:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae64:	4a2d      	ldr	r2, [pc, #180]	; (800af1c <main+0xc30>)
 800ae66:	2100      	movs	r1, #0
 800ae68:	54d1      	strb	r1, [r2, r3]
								for (y; y < MAXITNEMEUS; y++)
 800ae6a:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae6e:	3301      	adds	r3, #1
 800ae70:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
 800ae74:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae78:	2bc7      	cmp	r3, #199	; 0xc7
 800ae7a:	d9f1      	bls.n	800ae60 <main+0xb74>
								}
								i = MAXITNEMEUS;
 800ae7c:	23c8      	movs	r3, #200	; 0xc8
 800ae7e:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
								y = MAXITNEMEUS;
 800ae82:	23c8      	movs	r3, #200	; 0xc8
 800ae84:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
						for (y; y < MAXITNEMEUS; y++)
 800ae88:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae8c:	3301      	adds	r3, #1
 800ae8e:	f887 3190 	strb.w	r3, [r7, #400]	; 0x190
 800ae92:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ae96:	2bc7      	cmp	r3, #199	; 0xc7
 800ae98:	d9bf      	bls.n	800ae1a <main+0xb2e>
							}
						}
					}
					i++;
 800ae9a:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800ae9e:	3301      	adds	r3, #1
 800aea0:	f887 3192 	strb.w	r3, [r7, #402]	; 0x192
				while (i < MAXITNEMEUS)
 800aea4:	f897 3192 	ldrb.w	r3, [r7, #402]	; 0x192
 800aea8:	2bc7      	cmp	r3, #199	; 0xc7
 800aeaa:	f67f aeef 	bls.w	800ac8c <main+0x9a0>
				}
				if (copy == 1)
 800aeae:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800aeb2:	2b01      	cmp	r3, #1
 800aeb4:	d101      	bne.n	800aeba <main+0xbce>
					Task_Read_Nemeus();
 800aeb6:	f7fc f8db 	bl	8007070 <Task_Read_Nemeus>

				if (copy == 1 || copy == 2)
 800aeba:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d003      	beq.n	800aeca <main+0xbde>
 800aec2:	f897 3193 	ldrb.w	r3, [r7, #403]	; 0x193
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	d119      	bne.n	800aefe <main+0xc12>
				{
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 800aeca:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800aece:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 800aed2:	e009      	b.n	800aee8 <main+0xbfc>
					{
						Rx_Nemeus[y] = 0;
 800aed4:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800aed8:	4a0d      	ldr	r2, [pc, #52]	; (800af10 <main+0xc24>)
 800aeda:	2100      	movs	r1, #0
 800aedc:	54d1      	strb	r1, [r2, r3]
					for (uint8_t y = save_pos_start; y < save_pos_end; y++)
 800aede:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800aee2:	3301      	adds	r3, #1
 800aee4:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 800aee8:	f897 218f 	ldrb.w	r2, [r7, #399]	; 0x18f
 800aeec:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d3ef      	bcc.n	800aed4 <main+0xbe8>
			{
 800aef4:	e003      	b.n	800aefe <main+0xc12>
					}
				}
			}
			else
				once_nem = 1;
 800aef6:	4b05      	ldr	r3, [pc, #20]	; (800af0c <main+0xc20>)
 800aef8:	2201      	movs	r2, #1
 800aefa:	701a      	strb	r2, [r3, #0]
 800aefc:	e45a      	b.n	800a7b4 <main+0x4c8>
			{
 800aefe:	bf00      	nop
	{
 800af00:	e458      	b.n	800a7b4 <main+0x4c8>
 800af02:	bf00      	nop
 800af04:	200007fc 	.word	0x200007fc
 800af08:	10624dd3 	.word	0x10624dd3
 800af0c:	200007fd 	.word	0x200007fd
 800af10:	20001e44 	.word	0x20001e44
 800af14:	20000c14 	.word	0x20000c14
 800af18:	20000c0b 	.word	0x20000c0b
 800af1c:	200027e8 	.word	0x200027e8

0800af20 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b0ae      	sub	sp, #184	; 0xb8
 800af24:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800af26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800af2a:	2244      	movs	r2, #68	; 0x44
 800af2c:	2100      	movs	r1, #0
 800af2e:	4618      	mov	r0, r3
 800af30:	f00d f8b2 	bl	8018098 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800af34:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	605a      	str	r2, [r3, #4]
 800af3e:	609a      	str	r2, [r3, #8]
 800af40:	60da      	str	r2, [r3, #12]
 800af42:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800af44:	463b      	mov	r3, r7
 800af46:	2260      	movs	r2, #96	; 0x60
 800af48:	2100      	movs	r1, #0
 800af4a:	4618      	mov	r0, r3
 800af4c:	f00d f8a4 	bl	8018098 <memset>
	{ 0 };

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 800af50:	f004 fb0e 	bl	800f570 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800af54:	4b3a      	ldr	r3, [pc, #232]	; (800b040 <SystemClock_Config+0x120>)
 800af56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af5a:	4a39      	ldr	r2, [pc, #228]	; (800b040 <SystemClock_Config+0x120>)
 800af5c:	f023 0318 	bic.w	r3, r3, #24
 800af60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48
 800af64:	233c      	movs	r3, #60	; 0x3c
 800af66:	677b      	str	r3, [r7, #116]	; 0x74
			| RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800af68:	2301      	movs	r3, #1
 800af6a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800af6c:	2301      	movs	r3, #1
 800af6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800af72:	2301      	movs	r3, #1
 800af74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800af78:	2301      	movs	r3, #1
 800af7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800af84:	2360      	movs	r3, #96	; 0x60
 800af86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800af8a:	2302      	movs	r3, #2
 800af8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800af90:	2301      	movs	r3, #1
 800af92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLM = 1;
 800af96:	2301      	movs	r3, #1
 800af98:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLN = 16;
 800af9c:	2310      	movs	r3, #16
 800af9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800afa2:	2307      	movs	r3, #7
 800afa4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800afa8:	2302      	movs	r3, #2
 800afaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800afae:	2302      	movs	r3, #2
 800afb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800afb4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800afb8:	4618      	mov	r0, r3
 800afba:	f004 fbf5 	bl	800f7a8 <HAL_RCC_OscConfig>
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d001      	beq.n	800afc8 <SystemClock_Config+0xa8>
	{
		Error_Handler();
 800afc4:	f000 f922 	bl	800b20c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800afc8:	230f      	movs	r3, #15
 800afca:	663b      	str	r3, [r7, #96]	; 0x60
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800afcc:	2303      	movs	r3, #3
 800afce:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800afd0:	2380      	movs	r3, #128	; 0x80
 800afd2:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800afd4:	2300      	movs	r3, #0
 800afd6:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800afd8:	2300      	movs	r3, #0
 800afda:	673b      	str	r3, [r7, #112]	; 0x70

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800afdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800afe0:	2100      	movs	r1, #0
 800afe2:	4618      	mov	r0, r3
 800afe4:	f005 f800 	bl	800ffe8 <HAL_RCC_ClockConfig>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d001      	beq.n	800aff2 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800afee:	f000 f90d 	bl	800b20c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1
 800aff2:	f242 03c7 	movw	r3, #8391	; 0x20c7
 800aff6:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | RCC_PERIPHCLK_I2C1
			| RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_USB;
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800aff8:	2300      	movs	r3, #0
 800affa:	623b      	str	r3, [r7, #32]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800affc:	2300      	movs	r3, #0
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800b000:	2300      	movs	r3, #0
 800b002:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800b004:	2300      	movs	r3, #0
 800b006:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800b008:	2300      	movs	r3, #0
 800b00a:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b00c:	2300      	movs	r3, #0
 800b00e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b010:	463b      	mov	r3, r7
 800b012:	4618      	mov	r0, r3
 800b014:	f005 f9ee 	bl	80103f4 <HAL_RCCEx_PeriphCLKConfig>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SystemClock_Config+0x102>
	{
		Error_Handler();
 800b01e:	f000 f8f5 	bl	800b20c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800b022:	f44f 7000 	mov.w	r0, #512	; 0x200
 800b026:	f004 fac1 	bl	800f5ac <HAL_PWREx_ControlVoltageScaling>
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d001      	beq.n	800b034 <SystemClock_Config+0x114>
	{
		Error_Handler();
 800b030:	f000 f8ec 	bl	800b20c <Error_Handler>
	}
	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800b034:	f005 fc24 	bl	8010880 <HAL_RCCEx_EnableMSIPLLMode>
}
 800b038:	bf00      	nop
 800b03a:	37b8      	adds	r7, #184	; 0xb8
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bd80      	pop	{r7, pc}
 800b040:	40021000 	.word	0x40021000

0800b044 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// ISR function for Timer 7, every 10 ms
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]

	if (htim->Instance == htim7.Instance)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	4b25      	ldr	r3, [pc, #148]	; (800b0e8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	429a      	cmp	r2, r3
 800b056:	d142      	bne.n	800b0de <HAL_TIM_PeriodElapsedCallback+0x9a>
	{

// loop control			
		if (count_tim7 < time_cnt)    // 1000 = 10 seconds,  100 = 1 second
 800b058:	4b24      	ldr	r3, [pc, #144]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	4b24      	ldr	r3, [pc, #144]	; (800b0f0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d205      	bcs.n	800b070 <HAL_TIM_PeriodElapsedCallback+0x2c>
			count_tim7++;
 800b064:	4b21      	ldr	r3, [pc, #132]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3301      	adds	r3, #1
 800b06a:	4a20      	ldr	r2, [pc, #128]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b06c:	6013      	str	r3, [r2, #0]
 800b06e:	e002      	b.n	800b076 <HAL_TIM_PeriodElapsedCallback+0x32>
		else
			count_tim7 = 0;
 800b070:	4b1e      	ldr	r3, [pc, #120]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b072:	2200      	movs	r2, #0
 800b074:	601a      	str	r2, [r3, #0]

		if (count_tim7 % 10 == 2)
 800b076:	4b1d      	ldr	r3, [pc, #116]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b078:	6819      	ldr	r1, [r3, #0]
 800b07a:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800b07c:	fba3 2301 	umull	r2, r3, r3, r1
 800b080:	08da      	lsrs	r2, r3, #3
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	1aca      	subs	r2, r1, r3
 800b08c:	2a02      	cmp	r2, #2
 800b08e:	d102      	bne.n	800b096 <HAL_TIM_PeriodElapsedCallback+0x52>
			every_100ms = 1; // not used
 800b090:	4b19      	ldr	r3, [pc, #100]	; (800b0f8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800b092:	2201      	movs	r2, #1
 800b094:	801a      	strh	r2, [r3, #0]

		if (count_tim7 == 400)      // every 20 seconds, 0 second after startup
 800b096:	4b15      	ldr	r3, [pc, #84]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800b09e:	d103      	bne.n	800b0a8 <HAL_TIM_PeriodElapsedCallback+0x64>
		{
			if (BATTERYOK == 1)
				Flag[F_BATTERY] = 1;
 800b0a0:	4b16      	ldr	r3, [pc, #88]	; (800b0fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	709a      	strb	r2, [r3, #2]
			TaskAlertManager(TabGen, &i_led);

			Flag[F_100HZ] = 1;
		}
	}
}
 800b0a6:	e01a      	b.n	800b0de <HAL_TIM_PeriodElapsedCallback+0x9a>
		else if (count_tim7 % 250 == +1) // every 20 seconds, 10 seconds after startup // 2
 800b0a8:	4b10      	ldr	r3, [pc, #64]	; (800b0ec <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	4b14      	ldr	r3, [pc, #80]	; (800b100 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800b0ae:	fba3 1302 	umull	r1, r3, r3, r2
 800b0b2:	091b      	lsrs	r3, r3, #4
 800b0b4:	21fa      	movs	r1, #250	; 0xfa
 800b0b6:	fb01 f303 	mul.w	r3, r1, r3
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d103      	bne.n	800b0c8 <HAL_TIM_PeriodElapsedCallback+0x84>
				Flag[F_CHARGER] = 1;
 800b0c0:	4b0e      	ldr	r3, [pc, #56]	; (800b0fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	705a      	strb	r2, [r3, #1]
}
 800b0c6:	e00a      	b.n	800b0de <HAL_TIM_PeriodElapsedCallback+0x9a>
			TaskButtonManager(TabGen, TabAlert);
 800b0c8:	490e      	ldr	r1, [pc, #56]	; (800b104 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800b0ca:	480f      	ldr	r0, [pc, #60]	; (800b108 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800b0cc:	f7fb fcca 	bl	8006a64 <TaskButtonManager>
			TaskAlertManager(TabGen, &i_led);
 800b0d0:	490e      	ldr	r1, [pc, #56]	; (800b10c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800b0d2:	480d      	ldr	r0, [pc, #52]	; (800b108 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800b0d4:	f7fb fd90 	bl	8006bf8 <TaskAlertManager>
			Flag[F_100HZ] = 1;
 800b0d8:	4b08      	ldr	r3, [pc, #32]	; (800b0fc <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800b0da:	2201      	movs	r2, #1
 800b0dc:	70da      	strb	r2, [r3, #3]
}
 800b0de:	bf00      	nop
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20003350 	.word	0x20003350
 800b0ec:	20000c20 	.word	0x20000c20
 800b0f0:	20000800 	.word	0x20000800
 800b0f4:	cccccccd 	.word	0xcccccccd
 800b0f8:	20000c12 	.word	0x20000c12
 800b0fc:	20002c7c 	.word	0x20002c7c
 800b100:	10624dd3 	.word	0x10624dd3
 800b104:	20003130 	.word	0x20003130
 800b108:	20002584 	.word	0x20002584
 800b10c:	20000c18 	.word	0x20000c18

0800b110 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{ // fonction d'interruption qui s'execute chaque 50 caract�re qui se mettent dans Rx_datagps[]
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
//TaskUARTMessage(TabGen, WifiName, TabDist, TabTimer, huart);
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <WakeUpNemeus_forID>:
	ErasingOnGoing = 0;

}

void WakeUpNemeus_forID(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
	WakeUpNemeusLS();
 800b128:	f7f9 fc96 	bl	8004a58 <WakeUpNemeusLS>
	RebootNemeusLS(TabGen);
 800b12c:	4807      	ldr	r0, [pc, #28]	; (800b14c <WakeUpNemeus_forID+0x28>)
 800b12e:	f7f9 fca1 	bl	8004a74 <RebootNemeusLS>
	HAL_UART_Receive_DMA(&huart3, Rx_Nemeus, MAXITNEMEUS);
 800b132:	22c8      	movs	r2, #200	; 0xc8
 800b134:	4906      	ldr	r1, [pc, #24]	; (800b150 <WakeUpNemeus_forID+0x2c>)
 800b136:	4807      	ldr	r0, [pc, #28]	; (800b154 <WakeUpNemeus_forID+0x30>)
 800b138:	f006 feb2 	bl	8011ea0 <HAL_UART_Receive_DMA>
	DMA_Done = 1;
 800b13c:	4b06      	ldr	r3, [pc, #24]	; (800b158 <WakeUpNemeus_forID+0x34>)
 800b13e:	2201      	movs	r2, #1
 800b140:	701a      	strb	r2, [r3, #0]
	HAL_Delay(200);
 800b142:	20c8      	movs	r0, #200	; 0xc8
 800b144:	f000 fdc0 	bl	800bcc8 <HAL_Delay>
}
 800b148:	bf00      	nop
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	20002584 	.word	0x20002584
 800b150:	20001e44 	.word	0x20001e44
 800b154:	20003534 	.word	0x20003534
 800b158:	20000bfc 	.word	0x20000bfc

0800b15c <vibration_LBL>:

void vibration_LBL(uint8_t nb_de_vibration, unsigned short pause_vib,
		unsigned short duree_vib)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b082      	sub	sp, #8
 800b160:	af00      	add	r7, sp, #0
 800b162:	4603      	mov	r3, r0
 800b164:	71fb      	strb	r3, [r7, #7]
 800b166:	460b      	mov	r3, r1
 800b168:	80bb      	strh	r3, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	807b      	strh	r3, [r7, #2]
	while (nb_de_vibration > 0)
 800b16e:	e00a      	b.n	800b186 <vibration_LBL+0x2a>
	{
		PowerVib(duree_vib);
 800b170:	887b      	ldrh	r3, [r7, #2]
 800b172:	4618      	mov	r0, r3
 800b174:	f7f7 fcb3 	bl	8002ade <PowerVib>
		HAL_Delay(pause_vib);
 800b178:	88bb      	ldrh	r3, [r7, #4]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fda4 	bl	800bcc8 <HAL_Delay>
		nb_de_vibration--;
 800b180:	79fb      	ldrb	r3, [r7, #7]
 800b182:	3b01      	subs	r3, #1
 800b184:	71fb      	strb	r3, [r7, #7]
	while (nb_de_vibration > 0)
 800b186:	79fb      	ldrb	r3, [r7, #7]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d1f1      	bne.n	800b170 <vibration_LBL+0x14>
	}
}
 800b18c:	bf00      	nop
 800b18e:	bf00      	nop
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
	...

0800b198 <jumpToBootloader>:
typedef void (*pFunction)(void);
pFunction JumpToApplication;
uint32_t JumpAddress;

void jumpToBootloader(void)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b082      	sub	sp, #8
 800b19c:	af00      	add	r7, sp, #0

	/* Test if user code is programmed starting from address 0x0800C000 */
	/*if(((*(__IO uint32_t*)DFU_BOOTLOADER_ADD) & 0x2FFE0000 ) == 0x20000000)*/
	/* Jump to user application */

	HAL_RCC_DeInit();
 800b19e:	f004 fa6b 	bl	800f678 <HAL_RCC_DeInit>

	SysTick->CTRL = 0;
 800b1a2:	4b15      	ldr	r3, [pc, #84]	; (800b1f8 <jumpToBootloader+0x60>)
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800b1a8:	4b13      	ldr	r3, [pc, #76]	; (800b1f8 <jumpToBootloader+0x60>)
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800b1ae:	4b12      	ldr	r3, [pc, #72]	; (800b1f8 <jumpToBootloader+0x60>)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	609a      	str	r2, [r3, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800b1b4:	b672      	cpsid	i
}
 800b1b6:	bf00      	nop

	__disable_irq();

	__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH();
 800b1b8:	4b10      	ldr	r3, [pc, #64]	; (800b1fc <jumpToBootloader+0x64>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f023 0307 	bic.w	r3, r3, #7
 800b1c0:	4a0e      	ldr	r2, [pc, #56]	; (800b1fc <jumpToBootloader+0x64>)
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	6013      	str	r3, [r2, #0]

	JumpAddress = *(__IO uint32_t*) (DFU_BOOTLOADER_ADD + 4);
 800b1c8:	4b0d      	ldr	r3, [pc, #52]	; (800b200 <jumpToBootloader+0x68>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	4a0d      	ldr	r2, [pc, #52]	; (800b204 <jumpToBootloader+0x6c>)
 800b1ce:	6013      	str	r3, [r2, #0]
	JumpToApplication = (pFunction) JumpAddress;
 800b1d0:	4b0c      	ldr	r3, [pc, #48]	; (800b204 <jumpToBootloader+0x6c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	461a      	mov	r2, r3
 800b1d6:	4b0c      	ldr	r3, [pc, #48]	; (800b208 <jumpToBootloader+0x70>)
 800b1d8:	601a      	str	r2, [r3, #0]

	/* Initialize user application's Stack Pointer */
	__set_MSP(*(__IO uint32_t*) 0x08000000);
 800b1da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	f383 8808 	msr	MSP, r3
}
 800b1e8:	bf00      	nop
	JumpToApplication();
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <jumpToBootloader+0x70>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4798      	blx	r3
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}
 800b1f8:	e000e010 	.word	0xe000e010
 800b1fc:	40010000 	.word	0x40010000
 800b200:	1fff0004 	.word	0x1fff0004
 800b204:	20001e40 	.word	0x20001e40
 800b208:	200026f0 	.word	0x200026f0

0800b20c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800b20c:	b480      	push	{r7}
 800b20e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800b210:	bf00      	nop
 800b212:	46bd      	mov	sp, r7
 800b214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b218:	4770      	bx	lr
	...

0800b21c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b222:	4b0f      	ldr	r3, [pc, #60]	; (800b260 <HAL_MspInit+0x44>)
 800b224:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b226:	4a0e      	ldr	r2, [pc, #56]	; (800b260 <HAL_MspInit+0x44>)
 800b228:	f043 0301 	orr.w	r3, r3, #1
 800b22c:	6613      	str	r3, [r2, #96]	; 0x60
 800b22e:	4b0c      	ldr	r3, [pc, #48]	; (800b260 <HAL_MspInit+0x44>)
 800b230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b232:	f003 0301 	and.w	r3, r3, #1
 800b236:	607b      	str	r3, [r7, #4]
 800b238:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b23a:	4b09      	ldr	r3, [pc, #36]	; (800b260 <HAL_MspInit+0x44>)
 800b23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b23e:	4a08      	ldr	r2, [pc, #32]	; (800b260 <HAL_MspInit+0x44>)
 800b240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b244:	6593      	str	r3, [r2, #88]	; 0x58
 800b246:	4b06      	ldr	r3, [pc, #24]	; (800b260 <HAL_MspInit+0x44>)
 800b248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b24a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b24e:	603b      	str	r3, [r7, #0]
 800b250:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b252:	bf00      	nop
 800b254:	370c      	adds	r7, #12
 800b256:	46bd      	mov	sp, r7
 800b258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25c:	4770      	bx	lr
 800b25e:	bf00      	nop
 800b260:	40021000 	.word	0x40021000

0800b264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b264:	b480      	push	{r7}
 800b266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800b268:	bf00      	nop
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b272:	b480      	push	{r7}
 800b274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b276:	e7fe      	b.n	800b276 <HardFault_Handler+0x4>

0800b278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b278:	b480      	push	{r7}
 800b27a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b27c:	e7fe      	b.n	800b27c <MemManage_Handler+0x4>

0800b27e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b27e:	b480      	push	{r7}
 800b280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b282:	e7fe      	b.n	800b282 <BusFault_Handler+0x4>

0800b284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b284:	b480      	push	{r7}
 800b286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b288:	e7fe      	b.n	800b288 <UsageFault_Handler+0x4>

0800b28a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b28a:	b480      	push	{r7}
 800b28c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b28e:	bf00      	nop
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr

0800b298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b29c:	bf00      	nop
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr

0800b2a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b2a6:	b480      	push	{r7}
 800b2a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b2aa:	bf00      	nop
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b2b8:	f000 fce6 	bl	800bc88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b2bc:	bf00      	nop
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800b2c4:	4802      	ldr	r0, [pc, #8]	; (800b2d0 <DMA1_Channel3_IRQHandler+0x10>)
 800b2c6:	f000 ffcc 	bl	800c262 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800b2ca:	bf00      	nop
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	200033e4 	.word	0x200033e4

0800b2d4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800b2d8:	4802      	ldr	r0, [pc, #8]	; (800b2e4 <DMA1_Channel5_IRQHandler+0x10>)
 800b2da:	f000 ffc2 	bl	800c262 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800b2de:	bf00      	nop
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	2000339c 	.word	0x2000339c

0800b2e8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b2ec:	4802      	ldr	r0, [pc, #8]	; (800b2f8 <DMA1_Channel6_IRQHandler+0x10>)
 800b2ee:	f000 ffb8 	bl	800c262 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800b2f2:	bf00      	nop
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200035b8 	.word	0x200035b8

0800b2fc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800b300:	4802      	ldr	r0, [pc, #8]	; (800b30c <TIM1_UP_TIM16_IRQHandler+0x10>)
 800b302:	f005 fe33 	bl	8010f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800b306:	bf00      	nop
 800b308:	bd80      	pop	{r7, pc}
 800b30a:	bf00      	nop
 800b30c:	20003304 	.word	0x20003304

0800b310 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800b314:	4802      	ldr	r0, [pc, #8]	; (800b320 <USART1_IRQHandler+0x10>)
 800b316:	f006 fe07 	bl	8011f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800b31a:	bf00      	nop
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000342c 	.word	0x2000342c

0800b324 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b328:	4802      	ldr	r0, [pc, #8]	; (800b334 <USART2_IRQHandler+0x10>)
 800b32a:	f006 fdfd 	bl	8011f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b32e:	bf00      	nop
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	200034b0 	.word	0x200034b0

0800b338 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800b33c:	4802      	ldr	r0, [pc, #8]	; (800b348 <USART3_IRQHandler+0x10>)
 800b33e:	f006 fdf3 	bl	8011f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800b342:	bf00      	nop
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20003534 	.word	0x20003534

0800b34c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800b350:	4802      	ldr	r0, [pc, #8]	; (800b35c <TIM7_IRQHandler+0x10>)
 800b352:	f005 fe0b 	bl	8010f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800b356:	bf00      	nop
 800b358:	bd80      	pop	{r7, pc}
 800b35a:	bf00      	nop
 800b35c:	20003350 	.word	0x20003350

0800b360 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt through EXTI line 17.
  */
void USB_IRQHandler(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b364:	4802      	ldr	r0, [pc, #8]	; (800b370 <USB_IRQHandler+0x10>)
 800b366:	f002 fd68 	bl	800de3a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800b36a:	bf00      	nop
 800b36c:	bd80      	pop	{r7, pc}
 800b36e:	bf00      	nop
 800b370:	20003ad4 	.word	0x20003ad4

0800b374 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b374:	b480      	push	{r7}
 800b376:	af00      	add	r7, sp, #0
	return 1;
 800b378:	2301      	movs	r3, #1
}
 800b37a:	4618      	mov	r0, r3
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <_kill>:

int _kill(int pid, int sig)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b082      	sub	sp, #8
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
 800b38c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800b38e:	f00c fe4b 	bl	8018028 <__errno>
 800b392:	4603      	mov	r3, r0
 800b394:	2216      	movs	r2, #22
 800b396:	601a      	str	r2, [r3, #0]
	return -1;
 800b398:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <_exit>:

void _exit (int status)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800b3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ffe7 	bl	800b384 <_kill>
	while (1) {}		/* Make sure we hang here */
 800b3b6:	e7fe      	b.n	800b3b6 <_exit+0x12>

0800b3b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b086      	sub	sp, #24
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	60f8      	str	r0, [r7, #12]
 800b3c0:	60b9      	str	r1, [r7, #8]
 800b3c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	617b      	str	r3, [r7, #20]
 800b3c8:	e00a      	b.n	800b3e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800b3ca:	f3af 8000 	nop.w
 800b3ce:	4601      	mov	r1, r0
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	1c5a      	adds	r2, r3, #1
 800b3d4:	60ba      	str	r2, [r7, #8]
 800b3d6:	b2ca      	uxtb	r2, r1
 800b3d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3da:	697b      	ldr	r3, [r7, #20]
 800b3dc:	3301      	adds	r3, #1
 800b3de:	617b      	str	r3, [r7, #20]
 800b3e0:	697a      	ldr	r2, [r7, #20]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	dbf0      	blt.n	800b3ca <_read+0x12>
	}

return len;
 800b3e8:	687b      	ldr	r3, [r7, #4]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b086      	sub	sp, #24
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b3fe:	2300      	movs	r3, #0
 800b400:	617b      	str	r3, [r7, #20]
 800b402:	e009      	b.n	800b418 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	1c5a      	adds	r2, r3, #1
 800b408:	60ba      	str	r2, [r7, #8]
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4618      	mov	r0, r3
 800b40e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	3301      	adds	r3, #1
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	697a      	ldr	r2, [r7, #20]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	429a      	cmp	r2, r3
 800b41e:	dbf1      	blt.n	800b404 <_write+0x12>
	}
	return len;
 800b420:	687b      	ldr	r3, [r7, #4]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <_close>:

int _close(int file)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
	return -1;
 800b432:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b436:	4618      	mov	r0, r3
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b452:	605a      	str	r2, [r3, #4]
	return 0;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <_isatty>:

int _isatty(int file)
{
 800b462:	b480      	push	{r7}
 800b464:	b083      	sub	sp, #12
 800b466:	af00      	add	r7, sp, #0
 800b468:	6078      	str	r0, [r7, #4]
	return 1;
 800b46a:	2301      	movs	r3, #1
}
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b478:	b480      	push	{r7}
 800b47a:	b085      	sub	sp, #20
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
	return 0;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3714      	adds	r7, #20
 800b48a:	46bd      	mov	sp, r7
 800b48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b490:	4770      	bx	lr
	...

0800b494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b086      	sub	sp, #24
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b49c:	4a14      	ldr	r2, [pc, #80]	; (800b4f0 <_sbrk+0x5c>)
 800b49e:	4b15      	ldr	r3, [pc, #84]	; (800b4f4 <_sbrk+0x60>)
 800b4a0:	1ad3      	subs	r3, r2, r3
 800b4a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b4a8:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <_sbrk+0x64>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b4b0:	4b11      	ldr	r3, [pc, #68]	; (800b4f8 <_sbrk+0x64>)
 800b4b2:	4a12      	ldr	r2, [pc, #72]	; (800b4fc <_sbrk+0x68>)
 800b4b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b4b6:	4b10      	ldr	r3, [pc, #64]	; (800b4f8 <_sbrk+0x64>)
 800b4b8:	681a      	ldr	r2, [r3, #0]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4413      	add	r3, r2
 800b4be:	693a      	ldr	r2, [r7, #16]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d207      	bcs.n	800b4d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b4c4:	f00c fdb0 	bl	8018028 <__errno>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	220c      	movs	r2, #12
 800b4cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b4ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d2:	e009      	b.n	800b4e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b4d4:	4b08      	ldr	r3, [pc, #32]	; (800b4f8 <_sbrk+0x64>)
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b4da:	4b07      	ldr	r3, [pc, #28]	; (800b4f8 <_sbrk+0x64>)
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <_sbrk+0x64>)
 800b4e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3718      	adds	r7, #24
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bd80      	pop	{r7, pc}
 800b4f0:	20010000 	.word	0x20010000
 800b4f4:	00000800 	.word	0x00000800
 800b4f8:	20000c2c 	.word	0x20000c2c
 800b4fc:	20003dd8 	.word	0x20003dd8

0800b500 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b500:	b480      	push	{r7}
 800b502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b504:	4b17      	ldr	r3, [pc, #92]	; (800b564 <SystemInit+0x64>)
 800b506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b50a:	4a16      	ldr	r2, [pc, #88]	; (800b564 <SystemInit+0x64>)
 800b50c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800b514:	4b14      	ldr	r3, [pc, #80]	; (800b568 <SystemInit+0x68>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a13      	ldr	r2, [pc, #76]	; (800b568 <SystemInit+0x68>)
 800b51a:	f043 0301 	orr.w	r3, r3, #1
 800b51e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800b520:	4b11      	ldr	r3, [pc, #68]	; (800b568 <SystemInit+0x68>)
 800b522:	2200      	movs	r2, #0
 800b524:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800b526:	4b10      	ldr	r3, [pc, #64]	; (800b568 <SystemInit+0x68>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	4a0f      	ldr	r2, [pc, #60]	; (800b568 <SystemInit+0x68>)
 800b52c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800b530:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800b534:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <SystemInit+0x68>)
 800b538:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b53c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800b53e:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <SystemInit+0x68>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a09      	ldr	r2, [pc, #36]	; (800b568 <SystemInit+0x68>)
 800b544:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b548:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800b54a:	4b07      	ldr	r3, [pc, #28]	; (800b568 <SystemInit+0x68>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b550:	4b04      	ldr	r3, [pc, #16]	; (800b564 <SystemInit+0x64>)
 800b552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800b556:	609a      	str	r2, [r3, #8]
#endif
}
 800b558:	bf00      	nop
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	e000ed00 	.word	0xe000ed00
 800b568:	40021000 	.word	0x40021000

0800b56c <MX_TIM7_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim16;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b572:	1d3b      	adds	r3, r7, #4
 800b574:	2200      	movs	r2, #0
 800b576:	601a      	str	r2, [r3, #0]
 800b578:	605a      	str	r2, [r3, #4]
 800b57a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800b57c:	4b14      	ldr	r3, [pc, #80]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b57e:	4a15      	ldr	r2, [pc, #84]	; (800b5d4 <MX_TIM7_Init+0x68>)
 800b580:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10-1;
 800b582:	4b13      	ldr	r3, [pc, #76]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b584:	2209      	movs	r2, #9
 800b586:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b588:	4b11      	ldr	r3, [pc, #68]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b58a:	2200      	movs	r2, #0
 800b58c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 16000-1;
 800b58e:	4b10      	ldr	r3, [pc, #64]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b590:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800b594:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b596:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b598:	2200      	movs	r2, #0
 800b59a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800b59c:	480c      	ldr	r0, [pc, #48]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b59e:	f005 fa71 	bl	8010a84 <HAL_TIM_Base_Init>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d001      	beq.n	800b5ac <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800b5a8:	f7ff fe30 	bl	800b20c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800b5b4:	1d3b      	adds	r3, r7, #4
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	4805      	ldr	r0, [pc, #20]	; (800b5d0 <MX_TIM7_Init+0x64>)
 800b5ba:	f006 fa37 	bl	8011a2c <HAL_TIMEx_MasterConfigSynchronization>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d001      	beq.n	800b5c8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800b5c4:	f7ff fe22 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800b5c8:	bf00      	nop
 800b5ca:	3710      	adds	r7, #16
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	20003350 	.word	0x20003350
 800b5d4:	40001400 	.word	0x40001400

0800b5d8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b092      	sub	sp, #72	; 0x48
 800b5dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800b5de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	601a      	str	r2, [r3, #0]
 800b5e6:	605a      	str	r2, [r3, #4]
 800b5e8:	609a      	str	r2, [r3, #8]
 800b5ea:	60da      	str	r2, [r3, #12]
 800b5ec:	611a      	str	r2, [r3, #16]
 800b5ee:	615a      	str	r2, [r3, #20]
 800b5f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800b5f2:	463b      	mov	r3, r7
 800b5f4:	222c      	movs	r2, #44	; 0x2c
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f00c fd4d 	bl	8018098 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800b5fe:	4b30      	ldr	r3, [pc, #192]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b600:	4a30      	ldr	r2, [pc, #192]	; (800b6c4 <MX_TIM16_Init+0xec>)
 800b602:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 400-1;
 800b604:	4b2e      	ldr	r3, [pc, #184]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b606:	f240 128f 	movw	r2, #399	; 0x18f
 800b60a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b60c:	4b2c      	ldr	r3, [pc, #176]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b60e:	2200      	movs	r2, #0
 800b610:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10-1;
 800b612:	4b2b      	ldr	r3, [pc, #172]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b614:	2209      	movs	r2, #9
 800b616:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b618:	4b29      	ldr	r3, [pc, #164]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800b61e:	4b28      	ldr	r3, [pc, #160]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b620:	2200      	movs	r2, #0
 800b622:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b624:	4b26      	ldr	r3, [pc, #152]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b626:	2200      	movs	r2, #0
 800b628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800b62a:	4825      	ldr	r0, [pc, #148]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b62c:	f005 fa2a 	bl	8010a84 <HAL_TIM_Base_Init>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 800b636:	f7ff fde9 	bl	800b20c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800b63a:	4821      	ldr	r0, [pc, #132]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b63c:	f005 face 	bl	8010bdc <HAL_TIM_PWM_Init>
 800b640:	4603      	mov	r3, r0
 800b642:	2b00      	cmp	r3, #0
 800b644:	d001      	beq.n	800b64a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 800b646:	f7ff fde1 	bl	800b20c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b64a:	2360      	movs	r3, #96	; 0x60
 800b64c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 5;
 800b64e:	2305      	movs	r3, #5
 800b650:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b652:	2300      	movs	r3, #0
 800b654:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800b656:	2300      	movs	r3, #0
 800b658:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800b65e:	2300      	movs	r3, #0
 800b660:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800b662:	2300      	movs	r3, #0
 800b664:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b666:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b66a:	2200      	movs	r2, #0
 800b66c:	4619      	mov	r1, r3
 800b66e:	4814      	ldr	r0, [pc, #80]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b670:	f005 fd9c 	bl	80111ac <HAL_TIM_PWM_ConfigChannel>
 800b674:	4603      	mov	r3, r0
 800b676:	2b00      	cmp	r3, #0
 800b678:	d001      	beq.n	800b67e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800b67a:	f7ff fdc7 	bl	800b20c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800b67e:	2300      	movs	r3, #0
 800b680:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800b682:	2300      	movs	r3, #0
 800b684:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800b686:	2300      	movs	r3, #0
 800b688:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800b68a:	2300      	movs	r3, #0
 800b68c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800b68e:	2300      	movs	r3, #0
 800b690:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800b692:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b696:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800b698:	2300      	movs	r3, #0
 800b69a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800b69c:	463b      	mov	r3, r7
 800b69e:	4619      	mov	r1, r3
 800b6a0:	4807      	ldr	r0, [pc, #28]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b6a2:	f006 fa29 	bl	8011af8 <HAL_TIMEx_ConfigBreakDeadTime>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d001      	beq.n	800b6b0 <MX_TIM16_Init+0xd8>
  {
    Error_Handler();
 800b6ac:	f7ff fdae 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800b6b0:	4803      	ldr	r0, [pc, #12]	; (800b6c0 <MX_TIM16_Init+0xe8>)
 800b6b2:	f000 f84b 	bl	800b74c <HAL_TIM_MspPostInit>

}
 800b6b6:	bf00      	nop
 800b6b8:	3748      	adds	r7, #72	; 0x48
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}
 800b6be:	bf00      	nop
 800b6c0:	20003304 	.word	0x20003304
 800b6c4:	40014400 	.word	0x40014400

0800b6c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	; (800b740 <HAL_TIM_Base_MspInit+0x78>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d114      	bne.n	800b704 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800b6da:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6de:	4a19      	ldr	r2, [pc, #100]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b6e0:	f043 0320 	orr.w	r3, r3, #32
 800b6e4:	6593      	str	r3, [r2, #88]	; 0x58
 800b6e6:	4b17      	ldr	r3, [pc, #92]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b6e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6ea:	f003 0320 	and.w	r3, r3, #32
 800b6ee:	60fb      	str	r3, [r7, #12]
 800b6f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	2100      	movs	r1, #0
 800b6f6:	2037      	movs	r0, #55	; 0x37
 800b6f8:	f000 fbe5 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800b6fc:	2037      	movs	r0, #55	; 0x37
 800b6fe:	f000 fbfe 	bl	800befe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800b702:	e018      	b.n	800b736 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM16)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	4a0f      	ldr	r2, [pc, #60]	; (800b748 <HAL_TIM_Base_MspInit+0x80>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d113      	bne.n	800b736 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800b70e:	4b0d      	ldr	r3, [pc, #52]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b712:	4a0c      	ldr	r2, [pc, #48]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b718:	6613      	str	r3, [r2, #96]	; 0x60
 800b71a:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <HAL_TIM_Base_MspInit+0x7c>)
 800b71c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800b726:	2200      	movs	r2, #0
 800b728:	2101      	movs	r1, #1
 800b72a:	2019      	movs	r0, #25
 800b72c:	f000 fbcb 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800b730:	2019      	movs	r0, #25
 800b732:	f000 fbe4 	bl	800befe <HAL_NVIC_EnableIRQ>
}
 800b736:	bf00      	nop
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
 800b73e:	bf00      	nop
 800b740:	40001400 	.word	0x40001400
 800b744:	40021000 	.word	0x40021000
 800b748:	40014400 	.word	0x40014400

0800b74c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b754:	f107 030c 	add.w	r3, r7, #12
 800b758:	2200      	movs	r2, #0
 800b75a:	601a      	str	r2, [r3, #0]
 800b75c:	605a      	str	r2, [r3, #4]
 800b75e:	609a      	str	r2, [r3, #8]
 800b760:	60da      	str	r2, [r3, #12]
 800b762:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM16)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a11      	ldr	r2, [pc, #68]	; (800b7b0 <HAL_TIM_MspPostInit+0x64>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d11c      	bne.n	800b7a8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM16_MspPostInit 0 */

  /* USER CODE END TIM16_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b76e:	4b11      	ldr	r3, [pc, #68]	; (800b7b4 <HAL_TIM_MspPostInit+0x68>)
 800b770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b772:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <HAL_TIM_MspPostInit+0x68>)
 800b774:	f043 0301 	orr.w	r3, r3, #1
 800b778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b77a:	4b0e      	ldr	r3, [pc, #56]	; (800b7b4 <HAL_TIM_MspPostInit+0x68>)
 800b77c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	60bb      	str	r3, [r7, #8]
 800b784:	68bb      	ldr	r3, [r7, #8]
    /**TIM16 GPIO Configuration
    PA6     ------> TIM16_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800b786:	2340      	movs	r3, #64	; 0x40
 800b788:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b78a:	2302      	movs	r3, #2
 800b78c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b792:	2300      	movs	r3, #0
 800b794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM16;
 800b796:	230e      	movs	r3, #14
 800b798:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b79a:	f107 030c 	add.w	r3, r7, #12
 800b79e:	4619      	mov	r1, r3
 800b7a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b7a4:	f001 f8b4 	bl	800c910 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800b7a8:	bf00      	nop
 800b7aa:	3720      	adds	r7, #32
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	40014400 	.word	0x40014400
 800b7b4:	40021000 	.word	0x40021000

0800b7b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b7bc:	4b14      	ldr	r3, [pc, #80]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7be:	4a15      	ldr	r2, [pc, #84]	; (800b814 <MX_USART1_UART_Init+0x5c>)
 800b7c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b7c2:	4b13      	ldr	r3, [pc, #76]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b7c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b7ca:	4b11      	ldr	r3, [pc, #68]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b7d0:	4b0f      	ldr	r3, [pc, #60]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b7d6:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7de:	220c      	movs	r2, #12
 800b7e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b7e2:	4b0b      	ldr	r3, [pc, #44]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b7e8:	4b09      	ldr	r3, [pc, #36]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b7ee:	4b08      	ldr	r3, [pc, #32]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b7f4:	4b06      	ldr	r3, [pc, #24]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b7fa:	4805      	ldr	r0, [pc, #20]	; (800b810 <MX_USART1_UART_Init+0x58>)
 800b7fc:	f006 fa12 	bl	8011c24 <HAL_UART_Init>
 800b800:	4603      	mov	r3, r0
 800b802:	2b00      	cmp	r3, #0
 800b804:	d001      	beq.n	800b80a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800b806:	f7ff fd01 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b80a:	bf00      	nop
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	2000342c 	.word	0x2000342c
 800b814:	40013800 	.word	0x40013800

0800b818 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800b81c:	4b14      	ldr	r3, [pc, #80]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b81e:	4a15      	ldr	r2, [pc, #84]	; (800b874 <MX_USART2_UART_Init+0x5c>)
 800b820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800b822:	4b13      	ldr	r3, [pc, #76]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b824:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800b828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800b82a:	4b11      	ldr	r3, [pc, #68]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800b830:	4b0f      	ldr	r3, [pc, #60]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b832:	2200      	movs	r2, #0
 800b834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800b836:	4b0e      	ldr	r3, [pc, #56]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b838:	2200      	movs	r2, #0
 800b83a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800b83c:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b83e:	220c      	movs	r2, #12
 800b840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b842:	4b0b      	ldr	r3, [pc, #44]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b844:	2200      	movs	r2, #0
 800b846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800b848:	4b09      	ldr	r3, [pc, #36]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b84e:	4b08      	ldr	r3, [pc, #32]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b850:	2200      	movs	r2, #0
 800b852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b854:	4b06      	ldr	r3, [pc, #24]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b856:	2200      	movs	r2, #0
 800b858:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800b85a:	4805      	ldr	r0, [pc, #20]	; (800b870 <MX_USART2_UART_Init+0x58>)
 800b85c:	f006 f9e2 	bl	8011c24 <HAL_UART_Init>
 800b860:	4603      	mov	r3, r0
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800b866:	f7ff fcd1 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800b86a:	bf00      	nop
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	200034b0 	.word	0x200034b0
 800b874:	40004400 	.word	0x40004400

0800b878 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b87c:	4b14      	ldr	r3, [pc, #80]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b87e:	4a15      	ldr	r2, [pc, #84]	; (800b8d4 <MX_USART3_UART_Init+0x5c>)
 800b880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800b882:	4b13      	ldr	r3, [pc, #76]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b884:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800b888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b88a:	4b11      	ldr	r3, [pc, #68]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b88c:	2200      	movs	r2, #0
 800b88e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b890:	4b0f      	ldr	r3, [pc, #60]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b892:	2200      	movs	r2, #0
 800b894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b896:	4b0e      	ldr	r3, [pc, #56]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b898:	2200      	movs	r2, #0
 800b89a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b89c:	4b0c      	ldr	r3, [pc, #48]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b89e:	220c      	movs	r2, #12
 800b8a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b8a2:	4b0b      	ldr	r3, [pc, #44]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b8a4:	2200      	movs	r2, #0
 800b8a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b8a8:	4b09      	ldr	r3, [pc, #36]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b8ae:	4b08      	ldr	r3, [pc, #32]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b8b4:	4b06      	ldr	r3, [pc, #24]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b8ba:	4805      	ldr	r0, [pc, #20]	; (800b8d0 <MX_USART3_UART_Init+0x58>)
 800b8bc:	f006 f9b2 	bl	8011c24 <HAL_UART_Init>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d001      	beq.n	800b8ca <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800b8c6:	f7ff fca1 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b8ca:	bf00      	nop
 800b8cc:	bd80      	pop	{r7, pc}
 800b8ce:	bf00      	nop
 800b8d0:	20003534 	.word	0x20003534
 800b8d4:	40004800 	.word	0x40004800

0800b8d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08e      	sub	sp, #56	; 0x38
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	601a      	str	r2, [r3, #0]
 800b8e8:	605a      	str	r2, [r3, #4]
 800b8ea:	609a      	str	r2, [r3, #8]
 800b8ec:	60da      	str	r2, [r3, #12]
 800b8ee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	4a9a      	ldr	r2, [pc, #616]	; (800bb60 <HAL_UART_MspInit+0x288>)
 800b8f6:	4293      	cmp	r3, r2
 800b8f8:	d15b      	bne.n	800b9b2 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800b8fa:	4b9a      	ldr	r3, [pc, #616]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b8fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8fe:	4a99      	ldr	r2, [pc, #612]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b904:	6613      	str	r3, [r2, #96]	; 0x60
 800b906:	4b97      	ldr	r3, [pc, #604]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b90a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b90e:	623b      	str	r3, [r7, #32]
 800b910:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b912:	4b94      	ldr	r3, [pc, #592]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b916:	4a93      	ldr	r2, [pc, #588]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b918:	f043 0301 	orr.w	r3, r3, #1
 800b91c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b91e:	4b91      	ldr	r3, [pc, #580]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b922:	f003 0301 	and.w	r3, r3, #1
 800b926:	61fb      	str	r3, [r7, #28]
 800b928:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_CARTEGAZ_Pin|RX1_CARTEGAZ_Pin;
 800b92a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800b92e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b930:	2302      	movs	r3, #2
 800b932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b934:	2300      	movs	r3, #0
 800b936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b938:	2303      	movs	r3, #3
 800b93a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800b93c:	2307      	movs	r3, #7
 800b93e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b944:	4619      	mov	r1, r3
 800b946:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b94a:	f000 ffe1 	bl	800c910 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800b94e:	4b86      	ldr	r3, [pc, #536]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b950:	4a86      	ldr	r2, [pc, #536]	; (800bb6c <HAL_UART_MspInit+0x294>)
 800b952:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800b954:	4b84      	ldr	r3, [pc, #528]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b956:	2202      	movs	r2, #2
 800b958:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b95a:	4b83      	ldr	r3, [pc, #524]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b95c:	2200      	movs	r2, #0
 800b95e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b960:	4b81      	ldr	r3, [pc, #516]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b962:	2200      	movs	r2, #0
 800b964:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b966:	4b80      	ldr	r3, [pc, #512]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b968:	2280      	movs	r2, #128	; 0x80
 800b96a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b96c:	4b7e      	ldr	r3, [pc, #504]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b96e:	2200      	movs	r2, #0
 800b970:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b972:	4b7d      	ldr	r3, [pc, #500]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b974:	2200      	movs	r2, #0
 800b976:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800b978:	4b7b      	ldr	r3, [pc, #492]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b97a:	2220      	movs	r2, #32
 800b97c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b97e:	4b7a      	ldr	r3, [pc, #488]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b980:	2200      	movs	r2, #0
 800b982:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800b984:	4878      	ldr	r0, [pc, #480]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b986:	f000 fad5 	bl	800bf34 <HAL_DMA_Init>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d001      	beq.n	800b994 <HAL_UART_MspInit+0xbc>
    {
      Error_Handler();
 800b990:	f7ff fc3c 	bl	800b20c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a74      	ldr	r2, [pc, #464]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b998:	671a      	str	r2, [r3, #112]	; 0x70
 800b99a:	4a73      	ldr	r2, [pc, #460]	; (800bb68 <HAL_UART_MspInit+0x290>)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	2103      	movs	r1, #3
 800b9a4:	2025      	movs	r0, #37	; 0x25
 800b9a6:	f000 fa8e 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b9aa:	2025      	movs	r0, #37	; 0x25
 800b9ac:	f000 faa7 	bl	800befe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800b9b0:	e0d1      	b.n	800bb56 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART2)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	4a6e      	ldr	r2, [pc, #440]	; (800bb70 <HAL_UART_MspInit+0x298>)
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d16c      	bne.n	800ba96 <HAL_UART_MspInit+0x1be>
    __HAL_RCC_USART2_CLK_ENABLE();
 800b9bc:	4b69      	ldr	r3, [pc, #420]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c0:	4a68      	ldr	r2, [pc, #416]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9c8:	4b66      	ldr	r3, [pc, #408]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9d0:	61bb      	str	r3, [r7, #24]
 800b9d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b9d4:	4b63      	ldr	r3, [pc, #396]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9d8:	4a62      	ldr	r2, [pc, #392]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9da:	f043 0301 	orr.w	r3, r3, #1
 800b9de:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b9e0:	4b60      	ldr	r3, [pc, #384]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800b9e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9e4:	f003 0301 	and.w	r3, r3, #1
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX2_GPS_Pin;
 800b9ec:	2304      	movs	r3, #4
 800b9ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9f8:	2303      	movs	r3, #3
 800b9fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800b9fc:	2307      	movs	r3, #7
 800b9fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800ba00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba04:	4619      	mov	r1, r3
 800ba06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ba0a:	f000 ff81 	bl	800c910 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RX2_GPS_Pin;
 800ba0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba14:	2302      	movs	r3, #2
 800ba16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba1c:	2303      	movs	r3, #3
 800ba1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800ba20:	2303      	movs	r3, #3
 800ba22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RX2_GPS_GPIO_Port, &GPIO_InitStruct);
 800ba24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba28:	4619      	mov	r1, r3
 800ba2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ba2e:	f000 ff6f 	bl	800c910 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800ba32:	4b50      	ldr	r3, [pc, #320]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba34:	4a50      	ldr	r2, [pc, #320]	; (800bb78 <HAL_UART_MspInit+0x2a0>)
 800ba36:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800ba38:	4b4e      	ldr	r3, [pc, #312]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba3a:	2202      	movs	r2, #2
 800ba3c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ba3e:	4b4d      	ldr	r3, [pc, #308]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba40:	2200      	movs	r2, #0
 800ba42:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ba44:	4b4b      	ldr	r3, [pc, #300]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba46:	2200      	movs	r2, #0
 800ba48:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ba4a:	4b4a      	ldr	r3, [pc, #296]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba4c:	2280      	movs	r2, #128	; 0x80
 800ba4e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800ba50:	4b48      	ldr	r3, [pc, #288]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba52:	2200      	movs	r2, #0
 800ba54:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ba56:	4b47      	ldr	r3, [pc, #284]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba58:	2200      	movs	r2, #0
 800ba5a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800ba5c:	4b45      	ldr	r3, [pc, #276]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba5e:	2220      	movs	r2, #32
 800ba60:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800ba62:	4b44      	ldr	r3, [pc, #272]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba64:	2200      	movs	r2, #0
 800ba66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800ba68:	4842      	ldr	r0, [pc, #264]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba6a:	f000 fa63 	bl	800bf34 <HAL_DMA_Init>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d001      	beq.n	800ba78 <HAL_UART_MspInit+0x1a0>
      Error_Handler();
 800ba74:	f7ff fbca 	bl	800b20c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a3e      	ldr	r2, [pc, #248]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba7c:	671a      	str	r2, [r3, #112]	; 0x70
 800ba7e:	4a3d      	ldr	r2, [pc, #244]	; (800bb74 <HAL_UART_MspInit+0x29c>)
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800ba84:	2200      	movs	r2, #0
 800ba86:	2102      	movs	r1, #2
 800ba88:	2026      	movs	r0, #38	; 0x26
 800ba8a:	f000 fa1c 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800ba8e:	2026      	movs	r0, #38	; 0x26
 800ba90:	f000 fa35 	bl	800befe <HAL_NVIC_EnableIRQ>
}
 800ba94:	e05f      	b.n	800bb56 <HAL_UART_MspInit+0x27e>
  else if(uartHandle->Instance==USART3)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a38      	ldr	r2, [pc, #224]	; (800bb7c <HAL_UART_MspInit+0x2a4>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d15a      	bne.n	800bb56 <HAL_UART_MspInit+0x27e>
    __HAL_RCC_USART3_CLK_ENABLE();
 800baa0:	4b30      	ldr	r3, [pc, #192]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800baa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baa4:	4a2f      	ldr	r2, [pc, #188]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800baa6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800baaa:	6593      	str	r3, [r2, #88]	; 0x58
 800baac:	4b2d      	ldr	r3, [pc, #180]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800baae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bab4:	613b      	str	r3, [r7, #16]
 800bab6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bab8:	4b2a      	ldr	r3, [pc, #168]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800baba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babc:	4a29      	ldr	r2, [pc, #164]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800babe:	f043 0302 	orr.w	r3, r3, #2
 800bac2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bac4:	4b27      	ldr	r3, [pc, #156]	; (800bb64 <HAL_UART_MspInit+0x28c>)
 800bac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac8:	f003 0302 	and.w	r3, r3, #2
 800bacc:	60fb      	str	r3, [r7, #12]
 800bace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_LORA_Pin|RX3_LORA_Pin;
 800bad0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bad4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bad6:	2302      	movs	r3, #2
 800bad8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bada:	2300      	movs	r3, #0
 800badc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bade:	2303      	movs	r3, #3
 800bae0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800bae2:	2307      	movs	r3, #7
 800bae4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800baea:	4619      	mov	r1, r3
 800baec:	4824      	ldr	r0, [pc, #144]	; (800bb80 <HAL_UART_MspInit+0x2a8>)
 800baee:	f000 ff0f 	bl	800c910 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 800baf2:	4b24      	ldr	r3, [pc, #144]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800baf4:	4a24      	ldr	r2, [pc, #144]	; (800bb88 <HAL_UART_MspInit+0x2b0>)
 800baf6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 800baf8:	4b22      	ldr	r3, [pc, #136]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bafa:	2202      	movs	r2, #2
 800bafc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800bafe:	4b21      	ldr	r3, [pc, #132]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb00:	2200      	movs	r2, #0
 800bb02:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800bb04:	4b1f      	ldr	r3, [pc, #124]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800bb0a:	4b1e      	ldr	r3, [pc, #120]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb0c:	2280      	movs	r2, #128	; 0x80
 800bb0e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800bb10:	4b1c      	ldr	r3, [pc, #112]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800bb16:	4b1b      	ldr	r3, [pc, #108]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800bb1c:	4b19      	ldr	r3, [pc, #100]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb1e:	2220      	movs	r2, #32
 800bb20:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800bb22:	4b18      	ldr	r3, [pc, #96]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bb28:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800bb2a:	4816      	ldr	r0, [pc, #88]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb2c:	f000 fa02 	bl	800bf34 <HAL_DMA_Init>
 800bb30:	4603      	mov	r3, r0
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d001      	beq.n	800bb3a <HAL_UART_MspInit+0x262>
      Error_Handler();
 800bb36:	f7ff fb69 	bl	800b20c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	4a11      	ldr	r2, [pc, #68]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb3e:	671a      	str	r2, [r3, #112]	; 0x70
 800bb40:	4a10      	ldr	r2, [pc, #64]	; (800bb84 <HAL_UART_MspInit+0x2ac>)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800bb46:	2200      	movs	r2, #0
 800bb48:	2101      	movs	r1, #1
 800bb4a:	2027      	movs	r0, #39	; 0x27
 800bb4c:	f000 f9bb 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800bb50:	2027      	movs	r0, #39	; 0x27
 800bb52:	f000 f9d4 	bl	800befe <HAL_NVIC_EnableIRQ>
}
 800bb56:	bf00      	nop
 800bb58:	3738      	adds	r7, #56	; 0x38
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	bd80      	pop	{r7, pc}
 800bb5e:	bf00      	nop
 800bb60:	40013800 	.word	0x40013800
 800bb64:	40021000 	.word	0x40021000
 800bb68:	2000339c 	.word	0x2000339c
 800bb6c:	40020058 	.word	0x40020058
 800bb70:	40004400 	.word	0x40004400
 800bb74:	200035b8 	.word	0x200035b8
 800bb78:	4002006c 	.word	0x4002006c
 800bb7c:	40004800 	.word	0x40004800
 800bb80:	48000400 	.word	0x48000400
 800bb84:	200033e4 	.word	0x200033e4
 800bb88:	40020030 	.word	0x40020030

0800bb8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800bb8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bbc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800bb90:	f7ff fcb6 	bl	800b500 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800bb94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800bb96:	e003      	b.n	800bba0 <LoopCopyDataInit>

0800bb98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800bb98:	4b0b      	ldr	r3, [pc, #44]	; (800bbc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800bb9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800bb9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800bb9e:	3104      	adds	r1, #4

0800bba0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800bba0:	480a      	ldr	r0, [pc, #40]	; (800bbcc <LoopForever+0xa>)
	ldr	r3, =_edata
 800bba2:	4b0b      	ldr	r3, [pc, #44]	; (800bbd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 800bba4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800bba6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800bba8:	d3f6      	bcc.n	800bb98 <CopyDataInit>
	ldr	r2, =_sbss
 800bbaa:	4a0a      	ldr	r2, [pc, #40]	; (800bbd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 800bbac:	e002      	b.n	800bbb4 <LoopFillZerobss>

0800bbae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800bbae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800bbb0:	f842 3b04 	str.w	r3, [r2], #4

0800bbb4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800bbb4:	4b08      	ldr	r3, [pc, #32]	; (800bbd8 <LoopForever+0x16>)
	cmp	r2, r3
 800bbb6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800bbb8:	d3f9      	bcc.n	800bbae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bbba:	f00c fa3b 	bl	8018034 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800bbbe:	f7fe fb95 	bl	800a2ec <main>

0800bbc2 <LoopForever>:

LoopForever:
    b LoopForever
 800bbc2:	e7fe      	b.n	800bbc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800bbc4:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800bbc8:	0801d8b0 	.word	0x0801d8b0
	ldr	r0, =_sdata
 800bbcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800bbd0:	20000b18 	.word	0x20000b18
	ldr	r2, =_sbss
 800bbd4:	20000b18 	.word	0x20000b18
	ldr	r3, = _ebss
 800bbd8:	20003dd8 	.word	0x20003dd8

0800bbdc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800bbdc:	e7fe      	b.n	800bbdc <ADC1_IRQHandler>

0800bbde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bbde:	b580      	push	{r7, lr}
 800bbe0:	b082      	sub	sp, #8
 800bbe2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bbe8:	2003      	movs	r0, #3
 800bbea:	f000 f961 	bl	800beb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bbee:	2000      	movs	r0, #0
 800bbf0:	f000 f80e 	bl	800bc10 <HAL_InitTick>
 800bbf4:	4603      	mov	r3, r0
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d002      	beq.n	800bc00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800bbfa:	2301      	movs	r3, #1
 800bbfc:	71fb      	strb	r3, [r7, #7]
 800bbfe:	e001      	b.n	800bc04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bc00:	f7ff fb0c 	bl	800b21c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bc04:	79fb      	ldrb	r3, [r7, #7]
}
 800bc06:	4618      	mov	r0, r3
 800bc08:	3708      	adds	r7, #8
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
	...

0800bc10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b084      	sub	sp, #16
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800bc1c:	4b17      	ldr	r3, [pc, #92]	; (800bc7c <HAL_InitTick+0x6c>)
 800bc1e:	781b      	ldrb	r3, [r3, #0]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d023      	beq.n	800bc6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bc24:	4b16      	ldr	r3, [pc, #88]	; (800bc80 <HAL_InitTick+0x70>)
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	4b14      	ldr	r3, [pc, #80]	; (800bc7c <HAL_InitTick+0x6c>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800bc32:	fbb3 f3f1 	udiv	r3, r3, r1
 800bc36:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	f000 f96d 	bl	800bf1a <HAL_SYSTICK_Config>
 800bc40:	4603      	mov	r3, r0
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d10f      	bne.n	800bc66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b0f      	cmp	r3, #15
 800bc4a:	d809      	bhi.n	800bc60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	6879      	ldr	r1, [r7, #4]
 800bc50:	f04f 30ff 	mov.w	r0, #4294967295
 800bc54:	f000 f937 	bl	800bec6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bc58:	4a0a      	ldr	r2, [pc, #40]	; (800bc84 <HAL_InitTick+0x74>)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6013      	str	r3, [r2, #0]
 800bc5e:	e007      	b.n	800bc70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800bc60:	2301      	movs	r3, #1
 800bc62:	73fb      	strb	r3, [r7, #15]
 800bc64:	e004      	b.n	800bc70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bc66:	2301      	movs	r3, #1
 800bc68:	73fb      	strb	r3, [r7, #15]
 800bc6a:	e001      	b.n	800bc70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}
 800bc7a:	bf00      	nop
 800bc7c:	2000080c 	.word	0x2000080c
 800bc80:	20000804 	.word	0x20000804
 800bc84:	20000808 	.word	0x20000808

0800bc88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bc8c:	4b06      	ldr	r3, [pc, #24]	; (800bca8 <HAL_IncTick+0x20>)
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	461a      	mov	r2, r3
 800bc92:	4b06      	ldr	r3, [pc, #24]	; (800bcac <HAL_IncTick+0x24>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4413      	add	r3, r2
 800bc98:	4a04      	ldr	r2, [pc, #16]	; (800bcac <HAL_IncTick+0x24>)
 800bc9a:	6013      	str	r3, [r2, #0]
}
 800bc9c:	bf00      	nop
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca4:	4770      	bx	lr
 800bca6:	bf00      	nop
 800bca8:	2000080c 	.word	0x2000080c
 800bcac:	20003600 	.word	0x20003600

0800bcb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bcb0:	b480      	push	{r7}
 800bcb2:	af00      	add	r7, sp, #0
  return uwTick;
 800bcb4:	4b03      	ldr	r3, [pc, #12]	; (800bcc4 <HAL_GetTick+0x14>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20003600 	.word	0x20003600

0800bcc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800bcd0:	f7ff ffee 	bl	800bcb0 <HAL_GetTick>
 800bcd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce0:	d005      	beq.n	800bcee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800bce2:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <HAL_Delay+0x44>)
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	461a      	mov	r2, r3
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	4413      	add	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800bcee:	bf00      	nop
 800bcf0:	f7ff ffde 	bl	800bcb0 <HAL_GetTick>
 800bcf4:	4602      	mov	r2, r0
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	1ad3      	subs	r3, r2, r3
 800bcfa:	68fa      	ldr	r2, [r7, #12]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d8f7      	bhi.n	800bcf0 <HAL_Delay+0x28>
  {
  }
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	3710      	adds	r7, #16
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bd80      	pop	{r7, pc}
 800bd0a:	bf00      	nop
 800bd0c:	2000080c 	.word	0x2000080c

0800bd10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bd10:	b480      	push	{r7}
 800bd12:	b085      	sub	sp, #20
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f003 0307 	and.w	r3, r3, #7
 800bd1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bd20:	4b0c      	ldr	r3, [pc, #48]	; (800bd54 <__NVIC_SetPriorityGrouping+0x44>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800bd2c:	4013      	ands	r3, r2
 800bd2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bd38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800bd3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bd42:	4a04      	ldr	r2, [pc, #16]	; (800bd54 <__NVIC_SetPriorityGrouping+0x44>)
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	60d3      	str	r3, [r2, #12]
}
 800bd48:	bf00      	nop
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr
 800bd54:	e000ed00 	.word	0xe000ed00

0800bd58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bd5c:	4b04      	ldr	r3, [pc, #16]	; (800bd70 <__NVIC_GetPriorityGrouping+0x18>)
 800bd5e:	68db      	ldr	r3, [r3, #12]
 800bd60:	0a1b      	lsrs	r3, r3, #8
 800bd62:	f003 0307 	and.w	r3, r3, #7
}
 800bd66:	4618      	mov	r0, r3
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr
 800bd70:	e000ed00 	.word	0xe000ed00

0800bd74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	4603      	mov	r3, r0
 800bd7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bd7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	db0b      	blt.n	800bd9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	f003 021f 	and.w	r2, r3, #31
 800bd8c:	4907      	ldr	r1, [pc, #28]	; (800bdac <__NVIC_EnableIRQ+0x38>)
 800bd8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bd92:	095b      	lsrs	r3, r3, #5
 800bd94:	2001      	movs	r0, #1
 800bd96:	fa00 f202 	lsl.w	r2, r0, r2
 800bd9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bd9e:	bf00      	nop
 800bda0:	370c      	adds	r7, #12
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	e000e100 	.word	0xe000e100

0800bdb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bdb0:	b480      	push	{r7}
 800bdb2:	b083      	sub	sp, #12
 800bdb4:	af00      	add	r7, sp, #0
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bdbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	db0a      	blt.n	800bdda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	b2da      	uxtb	r2, r3
 800bdc8:	490c      	ldr	r1, [pc, #48]	; (800bdfc <__NVIC_SetPriority+0x4c>)
 800bdca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bdce:	0112      	lsls	r2, r2, #4
 800bdd0:	b2d2      	uxtb	r2, r2
 800bdd2:	440b      	add	r3, r1
 800bdd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bdd8:	e00a      	b.n	800bdf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	b2da      	uxtb	r2, r3
 800bdde:	4908      	ldr	r1, [pc, #32]	; (800be00 <__NVIC_SetPriority+0x50>)
 800bde0:	79fb      	ldrb	r3, [r7, #7]
 800bde2:	f003 030f 	and.w	r3, r3, #15
 800bde6:	3b04      	subs	r3, #4
 800bde8:	0112      	lsls	r2, r2, #4
 800bdea:	b2d2      	uxtb	r2, r2
 800bdec:	440b      	add	r3, r1
 800bdee:	761a      	strb	r2, [r3, #24]
}
 800bdf0:	bf00      	nop
 800bdf2:	370c      	adds	r7, #12
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfa:	4770      	bx	lr
 800bdfc:	e000e100 	.word	0xe000e100
 800be00:	e000ed00 	.word	0xe000ed00

0800be04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800be04:	b480      	push	{r7}
 800be06:	b089      	sub	sp, #36	; 0x24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	60f8      	str	r0, [r7, #12]
 800be0c:	60b9      	str	r1, [r7, #8]
 800be0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f003 0307 	and.w	r3, r3, #7
 800be16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	f1c3 0307 	rsb	r3, r3, #7
 800be1e:	2b04      	cmp	r3, #4
 800be20:	bf28      	it	cs
 800be22:	2304      	movcs	r3, #4
 800be24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800be26:	69fb      	ldr	r3, [r7, #28]
 800be28:	3304      	adds	r3, #4
 800be2a:	2b06      	cmp	r3, #6
 800be2c:	d902      	bls.n	800be34 <NVIC_EncodePriority+0x30>
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	3b03      	subs	r3, #3
 800be32:	e000      	b.n	800be36 <NVIC_EncodePriority+0x32>
 800be34:	2300      	movs	r3, #0
 800be36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be38:	f04f 32ff 	mov.w	r2, #4294967295
 800be3c:	69bb      	ldr	r3, [r7, #24]
 800be3e:	fa02 f303 	lsl.w	r3, r2, r3
 800be42:	43da      	mvns	r2, r3
 800be44:	68bb      	ldr	r3, [r7, #8]
 800be46:	401a      	ands	r2, r3
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800be4c:	f04f 31ff 	mov.w	r1, #4294967295
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	fa01 f303 	lsl.w	r3, r1, r3
 800be56:	43d9      	mvns	r1, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800be5c:	4313      	orrs	r3, r2
         );
}
 800be5e:	4618      	mov	r0, r3
 800be60:	3724      	adds	r7, #36	; 0x24
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr
	...

0800be6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3b01      	subs	r3, #1
 800be78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800be7c:	d301      	bcc.n	800be82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800be7e:	2301      	movs	r3, #1
 800be80:	e00f      	b.n	800bea2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800be82:	4a0a      	ldr	r2, [pc, #40]	; (800beac <SysTick_Config+0x40>)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	3b01      	subs	r3, #1
 800be88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800be8a:	210f      	movs	r1, #15
 800be8c:	f04f 30ff 	mov.w	r0, #4294967295
 800be90:	f7ff ff8e 	bl	800bdb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800be94:	4b05      	ldr	r3, [pc, #20]	; (800beac <SysTick_Config+0x40>)
 800be96:	2200      	movs	r2, #0
 800be98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800be9a:	4b04      	ldr	r3, [pc, #16]	; (800beac <SysTick_Config+0x40>)
 800be9c:	2207      	movs	r2, #7
 800be9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800bea0:	2300      	movs	r3, #0
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3708      	adds	r7, #8
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	e000e010 	.word	0xe000e010

0800beb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b082      	sub	sp, #8
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff ff29 	bl	800bd10 <__NVIC_SetPriorityGrouping>
}
 800bebe:	bf00      	nop
 800bec0:	3708      	adds	r7, #8
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b086      	sub	sp, #24
 800beca:	af00      	add	r7, sp, #0
 800becc:	4603      	mov	r3, r0
 800bece:	60b9      	str	r1, [r7, #8]
 800bed0:	607a      	str	r2, [r7, #4]
 800bed2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800bed4:	2300      	movs	r3, #0
 800bed6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800bed8:	f7ff ff3e 	bl	800bd58 <__NVIC_GetPriorityGrouping>
 800bedc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	6978      	ldr	r0, [r7, #20]
 800bee4:	f7ff ff8e 	bl	800be04 <NVIC_EncodePriority>
 800bee8:	4602      	mov	r2, r0
 800beea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7ff ff5d 	bl	800bdb0 <__NVIC_SetPriority>
}
 800bef6:	bf00      	nop
 800bef8:	3718      	adds	r7, #24
 800befa:	46bd      	mov	sp, r7
 800befc:	bd80      	pop	{r7, pc}

0800befe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800befe:	b580      	push	{r7, lr}
 800bf00:	b082      	sub	sp, #8
 800bf02:	af00      	add	r7, sp, #0
 800bf04:	4603      	mov	r3, r0
 800bf06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800bf08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f7ff ff31 	bl	800bd74 <__NVIC_EnableIRQ>
}
 800bf12:	bf00      	nop
 800bf14:	3708      	adds	r7, #8
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b082      	sub	sp, #8
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff ffa2 	bl	800be6c <SysTick_Config>
 800bf28:	4603      	mov	r3, r0
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
	...

0800bf34 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800bf42:	2301      	movs	r3, #1
 800bf44:	e098      	b.n	800c078 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	461a      	mov	r2, r3
 800bf4c:	4b4d      	ldr	r3, [pc, #308]	; (800c084 <HAL_DMA_Init+0x150>)
 800bf4e:	429a      	cmp	r2, r3
 800bf50:	d80f      	bhi.n	800bf72 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	461a      	mov	r2, r3
 800bf58:	4b4b      	ldr	r3, [pc, #300]	; (800c088 <HAL_DMA_Init+0x154>)
 800bf5a:	4413      	add	r3, r2
 800bf5c:	4a4b      	ldr	r2, [pc, #300]	; (800c08c <HAL_DMA_Init+0x158>)
 800bf5e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf62:	091b      	lsrs	r3, r3, #4
 800bf64:	009a      	lsls	r2, r3, #2
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a48      	ldr	r2, [pc, #288]	; (800c090 <HAL_DMA_Init+0x15c>)
 800bf6e:	641a      	str	r2, [r3, #64]	; 0x40
 800bf70:	e00e      	b.n	800bf90 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	461a      	mov	r2, r3
 800bf78:	4b46      	ldr	r3, [pc, #280]	; (800c094 <HAL_DMA_Init+0x160>)
 800bf7a:	4413      	add	r3, r2
 800bf7c:	4a43      	ldr	r2, [pc, #268]	; (800c08c <HAL_DMA_Init+0x158>)
 800bf7e:	fba2 2303 	umull	r2, r3, r2, r3
 800bf82:	091b      	lsrs	r3, r3, #4
 800bf84:	009a      	lsls	r2, r3, #2
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4a42      	ldr	r2, [pc, #264]	; (800c098 <HAL_DMA_Init+0x164>)
 800bf8e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2202      	movs	r2, #2
 800bf94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800bfa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfaa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800bfb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800bfc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800bfcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfea:	d039      	beq.n	800c060 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bff0:	4a27      	ldr	r2, [pc, #156]	; (800c090 <HAL_DMA_Init+0x15c>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d11a      	bne.n	800c02c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800bff6:	4b29      	ldr	r3, [pc, #164]	; (800c09c <HAL_DMA_Init+0x168>)
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bffe:	f003 031c 	and.w	r3, r3, #28
 800c002:	210f      	movs	r1, #15
 800c004:	fa01 f303 	lsl.w	r3, r1, r3
 800c008:	43db      	mvns	r3, r3
 800c00a:	4924      	ldr	r1, [pc, #144]	; (800c09c <HAL_DMA_Init+0x168>)
 800c00c:	4013      	ands	r3, r2
 800c00e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c010:	4b22      	ldr	r3, [pc, #136]	; (800c09c <HAL_DMA_Init+0x168>)
 800c012:	681a      	ldr	r2, [r3, #0]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6859      	ldr	r1, [r3, #4]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c01c:	f003 031c 	and.w	r3, r3, #28
 800c020:	fa01 f303 	lsl.w	r3, r1, r3
 800c024:	491d      	ldr	r1, [pc, #116]	; (800c09c <HAL_DMA_Init+0x168>)
 800c026:	4313      	orrs	r3, r2
 800c028:	600b      	str	r3, [r1, #0]
 800c02a:	e019      	b.n	800c060 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c02c:	4b1c      	ldr	r3, [pc, #112]	; (800c0a0 <HAL_DMA_Init+0x16c>)
 800c02e:	681a      	ldr	r2, [r3, #0]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c034:	f003 031c 	and.w	r3, r3, #28
 800c038:	210f      	movs	r1, #15
 800c03a:	fa01 f303 	lsl.w	r3, r1, r3
 800c03e:	43db      	mvns	r3, r3
 800c040:	4917      	ldr	r1, [pc, #92]	; (800c0a0 <HAL_DMA_Init+0x16c>)
 800c042:	4013      	ands	r3, r2
 800c044:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c046:	4b16      	ldr	r3, [pc, #88]	; (800c0a0 <HAL_DMA_Init+0x16c>)
 800c048:	681a      	ldr	r2, [r3, #0]
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6859      	ldr	r1, [r3, #4]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c052:	f003 031c 	and.w	r3, r3, #28
 800c056:	fa01 f303 	lsl.w	r3, r1, r3
 800c05a:	4911      	ldr	r1, [pc, #68]	; (800c0a0 <HAL_DMA_Init+0x16c>)
 800c05c:	4313      	orrs	r3, r2
 800c05e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2200      	movs	r2, #0
 800c064:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2201      	movs	r2, #1
 800c06a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c076:	2300      	movs	r3, #0
}
 800c078:	4618      	mov	r0, r3
 800c07a:	3714      	adds	r7, #20
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	40020407 	.word	0x40020407
 800c088:	bffdfff8 	.word	0xbffdfff8
 800c08c:	cccccccd 	.word	0xcccccccd
 800c090:	40020000 	.word	0x40020000
 800c094:	bffdfbf8 	.word	0xbffdfbf8
 800c098:	40020400 	.word	0x40020400
 800c09c:	400200a8 	.word	0x400200a8
 800c0a0:	400204a8 	.word	0x400204a8

0800c0a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	607a      	str	r2, [r7, #4]
 800c0b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d101      	bne.n	800c0c4 <HAL_DMA_Start_IT+0x20>
 800c0c0:	2302      	movs	r3, #2
 800c0c2:	e04b      	b.n	800c15c <HAL_DMA_Start_IT+0xb8>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c0d2:	b2db      	uxtb	r3, r3
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d13a      	bne.n	800c14e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2202      	movs	r2, #2
 800c0dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	681a      	ldr	r2, [r3, #0]
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f022 0201 	bic.w	r2, r2, #1
 800c0f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f000 f95f 	bl	800c3c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c106:	2b00      	cmp	r3, #0
 800c108:	d008      	beq.n	800c11c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681a      	ldr	r2, [r3, #0]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f042 020e 	orr.w	r2, r2, #14
 800c118:	601a      	str	r2, [r3, #0]
 800c11a:	e00f      	b.n	800c13c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f022 0204 	bic.w	r2, r2, #4
 800c12a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	681a      	ldr	r2, [r3, #0]
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f042 020a 	orr.w	r2, r2, #10
 800c13a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f042 0201 	orr.w	r2, r2, #1
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e005      	b.n	800c15a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	2200      	movs	r2, #0
 800c152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c156:	2302      	movs	r3, #2
 800c158:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c15a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	3718      	adds	r7, #24
 800c160:	46bd      	mov	sp, r7
 800c162:	bd80      	pop	{r7, pc}

0800c164 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c164:	b480      	push	{r7}
 800c166:	b085      	sub	sp, #20
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c16c:	2300      	movs	r3, #0
 800c16e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c176:	b2db      	uxtb	r3, r3
 800c178:	2b02      	cmp	r3, #2
 800c17a:	d008      	beq.n	800c18e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2204      	movs	r2, #4
 800c180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800c18a:	2301      	movs	r3, #1
 800c18c:	e022      	b.n	800c1d4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	f022 020e 	bic.w	r2, r2, #14
 800c19c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f022 0201 	bic.w	r2, r2, #1
 800c1ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1b2:	f003 021c 	and.w	r2, r3, #28
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1ba:	2101      	movs	r1, #1
 800c1bc:	fa01 f202 	lsl.w	r2, r1, r2
 800c1c0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	2201      	movs	r2, #1
 800c1c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3714      	adds	r7, #20
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b02      	cmp	r3, #2
 800c1f6:	d005      	beq.n	800c204 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2204      	movs	r2, #4
 800c1fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800c1fe:	2301      	movs	r3, #1
 800c200:	73fb      	strb	r3, [r7, #15]
 800c202:	e029      	b.n	800c258 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f022 020e 	bic.w	r2, r2, #14
 800c212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	681a      	ldr	r2, [r3, #0]
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f022 0201 	bic.w	r2, r2, #1
 800c222:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c228:	f003 021c 	and.w	r2, r3, #28
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c230:	2101      	movs	r1, #1
 800c232:	fa01 f202 	lsl.w	r2, r1, r2
 800c236:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	2201      	movs	r2, #1
 800c23c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d003      	beq.n	800c258 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	4798      	blx	r3
    }
  }
  return status;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}

0800c262 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c262:	b580      	push	{r7, lr}
 800c264:	b084      	sub	sp, #16
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27e:	f003 031c 	and.w	r3, r3, #28
 800c282:	2204      	movs	r2, #4
 800c284:	409a      	lsls	r2, r3
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	4013      	ands	r3, r2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d026      	beq.n	800c2dc <HAL_DMA_IRQHandler+0x7a>
 800c28e:	68bb      	ldr	r3, [r7, #8]
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	2b00      	cmp	r3, #0
 800c296:	d021      	beq.n	800c2dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f003 0320 	and.w	r3, r3, #32
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d107      	bne.n	800c2b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	681a      	ldr	r2, [r3, #0]
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f022 0204 	bic.w	r2, r2, #4
 800c2b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ba:	f003 021c 	and.w	r2, r3, #28
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c2:	2104      	movs	r1, #4
 800c2c4:	fa01 f202 	lsl.w	r2, r1, r2
 800c2c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d071      	beq.n	800c3b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800c2da:	e06c      	b.n	800c3b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2e0:	f003 031c 	and.w	r3, r3, #28
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	409a      	lsls	r2, r3
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	4013      	ands	r3, r2
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d02e      	beq.n	800c34e <HAL_DMA_IRQHandler+0xec>
 800c2f0:	68bb      	ldr	r3, [r7, #8]
 800c2f2:	f003 0302 	and.w	r3, r3, #2
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d029      	beq.n	800c34e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b00      	cmp	r3, #0
 800c306:	d10b      	bne.n	800c320 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681a      	ldr	r2, [r3, #0]
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f022 020a 	bic.w	r2, r2, #10
 800c316:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c324:	f003 021c 	and.w	r2, r3, #28
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c32c:	2102      	movs	r1, #2
 800c32e:	fa01 f202 	lsl.w	r2, r1, r2
 800c332:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	d038      	beq.n	800c3b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800c34c:	e033      	b.n	800c3b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c352:	f003 031c 	and.w	r3, r3, #28
 800c356:	2208      	movs	r2, #8
 800c358:	409a      	lsls	r2, r3
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	4013      	ands	r3, r2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d02a      	beq.n	800c3b8 <HAL_DMA_IRQHandler+0x156>
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d025      	beq.n	800c3b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f022 020e 	bic.w	r2, r2, #14
 800c37a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c380:	f003 021c 	and.w	r2, r3, #28
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c388:	2101      	movs	r1, #1
 800c38a:	fa01 f202 	lsl.w	r2, r1, r2
 800c38e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2201      	movs	r2, #1
 800c394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	2201      	movs	r2, #1
 800c39a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d004      	beq.n	800c3b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c3b6:	bf00      	nop
 800c3b8:	bf00      	nop
}
 800c3ba:	3710      	adds	r7, #16
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b085      	sub	sp, #20
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	f003 021c 	and.w	r2, r3, #28
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3da:	2101      	movs	r1, #1
 800c3dc:	fa01 f202 	lsl.w	r2, r1, r2
 800c3e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	683a      	ldr	r2, [r7, #0]
 800c3e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	2b10      	cmp	r3, #16
 800c3f0:	d108      	bne.n	800c404 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	68ba      	ldr	r2, [r7, #8]
 800c400:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c402:	e007      	b.n	800c414 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68ba      	ldr	r2, [r7, #8]
 800c40a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	60da      	str	r2, [r3, #12]
}
 800c414:	bf00      	nop
 800c416:	3714      	adds	r7, #20
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b086      	sub	sp, #24
 800c424:	af00      	add	r7, sp, #0
 800c426:	60f8      	str	r0, [r7, #12]
 800c428:	60b9      	str	r1, [r7, #8]
 800c42a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c432:	4b2f      	ldr	r3, [pc, #188]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_FLASH_Program+0x1e>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e053      	b.n	800c4e6 <HAL_FLASH_Program+0xc6>
 800c43e:	4b2c      	ldr	r3, [pc, #176]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c440:	2201      	movs	r2, #1
 800c442:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c444:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c448:	f000 f888 	bl	800c55c <FLASH_WaitForLastOperation>
 800c44c:	4603      	mov	r3, r0
 800c44e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 800c450:	7dfb      	ldrb	r3, [r7, #23]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d143      	bne.n	800c4de <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c456:	4b26      	ldr	r3, [pc, #152]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c458:	2200      	movs	r2, #0
 800c45a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c45c:	4b25      	ldr	r3, [pc, #148]	; (800c4f4 <HAL_FLASH_Program+0xd4>)
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c464:	2b00      	cmp	r3, #0
 800c466:	d009      	beq.n	800c47c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c468:	4b22      	ldr	r3, [pc, #136]	; (800c4f4 <HAL_FLASH_Program+0xd4>)
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	4a21      	ldr	r2, [pc, #132]	; (800c4f4 <HAL_FLASH_Program+0xd4>)
 800c46e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c472:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c474:	4b1e      	ldr	r3, [pc, #120]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c476:	2202      	movs	r2, #2
 800c478:	771a      	strb	r2, [r3, #28]
 800c47a:	e002      	b.n	800c482 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c47c:	4b1c      	ldr	r3, [pc, #112]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c47e:	2200      	movs	r2, #0
 800c480:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d107      	bne.n	800c498 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800c488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c48c:	68b8      	ldr	r0, [r7, #8]
 800c48e:	f000 f8bd 	bl	800c60c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 800c492:	2301      	movs	r3, #1
 800c494:	613b      	str	r3, [r7, #16]
 800c496:	e010      	b.n	800c4ba <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	2b01      	cmp	r3, #1
 800c49c:	d002      	beq.n	800c4a4 <HAL_FLASH_Program+0x84>
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d10a      	bne.n	800c4ba <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	68b8      	ldr	r0, [r7, #8]
 800c4aa:	f000 f8d5 	bl	800c658 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	2b02      	cmp	r3, #2
 800c4b2:	d102      	bne.n	800c4ba <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 800c4b4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c4b8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c4ba:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c4be:	f000 f84d 	bl	800c55c <FLASH_WaitForLastOperation>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 800c4c6:	693b      	ldr	r3, [r7, #16]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d006      	beq.n	800c4da <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800c4cc:	4b09      	ldr	r3, [pc, #36]	; (800c4f4 <HAL_FLASH_Program+0xd4>)
 800c4ce:	695a      	ldr	r2, [r3, #20]
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	43db      	mvns	r3, r3
 800c4d4:	4907      	ldr	r1, [pc, #28]	; (800c4f4 <HAL_FLASH_Program+0xd4>)
 800c4d6:	4013      	ands	r3, r2
 800c4d8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c4da:	f000 f9d5 	bl	800c888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c4de:	4b04      	ldr	r3, [pc, #16]	; (800c4f0 <HAL_FLASH_Program+0xd0>)
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	701a      	strb	r2, [r3, #0]

  return status;
 800c4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3718      	adds	r7, #24
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	20000810 	.word	0x20000810
 800c4f4:	40022000 	.word	0x40022000

0800c4f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c502:	4b0b      	ldr	r3, [pc, #44]	; (800c530 <HAL_FLASH_Unlock+0x38>)
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	2b00      	cmp	r3, #0
 800c508:	da0b      	bge.n	800c522 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <HAL_FLASH_Unlock+0x38>)
 800c50c:	4a09      	ldr	r2, [pc, #36]	; (800c534 <HAL_FLASH_Unlock+0x3c>)
 800c50e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800c510:	4b07      	ldr	r3, [pc, #28]	; (800c530 <HAL_FLASH_Unlock+0x38>)
 800c512:	4a09      	ldr	r2, [pc, #36]	; (800c538 <HAL_FLASH_Unlock+0x40>)
 800c514:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800c516:	4b06      	ldr	r3, [pc, #24]	; (800c530 <HAL_FLASH_Unlock+0x38>)
 800c518:	695b      	ldr	r3, [r3, #20]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	da01      	bge.n	800c522 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800c51e:	2301      	movs	r3, #1
 800c520:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800c522:	79fb      	ldrb	r3, [r7, #7]
}
 800c524:	4618      	mov	r0, r3
 800c526:	370c      	adds	r7, #12
 800c528:	46bd      	mov	sp, r7
 800c52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52e:	4770      	bx	lr
 800c530:	40022000 	.word	0x40022000
 800c534:	45670123 	.word	0x45670123
 800c538:	cdef89ab 	.word	0xcdef89ab

0800c53c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800c53c:	b480      	push	{r7}
 800c53e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800c540:	4b05      	ldr	r3, [pc, #20]	; (800c558 <HAL_FLASH_Lock+0x1c>)
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	4a04      	ldr	r2, [pc, #16]	; (800c558 <HAL_FLASH_Lock+0x1c>)
 800c546:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c54a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800c54c:	2300      	movs	r3, #0
}
 800c54e:	4618      	mov	r0, r3
 800c550:	46bd      	mov	sp, r7
 800c552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c556:	4770      	bx	lr
 800c558:	40022000 	.word	0x40022000

0800c55c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800c564:	f7ff fba4 	bl	800bcb0 <HAL_GetTick>
 800c568:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c56a:	e00d      	b.n	800c588 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d009      	beq.n	800c588 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800c574:	f7ff fb9c 	bl	800bcb0 <HAL_GetTick>
 800c578:	4602      	mov	r2, r0
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	687a      	ldr	r2, [r7, #4]
 800c580:	429a      	cmp	r2, r3
 800c582:	d801      	bhi.n	800c588 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800c584:	2303      	movs	r3, #3
 800c586:	e036      	b.n	800c5f6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800c588:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c58a:	691b      	ldr	r3, [r3, #16]
 800c58c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c590:	2b00      	cmp	r3, #0
 800c592:	d1eb      	bne.n	800c56c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c594:	4b1a      	ldr	r3, [pc, #104]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c596:	691a      	ldr	r2, [r3, #16]
 800c598:	4b1a      	ldr	r3, [pc, #104]	; (800c604 <FLASH_WaitForLastOperation+0xa8>)
 800c59a:	4013      	ands	r3, r2
 800c59c:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d01e      	beq.n	800c5e2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c5a4:	4b18      	ldr	r3, [pc, #96]	; (800c608 <FLASH_WaitForLastOperation+0xac>)
 800c5a6:	685a      	ldr	r2, [r3, #4]
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	4313      	orrs	r3, r2
 800c5ac:	4a16      	ldr	r2, [pc, #88]	; (800c608 <FLASH_WaitForLastOperation+0xac>)
 800c5ae:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d007      	beq.n	800c5ca <FLASH_WaitForLastOperation+0x6e>
 800c5ba:	4b11      	ldr	r3, [pc, #68]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c5bc:	699a      	ldr	r2, [r3, #24]
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800c5c4:	490e      	ldr	r1, [pc, #56]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	618b      	str	r3, [r1, #24]
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <FLASH_WaitForLastOperation+0x82>
 800c5d4:	4a0a      	ldr	r2, [pc, #40]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800c5dc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e009      	b.n	800c5f6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c5e2:	4b07      	ldr	r3, [pc, #28]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d002      	beq.n	800c5f4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c5ee:	4b04      	ldr	r3, [pc, #16]	; (800c600 <FLASH_WaitForLastOperation+0xa4>)
 800c5f0:	2201      	movs	r2, #1
 800c5f2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800c5f4:	2300      	movs	r3, #0
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	3710      	adds	r7, #16
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	40022000 	.word	0x40022000
 800c604:	0002c3fa 	.word	0x0002c3fa
 800c608:	20000810 	.word	0x20000810

0800c60c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800c60c:	b480      	push	{r7}
 800c60e:	b085      	sub	sp, #20
 800c610:	af00      	add	r7, sp, #0
 800c612:	60f8      	str	r0, [r7, #12]
 800c614:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800c618:	4b0e      	ldr	r3, [pc, #56]	; (800c654 <FLASH_Program_DoubleWord+0x48>)
 800c61a:	695b      	ldr	r3, [r3, #20]
 800c61c:	4a0d      	ldr	r2, [pc, #52]	; (800c654 <FLASH_Program_DoubleWord+0x48>)
 800c61e:	f043 0301 	orr.w	r3, r3, #1
 800c622:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800c62a:	f3bf 8f6f 	isb	sy
}
 800c62e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800c630:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c634:	f04f 0200 	mov.w	r2, #0
 800c638:	f04f 0300 	mov.w	r3, #0
 800c63c:	000a      	movs	r2, r1
 800c63e:	2300      	movs	r3, #0
 800c640:	68f9      	ldr	r1, [r7, #12]
 800c642:	3104      	adds	r1, #4
 800c644:	4613      	mov	r3, r2
 800c646:	600b      	str	r3, [r1, #0]
}
 800c648:	bf00      	nop
 800c64a:	3714      	adds	r7, #20
 800c64c:	46bd      	mov	sp, r7
 800c64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c652:	4770      	bx	lr
 800c654:	40022000 	.word	0x40022000

0800c658 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800c658:	b480      	push	{r7}
 800c65a:	b089      	sub	sp, #36	; 0x24
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800c662:	2340      	movs	r3, #64	; 0x40
 800c664:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800c66e:	4b14      	ldr	r3, [pc, #80]	; (800c6c0 <FLASH_Program_Fast+0x68>)
 800c670:	695b      	ldr	r3, [r3, #20]
 800c672:	4a13      	ldr	r2, [pc, #76]	; (800c6c0 <FLASH_Program_Fast+0x68>)
 800c674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c678:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c67a:	f3ef 8310 	mrs	r3, PRIMASK
 800c67e:	60fb      	str	r3, [r7, #12]
  return(result);
 800c680:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800c682:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c684:	b672      	cpsid	i
}
 800c686:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 800c688:	697b      	ldr	r3, [r7, #20]
 800c68a:	681a      	ldr	r2, [r3, #0]
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800c690:	69bb      	ldr	r3, [r7, #24]
 800c692:	3304      	adds	r3, #4
 800c694:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800c696:	697b      	ldr	r3, [r7, #20]
 800c698:	3304      	adds	r3, #4
 800c69a:	617b      	str	r3, [r7, #20]
    row_index--;
 800c69c:	7ffb      	ldrb	r3, [r7, #31]
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800c6a2:	7ffb      	ldrb	r3, [r7, #31]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1ef      	bne.n	800c688 <FLASH_Program_Fast+0x30>
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	f383 8810 	msr	PRIMASK, r3
}
 800c6b2:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 800c6b4:	bf00      	nop
 800c6b6:	3724      	adds	r7, #36	; 0x24
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6be:	4770      	bx	lr
 800c6c0:	40022000 	.word	0x40022000

0800c6c4 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
 800c6cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800c6ce:	4b4b      	ldr	r3, [pc, #300]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <HAL_FLASHEx_Erase+0x16>
 800c6d6:	2302      	movs	r3, #2
 800c6d8:	e08b      	b.n	800c7f2 <HAL_FLASHEx_Erase+0x12e>
 800c6da:	4b48      	ldr	r3, [pc, #288]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c6dc:	2201      	movs	r2, #1
 800c6de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c6e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c6e4:	f7ff ff3a 	bl	800c55c <FLASH_WaitForLastOperation>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c6ec:	7bfb      	ldrb	r3, [r7, #15]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d17b      	bne.n	800c7ea <HAL_FLASHEx_Erase+0x126>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800c6f2:	4b42      	ldr	r3, [pc, #264]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c6f4:	2200      	movs	r2, #0
 800c6f6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800c6f8:	4b41      	ldr	r3, [pc, #260]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c700:	2b00      	cmp	r3, #0
 800c702:	d019      	beq.n	800c738 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800c704:	4b3e      	ldr	r3, [pc, #248]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a3d      	ldr	r2, [pc, #244]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c70a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c70e:	6013      	str	r3, [r2, #0]

      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c710:	4b3b      	ldr	r3, [pc, #236]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d009      	beq.n	800c730 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800c71c:	4b38      	ldr	r3, [pc, #224]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4a37      	ldr	r2, [pc, #220]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c726:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800c728:	4b34      	ldr	r3, [pc, #208]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c72a:	2203      	movs	r2, #3
 800c72c:	771a      	strb	r2, [r3, #28]
 800c72e:	e016      	b.n	800c75e <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800c730:	4b32      	ldr	r3, [pc, #200]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c732:	2201      	movs	r2, #1
 800c734:	771a      	strb	r2, [r3, #28]
 800c736:	e012      	b.n	800c75e <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800c738:	4b31      	ldr	r3, [pc, #196]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c740:	2b00      	cmp	r3, #0
 800c742:	d009      	beq.n	800c758 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800c744:	4b2e      	ldr	r3, [pc, #184]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a2d      	ldr	r2, [pc, #180]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c74a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c74e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800c750:	4b2a      	ldr	r3, [pc, #168]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c752:	2202      	movs	r2, #2
 800c754:	771a      	strb	r2, [r3, #28]
 800c756:	e002      	b.n	800c75e <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c758:	4b28      	ldr	r3, [pc, #160]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	2b01      	cmp	r3, #1
 800c764:	d111      	bne.n	800c78a <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	4618      	mov	r0, r3
 800c76c:	f000 f84a 	bl	800c804 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c770:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c774:	f7ff fef2 	bl	800c55c <FLASH_WaitForLastOperation>
 800c778:	4603      	mov	r3, r0
 800c77a:	73fb      	strb	r3, [r7, #15]
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800c77c:	4b20      	ldr	r3, [pc, #128]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c77e:	695b      	ldr	r3, [r3, #20]
 800c780:	4a1f      	ldr	r2, [pc, #124]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c782:	f023 0304 	bic.w	r3, r3, #4
 800c786:	6153      	str	r3, [r2, #20]
 800c788:	e02d      	b.n	800c7e6 <HAL_FLASHEx_Erase+0x122>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	f04f 32ff 	mov.w	r2, #4294967295
 800c790:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	60bb      	str	r3, [r7, #8]
 800c798:	e01d      	b.n	800c7d6 <HAL_FLASHEx_Erase+0x112>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
 800c79e:	4619      	mov	r1, r3
 800c7a0:	68b8      	ldr	r0, [r7, #8]
 800c7a2:	f000 f84d 	bl	800c840 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800c7a6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c7aa:	f7ff fed7 	bl	800c55c <FLASH_WaitForLastOperation>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800c7b2:	4b13      	ldr	r3, [pc, #76]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	4a12      	ldr	r2, [pc, #72]	; (800c800 <HAL_FLASHEx_Erase+0x13c>)
 800c7b8:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800c7bc:	f023 0302 	bic.w	r3, r3, #2
 800c7c0:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d003      	beq.n	800c7d0 <HAL_FLASHEx_Erase+0x10c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	68ba      	ldr	r2, [r7, #8]
 800c7cc:	601a      	str	r2, [r3, #0]
          break;
 800c7ce:	e00a      	b.n	800c7e6 <HAL_FLASHEx_Erase+0x122>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	3301      	adds	r3, #1
 800c7d4:	60bb      	str	r3, [r7, #8]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	689a      	ldr	r2, [r3, #8]
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	4413      	add	r3, r2
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d3d9      	bcc.n	800c79a <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800c7e6:	f000 f84f 	bl	800c888 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c7ea:	4b04      	ldr	r3, [pc, #16]	; (800c7fc <HAL_FLASHEx_Erase+0x138>)
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	701a      	strb	r2, [r3, #0]

  return status;
 800c7f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000810 	.word	0x20000810
 800c800:	40022000 	.word	0x40022000

0800c804 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f003 0301 	and.w	r3, r3, #1
 800c812:	2b00      	cmp	r3, #0
 800c814:	d005      	beq.n	800c822 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800c816:	4b09      	ldr	r3, [pc, #36]	; (800c83c <FLASH_MassErase+0x38>)
 800c818:	695b      	ldr	r3, [r3, #20]
 800c81a:	4a08      	ldr	r2, [pc, #32]	; (800c83c <FLASH_MassErase+0x38>)
 800c81c:	f043 0304 	orr.w	r3, r3, #4
 800c820:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c822:	4b06      	ldr	r3, [pc, #24]	; (800c83c <FLASH_MassErase+0x38>)
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	4a05      	ldr	r2, [pc, #20]	; (800c83c <FLASH_MassErase+0x38>)
 800c828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c82c:	6153      	str	r3, [r2, #20]
}
 800c82e:	bf00      	nop
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	40022000 	.word	0x40022000

0800c840 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800c840:	b480      	push	{r7}
 800c842:	b083      	sub	sp, #12
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800c84a:	4b0e      	ldr	r3, [pc, #56]	; (800c884 <FLASH_PageErase+0x44>)
 800c84c:	695b      	ldr	r3, [r3, #20]
 800c84e:	f423 727e 	bic.w	r2, r3, #1016	; 0x3f8
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	00db      	lsls	r3, r3, #3
 800c856:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800c85a:	490a      	ldr	r1, [pc, #40]	; (800c884 <FLASH_PageErase+0x44>)
 800c85c:	4313      	orrs	r3, r2
 800c85e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800c860:	4b08      	ldr	r3, [pc, #32]	; (800c884 <FLASH_PageErase+0x44>)
 800c862:	695b      	ldr	r3, [r3, #20]
 800c864:	4a07      	ldr	r2, [pc, #28]	; (800c884 <FLASH_PageErase+0x44>)
 800c866:	f043 0302 	orr.w	r3, r3, #2
 800c86a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800c86c:	4b05      	ldr	r3, [pc, #20]	; (800c884 <FLASH_PageErase+0x44>)
 800c86e:	695b      	ldr	r3, [r3, #20]
 800c870:	4a04      	ldr	r2, [pc, #16]	; (800c884 <FLASH_PageErase+0x44>)
 800c872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c876:	6153      	str	r3, [r2, #20]
}
 800c878:	bf00      	nop
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	40022000 	.word	0x40022000

0800c888 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800c888:	b480      	push	{r7}
 800c88a:	b083      	sub	sp, #12
 800c88c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800c88e:	4b1e      	ldr	r3, [pc, #120]	; (800c908 <FLASH_FlushCaches+0x80>)
 800c890:	7f1b      	ldrb	r3, [r3, #28]
 800c892:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800c894:	79fb      	ldrb	r3, [r7, #7]
 800c896:	2b01      	cmp	r3, #1
 800c898:	d002      	beq.n	800c8a0 <FLASH_FlushCaches+0x18>
 800c89a:	79fb      	ldrb	r3, [r7, #7]
 800c89c:	2b03      	cmp	r3, #3
 800c89e:	d111      	bne.n	800c8c4 <FLASH_FlushCaches+0x3c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800c8a0:	4b1a      	ldr	r3, [pc, #104]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a19      	ldr	r2, [pc, #100]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c8aa:	6013      	str	r3, [r2, #0]
 800c8ac:	4b17      	ldr	r3, [pc, #92]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a16      	ldr	r2, [pc, #88]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8b6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800c8b8:	4b14      	ldr	r3, [pc, #80]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	4a13      	ldr	r2, [pc, #76]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c8c2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800c8c4:	79fb      	ldrb	r3, [r7, #7]
 800c8c6:	2b02      	cmp	r3, #2
 800c8c8:	d002      	beq.n	800c8d0 <FLASH_FlushCaches+0x48>
 800c8ca:	79fb      	ldrb	r3, [r7, #7]
 800c8cc:	2b03      	cmp	r3, #3
 800c8ce:	d111      	bne.n	800c8f4 <FLASH_FlushCaches+0x6c>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800c8d0:	4b0e      	ldr	r3, [pc, #56]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	4a0d      	ldr	r2, [pc, #52]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c8da:	6013      	str	r3, [r2, #0]
 800c8dc:	4b0b      	ldr	r3, [pc, #44]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	4a0a      	ldr	r2, [pc, #40]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8e6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800c8e8:	4b08      	ldr	r3, [pc, #32]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	4a07      	ldr	r2, [pc, #28]	; (800c90c <FLASH_FlushCaches+0x84>)
 800c8ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8f2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800c8f4:	4b04      	ldr	r3, [pc, #16]	; (800c908 <FLASH_FlushCaches+0x80>)
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	771a      	strb	r2, [r3, #28]
}
 800c8fa:	bf00      	nop
 800c8fc:	370c      	adds	r7, #12
 800c8fe:	46bd      	mov	sp, r7
 800c900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c904:	4770      	bx	lr
 800c906:	bf00      	nop
 800c908:	20000810 	.word	0x20000810
 800c90c:	40022000 	.word	0x40022000

0800c910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c910:	b480      	push	{r7}
 800c912:	b087      	sub	sp, #28
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800c91a:	2300      	movs	r3, #0
 800c91c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800c91e:	e154      	b.n	800cbca <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	2101      	movs	r1, #1
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	fa01 f303 	lsl.w	r3, r1, r3
 800c92c:	4013      	ands	r3, r2
 800c92e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 8146 	beq.w	800cbc4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	685b      	ldr	r3, [r3, #4]
 800c93c:	2b01      	cmp	r3, #1
 800c93e:	d00b      	beq.n	800c958 <HAL_GPIO_Init+0x48>
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	685b      	ldr	r3, [r3, #4]
 800c944:	2b02      	cmp	r3, #2
 800c946:	d007      	beq.n	800c958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c948:	683b      	ldr	r3, [r7, #0]
 800c94a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800c94c:	2b11      	cmp	r3, #17
 800c94e:	d003      	beq.n	800c958 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	2b12      	cmp	r3, #18
 800c956:	d130      	bne.n	800c9ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
 800c95c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	005b      	lsls	r3, r3, #1
 800c962:	2203      	movs	r2, #3
 800c964:	fa02 f303 	lsl.w	r3, r2, r3
 800c968:	43db      	mvns	r3, r3
 800c96a:	693a      	ldr	r2, [r7, #16]
 800c96c:	4013      	ands	r3, r2
 800c96e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	68da      	ldr	r2, [r3, #12]
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	005b      	lsls	r3, r3, #1
 800c978:	fa02 f303 	lsl.w	r3, r2, r3
 800c97c:	693a      	ldr	r2, [r7, #16]
 800c97e:	4313      	orrs	r3, r2
 800c980:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c98e:	2201      	movs	r2, #1
 800c990:	697b      	ldr	r3, [r7, #20]
 800c992:	fa02 f303 	lsl.w	r3, r2, r3
 800c996:	43db      	mvns	r3, r3
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4013      	ands	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	091b      	lsrs	r3, r3, #4
 800c9a4:	f003 0201 	and.w	r2, r3, #1
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ae:	693a      	ldr	r2, [r7, #16]
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	693a      	ldr	r2, [r7, #16]
 800c9b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	005b      	lsls	r3, r3, #1
 800c9c4:	2203      	movs	r2, #3
 800c9c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c9ca:	43db      	mvns	r3, r3
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	689a      	ldr	r2, [r3, #8]
 800c9d6:	697b      	ldr	r3, [r7, #20]
 800c9d8:	005b      	lsls	r3, r3, #1
 800c9da:	fa02 f303 	lsl.w	r3, r2, r3
 800c9de:	693a      	ldr	r2, [r7, #16]
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	693a      	ldr	r2, [r7, #16]
 800c9e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	685b      	ldr	r3, [r3, #4]
 800c9ee:	2b02      	cmp	r3, #2
 800c9f0:	d003      	beq.n	800c9fa <HAL_GPIO_Init+0xea>
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	685b      	ldr	r3, [r3, #4]
 800c9f6:	2b12      	cmp	r3, #18
 800c9f8:	d123      	bne.n	800ca42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	08da      	lsrs	r2, r3, #3
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3208      	adds	r2, #8
 800ca02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	f003 0307 	and.w	r3, r3, #7
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	220f      	movs	r2, #15
 800ca12:	fa02 f303 	lsl.w	r3, r2, r3
 800ca16:	43db      	mvns	r3, r3
 800ca18:	693a      	ldr	r2, [r7, #16]
 800ca1a:	4013      	ands	r3, r2
 800ca1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	691a      	ldr	r2, [r3, #16]
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 0307 	and.w	r3, r3, #7
 800ca28:	009b      	lsls	r3, r3, #2
 800ca2a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	08da      	lsrs	r2, r3, #3
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	3208      	adds	r2, #8
 800ca3c:	6939      	ldr	r1, [r7, #16]
 800ca3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	005b      	lsls	r3, r3, #1
 800ca4c:	2203      	movs	r2, #3
 800ca4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ca52:	43db      	mvns	r3, r3
 800ca54:	693a      	ldr	r2, [r7, #16]
 800ca56:	4013      	ands	r3, r2
 800ca58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	f003 0203 	and.w	r2, r3, #3
 800ca62:	697b      	ldr	r3, [r7, #20]
 800ca64:	005b      	lsls	r3, r3, #1
 800ca66:	fa02 f303 	lsl.w	r3, r2, r3
 800ca6a:	693a      	ldr	r2, [r7, #16]
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 80a0 	beq.w	800cbc4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ca84:	4b58      	ldr	r3, [pc, #352]	; (800cbe8 <HAL_GPIO_Init+0x2d8>)
 800ca86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca88:	4a57      	ldr	r2, [pc, #348]	; (800cbe8 <HAL_GPIO_Init+0x2d8>)
 800ca8a:	f043 0301 	orr.w	r3, r3, #1
 800ca8e:	6613      	str	r3, [r2, #96]	; 0x60
 800ca90:	4b55      	ldr	r3, [pc, #340]	; (800cbe8 <HAL_GPIO_Init+0x2d8>)
 800ca92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca94:	f003 0301 	and.w	r3, r3, #1
 800ca98:	60bb      	str	r3, [r7, #8]
 800ca9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800ca9c:	4a53      	ldr	r2, [pc, #332]	; (800cbec <HAL_GPIO_Init+0x2dc>)
 800ca9e:	697b      	ldr	r3, [r7, #20]
 800caa0:	089b      	lsrs	r3, r3, #2
 800caa2:	3302      	adds	r3, #2
 800caa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	009b      	lsls	r3, r3, #2
 800cab2:	220f      	movs	r2, #15
 800cab4:	fa02 f303 	lsl.w	r3, r2, r3
 800cab8:	43db      	mvns	r3, r3
 800caba:	693a      	ldr	r2, [r7, #16]
 800cabc:	4013      	ands	r3, r2
 800cabe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800cac6:	d019      	beq.n	800cafc <HAL_GPIO_Init+0x1ec>
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a49      	ldr	r2, [pc, #292]	; (800cbf0 <HAL_GPIO_Init+0x2e0>)
 800cacc:	4293      	cmp	r3, r2
 800cace:	d013      	beq.n	800caf8 <HAL_GPIO_Init+0x1e8>
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	4a48      	ldr	r2, [pc, #288]	; (800cbf4 <HAL_GPIO_Init+0x2e4>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d00d      	beq.n	800caf4 <HAL_GPIO_Init+0x1e4>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	4a47      	ldr	r2, [pc, #284]	; (800cbf8 <HAL_GPIO_Init+0x2e8>)
 800cadc:	4293      	cmp	r3, r2
 800cade:	d007      	beq.n	800caf0 <HAL_GPIO_Init+0x1e0>
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4a46      	ldr	r2, [pc, #280]	; (800cbfc <HAL_GPIO_Init+0x2ec>)
 800cae4:	4293      	cmp	r3, r2
 800cae6:	d101      	bne.n	800caec <HAL_GPIO_Init+0x1dc>
 800cae8:	2304      	movs	r3, #4
 800caea:	e008      	b.n	800cafe <HAL_GPIO_Init+0x1ee>
 800caec:	2307      	movs	r3, #7
 800caee:	e006      	b.n	800cafe <HAL_GPIO_Init+0x1ee>
 800caf0:	2303      	movs	r3, #3
 800caf2:	e004      	b.n	800cafe <HAL_GPIO_Init+0x1ee>
 800caf4:	2302      	movs	r3, #2
 800caf6:	e002      	b.n	800cafe <HAL_GPIO_Init+0x1ee>
 800caf8:	2301      	movs	r3, #1
 800cafa:	e000      	b.n	800cafe <HAL_GPIO_Init+0x1ee>
 800cafc:	2300      	movs	r3, #0
 800cafe:	697a      	ldr	r2, [r7, #20]
 800cb00:	f002 0203 	and.w	r2, r2, #3
 800cb04:	0092      	lsls	r2, r2, #2
 800cb06:	4093      	lsls	r3, r2
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800cb0e:	4937      	ldr	r1, [pc, #220]	; (800cbec <HAL_GPIO_Init+0x2dc>)
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	089b      	lsrs	r3, r3, #2
 800cb14:	3302      	adds	r3, #2
 800cb16:	693a      	ldr	r2, [r7, #16]
 800cb18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cb1c:	4b38      	ldr	r3, [pc, #224]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	43db      	mvns	r3, r3
 800cb26:	693a      	ldr	r2, [r7, #16]
 800cb28:	4013      	ands	r3, r2
 800cb2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d003      	beq.n	800cb40 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800cb38:	693a      	ldr	r2, [r7, #16]
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cb40:	4a2f      	ldr	r2, [pc, #188]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800cb46:	4b2e      	ldr	r3, [pc, #184]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	43db      	mvns	r3, r3
 800cb50:	693a      	ldr	r2, [r7, #16]
 800cb52:	4013      	ands	r3, r2
 800cb54:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800cb56:	683b      	ldr	r3, [r7, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d003      	beq.n	800cb6a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cb6a:	4a25      	ldr	r2, [pc, #148]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cb70:	4b23      	ldr	r3, [pc, #140]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb72:	689b      	ldr	r3, [r3, #8]
 800cb74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	43db      	mvns	r3, r3
 800cb7a:	693a      	ldr	r2, [r7, #16]
 800cb7c:	4013      	ands	r3, r2
 800cb7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800cb80:	683b      	ldr	r3, [r7, #0]
 800cb82:	685b      	ldr	r3, [r3, #4]
 800cb84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d003      	beq.n	800cb94 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800cb8c:	693a      	ldr	r2, [r7, #16]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cb94:	4a1a      	ldr	r2, [pc, #104]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800cb9a:	4b19      	ldr	r3, [pc, #100]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	43db      	mvns	r3, r3
 800cba4:	693a      	ldr	r2, [r7, #16]
 800cba6:	4013      	ands	r3, r2
 800cba8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800cbaa:	683b      	ldr	r3, [r7, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d003      	beq.n	800cbbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800cbb6:	693a      	ldr	r2, [r7, #16]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cbbe:	4a10      	ldr	r2, [pc, #64]	; (800cc00 <HAL_GPIO_Init+0x2f0>)
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	681a      	ldr	r2, [r3, #0]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	fa22 f303 	lsr.w	r3, r2, r3
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	f47f aea3 	bne.w	800c920 <HAL_GPIO_Init+0x10>
  }
}
 800cbda:	bf00      	nop
 800cbdc:	bf00      	nop
 800cbde:	371c      	adds	r7, #28
 800cbe0:	46bd      	mov	sp, r7
 800cbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe6:	4770      	bx	lr
 800cbe8:	40021000 	.word	0x40021000
 800cbec:	40010000 	.word	0x40010000
 800cbf0:	48000400 	.word	0x48000400
 800cbf4:	48000800 	.word	0x48000800
 800cbf8:	48000c00 	.word	0x48000c00
 800cbfc:	48001000 	.word	0x48001000
 800cc00:	40010400 	.word	0x40010400

0800cc04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cc04:	b480      	push	{r7}
 800cc06:	b087      	sub	sp, #28
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cc0e:	2300      	movs	r3, #0
 800cc10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800cc12:	e0b7      	b.n	800cd84 <HAL_GPIO_DeInit+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800cc14:	2201      	movs	r2, #1
 800cc16:	697b      	ldr	r3, [r7, #20]
 800cc18:	fa02 f303 	lsl.w	r3, r2, r3
 800cc1c:	683a      	ldr	r2, [r7, #0]
 800cc1e:	4013      	ands	r3, r2
 800cc20:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	f000 80aa 	beq.w	800cd7e <HAL_GPIO_DeInit+0x17a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800cc2a:	4a5d      	ldr	r2, [pc, #372]	; (800cda0 <HAL_GPIO_DeInit+0x19c>)
 800cc2c:	697b      	ldr	r3, [r7, #20]
 800cc2e:	089b      	lsrs	r3, r3, #2
 800cc30:	3302      	adds	r3, #2
 800cc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc36:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	f003 0303 	and.w	r3, r3, #3
 800cc3e:	009b      	lsls	r3, r3, #2
 800cc40:	220f      	movs	r2, #15
 800cc42:	fa02 f303 	lsl.w	r3, r2, r3
 800cc46:	68fa      	ldr	r2, [r7, #12]
 800cc48:	4013      	ands	r3, r2
 800cc4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800cc52:	d019      	beq.n	800cc88 <HAL_GPIO_DeInit+0x84>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	4a53      	ldr	r2, [pc, #332]	; (800cda4 <HAL_GPIO_DeInit+0x1a0>)
 800cc58:	4293      	cmp	r3, r2
 800cc5a:	d013      	beq.n	800cc84 <HAL_GPIO_DeInit+0x80>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4a52      	ldr	r2, [pc, #328]	; (800cda8 <HAL_GPIO_DeInit+0x1a4>)
 800cc60:	4293      	cmp	r3, r2
 800cc62:	d00d      	beq.n	800cc80 <HAL_GPIO_DeInit+0x7c>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	4a51      	ldr	r2, [pc, #324]	; (800cdac <HAL_GPIO_DeInit+0x1a8>)
 800cc68:	4293      	cmp	r3, r2
 800cc6a:	d007      	beq.n	800cc7c <HAL_GPIO_DeInit+0x78>
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	4a50      	ldr	r2, [pc, #320]	; (800cdb0 <HAL_GPIO_DeInit+0x1ac>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d101      	bne.n	800cc78 <HAL_GPIO_DeInit+0x74>
 800cc74:	2304      	movs	r3, #4
 800cc76:	e008      	b.n	800cc8a <HAL_GPIO_DeInit+0x86>
 800cc78:	2307      	movs	r3, #7
 800cc7a:	e006      	b.n	800cc8a <HAL_GPIO_DeInit+0x86>
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	e004      	b.n	800cc8a <HAL_GPIO_DeInit+0x86>
 800cc80:	2302      	movs	r3, #2
 800cc82:	e002      	b.n	800cc8a <HAL_GPIO_DeInit+0x86>
 800cc84:	2301      	movs	r3, #1
 800cc86:	e000      	b.n	800cc8a <HAL_GPIO_DeInit+0x86>
 800cc88:	2300      	movs	r3, #0
 800cc8a:	697a      	ldr	r2, [r7, #20]
 800cc8c:	f002 0203 	and.w	r2, r2, #3
 800cc90:	0092      	lsls	r2, r2, #2
 800cc92:	4093      	lsls	r3, r2
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	429a      	cmp	r2, r3
 800cc98:	d132      	bne.n	800cd00 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800cc9a:	4b46      	ldr	r3, [pc, #280]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	43db      	mvns	r3, r3
 800cca2:	4944      	ldr	r1, [pc, #272]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800cca4:	4013      	ands	r3, r2
 800cca6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800cca8:	4b42      	ldr	r3, [pc, #264]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	43db      	mvns	r3, r3
 800ccb0:	4940      	ldr	r1, [pc, #256]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccb2:	4013      	ands	r3, r2
 800ccb4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ccb6:	4b3f      	ldr	r3, [pc, #252]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccb8:	689a      	ldr	r2, [r3, #8]
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	43db      	mvns	r3, r3
 800ccbe:	493d      	ldr	r1, [pc, #244]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccc0:	4013      	ands	r3, r2
 800ccc2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800ccc4:	4b3b      	ldr	r3, [pc, #236]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccc6:	68da      	ldr	r2, [r3, #12]
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	43db      	mvns	r3, r3
 800cccc:	4939      	ldr	r1, [pc, #228]	; (800cdb4 <HAL_GPIO_DeInit+0x1b0>)
 800ccce:	4013      	ands	r3, r2
 800ccd0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f003 0303 	and.w	r3, r3, #3
 800ccd8:	009b      	lsls	r3, r3, #2
 800ccda:	220f      	movs	r2, #15
 800ccdc:	fa02 f303 	lsl.w	r3, r2, r3
 800cce0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800cce2:	4a2f      	ldr	r2, [pc, #188]	; (800cda0 <HAL_GPIO_DeInit+0x19c>)
 800cce4:	697b      	ldr	r3, [r7, #20]
 800cce6:	089b      	lsrs	r3, r3, #2
 800cce8:	3302      	adds	r3, #2
 800ccea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	43da      	mvns	r2, r3
 800ccf2:	482b      	ldr	r0, [pc, #172]	; (800cda0 <HAL_GPIO_DeInit+0x19c>)
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	089b      	lsrs	r3, r3, #2
 800ccf8:	400a      	ands	r2, r1
 800ccfa:	3302      	adds	r3, #2
 800ccfc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681a      	ldr	r2, [r3, #0]
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	005b      	lsls	r3, r3, #1
 800cd08:	2103      	movs	r1, #3
 800cd0a:	fa01 f303 	lsl.w	r3, r1, r3
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	08da      	lsrs	r2, r3, #3
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	3208      	adds	r2, #8
 800cd1c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd20:	697b      	ldr	r3, [r7, #20]
 800cd22:	f003 0307 	and.w	r3, r3, #7
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	220f      	movs	r2, #15
 800cd2a:	fa02 f303 	lsl.w	r3, r2, r3
 800cd2e:	43db      	mvns	r3, r3
 800cd30:	697a      	ldr	r2, [r7, #20]
 800cd32:	08d2      	lsrs	r2, r2, #3
 800cd34:	4019      	ands	r1, r3
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	3208      	adds	r2, #8
 800cd3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	689a      	ldr	r2, [r3, #8]
 800cd42:	697b      	ldr	r3, [r7, #20]
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	2103      	movs	r1, #3
 800cd48:	fa01 f303 	lsl.w	r3, r1, r3
 800cd4c:	43db      	mvns	r3, r3
 800cd4e:	401a      	ands	r2, r3
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	685a      	ldr	r2, [r3, #4]
 800cd58:	2101      	movs	r1, #1
 800cd5a:	697b      	ldr	r3, [r7, #20]
 800cd5c:	fa01 f303 	lsl.w	r3, r1, r3
 800cd60:	43db      	mvns	r3, r3
 800cd62:	401a      	ands	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	68da      	ldr	r2, [r3, #12]
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	2103      	movs	r1, #3
 800cd72:	fa01 f303 	lsl.w	r3, r1, r3
 800cd76:	43db      	mvns	r3, r3
 800cd78:	401a      	ands	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	3301      	adds	r3, #1
 800cd82:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800cd84:	683a      	ldr	r2, [r7, #0]
 800cd86:	697b      	ldr	r3, [r7, #20]
 800cd88:	fa22 f303 	lsr.w	r3, r2, r3
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	f47f af41 	bne.w	800cc14 <HAL_GPIO_DeInit+0x10>
  }
}
 800cd92:	bf00      	nop
 800cd94:	bf00      	nop
 800cd96:	371c      	adds	r7, #28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr
 800cda0:	40010000 	.word	0x40010000
 800cda4:	48000400 	.word	0x48000400
 800cda8:	48000800 	.word	0x48000800
 800cdac:	48000c00 	.word	0x48000c00
 800cdb0:	48001000 	.word	0x48001000
 800cdb4:	40010400 	.word	0x40010400

0800cdb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	460b      	mov	r3, r1
 800cdc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	691a      	ldr	r2, [r3, #16]
 800cdc8:	887b      	ldrh	r3, [r7, #2]
 800cdca:	4013      	ands	r3, r2
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	73fb      	strb	r3, [r7, #15]
 800cdd4:	e001      	b.n	800cdda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800cdda:	7bfb      	ldrb	r3, [r7, #15]
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3714      	adds	r7, #20
 800cde0:	46bd      	mov	sp, r7
 800cde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde6:	4770      	bx	lr

0800cde8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	807b      	strh	r3, [r7, #2]
 800cdf4:	4613      	mov	r3, r2
 800cdf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800cdf8:	787b      	ldrb	r3, [r7, #1]
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cdfe:	887a      	ldrh	r2, [r7, #2]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ce04:	e002      	b.n	800ce0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ce06:	887a      	ldrh	r2, [r7, #2]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ce0c:	bf00      	nop
 800ce0e:	370c      	adds	r7, #12
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr

0800ce18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d101      	bne.n	800ce2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ce26:	2301      	movs	r3, #1
 800ce28:	e081      	b.n	800cf2e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d106      	bne.n	800ce44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f7fd f9c2 	bl	800a1c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2224      	movs	r2, #36	; 0x24
 800ce48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	681a      	ldr	r2, [r3, #0]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f022 0201 	bic.w	r2, r2, #1
 800ce5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	685a      	ldr	r2, [r3, #4]
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ce68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	689a      	ldr	r2, [r3, #8]
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ce78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	68db      	ldr	r3, [r3, #12]
 800ce7e:	2b01      	cmp	r3, #1
 800ce80:	d107      	bne.n	800ce92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	689a      	ldr	r2, [r3, #8]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ce8e:	609a      	str	r2, [r3, #8]
 800ce90:	e006      	b.n	800cea0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689a      	ldr	r2, [r3, #8]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ce9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	68db      	ldr	r3, [r3, #12]
 800cea4:	2b02      	cmp	r3, #2
 800cea6:	d104      	bne.n	800ceb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ceb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	685b      	ldr	r3, [r3, #4]
 800ceb8:	687a      	ldr	r2, [r7, #4]
 800ceba:	6812      	ldr	r2, [r2, #0]
 800cebc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cec0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cec4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	68da      	ldr	r2, [r3, #12]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ced4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	691a      	ldr	r2, [r3, #16]
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	695b      	ldr	r3, [r3, #20]
 800cede:	ea42 0103 	orr.w	r1, r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	699b      	ldr	r3, [r3, #24]
 800cee6:	021a      	lsls	r2, r3, #8
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	430a      	orrs	r2, r1
 800ceee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	69d9      	ldr	r1, [r3, #28]
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	6a1a      	ldr	r2, [r3, #32]
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	430a      	orrs	r2, r1
 800cefe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	681a      	ldr	r2, [r3, #0]
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	f042 0201 	orr.w	r2, r2, #1
 800cf0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2220      	movs	r2, #32
 800cf1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	2200      	movs	r2, #0
 800cf22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2200      	movs	r2, #0
 800cf28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800cf2c:	2300      	movs	r3, #0
}
 800cf2e:	4618      	mov	r0, r3
 800cf30:	3708      	adds	r7, #8
 800cf32:	46bd      	mov	sp, r7
 800cf34:	bd80      	pop	{r7, pc}
	...

0800cf38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af02      	add	r7, sp, #8
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	607a      	str	r2, [r7, #4]
 800cf42:	461a      	mov	r2, r3
 800cf44:	460b      	mov	r3, r1
 800cf46:	817b      	strh	r3, [r7, #10]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cf52:	b2db      	uxtb	r3, r3
 800cf54:	2b20      	cmp	r3, #32
 800cf56:	f040 80da 	bne.w	800d10e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	d101      	bne.n	800cf68 <HAL_I2C_Master_Transmit+0x30>
 800cf64:	2302      	movs	r3, #2
 800cf66:	e0d3      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800cf70:	f7fe fe9e 	bl	800bcb0 <HAL_GetTick>
 800cf74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	9300      	str	r3, [sp, #0]
 800cf7a:	2319      	movs	r3, #25
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f000 fbc6 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800cf88:	4603      	mov	r3, r0
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	d001      	beq.n	800cf92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800cf8e:	2301      	movs	r3, #1
 800cf90:	e0be      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2221      	movs	r2, #33	; 0x21
 800cf96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	2210      	movs	r2, #16
 800cf9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	893a      	ldrh	r2, [r7, #8]
 800cfb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	2bff      	cmp	r3, #255	; 0xff
 800cfc2:	d90e      	bls.n	800cfe2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	22ff      	movs	r2, #255	; 0xff
 800cfc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfce:	b2da      	uxtb	r2, r3
 800cfd0:	8979      	ldrh	r1, [r7, #10]
 800cfd2:	4b51      	ldr	r3, [pc, #324]	; (800d118 <HAL_I2C_Master_Transmit+0x1e0>)
 800cfd4:	9300      	str	r3, [sp, #0]
 800cfd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f000 fcbc 	bl	800d958 <I2C_TransferConfig>
 800cfe0:	e06c      	b.n	800d0bc <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cfe6:	b29a      	uxth	r2, r3
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	8979      	ldrh	r1, [r7, #10]
 800cff4:	4b48      	ldr	r3, [pc, #288]	; (800d118 <HAL_I2C_Master_Transmit+0x1e0>)
 800cff6:	9300      	str	r3, [sp, #0]
 800cff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cffc:	68f8      	ldr	r0, [r7, #12]
 800cffe:	f000 fcab 	bl	800d958 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800d002:	e05b      	b.n	800d0bc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d004:	697a      	ldr	r2, [r7, #20]
 800d006:	6a39      	ldr	r1, [r7, #32]
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f000 fbc3 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d001      	beq.n	800d018 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800d014:	2301      	movs	r3, #1
 800d016:	e07b      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d01c:	781a      	ldrb	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d028:	1c5a      	adds	r2, r3, #1
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d032:	b29b      	uxth	r3, r3
 800d034:	3b01      	subs	r3, #1
 800d036:	b29a      	uxth	r2, r3
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d040:	3b01      	subs	r3, #1
 800d042:	b29a      	uxth	r2, r3
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d034      	beq.n	800d0bc <HAL_I2C_Master_Transmit+0x184>
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d056:	2b00      	cmp	r3, #0
 800d058:	d130      	bne.n	800d0bc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	6a3b      	ldr	r3, [r7, #32]
 800d060:	2200      	movs	r2, #0
 800d062:	2180      	movs	r1, #128	; 0x80
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	f000 fb55 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d06a:	4603      	mov	r3, r0
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d001      	beq.n	800d074 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	e04d      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d078:	b29b      	uxth	r3, r3
 800d07a:	2bff      	cmp	r3, #255	; 0xff
 800d07c:	d90e      	bls.n	800d09c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	22ff      	movs	r2, #255	; 0xff
 800d082:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d088:	b2da      	uxtb	r2, r3
 800d08a:	8979      	ldrh	r1, [r7, #10]
 800d08c:	2300      	movs	r3, #0
 800d08e:	9300      	str	r3, [sp, #0]
 800d090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f000 fc5f 	bl	800d958 <I2C_TransferConfig>
 800d09a:	e00f      	b.n	800d0bc <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d09c:	68fb      	ldr	r3, [r7, #12]
 800d09e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	8979      	ldrh	r1, [r7, #10]
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	9300      	str	r3, [sp, #0]
 800d0b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f000 fc4e 	bl	800d958 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d0c0:	b29b      	uxth	r3, r3
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d19e      	bne.n	800d004 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d0c6:	697a      	ldr	r2, [r7, #20]
 800d0c8:	6a39      	ldr	r1, [r7, #32]
 800d0ca:	68f8      	ldr	r0, [r7, #12]
 800d0cc:	f000 fba2 	bl	800d814 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d0d0:	4603      	mov	r3, r0
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d001      	beq.n	800d0da <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e01a      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2220      	movs	r2, #32
 800d0e0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	6859      	ldr	r1, [r3, #4]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	4b0b      	ldr	r3, [pc, #44]	; (800d11c <HAL_I2C_Master_Transmit+0x1e4>)
 800d0ee:	400b      	ands	r3, r1
 800d0f0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	2220      	movs	r2, #32
 800d0f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	2200      	movs	r2, #0
 800d106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d10a:	2300      	movs	r3, #0
 800d10c:	e000      	b.n	800d110 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800d10e:	2302      	movs	r3, #2
  }
}
 800d110:	4618      	mov	r0, r3
 800d112:	3718      	adds	r7, #24
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}
 800d118:	80002000 	.word	0x80002000
 800d11c:	fe00e800 	.word	0xfe00e800

0800d120 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af02      	add	r7, sp, #8
 800d126:	60f8      	str	r0, [r7, #12]
 800d128:	4608      	mov	r0, r1
 800d12a:	4611      	mov	r1, r2
 800d12c:	461a      	mov	r2, r3
 800d12e:	4603      	mov	r3, r0
 800d130:	817b      	strh	r3, [r7, #10]
 800d132:	460b      	mov	r3, r1
 800d134:	813b      	strh	r3, [r7, #8]
 800d136:	4613      	mov	r3, r2
 800d138:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d140:	b2db      	uxtb	r3, r3
 800d142:	2b20      	cmp	r3, #32
 800d144:	f040 80f9 	bne.w	800d33a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800d148:	6a3b      	ldr	r3, [r7, #32]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <HAL_I2C_Mem_Write+0x34>
 800d14e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d150:	2b00      	cmp	r3, #0
 800d152:	d105      	bne.n	800d160 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d15a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	e0ed      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d166:	2b01      	cmp	r3, #1
 800d168:	d101      	bne.n	800d16e <HAL_I2C_Mem_Write+0x4e>
 800d16a:	2302      	movs	r3, #2
 800d16c:	e0e6      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2201      	movs	r2, #1
 800d172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d176:	f7fe fd9b 	bl	800bcb0 <HAL_GetTick>
 800d17a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d17c:	697b      	ldr	r3, [r7, #20]
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	2319      	movs	r3, #25
 800d182:	2201      	movs	r2, #1
 800d184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d188:	68f8      	ldr	r0, [r7, #12]
 800d18a:	f000 fac3 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d18e:	4603      	mov	r3, r0
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e0d1      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	2221      	movs	r2, #33	; 0x21
 800d19c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	2240      	movs	r2, #64	; 0x40
 800d1a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	6a3a      	ldr	r2, [r7, #32]
 800d1b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d1b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	2200      	movs	r2, #0
 800d1be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d1c0:	88f8      	ldrh	r0, [r7, #6]
 800d1c2:	893a      	ldrh	r2, [r7, #8]
 800d1c4:	8979      	ldrh	r1, [r7, #10]
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	9301      	str	r3, [sp, #4]
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	68f8      	ldr	r0, [r7, #12]
 800d1d2:	f000 f9d3 	bl	800d57c <I2C_RequestMemoryWrite>
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d005      	beq.n	800d1e8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	e0a9      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1ec:	b29b      	uxth	r3, r3
 800d1ee:	2bff      	cmp	r3, #255	; 0xff
 800d1f0:	d90e      	bls.n	800d210 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	22ff      	movs	r2, #255	; 0xff
 800d1f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1fc:	b2da      	uxtb	r2, r3
 800d1fe:	8979      	ldrh	r1, [r7, #10]
 800d200:	2300      	movs	r3, #0
 800d202:	9300      	str	r3, [sp, #0]
 800d204:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d208:	68f8      	ldr	r0, [r7, #12]
 800d20a:	f000 fba5 	bl	800d958 <I2C_TransferConfig>
 800d20e:	e00f      	b.n	800d230 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d214:	b29a      	uxth	r2, r3
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	8979      	ldrh	r1, [r7, #10]
 800d222:	2300      	movs	r3, #0
 800d224:	9300      	str	r3, [sp, #0]
 800d226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d22a:	68f8      	ldr	r0, [r7, #12]
 800d22c:	f000 fb94 	bl	800d958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d230:	697a      	ldr	r2, [r7, #20]
 800d232:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d234:	68f8      	ldr	r0, [r7, #12]
 800d236:	f000 faad 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800d240:	2301      	movs	r3, #1
 800d242:	e07b      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	781a      	ldrb	r2, [r3, #0]
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d254:	1c5a      	adds	r2, r3, #1
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d25e:	b29b      	uxth	r3, r3
 800d260:	3b01      	subs	r3, #1
 800d262:	b29a      	uxth	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d26c:	3b01      	subs	r3, #1
 800d26e:	b29a      	uxth	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d278:	b29b      	uxth	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d034      	beq.n	800d2e8 <HAL_I2C_Mem_Write+0x1c8>
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d282:	2b00      	cmp	r3, #0
 800d284:	d130      	bne.n	800d2e8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	9300      	str	r3, [sp, #0]
 800d28a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d28c:	2200      	movs	r2, #0
 800d28e:	2180      	movs	r1, #128	; 0x80
 800d290:	68f8      	ldr	r0, [r7, #12]
 800d292:	f000 fa3f 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d296:	4603      	mov	r3, r0
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d001      	beq.n	800d2a0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800d29c:	2301      	movs	r3, #1
 800d29e:	e04d      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	2bff      	cmp	r3, #255	; 0xff
 800d2a8:	d90e      	bls.n	800d2c8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	22ff      	movs	r2, #255	; 0xff
 800d2ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	8979      	ldrh	r1, [r7, #10]
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f000 fb49 	bl	800d958 <I2C_TransferConfig>
 800d2c6:	e00f      	b.n	800d2e8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2cc:	b29a      	uxth	r2, r3
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	8979      	ldrh	r1, [r7, #10]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d2e2:	68f8      	ldr	r0, [r7, #12]
 800d2e4:	f000 fb38 	bl	800d958 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d19e      	bne.n	800d230 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d2f2:	697a      	ldr	r2, [r7, #20]
 800d2f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2f6:	68f8      	ldr	r0, [r7, #12]
 800d2f8:	f000 fa8c 	bl	800d814 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d2fc:	4603      	mov	r3, r0
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d001      	beq.n	800d306 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800d302:	2301      	movs	r3, #1
 800d304:	e01a      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2220      	movs	r2, #32
 800d30c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	6859      	ldr	r1, [r3, #4]
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	4b0a      	ldr	r3, [pc, #40]	; (800d344 <HAL_I2C_Mem_Write+0x224>)
 800d31a:	400b      	ands	r3, r1
 800d31c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	2220      	movs	r2, #32
 800d322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	2200      	movs	r2, #0
 800d32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2200      	movs	r2, #0
 800d332:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d336:	2300      	movs	r3, #0
 800d338:	e000      	b.n	800d33c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800d33a:	2302      	movs	r3, #2
  }
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	fe00e800 	.word	0xfe00e800

0800d348 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b088      	sub	sp, #32
 800d34c:	af02      	add	r7, sp, #8
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	4608      	mov	r0, r1
 800d352:	4611      	mov	r1, r2
 800d354:	461a      	mov	r2, r3
 800d356:	4603      	mov	r3, r0
 800d358:	817b      	strh	r3, [r7, #10]
 800d35a:	460b      	mov	r3, r1
 800d35c:	813b      	strh	r3, [r7, #8]
 800d35e:	4613      	mov	r3, r2
 800d360:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	2b20      	cmp	r3, #32
 800d36c:	f040 80fd 	bne.w	800d56a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800d370:	6a3b      	ldr	r3, [r7, #32]
 800d372:	2b00      	cmp	r3, #0
 800d374:	d002      	beq.n	800d37c <HAL_I2C_Mem_Read+0x34>
 800d376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d105      	bne.n	800d388 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d382:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800d384:	2301      	movs	r3, #1
 800d386:	e0f1      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d388:	68fb      	ldr	r3, [r7, #12]
 800d38a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_I2C_Mem_Read+0x4e>
 800d392:	2302      	movs	r3, #2
 800d394:	e0ea      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	2201      	movs	r2, #1
 800d39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800d39e:	f7fe fc87 	bl	800bcb0 <HAL_GetTick>
 800d3a2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	9300      	str	r3, [sp, #0]
 800d3a8:	2319      	movs	r3, #25
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 f9af 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d001      	beq.n	800d3c0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e0d5      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	2222      	movs	r2, #34	; 0x22
 800d3c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	2240      	movs	r2, #64	; 0x40
 800d3cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6a3a      	ldr	r2, [r7, #32]
 800d3da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d3e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800d3e8:	88f8      	ldrh	r0, [r7, #6]
 800d3ea:	893a      	ldrh	r2, [r7, #8]
 800d3ec:	8979      	ldrh	r1, [r7, #10]
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	9301      	str	r3, [sp, #4]
 800d3f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	68f8      	ldr	r0, [r7, #12]
 800d3fa:	f000 f913 	bl	800d624 <I2C_RequestMemoryRead>
 800d3fe:	4603      	mov	r3, r0
 800d400:	2b00      	cmp	r3, #0
 800d402:	d005      	beq.n	800d410 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800d40c:	2301      	movs	r3, #1
 800d40e:	e0ad      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d414:	b29b      	uxth	r3, r3
 800d416:	2bff      	cmp	r3, #255	; 0xff
 800d418:	d90e      	bls.n	800d438 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	22ff      	movs	r2, #255	; 0xff
 800d41e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d424:	b2da      	uxtb	r2, r3
 800d426:	8979      	ldrh	r1, [r7, #10]
 800d428:	4b52      	ldr	r3, [pc, #328]	; (800d574 <HAL_I2C_Mem_Read+0x22c>)
 800d42a:	9300      	str	r3, [sp, #0]
 800d42c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d430:	68f8      	ldr	r0, [r7, #12]
 800d432:	f000 fa91 	bl	800d958 <I2C_TransferConfig>
 800d436:	e00f      	b.n	800d458 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d43c:	b29a      	uxth	r2, r3
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d446:	b2da      	uxtb	r2, r3
 800d448:	8979      	ldrh	r1, [r7, #10]
 800d44a:	4b4a      	ldr	r3, [pc, #296]	; (800d574 <HAL_I2C_Mem_Read+0x22c>)
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d452:	68f8      	ldr	r0, [r7, #12]
 800d454:	f000 fa80 	bl	800d958 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	9300      	str	r3, [sp, #0]
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	2200      	movs	r2, #0
 800d460:	2104      	movs	r1, #4
 800d462:	68f8      	ldr	r0, [r7, #12]
 800d464:	f000 f956 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d468:	4603      	mov	r3, r0
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d001      	beq.n	800d472 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800d46e:	2301      	movs	r3, #1
 800d470:	e07c      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d47c:	b2d2      	uxtb	r2, r2
 800d47e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d48e:	3b01      	subs	r3, #1
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	3b01      	subs	r3, #1
 800d49e:	b29a      	uxth	r2, r3
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a8:	b29b      	uxth	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d034      	beq.n	800d518 <HAL_I2C_Mem_Read+0x1d0>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d130      	bne.n	800d518 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4bc:	2200      	movs	r2, #0
 800d4be:	2180      	movs	r1, #128	; 0x80
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 f927 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d001      	beq.n	800d4d0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800d4cc:	2301      	movs	r3, #1
 800d4ce:	e04d      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d4:	b29b      	uxth	r3, r3
 800d4d6:	2bff      	cmp	r3, #255	; 0xff
 800d4d8:	d90e      	bls.n	800d4f8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	22ff      	movs	r2, #255	; 0xff
 800d4de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e4:	b2da      	uxtb	r2, r3
 800d4e6:	8979      	ldrh	r1, [r7, #10]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	9300      	str	r3, [sp, #0]
 800d4ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4f0:	68f8      	ldr	r0, [r7, #12]
 800d4f2:	f000 fa31 	bl	800d958 <I2C_TransferConfig>
 800d4f6:	e00f      	b.n	800d518 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d506:	b2da      	uxtb	r2, r3
 800d508:	8979      	ldrh	r1, [r7, #10]
 800d50a:	2300      	movs	r3, #0
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 fa20 	bl	800d958 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d19a      	bne.n	800d458 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800d522:	697a      	ldr	r2, [r7, #20]
 800d524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 f974 	bl	800d814 <I2C_WaitOnSTOPFlagUntilTimeout>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d001      	beq.n	800d536 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e01a      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	2220      	movs	r2, #32
 800d53c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	6859      	ldr	r1, [r3, #4]
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	681a      	ldr	r2, [r3, #0]
 800d548:	4b0b      	ldr	r3, [pc, #44]	; (800d578 <HAL_I2C_Mem_Read+0x230>)
 800d54a:	400b      	ands	r3, r1
 800d54c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2220      	movs	r2, #32
 800d552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2200      	movs	r2, #0
 800d55a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2200      	movs	r2, #0
 800d562:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	e000      	b.n	800d56c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800d56a:	2302      	movs	r3, #2
  }
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3718      	adds	r7, #24
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	80002400 	.word	0x80002400
 800d578:	fe00e800 	.word	0xfe00e800

0800d57c <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af02      	add	r7, sp, #8
 800d582:	60f8      	str	r0, [r7, #12]
 800d584:	4608      	mov	r0, r1
 800d586:	4611      	mov	r1, r2
 800d588:	461a      	mov	r2, r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	817b      	strh	r3, [r7, #10]
 800d58e:	460b      	mov	r3, r1
 800d590:	813b      	strh	r3, [r7, #8]
 800d592:	4613      	mov	r3, r2
 800d594:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800d596:	88fb      	ldrh	r3, [r7, #6]
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	8979      	ldrh	r1, [r7, #10]
 800d59c:	4b20      	ldr	r3, [pc, #128]	; (800d620 <I2C_RequestMemoryWrite+0xa4>)
 800d59e:	9300      	str	r3, [sp, #0]
 800d5a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 f9d7 	bl	800d958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	69b9      	ldr	r1, [r7, #24]
 800d5ae:	68f8      	ldr	r0, [r7, #12]
 800d5b0:	f000 f8f0 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d001      	beq.n	800d5be <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800d5ba:	2301      	movs	r3, #1
 800d5bc:	e02c      	b.n	800d618 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d5be:	88fb      	ldrh	r3, [r7, #6]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d105      	bne.n	800d5d0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5c4:	893b      	ldrh	r3, [r7, #8]
 800d5c6:	b2da      	uxtb	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	629a      	str	r2, [r3, #40]	; 0x28
 800d5ce:	e015      	b.n	800d5fc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d5d0:	893b      	ldrh	r3, [r7, #8]
 800d5d2:	0a1b      	lsrs	r3, r3, #8
 800d5d4:	b29b      	uxth	r3, r3
 800d5d6:	b2da      	uxtb	r2, r3
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d5de:	69fa      	ldr	r2, [r7, #28]
 800d5e0:	69b9      	ldr	r1, [r7, #24]
 800d5e2:	68f8      	ldr	r0, [r7, #12]
 800d5e4:	f000 f8d6 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e012      	b.n	800d618 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d5f2:	893b      	ldrh	r3, [r7, #8]
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800d5fc:	69fb      	ldr	r3, [r7, #28]
 800d5fe:	9300      	str	r3, [sp, #0]
 800d600:	69bb      	ldr	r3, [r7, #24]
 800d602:	2200      	movs	r2, #0
 800d604:	2180      	movs	r1, #128	; 0x80
 800d606:	68f8      	ldr	r0, [r7, #12]
 800d608:	f000 f884 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d60c:	4603      	mov	r3, r0
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d001      	beq.n	800d616 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800d612:	2301      	movs	r3, #1
 800d614:	e000      	b.n	800d618 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800d616:	2300      	movs	r3, #0
}
 800d618:	4618      	mov	r0, r3
 800d61a:	3710      	adds	r7, #16
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}
 800d620:	80002000 	.word	0x80002000

0800d624 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800d624:	b580      	push	{r7, lr}
 800d626:	b086      	sub	sp, #24
 800d628:	af02      	add	r7, sp, #8
 800d62a:	60f8      	str	r0, [r7, #12]
 800d62c:	4608      	mov	r0, r1
 800d62e:	4611      	mov	r1, r2
 800d630:	461a      	mov	r2, r3
 800d632:	4603      	mov	r3, r0
 800d634:	817b      	strh	r3, [r7, #10]
 800d636:	460b      	mov	r3, r1
 800d638:	813b      	strh	r3, [r7, #8]
 800d63a:	4613      	mov	r3, r2
 800d63c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800d63e:	88fb      	ldrh	r3, [r7, #6]
 800d640:	b2da      	uxtb	r2, r3
 800d642:	8979      	ldrh	r1, [r7, #10]
 800d644:	4b20      	ldr	r3, [pc, #128]	; (800d6c8 <I2C_RequestMemoryRead+0xa4>)
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	2300      	movs	r3, #0
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f000 f984 	bl	800d958 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d650:	69fa      	ldr	r2, [r7, #28]
 800d652:	69b9      	ldr	r1, [r7, #24]
 800d654:	68f8      	ldr	r0, [r7, #12]
 800d656:	f000 f89d 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d65a:	4603      	mov	r3, r0
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d001      	beq.n	800d664 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	e02c      	b.n	800d6be <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800d664:	88fb      	ldrh	r3, [r7, #6]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d105      	bne.n	800d676 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d66a:	893b      	ldrh	r3, [r7, #8]
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	629a      	str	r2, [r3, #40]	; 0x28
 800d674:	e015      	b.n	800d6a2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800d676:	893b      	ldrh	r3, [r7, #8]
 800d678:	0a1b      	lsrs	r3, r3, #8
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800d684:	69fa      	ldr	r2, [r7, #28]
 800d686:	69b9      	ldr	r1, [r7, #24]
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f000 f883 	bl	800d794 <I2C_WaitOnTXISFlagUntilTimeout>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d001      	beq.n	800d698 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e012      	b.n	800d6be <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800d698:	893b      	ldrh	r3, [r7, #8]
 800d69a:	b2da      	uxtb	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	9300      	str	r3, [sp, #0]
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	2200      	movs	r2, #0
 800d6aa:	2140      	movs	r1, #64	; 0x40
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f000 f831 	bl	800d714 <I2C_WaitOnFlagUntilTimeout>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d001      	beq.n	800d6bc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e000      	b.n	800d6be <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800d6bc:	2300      	movs	r3, #0
}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3710      	adds	r7, #16
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}
 800d6c6:	bf00      	nop
 800d6c8:	80002000 	.word	0x80002000

0800d6cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800d6cc:	b480      	push	{r7}
 800d6ce:	b083      	sub	sp, #12
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	699b      	ldr	r3, [r3, #24]
 800d6da:	f003 0302 	and.w	r3, r3, #2
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d103      	bne.n	800d6ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	699b      	ldr	r3, [r3, #24]
 800d6f0:	f003 0301 	and.w	r3, r3, #1
 800d6f4:	2b01      	cmp	r3, #1
 800d6f6:	d007      	beq.n	800d708 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	699a      	ldr	r2, [r3, #24]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	f042 0201 	orr.w	r2, r2, #1
 800d706:	619a      	str	r2, [r3, #24]
  }
}
 800d708:	bf00      	nop
 800d70a:	370c      	adds	r7, #12
 800d70c:	46bd      	mov	sp, r7
 800d70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d712:	4770      	bx	lr

0800d714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b084      	sub	sp, #16
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	603b      	str	r3, [r7, #0]
 800d720:	4613      	mov	r3, r2
 800d722:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d724:	e022      	b.n	800d76c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d726:	683b      	ldr	r3, [r7, #0]
 800d728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d72c:	d01e      	beq.n	800d76c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d72e:	f7fe fabf 	bl	800bcb0 <HAL_GetTick>
 800d732:	4602      	mov	r2, r0
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	1ad3      	subs	r3, r2, r3
 800d738:	683a      	ldr	r2, [r7, #0]
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d302      	bcc.n	800d744 <I2C_WaitOnFlagUntilTimeout+0x30>
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d113      	bne.n	800d76c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d748:	f043 0220 	orr.w	r2, r3, #32
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	2220      	movs	r2, #32
 800d754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	2200      	movs	r2, #0
 800d75c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800d768:	2301      	movs	r3, #1
 800d76a:	e00f      	b.n	800d78c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	699a      	ldr	r2, [r3, #24]
 800d772:	68bb      	ldr	r3, [r7, #8]
 800d774:	4013      	ands	r3, r2
 800d776:	68ba      	ldr	r2, [r7, #8]
 800d778:	429a      	cmp	r2, r3
 800d77a:	bf0c      	ite	eq
 800d77c:	2301      	moveq	r3, #1
 800d77e:	2300      	movne	r3, #0
 800d780:	b2db      	uxtb	r3, r3
 800d782:	461a      	mov	r2, r3
 800d784:	79fb      	ldrb	r3, [r7, #7]
 800d786:	429a      	cmp	r2, r3
 800d788:	d0cd      	beq.n	800d726 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3710      	adds	r7, #16
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	60f8      	str	r0, [r7, #12]
 800d79c:	60b9      	str	r1, [r7, #8]
 800d79e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d7a0:	e02c      	b.n	800d7fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	68b9      	ldr	r1, [r7, #8]
 800d7a6:	68f8      	ldr	r0, [r7, #12]
 800d7a8:	f000 f870 	bl	800d88c <I2C_IsAcknowledgeFailed>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d001      	beq.n	800d7b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	e02a      	b.n	800d80c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7bc:	d01e      	beq.n	800d7fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d7be:	f7fe fa77 	bl	800bcb0 <HAL_GetTick>
 800d7c2:	4602      	mov	r2, r0
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	1ad3      	subs	r3, r2, r3
 800d7c8:	68ba      	ldr	r2, [r7, #8]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d302      	bcc.n	800d7d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d113      	bne.n	800d7fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7d8:	f043 0220 	orr.w	r2, r3, #32
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	2200      	movs	r2, #0
 800d7f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e007      	b.n	800d80c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	699b      	ldr	r3, [r3, #24]
 800d802:	f003 0302 	and.w	r3, r3, #2
 800d806:	2b02      	cmp	r3, #2
 800d808:	d1cb      	bne.n	800d7a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800d80a:	2300      	movs	r3, #0
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}

0800d814 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b084      	sub	sp, #16
 800d818:	af00      	add	r7, sp, #0
 800d81a:	60f8      	str	r0, [r7, #12]
 800d81c:	60b9      	str	r1, [r7, #8]
 800d81e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d820:	e028      	b.n	800d874 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800d822:	687a      	ldr	r2, [r7, #4]
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	68f8      	ldr	r0, [r7, #12]
 800d828:	f000 f830 	bl	800d88c <I2C_IsAcknowledgeFailed>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d001      	beq.n	800d836 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800d832:	2301      	movs	r3, #1
 800d834:	e026      	b.n	800d884 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d836:	f7fe fa3b 	bl	800bcb0 <HAL_GetTick>
 800d83a:	4602      	mov	r2, r0
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	429a      	cmp	r2, r3
 800d844:	d302      	bcc.n	800d84c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d113      	bne.n	800d874 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d850:	f043 0220 	orr.w	r2, r3, #32
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2220      	movs	r2, #32
 800d85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2200      	movs	r2, #0
 800d864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2200      	movs	r2, #0
 800d86c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800d870:	2301      	movs	r3, #1
 800d872:	e007      	b.n	800d884 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	f003 0320 	and.w	r3, r3, #32
 800d87e:	2b20      	cmp	r3, #32
 800d880:	d1cf      	bne.n	800d822 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3710      	adds	r7, #16
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	f003 0310 	and.w	r3, r3, #16
 800d8a2:	2b10      	cmp	r3, #16
 800d8a4:	d151      	bne.n	800d94a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d8a6:	e022      	b.n	800d8ee <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800d8a8:	68bb      	ldr	r3, [r7, #8]
 800d8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ae:	d01e      	beq.n	800d8ee <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d8b0:	f7fe f9fe 	bl	800bcb0 <HAL_GetTick>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	1ad3      	subs	r3, r2, r3
 800d8ba:	68ba      	ldr	r2, [r7, #8]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d302      	bcc.n	800d8c6 <I2C_IsAcknowledgeFailed+0x3a>
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d113      	bne.n	800d8ee <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8ca:	f043 0220 	orr.w	r2, r3, #32
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2220      	movs	r2, #32
 800d8d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	2200      	movs	r2, #0
 800d8de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e02e      	b.n	800d94c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	f003 0320 	and.w	r3, r3, #32
 800d8f8:	2b20      	cmp	r3, #32
 800d8fa:	d1d5      	bne.n	800d8a8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	2210      	movs	r2, #16
 800d902:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2220      	movs	r2, #32
 800d90a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7ff fedd 	bl	800d6cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6859      	ldr	r1, [r3, #4]
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	681a      	ldr	r2, [r3, #0]
 800d91c:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <I2C_IsAcknowledgeFailed+0xc8>)
 800d91e:	400b      	ands	r3, r1
 800d920:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d926:	f043 0204 	orr.w	r2, r3, #4
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	2220      	movs	r2, #32
 800d932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	2200      	movs	r2, #0
 800d93a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2200      	movs	r2, #0
 800d942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800d946:	2301      	movs	r3, #1
 800d948:	e000      	b.n	800d94c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800d94a:	2300      	movs	r3, #0
}
 800d94c:	4618      	mov	r0, r3
 800d94e:	3710      	adds	r7, #16
 800d950:	46bd      	mov	sp, r7
 800d952:	bd80      	pop	{r7, pc}
 800d954:	fe00e800 	.word	0xfe00e800

0800d958 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	60f8      	str	r0, [r7, #12]
 800d960:	607b      	str	r3, [r7, #4]
 800d962:	460b      	mov	r3, r1
 800d964:	817b      	strh	r3, [r7, #10]
 800d966:	4613      	mov	r3, r2
 800d968:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	0d5b      	lsrs	r3, r3, #21
 800d974:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800d978:	4b0d      	ldr	r3, [pc, #52]	; (800d9b0 <I2C_TransferConfig+0x58>)
 800d97a:	430b      	orrs	r3, r1
 800d97c:	43db      	mvns	r3, r3
 800d97e:	ea02 0103 	and.w	r1, r2, r3
 800d982:	897b      	ldrh	r3, [r7, #10]
 800d984:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800d988:	7a7b      	ldrb	r3, [r7, #9]
 800d98a:	041b      	lsls	r3, r3, #16
 800d98c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d990:	431a      	orrs	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	431a      	orrs	r2, r3
 800d996:	69bb      	ldr	r3, [r7, #24]
 800d998:	431a      	orrs	r2, r3
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	430a      	orrs	r2, r1
 800d9a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800d9a2:	bf00      	nop
 800d9a4:	3714      	adds	r7, #20
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ac:	4770      	bx	lr
 800d9ae:	bf00      	nop
 800d9b0:	03ff63ff 	.word	0x03ff63ff

0800d9b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	6078      	str	r0, [r7, #4]
 800d9bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b20      	cmp	r3, #32
 800d9c8:	d138      	bne.n	800da3c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d101      	bne.n	800d9d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800d9d4:	2302      	movs	r3, #2
 800d9d6:	e032      	b.n	800da3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	2201      	movs	r2, #1
 800d9dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	2224      	movs	r2, #36	; 0x24
 800d9e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	681a      	ldr	r2, [r3, #0]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f022 0201 	bic.w	r2, r2, #1
 800d9f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800da06:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6819      	ldr	r1, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	430a      	orrs	r2, r1
 800da16:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f042 0201 	orr.w	r2, r2, #1
 800da26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2220      	movs	r2, #32
 800da2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800da38:	2300      	movs	r3, #0
 800da3a:	e000      	b.n	800da3e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800da3c:	2302      	movs	r3, #2
  }
}
 800da3e:	4618      	mov	r0, r3
 800da40:	370c      	adds	r7, #12
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b085      	sub	sp, #20
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b20      	cmp	r3, #32
 800da5e:	d139      	bne.n	800dad4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800da66:	2b01      	cmp	r3, #1
 800da68:	d101      	bne.n	800da6e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800da6a:	2302      	movs	r3, #2
 800da6c:	e033      	b.n	800dad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	2201      	movs	r2, #1
 800da72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2224      	movs	r2, #36	; 0x24
 800da7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	681a      	ldr	r2, [r3, #0]
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	f022 0201 	bic.w	r2, r2, #1
 800da8c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800da9c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	021b      	lsls	r3, r3, #8
 800daa2:	68fa      	ldr	r2, [r7, #12]
 800daa4:	4313      	orrs	r3, r2
 800daa6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	681a      	ldr	r2, [r3, #0]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f042 0201 	orr.w	r2, r2, #1
 800dabe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2220      	movs	r2, #32
 800dac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800dad0:	2300      	movs	r3, #0
 800dad2:	e000      	b.n	800dad6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800dad4:	2302      	movs	r3, #2
  }
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3714      	adds	r7, #20
 800dada:	46bd      	mov	sp, r7
 800dadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae0:	4770      	bx	lr

0800dae2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800dae2:	b580      	push	{r7, lr}
 800dae4:	b084      	sub	sp, #16
 800dae6:	af00      	add	r7, sp, #0
 800dae8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d101      	bne.n	800daf4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	e038      	b.n	800db66 <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800dafc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f245 5255 	movw	r2, #21845	; 0x5555
 800db06:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	6852      	ldr	r2, [r2, #4]
 800db10:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	6892      	ldr	r2, [r2, #8]
 800db1a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800db1c:	f7fe f8c8 	bl	800bcb0 <HAL_GetTick>
 800db20:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 800db22:	e008      	b.n	800db36 <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800db24:	f7fe f8c4 	bl	800bcb0 <HAL_GetTick>
 800db28:	4602      	mov	r2, r0
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	1ad3      	subs	r3, r2, r3
 800db2e:	2b30      	cmp	r3, #48	; 0x30
 800db30:	d901      	bls.n	800db36 <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 800db32:	2303      	movs	r3, #3
 800db34:	e017      	b.n	800db66 <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	68db      	ldr	r3, [r3, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1f1      	bne.n	800db24 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	691a      	ldr	r2, [r3, #16]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	68db      	ldr	r3, [r3, #12]
 800db4a:	429a      	cmp	r2, r3
 800db4c:	d005      	beq.n	800db5a <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	68d2      	ldr	r2, [r2, #12]
 800db56:	611a      	str	r2, [r3, #16]
 800db58:	e004      	b.n	800db64 <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800db62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800db64:	2300      	movs	r3, #0
}
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800db7e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800db80:	2300      	movs	r3, #0
}
 800db82:	4618      	mov	r0, r3
 800db84:	370c      	adds	r7, #12
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr

0800db8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800db8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db90:	b08b      	sub	sp, #44	; 0x2c
 800db92:	af06      	add	r7, sp, #24
 800db94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d101      	bne.n	800dba0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800db9c:	2301      	movs	r3, #1
 800db9e:	e104      	b.n	800ddaa <HAL_PCD_Init+0x21c>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d106      	bne.n	800dbba <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2200      	movs	r2, #0
 800dbb0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f009 fe39 	bl	801782c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2203      	movs	r2, #3
 800dbbe:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	f005 f9a5 	bl	8012f16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	603b      	str	r3, [r7, #0]
 800dbd2:	687e      	ldr	r6, [r7, #4]
 800dbd4:	466d      	mov	r5, sp
 800dbd6:	f106 0410 	add.w	r4, r6, #16
 800dbda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dbde:	6823      	ldr	r3, [r4, #0]
 800dbe0:	602b      	str	r3, [r5, #0]
 800dbe2:	1d33      	adds	r3, r6, #4
 800dbe4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dbe6:	6838      	ldr	r0, [r7, #0]
 800dbe8:	f005 f96d 	bl	8012ec6 <USB_CoreInit>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d005      	beq.n	800dbfe <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2202      	movs	r2, #2
 800dbf6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800dbfa:	2301      	movs	r3, #1
 800dbfc:	e0d5      	b.n	800ddaa <HAL_PCD_Init+0x21c>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2100      	movs	r1, #0
 800dc04:	4618      	mov	r0, r3
 800dc06:	f005 f9a1 	bl	8012f4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	73fb      	strb	r3, [r7, #15]
 800dc0e:	e04c      	b.n	800dcaa <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800dc10:	7bfb      	ldrb	r3, [r7, #15]
 800dc12:	6879      	ldr	r1, [r7, #4]
 800dc14:	1c5a      	adds	r2, r3, #1
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	00db      	lsls	r3, r3, #3
 800dc1e:	440b      	add	r3, r1
 800dc20:	3301      	adds	r3, #1
 800dc22:	2201      	movs	r2, #1
 800dc24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	6879      	ldr	r1, [r7, #4]
 800dc2a:	1c5a      	adds	r2, r3, #1
 800dc2c:	4613      	mov	r3, r2
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	00db      	lsls	r3, r3, #3
 800dc34:	440b      	add	r3, r1
 800dc36:	7bfa      	ldrb	r2, [r7, #15]
 800dc38:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800dc3a:	7bfa      	ldrb	r2, [r7, #15]
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
 800dc3e:	b298      	uxth	r0, r3
 800dc40:	6879      	ldr	r1, [r7, #4]
 800dc42:	4613      	mov	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	440b      	add	r3, r1
 800dc4c:	3336      	adds	r3, #54	; 0x36
 800dc4e:	4602      	mov	r2, r0
 800dc50:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800dc52:	7bfb      	ldrb	r3, [r7, #15]
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	1c5a      	adds	r2, r3, #1
 800dc58:	4613      	mov	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4413      	add	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	440b      	add	r3, r1
 800dc62:	3303      	adds	r3, #3
 800dc64:	2200      	movs	r2, #0
 800dc66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800dc68:	7bfa      	ldrb	r2, [r7, #15]
 800dc6a:	6879      	ldr	r1, [r7, #4]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	009b      	lsls	r3, r3, #2
 800dc70:	4413      	add	r3, r2
 800dc72:	00db      	lsls	r3, r3, #3
 800dc74:	440b      	add	r3, r1
 800dc76:	3338      	adds	r3, #56	; 0x38
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800dc7c:	7bfa      	ldrb	r2, [r7, #15]
 800dc7e:	6879      	ldr	r1, [r7, #4]
 800dc80:	4613      	mov	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	4413      	add	r3, r2
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	440b      	add	r3, r1
 800dc8a:	333c      	adds	r3, #60	; 0x3c
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800dc90:	7bfa      	ldrb	r2, [r7, #15]
 800dc92:	6879      	ldr	r1, [r7, #4]
 800dc94:	4613      	mov	r3, r2
 800dc96:	009b      	lsls	r3, r3, #2
 800dc98:	4413      	add	r3, r2
 800dc9a:	00db      	lsls	r3, r3, #3
 800dc9c:	440b      	add	r3, r1
 800dc9e:	3340      	adds	r3, #64	; 0x40
 800dca0:	2200      	movs	r2, #0
 800dca2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
 800dca6:	3301      	adds	r3, #1
 800dca8:	73fb      	strb	r3, [r7, #15]
 800dcaa:	7bfa      	ldrb	r2, [r7, #15]
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d3ad      	bcc.n	800dc10 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	73fb      	strb	r3, [r7, #15]
 800dcb8:	e044      	b.n	800dd44 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800dcba:	7bfa      	ldrb	r2, [r7, #15]
 800dcbc:	6879      	ldr	r1, [r7, #4]
 800dcbe:	4613      	mov	r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	00db      	lsls	r3, r3, #3
 800dcc6:	440b      	add	r3, r1
 800dcc8:	f203 1369 	addw	r3, r3, #361	; 0x169
 800dccc:	2200      	movs	r2, #0
 800dcce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800dcd0:	7bfa      	ldrb	r2, [r7, #15]
 800dcd2:	6879      	ldr	r1, [r7, #4]
 800dcd4:	4613      	mov	r3, r2
 800dcd6:	009b      	lsls	r3, r3, #2
 800dcd8:	4413      	add	r3, r2
 800dcda:	00db      	lsls	r3, r3, #3
 800dcdc:	440b      	add	r3, r1
 800dcde:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800dce2:	7bfa      	ldrb	r2, [r7, #15]
 800dce4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800dce6:	7bfa      	ldrb	r2, [r7, #15]
 800dce8:	6879      	ldr	r1, [r7, #4]
 800dcea:	4613      	mov	r3, r2
 800dcec:	009b      	lsls	r3, r3, #2
 800dcee:	4413      	add	r3, r2
 800dcf0:	00db      	lsls	r3, r3, #3
 800dcf2:	440b      	add	r3, r1
 800dcf4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800dcfc:	7bfa      	ldrb	r2, [r7, #15]
 800dcfe:	6879      	ldr	r1, [r7, #4]
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	00db      	lsls	r3, r3, #3
 800dd08:	440b      	add	r3, r1
 800dd0a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800dd0e:	2200      	movs	r2, #0
 800dd10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800dd12:	7bfa      	ldrb	r2, [r7, #15]
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	4613      	mov	r3, r2
 800dd18:	009b      	lsls	r3, r3, #2
 800dd1a:	4413      	add	r3, r2
 800dd1c:	00db      	lsls	r3, r3, #3
 800dd1e:	440b      	add	r3, r1
 800dd20:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800dd28:	7bfa      	ldrb	r2, [r7, #15]
 800dd2a:	6879      	ldr	r1, [r7, #4]
 800dd2c:	4613      	mov	r3, r2
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4413      	add	r3, r2
 800dd32:	00db      	lsls	r3, r3, #3
 800dd34:	440b      	add	r3, r1
 800dd36:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800dd3a:	2200      	movs	r2, #0
 800dd3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800dd3e:	7bfb      	ldrb	r3, [r7, #15]
 800dd40:	3301      	adds	r3, #1
 800dd42:	73fb      	strb	r3, [r7, #15]
 800dd44:	7bfa      	ldrb	r2, [r7, #15]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	685b      	ldr	r3, [r3, #4]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d3b5      	bcc.n	800dcba <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	603b      	str	r3, [r7, #0]
 800dd54:	687e      	ldr	r6, [r7, #4]
 800dd56:	466d      	mov	r5, sp
 800dd58:	f106 0410 	add.w	r4, r6, #16
 800dd5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dd5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800dd60:	6823      	ldr	r3, [r4, #0]
 800dd62:	602b      	str	r3, [r5, #0]
 800dd64:	1d33      	adds	r3, r6, #4
 800dd66:	cb0e      	ldmia	r3, {r1, r2, r3}
 800dd68:	6838      	ldr	r0, [r7, #0]
 800dd6a:	f005 f8fc 	bl	8012f66 <USB_DevInit>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d005      	beq.n	800dd80 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2202      	movs	r2, #2
 800dd78:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800dd7c:	2301      	movs	r3, #1
 800dd7e:	e014      	b.n	800ddaa <HAL_PCD_Init+0x21c>
  }

  hpcd->USB_Address = 0U;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2200      	movs	r2, #0
 800dd84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	2201      	movs	r2, #1
 800dd8c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	69db      	ldr	r3, [r3, #28]
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d102      	bne.n	800dd9e <HAL_PCD_Init+0x210>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800dd98:	6878      	ldr	r0, [r7, #4]
 800dd9a:	f001 fbbf 	bl	800f51c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	4618      	mov	r0, r3
 800dda4:	f007 fa7c 	bl	80152a0 <USB_DevDisconnect>

  return HAL_OK;
 800dda8:	2300      	movs	r3, #0
}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	3714      	adds	r7, #20
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ddb2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ddb2:	b580      	push	{r7, lr}
 800ddb4:	b082      	sub	sp, #8
 800ddb6:	af00      	add	r7, sp, #0
 800ddb8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d101      	bne.n	800ddc8 <HAL_PCD_Start+0x16>
 800ddc4:	2302      	movs	r3, #2
 800ddc6:	e012      	b.n	800ddee <HAL_PCD_Start+0x3c>
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	2201      	movs	r2, #1
 800ddcc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	f005 f887 	bl	8012ee8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	4618      	mov	r0, r3
 800dde0:	f007 fa47 	bl	8015272 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800ddec:	2300      	movs	r3, #0
}
 800ddee:	4618      	mov	r0, r3
 800ddf0:	3708      	adds	r7, #8
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	bd80      	pop	{r7, pc}

0800ddf6 <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800ddf6:	b580      	push	{r7, lr}
 800ddf8:	b082      	sub	sp, #8
 800ddfa:	af00      	add	r7, sp, #0
 800ddfc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800de04:	2b01      	cmp	r3, #1
 800de06:	d101      	bne.n	800de0c <HAL_PCD_Stop+0x16>
 800de08:	2302      	movs	r3, #2
 800de0a:	e012      	b.n	800de32 <HAL_PCD_Stop+0x3c>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_DISABLE(hpcd);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4618      	mov	r0, r3
 800de1a:	f005 f87c 	bl	8012f16 <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	4618      	mov	r0, r3
 800de24:	f007 fa3c 	bl	80152a0 <USB_DevDisconnect>
    /* Disable USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
  }
#endif /* defined (USB_OTG_FS) */

  __HAL_UNLOCK(hpcd);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2200      	movs	r2, #0
 800de2c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800de30:	2300      	movs	r3, #0
}
 800de32:	4618      	mov	r0, r3
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800de3a:	b580      	push	{r7, lr}
 800de3c:	b082      	sub	sp, #8
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	4618      	mov	r0, r3
 800de48:	f007 fa3f 	bl	80152ca <USB_ReadInterrupts>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de56:	d102      	bne.n	800de5e <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fb5b 	bl	800e514 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4618      	mov	r0, r3
 800de64:	f007 fa31 	bl	80152ca <USB_ReadInterrupts>
 800de68:	4603      	mov	r3, r0
 800de6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de72:	d112      	bne.n	800de9a <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800de7c:	b29a      	uxth	r2, r3
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de86:	b292      	uxth	r2, r2
 800de88:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800de8c:	6878      	ldr	r0, [r7, #4]
 800de8e:	f009 fd48 	bl	8017922 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800de92:	2100      	movs	r1, #0
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f91e 	bl	800e0d6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f007 fa13 	bl	80152ca <USB_ReadInterrupts>
 800dea4:	4603      	mov	r3, r0
 800dea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800deaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800deae:	d10b      	bne.n	800dec8 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800deb8:	b29a      	uxth	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dec2:	b292      	uxth	r2, r2
 800dec4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4618      	mov	r0, r3
 800dece:	f007 f9fc 	bl	80152ca <USB_ReadInterrupts>
 800ded2:	4603      	mov	r3, r0
 800ded4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ded8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dedc:	d10b      	bne.n	800def6 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dee6:	b29a      	uxth	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800def0:	b292      	uxth	r2, r2
 800def2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4618      	mov	r0, r3
 800defc:	f007 f9e5 	bl	80152ca <USB_ReadInterrupts>
 800df00:	4603      	mov	r3, r0
 800df02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800df06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df0a:	d133      	bne.n	800df74 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800df14:	b29a      	uxth	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	f022 0204 	bic.w	r2, r2, #4
 800df1e:	b292      	uxth	r2, r2
 800df20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	f022 0208 	bic.w	r2, r2, #8
 800df36:	b292      	uxth	r2, r2
 800df38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800df42:	2b01      	cmp	r3, #1
 800df44:	d107      	bne.n	800df56 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	2200      	movs	r2, #0
 800df4a:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800df4e:	2100      	movs	r1, #0
 800df50:	6878      	ldr	r0, [r7, #4]
 800df52:	f00a f811 	bl	8017f78 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800df56:	6878      	ldr	r0, [r7, #4]
 800df58:	f009 fd1c 	bl	8017994 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800df64:	b29a      	uxth	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800df6e:	b292      	uxth	r2, r2
 800df70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	4618      	mov	r0, r3
 800df7a:	f007 f9a6 	bl	80152ca <USB_ReadInterrupts>
 800df7e:	4603      	mov	r3, r0
 800df80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800df88:	d126      	bne.n	800dfd8 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800df92:	b29a      	uxth	r2, r3
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	f042 0208 	orr.w	r2, r2, #8
 800df9c:	b292      	uxth	r2, r2
 800df9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dfaa:	b29a      	uxth	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfb4:	b292      	uxth	r2, r2
 800dfb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f042 0204 	orr.w	r2, r2, #4
 800dfcc:	b292      	uxth	r2, r2
 800dfce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f009 fcc4 	bl	8017960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f007 f974 	bl	80152ca <USB_ReadInterrupts>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfe8:	2b80      	cmp	r3, #128	; 0x80
 800dfea:	d13f      	bne.n	800e06c <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800dff4:	b29a      	uxth	r2, r3
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dffe:	b292      	uxth	r2, r2
 800e000:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d12b      	bne.n	800e066 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e016:	b29a      	uxth	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f042 0204 	orr.w	r2, r2, #4
 800e020:	b292      	uxth	r2, r2
 800e022:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800e02e:	b29a      	uxth	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f042 0208 	orr.w	r2, r2, #8
 800e038:	b292      	uxth	r2, r2
 800e03a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2201      	movs	r2, #1
 800e042:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800e04e:	b29b      	uxth	r3, r3
 800e050:	089b      	lsrs	r3, r3, #2
 800e052:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800e05c:	2101      	movs	r1, #1
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f009 ff8a 	bl	8017f78 <HAL_PCDEx_LPM_Callback>
 800e064:	e002      	b.n	800e06c <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f009 fc7a 	bl	8017960 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	4618      	mov	r0, r3
 800e072:	f007 f92a 	bl	80152ca <USB_ReadInterrupts>
 800e076:	4603      	mov	r3, r0
 800e078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e07c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e080:	d10e      	bne.n	800e0a0 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800e094:	b292      	uxth	r2, r2
 800e096:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f009 fc33 	bl	8017906 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f007 f910 	bl	80152ca <USB_ReadInterrupts>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e0b4:	d10b      	bne.n	800e0ce <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e0be:	b29a      	uxth	r2, r3
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0c8:	b292      	uxth	r2, r2
 800e0ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800e0ce:	bf00      	nop
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}

0800e0d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800e0d6:	b580      	push	{r7, lr}
 800e0d8:	b082      	sub	sp, #8
 800e0da:	af00      	add	r7, sp, #0
 800e0dc:	6078      	str	r0, [r7, #4]
 800e0de:	460b      	mov	r3, r1
 800e0e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e0e8:	2b01      	cmp	r3, #1
 800e0ea:	d101      	bne.n	800e0f0 <HAL_PCD_SetAddress+0x1a>
 800e0ec:	2302      	movs	r3, #2
 800e0ee:	e013      	b.n	800e118 <HAL_PCD_SetAddress+0x42>
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	78fa      	ldrb	r2, [r7, #3]
 800e0fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	78fa      	ldrb	r2, [r7, #3]
 800e106:	4611      	mov	r1, r2
 800e108:	4618      	mov	r0, r3
 800e10a:	f007 f89e 	bl	801524a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2200      	movs	r2, #0
 800e112:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e116:	2300      	movs	r3, #0
}
 800e118:	4618      	mov	r0, r3
 800e11a:	3708      	adds	r7, #8
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bd80      	pop	{r7, pc}

0800e120 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800e120:	b580      	push	{r7, lr}
 800e122:	b084      	sub	sp, #16
 800e124:	af00      	add	r7, sp, #0
 800e126:	6078      	str	r0, [r7, #4]
 800e128:	4608      	mov	r0, r1
 800e12a:	4611      	mov	r1, r2
 800e12c:	461a      	mov	r2, r3
 800e12e:	4603      	mov	r3, r0
 800e130:	70fb      	strb	r3, [r7, #3]
 800e132:	460b      	mov	r3, r1
 800e134:	803b      	strh	r3, [r7, #0]
 800e136:	4613      	mov	r3, r2
 800e138:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e13e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e142:	2b00      	cmp	r3, #0
 800e144:	da0e      	bge.n	800e164 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e146:	78fb      	ldrb	r3, [r7, #3]
 800e148:	f003 0307 	and.w	r3, r3, #7
 800e14c:	1c5a      	adds	r2, r3, #1
 800e14e:	4613      	mov	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4413      	add	r3, r2
 800e154:	00db      	lsls	r3, r3, #3
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	4413      	add	r3, r2
 800e15a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	2201      	movs	r2, #1
 800e160:	705a      	strb	r2, [r3, #1]
 800e162:	e00e      	b.n	800e182 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e164:	78fb      	ldrb	r3, [r7, #3]
 800e166:	f003 0207 	and.w	r2, r3, #7
 800e16a:	4613      	mov	r3, r2
 800e16c:	009b      	lsls	r3, r3, #2
 800e16e:	4413      	add	r3, r2
 800e170:	00db      	lsls	r3, r3, #3
 800e172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e176:	687a      	ldr	r2, [r7, #4]
 800e178:	4413      	add	r3, r2
 800e17a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	f003 0307 	and.w	r3, r3, #7
 800e188:	b2da      	uxtb	r2, r3
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800e18e:	883a      	ldrh	r2, [r7, #0]
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	78ba      	ldrb	r2, [r7, #2]
 800e198:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	785b      	ldrb	r3, [r3, #1]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d004      	beq.n	800e1ac <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	b29a      	uxth	r2, r3
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800e1ac:	78bb      	ldrb	r3, [r7, #2]
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d102      	bne.n	800e1b8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d101      	bne.n	800e1c6 <HAL_PCD_EP_Open+0xa6>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e00e      	b.n	800e1e4 <HAL_PCD_EP_Open+0xc4>
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	68f9      	ldr	r1, [r7, #12]
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f004 fee7 	bl	8012fa8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800e1e2:	7afb      	ldrb	r3, [r7, #11]
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800e1f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	da0e      	bge.n	800e21e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e200:	78fb      	ldrb	r3, [r7, #3]
 800e202:	f003 0307 	and.w	r3, r3, #7
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	4613      	mov	r3, r2
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4413      	add	r3, r2
 800e20e:	00db      	lsls	r3, r3, #3
 800e210:	687a      	ldr	r2, [r7, #4]
 800e212:	4413      	add	r3, r2
 800e214:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	2201      	movs	r2, #1
 800e21a:	705a      	strb	r2, [r3, #1]
 800e21c:	e00e      	b.n	800e23c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e21e:	78fb      	ldrb	r3, [r7, #3]
 800e220:	f003 0207 	and.w	r2, r3, #7
 800e224:	4613      	mov	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e230:	687a      	ldr	r2, [r7, #4]
 800e232:	4413      	add	r3, r2
 800e234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2200      	movs	r2, #0
 800e23a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800e23c:	78fb      	ldrb	r3, [r7, #3]
 800e23e:	f003 0307 	and.w	r3, r3, #7
 800e242:	b2da      	uxtb	r2, r3
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e24e:	2b01      	cmp	r3, #1
 800e250:	d101      	bne.n	800e256 <HAL_PCD_EP_Close+0x6a>
 800e252:	2302      	movs	r3, #2
 800e254:	e00e      	b.n	800e274 <HAL_PCD_EP_Close+0x88>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2201      	movs	r2, #1
 800e25a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68f9      	ldr	r1, [r7, #12]
 800e264:	4618      	mov	r0, r3
 800e266:	f005 fa0d 	bl	8013684 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	2200      	movs	r2, #0
 800e26e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3710      	adds	r7, #16
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	607a      	str	r2, [r7, #4]
 800e286:	603b      	str	r3, [r7, #0]
 800e288:	460b      	mov	r3, r1
 800e28a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e28c:	7afb      	ldrb	r3, [r7, #11]
 800e28e:	f003 0207 	and.w	r2, r3, #7
 800e292:	4613      	mov	r3, r2
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4413      	add	r3, r2
 800e298:	00db      	lsls	r3, r3, #3
 800e29a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	4413      	add	r3, r2
 800e2a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	687a      	ldr	r2, [r7, #4]
 800e2a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	683a      	ldr	r2, [r7, #0]
 800e2ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800e2b0:	697b      	ldr	r3, [r7, #20]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e2bc:	7afb      	ldrb	r3, [r7, #11]
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e2c8:	7afb      	ldrb	r3, [r7, #11]
 800e2ca:	f003 0307 	and.w	r3, r3, #7
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d106      	bne.n	800e2e0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6979      	ldr	r1, [r7, #20]
 800e2d8:	4618      	mov	r0, r3
 800e2da:	f005 fbc0 	bl	8013a5e <USB_EPStartXfer>
 800e2de:	e005      	b.n	800e2ec <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	6979      	ldr	r1, [r7, #20]
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	f005 fbb9 	bl	8013a5e <USB_EPStartXfer>
  }

  return HAL_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3718      	adds	r7, #24
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}

0800e2f6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e2f6:	b480      	push	{r7}
 800e2f8:	b083      	sub	sp, #12
 800e2fa:	af00      	add	r7, sp, #0
 800e2fc:	6078      	str	r0, [r7, #4]
 800e2fe:	460b      	mov	r3, r1
 800e300:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800e302:	78fb      	ldrb	r3, [r7, #3]
 800e304:	f003 0207 	and.w	r2, r3, #7
 800e308:	6879      	ldr	r1, [r7, #4]
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	00db      	lsls	r3, r3, #3
 800e312:	440b      	add	r3, r1
 800e314:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800e318:	681b      	ldr	r3, [r3, #0]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b086      	sub	sp, #24
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	607a      	str	r2, [r7, #4]
 800e330:	603b      	str	r3, [r7, #0]
 800e332:	460b      	mov	r3, r1
 800e334:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e336:	7afb      	ldrb	r3, [r7, #11]
 800e338:	f003 0307 	and.w	r3, r3, #7
 800e33c:	1c5a      	adds	r2, r3, #1
 800e33e:	4613      	mov	r3, r2
 800e340:	009b      	lsls	r3, r3, #2
 800e342:	4413      	add	r3, r2
 800e344:	00db      	lsls	r3, r3, #3
 800e346:	68fa      	ldr	r2, [r7, #12]
 800e348:	4413      	add	r3, r2
 800e34a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	683a      	ldr	r2, [r7, #0]
 800e356:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	2201      	movs	r2, #1
 800e35c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	683a      	ldr	r2, [r7, #0]
 800e364:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 800e366:	697b      	ldr	r3, [r7, #20]
 800e368:	2200      	movs	r2, #0
 800e36a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800e36c:	697b      	ldr	r3, [r7, #20]
 800e36e:	2201      	movs	r2, #1
 800e370:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e372:	7afb      	ldrb	r3, [r7, #11]
 800e374:	f003 0307 	and.w	r3, r3, #7
 800e378:	b2da      	uxtb	r2, r3
 800e37a:	697b      	ldr	r3, [r7, #20]
 800e37c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e37e:	7afb      	ldrb	r3, [r7, #11]
 800e380:	f003 0307 	and.w	r3, r3, #7
 800e384:	2b00      	cmp	r3, #0
 800e386:	d106      	bne.n	800e396 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	6979      	ldr	r1, [r7, #20]
 800e38e:	4618      	mov	r0, r3
 800e390:	f005 fb65 	bl	8013a5e <USB_EPStartXfer>
 800e394:	e005      	b.n	800e3a2 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	6979      	ldr	r1, [r7, #20]
 800e39c:	4618      	mov	r0, r3
 800e39e:	f005 fb5e 	bl	8013a5e <USB_EPStartXfer>
  }

  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}

0800e3ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e3ac:	b580      	push	{r7, lr}
 800e3ae:	b084      	sub	sp, #16
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	6078      	str	r0, [r7, #4]
 800e3b4:	460b      	mov	r3, r1
 800e3b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800e3b8:	78fb      	ldrb	r3, [r7, #3]
 800e3ba:	f003 0207 	and.w	r2, r3, #7
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d901      	bls.n	800e3ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800e3c6:	2301      	movs	r3, #1
 800e3c8:	e04c      	b.n	800e464 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e3ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	da0e      	bge.n	800e3f0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	f003 0307 	and.w	r3, r3, #7
 800e3d8:	1c5a      	adds	r2, r3, #1
 800e3da:	4613      	mov	r3, r2
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	4413      	add	r3, r2
 800e3e0:	00db      	lsls	r3, r3, #3
 800e3e2:	687a      	ldr	r2, [r7, #4]
 800e3e4:	4413      	add	r3, r2
 800e3e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	705a      	strb	r2, [r3, #1]
 800e3ee:	e00c      	b.n	800e40a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e3f0:	78fa      	ldrb	r2, [r7, #3]
 800e3f2:	4613      	mov	r3, r2
 800e3f4:	009b      	lsls	r3, r3, #2
 800e3f6:	4413      	add	r3, r2
 800e3f8:	00db      	lsls	r3, r3, #3
 800e3fa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e3fe:	687a      	ldr	r2, [r7, #4]
 800e400:	4413      	add	r3, r2
 800e402:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2200      	movs	r2, #0
 800e408:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2201      	movs	r2, #1
 800e40e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e410:	78fb      	ldrb	r3, [r7, #3]
 800e412:	f003 0307 	and.w	r3, r3, #7
 800e416:	b2da      	uxtb	r2, r3
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e422:	2b01      	cmp	r3, #1
 800e424:	d101      	bne.n	800e42a <HAL_PCD_EP_SetStall+0x7e>
 800e426:	2302      	movs	r3, #2
 800e428:	e01c      	b.n	800e464 <HAL_PCD_EP_SetStall+0xb8>
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	68f9      	ldr	r1, [r7, #12]
 800e438:	4618      	mov	r0, r3
 800e43a:	f006 fe07 	bl	801504c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800e43e:	78fb      	ldrb	r3, [r7, #3]
 800e440:	f003 0307 	and.w	r3, r3, #7
 800e444:	2b00      	cmp	r3, #0
 800e446:	d108      	bne.n	800e45a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800e452:	4619      	mov	r1, r3
 800e454:	4610      	mov	r0, r2
 800e456:	f006 ff48 	bl	80152ea <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2200      	movs	r2, #0
 800e45e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e462:	2300      	movs	r3, #0
}
 800e464:	4618      	mov	r0, r3
 800e466:	3710      	adds	r7, #16
 800e468:	46bd      	mov	sp, r7
 800e46a:	bd80      	pop	{r7, pc}

0800e46c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b084      	sub	sp, #16
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	460b      	mov	r3, r1
 800e476:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800e478:	78fb      	ldrb	r3, [r7, #3]
 800e47a:	f003 020f 	and.w	r2, r3, #15
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	685b      	ldr	r3, [r3, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d901      	bls.n	800e48a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800e486:	2301      	movs	r3, #1
 800e488:	e040      	b.n	800e50c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800e48a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	da0e      	bge.n	800e4b0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e492:	78fb      	ldrb	r3, [r7, #3]
 800e494:	f003 0307 	and.w	r3, r3, #7
 800e498:	1c5a      	adds	r2, r3, #1
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	00db      	lsls	r3, r3, #3
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	4413      	add	r3, r2
 800e4a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	705a      	strb	r2, [r3, #1]
 800e4ae:	e00e      	b.n	800e4ce <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800e4b0:	78fb      	ldrb	r3, [r7, #3]
 800e4b2:	f003 0207 	and.w	r2, r3, #7
 800e4b6:	4613      	mov	r3, r2
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	4413      	add	r3, r2
 800e4bc:	00db      	lsls	r3, r3, #3
 800e4be:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	4413      	add	r3, r2
 800e4c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800e4d4:	78fb      	ldrb	r3, [r7, #3]
 800e4d6:	f003 0307 	and.w	r3, r3, #7
 800e4da:	b2da      	uxtb	r2, r3
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d101      	bne.n	800e4ee <HAL_PCD_EP_ClrStall+0x82>
 800e4ea:	2302      	movs	r3, #2
 800e4ec:	e00e      	b.n	800e50c <HAL_PCD_EP_ClrStall+0xa0>
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2201      	movs	r2, #1
 800e4f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	68f9      	ldr	r1, [r7, #12]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f006 fdf6 	bl	80150ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800e50a:	2300      	movs	r3, #0
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08e      	sub	sp, #56	; 0x38
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800e51c:	e2d6      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
  {
    wIstr = hpcd->Instance->ISTR;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	681b      	ldr	r3, [r3, #0]
 800e522:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800e526:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800e528:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	f003 030f 	and.w	r3, r3, #15
 800e530:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800e534:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e538:	2b00      	cmp	r3, #0
 800e53a:	f040 815b 	bne.w	800e7f4 <PCD_EP_ISR_Handler+0x2e0>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800e53e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e540:	f003 0310 	and.w	r3, r3, #16
 800e544:	2b00      	cmp	r3, #0
 800e546:	d150      	bne.n	800e5ea <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	881b      	ldrh	r3, [r3, #0]
 800e54e:	b29b      	uxth	r3, r3
 800e550:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800e554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e558:	81fb      	strh	r3, [r7, #14]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	89fb      	ldrh	r3, [r7, #14]
 800e560:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e564:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e568:	b29b      	uxth	r3, r3
 800e56a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3328      	adds	r3, #40	; 0x28
 800e570:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	461a      	mov	r2, r3
 800e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	00db      	lsls	r3, r3, #3
 800e584:	4413      	add	r3, r2
 800e586:	687a      	ldr	r2, [r7, #4]
 800e588:	6812      	ldr	r2, [r2, #0]
 800e58a:	4413      	add	r3, r2
 800e58c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e590:	881b      	ldrh	r3, [r3, #0]
 800e592:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e598:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800e59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59c:	695a      	ldr	r2, [r3, #20]
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	69db      	ldr	r3, [r3, #28]
 800e5a2:	441a      	add	r2, r3
 800e5a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800e5a8:	2100      	movs	r1, #0
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f009 f991 	bl	80178d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5b6:	b2db      	uxtb	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	f000 8287 	beq.w	800eacc <PCD_EP_ISR_Handler+0x5b8>
 800e5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c0:	699b      	ldr	r3, [r3, #24]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f040 8282 	bne.w	800eacc <PCD_EP_ISR_Handler+0x5b8>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800e5ce:	b2db      	uxtb	r3, r3
 800e5d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	b292      	uxth	r2, r2
 800e5dc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2200      	movs	r2, #0
 800e5e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e5e8:	e270      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e5f0:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	881b      	ldrh	r3, [r3, #0]
 800e5f8:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800e5fa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e5fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e600:	2b00      	cmp	r3, #0
 800e602:	d032      	beq.n	800e66a <PCD_EP_ISR_Handler+0x156>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	461a      	mov	r2, r3
 800e610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	4413      	add	r3, r2
 800e618:	687a      	ldr	r2, [r7, #4]
 800e61a:	6812      	ldr	r2, [r2, #0]
 800e61c:	4413      	add	r3, r2
 800e61e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e622:	881b      	ldrh	r3, [r3, #0]
 800e624:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	6818      	ldr	r0, [r3, #0]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800e636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e638:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800e63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800e63e:	b29b      	uxth	r3, r3
 800e640:	f006 fea1 	bl	8015386 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	881b      	ldrh	r3, [r3, #0]
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e650:	4013      	ands	r3, r2
 800e652:	823b      	strh	r3, [r7, #16]
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	8a3a      	ldrh	r2, [r7, #16]
 800e65a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e65e:	b292      	uxth	r2, r2
 800e660:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800e662:	6878      	ldr	r0, [r7, #4]
 800e664:	f009 f908 	bl	8017878 <HAL_PCD_SetupStageCallback>
 800e668:	e230      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e66a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f280 822c 	bge.w	800eacc <PCD_EP_ISR_Handler+0x5b8>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	881b      	ldrh	r3, [r3, #0]
 800e67a:	b29a      	uxth	r2, r3
 800e67c:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e680:	4013      	ands	r3, r2
 800e682:	83bb      	strh	r3, [r7, #28]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	8bba      	ldrh	r2, [r7, #28]
 800e68a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e68e:	b292      	uxth	r2, r2
 800e690:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e69a:	b29b      	uxth	r3, r3
 800e69c:	461a      	mov	r2, r3
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	00db      	lsls	r3, r3, #3
 800e6a4:	4413      	add	r3, r2
 800e6a6:	687a      	ldr	r2, [r7, #4]
 800e6a8:	6812      	ldr	r2, [r2, #0]
 800e6aa:	4413      	add	r3, r2
 800e6ac:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	69db      	ldr	r3, [r3, #28]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d019      	beq.n	800e6f6 <PCD_EP_ISR_Handler+0x1e2>
 800e6c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d015      	beq.n	800e6f6 <PCD_EP_ISR_Handler+0x1e2>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6818      	ldr	r0, [r3, #0]
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	6959      	ldr	r1, [r3, #20]
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800e6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	f006 fe53 	bl	8015386 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800e6e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e2:	695a      	ldr	r2, [r3, #20]
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6e6:	69db      	ldr	r3, [r3, #28]
 800e6e8:	441a      	add	r2, r3
 800e6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ec:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	6878      	ldr	r0, [r7, #4]
 800e6f2:	f009 f8d3 	bl	801789c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	681b      	ldr	r3, [r3, #0]
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e702:	2b00      	cmp	r3, #0
 800e704:	f040 81e2 	bne.w	800eacc <PCD_EP_ISR_Handler+0x5b8>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	61bb      	str	r3, [r7, #24]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e716:	b29b      	uxth	r3, r3
 800e718:	461a      	mov	r2, r3
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	4413      	add	r3, r2
 800e71e:	61bb      	str	r3, [r7, #24]
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e726:	617b      	str	r3, [r7, #20]
 800e728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e72a:	691b      	ldr	r3, [r3, #16]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d112      	bne.n	800e756 <PCD_EP_ISR_Handler+0x242>
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	881b      	ldrh	r3, [r3, #0]
 800e734:	b29b      	uxth	r3, r3
 800e736:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800e73a:	b29a      	uxth	r2, r3
 800e73c:	697b      	ldr	r3, [r7, #20]
 800e73e:	801a      	strh	r2, [r3, #0]
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	881b      	ldrh	r3, [r3, #0]
 800e744:	b29b      	uxth	r3, r3
 800e746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e74e:	b29a      	uxth	r2, r3
 800e750:	697b      	ldr	r3, [r7, #20]
 800e752:	801a      	strh	r2, [r3, #0]
 800e754:	e02f      	b.n	800e7b6 <PCD_EP_ISR_Handler+0x2a2>
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	691b      	ldr	r3, [r3, #16]
 800e75a:	2b3e      	cmp	r3, #62	; 0x3e
 800e75c:	d813      	bhi.n	800e786 <PCD_EP_ISR_Handler+0x272>
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	691b      	ldr	r3, [r3, #16]
 800e762:	085b      	lsrs	r3, r3, #1
 800e764:	633b      	str	r3, [r7, #48]	; 0x30
 800e766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e768:	691b      	ldr	r3, [r3, #16]
 800e76a:	f003 0301 	and.w	r3, r3, #1
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d002      	beq.n	800e778 <PCD_EP_ISR_Handler+0x264>
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	3301      	adds	r3, #1
 800e776:	633b      	str	r3, [r7, #48]	; 0x30
 800e778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	029b      	lsls	r3, r3, #10
 800e77e:	b29a      	uxth	r2, r3
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	801a      	strh	r2, [r3, #0]
 800e784:	e017      	b.n	800e7b6 <PCD_EP_ISR_Handler+0x2a2>
 800e786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	095b      	lsrs	r3, r3, #5
 800e78c:	633b      	str	r3, [r7, #48]	; 0x30
 800e78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e790:	691b      	ldr	r3, [r3, #16]
 800e792:	f003 031f 	and.w	r3, r3, #31
 800e796:	2b00      	cmp	r3, #0
 800e798:	d102      	bne.n	800e7a0 <PCD_EP_ISR_Handler+0x28c>
 800e79a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e79c:	3b01      	subs	r3, #1
 800e79e:	633b      	str	r3, [r7, #48]	; 0x30
 800e7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a2:	b29b      	uxth	r3, r3
 800e7a4:	029b      	lsls	r3, r3, #10
 800e7a6:	b29b      	uxth	r3, r3
 800e7a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e7ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e7b0:	b29a      	uxth	r2, r3
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	881b      	ldrh	r3, [r3, #0]
 800e7bc:	b29b      	uxth	r3, r3
 800e7be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e7c6:	827b      	strh	r3, [r7, #18]
 800e7c8:	8a7b      	ldrh	r3, [r7, #18]
 800e7ca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800e7ce:	827b      	strh	r3, [r7, #18]
 800e7d0:	8a7b      	ldrh	r3, [r7, #18]
 800e7d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800e7d6:	827b      	strh	r3, [r7, #18]
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	8a7b      	ldrh	r3, [r7, #18]
 800e7de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e7e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e7e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	8013      	strh	r3, [r2, #0]
 800e7f2:	e16b      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7fe:	009b      	lsls	r3, r3, #2
 800e800:	4413      	add	r3, r2
 800e802:	881b      	ldrh	r3, [r3, #0]
 800e804:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800e806:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	f280 80e4 	bge.w	800e9d8 <PCD_EP_ISR_Handler+0x4c4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	461a      	mov	r2, r3
 800e816:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	4413      	add	r3, r2
 800e81e:	881b      	ldrh	r3, [r3, #0]
 800e820:	b29a      	uxth	r2, r3
 800e822:	f640 738f 	movw	r3, #3983	; 0xf8f
 800e826:	4013      	ands	r3, r2
 800e828:	853b      	strh	r3, [r7, #40]	; 0x28
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	461a      	mov	r2, r3
 800e830:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e834:	009b      	lsls	r3, r3, #2
 800e836:	4413      	add	r3, r2
 800e838:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e83a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e83e:	b292      	uxth	r2, r2
 800e840:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800e842:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e846:	4613      	mov	r3, r2
 800e848:	009b      	lsls	r3, r3, #2
 800e84a:	4413      	add	r3, r2
 800e84c:	00db      	lsls	r3, r3, #3
 800e84e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800e852:	687a      	ldr	r2, [r7, #4]
 800e854:	4413      	add	r3, r2
 800e856:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800e858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e85a:	7b1b      	ldrb	r3, [r3, #12]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d120      	bne.n	800e8a2 <PCD_EP_ISR_Handler+0x38e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e868:	b29b      	uxth	r3, r3
 800e86a:	461a      	mov	r2, r3
 800e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	00db      	lsls	r3, r3, #3
 800e872:	4413      	add	r3, r2
 800e874:	687a      	ldr	r2, [r7, #4]
 800e876:	6812      	ldr	r2, [r2, #0]
 800e878:	4413      	add	r3, r2
 800e87a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e87e:	881b      	ldrh	r3, [r3, #0]
 800e880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e884:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800e886:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e888:	2b00      	cmp	r3, #0
 800e88a:	f000 8083 	beq.w	800e994 <PCD_EP_ISR_Handler+0x480>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6818      	ldr	r0, [r3, #0]
 800e892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e894:	6959      	ldr	r1, [r3, #20]
 800e896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e898:	88da      	ldrh	r2, [r3, #6]
 800e89a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e89c:	f006 fd73 	bl	8015386 <USB_ReadPMA>
 800e8a0:	e078      	b.n	800e994 <PCD_EP_ISR_Handler+0x480>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8a4:	78db      	ldrb	r3, [r3, #3]
 800e8a6:	2b02      	cmp	r3, #2
 800e8a8:	d108      	bne.n	800e8bc <PCD_EP_ISR_Handler+0x3a8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800e8aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e8ac:	461a      	mov	r2, r3
 800e8ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f919 	bl	800eae8 <HAL_PCD_EP_DB_Receive>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	86fb      	strh	r3, [r7, #54]	; 0x36
 800e8ba:	e06b      	b.n	800e994 <PCD_EP_ISR_Handler+0x480>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	881b      	ldrh	r3, [r3, #0]
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e8d6:	847b      	strh	r3, [r7, #34]	; 0x22
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	461a      	mov	r2, r3
 800e8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	441a      	add	r2, r3
 800e8e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800e8ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800e8f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e8f4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800e8f8:	b29b      	uxth	r3, r3
 800e8fa:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	461a      	mov	r2, r3
 800e902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	009b      	lsls	r3, r3, #2
 800e908:	4413      	add	r3, r2
 800e90a:	881b      	ldrh	r3, [r3, #0]
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e912:	2b00      	cmp	r3, #0
 800e914:	d01f      	beq.n	800e956 <PCD_EP_ISR_Handler+0x442>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e91e:	b29b      	uxth	r3, r3
 800e920:	461a      	mov	r2, r3
 800e922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e924:	781b      	ldrb	r3, [r3, #0]
 800e926:	00db      	lsls	r3, r3, #3
 800e928:	4413      	add	r3, r2
 800e92a:	687a      	ldr	r2, [r7, #4]
 800e92c:	6812      	ldr	r2, [r2, #0]
 800e92e:	4413      	add	r3, r2
 800e930:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800e934:	881b      	ldrh	r3, [r3, #0]
 800e936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e93a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800e93c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d028      	beq.n	800e994 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6818      	ldr	r0, [r3, #0]
 800e946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e948:	6959      	ldr	r1, [r3, #20]
 800e94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e94c:	891a      	ldrh	r2, [r3, #8]
 800e94e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e950:	f006 fd19 	bl	8015386 <USB_ReadPMA>
 800e954:	e01e      	b.n	800e994 <PCD_EP_ISR_Handler+0x480>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800e95e:	b29b      	uxth	r3, r3
 800e960:	461a      	mov	r2, r3
 800e962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e964:	781b      	ldrb	r3, [r3, #0]
 800e966:	00db      	lsls	r3, r3, #3
 800e968:	4413      	add	r3, r2
 800e96a:	687a      	ldr	r2, [r7, #4]
 800e96c:	6812      	ldr	r2, [r2, #0]
 800e96e:	4413      	add	r3, r2
 800e970:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800e974:	881b      	ldrh	r3, [r3, #0]
 800e976:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e97a:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800e97c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d008      	beq.n	800e994 <PCD_EP_ISR_Handler+0x480>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6818      	ldr	r0, [r3, #0]
 800e986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e988:	6959      	ldr	r1, [r3, #20]
 800e98a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e98c:	895a      	ldrh	r2, [r3, #10]
 800e98e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e990:	f006 fcf9 	bl	8015386 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800e994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e996:	69da      	ldr	r2, [r3, #28]
 800e998:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e99a:	441a      	add	r2, r3
 800e99c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e99e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800e9a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9a2:	695a      	ldr	r2, [r3, #20]
 800e9a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e9a6:	441a      	add	r2, r3
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800e9ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ae:	699b      	ldr	r3, [r3, #24]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d004      	beq.n	800e9be <PCD_EP_ISR_Handler+0x4aa>
 800e9b4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9b8:	691b      	ldr	r3, [r3, #16]
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d206      	bcs.n	800e9cc <PCD_EP_ISR_Handler+0x4b8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800e9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f008 ff69 	bl	801789c <HAL_PCD_DataOutStageCallback>
 800e9ca:	e005      	b.n	800e9d8 <PCD_EP_ISR_Handler+0x4c4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	f005 f843 	bl	8013a5e <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800e9d8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d074      	beq.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
      {
        ep = &hpcd->IN_ep[epindex];
 800e9e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e9e6:	1c5a      	adds	r2, r3, #1
 800e9e8:	4613      	mov	r3, r2
 800e9ea:	009b      	lsls	r3, r3, #2
 800e9ec:	4413      	add	r3, r2
 800e9ee:	00db      	lsls	r3, r3, #3
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	4413      	add	r3, r2
 800e9f4:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea00:	009b      	lsls	r3, r3, #2
 800ea02:	4413      	add	r3, r2
 800ea04:	881b      	ldrh	r3, [r3, #0]
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800ea0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ea10:	843b      	strh	r3, [r7, #32]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	461a      	mov	r2, r3
 800ea18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	441a      	add	r2, r3
 800ea20:	8c3b      	ldrh	r3, [r7, #32]
 800ea22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ea26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ea2a:	b29b      	uxth	r3, r3
 800ea2c:	8013      	strh	r3, [r2, #0]

        /* Manage Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	78db      	ldrb	r3, [r3, #3]
 800ea32:	2b02      	cmp	r3, #2
 800ea34:	d144      	bne.n	800eac0 <PCD_EP_ISR_Handler+0x5ac>
 800ea36:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d13f      	bne.n	800eac0 <PCD_EP_ISR_Handler+0x5ac>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ea48:	b29b      	uxth	r3, r3
 800ea4a:	461a      	mov	r2, r3
 800ea4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	00db      	lsls	r3, r3, #3
 800ea52:	4413      	add	r3, r2
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	6812      	ldr	r2, [r2, #0]
 800ea58:	4413      	add	r3, r2
 800ea5a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ea5e:	881b      	ldrh	r3, [r3, #0]
 800ea60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea64:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800ea66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea68:	699a      	ldr	r2, [r3, #24]
 800ea6a:	8bfb      	ldrh	r3, [r7, #30]
 800ea6c:	429a      	cmp	r2, r3
 800ea6e:	d906      	bls.n	800ea7e <PCD_EP_ISR_Handler+0x56a>
          {
            ep->xfer_len -= TxByteNbre;
 800ea70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea72:	699a      	ldr	r2, [r3, #24]
 800ea74:	8bfb      	ldrh	r3, [r7, #30]
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7a:	619a      	str	r2, [r3, #24]
 800ea7c:	e002      	b.n	800ea84 <PCD_EP_ISR_Handler+0x570>
          }
          else
          {
            ep->xfer_len = 0U;
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea80:	2200      	movs	r2, #0
 800ea82:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea86:	699b      	ldr	r3, [r3, #24]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d106      	bne.n	800ea9a <PCD_EP_ISR_Handler+0x586>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ea8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	4619      	mov	r1, r3
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f008 ff1d 	bl	80178d2 <HAL_PCD_DataInStageCallback>
 800ea98:	e018      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800ea9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea9c:	695a      	ldr	r2, [r3, #20]
 800ea9e:	8bfb      	ldrh	r3, [r7, #30]
 800eaa0:	441a      	add	r2, r3
 800eaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa4:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800eaa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eaa8:	69da      	ldr	r2, [r3, #28]
 800eaaa:	8bfb      	ldrh	r3, [r7, #30]
 800eaac:	441a      	add	r2, r3
 800eaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab0:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eab8:	4618      	mov	r0, r3
 800eaba:	f004 ffd0 	bl	8013a5e <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800eabe:	e005      	b.n	800eacc <PCD_EP_ISR_Handler+0x5b8>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800eac0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eac2:	461a      	mov	r2, r3
 800eac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 f917 	bl	800ecfa <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ead4:	b29b      	uxth	r3, r3
 800ead6:	b21b      	sxth	r3, r3
 800ead8:	2b00      	cmp	r3, #0
 800eada:	f6ff ad20 	blt.w	800e51e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800eade:	2300      	movs	r3, #0
}
 800eae0:	4618      	mov	r0, r3
 800eae2:	3738      	adds	r7, #56	; 0x38
 800eae4:	46bd      	mov	sp, r7
 800eae6:	bd80      	pop	{r7, pc}

0800eae8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b088      	sub	sp, #32
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	60f8      	str	r0, [r7, #12]
 800eaf0:	60b9      	str	r1, [r7, #8]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eaf6:	88fb      	ldrh	r3, [r7, #6]
 800eaf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d07c      	beq.n	800ebfa <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	781b      	ldrb	r3, [r3, #0]
 800eb10:	00db      	lsls	r3, r3, #3
 800eb12:	4413      	add	r3, r2
 800eb14:	68fa      	ldr	r2, [r7, #12]
 800eb16:	6812      	ldr	r2, [r2, #0]
 800eb18:	4413      	add	r3, r2
 800eb1a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eb24:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800eb26:	68bb      	ldr	r3, [r7, #8]
 800eb28:	699a      	ldr	r2, [r3, #24]
 800eb2a:	8b7b      	ldrh	r3, [r7, #26]
 800eb2c:	429a      	cmp	r2, r3
 800eb2e:	d306      	bcc.n	800eb3e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	699a      	ldr	r2, [r3, #24]
 800eb34:	8b7b      	ldrh	r3, [r7, #26]
 800eb36:	1ad2      	subs	r2, r2, r3
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	619a      	str	r2, [r3, #24]
 800eb3c:	e002      	b.n	800eb44 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800eb3e:	68bb      	ldr	r3, [r7, #8]
 800eb40:	2200      	movs	r2, #0
 800eb42:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d123      	bne.n	800eb94 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	461a      	mov	r2, r3
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	781b      	ldrb	r3, [r3, #0]
 800eb56:	009b      	lsls	r3, r3, #2
 800eb58:	4413      	add	r3, r2
 800eb5a:	881b      	ldrh	r3, [r3, #0]
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eb66:	833b      	strh	r3, [r7, #24]
 800eb68:	8b3b      	ldrh	r3, [r7, #24]
 800eb6a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800eb6e:	833b      	strh	r3, [r7, #24]
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	461a      	mov	r2, r3
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	781b      	ldrb	r3, [r3, #0]
 800eb7a:	009b      	lsls	r3, r3, #2
 800eb7c:	441a      	add	r2, r3
 800eb7e:	8b3b      	ldrh	r3, [r7, #24]
 800eb80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eb84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eb88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800eb8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800eb94:	88fb      	ldrh	r3, [r7, #6]
 800eb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d01f      	beq.n	800ebde <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	781b      	ldrb	r3, [r3, #0]
 800eba8:	009b      	lsls	r3, r3, #2
 800ebaa:	4413      	add	r3, r2
 800ebac:	881b      	ldrh	r3, [r3, #0]
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ebb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ebb8:	82fb      	strh	r3, [r7, #22]
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	009b      	lsls	r3, r3, #2
 800ebc6:	441a      	add	r2, r3
 800ebc8:	8afb      	ldrh	r3, [r7, #22]
 800ebca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ebce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ebd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ebd6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ebde:	8b7b      	ldrh	r3, [r7, #26]
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f000 8085 	beq.w	800ecf0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	6818      	ldr	r0, [r3, #0]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	6959      	ldr	r1, [r3, #20]
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	891a      	ldrh	r2, [r3, #8]
 800ebf2:	8b7b      	ldrh	r3, [r7, #26]
 800ebf4:	f006 fbc7 	bl	8015386 <USB_ReadPMA>
 800ebf8:	e07a      	b.n	800ecf0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	461a      	mov	r2, r3
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	00db      	lsls	r3, r3, #3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	68fa      	ldr	r2, [r7, #12]
 800ec10:	6812      	ldr	r2, [r2, #0]
 800ec12:	4413      	add	r3, r2
 800ec14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ec18:	881b      	ldrh	r3, [r3, #0]
 800ec1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec1e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	699a      	ldr	r2, [r3, #24]
 800ec24:	8b7b      	ldrh	r3, [r7, #26]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d306      	bcc.n	800ec38 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	699a      	ldr	r2, [r3, #24]
 800ec2e:	8b7b      	ldrh	r3, [r7, #26]
 800ec30:	1ad2      	subs	r2, r2, r3
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	619a      	str	r2, [r3, #24]
 800ec36:	e002      	b.n	800ec3e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ec38:	68bb      	ldr	r3, [r7, #8]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	699b      	ldr	r3, [r3, #24]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d123      	bne.n	800ec8e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	781b      	ldrb	r3, [r3, #0]
 800ec50:	009b      	lsls	r3, r3, #2
 800ec52:	4413      	add	r3, r2
 800ec54:	881b      	ldrh	r3, [r3, #0]
 800ec56:	b29b      	uxth	r3, r3
 800ec58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ec5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ec60:	83fb      	strh	r3, [r7, #30]
 800ec62:	8bfb      	ldrh	r3, [r7, #30]
 800ec64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ec68:	83fb      	strh	r3, [r7, #30]
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	461a      	mov	r2, r3
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	441a      	add	r2, r3
 800ec78:	8bfb      	ldrh	r3, [r7, #30]
 800ec7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ec7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ec82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ec86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ec8a:	b29b      	uxth	r3, r3
 800ec8c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ec8e:	88fb      	ldrh	r3, [r7, #6]
 800ec90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d11f      	bne.n	800ecd8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	4413      	add	r3, r2
 800eca6:	881b      	ldrh	r3, [r3, #0]
 800eca8:	b29b      	uxth	r3, r3
 800ecaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ecae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ecb2:	83bb      	strh	r3, [r7, #28]
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	461a      	mov	r2, r3
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	781b      	ldrb	r3, [r3, #0]
 800ecbe:	009b      	lsls	r3, r3, #2
 800ecc0:	441a      	add	r2, r3
 800ecc2:	8bbb      	ldrh	r3, [r7, #28]
 800ecc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ecc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ecd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ecd4:	b29b      	uxth	r3, r3
 800ecd6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800ecd8:	8b7b      	ldrh	r3, [r7, #26]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d008      	beq.n	800ecf0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	6818      	ldr	r0, [r3, #0]
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	6959      	ldr	r1, [r3, #20]
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	895a      	ldrh	r2, [r3, #10]
 800ecea:	8b7b      	ldrh	r3, [r7, #26]
 800ecec:	f006 fb4b 	bl	8015386 <USB_ReadPMA>
    }
  }

  return count;
 800ecf0:	8b7b      	ldrh	r3, [r7, #26]
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3720      	adds	r7, #32
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}

0800ecfa <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800ecfa:	b580      	push	{r7, lr}
 800ecfc:	b0a2      	sub	sp, #136	; 0x88
 800ecfe:	af00      	add	r7, sp, #0
 800ed00:	60f8      	str	r0, [r7, #12]
 800ed02:	60b9      	str	r1, [r7, #8]
 800ed04:	4613      	mov	r3, r2
 800ed06:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ed08:	88fb      	ldrh	r3, [r7, #6]
 800ed0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f000 81c5 	beq.w	800f09e <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	461a      	mov	r2, r3
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	4413      	add	r3, r2
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	4413      	add	r3, r2
 800ed2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed32:	881b      	ldrh	r3, [r3, #0]
 800ed34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed38:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	699a      	ldr	r2, [r3, #24]
 800ed40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d907      	bls.n	800ed58 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxByteNbre;
 800ed48:	68bb      	ldr	r3, [r7, #8]
 800ed4a:	699a      	ldr	r2, [r3, #24]
 800ed4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ed50:	1ad2      	subs	r2, r2, r3
 800ed52:	68bb      	ldr	r3, [r7, #8]
 800ed54:	619a      	str	r2, [r3, #24]
 800ed56:	e002      	b.n	800ed5e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	699b      	ldr	r3, [r3, #24]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	f040 80b9 	bne.w	800eeda <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	785b      	ldrb	r3, [r3, #1]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d126      	bne.n	800edbe <HAL_PCD_EP_DB_Transmit+0xc4>
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	461a      	mov	r2, r3
 800ed82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed84:	4413      	add	r3, r2
 800ed86:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed88:	68bb      	ldr	r3, [r7, #8]
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	00da      	lsls	r2, r3, #3
 800ed8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed90:	4413      	add	r3, r2
 800ed92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ed96:	627b      	str	r3, [r7, #36]	; 0x24
 800ed98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9a:	881b      	ldrh	r3, [r3, #0]
 800ed9c:	b29b      	uxth	r3, r3
 800ed9e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800eda2:	b29a      	uxth	r2, r3
 800eda4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda6:	801a      	strh	r2, [r3, #0]
 800eda8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800edb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800edb6:	b29a      	uxth	r2, r3
 800edb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edba:	801a      	strh	r2, [r3, #0]
 800edbc:	e01a      	b.n	800edf4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	785b      	ldrb	r3, [r3, #1]
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	d116      	bne.n	800edf4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	633b      	str	r3, [r7, #48]	; 0x30
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	461a      	mov	r2, r3
 800edd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edda:	4413      	add	r3, r2
 800eddc:	633b      	str	r3, [r7, #48]	; 0x30
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	781b      	ldrb	r3, [r3, #0]
 800ede2:	00da      	lsls	r2, r3, #3
 800ede4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede6:	4413      	add	r3, r2
 800ede8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800edec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800edee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edf0:	2200      	movs	r2, #0
 800edf2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	623b      	str	r3, [r7, #32]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	785b      	ldrb	r3, [r3, #1]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d126      	bne.n	800ee50 <HAL_PCD_EP_DB_Transmit+0x156>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	61bb      	str	r3, [r7, #24]
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee10:	b29b      	uxth	r3, r3
 800ee12:	461a      	mov	r2, r3
 800ee14:	69bb      	ldr	r3, [r7, #24]
 800ee16:	4413      	add	r3, r2
 800ee18:	61bb      	str	r3, [r7, #24]
 800ee1a:	68bb      	ldr	r3, [r7, #8]
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	00da      	lsls	r2, r3, #3
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	4413      	add	r3, r2
 800ee24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ee28:	617b      	str	r3, [r7, #20]
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	881b      	ldrh	r3, [r3, #0]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ee34:	b29a      	uxth	r2, r3
 800ee36:	697b      	ldr	r3, [r7, #20]
 800ee38:	801a      	strh	r2, [r3, #0]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	881b      	ldrh	r3, [r3, #0]
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ee44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	801a      	strh	r2, [r3, #0]
 800ee4e:	e017      	b.n	800ee80 <HAL_PCD_EP_DB_Transmit+0x186>
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	785b      	ldrb	r3, [r3, #1]
 800ee54:	2b01      	cmp	r3, #1
 800ee56:	d113      	bne.n	800ee80 <HAL_PCD_EP_DB_Transmit+0x186>
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	461a      	mov	r2, r3
 800ee64:	6a3b      	ldr	r3, [r7, #32]
 800ee66:	4413      	add	r3, r2
 800ee68:	623b      	str	r3, [r7, #32]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	00da      	lsls	r2, r3, #3
 800ee70:	6a3b      	ldr	r3, [r7, #32]
 800ee72:	4413      	add	r3, r2
 800ee74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ee78:	61fb      	str	r3, [r7, #28]
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	2200      	movs	r2, #0
 800ee7e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	4619      	mov	r1, r3
 800ee86:	68f8      	ldr	r0, [r7, #12]
 800ee88:	f008 fd23 	bl	80178d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800ee8c:	88fb      	ldrh	r3, [r7, #6]
 800ee8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	f000 82d2 	beq.w	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	461a      	mov	r2, r3
 800ee9e:	68bb      	ldr	r3, [r7, #8]
 800eea0:	781b      	ldrb	r3, [r3, #0]
 800eea2:	009b      	lsls	r3, r3, #2
 800eea4:	4413      	add	r3, r2
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	b29b      	uxth	r3, r3
 800eeaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eeb2:	827b      	strh	r3, [r7, #18]
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	461a      	mov	r2, r3
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	781b      	ldrb	r3, [r3, #0]
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	441a      	add	r2, r3
 800eec2:	8a7b      	ldrh	r3, [r7, #18]
 800eec4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800eec8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800eecc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800eed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eed4:	b29b      	uxth	r3, r3
 800eed6:	8013      	strh	r3, [r2, #0]
 800eed8:	e2b0      	b.n	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800eeda:	88fb      	ldrh	r3, [r7, #6]
 800eedc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d021      	beq.n	800ef28 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	461a      	mov	r2, r3
 800eeea:	68bb      	ldr	r3, [r7, #8]
 800eeec:	781b      	ldrb	r3, [r3, #0]
 800eeee:	009b      	lsls	r3, r3, #2
 800eef0:	4413      	add	r3, r2
 800eef2:	881b      	ldrh	r3, [r3, #0]
 800eef4:	b29b      	uxth	r3, r3
 800eef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800eefa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800eefe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	461a      	mov	r2, r3
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	009b      	lsls	r3, r3, #2
 800ef0e:	441a      	add	r2, r3
 800ef10:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ef14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ef18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ef1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ef20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ef2e:	2b01      	cmp	r3, #1
 800ef30:	f040 8284 	bne.w	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800ef34:	68bb      	ldr	r3, [r7, #8]
 800ef36:	695a      	ldr	r2, [r3, #20]
 800ef38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef3c:	441a      	add	r2, r3
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800ef42:	68bb      	ldr	r3, [r7, #8]
 800ef44:	69da      	ldr	r2, [r3, #28]
 800ef46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef4a:	441a      	add	r2, r3
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ef50:	68bb      	ldr	r3, [r7, #8]
 800ef52:	6a1a      	ldr	r2, [r3, #32]
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	691b      	ldr	r3, [r3, #16]
 800ef58:	429a      	cmp	r2, r3
 800ef5a:	d309      	bcc.n	800ef70 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	691b      	ldr	r3, [r3, #16]
 800ef60:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	6a1a      	ldr	r2, [r3, #32]
 800ef66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef68:	1ad2      	subs	r2, r2, r3
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	621a      	str	r2, [r3, #32]
 800ef6e:	e015      	b.n	800ef9c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 800ef70:	68bb      	ldr	r3, [r7, #8]
 800ef72:	6a1b      	ldr	r3, [r3, #32]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d107      	bne.n	800ef88 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxByteNbre;
 800ef78:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ef7c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	2200      	movs	r2, #0
 800ef82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800ef86:	e009      	b.n	800ef9c <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	6a1b      	ldr	r3, [r3, #32]
 800ef94:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	2200      	movs	r2, #0
 800ef9a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	785b      	ldrb	r3, [r3, #1]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d155      	bne.n	800f050 <HAL_PCD_EP_DB_Transmit+0x356>
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	63bb      	str	r3, [r7, #56]	; 0x38
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800efb2:	b29b      	uxth	r3, r3
 800efb4:	461a      	mov	r2, r3
 800efb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb8:	4413      	add	r3, r2
 800efba:	63bb      	str	r3, [r7, #56]	; 0x38
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	781b      	ldrb	r3, [r3, #0]
 800efc0:	00da      	lsls	r2, r3, #3
 800efc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc4:	4413      	add	r3, r2
 800efc6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800efca:	637b      	str	r3, [r7, #52]	; 0x34
 800efcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d112      	bne.n	800eff8 <HAL_PCD_EP_DB_Transmit+0x2fe>
 800efd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efd4:	881b      	ldrh	r3, [r3, #0]
 800efd6:	b29b      	uxth	r3, r3
 800efd8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800efdc:	b29a      	uxth	r2, r3
 800efde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe0:	801a      	strh	r2, [r3, #0]
 800efe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800efe4:	881b      	ldrh	r3, [r3, #0]
 800efe6:	b29b      	uxth	r3, r3
 800efe8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eff4:	801a      	strh	r2, [r3, #0]
 800eff6:	e047      	b.n	800f088 <HAL_PCD_EP_DB_Transmit+0x38e>
 800eff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800effa:	2b3e      	cmp	r3, #62	; 0x3e
 800effc:	d811      	bhi.n	800f022 <HAL_PCD_EP_DB_Transmit+0x328>
 800effe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f000:	085b      	lsrs	r3, r3, #1
 800f002:	64bb      	str	r3, [r7, #72]	; 0x48
 800f004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f006:	f003 0301 	and.w	r3, r3, #1
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d002      	beq.n	800f014 <HAL_PCD_EP_DB_Transmit+0x31a>
 800f00e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f010:	3301      	adds	r3, #1
 800f012:	64bb      	str	r3, [r7, #72]	; 0x48
 800f014:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f016:	b29b      	uxth	r3, r3
 800f018:	029b      	lsls	r3, r3, #10
 800f01a:	b29a      	uxth	r2, r3
 800f01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f01e:	801a      	strh	r2, [r3, #0]
 800f020:	e032      	b.n	800f088 <HAL_PCD_EP_DB_Transmit+0x38e>
 800f022:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f024:	095b      	lsrs	r3, r3, #5
 800f026:	64bb      	str	r3, [r7, #72]	; 0x48
 800f028:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f02a:	f003 031f 	and.w	r3, r3, #31
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d102      	bne.n	800f038 <HAL_PCD_EP_DB_Transmit+0x33e>
 800f032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f034:	3b01      	subs	r3, #1
 800f036:	64bb      	str	r3, [r7, #72]	; 0x48
 800f038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f03a:	b29b      	uxth	r3, r3
 800f03c:	029b      	lsls	r3, r3, #10
 800f03e:	b29b      	uxth	r3, r3
 800f040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f048:	b29a      	uxth	r2, r3
 800f04a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04c:	801a      	strh	r2, [r3, #0]
 800f04e:	e01b      	b.n	800f088 <HAL_PCD_EP_DB_Transmit+0x38e>
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	785b      	ldrb	r3, [r3, #1]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d117      	bne.n	800f088 <HAL_PCD_EP_DB_Transmit+0x38e>
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	643b      	str	r3, [r7, #64]	; 0x40
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f066:	b29b      	uxth	r3, r3
 800f068:	461a      	mov	r2, r3
 800f06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f06c:	4413      	add	r3, r2
 800f06e:	643b      	str	r3, [r7, #64]	; 0x40
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	781b      	ldrb	r3, [r3, #0]
 800f074:	00da      	lsls	r2, r3, #3
 800f076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f078:	4413      	add	r3, r2
 800f07a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f07e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800f080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f082:	b29a      	uxth	r2, r3
 800f084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f086:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	6818      	ldr	r0, [r3, #0]
 800f08c:	68bb      	ldr	r3, [r7, #8]
 800f08e:	6959      	ldr	r1, [r3, #20]
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	891a      	ldrh	r2, [r3, #8]
 800f094:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f096:	b29b      	uxth	r3, r3
 800f098:	f006 f933 	bl	8015302 <USB_WritePMA>
 800f09c:	e1ce      	b.n	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f0a6:	b29b      	uxth	r3, r3
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	4413      	add	r3, r2
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	6812      	ldr	r2, [r2, #0]
 800f0b6:	4413      	add	r3, r2
 800f0b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f0bc:	881b      	ldrh	r3, [r3, #0]
 800f0be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0c2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800f0c6:	68bb      	ldr	r3, [r7, #8]
 800f0c8:	699a      	ldr	r2, [r3, #24]
 800f0ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d307      	bcc.n	800f0e2 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxByteNbre;
 800f0d2:	68bb      	ldr	r3, [r7, #8]
 800f0d4:	699a      	ldr	r2, [r3, #24]
 800f0d6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f0da:	1ad2      	subs	r2, r2, r3
 800f0dc:	68bb      	ldr	r3, [r7, #8]
 800f0de:	619a      	str	r2, [r3, #24]
 800f0e0:	e002      	b.n	800f0e8 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	699b      	ldr	r3, [r3, #24]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	f040 80c4 	bne.w	800f27a <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f0f2:	68bb      	ldr	r3, [r7, #8]
 800f0f4:	785b      	ldrb	r3, [r3, #1]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d126      	bne.n	800f148 <HAL_PCD_EP_DB_Transmit+0x44e>
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f108:	b29b      	uxth	r3, r3
 800f10a:	461a      	mov	r2, r3
 800f10c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f10e:	4413      	add	r3, r2
 800f110:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f112:	68bb      	ldr	r3, [r7, #8]
 800f114:	781b      	ldrb	r3, [r3, #0]
 800f116:	00da      	lsls	r2, r3, #3
 800f118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f11a:	4413      	add	r3, r2
 800f11c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f120:	66bb      	str	r3, [r7, #104]	; 0x68
 800f122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f124:	881b      	ldrh	r3, [r3, #0]
 800f126:	b29b      	uxth	r3, r3
 800f128:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f12c:	b29a      	uxth	r2, r3
 800f12e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f130:	801a      	strh	r2, [r3, #0]
 800f132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f134:	881b      	ldrh	r3, [r3, #0]
 800f136:	b29b      	uxth	r3, r3
 800f138:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f13c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f140:	b29a      	uxth	r2, r3
 800f142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f144:	801a      	strh	r2, [r3, #0]
 800f146:	e01a      	b.n	800f17e <HAL_PCD_EP_DB_Transmit+0x484>
 800f148:	68bb      	ldr	r3, [r7, #8]
 800f14a:	785b      	ldrb	r3, [r3, #1]
 800f14c:	2b01      	cmp	r3, #1
 800f14e:	d116      	bne.n	800f17e <HAL_PCD_EP_DB_Transmit+0x484>
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	677b      	str	r3, [r7, #116]	; 0x74
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f15e:	b29b      	uxth	r3, r3
 800f160:	461a      	mov	r2, r3
 800f162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f164:	4413      	add	r3, r2
 800f166:	677b      	str	r3, [r7, #116]	; 0x74
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	00da      	lsls	r2, r3, #3
 800f16e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f170:	4413      	add	r3, r2
 800f172:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800f176:	673b      	str	r3, [r7, #112]	; 0x70
 800f178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f17a:	2200      	movs	r2, #0
 800f17c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	67bb      	str	r3, [r7, #120]	; 0x78
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	785b      	ldrb	r3, [r3, #1]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d12f      	bne.n	800f1ec <HAL_PCD_EP_DB_Transmit+0x4f2>
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681b      	ldr	r3, [r3, #0]
 800f198:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f19c:	b29b      	uxth	r3, r3
 800f19e:	461a      	mov	r2, r3
 800f1a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1a4:	4413      	add	r3, r2
 800f1a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	781b      	ldrb	r3, [r3, #0]
 800f1ae:	00da      	lsls	r2, r3, #3
 800f1b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f1b4:	4413      	add	r3, r2
 800f1b6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f1ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800f1be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1c2:	881b      	ldrh	r3, [r3, #0]
 800f1c4:	b29b      	uxth	r3, r3
 800f1c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f1ca:	b29a      	uxth	r2, r3
 800f1cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1d0:	801a      	strh	r2, [r3, #0]
 800f1d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1d6:	881b      	ldrh	r3, [r3, #0]
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f1de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f1e8:	801a      	strh	r2, [r3, #0]
 800f1ea:	e017      	b.n	800f21c <HAL_PCD_EP_DB_Transmit+0x522>
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	785b      	ldrb	r3, [r3, #1]
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d113      	bne.n	800f21c <HAL_PCD_EP_DB_Transmit+0x522>
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	461a      	mov	r2, r3
 800f200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f202:	4413      	add	r3, r2
 800f204:	67bb      	str	r3, [r7, #120]	; 0x78
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	00da      	lsls	r2, r3, #3
 800f20c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f20e:	4413      	add	r3, r2
 800f210:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f214:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f216:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f218:	2200      	movs	r2, #0
 800f21a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	4619      	mov	r1, r3
 800f222:	68f8      	ldr	r0, [r7, #12]
 800f224:	f008 fb55 	bl	80178d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f228:	88fb      	ldrh	r3, [r7, #6]
 800f22a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f040 8104 	bne.w	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	461a      	mov	r2, r3
 800f23a:	68bb      	ldr	r3, [r7, #8]
 800f23c:	781b      	ldrb	r3, [r3, #0]
 800f23e:	009b      	lsls	r3, r3, #2
 800f240:	4413      	add	r3, r2
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	b29b      	uxth	r3, r3
 800f246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f24a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f24e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	009b      	lsls	r3, r3, #2
 800f25e:	441a      	add	r2, r3
 800f260:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f264:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f268:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f26c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f274:	b29b      	uxth	r3, r3
 800f276:	8013      	strh	r3, [r2, #0]
 800f278:	e0e0      	b.n	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800f27a:	88fb      	ldrh	r3, [r7, #6]
 800f27c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f280:	2b00      	cmp	r3, #0
 800f282:	d121      	bne.n	800f2c8 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	461a      	mov	r2, r3
 800f28a:	68bb      	ldr	r3, [r7, #8]
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	009b      	lsls	r3, r3, #2
 800f290:	4413      	add	r3, r2
 800f292:	881b      	ldrh	r3, [r3, #0]
 800f294:	b29b      	uxth	r3, r3
 800f296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f29a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f29e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	781b      	ldrb	r3, [r3, #0]
 800f2ac:	009b      	lsls	r3, r3, #2
 800f2ae:	441a      	add	r2, r3
 800f2b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800f2b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f2b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f2bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f2c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2c4:	b29b      	uxth	r3, r3
 800f2c6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	f040 80b4 	bne.w	800f43c <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxByteNbre;
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	695a      	ldr	r2, [r3, #20]
 800f2d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f2dc:	441a      	add	r2, r3
 800f2de:	68bb      	ldr	r3, [r7, #8]
 800f2e0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	69da      	ldr	r2, [r3, #28]
 800f2e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f2ea:	441a      	add	r2, r3
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	6a1a      	ldr	r2, [r3, #32]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	429a      	cmp	r2, r3
 800f2fa:	d309      	bcc.n	800f310 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	6a1a      	ldr	r2, [r3, #32]
 800f306:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f308:	1ad2      	subs	r2, r2, r3
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	621a      	str	r2, [r3, #32]
 800f30e:	e015      	b.n	800f33c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	6a1b      	ldr	r3, [r3, #32]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d107      	bne.n	800f328 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxByteNbre;
 800f318:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f31c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	2200      	movs	r2, #0
 800f322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f326:	e009      	b.n	800f33c <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 800f328:	68bb      	ldr	r3, [r7, #8]
 800f32a:	6a1b      	ldr	r3, [r3, #32]
 800f32c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	2200      	movs	r2, #0
 800f332:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800f334:	68bb      	ldr	r3, [r7, #8]
 800f336:	2200      	movs	r2, #0
 800f338:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	667b      	str	r3, [r7, #100]	; 0x64
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	785b      	ldrb	r3, [r3, #1]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d155      	bne.n	800f3f6 <HAL_PCD_EP_DB_Transmit+0x6fc>
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f358:	b29b      	uxth	r3, r3
 800f35a:	461a      	mov	r2, r3
 800f35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f35e:	4413      	add	r3, r2
 800f360:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	781b      	ldrb	r3, [r3, #0]
 800f366:	00da      	lsls	r2, r3, #3
 800f368:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f36a:	4413      	add	r3, r2
 800f36c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f370:	65bb      	str	r3, [r7, #88]	; 0x58
 800f372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f374:	2b00      	cmp	r3, #0
 800f376:	d112      	bne.n	800f39e <HAL_PCD_EP_DB_Transmit+0x6a4>
 800f378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f37a:	881b      	ldrh	r3, [r3, #0]
 800f37c:	b29b      	uxth	r3, r3
 800f37e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800f382:	b29a      	uxth	r2, r3
 800f384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f386:	801a      	strh	r2, [r3, #0]
 800f388:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f38a:	881b      	ldrh	r3, [r3, #0]
 800f38c:	b29b      	uxth	r3, r3
 800f38e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f396:	b29a      	uxth	r2, r3
 800f398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f39a:	801a      	strh	r2, [r3, #0]
 800f39c:	e044      	b.n	800f428 <HAL_PCD_EP_DB_Transmit+0x72e>
 800f39e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a0:	2b3e      	cmp	r3, #62	; 0x3e
 800f3a2:	d811      	bhi.n	800f3c8 <HAL_PCD_EP_DB_Transmit+0x6ce>
 800f3a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3a6:	085b      	lsrs	r3, r3, #1
 800f3a8:	657b      	str	r3, [r7, #84]	; 0x54
 800f3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ac:	f003 0301 	and.w	r3, r3, #1
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d002      	beq.n	800f3ba <HAL_PCD_EP_DB_Transmit+0x6c0>
 800f3b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	657b      	str	r3, [r7, #84]	; 0x54
 800f3ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3bc:	b29b      	uxth	r3, r3
 800f3be:	029b      	lsls	r3, r3, #10
 800f3c0:	b29a      	uxth	r2, r3
 800f3c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3c4:	801a      	strh	r2, [r3, #0]
 800f3c6:	e02f      	b.n	800f428 <HAL_PCD_EP_DB_Transmit+0x72e>
 800f3c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3ca:	095b      	lsrs	r3, r3, #5
 800f3cc:	657b      	str	r3, [r7, #84]	; 0x54
 800f3ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3d0:	f003 031f 	and.w	r3, r3, #31
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d102      	bne.n	800f3de <HAL_PCD_EP_DB_Transmit+0x6e4>
 800f3d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	657b      	str	r3, [r7, #84]	; 0x54
 800f3de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	029b      	lsls	r3, r3, #10
 800f3e4:	b29b      	uxth	r3, r3
 800f3e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f3ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3f2:	801a      	strh	r2, [r3, #0]
 800f3f4:	e018      	b.n	800f428 <HAL_PCD_EP_DB_Transmit+0x72e>
 800f3f6:	68bb      	ldr	r3, [r7, #8]
 800f3f8:	785b      	ldrb	r3, [r3, #1]
 800f3fa:	2b01      	cmp	r3, #1
 800f3fc:	d114      	bne.n	800f428 <HAL_PCD_EP_DB_Transmit+0x72e>
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800f406:	b29b      	uxth	r3, r3
 800f408:	461a      	mov	r2, r3
 800f40a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f40c:	4413      	add	r3, r2
 800f40e:	667b      	str	r3, [r7, #100]	; 0x64
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	00da      	lsls	r2, r3, #3
 800f416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f418:	4413      	add	r3, r2
 800f41a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800f41e:	663b      	str	r3, [r7, #96]	; 0x60
 800f420:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f422:	b29a      	uxth	r2, r3
 800f424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f426:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6818      	ldr	r0, [r3, #0]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	6959      	ldr	r1, [r3, #20]
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	895a      	ldrh	r2, [r3, #10]
 800f434:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f436:	b29b      	uxth	r3, r3
 800f438:	f005 ff63 	bl	8015302 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	461a      	mov	r2, r3
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	4413      	add	r3, r2
 800f44a:	881b      	ldrh	r3, [r3, #0]
 800f44c:	b29b      	uxth	r3, r3
 800f44e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f452:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f456:	823b      	strh	r3, [r7, #16]
 800f458:	8a3b      	ldrh	r3, [r7, #16]
 800f45a:	f083 0310 	eor.w	r3, r3, #16
 800f45e:	823b      	strh	r3, [r7, #16]
 800f460:	8a3b      	ldrh	r3, [r7, #16]
 800f462:	f083 0320 	eor.w	r3, r3, #32
 800f466:	823b      	strh	r3, [r7, #16]
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	461a      	mov	r2, r3
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	781b      	ldrb	r3, [r3, #0]
 800f472:	009b      	lsls	r3, r3, #2
 800f474:	441a      	add	r2, r3
 800f476:	8a3b      	ldrh	r3, [r7, #16]
 800f478:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f47c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f488:	b29b      	uxth	r3, r3
 800f48a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800f48c:	2300      	movs	r3, #0
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3788      	adds	r7, #136	; 0x88
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}

0800f496 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800f496:	b480      	push	{r7}
 800f498:	b087      	sub	sp, #28
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	60f8      	str	r0, [r7, #12]
 800f49e:	607b      	str	r3, [r7, #4]
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	817b      	strh	r3, [r7, #10]
 800f4a4:	4613      	mov	r3, r2
 800f4a6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800f4a8:	897b      	ldrh	r3, [r7, #10]
 800f4aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d00b      	beq.n	800f4cc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f4b4:	897b      	ldrh	r3, [r7, #10]
 800f4b6:	f003 0307 	and.w	r3, r3, #7
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	4613      	mov	r3, r2
 800f4be:	009b      	lsls	r3, r3, #2
 800f4c0:	4413      	add	r3, r2
 800f4c2:	00db      	lsls	r3, r3, #3
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	4413      	add	r3, r2
 800f4c8:	617b      	str	r3, [r7, #20]
 800f4ca:	e009      	b.n	800f4e0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f4cc:	897a      	ldrh	r2, [r7, #10]
 800f4ce:	4613      	mov	r3, r2
 800f4d0:	009b      	lsls	r3, r3, #2
 800f4d2:	4413      	add	r3, r2
 800f4d4:	00db      	lsls	r3, r3, #3
 800f4d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800f4da:	68fa      	ldr	r2, [r7, #12]
 800f4dc:	4413      	add	r3, r2
 800f4de:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800f4e0:	893b      	ldrh	r3, [r7, #8]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d107      	bne.n	800f4f6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800f4e6:	697b      	ldr	r3, [r7, #20]
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	697b      	ldr	r3, [r7, #20]
 800f4f2:	80da      	strh	r2, [r3, #6]
 800f4f4:	e00b      	b.n	800f50e <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	b29a      	uxth	r2, r3
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	0c1b      	lsrs	r3, r3, #16
 800f508:	b29a      	uxth	r2, r3
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	371c      	adds	r7, #28
 800f514:	46bd      	mov	sp, r7
 800f516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f51a:	4770      	bx	lr

0800f51c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2201      	movs	r2, #1
 800f52e:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f540:	b29b      	uxth	r3, r3
 800f542:	f043 0301 	orr.w	r3, r3, #1
 800f546:	b29a      	uxth	r2, r3
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800f554:	b29b      	uxth	r3, r3
 800f556:	f043 0302 	orr.w	r3, r3, #2
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	3714      	adds	r7, #20
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800f570:	b480      	push	{r7}
 800f572:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800f574:	4b05      	ldr	r3, [pc, #20]	; (800f58c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	4a04      	ldr	r2, [pc, #16]	; (800f58c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800f57a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f57e:	6013      	str	r3, [r2, #0]
}
 800f580:	bf00      	nop
 800f582:	46bd      	mov	sp, r7
 800f584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f588:	4770      	bx	lr
 800f58a:	bf00      	nop
 800f58c:	40007000 	.word	0x40007000

0800f590 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f590:	b480      	push	{r7}
 800f592:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f594:	4b04      	ldr	r3, [pc, #16]	; (800f5a8 <HAL_PWREx_GetVoltageRange+0x18>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f59c:	4618      	mov	r0, r3
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr
 800f5a6:	bf00      	nop
 800f5a8:	40007000 	.word	0x40007000

0800f5ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f5ac:	b480      	push	{r7}
 800f5ae:	b085      	sub	sp, #20
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5ba:	d130      	bne.n	800f61e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f5bc:	4b23      	ldr	r3, [pc, #140]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5c8:	d038      	beq.n	800f63c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5ca:	4b20      	ldr	r3, [pc, #128]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f5d2:	4a1e      	ldr	r2, [pc, #120]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f5d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f5da:	4b1d      	ldr	r3, [pc, #116]	; (800f650 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	2232      	movs	r2, #50	; 0x32
 800f5e0:	fb02 f303 	mul.w	r3, r2, r3
 800f5e4:	4a1b      	ldr	r2, [pc, #108]	; (800f654 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800f5ea:	0c9b      	lsrs	r3, r3, #18
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5f0:	e002      	b.n	800f5f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	3b01      	subs	r3, #1
 800f5f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5f8:	4b14      	ldr	r3, [pc, #80]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5fa:	695b      	ldr	r3, [r3, #20]
 800f5fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f604:	d102      	bne.n	800f60c <HAL_PWREx_ControlVoltageScaling+0x60>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d1f2      	bne.n	800f5f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f60c:	4b0f      	ldr	r3, [pc, #60]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f60e:	695b      	ldr	r3, [r3, #20]
 800f610:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f618:	d110      	bne.n	800f63c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f61a:	2303      	movs	r3, #3
 800f61c:	e00f      	b.n	800f63e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f61e:	4b0b      	ldr	r3, [pc, #44]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f62a:	d007      	beq.n	800f63c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f62c:	4b07      	ldr	r3, [pc, #28]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f634:	4a05      	ldr	r2, [pc, #20]	; (800f64c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f636:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f63a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f63c:	2300      	movs	r3, #0
}
 800f63e:	4618      	mov	r0, r3
 800f640:	3714      	adds	r7, #20
 800f642:	46bd      	mov	sp, r7
 800f644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f648:	4770      	bx	lr
 800f64a:	bf00      	nop
 800f64c:	40007000 	.word	0x40007000
 800f650:	20000804 	.word	0x20000804
 800f654:	431bde83 	.word	0x431bde83

0800f658 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800f65c:	4b05      	ldr	r3, [pc, #20]	; (800f674 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f65e:	685b      	ldr	r3, [r3, #4]
 800f660:	4a04      	ldr	r2, [pc, #16]	; (800f674 <HAL_PWREx_EnableVddUSB+0x1c>)
 800f662:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f666:	6053      	str	r3, [r2, #4]
}
 800f668:	bf00      	nop
 800f66a:	46bd      	mov	sp, r7
 800f66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f670:	4770      	bx	lr
 800f672:	bf00      	nop
 800f674:	40007000 	.word	0x40007000

0800f678 <HAL_RCC_DeInit>:
  *            - Peripheral clock sources
  *            - LSI, LSE and RTC clocks (Backup domain)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Reset to default System clock */
  /* Set MSION bit */
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800f67e:	4b45      	ldr	r3, [pc, #276]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	4a44      	ldr	r2, [pc, #272]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f684:	f043 0301 	orr.w	r3, r3, #1
 800f688:	6013      	str	r3, [r2, #0]

  /* Insure MSIRDY bit is set before writing default MSIRANGE value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800f68a:	f7fc fb11 	bl	800bcb0 <HAL_GetTick>
 800f68e:	6078      	str	r0, [r7, #4]

  /* Wait till MSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f690:	e008      	b.n	800f6a4 <HAL_RCC_DeInit+0x2c>
  {
    if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f692:	f7fc fb0d 	bl	800bcb0 <HAL_GetTick>
 800f696:	4602      	mov	r2, r0
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	2b02      	cmp	r3, #2
 800f69e:	d901      	bls.n	800f6a4 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 800f6a0:	2303      	movs	r3, #3
 800f6a2:	e073      	b.n	800f78c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f6a4:	4b3b      	ldr	r3, [pc, #236]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	f003 0302 	and.w	r3, r3, #2
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d0f0      	beq.n	800f692 <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set MSIRANGE default value */
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, RCC_MSIRANGE_6);
 800f6b0:	4b38      	ldr	r3, [pc, #224]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6b8:	4a36      	ldr	r2, [pc, #216]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f6ba:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800f6be:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register (MSI is selected as system clock source) */
  CLEAR_REG(RCC->CFGR);
 800f6c0:	4b34      	ldr	r3, [pc, #208]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable for MSI as system clock source */
  SystemCoreClock = MSI_VALUE;
 800f6c6:	4b34      	ldr	r3, [pc, #208]	; (800f798 <HAL_RCC_DeInit+0x120>)
 800f6c8:	4a34      	ldr	r2, [pc, #208]	; (800f79c <HAL_RCC_DeInit+0x124>)
 800f6ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 800f6cc:	4b34      	ldr	r3, [pc, #208]	; (800f7a0 <HAL_RCC_DeInit+0x128>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4618      	mov	r0, r3
 800f6d2:	f7fc fa9d 	bl	800bc10 <HAL_InitTick>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <HAL_RCC_DeInit+0x68>
  {
    return HAL_ERROR;
 800f6dc:	2301      	movs	r3, #1
 800f6de:	e055      	b.n	800f78c <HAL_RCC_DeInit+0x114>
  }

  /* Insure MSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800f6e0:	f7fc fae6 	bl	800bcb0 <HAL_GetTick>
 800f6e4:	6078      	str	r0, [r7, #4]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800f6e6:	e00a      	b.n	800f6fe <HAL_RCC_DeInit+0x86>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f6e8:	f7fc fae2 	bl	800bcb0 <HAL_GetTick>
 800f6ec:	4602      	mov	r2, r0
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	1ad3      	subs	r3, r2, r3
 800f6f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f6:	4293      	cmp	r3, r2
 800f6f8:	d901      	bls.n	800f6fe <HAL_RCC_DeInit+0x86>
    {
      return HAL_TIMEOUT;
 800f6fa:	2303      	movs	r3, #3
 800f6fc:	e046      	b.n	800f78c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_MSI)
 800f6fe:	4b25      	ldr	r3, [pc, #148]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f700:	689b      	ldr	r3, [r3, #8]
 800f702:	f003 030c 	and.w	r3, r3, #12
 800f706:	2b00      	cmp	r3, #0
 800f708:	d1ee      	bne.n	800f6e8 <HAL_RCC_DeInit+0x70>

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON | RCC_CR_PLLSAI2ON);

#elif defined(RCC_PLLSAI1_SUPPORT)

  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSION | RCC_CR_HSIKERON| RCC_CR_HSIASFS | RCC_CR_PLLON | RCC_CR_PLLSAI1ON);
 800f70a:	4b22      	ldr	r3, [pc, #136]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f70c:	681a      	ldr	r2, [r3, #0]
 800f70e:	4921      	ldr	r1, [pc, #132]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f710:	4b24      	ldr	r3, [pc, #144]	; (800f7a4 <HAL_RCC_DeInit+0x12c>)
 800f712:	4013      	ands	r3, r2
 800f714:	600b      	str	r3, [r1, #0]

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Insure PLLRDY, PLLSAI1RDY and PLLSAI2RDY (if present) are reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 800f716:	f7fc facb 	bl	800bcb0 <HAL_GetTick>
 800f71a:	6078      	str	r0, [r7, #4]

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY) != 0U)

#elif defined(RCC_PLLSAI1_SUPPORT)

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 800f71c:	e008      	b.n	800f730 <HAL_RCC_DeInit+0xb8>

  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)

#endif
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f71e:	f7fc fac7 	bl	800bcb0 <HAL_GetTick>
 800f722:	4602      	mov	r2, r0
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	1ad3      	subs	r3, r2, r3
 800f728:	2b02      	cmp	r3, #2
 800f72a:	d901      	bls.n	800f730 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 800f72c:	2303      	movs	r3, #3
 800f72e:	e02d      	b.n	800f78c <HAL_RCC_DeInit+0x114>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY | RCC_CR_PLLSAI1RDY) != 0U)
 800f730:	4b18      	ldr	r3, [pc, #96]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	f003 6320 	and.w	r3, r3, #167772160	; 0xa000000
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1f0      	bne.n	800f71e <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Reset PLLCFGR register */
  CLEAR_REG(RCC->PLLCFGR);
 800f73c:	4b15      	ldr	r3, [pc, #84]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f73e:	2200      	movs	r2, #0
 800f740:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN_4 );
 800f742:	4b14      	ldr	r3, [pc, #80]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	4a13      	ldr	r2, [pc, #76]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f748:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f74c:	60d3      	str	r3, [r2, #12]

#if defined(RCC_PLLSAI1_SUPPORT)

  /* Reset PLLSAI1CFGR register */
  CLEAR_REG(RCC->PLLSAI1CFGR);
 800f74e:	4b11      	ldr	r3, [pc, #68]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f750:	2200      	movs	r2, #0
 800f752:	611a      	str	r2, [r3, #16]
  SET_BIT(RCC->PLLSAI1CFGR,  RCC_PLLSAI1CFGR_PLLSAI1N_4 );
 800f754:	4b0f      	ldr	r3, [pc, #60]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	4a0e      	ldr	r2, [pc, #56]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f75a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f75e:	6113      	str	r3, [r2, #16]
  SET_BIT(RCC->PLLSAI2CFGR,  RCC_PLLSAI2CFGR_PLLSAI2N_4 );

#endif /* RCC_PLLSAI2_SUPPORT */

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800f760:	4b0c      	ldr	r3, [pc, #48]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4a0b      	ldr	r2, [pc, #44]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f76a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIER);
 800f76c:	4b09      	ldr	r3, [pc, #36]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f76e:	2200      	movs	r2, #0
 800f770:	619a      	str	r2, [r3, #24]

  /* Clear all interrupt flags */
  WRITE_REG(RCC->CICR, 0xFFFFFFFFU);
 800f772:	4b08      	ldr	r3, [pc, #32]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f774:	f04f 32ff 	mov.w	r2, #4294967295
 800f778:	621a      	str	r2, [r3, #32]

  /* Clear all reset flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 800f77a:	4b06      	ldr	r3, [pc, #24]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f77c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f780:	4a04      	ldr	r2, [pc, #16]	; (800f794 <HAL_RCC_DeInit+0x11c>)
 800f782:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  return HAL_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3708      	adds	r7, #8
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}
 800f794:	40021000 	.word	0x40021000
 800f798:	20000804 	.word	0x20000804
 800f79c:	003d0900 	.word	0x003d0900
 800f7a0:	20000808 	.word	0x20000808
 800f7a4:	fafef4ff 	.word	0xfafef4ff

0800f7a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b088      	sub	sp, #32
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d102      	bne.n	800f7bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f7b6:	2301      	movs	r3, #1
 800f7b8:	f000 bc11 	b.w	800ffde <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f7bc:	4ba0      	ldr	r3, [pc, #640]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f7be:	689b      	ldr	r3, [r3, #8]
 800f7c0:	f003 030c 	and.w	r3, r3, #12
 800f7c4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f7c6:	4b9e      	ldr	r3, [pc, #632]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	f003 0303 	and.w	r3, r3, #3
 800f7ce:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	f003 0310 	and.w	r3, r3, #16
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 80e4 	beq.w	800f9a6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f7de:	69bb      	ldr	r3, [r7, #24]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d007      	beq.n	800f7f4 <HAL_RCC_OscConfig+0x4c>
 800f7e4:	69bb      	ldr	r3, [r7, #24]
 800f7e6:	2b0c      	cmp	r3, #12
 800f7e8:	f040 808b 	bne.w	800f902 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	2b01      	cmp	r3, #1
 800f7f0:	f040 8087 	bne.w	800f902 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f7f4:	4b92      	ldr	r3, [pc, #584]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f003 0302 	and.w	r3, r3, #2
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d005      	beq.n	800f80c <HAL_RCC_OscConfig+0x64>
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	699b      	ldr	r3, [r3, #24]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d101      	bne.n	800f80c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800f808:	2301      	movs	r3, #1
 800f80a:	e3e8      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a1a      	ldr	r2, [r3, #32]
 800f810:	4b8b      	ldr	r3, [pc, #556]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	f003 0308 	and.w	r3, r3, #8
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d004      	beq.n	800f826 <HAL_RCC_OscConfig+0x7e>
 800f81c:	4b88      	ldr	r3, [pc, #544]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f824:	e005      	b.n	800f832 <HAL_RCC_OscConfig+0x8a>
 800f826:	4b86      	ldr	r3, [pc, #536]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f82c:	091b      	lsrs	r3, r3, #4
 800f82e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f832:	4293      	cmp	r3, r2
 800f834:	d223      	bcs.n	800f87e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	6a1b      	ldr	r3, [r3, #32]
 800f83a:	4618      	mov	r0, r3
 800f83c:	f000 fd7a 	bl	8010334 <RCC_SetFlashLatencyFromMSIRange>
 800f840:	4603      	mov	r3, r0
 800f842:	2b00      	cmp	r3, #0
 800f844:	d001      	beq.n	800f84a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800f846:	2301      	movs	r3, #1
 800f848:	e3c9      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f84a:	4b7d      	ldr	r3, [pc, #500]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4a7c      	ldr	r2, [pc, #496]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f850:	f043 0308 	orr.w	r3, r3, #8
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	4b7a      	ldr	r3, [pc, #488]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6a1b      	ldr	r3, [r3, #32]
 800f862:	4977      	ldr	r1, [pc, #476]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f864:	4313      	orrs	r3, r2
 800f866:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f868:	4b75      	ldr	r3, [pc, #468]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f86a:	685b      	ldr	r3, [r3, #4]
 800f86c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	69db      	ldr	r3, [r3, #28]
 800f874:	021b      	lsls	r3, r3, #8
 800f876:	4972      	ldr	r1, [pc, #456]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f878:	4313      	orrs	r3, r2
 800f87a:	604b      	str	r3, [r1, #4]
 800f87c:	e025      	b.n	800f8ca <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f87e:	4b70      	ldr	r3, [pc, #448]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4a6f      	ldr	r2, [pc, #444]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f884:	f043 0308 	orr.w	r3, r3, #8
 800f888:	6013      	str	r3, [r2, #0]
 800f88a:	4b6d      	ldr	r3, [pc, #436]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	6a1b      	ldr	r3, [r3, #32]
 800f896:	496a      	ldr	r1, [pc, #424]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f898:	4313      	orrs	r3, r2
 800f89a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f89c:	4b68      	ldr	r3, [pc, #416]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f89e:	685b      	ldr	r3, [r3, #4]
 800f8a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	69db      	ldr	r3, [r3, #28]
 800f8a8:	021b      	lsls	r3, r3, #8
 800f8aa:	4965      	ldr	r1, [pc, #404]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f8ac:	4313      	orrs	r3, r2
 800f8ae:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f8b0:	69bb      	ldr	r3, [r7, #24]
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d109      	bne.n	800f8ca <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6a1b      	ldr	r3, [r3, #32]
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f000 fd3a 	bl	8010334 <RCC_SetFlashLatencyFromMSIRange>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d001      	beq.n	800f8ca <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	e389      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f8ca:	f000 fc6f 	bl	80101ac <HAL_RCC_GetSysClockFreq>
 800f8ce:	4602      	mov	r2, r0
 800f8d0:	4b5b      	ldr	r3, [pc, #364]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f8d2:	689b      	ldr	r3, [r3, #8]
 800f8d4:	091b      	lsrs	r3, r3, #4
 800f8d6:	f003 030f 	and.w	r3, r3, #15
 800f8da:	495a      	ldr	r1, [pc, #360]	; (800fa44 <HAL_RCC_OscConfig+0x29c>)
 800f8dc:	5ccb      	ldrb	r3, [r1, r3]
 800f8de:	f003 031f 	and.w	r3, r3, #31
 800f8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800f8e6:	4a58      	ldr	r2, [pc, #352]	; (800fa48 <HAL_RCC_OscConfig+0x2a0>)
 800f8e8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f8ea:	4b58      	ldr	r3, [pc, #352]	; (800fa4c <HAL_RCC_OscConfig+0x2a4>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	f7fc f98e 	bl	800bc10 <HAL_InitTick>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f8f8:	7bfb      	ldrb	r3, [r7, #15]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d052      	beq.n	800f9a4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800f8fe:	7bfb      	ldrb	r3, [r7, #15]
 800f900:	e36d      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	699b      	ldr	r3, [r3, #24]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d032      	beq.n	800f970 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f90a:	4b4d      	ldr	r3, [pc, #308]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	4a4c      	ldr	r2, [pc, #304]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f910:	f043 0301 	orr.w	r3, r3, #1
 800f914:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f916:	f7fc f9cb 	bl	800bcb0 <HAL_GetTick>
 800f91a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f91c:	e008      	b.n	800f930 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f91e:	f7fc f9c7 	bl	800bcb0 <HAL_GetTick>
 800f922:	4602      	mov	r2, r0
 800f924:	693b      	ldr	r3, [r7, #16]
 800f926:	1ad3      	subs	r3, r2, r3
 800f928:	2b02      	cmp	r3, #2
 800f92a:	d901      	bls.n	800f930 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800f92c:	2303      	movs	r3, #3
 800f92e:	e356      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f930:	4b43      	ldr	r3, [pc, #268]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 0302 	and.w	r3, r3, #2
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d0f0      	beq.n	800f91e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f93c:	4b40      	ldr	r3, [pc, #256]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	4a3f      	ldr	r2, [pc, #252]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f942:	f043 0308 	orr.w	r3, r3, #8
 800f946:	6013      	str	r3, [r2, #0]
 800f948:	4b3d      	ldr	r3, [pc, #244]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6a1b      	ldr	r3, [r3, #32]
 800f954:	493a      	ldr	r1, [pc, #232]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f956:	4313      	orrs	r3, r2
 800f958:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f95a:	4b39      	ldr	r3, [pc, #228]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f95c:	685b      	ldr	r3, [r3, #4]
 800f95e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	69db      	ldr	r3, [r3, #28]
 800f966:	021b      	lsls	r3, r3, #8
 800f968:	4935      	ldr	r1, [pc, #212]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f96a:	4313      	orrs	r3, r2
 800f96c:	604b      	str	r3, [r1, #4]
 800f96e:	e01a      	b.n	800f9a6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f970:	4b33      	ldr	r3, [pc, #204]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4a32      	ldr	r2, [pc, #200]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f976:	f023 0301 	bic.w	r3, r3, #1
 800f97a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f97c:	f7fc f998 	bl	800bcb0 <HAL_GetTick>
 800f980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f982:	e008      	b.n	800f996 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f984:	f7fc f994 	bl	800bcb0 <HAL_GetTick>
 800f988:	4602      	mov	r2, r0
 800f98a:	693b      	ldr	r3, [r7, #16]
 800f98c:	1ad3      	subs	r3, r2, r3
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d901      	bls.n	800f996 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800f992:	2303      	movs	r3, #3
 800f994:	e323      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f996:	4b2a      	ldr	r3, [pc, #168]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f003 0302 	and.w	r3, r3, #2
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d1f0      	bne.n	800f984 <HAL_RCC_OscConfig+0x1dc>
 800f9a2:	e000      	b.n	800f9a6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f9a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 0301 	and.w	r3, r3, #1
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d073      	beq.n	800fa9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	2b08      	cmp	r3, #8
 800f9b6:	d005      	beq.n	800f9c4 <HAL_RCC_OscConfig+0x21c>
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	2b0c      	cmp	r3, #12
 800f9bc:	d10e      	bne.n	800f9dc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	2b03      	cmp	r3, #3
 800f9c2:	d10b      	bne.n	800f9dc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f9c4:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d063      	beq.n	800fa98 <HAL_RCC_OscConfig+0x2f0>
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d15f      	bne.n	800fa98 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	e300      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	685b      	ldr	r3, [r3, #4]
 800f9e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f9e4:	d106      	bne.n	800f9f4 <HAL_RCC_OscConfig+0x24c>
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a15      	ldr	r2, [pc, #84]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800f9ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f9f0:	6013      	str	r3, [r2, #0]
 800f9f2:	e01d      	b.n	800fa30 <HAL_RCC_OscConfig+0x288>
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	685b      	ldr	r3, [r3, #4]
 800f9f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f9fc:	d10c      	bne.n	800fa18 <HAL_RCC_OscConfig+0x270>
 800f9fe:	4b10      	ldr	r3, [pc, #64]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	4a0f      	ldr	r2, [pc, #60]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa08:	6013      	str	r3, [r2, #0]
 800fa0a:	4b0d      	ldr	r3, [pc, #52]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	4a0c      	ldr	r2, [pc, #48]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fa14:	6013      	str	r3, [r2, #0]
 800fa16:	e00b      	b.n	800fa30 <HAL_RCC_OscConfig+0x288>
 800fa18:	4b09      	ldr	r3, [pc, #36]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4a08      	ldr	r2, [pc, #32]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fa22:	6013      	str	r3, [r2, #0]
 800fa24:	4b06      	ldr	r3, [pc, #24]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4a05      	ldr	r2, [pc, #20]	; (800fa40 <HAL_RCC_OscConfig+0x298>)
 800fa2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fa2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	685b      	ldr	r3, [r3, #4]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d01b      	beq.n	800fa70 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa38:	f7fc f93a 	bl	800bcb0 <HAL_GetTick>
 800fa3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fa3e:	e010      	b.n	800fa62 <HAL_RCC_OscConfig+0x2ba>
 800fa40:	40021000 	.word	0x40021000
 800fa44:	0801d374 	.word	0x0801d374
 800fa48:	20000804 	.word	0x20000804
 800fa4c:	20000808 	.word	0x20000808
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fa50:	f7fc f92e 	bl	800bcb0 <HAL_GetTick>
 800fa54:	4602      	mov	r2, r0
 800fa56:	693b      	ldr	r3, [r7, #16]
 800fa58:	1ad3      	subs	r3, r2, r3
 800fa5a:	2b64      	cmp	r3, #100	; 0x64
 800fa5c:	d901      	bls.n	800fa62 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800fa5e:	2303      	movs	r3, #3
 800fa60:	e2bd      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fa62:	4baf      	ldr	r3, [pc, #700]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d0f0      	beq.n	800fa50 <HAL_RCC_OscConfig+0x2a8>
 800fa6e:	e014      	b.n	800fa9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fa70:	f7fc f91e 	bl	800bcb0 <HAL_GetTick>
 800fa74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fa76:	e008      	b.n	800fa8a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fa78:	f7fc f91a 	bl	800bcb0 <HAL_GetTick>
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	2b64      	cmp	r3, #100	; 0x64
 800fa84:	d901      	bls.n	800fa8a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800fa86:	2303      	movs	r3, #3
 800fa88:	e2a9      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800fa8a:	4ba5      	ldr	r3, [pc, #660]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d1f0      	bne.n	800fa78 <HAL_RCC_OscConfig+0x2d0>
 800fa96:	e000      	b.n	800fa9a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fa98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	f003 0302 	and.w	r3, r3, #2
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d060      	beq.n	800fb68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800faa6:	69bb      	ldr	r3, [r7, #24]
 800faa8:	2b04      	cmp	r3, #4
 800faaa:	d005      	beq.n	800fab8 <HAL_RCC_OscConfig+0x310>
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	2b0c      	cmp	r3, #12
 800fab0:	d119      	bne.n	800fae6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2b02      	cmp	r3, #2
 800fab6:	d116      	bne.n	800fae6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fab8:	4b99      	ldr	r3, [pc, #612]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d005      	beq.n	800fad0 <HAL_RCC_OscConfig+0x328>
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	68db      	ldr	r3, [r3, #12]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d101      	bne.n	800fad0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800facc:	2301      	movs	r3, #1
 800face:	e286      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fad0:	4b93      	ldr	r3, [pc, #588]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fad2:	685b      	ldr	r3, [r3, #4]
 800fad4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	691b      	ldr	r3, [r3, #16]
 800fadc:	061b      	lsls	r3, r3, #24
 800fade:	4990      	ldr	r1, [pc, #576]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fae0:	4313      	orrs	r3, r2
 800fae2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fae4:	e040      	b.n	800fb68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	68db      	ldr	r3, [r3, #12]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d023      	beq.n	800fb36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800faee:	4b8c      	ldr	r3, [pc, #560]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	4a8b      	ldr	r2, [pc, #556]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800faf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800faf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fafa:	f7fc f8d9 	bl	800bcb0 <HAL_GetTick>
 800fafe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fb00:	e008      	b.n	800fb14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fb02:	f7fc f8d5 	bl	800bcb0 <HAL_GetTick>
 800fb06:	4602      	mov	r2, r0
 800fb08:	693b      	ldr	r3, [r7, #16]
 800fb0a:	1ad3      	subs	r3, r2, r3
 800fb0c:	2b02      	cmp	r3, #2
 800fb0e:	d901      	bls.n	800fb14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800fb10:	2303      	movs	r3, #3
 800fb12:	e264      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800fb14:	4b82      	ldr	r3, [pc, #520]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d0f0      	beq.n	800fb02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fb20:	4b7f      	ldr	r3, [pc, #508]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	691b      	ldr	r3, [r3, #16]
 800fb2c:	061b      	lsls	r3, r3, #24
 800fb2e:	497c      	ldr	r1, [pc, #496]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb30:	4313      	orrs	r3, r2
 800fb32:	604b      	str	r3, [r1, #4]
 800fb34:	e018      	b.n	800fb68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fb36:	4b7a      	ldr	r3, [pc, #488]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	4a79      	ldr	r2, [pc, #484]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fb40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fb42:	f7fc f8b5 	bl	800bcb0 <HAL_GetTick>
 800fb46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fb48:	e008      	b.n	800fb5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fb4a:	f7fc f8b1 	bl	800bcb0 <HAL_GetTick>
 800fb4e:	4602      	mov	r2, r0
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	2b02      	cmp	r3, #2
 800fb56:	d901      	bls.n	800fb5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800fb58:	2303      	movs	r3, #3
 800fb5a:	e240      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800fb5c:	4b70      	ldr	r3, [pc, #448]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d1f0      	bne.n	800fb4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	f003 0308 	and.w	r3, r3, #8
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d03c      	beq.n	800fbee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	695b      	ldr	r3, [r3, #20]
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d01c      	beq.n	800fbb6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fb7c:	4b68      	ldr	r3, [pc, #416]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fb82:	4a67      	ldr	r2, [pc, #412]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fb84:	f043 0301 	orr.w	r3, r3, #1
 800fb88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb8c:	f7fc f890 	bl	800bcb0 <HAL_GetTick>
 800fb90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fb92:	e008      	b.n	800fba6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fb94:	f7fc f88c 	bl	800bcb0 <HAL_GetTick>
 800fb98:	4602      	mov	r2, r0
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	1ad3      	subs	r3, r2, r3
 800fb9e:	2b02      	cmp	r3, #2
 800fba0:	d901      	bls.n	800fba6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e21b      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fba6:	4b5e      	ldr	r3, [pc, #376]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbac:	f003 0302 	and.w	r3, r3, #2
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d0ef      	beq.n	800fb94 <HAL_RCC_OscConfig+0x3ec>
 800fbb4:	e01b      	b.n	800fbee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fbb6:	4b5a      	ldr	r3, [pc, #360]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fbb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbbc:	4a58      	ldr	r2, [pc, #352]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fbbe:	f023 0301 	bic.w	r3, r3, #1
 800fbc2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbc6:	f7fc f873 	bl	800bcb0 <HAL_GetTick>
 800fbca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fbcc:	e008      	b.n	800fbe0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fbce:	f7fc f86f 	bl	800bcb0 <HAL_GetTick>
 800fbd2:	4602      	mov	r2, r0
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	2b02      	cmp	r3, #2
 800fbda:	d901      	bls.n	800fbe0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fbdc:	2303      	movs	r3, #3
 800fbde:	e1fe      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fbe0:	4b4f      	ldr	r3, [pc, #316]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fbe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fbe6:	f003 0302 	and.w	r3, r3, #2
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d1ef      	bne.n	800fbce <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f003 0304 	and.w	r3, r3, #4
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 80a6 	beq.w	800fd48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fc00:	4b47      	ldr	r3, [pc, #284]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10d      	bne.n	800fc28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fc0c:	4b44      	ldr	r3, [pc, #272]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc10:	4a43      	ldr	r2, [pc, #268]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc16:	6593      	str	r3, [r2, #88]	; 0x58
 800fc18:	4b41      	ldr	r3, [pc, #260]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fc1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc20:	60bb      	str	r3, [r7, #8]
 800fc22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800fc24:	2301      	movs	r3, #1
 800fc26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fc28:	4b3e      	ldr	r3, [pc, #248]	; (800fd24 <HAL_RCC_OscConfig+0x57c>)
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d118      	bne.n	800fc66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fc34:	4b3b      	ldr	r3, [pc, #236]	; (800fd24 <HAL_RCC_OscConfig+0x57c>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a3a      	ldr	r2, [pc, #232]	; (800fd24 <HAL_RCC_OscConfig+0x57c>)
 800fc3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fc3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fc40:	f7fc f836 	bl	800bcb0 <HAL_GetTick>
 800fc44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fc46:	e008      	b.n	800fc5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fc48:	f7fc f832 	bl	800bcb0 <HAL_GetTick>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	693b      	ldr	r3, [r7, #16]
 800fc50:	1ad3      	subs	r3, r2, r3
 800fc52:	2b02      	cmp	r3, #2
 800fc54:	d901      	bls.n	800fc5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fc56:	2303      	movs	r3, #3
 800fc58:	e1c1      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fc5a:	4b32      	ldr	r3, [pc, #200]	; (800fd24 <HAL_RCC_OscConfig+0x57c>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d0f0      	beq.n	800fc48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	689b      	ldr	r3, [r3, #8]
 800fc6a:	2b01      	cmp	r3, #1
 800fc6c:	d108      	bne.n	800fc80 <HAL_RCC_OscConfig+0x4d8>
 800fc6e:	4b2c      	ldr	r3, [pc, #176]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc74:	4a2a      	ldr	r2, [pc, #168]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc76:	f043 0301 	orr.w	r3, r3, #1
 800fc7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fc7e:	e024      	b.n	800fcca <HAL_RCC_OscConfig+0x522>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	689b      	ldr	r3, [r3, #8]
 800fc84:	2b05      	cmp	r3, #5
 800fc86:	d110      	bne.n	800fcaa <HAL_RCC_OscConfig+0x502>
 800fc88:	4b25      	ldr	r3, [pc, #148]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc8e:	4a24      	ldr	r2, [pc, #144]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc90:	f043 0304 	orr.w	r3, r3, #4
 800fc94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fc98:	4b21      	ldr	r3, [pc, #132]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc9e:	4a20      	ldr	r2, [pc, #128]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fca0:	f043 0301 	orr.w	r3, r3, #1
 800fca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fca8:	e00f      	b.n	800fcca <HAL_RCC_OscConfig+0x522>
 800fcaa:	4b1d      	ldr	r3, [pc, #116]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fcac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcb0:	4a1b      	ldr	r2, [pc, #108]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fcb2:	f023 0301 	bic.w	r3, r3, #1
 800fcb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fcba:	4b19      	ldr	r3, [pc, #100]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcc0:	4a17      	ldr	r2, [pc, #92]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fcc2:	f023 0304 	bic.w	r3, r3, #4
 800fcc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	689b      	ldr	r3, [r3, #8]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d016      	beq.n	800fd00 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fcd2:	f7fb ffed 	bl	800bcb0 <HAL_GetTick>
 800fcd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fcd8:	e00a      	b.n	800fcf0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fcda:	f7fb ffe9 	bl	800bcb0 <HAL_GetTick>
 800fcde:	4602      	mov	r2, r0
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	1ad3      	subs	r3, r2, r3
 800fce4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fce8:	4293      	cmp	r3, r2
 800fcea:	d901      	bls.n	800fcf0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800fcec:	2303      	movs	r3, #3
 800fcee:	e176      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fcf0:	4b0b      	ldr	r3, [pc, #44]	; (800fd20 <HAL_RCC_OscConfig+0x578>)
 800fcf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fcf6:	f003 0302 	and.w	r3, r3, #2
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d0ed      	beq.n	800fcda <HAL_RCC_OscConfig+0x532>
 800fcfe:	e01a      	b.n	800fd36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd00:	f7fb ffd6 	bl	800bcb0 <HAL_GetTick>
 800fd04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fd06:	e00f      	b.n	800fd28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fd08:	f7fb ffd2 	bl	800bcb0 <HAL_GetTick>
 800fd0c:	4602      	mov	r2, r0
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	1ad3      	subs	r3, r2, r3
 800fd12:	f241 3288 	movw	r2, #5000	; 0x1388
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d906      	bls.n	800fd28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fd1a:	2303      	movs	r3, #3
 800fd1c:	e15f      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
 800fd1e:	bf00      	nop
 800fd20:	40021000 	.word	0x40021000
 800fd24:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fd28:	4baa      	ldr	r3, [pc, #680]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd2e:	f003 0302 	and.w	r3, r3, #2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d1e8      	bne.n	800fd08 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fd36:	7ffb      	ldrb	r3, [r7, #31]
 800fd38:	2b01      	cmp	r3, #1
 800fd3a:	d105      	bne.n	800fd48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fd3c:	4ba5      	ldr	r3, [pc, #660]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd40:	4aa4      	ldr	r2, [pc, #656]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fd46:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f003 0320 	and.w	r3, r3, #32
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d03c      	beq.n	800fdce <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d01c      	beq.n	800fd96 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fd5c:	4b9d      	ldr	r3, [pc, #628]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd62:	4a9c      	ldr	r2, [pc, #624]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd64:	f043 0301 	orr.w	r3, r3, #1
 800fd68:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fd6c:	f7fb ffa0 	bl	800bcb0 <HAL_GetTick>
 800fd70:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fd72:	e008      	b.n	800fd86 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fd74:	f7fb ff9c 	bl	800bcb0 <HAL_GetTick>
 800fd78:	4602      	mov	r2, r0
 800fd7a:	693b      	ldr	r3, [r7, #16]
 800fd7c:	1ad3      	subs	r3, r2, r3
 800fd7e:	2b02      	cmp	r3, #2
 800fd80:	d901      	bls.n	800fd86 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800fd82:	2303      	movs	r3, #3
 800fd84:	e12b      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800fd86:	4b93      	ldr	r3, [pc, #588]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd8c:	f003 0302 	and.w	r3, r3, #2
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d0ef      	beq.n	800fd74 <HAL_RCC_OscConfig+0x5cc>
 800fd94:	e01b      	b.n	800fdce <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fd96:	4b8f      	ldr	r3, [pc, #572]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fd9c:	4a8d      	ldr	r2, [pc, #564]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fd9e:	f023 0301 	bic.w	r3, r3, #1
 800fda2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fda6:	f7fb ff83 	bl	800bcb0 <HAL_GetTick>
 800fdaa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fdac:	e008      	b.n	800fdc0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fdae:	f7fb ff7f 	bl	800bcb0 <HAL_GetTick>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	693b      	ldr	r3, [r7, #16]
 800fdb6:	1ad3      	subs	r3, r2, r3
 800fdb8:	2b02      	cmp	r3, #2
 800fdba:	d901      	bls.n	800fdc0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800fdbc:	2303      	movs	r3, #3
 800fdbe:	e10e      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800fdc0:	4b84      	ldr	r3, [pc, #528]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fdc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800fdc6:	f003 0302 	and.w	r3, r3, #2
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d1ef      	bne.n	800fdae <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	f000 8102 	beq.w	800ffdc <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fddc:	2b02      	cmp	r3, #2
 800fdde:	f040 80c5 	bne.w	800ff6c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fde2:	4b7c      	ldr	r3, [pc, #496]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fde4:	68db      	ldr	r3, [r3, #12]
 800fde6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	f003 0203 	and.w	r2, r3, #3
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d12c      	bne.n	800fe50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe00:	3b01      	subs	r3, #1
 800fe02:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fe04:	429a      	cmp	r2, r3
 800fe06:	d123      	bne.n	800fe50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fe08:	697b      	ldr	r3, [r7, #20]
 800fe0a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe12:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d11b      	bne.n	800fe50 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe22:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fe24:	429a      	cmp	r2, r3
 800fe26:	d113      	bne.n	800fe50 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe32:	085b      	lsrs	r3, r3, #1
 800fe34:	3b01      	subs	r3, #1
 800fe36:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800fe38:	429a      	cmp	r2, r3
 800fe3a:	d109      	bne.n	800fe50 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe46:	085b      	lsrs	r3, r3, #1
 800fe48:	3b01      	subs	r3, #1
 800fe4a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fe4c:	429a      	cmp	r2, r3
 800fe4e:	d067      	beq.n	800ff20 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fe50:	69bb      	ldr	r3, [r7, #24]
 800fe52:	2b0c      	cmp	r3, #12
 800fe54:	d062      	beq.n	800ff1c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fe56:	4b5f      	ldr	r3, [pc, #380]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d001      	beq.n	800fe66 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800fe62:	2301      	movs	r3, #1
 800fe64:	e0bb      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fe66:	4b5b      	ldr	r3, [pc, #364]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	4a5a      	ldr	r2, [pc, #360]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fe6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fe70:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fe72:	f7fb ff1d 	bl	800bcb0 <HAL_GetTick>
 800fe76:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fe78:	e008      	b.n	800fe8c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fe7a:	f7fb ff19 	bl	800bcb0 <HAL_GetTick>
 800fe7e:	4602      	mov	r2, r0
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	2b02      	cmp	r3, #2
 800fe86:	d901      	bls.n	800fe8c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800fe88:	2303      	movs	r3, #3
 800fe8a:	e0a8      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fe8c:	4b51      	ldr	r3, [pc, #324]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d1f0      	bne.n	800fe7a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fe98:	4b4e      	ldr	r3, [pc, #312]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fe9a:	68da      	ldr	r2, [r3, #12]
 800fe9c:	4b4e      	ldr	r3, [pc, #312]	; (800ffd8 <HAL_RCC_OscConfig+0x830>)
 800fe9e:	4013      	ands	r3, r2
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fea4:	687a      	ldr	r2, [r7, #4]
 800fea6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fea8:	3a01      	subs	r2, #1
 800feaa:	0112      	lsls	r2, r2, #4
 800feac:	4311      	orrs	r1, r2
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800feb2:	0212      	lsls	r2, r2, #8
 800feb4:	4311      	orrs	r1, r2
 800feb6:	687a      	ldr	r2, [r7, #4]
 800feb8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800feba:	0852      	lsrs	r2, r2, #1
 800febc:	3a01      	subs	r2, #1
 800febe:	0552      	lsls	r2, r2, #21
 800fec0:	4311      	orrs	r1, r2
 800fec2:	687a      	ldr	r2, [r7, #4]
 800fec4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fec6:	0852      	lsrs	r2, r2, #1
 800fec8:	3a01      	subs	r2, #1
 800feca:	0652      	lsls	r2, r2, #25
 800fecc:	4311      	orrs	r1, r2
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fed2:	06d2      	lsls	r2, r2, #27
 800fed4:	430a      	orrs	r2, r1
 800fed6:	493f      	ldr	r1, [pc, #252]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fed8:	4313      	orrs	r3, r2
 800feda:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fedc:	4b3d      	ldr	r3, [pc, #244]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4a3c      	ldr	r2, [pc, #240]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800fee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fee6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fee8:	4b3a      	ldr	r3, [pc, #232]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800feea:	68db      	ldr	r3, [r3, #12]
 800feec:	4a39      	ldr	r2, [pc, #228]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800feee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fef2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fef4:	f7fb fedc 	bl	800bcb0 <HAL_GetTick>
 800fef8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fefa:	e008      	b.n	800ff0e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fefc:	f7fb fed8 	bl	800bcb0 <HAL_GetTick>
 800ff00:	4602      	mov	r2, r0
 800ff02:	693b      	ldr	r3, [r7, #16]
 800ff04:	1ad3      	subs	r3, r2, r3
 800ff06:	2b02      	cmp	r3, #2
 800ff08:	d901      	bls.n	800ff0e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800ff0a:	2303      	movs	r3, #3
 800ff0c:	e067      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ff0e:	4b31      	ldr	r3, [pc, #196]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d0f0      	beq.n	800fefc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ff1a:	e05f      	b.n	800ffdc <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	e05e      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ff20:	4b2c      	ldr	r3, [pc, #176]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	d157      	bne.n	800ffdc <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ff2c:	4b29      	ldr	r3, [pc, #164]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff2e:	681b      	ldr	r3, [r3, #0]
 800ff30:	4a28      	ldr	r2, [pc, #160]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ff38:	4b26      	ldr	r3, [pc, #152]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	4a25      	ldr	r2, [pc, #148]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ff42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ff44:	f7fb feb4 	bl	800bcb0 <HAL_GetTick>
 800ff48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ff4a:	e008      	b.n	800ff5e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ff4c:	f7fb feb0 	bl	800bcb0 <HAL_GetTick>
 800ff50:	4602      	mov	r2, r0
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	1ad3      	subs	r3, r2, r3
 800ff56:	2b02      	cmp	r3, #2
 800ff58:	d901      	bls.n	800ff5e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800ff5a:	2303      	movs	r3, #3
 800ff5c:	e03f      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ff5e:	4b1d      	ldr	r3, [pc, #116]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d0f0      	beq.n	800ff4c <HAL_RCC_OscConfig+0x7a4>
 800ff6a:	e037      	b.n	800ffdc <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	2b0c      	cmp	r3, #12
 800ff70:	d02d      	beq.n	800ffce <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ff72:	4b18      	ldr	r3, [pc, #96]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	4a17      	ldr	r2, [pc, #92]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ff7c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800ff7e:	4b15      	ldr	r3, [pc, #84]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d105      	bne.n	800ff96 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800ff8a:	4b12      	ldr	r3, [pc, #72]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff8c:	68db      	ldr	r3, [r3, #12]
 800ff8e:	4a11      	ldr	r2, [pc, #68]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff90:	f023 0303 	bic.w	r3, r3, #3
 800ff94:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800ff96:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff98:	68db      	ldr	r3, [r3, #12]
 800ff9a:	4a0e      	ldr	r2, [pc, #56]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ff9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800ffa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ffa4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ffa6:	f7fb fe83 	bl	800bcb0 <HAL_GetTick>
 800ffaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ffac:	e008      	b.n	800ffc0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ffae:	f7fb fe7f 	bl	800bcb0 <HAL_GetTick>
 800ffb2:	4602      	mov	r2, r0
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	1ad3      	subs	r3, r2, r3
 800ffb8:	2b02      	cmp	r3, #2
 800ffba:	d901      	bls.n	800ffc0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800ffbc:	2303      	movs	r3, #3
 800ffbe:	e00e      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ffc0:	4b04      	ldr	r3, [pc, #16]	; (800ffd4 <HAL_RCC_OscConfig+0x82c>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d1f0      	bne.n	800ffae <HAL_RCC_OscConfig+0x806>
 800ffcc:	e006      	b.n	800ffdc <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ffce:	2301      	movs	r3, #1
 800ffd0:	e005      	b.n	800ffde <HAL_RCC_OscConfig+0x836>
 800ffd2:	bf00      	nop
 800ffd4:	40021000 	.word	0x40021000
 800ffd8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800ffdc:	2300      	movs	r3, #0
}
 800ffde:	4618      	mov	r0, r3
 800ffe0:	3720      	adds	r7, #32
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd80      	pop	{r7, pc}
 800ffe6:	bf00      	nop

0800ffe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ffe8:	b580      	push	{r7, lr}
 800ffea:	b084      	sub	sp, #16
 800ffec:	af00      	add	r7, sp, #0
 800ffee:	6078      	str	r0, [r7, #4]
 800fff0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d101      	bne.n	800fffc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fff8:	2301      	movs	r3, #1
 800fffa:	e0c8      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fffc:	4b66      	ldr	r3, [pc, #408]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	f003 0307 	and.w	r3, r3, #7
 8010004:	683a      	ldr	r2, [r7, #0]
 8010006:	429a      	cmp	r2, r3
 8010008:	d910      	bls.n	801002c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801000a:	4b63      	ldr	r3, [pc, #396]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	f023 0207 	bic.w	r2, r3, #7
 8010012:	4961      	ldr	r1, [pc, #388]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	4313      	orrs	r3, r2
 8010018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801001a:	4b5f      	ldr	r3, [pc, #380]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	f003 0307 	and.w	r3, r3, #7
 8010022:	683a      	ldr	r2, [r7, #0]
 8010024:	429a      	cmp	r2, r3
 8010026:	d001      	beq.n	801002c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e0b0      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	f003 0301 	and.w	r3, r3, #1
 8010034:	2b00      	cmp	r3, #0
 8010036:	d04c      	beq.n	80100d2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	685b      	ldr	r3, [r3, #4]
 801003c:	2b03      	cmp	r3, #3
 801003e:	d107      	bne.n	8010050 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8010040:	4b56      	ldr	r3, [pc, #344]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010048:	2b00      	cmp	r3, #0
 801004a:	d121      	bne.n	8010090 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 801004c:	2301      	movs	r3, #1
 801004e:	e09e      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	685b      	ldr	r3, [r3, #4]
 8010054:	2b02      	cmp	r3, #2
 8010056:	d107      	bne.n	8010068 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8010058:	4b50      	ldr	r3, [pc, #320]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010060:	2b00      	cmp	r3, #0
 8010062:	d115      	bne.n	8010090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8010064:	2301      	movs	r3, #1
 8010066:	e092      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	685b      	ldr	r3, [r3, #4]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d107      	bne.n	8010080 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8010070:	4b4a      	ldr	r3, [pc, #296]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f003 0302 	and.w	r3, r3, #2
 8010078:	2b00      	cmp	r3, #0
 801007a:	d109      	bne.n	8010090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801007c:	2301      	movs	r3, #1
 801007e:	e086      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8010080:	4b46      	ldr	r3, [pc, #280]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010088:	2b00      	cmp	r3, #0
 801008a:	d101      	bne.n	8010090 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 801008c:	2301      	movs	r3, #1
 801008e:	e07e      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010090:	4b42      	ldr	r3, [pc, #264]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 8010092:	689b      	ldr	r3, [r3, #8]
 8010094:	f023 0203 	bic.w	r2, r3, #3
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	493f      	ldr	r1, [pc, #252]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801009e:	4313      	orrs	r3, r2
 80100a0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80100a2:	f7fb fe05 	bl	800bcb0 <HAL_GetTick>
 80100a6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100a8:	e00a      	b.n	80100c0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80100aa:	f7fb fe01 	bl	800bcb0 <HAL_GetTick>
 80100ae:	4602      	mov	r2, r0
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	1ad3      	subs	r3, r2, r3
 80100b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80100b8:	4293      	cmp	r3, r2
 80100ba:	d901      	bls.n	80100c0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80100bc:	2303      	movs	r3, #3
 80100be:	e066      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80100c0:	4b36      	ldr	r3, [pc, #216]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	f003 020c 	and.w	r2, r3, #12
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685b      	ldr	r3, [r3, #4]
 80100cc:	009b      	lsls	r3, r3, #2
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d1eb      	bne.n	80100aa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	f003 0302 	and.w	r3, r3, #2
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d008      	beq.n	80100f0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80100de:	4b2f      	ldr	r3, [pc, #188]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 80100e0:	689b      	ldr	r3, [r3, #8]
 80100e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	689b      	ldr	r3, [r3, #8]
 80100ea:	492c      	ldr	r1, [pc, #176]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 80100ec:	4313      	orrs	r3, r2
 80100ee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80100f0:	4b29      	ldr	r3, [pc, #164]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	f003 0307 	and.w	r3, r3, #7
 80100f8:	683a      	ldr	r2, [r7, #0]
 80100fa:	429a      	cmp	r2, r3
 80100fc:	d210      	bcs.n	8010120 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80100fe:	4b26      	ldr	r3, [pc, #152]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f023 0207 	bic.w	r2, r3, #7
 8010106:	4924      	ldr	r1, [pc, #144]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	4313      	orrs	r3, r2
 801010c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801010e:	4b22      	ldr	r3, [pc, #136]	; (8010198 <HAL_RCC_ClockConfig+0x1b0>)
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	f003 0307 	and.w	r3, r3, #7
 8010116:	683a      	ldr	r2, [r7, #0]
 8010118:	429a      	cmp	r2, r3
 801011a:	d001      	beq.n	8010120 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 801011c:	2301      	movs	r3, #1
 801011e:	e036      	b.n	801018e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f003 0304 	and.w	r3, r3, #4
 8010128:	2b00      	cmp	r3, #0
 801012a:	d008      	beq.n	801013e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801012c:	4b1b      	ldr	r3, [pc, #108]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	68db      	ldr	r3, [r3, #12]
 8010138:	4918      	ldr	r1, [pc, #96]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801013a:	4313      	orrs	r3, r2
 801013c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	f003 0308 	and.w	r3, r3, #8
 8010146:	2b00      	cmp	r3, #0
 8010148:	d009      	beq.n	801015e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801014a:	4b14      	ldr	r3, [pc, #80]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	00db      	lsls	r3, r3, #3
 8010158:	4910      	ldr	r1, [pc, #64]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 801015a:	4313      	orrs	r3, r2
 801015c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801015e:	f000 f825 	bl	80101ac <HAL_RCC_GetSysClockFreq>
 8010162:	4602      	mov	r2, r0
 8010164:	4b0d      	ldr	r3, [pc, #52]	; (801019c <HAL_RCC_ClockConfig+0x1b4>)
 8010166:	689b      	ldr	r3, [r3, #8]
 8010168:	091b      	lsrs	r3, r3, #4
 801016a:	f003 030f 	and.w	r3, r3, #15
 801016e:	490c      	ldr	r1, [pc, #48]	; (80101a0 <HAL_RCC_ClockConfig+0x1b8>)
 8010170:	5ccb      	ldrb	r3, [r1, r3]
 8010172:	f003 031f 	and.w	r3, r3, #31
 8010176:	fa22 f303 	lsr.w	r3, r2, r3
 801017a:	4a0a      	ldr	r2, [pc, #40]	; (80101a4 <HAL_RCC_ClockConfig+0x1bc>)
 801017c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801017e:	4b0a      	ldr	r3, [pc, #40]	; (80101a8 <HAL_RCC_ClockConfig+0x1c0>)
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	4618      	mov	r0, r3
 8010184:	f7fb fd44 	bl	800bc10 <HAL_InitTick>
 8010188:	4603      	mov	r3, r0
 801018a:	72fb      	strb	r3, [r7, #11]

  return status;
 801018c:	7afb      	ldrb	r3, [r7, #11]
}
 801018e:	4618      	mov	r0, r3
 8010190:	3710      	adds	r7, #16
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}
 8010196:	bf00      	nop
 8010198:	40022000 	.word	0x40022000
 801019c:	40021000 	.word	0x40021000
 80101a0:	0801d374 	.word	0x0801d374
 80101a4:	20000804 	.word	0x20000804
 80101a8:	20000808 	.word	0x20000808

080101ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80101ac:	b480      	push	{r7}
 80101ae:	b089      	sub	sp, #36	; 0x24
 80101b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80101b2:	2300      	movs	r3, #0
 80101b4:	61fb      	str	r3, [r7, #28]
 80101b6:	2300      	movs	r3, #0
 80101b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80101ba:	4b3e      	ldr	r3, [pc, #248]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80101bc:	689b      	ldr	r3, [r3, #8]
 80101be:	f003 030c 	and.w	r3, r3, #12
 80101c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80101c4:	4b3b      	ldr	r3, [pc, #236]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80101c6:	68db      	ldr	r3, [r3, #12]
 80101c8:	f003 0303 	and.w	r3, r3, #3
 80101cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80101ce:	693b      	ldr	r3, [r7, #16]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d005      	beq.n	80101e0 <HAL_RCC_GetSysClockFreq+0x34>
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	2b0c      	cmp	r3, #12
 80101d8:	d121      	bne.n	801021e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	2b01      	cmp	r3, #1
 80101de:	d11e      	bne.n	801021e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80101e0:	4b34      	ldr	r3, [pc, #208]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f003 0308 	and.w	r3, r3, #8
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d107      	bne.n	80101fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80101ec:	4b31      	ldr	r3, [pc, #196]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80101ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80101f2:	0a1b      	lsrs	r3, r3, #8
 80101f4:	f003 030f 	and.w	r3, r3, #15
 80101f8:	61fb      	str	r3, [r7, #28]
 80101fa:	e005      	b.n	8010208 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80101fc:	4b2d      	ldr	r3, [pc, #180]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	091b      	lsrs	r3, r3, #4
 8010202:	f003 030f 	and.w	r3, r3, #15
 8010206:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010208:	4a2b      	ldr	r2, [pc, #172]	; (80102b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010210:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10d      	bne.n	8010234 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801021c:	e00a      	b.n	8010234 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 801021e:	693b      	ldr	r3, [r7, #16]
 8010220:	2b04      	cmp	r3, #4
 8010222:	d102      	bne.n	801022a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8010224:	4b25      	ldr	r3, [pc, #148]	; (80102bc <HAL_RCC_GetSysClockFreq+0x110>)
 8010226:	61bb      	str	r3, [r7, #24]
 8010228:	e004      	b.n	8010234 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	2b08      	cmp	r3, #8
 801022e:	d101      	bne.n	8010234 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010230:	4b23      	ldr	r3, [pc, #140]	; (80102c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8010232:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8010234:	693b      	ldr	r3, [r7, #16]
 8010236:	2b0c      	cmp	r3, #12
 8010238:	d134      	bne.n	80102a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801023a:	4b1e      	ldr	r3, [pc, #120]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	f003 0303 	and.w	r3, r3, #3
 8010242:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8010244:	68bb      	ldr	r3, [r7, #8]
 8010246:	2b02      	cmp	r3, #2
 8010248:	d003      	beq.n	8010252 <HAL_RCC_GetSysClockFreq+0xa6>
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	2b03      	cmp	r3, #3
 801024e:	d003      	beq.n	8010258 <HAL_RCC_GetSysClockFreq+0xac>
 8010250:	e005      	b.n	801025e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8010252:	4b1a      	ldr	r3, [pc, #104]	; (80102bc <HAL_RCC_GetSysClockFreq+0x110>)
 8010254:	617b      	str	r3, [r7, #20]
      break;
 8010256:	e005      	b.n	8010264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010258:	4b19      	ldr	r3, [pc, #100]	; (80102c0 <HAL_RCC_GetSysClockFreq+0x114>)
 801025a:	617b      	str	r3, [r7, #20]
      break;
 801025c:	e002      	b.n	8010264 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	617b      	str	r3, [r7, #20]
      break;
 8010262:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8010264:	4b13      	ldr	r3, [pc, #76]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	091b      	lsrs	r3, r3, #4
 801026a:	f003 0307 	and.w	r3, r3, #7
 801026e:	3301      	adds	r3, #1
 8010270:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8010272:	4b10      	ldr	r3, [pc, #64]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8010274:	68db      	ldr	r3, [r3, #12]
 8010276:	0a1b      	lsrs	r3, r3, #8
 8010278:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801027c:	697a      	ldr	r2, [r7, #20]
 801027e:	fb02 f203 	mul.w	r2, r2, r3
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	fbb2 f3f3 	udiv	r3, r2, r3
 8010288:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801028a:	4b0a      	ldr	r3, [pc, #40]	; (80102b4 <HAL_RCC_GetSysClockFreq+0x108>)
 801028c:	68db      	ldr	r3, [r3, #12]
 801028e:	0e5b      	lsrs	r3, r3, #25
 8010290:	f003 0303 	and.w	r3, r3, #3
 8010294:	3301      	adds	r3, #1
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 801029a:	697a      	ldr	r2, [r7, #20]
 801029c:	683b      	ldr	r3, [r7, #0]
 801029e:	fbb2 f3f3 	udiv	r3, r2, r3
 80102a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80102a4:	69bb      	ldr	r3, [r7, #24]
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3724      	adds	r7, #36	; 0x24
 80102aa:	46bd      	mov	sp, r7
 80102ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	40021000 	.word	0x40021000
 80102b8:	0801d38c 	.word	0x0801d38c
 80102bc:	00f42400 	.word	0x00f42400
 80102c0:	007a1200 	.word	0x007a1200

080102c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80102c4:	b480      	push	{r7}
 80102c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80102c8:	4b03      	ldr	r3, [pc, #12]	; (80102d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80102ca:	681b      	ldr	r3, [r3, #0]
}
 80102cc:	4618      	mov	r0, r3
 80102ce:	46bd      	mov	sp, r7
 80102d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	20000804 	.word	0x20000804

080102dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80102e0:	f7ff fff0 	bl	80102c4 <HAL_RCC_GetHCLKFreq>
 80102e4:	4602      	mov	r2, r0
 80102e6:	4b06      	ldr	r3, [pc, #24]	; (8010300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80102e8:	689b      	ldr	r3, [r3, #8]
 80102ea:	0a1b      	lsrs	r3, r3, #8
 80102ec:	f003 0307 	and.w	r3, r3, #7
 80102f0:	4904      	ldr	r1, [pc, #16]	; (8010304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80102f2:	5ccb      	ldrb	r3, [r1, r3]
 80102f4:	f003 031f 	and.w	r3, r3, #31
 80102f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80102fc:	4618      	mov	r0, r3
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	40021000 	.word	0x40021000
 8010304:	0801d384 	.word	0x0801d384

08010308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801030c:	f7ff ffda 	bl	80102c4 <HAL_RCC_GetHCLKFreq>
 8010310:	4602      	mov	r2, r0
 8010312:	4b06      	ldr	r3, [pc, #24]	; (801032c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010314:	689b      	ldr	r3, [r3, #8]
 8010316:	0adb      	lsrs	r3, r3, #11
 8010318:	f003 0307 	and.w	r3, r3, #7
 801031c:	4904      	ldr	r1, [pc, #16]	; (8010330 <HAL_RCC_GetPCLK2Freq+0x28>)
 801031e:	5ccb      	ldrb	r3, [r1, r3]
 8010320:	f003 031f 	and.w	r3, r3, #31
 8010324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010328:	4618      	mov	r0, r3
 801032a:	bd80      	pop	{r7, pc}
 801032c:	40021000 	.word	0x40021000
 8010330:	0801d384 	.word	0x0801d384

08010334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8010334:	b580      	push	{r7, lr}
 8010336:	b086      	sub	sp, #24
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 801033c:	2300      	movs	r3, #0
 801033e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010340:	4b2a      	ldr	r3, [pc, #168]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010348:	2b00      	cmp	r3, #0
 801034a:	d003      	beq.n	8010354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 801034c:	f7ff f920 	bl	800f590 <HAL_PWREx_GetVoltageRange>
 8010350:	6178      	str	r0, [r7, #20]
 8010352:	e014      	b.n	801037e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8010354:	4b25      	ldr	r3, [pc, #148]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010358:	4a24      	ldr	r2, [pc, #144]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801035a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801035e:	6593      	str	r3, [r2, #88]	; 0x58
 8010360:	4b22      	ldr	r3, [pc, #136]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010368:	60fb      	str	r3, [r7, #12]
 801036a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 801036c:	f7ff f910 	bl	800f590 <HAL_PWREx_GetVoltageRange>
 8010370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8010372:	4b1e      	ldr	r3, [pc, #120]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010376:	4a1d      	ldr	r2, [pc, #116]	; (80103ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801037c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010384:	d10b      	bne.n	801039e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b80      	cmp	r3, #128	; 0x80
 801038a:	d919      	bls.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2ba0      	cmp	r3, #160	; 0xa0
 8010390:	d902      	bls.n	8010398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8010392:	2302      	movs	r3, #2
 8010394:	613b      	str	r3, [r7, #16]
 8010396:	e013      	b.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8010398:	2301      	movs	r3, #1
 801039a:	613b      	str	r3, [r7, #16]
 801039c:	e010      	b.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	2b80      	cmp	r3, #128	; 0x80
 80103a2:	d902      	bls.n	80103aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80103a4:	2303      	movs	r3, #3
 80103a6:	613b      	str	r3, [r7, #16]
 80103a8:	e00a      	b.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2b80      	cmp	r3, #128	; 0x80
 80103ae:	d102      	bne.n	80103b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80103b0:	2302      	movs	r3, #2
 80103b2:	613b      	str	r3, [r7, #16]
 80103b4:	e004      	b.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	2b70      	cmp	r3, #112	; 0x70
 80103ba:	d101      	bne.n	80103c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80103bc:	2301      	movs	r3, #1
 80103be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80103c0:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f023 0207 	bic.w	r2, r3, #7
 80103c8:	4909      	ldr	r1, [pc, #36]	; (80103f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	4313      	orrs	r3, r2
 80103ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80103d0:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f003 0307 	and.w	r3, r3, #7
 80103d8:	693a      	ldr	r2, [r7, #16]
 80103da:	429a      	cmp	r2, r3
 80103dc:	d001      	beq.n	80103e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80103de:	2301      	movs	r3, #1
 80103e0:	e000      	b.n	80103e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80103e2:	2300      	movs	r3, #0
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	3718      	adds	r7, #24
 80103e8:	46bd      	mov	sp, r7
 80103ea:	bd80      	pop	{r7, pc}
 80103ec:	40021000 	.word	0x40021000
 80103f0:	40022000 	.word	0x40022000

080103f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80103f4:	b580      	push	{r7, lr}
 80103f6:	b086      	sub	sp, #24
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80103fc:	2300      	movs	r3, #0
 80103fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010400:	2300      	movs	r3, #0
 8010402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801040c:	2b00      	cmp	r3, #0
 801040e:	d031      	beq.n	8010474 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010414:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010418:	d01a      	beq.n	8010450 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 801041a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801041e:	d814      	bhi.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8010420:	2b00      	cmp	r3, #0
 8010422:	d009      	beq.n	8010438 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8010424:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010428:	d10f      	bne.n	801044a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 801042a:	4b5d      	ldr	r3, [pc, #372]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801042c:	68db      	ldr	r3, [r3, #12]
 801042e:	4a5c      	ldr	r2, [pc, #368]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010434:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010436:	e00c      	b.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	3304      	adds	r3, #4
 801043c:	2100      	movs	r1, #0
 801043e:	4618      	mov	r0, r3
 8010440:	f000 fa2e 	bl	80108a0 <RCCEx_PLLSAI1_Config>
 8010444:	4603      	mov	r3, r0
 8010446:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8010448:	e003      	b.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801044a:	2301      	movs	r3, #1
 801044c:	74fb      	strb	r3, [r7, #19]
      break;
 801044e:	e000      	b.n	8010452 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8010450:	bf00      	nop
    }

    if(ret == HAL_OK)
 8010452:	7cfb      	ldrb	r3, [r7, #19]
 8010454:	2b00      	cmp	r3, #0
 8010456:	d10b      	bne.n	8010470 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010458:	4b51      	ldr	r3, [pc, #324]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801045a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801045e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010466:	494e      	ldr	r1, [pc, #312]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010468:	4313      	orrs	r3, r2
 801046a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 801046e:	e001      	b.n	8010474 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010470:	7cfb      	ldrb	r3, [r7, #19]
 8010472:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801047c:	2b00      	cmp	r3, #0
 801047e:	f000 809e 	beq.w	80105be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010482:	2300      	movs	r3, #0
 8010484:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8010486:	4b46      	ldr	r3, [pc, #280]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801048a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8010492:	2301      	movs	r3, #1
 8010494:	e000      	b.n	8010498 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8010496:	2300      	movs	r3, #0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d00d      	beq.n	80104b8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801049c:	4b40      	ldr	r3, [pc, #256]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801049e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a0:	4a3f      	ldr	r2, [pc, #252]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80104a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104a6:	6593      	str	r3, [r2, #88]	; 0x58
 80104a8:	4b3d      	ldr	r3, [pc, #244]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80104aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80104b0:	60bb      	str	r3, [r7, #8]
 80104b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80104b4:	2301      	movs	r3, #1
 80104b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80104b8:	4b3a      	ldr	r3, [pc, #232]	; (80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a39      	ldr	r2, [pc, #228]	; (80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80104be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80104c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80104c4:	f7fb fbf4 	bl	800bcb0 <HAL_GetTick>
 80104c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80104ca:	e009      	b.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80104cc:	f7fb fbf0 	bl	800bcb0 <HAL_GetTick>
 80104d0:	4602      	mov	r2, r0
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	1ad3      	subs	r3, r2, r3
 80104d6:	2b02      	cmp	r3, #2
 80104d8:	d902      	bls.n	80104e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80104da:	2303      	movs	r3, #3
 80104dc:	74fb      	strb	r3, [r7, #19]
        break;
 80104de:	e005      	b.n	80104ec <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80104e0:	4b30      	ldr	r3, [pc, #192]	; (80105a4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d0ef      	beq.n	80104cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80104ec:	7cfb      	ldrb	r3, [r7, #19]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d15a      	bne.n	80105a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80104f2:	4b2b      	ldr	r3, [pc, #172]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80104f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80104f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80104fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80104fe:	697b      	ldr	r3, [r7, #20]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d01e      	beq.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010508:	697a      	ldr	r2, [r7, #20]
 801050a:	429a      	cmp	r2, r3
 801050c:	d019      	beq.n	8010542 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801050e:	4b24      	ldr	r3, [pc, #144]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010518:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801051a:	4b21      	ldr	r3, [pc, #132]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801051c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010520:	4a1f      	ldr	r2, [pc, #124]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801052a:	4b1d      	ldr	r3, [pc, #116]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801052c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010530:	4a1b      	ldr	r2, [pc, #108]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010536:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801053a:	4a19      	ldr	r2, [pc, #100]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801053c:	697b      	ldr	r3, [r7, #20]
 801053e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8010542:	697b      	ldr	r3, [r7, #20]
 8010544:	f003 0301 	and.w	r3, r3, #1
 8010548:	2b00      	cmp	r3, #0
 801054a:	d016      	beq.n	801057a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801054c:	f7fb fbb0 	bl	800bcb0 <HAL_GetTick>
 8010550:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010552:	e00b      	b.n	801056c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010554:	f7fb fbac 	bl	800bcb0 <HAL_GetTick>
 8010558:	4602      	mov	r2, r0
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	1ad3      	subs	r3, r2, r3
 801055e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010562:	4293      	cmp	r3, r2
 8010564:	d902      	bls.n	801056c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8010566:	2303      	movs	r3, #3
 8010568:	74fb      	strb	r3, [r7, #19]
            break;
 801056a:	e006      	b.n	801057a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801056c:	4b0c      	ldr	r3, [pc, #48]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 801056e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010572:	f003 0302 	and.w	r3, r3, #2
 8010576:	2b00      	cmp	r3, #0
 8010578:	d0ec      	beq.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 801057a:	7cfb      	ldrb	r3, [r7, #19]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d10b      	bne.n	8010598 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010580:	4b07      	ldr	r3, [pc, #28]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010586:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801058e:	4904      	ldr	r1, [pc, #16]	; (80105a0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8010590:	4313      	orrs	r3, r2
 8010592:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010596:	e009      	b.n	80105ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010598:	7cfb      	ldrb	r3, [r7, #19]
 801059a:	74bb      	strb	r3, [r7, #18]
 801059c:	e006      	b.n	80105ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 801059e:	bf00      	nop
 80105a0:	40021000 	.word	0x40021000
 80105a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80105a8:	7cfb      	ldrb	r3, [r7, #19]
 80105aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80105ac:	7c7b      	ldrb	r3, [r7, #17]
 80105ae:	2b01      	cmp	r3, #1
 80105b0:	d105      	bne.n	80105be <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80105b2:	4bb2      	ldr	r3, [pc, #712]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80105b6:	4ab1      	ldr	r2, [pc, #708]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80105bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f003 0301 	and.w	r3, r3, #1
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d00a      	beq.n	80105e0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80105ca:	4bac      	ldr	r3, [pc, #688]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105d0:	f023 0203 	bic.w	r2, r3, #3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a1b      	ldr	r3, [r3, #32]
 80105d8:	49a8      	ldr	r1, [pc, #672]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105da:	4313      	orrs	r3, r2
 80105dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f003 0302 	and.w	r3, r3, #2
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d00a      	beq.n	8010602 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80105ec:	4ba3      	ldr	r3, [pc, #652]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105f2:	f023 020c 	bic.w	r2, r3, #12
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fa:	49a0      	ldr	r1, [pc, #640]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80105fc:	4313      	orrs	r3, r2
 80105fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f003 0304 	and.w	r3, r3, #4
 801060a:	2b00      	cmp	r3, #0
 801060c:	d00a      	beq.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801060e:	4b9b      	ldr	r3, [pc, #620]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010614:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801061c:	4997      	ldr	r1, [pc, #604]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801061e:	4313      	orrs	r3, r2
 8010620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	681b      	ldr	r3, [r3, #0]
 8010628:	f003 0320 	and.w	r3, r3, #32
 801062c:	2b00      	cmp	r3, #0
 801062e:	d00a      	beq.n	8010646 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010630:	4b92      	ldr	r3, [pc, #584]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010636:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801063e:	498f      	ldr	r1, [pc, #572]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010640:	4313      	orrs	r3, r2
 8010642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801064e:	2b00      	cmp	r3, #0
 8010650:	d00a      	beq.n	8010668 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010652:	4b8a      	ldr	r3, [pc, #552]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010658:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010660:	4986      	ldr	r1, [pc, #536]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010662:	4313      	orrs	r3, r2
 8010664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010670:	2b00      	cmp	r3, #0
 8010672:	d00a      	beq.n	801068a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010674:	4b81      	ldr	r3, [pc, #516]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801067a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010682:	497e      	ldr	r1, [pc, #504]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010684:	4313      	orrs	r3, r2
 8010686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010692:	2b00      	cmp	r3, #0
 8010694:	d00a      	beq.n	80106ac <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8010696:	4b79      	ldr	r3, [pc, #484]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801069c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106a4:	4975      	ldr	r1, [pc, #468]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106a6:	4313      	orrs	r3, r2
 80106a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d00a      	beq.n	80106ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80106b8:	4b70      	ldr	r3, [pc, #448]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106c6:	496d      	ldr	r1, [pc, #436]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106c8:	4313      	orrs	r3, r2
 80106ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d00a      	beq.n	80106f0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80106da:	4b68      	ldr	r3, [pc, #416]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80106e8:	4964      	ldr	r1, [pc, #400]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106ea:	4313      	orrs	r3, r2
 80106ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d028      	beq.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80106fc:	4b5f      	ldr	r3, [pc, #380]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80106fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010702:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801070a:	495c      	ldr	r1, [pc, #368]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801070c:	4313      	orrs	r3, r2
 801070e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010716:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801071a:	d106      	bne.n	801072a <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801071c:	4b57      	ldr	r3, [pc, #348]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	4a56      	ldr	r2, [pc, #344]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010722:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010726:	60d3      	str	r3, [r2, #12]
 8010728:	e011      	b.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801072e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010732:	d10c      	bne.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	3304      	adds	r3, #4
 8010738:	2101      	movs	r1, #1
 801073a:	4618      	mov	r0, r3
 801073c:	f000 f8b0 	bl	80108a0 <RCCEx_PLLSAI1_Config>
 8010740:	4603      	mov	r3, r0
 8010742:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010744:	7cfb      	ldrb	r3, [r7, #19]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <HAL_RCCEx_PeriphCLKConfig+0x35a>
        {
          /* set overall return value */
          status = ret;
 801074a:	7cfb      	ldrb	r3, [r7, #19]
 801074c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010756:	2b00      	cmp	r3, #0
 8010758:	d028      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801075a:	4b48      	ldr	r3, [pc, #288]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801075c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010760:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010768:	4944      	ldr	r1, [pc, #272]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801076a:	4313      	orrs	r3, r2
 801076c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010778:	d106      	bne.n	8010788 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801077a:	4b40      	ldr	r3, [pc, #256]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801077c:	68db      	ldr	r3, [r3, #12]
 801077e:	4a3f      	ldr	r2, [pc, #252]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010780:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010784:	60d3      	str	r3, [r2, #12]
 8010786:	e011      	b.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801078c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010790:	d10c      	bne.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3304      	adds	r3, #4
 8010796:	2101      	movs	r1, #1
 8010798:	4618      	mov	r0, r3
 801079a:	f000 f881 	bl	80108a0 <RCCEx_PLLSAI1_Config>
 801079e:	4603      	mov	r3, r0
 80107a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107a2:	7cfb      	ldrb	r3, [r7, #19]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80107a8:	7cfb      	ldrb	r3, [r7, #19]
 80107aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d028      	beq.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80107b8:	4b30      	ldr	r3, [pc, #192]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80107ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107c6:	492d      	ldr	r1, [pc, #180]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80107c8:	4313      	orrs	r3, r2
 80107ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80107d6:	d106      	bne.n	80107e6 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80107d8:	4b28      	ldr	r3, [pc, #160]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	4a27      	ldr	r2, [pc, #156]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80107de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80107e2:	60d3      	str	r3, [r2, #12]
 80107e4:	e011      	b.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x416>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80107ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80107ee:	d10c      	bne.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x416>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	3304      	adds	r3, #4
 80107f4:	2101      	movs	r1, #1
 80107f6:	4618      	mov	r0, r3
 80107f8:	f000 f852 	bl	80108a0 <RCCEx_PLLSAI1_Config>
 80107fc:	4603      	mov	r3, r0
 80107fe:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010800:	7cfb      	ldrb	r3, [r7, #19]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d001      	beq.n	801080a <HAL_RCCEx_PeriphCLKConfig+0x416>
      {
        /* set overall return value */
        status = ret;
 8010806:	7cfb      	ldrb	r3, [r7, #19]
 8010808:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010812:	2b00      	cmp	r3, #0
 8010814:	d01c      	beq.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8010816:	4b19      	ldr	r3, [pc, #100]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010818:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801081c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010824:	4915      	ldr	r1, [pc, #84]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8010826:	4313      	orrs	r3, r2
 8010828:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010834:	d10c      	bne.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	3304      	adds	r3, #4
 801083a:	2102      	movs	r1, #2
 801083c:	4618      	mov	r0, r3
 801083e:	f000 f82f 	bl	80108a0 <RCCEx_PLLSAI1_Config>
 8010842:	4603      	mov	r3, r0
 8010844:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010846:	7cfb      	ldrb	r3, [r7, #19]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d001      	beq.n	8010850 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* set overall return value */
        status = ret;
 801084c:	7cfb      	ldrb	r3, [r7, #19]
 801084e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010858:	2b00      	cmp	r3, #0
 801085a:	d00a      	beq.n	8010872 <HAL_RCCEx_PeriphCLKConfig+0x47e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801085c:	4b07      	ldr	r3, [pc, #28]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801085e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010862:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801086a:	4904      	ldr	r1, [pc, #16]	; (801087c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 801086c:	4313      	orrs	r3, r2
 801086e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8010872:	7cbb      	ldrb	r3, [r7, #18]
}
 8010874:	4618      	mov	r0, r3
 8010876:	3718      	adds	r7, #24
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	40021000 	.word	0x40021000

08010880 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8010880:	b480      	push	{r7}
 8010882:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8010884:	4b05      	ldr	r3, [pc, #20]	; (801089c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a04      	ldr	r2, [pc, #16]	; (801089c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 801088a:	f043 0304 	orr.w	r3, r3, #4
 801088e:	6013      	str	r3, [r2, #0]
}
 8010890:	bf00      	nop
 8010892:	46bd      	mov	sp, r7
 8010894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010898:	4770      	bx	lr
 801089a:	bf00      	nop
 801089c:	40021000 	.word	0x40021000

080108a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	b084      	sub	sp, #16
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80108aa:	2300      	movs	r3, #0
 80108ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80108ae:	4b74      	ldr	r3, [pc, #464]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80108b0:	68db      	ldr	r3, [r3, #12]
 80108b2:	f003 0303 	and.w	r3, r3, #3
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d018      	beq.n	80108ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80108ba:	4b71      	ldr	r3, [pc, #452]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	f003 0203 	and.w	r2, r3, #3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d10d      	bne.n	80108e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	681b      	ldr	r3, [r3, #0]
       ||
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d009      	beq.n	80108e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80108d2:	4b6b      	ldr	r3, [pc, #428]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80108d4:	68db      	ldr	r3, [r3, #12]
 80108d6:	091b      	lsrs	r3, r3, #4
 80108d8:	f003 0307 	and.w	r3, r3, #7
 80108dc:	1c5a      	adds	r2, r3, #1
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	685b      	ldr	r3, [r3, #4]
       ||
 80108e2:	429a      	cmp	r2, r3
 80108e4:	d047      	beq.n	8010976 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80108e6:	2301      	movs	r3, #1
 80108e8:	73fb      	strb	r3, [r7, #15]
 80108ea:	e044      	b.n	8010976 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	2b03      	cmp	r3, #3
 80108f2:	d018      	beq.n	8010926 <RCCEx_PLLSAI1_Config+0x86>
 80108f4:	2b03      	cmp	r3, #3
 80108f6:	d825      	bhi.n	8010944 <RCCEx_PLLSAI1_Config+0xa4>
 80108f8:	2b01      	cmp	r3, #1
 80108fa:	d002      	beq.n	8010902 <RCCEx_PLLSAI1_Config+0x62>
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d009      	beq.n	8010914 <RCCEx_PLLSAI1_Config+0x74>
 8010900:	e020      	b.n	8010944 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010902:	4b5f      	ldr	r3, [pc, #380]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	f003 0302 	and.w	r3, r3, #2
 801090a:	2b00      	cmp	r3, #0
 801090c:	d11d      	bne.n	801094a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801090e:	2301      	movs	r3, #1
 8010910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010912:	e01a      	b.n	801094a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010914:	4b5a      	ldr	r3, [pc, #360]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801091c:	2b00      	cmp	r3, #0
 801091e:	d116      	bne.n	801094e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010920:	2301      	movs	r3, #1
 8010922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010924:	e013      	b.n	801094e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010926:	4b56      	ldr	r3, [pc, #344]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801092e:	2b00      	cmp	r3, #0
 8010930:	d10f      	bne.n	8010952 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010932:	4b53      	ldr	r3, [pc, #332]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801093a:	2b00      	cmp	r3, #0
 801093c:	d109      	bne.n	8010952 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801093e:	2301      	movs	r3, #1
 8010940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010942:	e006      	b.n	8010952 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010944:	2301      	movs	r3, #1
 8010946:	73fb      	strb	r3, [r7, #15]
      break;
 8010948:	e004      	b.n	8010954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801094a:	bf00      	nop
 801094c:	e002      	b.n	8010954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 801094e:	bf00      	nop
 8010950:	e000      	b.n	8010954 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8010952:	bf00      	nop
    }

    if(status == HAL_OK)
 8010954:	7bfb      	ldrb	r3, [r7, #15]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d10d      	bne.n	8010976 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 801095a:	4b49      	ldr	r3, [pc, #292]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 801095c:	68db      	ldr	r3, [r3, #12]
 801095e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	6819      	ldr	r1, [r3, #0]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	685b      	ldr	r3, [r3, #4]
 801096a:	3b01      	subs	r3, #1
 801096c:	011b      	lsls	r3, r3, #4
 801096e:	430b      	orrs	r3, r1
 8010970:	4943      	ldr	r1, [pc, #268]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010972:	4313      	orrs	r3, r2
 8010974:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010976:	7bfb      	ldrb	r3, [r7, #15]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d17c      	bne.n	8010a76 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 801097c:	4b40      	ldr	r3, [pc, #256]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	4a3f      	ldr	r2, [pc, #252]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010982:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8010986:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010988:	f7fb f992 	bl	800bcb0 <HAL_GetTick>
 801098c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 801098e:	e009      	b.n	80109a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010990:	f7fb f98e 	bl	800bcb0 <HAL_GetTick>
 8010994:	4602      	mov	r2, r0
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	2b02      	cmp	r3, #2
 801099c:	d902      	bls.n	80109a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 801099e:	2303      	movs	r3, #3
 80109a0:	73fb      	strb	r3, [r7, #15]
        break;
 80109a2:	e005      	b.n	80109b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80109a4:	4b36      	ldr	r3, [pc, #216]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1ef      	bne.n	8010990 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80109b0:	7bfb      	ldrb	r3, [r7, #15]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d15f      	bne.n	8010a76 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d110      	bne.n	80109de <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80109bc:	4b30      	ldr	r3, [pc, #192]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80109c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80109c8:	687a      	ldr	r2, [r7, #4]
 80109ca:	6892      	ldr	r2, [r2, #8]
 80109cc:	0211      	lsls	r1, r2, #8
 80109ce:	687a      	ldr	r2, [r7, #4]
 80109d0:	68d2      	ldr	r2, [r2, #12]
 80109d2:	06d2      	lsls	r2, r2, #27
 80109d4:	430a      	orrs	r2, r1
 80109d6:	492a      	ldr	r1, [pc, #168]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80109d8:	4313      	orrs	r3, r2
 80109da:	610b      	str	r3, [r1, #16]
 80109dc:	e027      	b.n	8010a2e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80109de:	683b      	ldr	r3, [r7, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d112      	bne.n	8010a0a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80109e4:	4b26      	ldr	r3, [pc, #152]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 80109e6:	691b      	ldr	r3, [r3, #16]
 80109e8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80109ec:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	6892      	ldr	r2, [r2, #8]
 80109f4:	0211      	lsls	r1, r2, #8
 80109f6:	687a      	ldr	r2, [r7, #4]
 80109f8:	6912      	ldr	r2, [r2, #16]
 80109fa:	0852      	lsrs	r2, r2, #1
 80109fc:	3a01      	subs	r2, #1
 80109fe:	0552      	lsls	r2, r2, #21
 8010a00:	430a      	orrs	r2, r1
 8010a02:	491f      	ldr	r1, [pc, #124]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a04:	4313      	orrs	r3, r2
 8010a06:	610b      	str	r3, [r1, #16]
 8010a08:	e011      	b.n	8010a2e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010a0a:	4b1d      	ldr	r3, [pc, #116]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a0c:	691b      	ldr	r3, [r3, #16]
 8010a0e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010a12:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	6892      	ldr	r2, [r2, #8]
 8010a1a:	0211      	lsls	r1, r2, #8
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	6952      	ldr	r2, [r2, #20]
 8010a20:	0852      	lsrs	r2, r2, #1
 8010a22:	3a01      	subs	r2, #1
 8010a24:	0652      	lsls	r2, r2, #25
 8010a26:	430a      	orrs	r2, r1
 8010a28:	4915      	ldr	r1, [pc, #84]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010a2e:	4b14      	ldr	r3, [pc, #80]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	4a13      	ldr	r2, [pc, #76]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010a38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010a3a:	f7fb f939 	bl	800bcb0 <HAL_GetTick>
 8010a3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010a40:	e009      	b.n	8010a56 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8010a42:	f7fb f935 	bl	800bcb0 <HAL_GetTick>
 8010a46:	4602      	mov	r2, r0
 8010a48:	68bb      	ldr	r3, [r7, #8]
 8010a4a:	1ad3      	subs	r3, r2, r3
 8010a4c:	2b02      	cmp	r3, #2
 8010a4e:	d902      	bls.n	8010a56 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8010a50:	2303      	movs	r3, #3
 8010a52:	73fb      	strb	r3, [r7, #15]
          break;
 8010a54:	e005      	b.n	8010a62 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8010a56:	4b0a      	ldr	r3, [pc, #40]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d0ef      	beq.n	8010a42 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8010a62:	7bfb      	ldrb	r3, [r7, #15]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d106      	bne.n	8010a76 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8010a68:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a6a:	691a      	ldr	r2, [r3, #16]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	699b      	ldr	r3, [r3, #24]
 8010a70:	4903      	ldr	r1, [pc, #12]	; (8010a80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8010a72:	4313      	orrs	r3, r2
 8010a74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8010a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3710      	adds	r7, #16
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	40021000 	.word	0x40021000

08010a84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b082      	sub	sp, #8
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d101      	bne.n	8010a96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010a92:	2301      	movs	r3, #1
 8010a94:	e049      	b.n	8010b2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010a9c:	b2db      	uxtb	r3, r3
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d106      	bne.n	8010ab0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010aaa:	6878      	ldr	r0, [r7, #4]
 8010aac:	f7fa fe0c 	bl	800b6c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	2202      	movs	r2, #2
 8010ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	681a      	ldr	r2, [r3, #0]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	3304      	adds	r3, #4
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	4610      	mov	r0, r2
 8010ac4:	f000 fcaa 	bl	801141c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	2201      	movs	r2, #1
 8010adc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2201      	movs	r2, #1
 8010ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	2201      	movs	r2, #1
 8010aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	2201      	movs	r2, #1
 8010af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2201      	movs	r2, #1
 8010afc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	2201      	movs	r2, #1
 8010b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	2201      	movs	r2, #1
 8010b14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2201      	movs	r2, #1
 8010b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
	...

08010b34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b085      	sub	sp, #20
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	2b01      	cmp	r3, #1
 8010b46:	d001      	beq.n	8010b4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010b48:	2301      	movs	r3, #1
 8010b4a:	e03b      	b.n	8010bc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2202      	movs	r2, #2
 8010b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	68da      	ldr	r2, [r3, #12]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	f042 0201 	orr.w	r2, r2, #1
 8010b62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	4a19      	ldr	r2, [pc, #100]	; (8010bd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8010b6a:	4293      	cmp	r3, r2
 8010b6c:	d009      	beq.n	8010b82 <HAL_TIM_Base_Start_IT+0x4e>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010b76:	d004      	beq.n	8010b82 <HAL_TIM_Base_Start_IT+0x4e>
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4a15      	ldr	r2, [pc, #84]	; (8010bd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8010b7e:	4293      	cmp	r3, r2
 8010b80:	d115      	bne.n	8010bae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	689a      	ldr	r2, [r3, #8]
 8010b88:	4b13      	ldr	r3, [pc, #76]	; (8010bd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8010b8a:	4013      	ands	r3, r2
 8010b8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2b06      	cmp	r3, #6
 8010b92:	d015      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x8c>
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010b9a:	d011      	beq.n	8010bc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	681b      	ldr	r3, [r3, #0]
 8010ba0:	681a      	ldr	r2, [r3, #0]
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	f042 0201 	orr.w	r2, r2, #1
 8010baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bac:	e008      	b.n	8010bc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	681a      	ldr	r2, [r3, #0]
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	f042 0201 	orr.w	r2, r2, #1
 8010bbc:	601a      	str	r2, [r3, #0]
 8010bbe:	e000      	b.n	8010bc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010bc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010bc2:	2300      	movs	r3, #0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3714      	adds	r7, #20
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bce:	4770      	bx	lr
 8010bd0:	40012c00 	.word	0x40012c00
 8010bd4:	40014000 	.word	0x40014000
 8010bd8:	00010007 	.word	0x00010007

08010bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d101      	bne.n	8010bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8010bea:	2301      	movs	r3, #1
 8010bec:	e049      	b.n	8010c82 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d106      	bne.n	8010c08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8010c02:	6878      	ldr	r0, [r7, #4]
 8010c04:	f000 f841 	bl	8010c8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2202      	movs	r2, #2
 8010c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681a      	ldr	r2, [r3, #0]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	3304      	adds	r3, #4
 8010c18:	4619      	mov	r1, r3
 8010c1a:	4610      	mov	r0, r2
 8010c1c:	f000 fbfe 	bl	801141c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	2201      	movs	r2, #1
 8010c4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2201      	movs	r2, #1
 8010c5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	2201      	movs	r2, #1
 8010c64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	2201      	movs	r2, #1
 8010c6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2201      	movs	r2, #1
 8010c74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2201      	movs	r2, #1
 8010c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c80:	2300      	movs	r3, #0
}
 8010c82:	4618      	mov	r0, r3
 8010c84:	3708      	adds	r7, #8
 8010c86:	46bd      	mov	sp, r7
 8010c88:	bd80      	pop	{r7, pc}

08010c8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8010c8a:	b480      	push	{r7}
 8010c8c:	b083      	sub	sp, #12
 8010c8e:	af00      	add	r7, sp, #0
 8010c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8010c92:	bf00      	nop
 8010c94:	370c      	adds	r7, #12
 8010c96:	46bd      	mov	sp, r7
 8010c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c9c:	4770      	bx	lr
	...

08010ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b084      	sub	sp, #16
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	6078      	str	r0, [r7, #4]
 8010ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8010caa:	683b      	ldr	r3, [r7, #0]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d109      	bne.n	8010cc4 <HAL_TIM_PWM_Start+0x24>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010cb6:	b2db      	uxtb	r3, r3
 8010cb8:	2b01      	cmp	r3, #1
 8010cba:	bf14      	ite	ne
 8010cbc:	2301      	movne	r3, #1
 8010cbe:	2300      	moveq	r3, #0
 8010cc0:	b2db      	uxtb	r3, r3
 8010cc2:	e03c      	b.n	8010d3e <HAL_TIM_PWM_Start+0x9e>
 8010cc4:	683b      	ldr	r3, [r7, #0]
 8010cc6:	2b04      	cmp	r3, #4
 8010cc8:	d109      	bne.n	8010cde <HAL_TIM_PWM_Start+0x3e>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8010cd0:	b2db      	uxtb	r3, r3
 8010cd2:	2b01      	cmp	r3, #1
 8010cd4:	bf14      	ite	ne
 8010cd6:	2301      	movne	r3, #1
 8010cd8:	2300      	moveq	r3, #0
 8010cda:	b2db      	uxtb	r3, r3
 8010cdc:	e02f      	b.n	8010d3e <HAL_TIM_PWM_Start+0x9e>
 8010cde:	683b      	ldr	r3, [r7, #0]
 8010ce0:	2b08      	cmp	r3, #8
 8010ce2:	d109      	bne.n	8010cf8 <HAL_TIM_PWM_Start+0x58>
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010cea:	b2db      	uxtb	r3, r3
 8010cec:	2b01      	cmp	r3, #1
 8010cee:	bf14      	ite	ne
 8010cf0:	2301      	movne	r3, #1
 8010cf2:	2300      	moveq	r3, #0
 8010cf4:	b2db      	uxtb	r3, r3
 8010cf6:	e022      	b.n	8010d3e <HAL_TIM_PWM_Start+0x9e>
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	2b0c      	cmp	r3, #12
 8010cfc:	d109      	bne.n	8010d12 <HAL_TIM_PWM_Start+0x72>
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b01      	cmp	r3, #1
 8010d08:	bf14      	ite	ne
 8010d0a:	2301      	movne	r3, #1
 8010d0c:	2300      	moveq	r3, #0
 8010d0e:	b2db      	uxtb	r3, r3
 8010d10:	e015      	b.n	8010d3e <HAL_TIM_PWM_Start+0x9e>
 8010d12:	683b      	ldr	r3, [r7, #0]
 8010d14:	2b10      	cmp	r3, #16
 8010d16:	d109      	bne.n	8010d2c <HAL_TIM_PWM_Start+0x8c>
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010d1e:	b2db      	uxtb	r3, r3
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	bf14      	ite	ne
 8010d24:	2301      	movne	r3, #1
 8010d26:	2300      	moveq	r3, #0
 8010d28:	b2db      	uxtb	r3, r3
 8010d2a:	e008      	b.n	8010d3e <HAL_TIM_PWM_Start+0x9e>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	bf14      	ite	ne
 8010d38:	2301      	movne	r3, #1
 8010d3a:	2300      	moveq	r3, #0
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d001      	beq.n	8010d46 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8010d42:	2301      	movs	r3, #1
 8010d44:	e07e      	b.n	8010e44 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d104      	bne.n	8010d56 <HAL_TIM_PWM_Start+0xb6>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2202      	movs	r2, #2
 8010d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010d54:	e023      	b.n	8010d9e <HAL_TIM_PWM_Start+0xfe>
 8010d56:	683b      	ldr	r3, [r7, #0]
 8010d58:	2b04      	cmp	r3, #4
 8010d5a:	d104      	bne.n	8010d66 <HAL_TIM_PWM_Start+0xc6>
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2202      	movs	r2, #2
 8010d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010d64:	e01b      	b.n	8010d9e <HAL_TIM_PWM_Start+0xfe>
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	2b08      	cmp	r3, #8
 8010d6a:	d104      	bne.n	8010d76 <HAL_TIM_PWM_Start+0xd6>
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	2202      	movs	r2, #2
 8010d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010d74:	e013      	b.n	8010d9e <HAL_TIM_PWM_Start+0xfe>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	2b0c      	cmp	r3, #12
 8010d7a:	d104      	bne.n	8010d86 <HAL_TIM_PWM_Start+0xe6>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	2202      	movs	r2, #2
 8010d80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010d84:	e00b      	b.n	8010d9e <HAL_TIM_PWM_Start+0xfe>
 8010d86:	683b      	ldr	r3, [r7, #0]
 8010d88:	2b10      	cmp	r3, #16
 8010d8a:	d104      	bne.n	8010d96 <HAL_TIM_PWM_Start+0xf6>
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2202      	movs	r2, #2
 8010d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010d94:	e003      	b.n	8010d9e <HAL_TIM_PWM_Start+0xfe>
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	2202      	movs	r2, #2
 8010d9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	2201      	movs	r2, #1
 8010da4:	6839      	ldr	r1, [r7, #0]
 8010da6:	4618      	mov	r0, r3
 8010da8:	f000 fe1a 	bl	80119e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a26      	ldr	r2, [pc, #152]	; (8010e4c <HAL_TIM_PWM_Start+0x1ac>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d009      	beq.n	8010dca <HAL_TIM_PWM_Start+0x12a>
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	4a25      	ldr	r2, [pc, #148]	; (8010e50 <HAL_TIM_PWM_Start+0x1b0>)
 8010dbc:	4293      	cmp	r3, r2
 8010dbe:	d004      	beq.n	8010dca <HAL_TIM_PWM_Start+0x12a>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a23      	ldr	r2, [pc, #140]	; (8010e54 <HAL_TIM_PWM_Start+0x1b4>)
 8010dc6:	4293      	cmp	r3, r2
 8010dc8:	d101      	bne.n	8010dce <HAL_TIM_PWM_Start+0x12e>
 8010dca:	2301      	movs	r3, #1
 8010dcc:	e000      	b.n	8010dd0 <HAL_TIM_PWM_Start+0x130>
 8010dce:	2300      	movs	r3, #0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d007      	beq.n	8010de4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010de2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	4a18      	ldr	r2, [pc, #96]	; (8010e4c <HAL_TIM_PWM_Start+0x1ac>)
 8010dea:	4293      	cmp	r3, r2
 8010dec:	d009      	beq.n	8010e02 <HAL_TIM_PWM_Start+0x162>
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010df6:	d004      	beq.n	8010e02 <HAL_TIM_PWM_Start+0x162>
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	681b      	ldr	r3, [r3, #0]
 8010dfc:	4a14      	ldr	r2, [pc, #80]	; (8010e50 <HAL_TIM_PWM_Start+0x1b0>)
 8010dfe:	4293      	cmp	r3, r2
 8010e00:	d115      	bne.n	8010e2e <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	689a      	ldr	r2, [r3, #8]
 8010e08:	4b13      	ldr	r3, [pc, #76]	; (8010e58 <HAL_TIM_PWM_Start+0x1b8>)
 8010e0a:	4013      	ands	r3, r2
 8010e0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	2b06      	cmp	r3, #6
 8010e12:	d015      	beq.n	8010e40 <HAL_TIM_PWM_Start+0x1a0>
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010e1a:	d011      	beq.n	8010e40 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	681a      	ldr	r2, [r3, #0]
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f042 0201 	orr.w	r2, r2, #1
 8010e2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e2c:	e008      	b.n	8010e40 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f042 0201 	orr.w	r2, r2, #1
 8010e3c:	601a      	str	r2, [r3, #0]
 8010e3e:	e000      	b.n	8010e42 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010e40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010e42:	2300      	movs	r3, #0
}
 8010e44:	4618      	mov	r0, r3
 8010e46:	3710      	adds	r7, #16
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	40012c00 	.word	0x40012c00
 8010e50:	40014000 	.word	0x40014000
 8010e54:	40014400 	.word	0x40014400
 8010e58:	00010007 	.word	0x00010007

08010e5c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8010e5c:	b580      	push	{r7, lr}
 8010e5e:	b082      	sub	sp, #8
 8010e60:	af00      	add	r7, sp, #0
 8010e62:	6078      	str	r0, [r7, #4]
 8010e64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	6839      	ldr	r1, [r7, #0]
 8010e6e:	4618      	mov	r0, r3
 8010e70:	f000 fdb6 	bl	80119e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4a39      	ldr	r2, [pc, #228]	; (8010f60 <HAL_TIM_PWM_Stop+0x104>)
 8010e7a:	4293      	cmp	r3, r2
 8010e7c:	d009      	beq.n	8010e92 <HAL_TIM_PWM_Stop+0x36>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	4a38      	ldr	r2, [pc, #224]	; (8010f64 <HAL_TIM_PWM_Stop+0x108>)
 8010e84:	4293      	cmp	r3, r2
 8010e86:	d004      	beq.n	8010e92 <HAL_TIM_PWM_Stop+0x36>
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	4a36      	ldr	r2, [pc, #216]	; (8010f68 <HAL_TIM_PWM_Stop+0x10c>)
 8010e8e:	4293      	cmp	r3, r2
 8010e90:	d101      	bne.n	8010e96 <HAL_TIM_PWM_Stop+0x3a>
 8010e92:	2301      	movs	r3, #1
 8010e94:	e000      	b.n	8010e98 <HAL_TIM_PWM_Stop+0x3c>
 8010e96:	2300      	movs	r3, #0
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d017      	beq.n	8010ecc <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	6a1a      	ldr	r2, [r3, #32]
 8010ea2:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ea6:	4013      	ands	r3, r2
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d10f      	bne.n	8010ecc <HAL_TIM_PWM_Stop+0x70>
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	6a1a      	ldr	r2, [r3, #32]
 8010eb2:	f240 4344 	movw	r3, #1092	; 0x444
 8010eb6:	4013      	ands	r3, r2
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d107      	bne.n	8010ecc <HAL_TIM_PWM_Stop+0x70>
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010eca:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	6a1a      	ldr	r2, [r3, #32]
 8010ed2:	f241 1311 	movw	r3, #4369	; 0x1111
 8010ed6:	4013      	ands	r3, r2
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d10f      	bne.n	8010efc <HAL_TIM_PWM_Stop+0xa0>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	681b      	ldr	r3, [r3, #0]
 8010ee0:	6a1a      	ldr	r2, [r3, #32]
 8010ee2:	f240 4344 	movw	r3, #1092	; 0x444
 8010ee6:	4013      	ands	r3, r2
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d107      	bne.n	8010efc <HAL_TIM_PWM_Stop+0xa0>
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	681a      	ldr	r2, [r3, #0]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	f022 0201 	bic.w	r2, r2, #1
 8010efa:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d104      	bne.n	8010f0c <HAL_TIM_PWM_Stop+0xb0>
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2201      	movs	r2, #1
 8010f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010f0a:	e023      	b.n	8010f54 <HAL_TIM_PWM_Stop+0xf8>
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d104      	bne.n	8010f1c <HAL_TIM_PWM_Stop+0xc0>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	2201      	movs	r2, #1
 8010f16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010f1a:	e01b      	b.n	8010f54 <HAL_TIM_PWM_Stop+0xf8>
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	2b08      	cmp	r3, #8
 8010f20:	d104      	bne.n	8010f2c <HAL_TIM_PWM_Stop+0xd0>
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	2201      	movs	r2, #1
 8010f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010f2a:	e013      	b.n	8010f54 <HAL_TIM_PWM_Stop+0xf8>
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	2b0c      	cmp	r3, #12
 8010f30:	d104      	bne.n	8010f3c <HAL_TIM_PWM_Stop+0xe0>
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	2201      	movs	r2, #1
 8010f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010f3a:	e00b      	b.n	8010f54 <HAL_TIM_PWM_Stop+0xf8>
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	2b10      	cmp	r3, #16
 8010f40:	d104      	bne.n	8010f4c <HAL_TIM_PWM_Stop+0xf0>
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	2201      	movs	r2, #1
 8010f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010f4a:	e003      	b.n	8010f54 <HAL_TIM_PWM_Stop+0xf8>
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	2201      	movs	r2, #1
 8010f50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3708      	adds	r7, #8
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	40012c00 	.word	0x40012c00
 8010f64:	40014000 	.word	0x40014000
 8010f68:	40014400 	.word	0x40014400

08010f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	691b      	ldr	r3, [r3, #16]
 8010f7a:	f003 0302 	and.w	r3, r3, #2
 8010f7e:	2b02      	cmp	r3, #2
 8010f80:	d122      	bne.n	8010fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	681b      	ldr	r3, [r3, #0]
 8010f86:	68db      	ldr	r3, [r3, #12]
 8010f88:	f003 0302 	and.w	r3, r3, #2
 8010f8c:	2b02      	cmp	r3, #2
 8010f8e:	d11b      	bne.n	8010fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010f90:	687b      	ldr	r3, [r7, #4]
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	f06f 0202 	mvn.w	r2, #2
 8010f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2201      	movs	r2, #1
 8010f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	699b      	ldr	r3, [r3, #24]
 8010fa6:	f003 0303 	and.w	r3, r3, #3
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 fa16 	bl	80113e0 <HAL_TIM_IC_CaptureCallback>
 8010fb4:	e005      	b.n	8010fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010fb6:	6878      	ldr	r0, [r7, #4]
 8010fb8:	f000 fa08 	bl	80113cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010fbc:	6878      	ldr	r0, [r7, #4]
 8010fbe:	f000 fa19 	bl	80113f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	691b      	ldr	r3, [r3, #16]
 8010fce:	f003 0304 	and.w	r3, r3, #4
 8010fd2:	2b04      	cmp	r3, #4
 8010fd4:	d122      	bne.n	801101c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	68db      	ldr	r3, [r3, #12]
 8010fdc:	f003 0304 	and.w	r3, r3, #4
 8010fe0:	2b04      	cmp	r3, #4
 8010fe2:	d11b      	bne.n	801101c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	f06f 0204 	mvn.w	r2, #4
 8010fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2202      	movs	r2, #2
 8010ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	699b      	ldr	r3, [r3, #24]
 8010ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 f9ec 	bl	80113e0 <HAL_TIM_IC_CaptureCallback>
 8011008:	e005      	b.n	8011016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801100a:	6878      	ldr	r0, [r7, #4]
 801100c:	f000 f9de 	bl	80113cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 f9ef 	bl	80113f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2200      	movs	r2, #0
 801101a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	691b      	ldr	r3, [r3, #16]
 8011022:	f003 0308 	and.w	r3, r3, #8
 8011026:	2b08      	cmp	r3, #8
 8011028:	d122      	bne.n	8011070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	f003 0308 	and.w	r3, r3, #8
 8011034:	2b08      	cmp	r3, #8
 8011036:	d11b      	bne.n	8011070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	f06f 0208 	mvn.w	r2, #8
 8011040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2204      	movs	r2, #4
 8011046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	69db      	ldr	r3, [r3, #28]
 801104e:	f003 0303 	and.w	r3, r3, #3
 8011052:	2b00      	cmp	r3, #0
 8011054:	d003      	beq.n	801105e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8011056:	6878      	ldr	r0, [r7, #4]
 8011058:	f000 f9c2 	bl	80113e0 <HAL_TIM_IC_CaptureCallback>
 801105c:	e005      	b.n	801106a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801105e:	6878      	ldr	r0, [r7, #4]
 8011060:	f000 f9b4 	bl	80113cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 f9c5 	bl	80113f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801106a:	687b      	ldr	r3, [r7, #4]
 801106c:	2200      	movs	r2, #0
 801106e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	691b      	ldr	r3, [r3, #16]
 8011076:	f003 0310 	and.w	r3, r3, #16
 801107a:	2b10      	cmp	r3, #16
 801107c:	d122      	bne.n	80110c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68db      	ldr	r3, [r3, #12]
 8011084:	f003 0310 	and.w	r3, r3, #16
 8011088:	2b10      	cmp	r3, #16
 801108a:	d11b      	bne.n	80110c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	f06f 0210 	mvn.w	r2, #16
 8011094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	2208      	movs	r2, #8
 801109a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	69db      	ldr	r3, [r3, #28]
 80110a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80110a6:	2b00      	cmp	r3, #0
 80110a8:	d003      	beq.n	80110b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f000 f998 	bl	80113e0 <HAL_TIM_IC_CaptureCallback>
 80110b0:	e005      	b.n	80110be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f000 f98a 	bl	80113cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f99b 	bl	80113f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	2200      	movs	r2, #0
 80110c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	691b      	ldr	r3, [r3, #16]
 80110ca:	f003 0301 	and.w	r3, r3, #1
 80110ce:	2b01      	cmp	r3, #1
 80110d0:	d10e      	bne.n	80110f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	68db      	ldr	r3, [r3, #12]
 80110d8:	f003 0301 	and.w	r3, r3, #1
 80110dc:	2b01      	cmp	r3, #1
 80110de:	d107      	bne.n	80110f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	f06f 0201 	mvn.w	r2, #1
 80110e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f7f9 ffaa 	bl	800b044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	691b      	ldr	r3, [r3, #16]
 80110f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80110fa:	2b80      	cmp	r3, #128	; 0x80
 80110fc:	d10e      	bne.n	801111c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	68db      	ldr	r3, [r3, #12]
 8011104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011108:	2b80      	cmp	r3, #128	; 0x80
 801110a:	d107      	bne.n	801111c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8011114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f000 fd70 	bl	8011bfc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	681b      	ldr	r3, [r3, #0]
 8011120:	691b      	ldr	r3, [r3, #16]
 8011122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801112a:	d10e      	bne.n	801114a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011136:	2b80      	cmp	r3, #128	; 0x80
 8011138:	d107      	bne.n	801114a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8011142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fd63 	bl	8011c10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	691b      	ldr	r3, [r3, #16]
 8011150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011154:	2b40      	cmp	r3, #64	; 0x40
 8011156:	d10e      	bne.n	8011176 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011162:	2b40      	cmp	r3, #64	; 0x40
 8011164:	d107      	bne.n	8011176 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	681b      	ldr	r3, [r3, #0]
 801116a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801116e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 f949 	bl	8011408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	681b      	ldr	r3, [r3, #0]
 801117a:	691b      	ldr	r3, [r3, #16]
 801117c:	f003 0320 	and.w	r3, r3, #32
 8011180:	2b20      	cmp	r3, #32
 8011182:	d10e      	bne.n	80111a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	68db      	ldr	r3, [r3, #12]
 801118a:	f003 0320 	and.w	r3, r3, #32
 801118e:	2b20      	cmp	r3, #32
 8011190:	d107      	bne.n	80111a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	681b      	ldr	r3, [r3, #0]
 8011196:	f06f 0220 	mvn.w	r2, #32
 801119a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801119c:	6878      	ldr	r0, [r7, #4]
 801119e:	f000 fd23 	bl	8011be8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80111a2:	bf00      	nop
 80111a4:	3708      	adds	r7, #8
 80111a6:	46bd      	mov	sp, r7
 80111a8:	bd80      	pop	{r7, pc}
	...

080111ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80111be:	2b01      	cmp	r3, #1
 80111c0:	d101      	bne.n	80111c6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80111c2:	2302      	movs	r3, #2
 80111c4:	e0fd      	b.n	80113c2 <HAL_TIM_PWM_ConfigChannel+0x216>
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	2201      	movs	r2, #1
 80111ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2b14      	cmp	r3, #20
 80111d2:	f200 80f0 	bhi.w	80113b6 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80111d6:	a201      	add	r2, pc, #4	; (adr r2, 80111dc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80111d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111dc:	08011231 	.word	0x08011231
 80111e0:	080113b7 	.word	0x080113b7
 80111e4:	080113b7 	.word	0x080113b7
 80111e8:	080113b7 	.word	0x080113b7
 80111ec:	08011271 	.word	0x08011271
 80111f0:	080113b7 	.word	0x080113b7
 80111f4:	080113b7 	.word	0x080113b7
 80111f8:	080113b7 	.word	0x080113b7
 80111fc:	080112b3 	.word	0x080112b3
 8011200:	080113b7 	.word	0x080113b7
 8011204:	080113b7 	.word	0x080113b7
 8011208:	080113b7 	.word	0x080113b7
 801120c:	080112f3 	.word	0x080112f3
 8011210:	080113b7 	.word	0x080113b7
 8011214:	080113b7 	.word	0x080113b7
 8011218:	080113b7 	.word	0x080113b7
 801121c:	08011335 	.word	0x08011335
 8011220:	080113b7 	.word	0x080113b7
 8011224:	080113b7 	.word	0x080113b7
 8011228:	080113b7 	.word	0x080113b7
 801122c:	08011375 	.word	0x08011375
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	681b      	ldr	r3, [r3, #0]
 8011234:	68b9      	ldr	r1, [r7, #8]
 8011236:	4618      	mov	r0, r3
 8011238:	f000 f954 	bl	80114e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	699a      	ldr	r2, [r3, #24]
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	f042 0208 	orr.w	r2, r2, #8
 801124a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	681b      	ldr	r3, [r3, #0]
 8011250:	699a      	ldr	r2, [r3, #24]
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	f022 0204 	bic.w	r2, r2, #4
 801125a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	6999      	ldr	r1, [r3, #24]
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	691a      	ldr	r2, [r3, #16]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	619a      	str	r2, [r3, #24]
      break;
 801126e:	e0a3      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	68b9      	ldr	r1, [r7, #8]
 8011276:	4618      	mov	r0, r3
 8011278:	f000 f9b0 	bl	80115dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	699a      	ldr	r2, [r3, #24]
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801128a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	699a      	ldr	r2, [r3, #24]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801129a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	681b      	ldr	r3, [r3, #0]
 80112a0:	6999      	ldr	r1, [r3, #24]
 80112a2:	68bb      	ldr	r3, [r7, #8]
 80112a4:	691b      	ldr	r3, [r3, #16]
 80112a6:	021a      	lsls	r2, r3, #8
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	619a      	str	r2, [r3, #24]
      break;
 80112b0:	e082      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	68b9      	ldr	r1, [r7, #8]
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 fa09 	bl	80116d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	69da      	ldr	r2, [r3, #28]
 80112c4:	68fb      	ldr	r3, [r7, #12]
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f042 0208 	orr.w	r2, r2, #8
 80112cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	69da      	ldr	r2, [r3, #28]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f022 0204 	bic.w	r2, r2, #4
 80112dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	69d9      	ldr	r1, [r3, #28]
 80112e4:	68bb      	ldr	r3, [r7, #8]
 80112e6:	691a      	ldr	r2, [r3, #16]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	430a      	orrs	r2, r1
 80112ee:	61da      	str	r2, [r3, #28]
      break;
 80112f0:	e062      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68b9      	ldr	r1, [r7, #8]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f000 fa61 	bl	80117c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	69da      	ldr	r2, [r3, #28]
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801130c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	69da      	ldr	r2, [r3, #28]
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801131c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	681b      	ldr	r3, [r3, #0]
 8011322:	69d9      	ldr	r1, [r3, #28]
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	691b      	ldr	r3, [r3, #16]
 8011328:	021a      	lsls	r2, r3, #8
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	430a      	orrs	r2, r1
 8011330:	61da      	str	r2, [r3, #28]
      break;
 8011332:	e041      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	68b9      	ldr	r1, [r7, #8]
 801133a:	4618      	mov	r0, r3
 801133c:	f000 fa9e 	bl	801187c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	f042 0208 	orr.w	r2, r2, #8
 801134e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	681b      	ldr	r3, [r3, #0]
 8011354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f022 0204 	bic.w	r2, r2, #4
 801135e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	691a      	ldr	r2, [r3, #16]
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	681b      	ldr	r3, [r3, #0]
 801136e:	430a      	orrs	r2, r1
 8011370:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8011372:	e021      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	68b9      	ldr	r1, [r7, #8]
 801137a:	4618      	mov	r0, r3
 801137c:	f000 fad6 	bl	801192c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	681b      	ldr	r3, [r3, #0]
 801138a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801138e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011396:	68fb      	ldr	r3, [r7, #12]
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801139e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	691b      	ldr	r3, [r3, #16]
 80113aa:	021a      	lsls	r2, r3, #8
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	430a      	orrs	r2, r1
 80113b2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80113b4:	e000      	b.n	80113b8 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80113b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2200      	movs	r2, #0
 80113bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80113c0:	2300      	movs	r3, #0
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3710      	adds	r7, #16
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop

080113cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80113cc:	b480      	push	{r7}
 80113ce:	b083      	sub	sp, #12
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80113d4:	bf00      	nop
 80113d6:	370c      	adds	r7, #12
 80113d8:	46bd      	mov	sp, r7
 80113da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113de:	4770      	bx	lr

080113e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80113e0:	b480      	push	{r7}
 80113e2:	b083      	sub	sp, #12
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80113e8:	bf00      	nop
 80113ea:	370c      	adds	r7, #12
 80113ec:	46bd      	mov	sp, r7
 80113ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113f2:	4770      	bx	lr

080113f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80113f4:	b480      	push	{r7}
 80113f6:	b083      	sub	sp, #12
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80113fc:	bf00      	nop
 80113fe:	370c      	adds	r7, #12
 8011400:	46bd      	mov	sp, r7
 8011402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011406:	4770      	bx	lr

08011408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8011408:	b480      	push	{r7}
 801140a:	b083      	sub	sp, #12
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011410:	bf00      	nop
 8011412:	370c      	adds	r7, #12
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr

0801141c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801141c:	b480      	push	{r7}
 801141e:	b085      	sub	sp, #20
 8011420:	af00      	add	r7, sp, #0
 8011422:	6078      	str	r0, [r7, #4]
 8011424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	4a2a      	ldr	r2, [pc, #168]	; (80114d8 <TIM_Base_SetConfig+0xbc>)
 8011430:	4293      	cmp	r3, r2
 8011432:	d003      	beq.n	801143c <TIM_Base_SetConfig+0x20>
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801143a:	d108      	bne.n	801144e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011442:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	685b      	ldr	r3, [r3, #4]
 8011448:	68fa      	ldr	r2, [r7, #12]
 801144a:	4313      	orrs	r3, r2
 801144c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	4a21      	ldr	r2, [pc, #132]	; (80114d8 <TIM_Base_SetConfig+0xbc>)
 8011452:	4293      	cmp	r3, r2
 8011454:	d00b      	beq.n	801146e <TIM_Base_SetConfig+0x52>
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801145c:	d007      	beq.n	801146e <TIM_Base_SetConfig+0x52>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	4a1e      	ldr	r2, [pc, #120]	; (80114dc <TIM_Base_SetConfig+0xc0>)
 8011462:	4293      	cmp	r3, r2
 8011464:	d003      	beq.n	801146e <TIM_Base_SetConfig+0x52>
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	4a1d      	ldr	r2, [pc, #116]	; (80114e0 <TIM_Base_SetConfig+0xc4>)
 801146a:	4293      	cmp	r3, r2
 801146c:	d108      	bne.n	8011480 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011474:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011476:	683b      	ldr	r3, [r7, #0]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	68fa      	ldr	r2, [r7, #12]
 801147c:	4313      	orrs	r3, r2
 801147e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011486:	683b      	ldr	r3, [r7, #0]
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	4313      	orrs	r3, r2
 801148c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	68fa      	ldr	r2, [r7, #12]
 8011492:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	689a      	ldr	r2, [r3, #8]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	681a      	ldr	r2, [r3, #0]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	4a0c      	ldr	r2, [pc, #48]	; (80114d8 <TIM_Base_SetConfig+0xbc>)
 80114a8:	4293      	cmp	r3, r2
 80114aa:	d007      	beq.n	80114bc <TIM_Base_SetConfig+0xa0>
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	4a0b      	ldr	r2, [pc, #44]	; (80114dc <TIM_Base_SetConfig+0xc0>)
 80114b0:	4293      	cmp	r3, r2
 80114b2:	d003      	beq.n	80114bc <TIM_Base_SetConfig+0xa0>
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	4a0a      	ldr	r2, [pc, #40]	; (80114e0 <TIM_Base_SetConfig+0xc4>)
 80114b8:	4293      	cmp	r3, r2
 80114ba:	d103      	bne.n	80114c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	691a      	ldr	r2, [r3, #16]
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	2201      	movs	r2, #1
 80114c8:	615a      	str	r2, [r3, #20]
}
 80114ca:	bf00      	nop
 80114cc:	3714      	adds	r7, #20
 80114ce:	46bd      	mov	sp, r7
 80114d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d4:	4770      	bx	lr
 80114d6:	bf00      	nop
 80114d8:	40012c00 	.word	0x40012c00
 80114dc:	40014000 	.word	0x40014000
 80114e0:	40014400 	.word	0x40014400

080114e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80114e4:	b480      	push	{r7}
 80114e6:	b087      	sub	sp, #28
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	6078      	str	r0, [r7, #4]
 80114ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	f023 0201 	bic.w	r2, r3, #1
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6a1b      	ldr	r3, [r3, #32]
 80114fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	685b      	ldr	r3, [r3, #4]
 8011504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	699b      	ldr	r3, [r3, #24]
 801150a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f023 0303 	bic.w	r3, r3, #3
 801151e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	68fa      	ldr	r2, [r7, #12]
 8011526:	4313      	orrs	r3, r2
 8011528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801152a:	697b      	ldr	r3, [r7, #20]
 801152c:	f023 0302 	bic.w	r3, r3, #2
 8011530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8011532:	683b      	ldr	r3, [r7, #0]
 8011534:	689b      	ldr	r3, [r3, #8]
 8011536:	697a      	ldr	r2, [r7, #20]
 8011538:	4313      	orrs	r3, r2
 801153a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4a24      	ldr	r2, [pc, #144]	; (80115d0 <TIM_OC1_SetConfig+0xec>)
 8011540:	4293      	cmp	r3, r2
 8011542:	d007      	beq.n	8011554 <TIM_OC1_SetConfig+0x70>
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	4a23      	ldr	r2, [pc, #140]	; (80115d4 <TIM_OC1_SetConfig+0xf0>)
 8011548:	4293      	cmp	r3, r2
 801154a:	d003      	beq.n	8011554 <TIM_OC1_SetConfig+0x70>
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4a22      	ldr	r2, [pc, #136]	; (80115d8 <TIM_OC1_SetConfig+0xf4>)
 8011550:	4293      	cmp	r3, r2
 8011552:	d10c      	bne.n	801156e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	f023 0308 	bic.w	r3, r3, #8
 801155a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	697a      	ldr	r2, [r7, #20]
 8011562:	4313      	orrs	r3, r2
 8011564:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	f023 0304 	bic.w	r3, r3, #4
 801156c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	4a17      	ldr	r2, [pc, #92]	; (80115d0 <TIM_OC1_SetConfig+0xec>)
 8011572:	4293      	cmp	r3, r2
 8011574:	d007      	beq.n	8011586 <TIM_OC1_SetConfig+0xa2>
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	4a16      	ldr	r2, [pc, #88]	; (80115d4 <TIM_OC1_SetConfig+0xf0>)
 801157a:	4293      	cmp	r3, r2
 801157c:	d003      	beq.n	8011586 <TIM_OC1_SetConfig+0xa2>
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	4a15      	ldr	r2, [pc, #84]	; (80115d8 <TIM_OC1_SetConfig+0xf4>)
 8011582:	4293      	cmp	r3, r2
 8011584:	d111      	bne.n	80115aa <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801158c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801158e:	693b      	ldr	r3, [r7, #16]
 8011590:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011594:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	695b      	ldr	r3, [r3, #20]
 801159a:	693a      	ldr	r2, [r7, #16]
 801159c:	4313      	orrs	r3, r2
 801159e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	699b      	ldr	r3, [r3, #24]
 80115a4:	693a      	ldr	r2, [r7, #16]
 80115a6:	4313      	orrs	r3, r2
 80115a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	693a      	ldr	r2, [r7, #16]
 80115ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	68fa      	ldr	r2, [r7, #12]
 80115b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80115b6:	683b      	ldr	r3, [r7, #0]
 80115b8:	685a      	ldr	r2, [r3, #4]
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	697a      	ldr	r2, [r7, #20]
 80115c2:	621a      	str	r2, [r3, #32]
}
 80115c4:	bf00      	nop
 80115c6:	371c      	adds	r7, #28
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr
 80115d0:	40012c00 	.word	0x40012c00
 80115d4:	40014000 	.word	0x40014000
 80115d8:	40014400 	.word	0x40014400

080115dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80115dc:	b480      	push	{r7}
 80115de:	b087      	sub	sp, #28
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	6078      	str	r0, [r7, #4]
 80115e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	6a1b      	ldr	r3, [r3, #32]
 80115ea:	f023 0210 	bic.w	r2, r3, #16
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6a1b      	ldr	r3, [r3, #32]
 80115f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	685b      	ldr	r3, [r3, #4]
 80115fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	699b      	ldr	r3, [r3, #24]
 8011602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801160a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801160e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	021b      	lsls	r3, r3, #8
 801161e:	68fa      	ldr	r2, [r7, #12]
 8011620:	4313      	orrs	r3, r2
 8011622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	f023 0320 	bic.w	r3, r3, #32
 801162a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	689b      	ldr	r3, [r3, #8]
 8011630:	011b      	lsls	r3, r3, #4
 8011632:	697a      	ldr	r2, [r7, #20]
 8011634:	4313      	orrs	r3, r2
 8011636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	4a22      	ldr	r2, [pc, #136]	; (80116c4 <TIM_OC2_SetConfig+0xe8>)
 801163c:	4293      	cmp	r3, r2
 801163e:	d10d      	bne.n	801165c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8011648:	683b      	ldr	r3, [r7, #0]
 801164a:	68db      	ldr	r3, [r3, #12]
 801164c:	011b      	lsls	r3, r3, #4
 801164e:	697a      	ldr	r2, [r7, #20]
 8011650:	4313      	orrs	r3, r2
 8011652:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801165a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	4a19      	ldr	r2, [pc, #100]	; (80116c4 <TIM_OC2_SetConfig+0xe8>)
 8011660:	4293      	cmp	r3, r2
 8011662:	d007      	beq.n	8011674 <TIM_OC2_SetConfig+0x98>
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	4a18      	ldr	r2, [pc, #96]	; (80116c8 <TIM_OC2_SetConfig+0xec>)
 8011668:	4293      	cmp	r3, r2
 801166a:	d003      	beq.n	8011674 <TIM_OC2_SetConfig+0x98>
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	4a17      	ldr	r2, [pc, #92]	; (80116cc <TIM_OC2_SetConfig+0xf0>)
 8011670:	4293      	cmp	r3, r2
 8011672:	d113      	bne.n	801169c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8011674:	693b      	ldr	r3, [r7, #16]
 8011676:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801167a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801167c:	693b      	ldr	r3, [r7, #16]
 801167e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011682:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	695b      	ldr	r3, [r3, #20]
 8011688:	009b      	lsls	r3, r3, #2
 801168a:	693a      	ldr	r2, [r7, #16]
 801168c:	4313      	orrs	r3, r2
 801168e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	699b      	ldr	r3, [r3, #24]
 8011694:	009b      	lsls	r3, r3, #2
 8011696:	693a      	ldr	r2, [r7, #16]
 8011698:	4313      	orrs	r3, r2
 801169a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	693a      	ldr	r2, [r7, #16]
 80116a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	697a      	ldr	r2, [r7, #20]
 80116b4:	621a      	str	r2, [r3, #32]
}
 80116b6:	bf00      	nop
 80116b8:	371c      	adds	r7, #28
 80116ba:	46bd      	mov	sp, r7
 80116bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c0:	4770      	bx	lr
 80116c2:	bf00      	nop
 80116c4:	40012c00 	.word	0x40012c00
 80116c8:	40014000 	.word	0x40014000
 80116cc:	40014400 	.word	0x40014400

080116d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80116d0:	b480      	push	{r7}
 80116d2:	b087      	sub	sp, #28
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6a1b      	ldr	r3, [r3, #32]
 80116de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	6a1b      	ldr	r3, [r3, #32]
 80116ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	69db      	ldr	r3, [r3, #28]
 80116f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80116fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f023 0303 	bic.w	r3, r3, #3
 801170a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801170c:	683b      	ldr	r3, [r7, #0]
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	4313      	orrs	r3, r2
 8011714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801171c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	689b      	ldr	r3, [r3, #8]
 8011722:	021b      	lsls	r3, r3, #8
 8011724:	697a      	ldr	r2, [r7, #20]
 8011726:	4313      	orrs	r3, r2
 8011728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	4a21      	ldr	r2, [pc, #132]	; (80117b4 <TIM_OC3_SetConfig+0xe4>)
 801172e:	4293      	cmp	r3, r2
 8011730:	d10d      	bne.n	801174e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011738:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801173a:	683b      	ldr	r3, [r7, #0]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	021b      	lsls	r3, r3, #8
 8011740:	697a      	ldr	r2, [r7, #20]
 8011742:	4313      	orrs	r3, r2
 8011744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801174c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	4a18      	ldr	r2, [pc, #96]	; (80117b4 <TIM_OC3_SetConfig+0xe4>)
 8011752:	4293      	cmp	r3, r2
 8011754:	d007      	beq.n	8011766 <TIM_OC3_SetConfig+0x96>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	4a17      	ldr	r2, [pc, #92]	; (80117b8 <TIM_OC3_SetConfig+0xe8>)
 801175a:	4293      	cmp	r3, r2
 801175c:	d003      	beq.n	8011766 <TIM_OC3_SetConfig+0x96>
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	4a16      	ldr	r2, [pc, #88]	; (80117bc <TIM_OC3_SetConfig+0xec>)
 8011762:	4293      	cmp	r3, r2
 8011764:	d113      	bne.n	801178e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801176c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801176e:	693b      	ldr	r3, [r7, #16]
 8011770:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8011774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	695b      	ldr	r3, [r3, #20]
 801177a:	011b      	lsls	r3, r3, #4
 801177c:	693a      	ldr	r2, [r7, #16]
 801177e:	4313      	orrs	r3, r2
 8011780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8011782:	683b      	ldr	r3, [r7, #0]
 8011784:	699b      	ldr	r3, [r3, #24]
 8011786:	011b      	lsls	r3, r3, #4
 8011788:	693a      	ldr	r2, [r7, #16]
 801178a:	4313      	orrs	r3, r2
 801178c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	693a      	ldr	r2, [r7, #16]
 8011792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	68fa      	ldr	r2, [r7, #12]
 8011798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801179a:	683b      	ldr	r3, [r7, #0]
 801179c:	685a      	ldr	r2, [r3, #4]
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	697a      	ldr	r2, [r7, #20]
 80117a6:	621a      	str	r2, [r3, #32]
}
 80117a8:	bf00      	nop
 80117aa:	371c      	adds	r7, #28
 80117ac:	46bd      	mov	sp, r7
 80117ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117b2:	4770      	bx	lr
 80117b4:	40012c00 	.word	0x40012c00
 80117b8:	40014000 	.word	0x40014000
 80117bc:	40014400 	.word	0x40014400

080117c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b087      	sub	sp, #28
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	6078      	str	r0, [r7, #4]
 80117c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	6a1b      	ldr	r3, [r3, #32]
 80117ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	6a1b      	ldr	r3, [r3, #32]
 80117da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	685b      	ldr	r3, [r3, #4]
 80117e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	69db      	ldr	r3, [r3, #28]
 80117e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80117e8:	68fb      	ldr	r3, [r7, #12]
 80117ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80117ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80117fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80117fc:	683b      	ldr	r3, [r7, #0]
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	021b      	lsls	r3, r3, #8
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	4313      	orrs	r3, r2
 8011806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8011808:	693b      	ldr	r3, [r7, #16]
 801180a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801180e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8011810:	683b      	ldr	r3, [r7, #0]
 8011812:	689b      	ldr	r3, [r3, #8]
 8011814:	031b      	lsls	r3, r3, #12
 8011816:	693a      	ldr	r2, [r7, #16]
 8011818:	4313      	orrs	r3, r2
 801181a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	4a14      	ldr	r2, [pc, #80]	; (8011870 <TIM_OC4_SetConfig+0xb0>)
 8011820:	4293      	cmp	r3, r2
 8011822:	d007      	beq.n	8011834 <TIM_OC4_SetConfig+0x74>
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	4a13      	ldr	r2, [pc, #76]	; (8011874 <TIM_OC4_SetConfig+0xb4>)
 8011828:	4293      	cmp	r3, r2
 801182a:	d003      	beq.n	8011834 <TIM_OC4_SetConfig+0x74>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	4a12      	ldr	r2, [pc, #72]	; (8011878 <TIM_OC4_SetConfig+0xb8>)
 8011830:	4293      	cmp	r3, r2
 8011832:	d109      	bne.n	8011848 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801183a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801183c:	683b      	ldr	r3, [r7, #0]
 801183e:	695b      	ldr	r3, [r3, #20]
 8011840:	019b      	lsls	r3, r3, #6
 8011842:	697a      	ldr	r2, [r7, #20]
 8011844:	4313      	orrs	r3, r2
 8011846:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	697a      	ldr	r2, [r7, #20]
 801184c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	685a      	ldr	r2, [r3, #4]
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	693a      	ldr	r2, [r7, #16]
 8011860:	621a      	str	r2, [r3, #32]
}
 8011862:	bf00      	nop
 8011864:	371c      	adds	r7, #28
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
 801186e:	bf00      	nop
 8011870:	40012c00 	.word	0x40012c00
 8011874:	40014000 	.word	0x40014000
 8011878:	40014400 	.word	0x40014400

0801187c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801187c:	b480      	push	{r7}
 801187e:	b087      	sub	sp, #28
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	6a1b      	ldr	r3, [r3, #32]
 801188a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	6a1b      	ldr	r3, [r3, #32]
 8011896:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80118a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80118a4:	68fb      	ldr	r3, [r7, #12]
 80118a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80118ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80118b0:	683b      	ldr	r3, [r7, #0]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	68fa      	ldr	r2, [r7, #12]
 80118b6:	4313      	orrs	r3, r2
 80118b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80118ba:	693b      	ldr	r3, [r7, #16]
 80118bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80118c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	689b      	ldr	r3, [r3, #8]
 80118c6:	041b      	lsls	r3, r3, #16
 80118c8:	693a      	ldr	r2, [r7, #16]
 80118ca:	4313      	orrs	r3, r2
 80118cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	4a13      	ldr	r2, [pc, #76]	; (8011920 <TIM_OC5_SetConfig+0xa4>)
 80118d2:	4293      	cmp	r3, r2
 80118d4:	d007      	beq.n	80118e6 <TIM_OC5_SetConfig+0x6a>
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	4a12      	ldr	r2, [pc, #72]	; (8011924 <TIM_OC5_SetConfig+0xa8>)
 80118da:	4293      	cmp	r3, r2
 80118dc:	d003      	beq.n	80118e6 <TIM_OC5_SetConfig+0x6a>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	4a11      	ldr	r2, [pc, #68]	; (8011928 <TIM_OC5_SetConfig+0xac>)
 80118e2:	4293      	cmp	r3, r2
 80118e4:	d109      	bne.n	80118fa <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80118e6:	697b      	ldr	r3, [r7, #20]
 80118e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80118ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80118ee:	683b      	ldr	r3, [r7, #0]
 80118f0:	695b      	ldr	r3, [r3, #20]
 80118f2:	021b      	lsls	r3, r3, #8
 80118f4:	697a      	ldr	r2, [r7, #20]
 80118f6:	4313      	orrs	r3, r2
 80118f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	697a      	ldr	r2, [r7, #20]
 80118fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	68fa      	ldr	r2, [r7, #12]
 8011904:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8011906:	683b      	ldr	r3, [r7, #0]
 8011908:	685a      	ldr	r2, [r3, #4]
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	693a      	ldr	r2, [r7, #16]
 8011912:	621a      	str	r2, [r3, #32]
}
 8011914:	bf00      	nop
 8011916:	371c      	adds	r7, #28
 8011918:	46bd      	mov	sp, r7
 801191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191e:	4770      	bx	lr
 8011920:	40012c00 	.word	0x40012c00
 8011924:	40014000 	.word	0x40014000
 8011928:	40014400 	.word	0x40014400

0801192c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801192c:	b480      	push	{r7}
 801192e:	b087      	sub	sp, #28
 8011930:	af00      	add	r7, sp, #0
 8011932:	6078      	str	r0, [r7, #4]
 8011934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6a1b      	ldr	r3, [r3, #32]
 801193a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6a1b      	ldr	r3, [r3, #32]
 8011946:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801195a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801195e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	021b      	lsls	r3, r3, #8
 8011966:	68fa      	ldr	r2, [r7, #12]
 8011968:	4313      	orrs	r3, r2
 801196a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801196c:	693b      	ldr	r3, [r7, #16]
 801196e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011972:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8011974:	683b      	ldr	r3, [r7, #0]
 8011976:	689b      	ldr	r3, [r3, #8]
 8011978:	051b      	lsls	r3, r3, #20
 801197a:	693a      	ldr	r2, [r7, #16]
 801197c:	4313      	orrs	r3, r2
 801197e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	4a14      	ldr	r2, [pc, #80]	; (80119d4 <TIM_OC6_SetConfig+0xa8>)
 8011984:	4293      	cmp	r3, r2
 8011986:	d007      	beq.n	8011998 <TIM_OC6_SetConfig+0x6c>
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	4a13      	ldr	r2, [pc, #76]	; (80119d8 <TIM_OC6_SetConfig+0xac>)
 801198c:	4293      	cmp	r3, r2
 801198e:	d003      	beq.n	8011998 <TIM_OC6_SetConfig+0x6c>
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	4a12      	ldr	r2, [pc, #72]	; (80119dc <TIM_OC6_SetConfig+0xb0>)
 8011994:	4293      	cmp	r3, r2
 8011996:	d109      	bne.n	80119ac <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8011998:	697b      	ldr	r3, [r7, #20]
 801199a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801199e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80119a0:	683b      	ldr	r3, [r7, #0]
 80119a2:	695b      	ldr	r3, [r3, #20]
 80119a4:	029b      	lsls	r3, r3, #10
 80119a6:	697a      	ldr	r2, [r7, #20]
 80119a8:	4313      	orrs	r3, r2
 80119aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	697a      	ldr	r2, [r7, #20]
 80119b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	68fa      	ldr	r2, [r7, #12]
 80119b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80119b8:	683b      	ldr	r3, [r7, #0]
 80119ba:	685a      	ldr	r2, [r3, #4]
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	693a      	ldr	r2, [r7, #16]
 80119c4:	621a      	str	r2, [r3, #32]
}
 80119c6:	bf00      	nop
 80119c8:	371c      	adds	r7, #28
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr
 80119d2:	bf00      	nop
 80119d4:	40012c00 	.word	0x40012c00
 80119d8:	40014000 	.word	0x40014000
 80119dc:	40014400 	.word	0x40014400

080119e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80119e0:	b480      	push	{r7}
 80119e2:	b087      	sub	sp, #28
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	f003 031f 	and.w	r3, r3, #31
 80119f2:	2201      	movs	r2, #1
 80119f4:	fa02 f303 	lsl.w	r3, r2, r3
 80119f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	6a1a      	ldr	r2, [r3, #32]
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	43db      	mvns	r3, r3
 8011a02:	401a      	ands	r2, r3
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	6a1a      	ldr	r2, [r3, #32]
 8011a0c:	68bb      	ldr	r3, [r7, #8]
 8011a0e:	f003 031f 	and.w	r3, r3, #31
 8011a12:	6879      	ldr	r1, [r7, #4]
 8011a14:	fa01 f303 	lsl.w	r3, r1, r3
 8011a18:	431a      	orrs	r2, r3
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	621a      	str	r2, [r3, #32]
}
 8011a1e:	bf00      	nop
 8011a20:	371c      	adds	r7, #28
 8011a22:	46bd      	mov	sp, r7
 8011a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a28:	4770      	bx	lr
	...

08011a2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8011a2c:	b480      	push	{r7}
 8011a2e:	b085      	sub	sp, #20
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	6078      	str	r0, [r7, #4]
 8011a34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011a3c:	2b01      	cmp	r3, #1
 8011a3e:	d101      	bne.n	8011a44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8011a40:	2302      	movs	r3, #2
 8011a42:	e04f      	b.n	8011ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	2201      	movs	r2, #1
 8011a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	2202      	movs	r2, #2
 8011a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	681b      	ldr	r3, [r3, #0]
 8011a58:	685b      	ldr	r3, [r3, #4]
 8011a5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	689b      	ldr	r3, [r3, #8]
 8011a62:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	4a21      	ldr	r2, [pc, #132]	; (8011af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8011a6a:	4293      	cmp	r3, r2
 8011a6c:	d108      	bne.n	8011a80 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011a74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	4313      	orrs	r3, r2
 8011a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	68fa      	ldr	r2, [r7, #12]
 8011a8e:	4313      	orrs	r3, r2
 8011a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	68fa      	ldr	r2, [r7, #12]
 8011a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	4a14      	ldr	r2, [pc, #80]	; (8011af0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8011aa0:	4293      	cmp	r3, r2
 8011aa2:	d009      	beq.n	8011ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	681b      	ldr	r3, [r3, #0]
 8011aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011aac:	d004      	beq.n	8011ab8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	4a10      	ldr	r2, [pc, #64]	; (8011af4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8011ab4:	4293      	cmp	r3, r2
 8011ab6:	d10c      	bne.n	8011ad2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011ac0:	683b      	ldr	r3, [r7, #0]
 8011ac2:	689b      	ldr	r3, [r3, #8]
 8011ac4:	68ba      	ldr	r2, [r7, #8]
 8011ac6:	4313      	orrs	r3, r2
 8011ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	68ba      	ldr	r2, [r7, #8]
 8011ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	2201      	movs	r2, #1
 8011ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	3714      	adds	r7, #20
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr
 8011af0:	40012c00 	.word	0x40012c00
 8011af4:	40014000 	.word	0x40014000

08011af8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8011b02:	2300      	movs	r3, #0
 8011b04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8011b0c:	2b01      	cmp	r3, #1
 8011b0e:	d101      	bne.n	8011b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8011b10:	2302      	movs	r3, #2
 8011b12:	e060      	b.n	8011bd6 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	2201      	movs	r2, #1
 8011b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011b22:	683b      	ldr	r3, [r7, #0]
 8011b24:	68db      	ldr	r3, [r3, #12]
 8011b26:	4313      	orrs	r3, r2
 8011b28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	689b      	ldr	r3, [r3, #8]
 8011b34:	4313      	orrs	r3, r2
 8011b36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	685b      	ldr	r3, [r3, #4]
 8011b42:	4313      	orrs	r3, r2
 8011b44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	4313      	orrs	r3, r2
 8011b52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	691b      	ldr	r3, [r3, #16]
 8011b5e:	4313      	orrs	r3, r2
 8011b60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8011b68:	683b      	ldr	r3, [r7, #0]
 8011b6a:	695b      	ldr	r3, [r3, #20]
 8011b6c:	4313      	orrs	r3, r2
 8011b6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b7a:	4313      	orrs	r3, r2
 8011b7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8011b84:	683b      	ldr	r3, [r7, #0]
 8011b86:	699b      	ldr	r3, [r3, #24]
 8011b88:	041b      	lsls	r3, r3, #16
 8011b8a:	4313      	orrs	r3, r2
 8011b8c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a14      	ldr	r2, [pc, #80]	; (8011be4 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d115      	bne.n	8011bc4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ba2:	051b      	lsls	r3, r3, #20
 8011ba4:	4313      	orrs	r3, r2
 8011ba6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8011bae:	683b      	ldr	r3, [r7, #0]
 8011bb0:	69db      	ldr	r3, [r3, #28]
 8011bb2:	4313      	orrs	r3, r2
 8011bb4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	6a1b      	ldr	r3, [r3, #32]
 8011bc0:	4313      	orrs	r3, r2
 8011bc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	68fa      	ldr	r2, [r7, #12]
 8011bca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8011bd4:	2300      	movs	r3, #0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3714      	adds	r7, #20
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	40012c00 	.word	0x40012c00

08011be8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b083      	sub	sp, #12
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011bf0:	bf00      	nop
 8011bf2:	370c      	adds	r7, #12
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bfa:	4770      	bx	lr

08011bfc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011bfc:	b480      	push	{r7}
 8011bfe:	b083      	sub	sp, #12
 8011c00:	af00      	add	r7, sp, #0
 8011c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011c04:	bf00      	nop
 8011c06:	370c      	adds	r7, #12
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0e:	4770      	bx	lr

08011c10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011c10:	b480      	push	{r7}
 8011c12:	b083      	sub	sp, #12
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8011c18:	bf00      	nop
 8011c1a:	370c      	adds	r7, #12
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c22:	4770      	bx	lr

08011c24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011c32:	2301      	movs	r3, #1
 8011c34:	e040      	b.n	8011cb8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d106      	bne.n	8011c4c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	2200      	movs	r2, #0
 8011c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011c46:	6878      	ldr	r0, [r7, #4]
 8011c48:	f7f9 fe46 	bl	800b8d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	2224      	movs	r2, #36	; 0x24
 8011c50:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	681a      	ldr	r2, [r3, #0]
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f022 0201 	bic.w	r2, r2, #1
 8011c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011c62:	6878      	ldr	r0, [r7, #4]
 8011c64:	f000 fb8c 	bl	8012380 <UART_SetConfig>
 8011c68:	4603      	mov	r3, r0
 8011c6a:	2b01      	cmp	r3, #1
 8011c6c:	d101      	bne.n	8011c72 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8011c6e:	2301      	movs	r3, #1
 8011c70:	e022      	b.n	8011cb8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d002      	beq.n	8011c80 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f000 fdb4 	bl	80127e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	685a      	ldr	r2, [r3, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	689a      	ldr	r2, [r3, #8]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8011c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	681a      	ldr	r2, [r3, #0]
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	f042 0201 	orr.w	r2, r2, #1
 8011cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011cb0:	6878      	ldr	r0, [r7, #4]
 8011cb2:	f000 fe3b 	bl	801292c <UART_CheckIdleState>
 8011cb6:	4603      	mov	r3, r0
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3708      	adds	r7, #8
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08a      	sub	sp, #40	; 0x28
 8011cc4:	af02      	add	r7, sp, #8
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	603b      	str	r3, [r7, #0]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011cd4:	2b20      	cmp	r3, #32
 8011cd6:	f040 8082 	bne.w	8011dde <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8011cda:	68bb      	ldr	r3, [r7, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d002      	beq.n	8011ce6 <HAL_UART_Transmit+0x26>
 8011ce0:	88fb      	ldrh	r3, [r7, #6]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d101      	bne.n	8011cea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e07a      	b.n	8011de0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011cf0:	2b01      	cmp	r3, #1
 8011cf2:	d101      	bne.n	8011cf8 <HAL_UART_Transmit+0x38>
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	e073      	b.n	8011de0 <HAL_UART_Transmit+0x120>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	2200      	movs	r2, #0
 8011d04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2221      	movs	r2, #33	; 0x21
 8011d0c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8011d0e:	f7f9 ffcf 	bl	800bcb0 <HAL_GetTick>
 8011d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8011d14:	68fb      	ldr	r3, [r7, #12]
 8011d16:	88fa      	ldrh	r2, [r7, #6]
 8011d18:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	88fa      	ldrh	r2, [r7, #6]
 8011d20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	689b      	ldr	r3, [r3, #8]
 8011d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011d2c:	d108      	bne.n	8011d40 <HAL_UART_Transmit+0x80>
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	691b      	ldr	r3, [r3, #16]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d104      	bne.n	8011d40 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	61bb      	str	r3, [r7, #24]
 8011d3e:	e003      	b.n	8011d48 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011d44:	2300      	movs	r3, #0
 8011d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8011d50:	e02d      	b.n	8011dae <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	9300      	str	r3, [sp, #0]
 8011d56:	697b      	ldr	r3, [r7, #20]
 8011d58:	2200      	movs	r2, #0
 8011d5a:	2180      	movs	r1, #128	; 0x80
 8011d5c:	68f8      	ldr	r0, [r7, #12]
 8011d5e:	f000 fe2e 	bl	80129be <UART_WaitOnFlagUntilTimeout>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d001      	beq.n	8011d6c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8011d68:	2303      	movs	r3, #3
 8011d6a:	e039      	b.n	8011de0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d10b      	bne.n	8011d8a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	881a      	ldrh	r2, [r3, #0]
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011d7e:	b292      	uxth	r2, r2
 8011d80:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	3302      	adds	r3, #2
 8011d86:	61bb      	str	r3, [r7, #24]
 8011d88:	e008      	b.n	8011d9c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8011d8a:	69fb      	ldr	r3, [r7, #28]
 8011d8c:	781a      	ldrb	r2, [r3, #0]
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	b292      	uxth	r2, r2
 8011d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011d96:	69fb      	ldr	r3, [r7, #28]
 8011d98:	3301      	adds	r3, #1
 8011d9a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011da2:	b29b      	uxth	r3, r3
 8011da4:	3b01      	subs	r3, #1
 8011da6:	b29a      	uxth	r2, r3
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011db4:	b29b      	uxth	r3, r3
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1cb      	bne.n	8011d52 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	9300      	str	r3, [sp, #0]
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	2140      	movs	r1, #64	; 0x40
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f000 fdfa 	bl	80129be <UART_WaitOnFlagUntilTimeout>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d001      	beq.n	8011dd4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8011dd0:	2303      	movs	r3, #3
 8011dd2:	e005      	b.n	8011de0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	2220      	movs	r2, #32
 8011dd8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8011dda:	2300      	movs	r3, #0
 8011ddc:	e000      	b.n	8011de0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8011dde:	2302      	movs	r3, #2
  }
}
 8011de0:	4618      	mov	r0, r3
 8011de2:	3720      	adds	r7, #32
 8011de4:	46bd      	mov	sp, r7
 8011de6:	bd80      	pop	{r7, pc}

08011de8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011de8:	b480      	push	{r7}
 8011dea:	b085      	sub	sp, #20
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	4613      	mov	r3, r2
 8011df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dfa:	2b20      	cmp	r3, #32
 8011dfc:	d145      	bne.n	8011e8a <HAL_UART_Transmit_IT+0xa2>
  {
    if ((pData == NULL) || (Size == 0U))
 8011dfe:	68bb      	ldr	r3, [r7, #8]
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d002      	beq.n	8011e0a <HAL_UART_Transmit_IT+0x22>
 8011e04:	88fb      	ldrh	r3, [r7, #6]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d101      	bne.n	8011e0e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	e03e      	b.n	8011e8c <HAL_UART_Transmit_IT+0xa4>
    }

    __HAL_LOCK(huart);
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d101      	bne.n	8011e1c <HAL_UART_Transmit_IT+0x34>
 8011e18:	2302      	movs	r3, #2
 8011e1a:	e037      	b.n	8011e8c <HAL_UART_Transmit_IT+0xa4>
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	68ba      	ldr	r2, [r7, #8]
 8011e28:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	88fa      	ldrh	r2, [r7, #6]
 8011e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	88fa      	ldrh	r2, [r7, #6]
 8011e36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	2200      	movs	r2, #0
 8011e3e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2200      	movs	r2, #0
 8011e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011e48:	68fb      	ldr	r3, [r7, #12]
 8011e4a:	2221      	movs	r2, #33	; 0x21
 8011e4c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	689b      	ldr	r3, [r3, #8]
 8011e52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011e56:	d107      	bne.n	8011e68 <HAL_UART_Transmit_IT+0x80>
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	691b      	ldr	r3, [r3, #16]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d103      	bne.n	8011e68 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4a0d      	ldr	r2, [pc, #52]	; (8011e98 <HAL_UART_Transmit_IT+0xb0>)
 8011e64:	669a      	str	r2, [r3, #104]	; 0x68
 8011e66:	e002      	b.n	8011e6e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8011e68:	68fb      	ldr	r3, [r7, #12]
 8011e6a:	4a0c      	ldr	r2, [pc, #48]	; (8011e9c <HAL_UART_Transmit_IT+0xb4>)
 8011e6c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2200      	movs	r2, #0
 8011e72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8011e76:	68fb      	ldr	r3, [r7, #12]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	681a      	ldr	r2, [r3, #0]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8011e84:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8011e86:	2300      	movs	r3, #0
 8011e88:	e000      	b.n	8011e8c <HAL_UART_Transmit_IT+0xa4>
  }
  else
  {
    return HAL_BUSY;
 8011e8a:	2302      	movs	r3, #2
  }
}
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	3714      	adds	r7, #20
 8011e90:	46bd      	mov	sp, r7
 8011e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e96:	4770      	bx	lr
 8011e98:	08012e05 	.word	0x08012e05
 8011e9c:	08012d91 	.word	0x08012d91

08011ea0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	60f8      	str	r0, [r7, #12]
 8011ea8:	60b9      	str	r1, [r7, #8]
 8011eaa:	4613      	mov	r3, r2
 8011eac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011eb2:	2b20      	cmp	r3, #32
 8011eb4:	d131      	bne.n	8011f1a <HAL_UART_Receive_DMA+0x7a>
  {
    if ((pData == NULL) || (Size == 0U))
 8011eb6:	68bb      	ldr	r3, [r7, #8]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d002      	beq.n	8011ec2 <HAL_UART_Receive_DMA+0x22>
 8011ebc:	88fb      	ldrh	r3, [r7, #6]
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d101      	bne.n	8011ec6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 8011ec2:	2301      	movs	r3, #1
 8011ec4:	e02a      	b.n	8011f1c <HAL_UART_Receive_DMA+0x7c>
    }

    __HAL_LOCK(huart);
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d101      	bne.n	8011ed4 <HAL_UART_Receive_DMA+0x34>
 8011ed0:	2302      	movs	r3, #2
 8011ed2:	e023      	b.n	8011f1c <HAL_UART_Receive_DMA+0x7c>
 8011ed4:	68fb      	ldr	r3, [r7, #12]
 8011ed6:	2201      	movs	r2, #1
 8011ed8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2200      	movs	r2, #0
 8011ee0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	4a0f      	ldr	r2, [pc, #60]	; (8011f24 <HAL_UART_Receive_DMA+0x84>)
 8011ee8:	4293      	cmp	r3, r2
 8011eea:	d00e      	beq.n	8011f0a <HAL_UART_Receive_DMA+0x6a>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	685b      	ldr	r3, [r3, #4]
 8011ef2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d007      	beq.n	8011f0a <HAL_UART_Receive_DMA+0x6a>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	681a      	ldr	r2, [r3, #0]
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8011f08:	601a      	str	r2, [r3, #0]
      }
    }

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8011f0a:	88fb      	ldrh	r3, [r7, #6]
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	68b9      	ldr	r1, [r7, #8]
 8011f10:	68f8      	ldr	r0, [r7, #12]
 8011f12:	f000 fdd1 	bl	8012ab8 <UART_Start_Receive_DMA>
 8011f16:	4603      	mov	r3, r0
 8011f18:	e000      	b.n	8011f1c <HAL_UART_Receive_DMA+0x7c>
  }
  else
  {
    return HAL_BUSY;
 8011f1a:	2302      	movs	r3, #2
  }
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}
 8011f24:	40008000 	.word	0x40008000

08011f28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011f28:	b580      	push	{r7, lr}
 8011f2a:	b088      	sub	sp, #32
 8011f2c:	af00      	add	r7, sp, #0
 8011f2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	69db      	ldr	r3, [r3, #28]
 8011f36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	681b      	ldr	r3, [r3, #0]
 8011f3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	689b      	ldr	r3, [r3, #8]
 8011f46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011f48:	69fa      	ldr	r2, [r7, #28]
 8011f4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8011f4e:	4013      	ands	r3, r2
 8011f50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d113      	bne.n	8011f80 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8011f58:	69fb      	ldr	r3, [r7, #28]
 8011f5a:	f003 0320 	and.w	r3, r3, #32
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00e      	beq.n	8011f80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011f62:	69bb      	ldr	r3, [r7, #24]
 8011f64:	f003 0320 	and.w	r3, r3, #32
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d009      	beq.n	8011f80 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	f000 81ce 	beq.w	8012312 <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011f7a:	6878      	ldr	r0, [r7, #4]
 8011f7c:	4798      	blx	r3
      }
      return;
 8011f7e:	e1c8      	b.n	8012312 <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8011f80:	693b      	ldr	r3, [r7, #16]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	f000 80e3 	beq.w	801214e <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8011f88:	697b      	ldr	r3, [r7, #20]
 8011f8a:	f003 0301 	and.w	r3, r3, #1
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d105      	bne.n	8011f9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8011f92:	69ba      	ldr	r2, [r7, #24]
 8011f94:	4ba6      	ldr	r3, [pc, #664]	; (8012230 <HAL_UART_IRQHandler+0x308>)
 8011f96:	4013      	ands	r3, r2
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	f000 80d8 	beq.w	801214e <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	f003 0301 	and.w	r3, r3, #1
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d010      	beq.n	8011fca <HAL_UART_IRQHandler+0xa2>
 8011fa8:	69bb      	ldr	r3, [r7, #24]
 8011faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d00b      	beq.n	8011fca <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011fc0:	f043 0201 	orr.w	r2, r3, #1
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011fca:	69fb      	ldr	r3, [r7, #28]
 8011fcc:	f003 0302 	and.w	r3, r3, #2
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d010      	beq.n	8011ff6 <HAL_UART_IRQHandler+0xce>
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	f003 0301 	and.w	r3, r3, #1
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d00b      	beq.n	8011ff6 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	2202      	movs	r2, #2
 8011fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011fec:	f043 0204 	orr.w	r2, r3, #4
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ff6:	69fb      	ldr	r3, [r7, #28]
 8011ff8:	f003 0304 	and.w	r3, r3, #4
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d010      	beq.n	8012022 <HAL_UART_IRQHandler+0xfa>
 8012000:	697b      	ldr	r3, [r7, #20]
 8012002:	f003 0301 	and.w	r3, r3, #1
 8012006:	2b00      	cmp	r3, #0
 8012008:	d00b      	beq.n	8012022 <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	2204      	movs	r2, #4
 8012010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012018:	f043 0202 	orr.w	r2, r3, #2
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8012022:	69fb      	ldr	r3, [r7, #28]
 8012024:	f003 0308 	and.w	r3, r3, #8
 8012028:	2b00      	cmp	r3, #0
 801202a:	d015      	beq.n	8012058 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801202c:	69bb      	ldr	r3, [r7, #24]
 801202e:	f003 0320 	and.w	r3, r3, #32
 8012032:	2b00      	cmp	r3, #0
 8012034:	d104      	bne.n	8012040 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8012036:	697b      	ldr	r3, [r7, #20]
 8012038:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801203c:	2b00      	cmp	r3, #0
 801203e:	d00b      	beq.n	8012058 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	2208      	movs	r2, #8
 8012046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801204e:	f043 0208 	orr.w	r2, r3, #8
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012058:	69fb      	ldr	r3, [r7, #28]
 801205a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801205e:	2b00      	cmp	r3, #0
 8012060:	d011      	beq.n	8012086 <HAL_UART_IRQHandler+0x15e>
 8012062:	69bb      	ldr	r3, [r7, #24]
 8012064:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00c      	beq.n	8012086 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012074:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801207c:	f043 0220 	orr.w	r2, r3, #32
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801208c:	2b00      	cmp	r3, #0
 801208e:	f000 8142 	beq.w	8012316 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8012092:	69fb      	ldr	r3, [r7, #28]
 8012094:	f003 0320 	and.w	r3, r3, #32
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00c      	beq.n	80120b6 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801209c:	69bb      	ldr	r3, [r7, #24]
 801209e:	f003 0320 	and.w	r3, r3, #32
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d007      	beq.n	80120b6 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d003      	beq.n	80120b6 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80120bc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120c8:	2b40      	cmp	r3, #64	; 0x40
 80120ca:	d004      	beq.n	80120d6 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d031      	beq.n	801213a <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fd6f 	bl	8012bba <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	681b      	ldr	r3, [r3, #0]
 80120e0:	689b      	ldr	r3, [r3, #8]
 80120e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80120e6:	2b40      	cmp	r3, #64	; 0x40
 80120e8:	d123      	bne.n	8012132 <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	689a      	ldr	r2, [r3, #8]
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80120f8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d013      	beq.n	801212a <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012106:	4a4b      	ldr	r2, [pc, #300]	; (8012234 <HAL_UART_IRQHandler+0x30c>)
 8012108:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801210e:	4618      	mov	r0, r3
 8012110:	f7fa f866 	bl	800c1e0 <HAL_DMA_Abort_IT>
 8012114:	4603      	mov	r3, r0
 8012116:	2b00      	cmp	r3, #0
 8012118:	d017      	beq.n	801214a <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012120:	687a      	ldr	r2, [r7, #4]
 8012122:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8012124:	4610      	mov	r0, r2
 8012126:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012128:	e00f      	b.n	801214a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 f912 	bl	8012354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012130:	e00b      	b.n	801214a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 f90e 	bl	8012354 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012138:	e007      	b.n	801214a <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801213a:	6878      	ldr	r0, [r7, #4]
 801213c:	f000 f90a 	bl	8012354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	2200      	movs	r2, #0
 8012144:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8012148:	e0e5      	b.n	8012316 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801214a:	bf00      	nop
    return;
 801214c:	e0e3      	b.n	8012316 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012152:	2b01      	cmp	r3, #1
 8012154:	f040 80a9 	bne.w	80122aa <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	f003 0310 	and.w	r3, r3, #16
 801215e:	2b00      	cmp	r3, #0
 8012160:	f000 80a3 	beq.w	80122aa <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	f003 0310 	and.w	r3, r3, #16
 801216a:	2b00      	cmp	r3, #0
 801216c:	f000 809d 	beq.w	80122aa <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2210      	movs	r2, #16
 8012176:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	689b      	ldr	r3, [r3, #8]
 801217e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012182:	2b40      	cmp	r3, #64	; 0x40
 8012184:	d158      	bne.n	8012238 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	685b      	ldr	r3, [r3, #4]
 801218e:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 8012190:	893b      	ldrh	r3, [r7, #8]
 8012192:	2b00      	cmp	r3, #0
 8012194:	f000 80c1 	beq.w	801231a <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801219e:	893a      	ldrh	r2, [r7, #8]
 80121a0:	429a      	cmp	r2, r3
 80121a2:	f080 80ba 	bcs.w	801231a <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	893a      	ldrh	r2, [r7, #8]
 80121aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	f003 0320 	and.w	r3, r3, #32
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d12a      	bne.n	8012214 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	681a      	ldr	r2, [r3, #0]
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80121cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	689a      	ldr	r2, [r3, #8]
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	f022 0201 	bic.w	r2, r2, #1
 80121dc:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	689a      	ldr	r2, [r3, #8]
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80121ec:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2220      	movs	r2, #32
 80121f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	2200      	movs	r2, #0
 80121f8:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f022 0210 	bic.w	r2, r2, #16
 8012208:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801220e:	4618      	mov	r0, r3
 8012210:	f7f9 ffa8 	bl	800c164 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012220:	b29b      	uxth	r3, r3
 8012222:	1ad3      	subs	r3, r2, r3
 8012224:	b29b      	uxth	r3, r3
 8012226:	4619      	mov	r1, r3
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f000 f89d 	bl	8012368 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 801222e:	e074      	b.n	801231a <HAL_UART_IRQHandler+0x3f2>
 8012230:	04000120 	.word	0x04000120
 8012234:	08012d65 	.word	0x08012d65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012244:	b29b      	uxth	r3, r3
 8012246:	1ad3      	subs	r3, r2, r3
 8012248:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012250:	b29b      	uxth	r3, r3
 8012252:	2b00      	cmp	r3, #0
 8012254:	d063      	beq.n	801231e <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8012256:	897b      	ldrh	r3, [r7, #10]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d060      	beq.n	801231e <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	681a      	ldr	r2, [r3, #0]
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801226a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	689a      	ldr	r2, [r3, #8]
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	f022 0201 	bic.w	r2, r2, #1
 801227a:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	2220      	movs	r2, #32
 8012280:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	2200      	movs	r2, #0
 8012286:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	2200      	movs	r2, #0
 801228c:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	681a      	ldr	r2, [r3, #0]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	f022 0210 	bic.w	r2, r2, #16
 801229c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801229e:	897b      	ldrh	r3, [r7, #10]
 80122a0:	4619      	mov	r1, r3
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f000 f860 	bl	8012368 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80122a8:	e039      	b.n	801231e <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80122aa:	69fb      	ldr	r3, [r7, #28]
 80122ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d00d      	beq.n	80122d0 <HAL_UART_IRQHandler+0x3a8>
 80122b4:	697b      	ldr	r3, [r7, #20]
 80122b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d008      	beq.n	80122d0 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80122c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80122c8:	6878      	ldr	r0, [r7, #4]
 80122ca:	f000 fdf2 	bl	8012eb2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80122ce:	e029      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80122d0:	69fb      	ldr	r3, [r7, #28]
 80122d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00d      	beq.n	80122f6 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80122da:	69bb      	ldr	r3, [r7, #24]
 80122dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d008      	beq.n	80122f6 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80122e4:	687b      	ldr	r3, [r7, #4]
 80122e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122e8:	2b00      	cmp	r3, #0
 80122ea:	d01a      	beq.n	8012322 <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	4798      	blx	r3
    }
    return;
 80122f4:	e015      	b.n	8012322 <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80122f6:	69fb      	ldr	r3, [r7, #28]
 80122f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d011      	beq.n	8012324 <HAL_UART_IRQHandler+0x3fc>
 8012300:	69bb      	ldr	r3, [r7, #24]
 8012302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012306:	2b00      	cmp	r3, #0
 8012308:	d00c      	beq.n	8012324 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 801230a:	6878      	ldr	r0, [r7, #4]
 801230c:	f000 fdb8 	bl	8012e80 <UART_EndTransmit_IT>
    return;
 8012310:	e008      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
      return;
 8012312:	bf00      	nop
 8012314:	e006      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
    return;
 8012316:	bf00      	nop
 8012318:	e004      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
      return;
 801231a:	bf00      	nop
 801231c:	e002      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
      return;
 801231e:	bf00      	nop
 8012320:	e000      	b.n	8012324 <HAL_UART_IRQHandler+0x3fc>
    return;
 8012322:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8012324:	3720      	adds	r7, #32
 8012326:	46bd      	mov	sp, r7
 8012328:	bd80      	pop	{r7, pc}
 801232a:	bf00      	nop

0801232c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801232c:	b480      	push	{r7}
 801232e:	b083      	sub	sp, #12
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8012334:	bf00      	nop
 8012336:	370c      	adds	r7, #12
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8012340:	b480      	push	{r7}
 8012342:	b083      	sub	sp, #12
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8012348:	bf00      	nop
 801234a:	370c      	adds	r7, #12
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012354:	b480      	push	{r7}
 8012356:	b083      	sub	sp, #12
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801235c:	bf00      	nop
 801235e:	370c      	adds	r7, #12
 8012360:	46bd      	mov	sp, r7
 8012362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012366:	4770      	bx	lr

08012368 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8012368:	b480      	push	{r7}
 801236a:	b083      	sub	sp, #12
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	460b      	mov	r3, r1
 8012372:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8012374:	bf00      	nop
 8012376:	370c      	adds	r7, #12
 8012378:	46bd      	mov	sp, r7
 801237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237e:	4770      	bx	lr

08012380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012380:	b5b0      	push	{r4, r5, r7, lr}
 8012382:	b088      	sub	sp, #32
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012388:	2300      	movs	r3, #0
 801238a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	689a      	ldr	r2, [r3, #8]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	691b      	ldr	r3, [r3, #16]
 8012394:	431a      	orrs	r2, r3
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	695b      	ldr	r3, [r3, #20]
 801239a:	431a      	orrs	r2, r3
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	69db      	ldr	r3, [r3, #28]
 80123a0:	4313      	orrs	r3, r2
 80123a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681a      	ldr	r2, [r3, #0]
 80123aa:	4baa      	ldr	r3, [pc, #680]	; (8012654 <UART_SetConfig+0x2d4>)
 80123ac:	4013      	ands	r3, r2
 80123ae:	687a      	ldr	r2, [r7, #4]
 80123b0:	6812      	ldr	r2, [r2, #0]
 80123b2:	69f9      	ldr	r1, [r7, #28]
 80123b4:	430b      	orrs	r3, r1
 80123b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	68da      	ldr	r2, [r3, #12]
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	430a      	orrs	r2, r1
 80123cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	699b      	ldr	r3, [r3, #24]
 80123d2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	4a9f      	ldr	r2, [pc, #636]	; (8012658 <UART_SetConfig+0x2d8>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d004      	beq.n	80123e8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6a1b      	ldr	r3, [r3, #32]
 80123e2:	69fa      	ldr	r2, [r7, #28]
 80123e4:	4313      	orrs	r3, r2
 80123e6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	689b      	ldr	r3, [r3, #8]
 80123ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	69fa      	ldr	r2, [r7, #28]
 80123f8:	430a      	orrs	r2, r1
 80123fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	4a96      	ldr	r2, [pc, #600]	; (801265c <UART_SetConfig+0x2dc>)
 8012402:	4293      	cmp	r3, r2
 8012404:	d121      	bne.n	801244a <UART_SetConfig+0xca>
 8012406:	4b96      	ldr	r3, [pc, #600]	; (8012660 <UART_SetConfig+0x2e0>)
 8012408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801240c:	f003 0303 	and.w	r3, r3, #3
 8012410:	2b03      	cmp	r3, #3
 8012412:	d817      	bhi.n	8012444 <UART_SetConfig+0xc4>
 8012414:	a201      	add	r2, pc, #4	; (adr r2, 801241c <UART_SetConfig+0x9c>)
 8012416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801241a:	bf00      	nop
 801241c:	0801242d 	.word	0x0801242d
 8012420:	08012439 	.word	0x08012439
 8012424:	08012433 	.word	0x08012433
 8012428:	0801243f 	.word	0x0801243f
 801242c:	2301      	movs	r3, #1
 801242e:	76fb      	strb	r3, [r7, #27]
 8012430:	e096      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012432:	2302      	movs	r3, #2
 8012434:	76fb      	strb	r3, [r7, #27]
 8012436:	e093      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012438:	2304      	movs	r3, #4
 801243a:	76fb      	strb	r3, [r7, #27]
 801243c:	e090      	b.n	8012560 <UART_SetConfig+0x1e0>
 801243e:	2308      	movs	r3, #8
 8012440:	76fb      	strb	r3, [r7, #27]
 8012442:	e08d      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012444:	2310      	movs	r3, #16
 8012446:	76fb      	strb	r3, [r7, #27]
 8012448:	e08a      	b.n	8012560 <UART_SetConfig+0x1e0>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	4a85      	ldr	r2, [pc, #532]	; (8012664 <UART_SetConfig+0x2e4>)
 8012450:	4293      	cmp	r3, r2
 8012452:	d132      	bne.n	80124ba <UART_SetConfig+0x13a>
 8012454:	4b82      	ldr	r3, [pc, #520]	; (8012660 <UART_SetConfig+0x2e0>)
 8012456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801245a:	f003 030c 	and.w	r3, r3, #12
 801245e:	2b0c      	cmp	r3, #12
 8012460:	d828      	bhi.n	80124b4 <UART_SetConfig+0x134>
 8012462:	a201      	add	r2, pc, #4	; (adr r2, 8012468 <UART_SetConfig+0xe8>)
 8012464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012468:	0801249d 	.word	0x0801249d
 801246c:	080124b5 	.word	0x080124b5
 8012470:	080124b5 	.word	0x080124b5
 8012474:	080124b5 	.word	0x080124b5
 8012478:	080124a9 	.word	0x080124a9
 801247c:	080124b5 	.word	0x080124b5
 8012480:	080124b5 	.word	0x080124b5
 8012484:	080124b5 	.word	0x080124b5
 8012488:	080124a3 	.word	0x080124a3
 801248c:	080124b5 	.word	0x080124b5
 8012490:	080124b5 	.word	0x080124b5
 8012494:	080124b5 	.word	0x080124b5
 8012498:	080124af 	.word	0x080124af
 801249c:	2300      	movs	r3, #0
 801249e:	76fb      	strb	r3, [r7, #27]
 80124a0:	e05e      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124a2:	2302      	movs	r3, #2
 80124a4:	76fb      	strb	r3, [r7, #27]
 80124a6:	e05b      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124a8:	2304      	movs	r3, #4
 80124aa:	76fb      	strb	r3, [r7, #27]
 80124ac:	e058      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124ae:	2308      	movs	r3, #8
 80124b0:	76fb      	strb	r3, [r7, #27]
 80124b2:	e055      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124b4:	2310      	movs	r3, #16
 80124b6:	76fb      	strb	r3, [r7, #27]
 80124b8:	e052      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	4a6a      	ldr	r2, [pc, #424]	; (8012668 <UART_SetConfig+0x2e8>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d120      	bne.n	8012506 <UART_SetConfig+0x186>
 80124c4:	4b66      	ldr	r3, [pc, #408]	; (8012660 <UART_SetConfig+0x2e0>)
 80124c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80124ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80124ce:	2b30      	cmp	r3, #48	; 0x30
 80124d0:	d013      	beq.n	80124fa <UART_SetConfig+0x17a>
 80124d2:	2b30      	cmp	r3, #48	; 0x30
 80124d4:	d814      	bhi.n	8012500 <UART_SetConfig+0x180>
 80124d6:	2b20      	cmp	r3, #32
 80124d8:	d009      	beq.n	80124ee <UART_SetConfig+0x16e>
 80124da:	2b20      	cmp	r3, #32
 80124dc:	d810      	bhi.n	8012500 <UART_SetConfig+0x180>
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d002      	beq.n	80124e8 <UART_SetConfig+0x168>
 80124e2:	2b10      	cmp	r3, #16
 80124e4:	d006      	beq.n	80124f4 <UART_SetConfig+0x174>
 80124e6:	e00b      	b.n	8012500 <UART_SetConfig+0x180>
 80124e8:	2300      	movs	r3, #0
 80124ea:	76fb      	strb	r3, [r7, #27]
 80124ec:	e038      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124ee:	2302      	movs	r3, #2
 80124f0:	76fb      	strb	r3, [r7, #27]
 80124f2:	e035      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124f4:	2304      	movs	r3, #4
 80124f6:	76fb      	strb	r3, [r7, #27]
 80124f8:	e032      	b.n	8012560 <UART_SetConfig+0x1e0>
 80124fa:	2308      	movs	r3, #8
 80124fc:	76fb      	strb	r3, [r7, #27]
 80124fe:	e02f      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012500:	2310      	movs	r3, #16
 8012502:	76fb      	strb	r3, [r7, #27]
 8012504:	e02c      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	4a53      	ldr	r2, [pc, #332]	; (8012658 <UART_SetConfig+0x2d8>)
 801250c:	4293      	cmp	r3, r2
 801250e:	d125      	bne.n	801255c <UART_SetConfig+0x1dc>
 8012510:	4b53      	ldr	r3, [pc, #332]	; (8012660 <UART_SetConfig+0x2e0>)
 8012512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012516:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801251a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801251e:	d017      	beq.n	8012550 <UART_SetConfig+0x1d0>
 8012520:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012524:	d817      	bhi.n	8012556 <UART_SetConfig+0x1d6>
 8012526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801252a:	d00b      	beq.n	8012544 <UART_SetConfig+0x1c4>
 801252c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012530:	d811      	bhi.n	8012556 <UART_SetConfig+0x1d6>
 8012532:	2b00      	cmp	r3, #0
 8012534:	d003      	beq.n	801253e <UART_SetConfig+0x1be>
 8012536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801253a:	d006      	beq.n	801254a <UART_SetConfig+0x1ca>
 801253c:	e00b      	b.n	8012556 <UART_SetConfig+0x1d6>
 801253e:	2300      	movs	r3, #0
 8012540:	76fb      	strb	r3, [r7, #27]
 8012542:	e00d      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012544:	2302      	movs	r3, #2
 8012546:	76fb      	strb	r3, [r7, #27]
 8012548:	e00a      	b.n	8012560 <UART_SetConfig+0x1e0>
 801254a:	2304      	movs	r3, #4
 801254c:	76fb      	strb	r3, [r7, #27]
 801254e:	e007      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012550:	2308      	movs	r3, #8
 8012552:	76fb      	strb	r3, [r7, #27]
 8012554:	e004      	b.n	8012560 <UART_SetConfig+0x1e0>
 8012556:	2310      	movs	r3, #16
 8012558:	76fb      	strb	r3, [r7, #27]
 801255a:	e001      	b.n	8012560 <UART_SetConfig+0x1e0>
 801255c:	2310      	movs	r3, #16
 801255e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a3c      	ldr	r2, [pc, #240]	; (8012658 <UART_SetConfig+0x2d8>)
 8012566:	4293      	cmp	r3, r2
 8012568:	f040 8082 	bne.w	8012670 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801256c:	7efb      	ldrb	r3, [r7, #27]
 801256e:	2b08      	cmp	r3, #8
 8012570:	d823      	bhi.n	80125ba <UART_SetConfig+0x23a>
 8012572:	a201      	add	r2, pc, #4	; (adr r2, 8012578 <UART_SetConfig+0x1f8>)
 8012574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012578:	0801259d 	.word	0x0801259d
 801257c:	080125bb 	.word	0x080125bb
 8012580:	080125a5 	.word	0x080125a5
 8012584:	080125bb 	.word	0x080125bb
 8012588:	080125ab 	.word	0x080125ab
 801258c:	080125bb 	.word	0x080125bb
 8012590:	080125bb 	.word	0x080125bb
 8012594:	080125bb 	.word	0x080125bb
 8012598:	080125b3 	.word	0x080125b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801259c:	f7fd fe9e 	bl	80102dc <HAL_RCC_GetPCLK1Freq>
 80125a0:	6178      	str	r0, [r7, #20]
        break;
 80125a2:	e00f      	b.n	80125c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80125a4:	4b31      	ldr	r3, [pc, #196]	; (801266c <UART_SetConfig+0x2ec>)
 80125a6:	617b      	str	r3, [r7, #20]
        break;
 80125a8:	e00c      	b.n	80125c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80125aa:	f7fd fdff 	bl	80101ac <HAL_RCC_GetSysClockFreq>
 80125ae:	6178      	str	r0, [r7, #20]
        break;
 80125b0:	e008      	b.n	80125c4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80125b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80125b6:	617b      	str	r3, [r7, #20]
        break;
 80125b8:	e004      	b.n	80125c4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 80125ba:	2300      	movs	r3, #0
 80125bc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80125be:	2301      	movs	r3, #1
 80125c0:	76bb      	strb	r3, [r7, #26]
        break;
 80125c2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	f000 8100 	beq.w	80127cc <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	685a      	ldr	r2, [r3, #4]
 80125d0:	4613      	mov	r3, r2
 80125d2:	005b      	lsls	r3, r3, #1
 80125d4:	4413      	add	r3, r2
 80125d6:	697a      	ldr	r2, [r7, #20]
 80125d8:	429a      	cmp	r2, r3
 80125da:	d305      	bcc.n	80125e8 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	685b      	ldr	r3, [r3, #4]
 80125e0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80125e2:	697a      	ldr	r2, [r7, #20]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d902      	bls.n	80125ee <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 80125e8:	2301      	movs	r3, #1
 80125ea:	76bb      	strb	r3, [r7, #26]
 80125ec:	e0ee      	b.n	80127cc <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80125ee:	697b      	ldr	r3, [r7, #20]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f04f 0100 	mov.w	r1, #0
 80125f6:	f04f 0200 	mov.w	r2, #0
 80125fa:	f04f 0300 	mov.w	r3, #0
 80125fe:	020b      	lsls	r3, r1, #8
 8012600:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8012604:	0202      	lsls	r2, r0, #8
 8012606:	6879      	ldr	r1, [r7, #4]
 8012608:	6849      	ldr	r1, [r1, #4]
 801260a:	0849      	lsrs	r1, r1, #1
 801260c:	4608      	mov	r0, r1
 801260e:	f04f 0100 	mov.w	r1, #0
 8012612:	1814      	adds	r4, r2, r0
 8012614:	eb43 0501 	adc.w	r5, r3, r1
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	685b      	ldr	r3, [r3, #4]
 801261c:	461a      	mov	r2, r3
 801261e:	f04f 0300 	mov.w	r3, #0
 8012622:	4620      	mov	r0, r4
 8012624:	4629      	mov	r1, r5
 8012626:	f7ee fb2f 	bl	8000c88 <__aeabi_uldivmod>
 801262a:	4602      	mov	r2, r0
 801262c:	460b      	mov	r3, r1
 801262e:	4613      	mov	r3, r2
 8012630:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8012632:	693b      	ldr	r3, [r7, #16]
 8012634:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012638:	d308      	bcc.n	801264c <UART_SetConfig+0x2cc>
 801263a:	693b      	ldr	r3, [r7, #16]
 801263c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012640:	d204      	bcs.n	801264c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	693a      	ldr	r2, [r7, #16]
 8012648:	60da      	str	r2, [r3, #12]
 801264a:	e0bf      	b.n	80127cc <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 801264c:	2301      	movs	r3, #1
 801264e:	76bb      	strb	r3, [r7, #26]
 8012650:	e0bc      	b.n	80127cc <UART_SetConfig+0x44c>
 8012652:	bf00      	nop
 8012654:	efff69f3 	.word	0xefff69f3
 8012658:	40008000 	.word	0x40008000
 801265c:	40013800 	.word	0x40013800
 8012660:	40021000 	.word	0x40021000
 8012664:	40004400 	.word	0x40004400
 8012668:	40004800 	.word	0x40004800
 801266c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	69db      	ldr	r3, [r3, #28]
 8012674:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012678:	d15c      	bne.n	8012734 <UART_SetConfig+0x3b4>
  {
    switch (clocksource)
 801267a:	7efb      	ldrb	r3, [r7, #27]
 801267c:	2b08      	cmp	r3, #8
 801267e:	d828      	bhi.n	80126d2 <UART_SetConfig+0x352>
 8012680:	a201      	add	r2, pc, #4	; (adr r2, 8012688 <UART_SetConfig+0x308>)
 8012682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012686:	bf00      	nop
 8012688:	080126ad 	.word	0x080126ad
 801268c:	080126b5 	.word	0x080126b5
 8012690:	080126bd 	.word	0x080126bd
 8012694:	080126d3 	.word	0x080126d3
 8012698:	080126c3 	.word	0x080126c3
 801269c:	080126d3 	.word	0x080126d3
 80126a0:	080126d3 	.word	0x080126d3
 80126a4:	080126d3 	.word	0x080126d3
 80126a8:	080126cb 	.word	0x080126cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80126ac:	f7fd fe16 	bl	80102dc <HAL_RCC_GetPCLK1Freq>
 80126b0:	6178      	str	r0, [r7, #20]
        break;
 80126b2:	e013      	b.n	80126dc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80126b4:	f7fd fe28 	bl	8010308 <HAL_RCC_GetPCLK2Freq>
 80126b8:	6178      	str	r0, [r7, #20]
        break;
 80126ba:	e00f      	b.n	80126dc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80126bc:	4b49      	ldr	r3, [pc, #292]	; (80127e4 <UART_SetConfig+0x464>)
 80126be:	617b      	str	r3, [r7, #20]
        break;
 80126c0:	e00c      	b.n	80126dc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80126c2:	f7fd fd73 	bl	80101ac <HAL_RCC_GetSysClockFreq>
 80126c6:	6178      	str	r0, [r7, #20]
        break;
 80126c8:	e008      	b.n	80126dc <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80126ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80126ce:	617b      	str	r3, [r7, #20]
        break;
 80126d0:	e004      	b.n	80126dc <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 80126d2:	2300      	movs	r3, #0
 80126d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80126d6:	2301      	movs	r3, #1
 80126d8:	76bb      	strb	r3, [r7, #26]
        break;
 80126da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80126dc:	697b      	ldr	r3, [r7, #20]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d074      	beq.n	80127cc <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80126e2:	697b      	ldr	r3, [r7, #20]
 80126e4:	005a      	lsls	r2, r3, #1
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	685b      	ldr	r3, [r3, #4]
 80126ea:	085b      	lsrs	r3, r3, #1
 80126ec:	441a      	add	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	685b      	ldr	r3, [r3, #4]
 80126f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80126f6:	b29b      	uxth	r3, r3
 80126f8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80126fa:	693b      	ldr	r3, [r7, #16]
 80126fc:	2b0f      	cmp	r3, #15
 80126fe:	d916      	bls.n	801272e <UART_SetConfig+0x3ae>
 8012700:	693b      	ldr	r3, [r7, #16]
 8012702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012706:	d212      	bcs.n	801272e <UART_SetConfig+0x3ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	b29b      	uxth	r3, r3
 801270c:	f023 030f 	bic.w	r3, r3, #15
 8012710:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	085b      	lsrs	r3, r3, #1
 8012716:	b29b      	uxth	r3, r3
 8012718:	f003 0307 	and.w	r3, r3, #7
 801271c:	b29a      	uxth	r2, r3
 801271e:	89fb      	ldrh	r3, [r7, #14]
 8012720:	4313      	orrs	r3, r2
 8012722:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	89fa      	ldrh	r2, [r7, #14]
 801272a:	60da      	str	r2, [r3, #12]
 801272c:	e04e      	b.n	80127cc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 801272e:	2301      	movs	r3, #1
 8012730:	76bb      	strb	r3, [r7, #26]
 8012732:	e04b      	b.n	80127cc <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8012734:	7efb      	ldrb	r3, [r7, #27]
 8012736:	2b08      	cmp	r3, #8
 8012738:	d827      	bhi.n	801278a <UART_SetConfig+0x40a>
 801273a:	a201      	add	r2, pc, #4	; (adr r2, 8012740 <UART_SetConfig+0x3c0>)
 801273c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012740:	08012765 	.word	0x08012765
 8012744:	0801276d 	.word	0x0801276d
 8012748:	08012775 	.word	0x08012775
 801274c:	0801278b 	.word	0x0801278b
 8012750:	0801277b 	.word	0x0801277b
 8012754:	0801278b 	.word	0x0801278b
 8012758:	0801278b 	.word	0x0801278b
 801275c:	0801278b 	.word	0x0801278b
 8012760:	08012783 	.word	0x08012783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8012764:	f7fd fdba 	bl	80102dc <HAL_RCC_GetPCLK1Freq>
 8012768:	6178      	str	r0, [r7, #20]
        break;
 801276a:	e013      	b.n	8012794 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801276c:	f7fd fdcc 	bl	8010308 <HAL_RCC_GetPCLK2Freq>
 8012770:	6178      	str	r0, [r7, #20]
        break;
 8012772:	e00f      	b.n	8012794 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8012774:	4b1b      	ldr	r3, [pc, #108]	; (80127e4 <UART_SetConfig+0x464>)
 8012776:	617b      	str	r3, [r7, #20]
        break;
 8012778:	e00c      	b.n	8012794 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801277a:	f7fd fd17 	bl	80101ac <HAL_RCC_GetSysClockFreq>
 801277e:	6178      	str	r0, [r7, #20]
        break;
 8012780:	e008      	b.n	8012794 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012786:	617b      	str	r3, [r7, #20]
        break;
 8012788:	e004      	b.n	8012794 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 801278a:	2300      	movs	r3, #0
 801278c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801278e:	2301      	movs	r3, #1
 8012790:	76bb      	strb	r3, [r7, #26]
        break;
 8012792:	bf00      	nop
    }

    if (pclk != 0U)
 8012794:	697b      	ldr	r3, [r7, #20]
 8012796:	2b00      	cmp	r3, #0
 8012798:	d018      	beq.n	80127cc <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	685b      	ldr	r3, [r3, #4]
 801279e:	085a      	lsrs	r2, r3, #1
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	441a      	add	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	685b      	ldr	r3, [r3, #4]
 80127a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2b0f      	cmp	r3, #15
 80127b4:	d908      	bls.n	80127c8 <UART_SetConfig+0x448>
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80127bc:	d204      	bcs.n	80127c8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = usartdiv;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	693a      	ldr	r2, [r7, #16]
 80127c4:	60da      	str	r2, [r3, #12]
 80127c6:	e001      	b.n	80127cc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 80127c8:	2301      	movs	r3, #1
 80127ca:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2200      	movs	r2, #0
 80127d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	2200      	movs	r2, #0
 80127d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80127d8:	7ebb      	ldrb	r3, [r7, #26]
}
 80127da:	4618      	mov	r0, r3
 80127dc:	3720      	adds	r7, #32
 80127de:	46bd      	mov	sp, r7
 80127e0:	bdb0      	pop	{r4, r5, r7, pc}
 80127e2:	bf00      	nop
 80127e4:	00f42400 	.word	0x00f42400

080127e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b083      	sub	sp, #12
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127f4:	f003 0301 	and.w	r3, r3, #1
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d00a      	beq.n	8012812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	430a      	orrs	r2, r1
 8012810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012816:	f003 0302 	and.w	r3, r3, #2
 801281a:	2b00      	cmp	r3, #0
 801281c:	d00a      	beq.n	8012834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	681b      	ldr	r3, [r3, #0]
 8012822:	685b      	ldr	r3, [r3, #4]
 8012824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	430a      	orrs	r2, r1
 8012832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012838:	f003 0304 	and.w	r3, r3, #4
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00a      	beq.n	8012856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	685b      	ldr	r3, [r3, #4]
 8012846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	430a      	orrs	r2, r1
 8012854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801285a:	f003 0308 	and.w	r3, r3, #8
 801285e:	2b00      	cmp	r3, #0
 8012860:	d00a      	beq.n	8012878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	685b      	ldr	r3, [r3, #4]
 8012868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	430a      	orrs	r2, r1
 8012876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801287c:	f003 0310 	and.w	r3, r3, #16
 8012880:	2b00      	cmp	r3, #0
 8012882:	d00a      	beq.n	801289a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	689b      	ldr	r3, [r3, #8]
 801288a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	430a      	orrs	r2, r1
 8012898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801289e:	f003 0320 	and.w	r3, r3, #32
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	d00a      	beq.n	80128bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	681b      	ldr	r3, [r3, #0]
 80128aa:	689b      	ldr	r3, [r3, #8]
 80128ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	430a      	orrs	r2, r1
 80128ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d01a      	beq.n	80128fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	685b      	ldr	r3, [r3, #4]
 80128ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	430a      	orrs	r2, r1
 80128dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80128e6:	d10a      	bne.n	80128fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	430a      	orrs	r2, r1
 80128fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012906:	2b00      	cmp	r3, #0
 8012908:	d00a      	beq.n	8012920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	685b      	ldr	r3, [r3, #4]
 8012910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	430a      	orrs	r2, r1
 801291e:	605a      	str	r2, [r3, #4]
  }
}
 8012920:	bf00      	nop
 8012922:	370c      	adds	r7, #12
 8012924:	46bd      	mov	sp, r7
 8012926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292a:	4770      	bx	lr

0801292c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b086      	sub	sp, #24
 8012930:	af02      	add	r7, sp, #8
 8012932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2200      	movs	r2, #0
 8012938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801293c:	f7f9 f9b8 	bl	800bcb0 <HAL_GetTick>
 8012940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	f003 0308 	and.w	r3, r3, #8
 801294c:	2b08      	cmp	r3, #8
 801294e:	d10e      	bne.n	801296e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012954:	9300      	str	r3, [sp, #0]
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2200      	movs	r2, #0
 801295a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f000 f82d 	bl	80129be <UART_WaitOnFlagUntilTimeout>
 8012964:	4603      	mov	r3, r0
 8012966:	2b00      	cmp	r3, #0
 8012968:	d001      	beq.n	801296e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801296a:	2303      	movs	r3, #3
 801296c:	e023      	b.n	80129b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	f003 0304 	and.w	r3, r3, #4
 8012978:	2b04      	cmp	r3, #4
 801297a:	d10e      	bne.n	801299a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801297c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012980:	9300      	str	r3, [sp, #0]
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2200      	movs	r2, #0
 8012986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f000 f817 	bl	80129be <UART_WaitOnFlagUntilTimeout>
 8012990:	4603      	mov	r3, r0
 8012992:	2b00      	cmp	r3, #0
 8012994:	d001      	beq.n	801299a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012996:	2303      	movs	r3, #3
 8012998:	e00d      	b.n	80129b6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2220      	movs	r2, #32
 801299e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2220      	movs	r2, #32
 80129a4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	2200      	movs	r2, #0
 80129aa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	2200      	movs	r2, #0
 80129b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80129b4:	2300      	movs	r3, #0
}
 80129b6:	4618      	mov	r0, r3
 80129b8:	3710      	adds	r7, #16
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}

080129be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80129be:	b580      	push	{r7, lr}
 80129c0:	b084      	sub	sp, #16
 80129c2:	af00      	add	r7, sp, #0
 80129c4:	60f8      	str	r0, [r7, #12]
 80129c6:	60b9      	str	r1, [r7, #8]
 80129c8:	603b      	str	r3, [r7, #0]
 80129ca:	4613      	mov	r3, r2
 80129cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80129ce:	e05e      	b.n	8012a8e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80129d0:	69bb      	ldr	r3, [r7, #24]
 80129d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129d6:	d05a      	beq.n	8012a8e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80129d8:	f7f9 f96a 	bl	800bcb0 <HAL_GetTick>
 80129dc:	4602      	mov	r2, r0
 80129de:	683b      	ldr	r3, [r7, #0]
 80129e0:	1ad3      	subs	r3, r2, r3
 80129e2:	69ba      	ldr	r2, [r7, #24]
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d302      	bcc.n	80129ee <UART_WaitOnFlagUntilTimeout+0x30>
 80129e8:	69bb      	ldr	r3, [r7, #24]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d11b      	bne.n	8012a26 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	681a      	ldr	r2, [r3, #0]
 80129f4:	68fb      	ldr	r3, [r7, #12]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80129fc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	681b      	ldr	r3, [r3, #0]
 8012a02:	689a      	ldr	r2, [r3, #8]
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	f022 0201 	bic.w	r2, r2, #1
 8012a0c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	2220      	movs	r2, #32
 8012a12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2220      	movs	r2, #32
 8012a18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8012a22:	2303      	movs	r3, #3
 8012a24:	e043      	b.n	8012aae <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	f003 0304 	and.w	r3, r3, #4
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d02c      	beq.n	8012a8e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	69db      	ldr	r3, [r3, #28]
 8012a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012a3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012a42:	d124      	bne.n	8012a8e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012a4c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	681b      	ldr	r3, [r3, #0]
 8012a52:	681a      	ldr	r2, [r3, #0]
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012a5c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	689a      	ldr	r2, [r3, #8]
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f022 0201 	bic.w	r2, r2, #1
 8012a6c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2220      	movs	r2, #32
 8012a72:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	2220      	movs	r2, #32
 8012a78:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	2220      	movs	r2, #32
 8012a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	2200      	movs	r2, #0
 8012a86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8012a8a:	2303      	movs	r3, #3
 8012a8c:	e00f      	b.n	8012aae <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	681b      	ldr	r3, [r3, #0]
 8012a92:	69da      	ldr	r2, [r3, #28]
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	4013      	ands	r3, r2
 8012a98:	68ba      	ldr	r2, [r7, #8]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	bf0c      	ite	eq
 8012a9e:	2301      	moveq	r3, #1
 8012aa0:	2300      	movne	r3, #0
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	461a      	mov	r2, r3
 8012aa6:	79fb      	ldrb	r3, [r7, #7]
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d091      	beq.n	80129d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3710      	adds	r7, #16
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
	...

08012ab8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8012ab8:	b580      	push	{r7, lr}
 8012aba:	b084      	sub	sp, #16
 8012abc:	af00      	add	r7, sp, #0
 8012abe:	60f8      	str	r0, [r7, #12]
 8012ac0:	60b9      	str	r1, [r7, #8]
 8012ac2:	4613      	mov	r3, r2
 8012ac4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	68ba      	ldr	r2, [r7, #8]
 8012aca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	88fa      	ldrh	r2, [r7, #6]
 8012ad0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012ad4:	68fb      	ldr	r3, [r7, #12]
 8012ad6:	2200      	movs	r2, #0
 8012ad8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	2222      	movs	r2, #34	; 0x22
 8012ae0:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d02b      	beq.n	8012b42 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aee:	4a25      	ldr	r2, [pc, #148]	; (8012b84 <UART_Start_Receive_DMA+0xcc>)
 8012af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012af6:	4a24      	ldr	r2, [pc, #144]	; (8012b88 <UART_Start_Receive_DMA+0xd0>)
 8012af8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012afe:	4a23      	ldr	r2, [pc, #140]	; (8012b8c <UART_Start_Receive_DMA+0xd4>)
 8012b00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b06:	2200      	movs	r2, #0
 8012b08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8012b0e:	68fb      	ldr	r3, [r7, #12]
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	3324      	adds	r3, #36	; 0x24
 8012b14:	4619      	mov	r1, r3
 8012b16:	68fb      	ldr	r3, [r7, #12]
 8012b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b1a:	461a      	mov	r2, r3
 8012b1c:	88fb      	ldrh	r3, [r7, #6]
 8012b1e:	f7f9 fac1 	bl	800c0a4 <HAL_DMA_Start_IT>
 8012b22:	4603      	mov	r3, r0
 8012b24:	2b00      	cmp	r3, #0
 8012b26:	d00c      	beq.n	8012b42 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	2210      	movs	r2, #16
 8012b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	2200      	movs	r2, #0
 8012b34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	2220      	movs	r2, #32
 8012b3c:	679a      	str	r2, [r3, #120]	; 0x78

      return HAL_ERROR;
 8012b3e:	2301      	movs	r3, #1
 8012b40:	e01c      	b.n	8012b7c <UART_Start_Receive_DMA+0xc4>
    }
  }
  __HAL_UNLOCK(huart);
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	2200      	movs	r2, #0
 8012b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012b4a:	68fb      	ldr	r3, [r7, #12]
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	681a      	ldr	r2, [r3, #0]
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	681b      	ldr	r3, [r3, #0]
 8012b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8012b58:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	689a      	ldr	r2, [r3, #8]
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f042 0201 	orr.w	r2, r2, #1
 8012b68:	609a      	str	r2, [r3, #8]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	689a      	ldr	r2, [r3, #8]
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012b78:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 8012b7a:	2300      	movs	r3, #0
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3710      	adds	r7, #16
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	08012c19 	.word	0x08012c19
 8012b88:	08012cb1 	.word	0x08012cb1
 8012b8c:	08012ce9 	.word	0x08012ce9

08012b90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	681b      	ldr	r3, [r3, #0]
 8012ba2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8012ba6:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	2220      	movs	r2, #32
 8012bac:	679a      	str	r2, [r3, #120]	; 0x78
}
 8012bae:	bf00      	nop
 8012bb0:	370c      	adds	r7, #12
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb8:	4770      	bx	lr

08012bba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012bba:	b480      	push	{r7}
 8012bbc:	b083      	sub	sp, #12
 8012bbe:	af00      	add	r7, sp, #0
 8012bc0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8012bd0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	689a      	ldr	r2, [r3, #8]
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	f022 0201 	bic.w	r2, r2, #1
 8012be0:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012be2:	687b      	ldr	r3, [r7, #4]
 8012be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012be6:	2b01      	cmp	r3, #1
 8012be8:	d107      	bne.n	8012bfa <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	f022 0210 	bic.w	r2, r2, #16
 8012bf8:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	2220      	movs	r2, #32
 8012bfe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	2200      	movs	r2, #0
 8012c04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	2200      	movs	r2, #0
 8012c0a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8012c0c:	bf00      	nop
 8012c0e:	370c      	adds	r7, #12
 8012c10:	46bd      	mov	sp, r7
 8012c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c16:	4770      	bx	lr

08012c18 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b084      	sub	sp, #16
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c24:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	f003 0320 	and.w	r3, r3, #32
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d12a      	bne.n	8012c8a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	681a      	ldr	r2, [r3, #0]
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	681b      	ldr	r3, [r3, #0]
 8012c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012c4a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	681b      	ldr	r3, [r3, #0]
 8012c50:	689a      	ldr	r2, [r3, #8]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f022 0201 	bic.w	r2, r2, #1
 8012c5a:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	689a      	ldr	r2, [r3, #8]
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	681b      	ldr	r3, [r3, #0]
 8012c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012c6a:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	2220      	movs	r2, #32
 8012c70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c76:	2b01      	cmp	r3, #1
 8012c78:	d107      	bne.n	8012c8a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	f022 0210 	bic.w	r2, r2, #16
 8012c88:	601a      	str	r2, [r3, #0]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012c8e:	2b01      	cmp	r3, #1
 8012c90:	d107      	bne.n	8012ca2 <UART_DMAReceiveCplt+0x8a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012c98:	4619      	mov	r1, r3
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7ff fb64 	bl	8012368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012ca0:	e002      	b.n	8012ca8 <UART_DMAReceiveCplt+0x90>
    HAL_UART_RxCpltCallback(huart);
 8012ca2:	68f8      	ldr	r0, [r7, #12]
 8012ca4:	f7f8 fa34 	bl	800b110 <HAL_UART_RxCpltCallback>
}
 8012ca8:	bf00      	nop
 8012caa:	3710      	adds	r7, #16
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bd80      	pop	{r7, pc}

08012cb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cbc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012cc2:	2b01      	cmp	r3, #1
 8012cc4:	d109      	bne.n	8012cda <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012ccc:	085b      	lsrs	r3, r3, #1
 8012cce:	b29b      	uxth	r3, r3
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7ff fb48 	bl	8012368 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8012cd8:	e002      	b.n	8012ce0 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8012cda:	68f8      	ldr	r0, [r7, #12]
 8012cdc:	f7ff fb30 	bl	8012340 <HAL_UART_RxHalfCpltCallback>
}
 8012ce0:	bf00      	nop
 8012ce2:	3710      	adds	r7, #16
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b086      	sub	sp, #24
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cf4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8012cf6:	697b      	ldr	r3, [r7, #20]
 8012cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cfa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8012cfc:	697b      	ldr	r3, [r7, #20]
 8012cfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012d00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	689b      	ldr	r3, [r3, #8]
 8012d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d0c:	2b80      	cmp	r3, #128	; 0x80
 8012d0e:	d109      	bne.n	8012d24 <UART_DMAError+0x3c>
 8012d10:	693b      	ldr	r3, [r7, #16]
 8012d12:	2b21      	cmp	r3, #33	; 0x21
 8012d14:	d106      	bne.n	8012d24 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8012d16:	697b      	ldr	r3, [r7, #20]
 8012d18:	2200      	movs	r2, #0
 8012d1a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8012d1e:	6978      	ldr	r0, [r7, #20]
 8012d20:	f7ff ff36 	bl	8012b90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8012d24:	697b      	ldr	r3, [r7, #20]
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	689b      	ldr	r3, [r3, #8]
 8012d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012d2e:	2b40      	cmp	r3, #64	; 0x40
 8012d30:	d109      	bne.n	8012d46 <UART_DMAError+0x5e>
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2b22      	cmp	r3, #34	; 0x22
 8012d36:	d106      	bne.n	8012d46 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8012d40:	6978      	ldr	r0, [r7, #20]
 8012d42:	f7ff ff3a 	bl	8012bba <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8012d46:	697b      	ldr	r3, [r7, #20]
 8012d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012d4c:	f043 0210 	orr.w	r2, r3, #16
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012d56:	6978      	ldr	r0, [r7, #20]
 8012d58:	f7ff fafc 	bl	8012354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012d5c:	bf00      	nop
 8012d5e:	3718      	adds	r7, #24
 8012d60:	46bd      	mov	sp, r7
 8012d62:	bd80      	pop	{r7, pc}

08012d64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b084      	sub	sp, #16
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012d72:	68fb      	ldr	r3, [r7, #12]
 8012d74:	2200      	movs	r2, #0
 8012d76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012d7a:	68fb      	ldr	r3, [r7, #12]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012d82:	68f8      	ldr	r0, [r7, #12]
 8012d84:	f7ff fae6 	bl	8012354 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012d88:	bf00      	nop
 8012d8a:	3710      	adds	r7, #16
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8012d90:	b480      	push	{r7}
 8012d92:	b083      	sub	sp, #12
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d9c:	2b21      	cmp	r3, #33	; 0x21
 8012d9e:	d12b      	bne.n	8012df8 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012da6:	b29b      	uxth	r3, r3
 8012da8:	2b00      	cmp	r3, #0
 8012daa:	d110      	bne.n	8012dce <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	681a      	ldr	r2, [r3, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012dba:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	681a      	ldr	r2, [r3, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012dca:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8012dcc:	e014      	b.n	8012df8 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dd2:	781a      	ldrb	r2, [r3, #0]
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	b292      	uxth	r2, r2
 8012dda:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012de0:	1c5a      	adds	r2, r3, #1
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012dec:	b29b      	uxth	r3, r3
 8012dee:	3b01      	subs	r3, #1
 8012df0:	b29a      	uxth	r2, r3
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012df8:	bf00      	nop
 8012dfa:	370c      	adds	r7, #12
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e10:	2b21      	cmp	r3, #33	; 0x21
 8012e12:	d12f      	bne.n	8012e74 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d110      	bne.n	8012e42 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	681b      	ldr	r3, [r3, #0]
 8012e2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8012e2e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	681a      	ldr	r2, [r3, #0]
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012e3e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012e40:	e018      	b.n	8012e74 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e46:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	881a      	ldrh	r2, [r3, #0]
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012e54:	b292      	uxth	r2, r2
 8012e56:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012e5c:	1c9a      	adds	r2, r3, #2
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	3b01      	subs	r3, #1
 8012e6c:	b29a      	uxth	r2, r3
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8012e74:	bf00      	nop
 8012e76:	3714      	adds	r7, #20
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr

08012e80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8012e80:	b580      	push	{r7, lr}
 8012e82:	b082      	sub	sp, #8
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012e96:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2220      	movs	r2, #32
 8012e9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	2200      	movs	r2, #0
 8012ea2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8012ea4:	6878      	ldr	r0, [r7, #4]
 8012ea6:	f7ff fa41 	bl	801232c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}

08012eb2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012eb2:	b480      	push	{r7}
 8012eb4:	b083      	sub	sp, #12
 8012eb6:	af00      	add	r7, sp, #0
 8012eb8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012eba:	bf00      	nop
 8012ebc:	370c      	adds	r7, #12
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec4:	4770      	bx	lr

08012ec6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	b480      	push	{r7}
 8012eca:	b083      	sub	sp, #12
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	f107 0014 	add.w	r0, r7, #20
 8012ed4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	370c      	adds	r7, #12
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ee4:	b004      	add	sp, #16
 8012ee6:	4770      	bx	lr

08012ee8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8012ee8:	b480      	push	{r7}
 8012eea:	b085      	sub	sp, #20
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2200      	movs	r2, #0
 8012ef4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012ef8:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012efc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	b29a      	uxth	r2, r3
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012f08:	2300      	movs	r3, #0
}
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	3714      	adds	r7, #20
 8012f0e:	46bd      	mov	sp, r7
 8012f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f14:	4770      	bx	lr

08012f16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8012f16:	b480      	push	{r7}
 8012f18:	b085      	sub	sp, #20
 8012f1a:	af00      	add	r7, sp, #0
 8012f1c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8012f1e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8012f22:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8012f2a:	b29a      	uxth	r2, r3
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	b29b      	uxth	r3, r3
 8012f30:	43db      	mvns	r3, r3
 8012f32:	b29b      	uxth	r3, r3
 8012f34:	4013      	ands	r3, r2
 8012f36:	b29a      	uxth	r2, r3
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8012f3e:	2300      	movs	r3, #0
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	3714      	adds	r7, #20
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b083      	sub	sp, #12
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	460b      	mov	r3, r1
 8012f56:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8012f58:	2300      	movs	r3, #0
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	370c      	adds	r7, #12
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f64:	4770      	bx	lr

08012f66 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8012f66:	b084      	sub	sp, #16
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	f107 0014 	add.w	r0, r7, #20
 8012f74:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	2201      	movs	r2, #1
 8012f7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2200      	movs	r2, #0
 8012f84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	2200      	movs	r2, #0
 8012f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	2200      	movs	r2, #0
 8012f94:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8012f98:	2300      	movs	r3, #0
}
 8012f9a:	4618      	mov	r0, r3
 8012f9c:	370c      	adds	r7, #12
 8012f9e:	46bd      	mov	sp, r7
 8012fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa4:	b004      	add	sp, #16
 8012fa6:	4770      	bx	lr

08012fa8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b09b      	sub	sp, #108	; 0x6c
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
 8012fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8012fb2:	2300      	movs	r3, #0
 8012fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8012fb8:	687a      	ldr	r2, [r7, #4]
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	781b      	ldrb	r3, [r3, #0]
 8012fbe:	009b      	lsls	r3, r3, #2
 8012fc0:	4413      	add	r3, r2
 8012fc2:	881b      	ldrh	r3, [r3, #0]
 8012fc4:	b29b      	uxth	r3, r3
 8012fc6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8012fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8012fce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	78db      	ldrb	r3, [r3, #3]
 8012fd6:	2b03      	cmp	r3, #3
 8012fd8:	d81f      	bhi.n	801301a <USB_ActivateEndpoint+0x72>
 8012fda:	a201      	add	r2, pc, #4	; (adr r2, 8012fe0 <USB_ActivateEndpoint+0x38>)
 8012fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe0:	08012ff1 	.word	0x08012ff1
 8012fe4:	0801300d 	.word	0x0801300d
 8012fe8:	08013023 	.word	0x08013023
 8012fec:	08012fff 	.word	0x08012fff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8012ff0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8012ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012ff8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8012ffc:	e012      	b.n	8013024 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8012ffe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013002:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8013006:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 801300a:	e00b      	b.n	8013024 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 801300c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8013014:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8013018:	e004      	b.n	8013024 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 801301a:	2301      	movs	r3, #1
 801301c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8013020:	e000      	b.n	8013024 <USB_ActivateEndpoint+0x7c>
      break;
 8013022:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	683b      	ldr	r3, [r7, #0]
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	009b      	lsls	r3, r3, #2
 801302c:	441a      	add	r2, r3
 801302e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8013032:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013036:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801303a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801303e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013042:	b29b      	uxth	r3, r3
 8013044:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8013046:	687a      	ldr	r2, [r7, #4]
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	781b      	ldrb	r3, [r3, #0]
 801304c:	009b      	lsls	r3, r3, #2
 801304e:	4413      	add	r3, r2
 8013050:	881b      	ldrh	r3, [r3, #0]
 8013052:	b29b      	uxth	r3, r3
 8013054:	b21b      	sxth	r3, r3
 8013056:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801305a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801305e:	b21a      	sxth	r2, r3
 8013060:	683b      	ldr	r3, [r7, #0]
 8013062:	781b      	ldrb	r3, [r3, #0]
 8013064:	b21b      	sxth	r3, r3
 8013066:	4313      	orrs	r3, r2
 8013068:	b21b      	sxth	r3, r3
 801306a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 801306e:	687a      	ldr	r2, [r7, #4]
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	781b      	ldrb	r3, [r3, #0]
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	441a      	add	r2, r3
 8013078:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 801307c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013080:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013084:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013088:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801308c:	b29b      	uxth	r3, r3
 801308e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8013090:	683b      	ldr	r3, [r7, #0]
 8013092:	7b1b      	ldrb	r3, [r3, #12]
 8013094:	2b00      	cmp	r3, #0
 8013096:	f040 8149 	bne.w	801332c <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	785b      	ldrb	r3, [r3, #1]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	f000 8084 	beq.w	80131ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	617b      	str	r3, [r7, #20]
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80130ae:	b29b      	uxth	r3, r3
 80130b0:	461a      	mov	r2, r3
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	4413      	add	r3, r2
 80130b6:	617b      	str	r3, [r7, #20]
 80130b8:	683b      	ldr	r3, [r7, #0]
 80130ba:	781b      	ldrb	r3, [r3, #0]
 80130bc:	00da      	lsls	r2, r3, #3
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	4413      	add	r3, r2
 80130c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80130c6:	613b      	str	r3, [r7, #16]
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	88db      	ldrh	r3, [r3, #6]
 80130cc:	085b      	lsrs	r3, r3, #1
 80130ce:	b29b      	uxth	r3, r3
 80130d0:	005b      	lsls	r3, r3, #1
 80130d2:	b29a      	uxth	r2, r3
 80130d4:	693b      	ldr	r3, [r7, #16]
 80130d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	781b      	ldrb	r3, [r3, #0]
 80130de:	009b      	lsls	r3, r3, #2
 80130e0:	4413      	add	r3, r2
 80130e2:	881b      	ldrh	r3, [r3, #0]
 80130e4:	81fb      	strh	r3, [r7, #14]
 80130e6:	89fb      	ldrh	r3, [r7, #14]
 80130e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d01b      	beq.n	8013128 <USB_ActivateEndpoint+0x180>
 80130f0:	687a      	ldr	r2, [r7, #4]
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	781b      	ldrb	r3, [r3, #0]
 80130f6:	009b      	lsls	r3, r3, #2
 80130f8:	4413      	add	r3, r2
 80130fa:	881b      	ldrh	r3, [r3, #0]
 80130fc:	b29b      	uxth	r3, r3
 80130fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013106:	81bb      	strh	r3, [r7, #12]
 8013108:	687a      	ldr	r2, [r7, #4]
 801310a:	683b      	ldr	r3, [r7, #0]
 801310c:	781b      	ldrb	r3, [r3, #0]
 801310e:	009b      	lsls	r3, r3, #2
 8013110:	441a      	add	r2, r3
 8013112:	89bb      	ldrh	r3, [r7, #12]
 8013114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801311c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013124:	b29b      	uxth	r3, r3
 8013126:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013128:	683b      	ldr	r3, [r7, #0]
 801312a:	78db      	ldrb	r3, [r3, #3]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d020      	beq.n	8013172 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	781b      	ldrb	r3, [r3, #0]
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	4413      	add	r3, r2
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	b29b      	uxth	r3, r3
 801313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013146:	813b      	strh	r3, [r7, #8]
 8013148:	893b      	ldrh	r3, [r7, #8]
 801314a:	f083 0320 	eor.w	r3, r3, #32
 801314e:	813b      	strh	r3, [r7, #8]
 8013150:	687a      	ldr	r2, [r7, #4]
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	781b      	ldrb	r3, [r3, #0]
 8013156:	009b      	lsls	r3, r3, #2
 8013158:	441a      	add	r2, r3
 801315a:	893b      	ldrh	r3, [r7, #8]
 801315c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801316c:	b29b      	uxth	r3, r3
 801316e:	8013      	strh	r3, [r2, #0]
 8013170:	e27f      	b.n	8013672 <USB_ActivateEndpoint+0x6ca>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	683b      	ldr	r3, [r7, #0]
 8013176:	781b      	ldrb	r3, [r3, #0]
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	4413      	add	r3, r2
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	b29b      	uxth	r3, r3
 8013180:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013184:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013188:	817b      	strh	r3, [r7, #10]
 801318a:	687a      	ldr	r2, [r7, #4]
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	781b      	ldrb	r3, [r3, #0]
 8013190:	009b      	lsls	r3, r3, #2
 8013192:	441a      	add	r2, r3
 8013194:	897b      	ldrh	r3, [r7, #10]
 8013196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801319a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801319e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80131a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	8013      	strh	r3, [r2, #0]
 80131aa:	e262      	b.n	8013672 <USB_ActivateEndpoint+0x6ca>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80131b6:	b29b      	uxth	r3, r3
 80131b8:	461a      	mov	r2, r3
 80131ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131bc:	4413      	add	r3, r2
 80131be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131c0:	683b      	ldr	r3, [r7, #0]
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	00da      	lsls	r2, r3, #3
 80131c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c8:	4413      	add	r3, r2
 80131ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80131ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80131d0:	683b      	ldr	r3, [r7, #0]
 80131d2:	88db      	ldrh	r3, [r3, #6]
 80131d4:	085b      	lsrs	r3, r3, #1
 80131d6:	b29b      	uxth	r3, r3
 80131d8:	005b      	lsls	r3, r3, #1
 80131da:	b29a      	uxth	r2, r3
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	627b      	str	r3, [r7, #36]	; 0x24
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	461a      	mov	r2, r3
 80131ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f0:	4413      	add	r3, r2
 80131f2:	627b      	str	r3, [r7, #36]	; 0x24
 80131f4:	683b      	ldr	r3, [r7, #0]
 80131f6:	781b      	ldrb	r3, [r3, #0]
 80131f8:	00da      	lsls	r2, r3, #3
 80131fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fc:	4413      	add	r3, r2
 80131fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8013202:	623b      	str	r3, [r7, #32]
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	691b      	ldr	r3, [r3, #16]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d112      	bne.n	8013232 <USB_ActivateEndpoint+0x28a>
 801320c:	6a3b      	ldr	r3, [r7, #32]
 801320e:	881b      	ldrh	r3, [r3, #0]
 8013210:	b29b      	uxth	r3, r3
 8013212:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013216:	b29a      	uxth	r2, r3
 8013218:	6a3b      	ldr	r3, [r7, #32]
 801321a:	801a      	strh	r2, [r3, #0]
 801321c:	6a3b      	ldr	r3, [r7, #32]
 801321e:	881b      	ldrh	r3, [r3, #0]
 8013220:	b29b      	uxth	r3, r3
 8013222:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013226:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801322a:	b29a      	uxth	r2, r3
 801322c:	6a3b      	ldr	r3, [r7, #32]
 801322e:	801a      	strh	r2, [r3, #0]
 8013230:	e02f      	b.n	8013292 <USB_ActivateEndpoint+0x2ea>
 8013232:	683b      	ldr	r3, [r7, #0]
 8013234:	691b      	ldr	r3, [r3, #16]
 8013236:	2b3e      	cmp	r3, #62	; 0x3e
 8013238:	d813      	bhi.n	8013262 <USB_ActivateEndpoint+0x2ba>
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	691b      	ldr	r3, [r3, #16]
 801323e:	085b      	lsrs	r3, r3, #1
 8013240:	663b      	str	r3, [r7, #96]	; 0x60
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	691b      	ldr	r3, [r3, #16]
 8013246:	f003 0301 	and.w	r3, r3, #1
 801324a:	2b00      	cmp	r3, #0
 801324c:	d002      	beq.n	8013254 <USB_ActivateEndpoint+0x2ac>
 801324e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013250:	3301      	adds	r3, #1
 8013252:	663b      	str	r3, [r7, #96]	; 0x60
 8013254:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013256:	b29b      	uxth	r3, r3
 8013258:	029b      	lsls	r3, r3, #10
 801325a:	b29a      	uxth	r2, r3
 801325c:	6a3b      	ldr	r3, [r7, #32]
 801325e:	801a      	strh	r2, [r3, #0]
 8013260:	e017      	b.n	8013292 <USB_ActivateEndpoint+0x2ea>
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	691b      	ldr	r3, [r3, #16]
 8013266:	095b      	lsrs	r3, r3, #5
 8013268:	663b      	str	r3, [r7, #96]	; 0x60
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	691b      	ldr	r3, [r3, #16]
 801326e:	f003 031f 	and.w	r3, r3, #31
 8013272:	2b00      	cmp	r3, #0
 8013274:	d102      	bne.n	801327c <USB_ActivateEndpoint+0x2d4>
 8013276:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8013278:	3b01      	subs	r3, #1
 801327a:	663b      	str	r3, [r7, #96]	; 0x60
 801327c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801327e:	b29b      	uxth	r3, r3
 8013280:	029b      	lsls	r3, r3, #10
 8013282:	b29b      	uxth	r3, r3
 8013284:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013288:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801328c:	b29a      	uxth	r2, r3
 801328e:	6a3b      	ldr	r3, [r7, #32]
 8013290:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	781b      	ldrb	r3, [r3, #0]
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	4413      	add	r3, r2
 801329c:	881b      	ldrh	r3, [r3, #0]
 801329e:	83fb      	strh	r3, [r7, #30]
 80132a0:	8bfb      	ldrh	r3, [r7, #30]
 80132a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d01b      	beq.n	80132e2 <USB_ActivateEndpoint+0x33a>
 80132aa:	687a      	ldr	r2, [r7, #4]
 80132ac:	683b      	ldr	r3, [r7, #0]
 80132ae:	781b      	ldrb	r3, [r3, #0]
 80132b0:	009b      	lsls	r3, r3, #2
 80132b2:	4413      	add	r3, r2
 80132b4:	881b      	ldrh	r3, [r3, #0]
 80132b6:	b29b      	uxth	r3, r3
 80132b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80132bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132c0:	83bb      	strh	r3, [r7, #28]
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	683b      	ldr	r3, [r7, #0]
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	009b      	lsls	r3, r3, #2
 80132ca:	441a      	add	r2, r3
 80132cc:	8bbb      	ldrh	r3, [r7, #28]
 80132ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80132d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80132d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80132da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80132de:	b29b      	uxth	r3, r3
 80132e0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80132e2:	687a      	ldr	r2, [r7, #4]
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	009b      	lsls	r3, r3, #2
 80132ea:	4413      	add	r3, r2
 80132ec:	881b      	ldrh	r3, [r3, #0]
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80132f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80132f8:	837b      	strh	r3, [r7, #26]
 80132fa:	8b7b      	ldrh	r3, [r7, #26]
 80132fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013300:	837b      	strh	r3, [r7, #26]
 8013302:	8b7b      	ldrh	r3, [r7, #26]
 8013304:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8013308:	837b      	strh	r3, [r7, #26]
 801330a:	687a      	ldr	r2, [r7, #4]
 801330c:	683b      	ldr	r3, [r7, #0]
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	009b      	lsls	r3, r3, #2
 8013312:	441a      	add	r2, r3
 8013314:	8b7b      	ldrh	r3, [r7, #26]
 8013316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801331a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801331e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013326:	b29b      	uxth	r3, r3
 8013328:	8013      	strh	r3, [r2, #0]
 801332a:	e1a2      	b.n	8013672 <USB_ActivateEndpoint+0x6ca>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 801332c:	687a      	ldr	r2, [r7, #4]
 801332e:	683b      	ldr	r3, [r7, #0]
 8013330:	781b      	ldrb	r3, [r3, #0]
 8013332:	009b      	lsls	r3, r3, #2
 8013334:	4413      	add	r3, r2
 8013336:	881b      	ldrh	r3, [r3, #0]
 8013338:	b29b      	uxth	r3, r3
 801333a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801333e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013342:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8013346:	687a      	ldr	r2, [r7, #4]
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	781b      	ldrb	r3, [r3, #0]
 801334c:	009b      	lsls	r3, r3, #2
 801334e:	441a      	add	r2, r3
 8013350:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8013354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801335c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013364:	b29b      	uxth	r3, r3
 8013366:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	65bb      	str	r3, [r7, #88]	; 0x58
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013372:	b29b      	uxth	r3, r3
 8013374:	461a      	mov	r2, r3
 8013376:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013378:	4413      	add	r3, r2
 801337a:	65bb      	str	r3, [r7, #88]	; 0x58
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	781b      	ldrb	r3, [r3, #0]
 8013380:	00da      	lsls	r2, r3, #3
 8013382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013384:	4413      	add	r3, r2
 8013386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801338a:	657b      	str	r3, [r7, #84]	; 0x54
 801338c:	683b      	ldr	r3, [r7, #0]
 801338e:	891b      	ldrh	r3, [r3, #8]
 8013390:	085b      	lsrs	r3, r3, #1
 8013392:	b29b      	uxth	r3, r3
 8013394:	005b      	lsls	r3, r3, #1
 8013396:	b29a      	uxth	r2, r3
 8013398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801339a:	801a      	strh	r2, [r3, #0]
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	653b      	str	r3, [r7, #80]	; 0x50
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80133a6:	b29b      	uxth	r3, r3
 80133a8:	461a      	mov	r2, r3
 80133aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133ac:	4413      	add	r3, r2
 80133ae:	653b      	str	r3, [r7, #80]	; 0x50
 80133b0:	683b      	ldr	r3, [r7, #0]
 80133b2:	781b      	ldrb	r3, [r3, #0]
 80133b4:	00da      	lsls	r2, r3, #3
 80133b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80133b8:	4413      	add	r3, r2
 80133ba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80133be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80133c0:	683b      	ldr	r3, [r7, #0]
 80133c2:	895b      	ldrh	r3, [r3, #10]
 80133c4:	085b      	lsrs	r3, r3, #1
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	005b      	lsls	r3, r3, #1
 80133ca:	b29a      	uxth	r2, r3
 80133cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133ce:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	785b      	ldrb	r3, [r3, #1]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	f040 8091 	bne.w	80134fc <USB_ActivateEndpoint+0x554>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80133da:	687a      	ldr	r2, [r7, #4]
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	009b      	lsls	r3, r3, #2
 80133e2:	4413      	add	r3, r2
 80133e4:	881b      	ldrh	r3, [r3, #0]
 80133e6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80133e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80133ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d01b      	beq.n	801342a <USB_ActivateEndpoint+0x482>
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	683b      	ldr	r3, [r7, #0]
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	009b      	lsls	r3, r3, #2
 80133fa:	4413      	add	r3, r2
 80133fc:	881b      	ldrh	r3, [r3, #0]
 80133fe:	b29b      	uxth	r3, r3
 8013400:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013408:	877b      	strh	r3, [r7, #58]	; 0x3a
 801340a:	687a      	ldr	r2, [r7, #4]
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	781b      	ldrb	r3, [r3, #0]
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	441a      	add	r2, r3
 8013414:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013416:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801341a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801341e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013422:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013426:	b29b      	uxth	r3, r3
 8013428:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	4413      	add	r3, r2
 8013434:	881b      	ldrh	r3, [r3, #0]
 8013436:	873b      	strh	r3, [r7, #56]	; 0x38
 8013438:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801343e:	2b00      	cmp	r3, #0
 8013440:	d01b      	beq.n	801347a <USB_ActivateEndpoint+0x4d2>
 8013442:	687a      	ldr	r2, [r7, #4]
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	009b      	lsls	r3, r3, #2
 801344a:	4413      	add	r3, r2
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	b29b      	uxth	r3, r3
 8013450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013458:	86fb      	strh	r3, [r7, #54]	; 0x36
 801345a:	687a      	ldr	r2, [r7, #4]
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	781b      	ldrb	r3, [r3, #0]
 8013460:	009b      	lsls	r3, r3, #2
 8013462:	441a      	add	r2, r3
 8013464:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013466:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801346a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013472:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013476:	b29b      	uxth	r3, r3
 8013478:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801347a:	687a      	ldr	r2, [r7, #4]
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	781b      	ldrb	r3, [r3, #0]
 8013480:	009b      	lsls	r3, r3, #2
 8013482:	4413      	add	r3, r2
 8013484:	881b      	ldrh	r3, [r3, #0]
 8013486:	b29b      	uxth	r3, r3
 8013488:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801348c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013490:	86bb      	strh	r3, [r7, #52]	; 0x34
 8013492:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013494:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8013498:	86bb      	strh	r3, [r7, #52]	; 0x34
 801349a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801349c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80134a0:	86bb      	strh	r3, [r7, #52]	; 0x34
 80134a2:	687a      	ldr	r2, [r7, #4]
 80134a4:	683b      	ldr	r3, [r7, #0]
 80134a6:	781b      	ldrb	r3, [r3, #0]
 80134a8:	009b      	lsls	r3, r3, #2
 80134aa:	441a      	add	r2, r3
 80134ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80134ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134be:	b29b      	uxth	r3, r3
 80134c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80134c2:	687a      	ldr	r2, [r7, #4]
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	781b      	ldrb	r3, [r3, #0]
 80134c8:	009b      	lsls	r3, r3, #2
 80134ca:	4413      	add	r3, r2
 80134cc:	881b      	ldrh	r3, [r3, #0]
 80134ce:	b29b      	uxth	r3, r3
 80134d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80134d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80134d8:	867b      	strh	r3, [r7, #50]	; 0x32
 80134da:	687a      	ldr	r2, [r7, #4]
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	781b      	ldrb	r3, [r3, #0]
 80134e0:	009b      	lsls	r3, r3, #2
 80134e2:	441a      	add	r2, r3
 80134e4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80134e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80134ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80134ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80134f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	8013      	strh	r3, [r2, #0]
 80134fa:	e0ba      	b.n	8013672 <USB_ActivateEndpoint+0x6ca>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	781b      	ldrb	r3, [r3, #0]
 8013502:	009b      	lsls	r3, r3, #2
 8013504:	4413      	add	r3, r2
 8013506:	881b      	ldrh	r3, [r3, #0]
 8013508:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 801350c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8013510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013514:	2b00      	cmp	r3, #0
 8013516:	d01d      	beq.n	8013554 <USB_ActivateEndpoint+0x5ac>
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	4413      	add	r3, r2
 8013522:	881b      	ldrh	r3, [r3, #0]
 8013524:	b29b      	uxth	r3, r3
 8013526:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801352a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801352e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8013532:	687a      	ldr	r2, [r7, #4]
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	781b      	ldrb	r3, [r3, #0]
 8013538:	009b      	lsls	r3, r3, #2
 801353a:	441a      	add	r2, r3
 801353c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8013540:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013544:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801354c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013550:	b29b      	uxth	r3, r3
 8013552:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	683b      	ldr	r3, [r7, #0]
 8013558:	781b      	ldrb	r3, [r3, #0]
 801355a:	009b      	lsls	r3, r3, #2
 801355c:	4413      	add	r3, r2
 801355e:	881b      	ldrh	r3, [r3, #0]
 8013560:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8013564:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801356c:	2b00      	cmp	r3, #0
 801356e:	d01d      	beq.n	80135ac <USB_ActivateEndpoint+0x604>
 8013570:	687a      	ldr	r2, [r7, #4]
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	009b      	lsls	r3, r3, #2
 8013578:	4413      	add	r3, r2
 801357a:	881b      	ldrh	r3, [r3, #0]
 801357c:	b29b      	uxth	r3, r3
 801357e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013586:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801358a:	687a      	ldr	r2, [r7, #4]
 801358c:	683b      	ldr	r3, [r7, #0]
 801358e:	781b      	ldrb	r3, [r3, #0]
 8013590:	009b      	lsls	r3, r3, #2
 8013592:	441a      	add	r2, r3
 8013594:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013598:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801359c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80135a8:	b29b      	uxth	r3, r3
 80135aa:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	78db      	ldrb	r3, [r3, #3]
 80135b0:	2b01      	cmp	r3, #1
 80135b2:	d024      	beq.n	80135fe <USB_ActivateEndpoint+0x656>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80135b4:	687a      	ldr	r2, [r7, #4]
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	781b      	ldrb	r3, [r3, #0]
 80135ba:	009b      	lsls	r3, r3, #2
 80135bc:	4413      	add	r3, r2
 80135be:	881b      	ldrh	r3, [r3, #0]
 80135c0:	b29b      	uxth	r3, r3
 80135c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80135c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80135ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80135ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80135d2:	f083 0320 	eor.w	r3, r3, #32
 80135d6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80135da:	687a      	ldr	r2, [r7, #4]
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	009b      	lsls	r3, r3, #2
 80135e2:	441a      	add	r2, r3
 80135e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80135e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80135ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80135f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80135f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80135f8:	b29b      	uxth	r3, r3
 80135fa:	8013      	strh	r3, [r2, #0]
 80135fc:	e01d      	b.n	801363a <USB_ActivateEndpoint+0x692>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	781b      	ldrb	r3, [r3, #0]
 8013604:	009b      	lsls	r3, r3, #2
 8013606:	4413      	add	r3, r2
 8013608:	881b      	ldrh	r3, [r3, #0]
 801360a:	b29b      	uxth	r3, r3
 801360c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013614:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	683b      	ldr	r3, [r7, #0]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	441a      	add	r2, r3
 8013622:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801362a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801362e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013632:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013636:	b29b      	uxth	r3, r3
 8013638:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801363a:	687a      	ldr	r2, [r7, #4]
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	009b      	lsls	r3, r3, #2
 8013642:	4413      	add	r3, r2
 8013644:	881b      	ldrh	r3, [r3, #0]
 8013646:	b29b      	uxth	r3, r3
 8013648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801364c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013650:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	683b      	ldr	r3, [r7, #0]
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	009b      	lsls	r3, r3, #2
 801365a:	441a      	add	r2, r3
 801365c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801365e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801366a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801366e:	b29b      	uxth	r3, r3
 8013670:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8013672:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8013676:	4618      	mov	r0, r3
 8013678:	376c      	adds	r7, #108	; 0x6c
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr
 8013682:	bf00      	nop

08013684 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013684:	b480      	push	{r7}
 8013686:	b08d      	sub	sp, #52	; 0x34
 8013688:	af00      	add	r7, sp, #0
 801368a:	6078      	str	r0, [r7, #4]
 801368c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	7b1b      	ldrb	r3, [r3, #12]
 8013692:	2b00      	cmp	r3, #0
 8013694:	f040 808e 	bne.w	80137b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	785b      	ldrb	r3, [r3, #1]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d044      	beq.n	801372a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80136a0:	687a      	ldr	r2, [r7, #4]
 80136a2:	683b      	ldr	r3, [r7, #0]
 80136a4:	781b      	ldrb	r3, [r3, #0]
 80136a6:	009b      	lsls	r3, r3, #2
 80136a8:	4413      	add	r3, r2
 80136aa:	881b      	ldrh	r3, [r3, #0]
 80136ac:	81bb      	strh	r3, [r7, #12]
 80136ae:	89bb      	ldrh	r3, [r7, #12]
 80136b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d01b      	beq.n	80136f0 <USB_DeactivateEndpoint+0x6c>
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	009b      	lsls	r3, r3, #2
 80136c0:	4413      	add	r3, r2
 80136c2:	881b      	ldrh	r3, [r3, #0]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80136ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80136ce:	817b      	strh	r3, [r7, #10]
 80136d0:	687a      	ldr	r2, [r7, #4]
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	781b      	ldrb	r3, [r3, #0]
 80136d6:	009b      	lsls	r3, r3, #2
 80136d8:	441a      	add	r2, r3
 80136da:	897b      	ldrh	r3, [r7, #10]
 80136dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80136e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80136e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80136e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80136f0:	687a      	ldr	r2, [r7, #4]
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	781b      	ldrb	r3, [r3, #0]
 80136f6:	009b      	lsls	r3, r3, #2
 80136f8:	4413      	add	r3, r2
 80136fa:	881b      	ldrh	r3, [r3, #0]
 80136fc:	b29b      	uxth	r3, r3
 80136fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013706:	813b      	strh	r3, [r7, #8]
 8013708:	687a      	ldr	r2, [r7, #4]
 801370a:	683b      	ldr	r3, [r7, #0]
 801370c:	781b      	ldrb	r3, [r3, #0]
 801370e:	009b      	lsls	r3, r3, #2
 8013710:	441a      	add	r2, r3
 8013712:	893b      	ldrh	r3, [r7, #8]
 8013714:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013718:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801371c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013724:	b29b      	uxth	r3, r3
 8013726:	8013      	strh	r3, [r2, #0]
 8013728:	e192      	b.n	8013a50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 801372a:	687a      	ldr	r2, [r7, #4]
 801372c:	683b      	ldr	r3, [r7, #0]
 801372e:	781b      	ldrb	r3, [r3, #0]
 8013730:	009b      	lsls	r3, r3, #2
 8013732:	4413      	add	r3, r2
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	827b      	strh	r3, [r7, #18]
 8013738:	8a7b      	ldrh	r3, [r7, #18]
 801373a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801373e:	2b00      	cmp	r3, #0
 8013740:	d01b      	beq.n	801377a <USB_DeactivateEndpoint+0xf6>
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	683b      	ldr	r3, [r7, #0]
 8013746:	781b      	ldrb	r3, [r3, #0]
 8013748:	009b      	lsls	r3, r3, #2
 801374a:	4413      	add	r3, r2
 801374c:	881b      	ldrh	r3, [r3, #0]
 801374e:	b29b      	uxth	r3, r3
 8013750:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013754:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013758:	823b      	strh	r3, [r7, #16]
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	781b      	ldrb	r3, [r3, #0]
 8013760:	009b      	lsls	r3, r3, #2
 8013762:	441a      	add	r2, r3
 8013764:	8a3b      	ldrh	r3, [r7, #16]
 8013766:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801376a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801376e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013776:	b29b      	uxth	r3, r3
 8013778:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801377a:	687a      	ldr	r2, [r7, #4]
 801377c:	683b      	ldr	r3, [r7, #0]
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	4413      	add	r3, r2
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	b29b      	uxth	r3, r3
 8013788:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801378c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013790:	81fb      	strh	r3, [r7, #14]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	683b      	ldr	r3, [r7, #0]
 8013796:	781b      	ldrb	r3, [r3, #0]
 8013798:	009b      	lsls	r3, r3, #2
 801379a:	441a      	add	r2, r3
 801379c:	89fb      	ldrh	r3, [r7, #14]
 801379e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80137a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80137aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	8013      	strh	r3, [r2, #0]
 80137b2:	e14d      	b.n	8013a50 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80137b4:	683b      	ldr	r3, [r7, #0]
 80137b6:	785b      	ldrb	r3, [r3, #1]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	f040 80a5 	bne.w	8013908 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80137be:	687a      	ldr	r2, [r7, #4]
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	881b      	ldrh	r3, [r3, #0]
 80137ca:	843b      	strh	r3, [r7, #32]
 80137cc:	8c3b      	ldrh	r3, [r7, #32]
 80137ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d01b      	beq.n	801380e <USB_DeactivateEndpoint+0x18a>
 80137d6:	687a      	ldr	r2, [r7, #4]
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	4413      	add	r3, r2
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80137e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80137ec:	83fb      	strh	r3, [r7, #30]
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	781b      	ldrb	r3, [r3, #0]
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	441a      	add	r2, r3
 80137f8:	8bfb      	ldrh	r3, [r7, #30]
 80137fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80137fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013802:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013806:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801380a:	b29b      	uxth	r3, r3
 801380c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	781b      	ldrb	r3, [r3, #0]
 8013814:	009b      	lsls	r3, r3, #2
 8013816:	4413      	add	r3, r2
 8013818:	881b      	ldrh	r3, [r3, #0]
 801381a:	83bb      	strh	r3, [r7, #28]
 801381c:	8bbb      	ldrh	r3, [r7, #28]
 801381e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013822:	2b00      	cmp	r3, #0
 8013824:	d01b      	beq.n	801385e <USB_DeactivateEndpoint+0x1da>
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	009b      	lsls	r3, r3, #2
 801382e:	4413      	add	r3, r2
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	b29b      	uxth	r3, r3
 8013834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801383c:	837b      	strh	r3, [r7, #26]
 801383e:	687a      	ldr	r2, [r7, #4]
 8013840:	683b      	ldr	r3, [r7, #0]
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	009b      	lsls	r3, r3, #2
 8013846:	441a      	add	r2, r3
 8013848:	8b7b      	ldrh	r3, [r7, #26]
 801384a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801384e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013856:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 801385a:	b29b      	uxth	r3, r3
 801385c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	683b      	ldr	r3, [r7, #0]
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	009b      	lsls	r3, r3, #2
 8013866:	4413      	add	r3, r2
 8013868:	881b      	ldrh	r3, [r3, #0]
 801386a:	b29b      	uxth	r3, r3
 801386c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013870:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013874:	833b      	strh	r3, [r7, #24]
 8013876:	687a      	ldr	r2, [r7, #4]
 8013878:	683b      	ldr	r3, [r7, #0]
 801387a:	781b      	ldrb	r3, [r3, #0]
 801387c:	009b      	lsls	r3, r3, #2
 801387e:	441a      	add	r2, r3
 8013880:	8b3b      	ldrh	r3, [r7, #24]
 8013882:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013886:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801388a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801388e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8013892:	b29b      	uxth	r3, r3
 8013894:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013896:	687a      	ldr	r2, [r7, #4]
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	009b      	lsls	r3, r3, #2
 801389e:	4413      	add	r3, r2
 80138a0:	881b      	ldrh	r3, [r3, #0]
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80138a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80138ac:	82fb      	strh	r3, [r7, #22]
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	441a      	add	r2, r3
 80138b8:	8afb      	ldrh	r3, [r7, #22]
 80138ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80138be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80138c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80138c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80138ca:	b29b      	uxth	r3, r3
 80138cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	683b      	ldr	r3, [r7, #0]
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	009b      	lsls	r3, r3, #2
 80138d6:	4413      	add	r3, r2
 80138d8:	881b      	ldrh	r3, [r3, #0]
 80138da:	b29b      	uxth	r3, r3
 80138dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80138e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80138e4:	82bb      	strh	r3, [r7, #20]
 80138e6:	687a      	ldr	r2, [r7, #4]
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	441a      	add	r2, r3
 80138f0:	8abb      	ldrh	r3, [r7, #20]
 80138f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80138f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80138fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80138fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013902:	b29b      	uxth	r3, r3
 8013904:	8013      	strh	r3, [r2, #0]
 8013906:	e0a3      	b.n	8013a50 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013908:	687a      	ldr	r2, [r7, #4]
 801390a:	683b      	ldr	r3, [r7, #0]
 801390c:	781b      	ldrb	r3, [r3, #0]
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	4413      	add	r3, r2
 8013912:	881b      	ldrh	r3, [r3, #0]
 8013914:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8013916:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801391c:	2b00      	cmp	r3, #0
 801391e:	d01b      	beq.n	8013958 <USB_DeactivateEndpoint+0x2d4>
 8013920:	687a      	ldr	r2, [r7, #4]
 8013922:	683b      	ldr	r3, [r7, #0]
 8013924:	781b      	ldrb	r3, [r3, #0]
 8013926:	009b      	lsls	r3, r3, #2
 8013928:	4413      	add	r3, r2
 801392a:	881b      	ldrh	r3, [r3, #0]
 801392c:	b29b      	uxth	r3, r3
 801392e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013936:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8013938:	687a      	ldr	r2, [r7, #4]
 801393a:	683b      	ldr	r3, [r7, #0]
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	441a      	add	r2, r3
 8013942:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013944:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013948:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013954:	b29b      	uxth	r3, r3
 8013956:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8013958:	687a      	ldr	r2, [r7, #4]
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	781b      	ldrb	r3, [r3, #0]
 801395e:	009b      	lsls	r3, r3, #2
 8013960:	4413      	add	r3, r2
 8013962:	881b      	ldrh	r3, [r3, #0]
 8013964:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013966:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801396c:	2b00      	cmp	r3, #0
 801396e:	d01b      	beq.n	80139a8 <USB_DeactivateEndpoint+0x324>
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	4413      	add	r3, r2
 801397a:	881b      	ldrh	r3, [r3, #0]
 801397c:	b29b      	uxth	r3, r3
 801397e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013986:	853b      	strh	r3, [r7, #40]	; 0x28
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	683b      	ldr	r3, [r7, #0]
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	441a      	add	r2, r3
 8013992:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013994:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013998:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801399c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80139a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80139a8:	687a      	ldr	r2, [r7, #4]
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	781b      	ldrb	r3, [r3, #0]
 80139ae:	009b      	lsls	r3, r3, #2
 80139b0:	4413      	add	r3, r2
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	b29b      	uxth	r3, r3
 80139b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80139ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80139be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	781b      	ldrb	r3, [r3, #0]
 80139c6:	009b      	lsls	r3, r3, #2
 80139c8:	441a      	add	r2, r3
 80139ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80139cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80139d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80139d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80139d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80139dc:	b29b      	uxth	r3, r3
 80139de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80139e0:	687a      	ldr	r2, [r7, #4]
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	4413      	add	r3, r2
 80139ea:	881b      	ldrh	r3, [r3, #0]
 80139ec:	b29b      	uxth	r3, r3
 80139ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80139f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80139f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	683b      	ldr	r3, [r7, #0]
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	009b      	lsls	r3, r3, #2
 8013a00:	441a      	add	r2, r3
 8013a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013a08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a14:	b29b      	uxth	r3, r3
 8013a16:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	683b      	ldr	r3, [r7, #0]
 8013a1c:	781b      	ldrb	r3, [r3, #0]
 8013a1e:	009b      	lsls	r3, r3, #2
 8013a20:	4413      	add	r3, r2
 8013a22:	881b      	ldrh	r3, [r3, #0]
 8013a24:	b29b      	uxth	r3, r3
 8013a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8013a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013a2e:	847b      	strh	r3, [r7, #34]	; 0x22
 8013a30:	687a      	ldr	r2, [r7, #4]
 8013a32:	683b      	ldr	r3, [r7, #0]
 8013a34:	781b      	ldrb	r3, [r3, #0]
 8013a36:	009b      	lsls	r3, r3, #2
 8013a38:	441a      	add	r2, r3
 8013a3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013a4c:	b29b      	uxth	r3, r3
 8013a4e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8013a50:	2300      	movs	r3, #0
}
 8013a52:	4618      	mov	r0, r3
 8013a54:	3734      	adds	r7, #52	; 0x34
 8013a56:	46bd      	mov	sp, r7
 8013a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5c:	4770      	bx	lr

08013a5e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013a5e:	b580      	push	{r7, lr}
 8013a60:	b0cc      	sub	sp, #304	; 0x130
 8013a62:	af00      	add	r7, sp, #0
 8013a64:	1d3b      	adds	r3, r7, #4
 8013a66:	6018      	str	r0, [r3, #0]
 8013a68:	463b      	mov	r3, r7
 8013a6a:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a6c:	463b      	mov	r3, r7
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	785b      	ldrb	r3, [r3, #1]
 8013a72:	2b01      	cmp	r3, #1
 8013a74:	f040 872e 	bne.w	80148d4 <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8013a78:	463b      	mov	r3, r7
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	699a      	ldr	r2, [r3, #24]
 8013a7e:	463b      	mov	r3, r7
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	691b      	ldr	r3, [r3, #16]
 8013a84:	429a      	cmp	r2, r3
 8013a86:	d905      	bls.n	8013a94 <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 8013a88:	463b      	mov	r3, r7
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	691b      	ldr	r3, [r3, #16]
 8013a8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8013a92:	e004      	b.n	8013a9e <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8013a94:	463b      	mov	r3, r7
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	699b      	ldr	r3, [r3, #24]
 8013a9a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8013a9e:	463b      	mov	r3, r7
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	7b1b      	ldrb	r3, [r3, #12]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d134      	bne.n	8013b12 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8013aa8:	463b      	mov	r3, r7
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	6959      	ldr	r1, [r3, #20]
 8013aae:	463b      	mov	r3, r7
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	88da      	ldrh	r2, [r3, #6]
 8013ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	1d38      	adds	r0, r7, #4
 8013abc:	6800      	ldr	r0, [r0, #0]
 8013abe:	f001 fc20 	bl	8015302 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8013ac2:	f107 0310 	add.w	r3, r7, #16
 8013ac6:	1d3a      	adds	r2, r7, #4
 8013ac8:	6812      	ldr	r2, [r2, #0]
 8013aca:	601a      	str	r2, [r3, #0]
 8013acc:	1d3b      	adds	r3, r7, #4
 8013ace:	681b      	ldr	r3, [r3, #0]
 8013ad0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ad4:	b29b      	uxth	r3, r3
 8013ad6:	4619      	mov	r1, r3
 8013ad8:	f107 0310 	add.w	r3, r7, #16
 8013adc:	f107 0210 	add.w	r2, r7, #16
 8013ae0:	6812      	ldr	r2, [r2, #0]
 8013ae2:	440a      	add	r2, r1
 8013ae4:	601a      	str	r2, [r3, #0]
 8013ae6:	463b      	mov	r3, r7
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	781b      	ldrb	r3, [r3, #0]
 8013aec:	00da      	lsls	r2, r3, #3
 8013aee:	f107 0310 	add.w	r3, r7, #16
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4413      	add	r3, r2
 8013af6:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8013afa:	f107 030c 	add.w	r3, r7, #12
 8013afe:	601a      	str	r2, [r3, #0]
 8013b00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013b04:	b29a      	uxth	r2, r3
 8013b06:	f107 030c 	add.w	r3, r7, #12
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	801a      	strh	r2, [r3, #0]
 8013b0e:	f000 beac 	b.w	801486a <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8013b12:	463b      	mov	r3, r7
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	78db      	ldrb	r3, [r3, #3]
 8013b18:	2b02      	cmp	r3, #2
 8013b1a:	f040 838c 	bne.w	8014236 <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8013b1e:	463b      	mov	r3, r7
 8013b20:	681b      	ldr	r3, [r3, #0]
 8013b22:	6a1a      	ldr	r2, [r3, #32]
 8013b24:	463b      	mov	r3, r7
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	691b      	ldr	r3, [r3, #16]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	f240 8330 	bls.w	8014190 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8013b30:	1d3b      	adds	r3, r7, #4
 8013b32:	681a      	ldr	r2, [r3, #0]
 8013b34:	463b      	mov	r3, r7
 8013b36:	681b      	ldr	r3, [r3, #0]
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	4413      	add	r3, r2
 8013b3e:	881b      	ldrh	r3, [r3, #0]
 8013b40:	b29b      	uxth	r3, r3
 8013b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8013b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8013b4a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8013b4e:	1d3b      	adds	r3, r7, #4
 8013b50:	681a      	ldr	r2, [r3, #0]
 8013b52:	463b      	mov	r3, r7
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	781b      	ldrb	r3, [r3, #0]
 8013b58:	009b      	lsls	r3, r3, #2
 8013b5a:	441a      	add	r2, r3
 8013b5c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8013b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8013b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8013b68:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8013b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013b70:	b29b      	uxth	r3, r3
 8013b72:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8013b74:	463b      	mov	r3, r7
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	6a1a      	ldr	r2, [r3, #32]
 8013b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013b7e:	1ad2      	subs	r2, r2, r3
 8013b80:	463b      	mov	r3, r7
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8013b86:	1d3b      	adds	r3, r7, #4
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	463b      	mov	r3, r7
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	781b      	ldrb	r3, [r3, #0]
 8013b90:	009b      	lsls	r3, r3, #2
 8013b92:	4413      	add	r3, r2
 8013b94:	881b      	ldrh	r3, [r3, #0]
 8013b96:	b29b      	uxth	r3, r3
 8013b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f000 819e 	beq.w	8013ede <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8013ba2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013ba6:	1d3a      	adds	r2, r7, #4
 8013ba8:	6812      	ldr	r2, [r2, #0]
 8013baa:	601a      	str	r2, [r3, #0]
 8013bac:	463b      	mov	r3, r7
 8013bae:	681b      	ldr	r3, [r3, #0]
 8013bb0:	785b      	ldrb	r3, [r3, #1]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d17a      	bne.n	8013cac <USB_EPStartXfer+0x24e>
 8013bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bba:	1d3a      	adds	r2, r7, #4
 8013bbc:	6812      	ldr	r2, [r2, #0]
 8013bbe:	601a      	str	r2, [r3, #0]
 8013bc0:	1d3b      	adds	r3, r7, #4
 8013bc2:	681b      	ldr	r3, [r3, #0]
 8013bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013bc8:	b29b      	uxth	r3, r3
 8013bca:	4619      	mov	r1, r3
 8013bcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013bd0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8013bd4:	6812      	ldr	r2, [r2, #0]
 8013bd6:	440a      	add	r2, r1
 8013bd8:	601a      	str	r2, [r3, #0]
 8013bda:	463b      	mov	r3, r7
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	781b      	ldrb	r3, [r3, #0]
 8013be0:	00da      	lsls	r2, r3, #3
 8013be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4413      	add	r3, r2
 8013bea:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8013bee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013bf2:	601a      	str	r2, [r3, #0]
 8013bf4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d11a      	bne.n	8013c32 <USB_EPStartXfer+0x1d4>
 8013bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	881b      	ldrh	r3, [r3, #0]
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013c0a:	b29a      	uxth	r2, r3
 8013c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	801a      	strh	r2, [r3, #0]
 8013c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	881b      	ldrh	r3, [r3, #0]
 8013c1c:	b29b      	uxth	r3, r3
 8013c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c2c:	681b      	ldr	r3, [r3, #0]
 8013c2e:	801a      	strh	r2, [r3, #0]
 8013c30:	e062      	b.n	8013cf8 <USB_EPStartXfer+0x29a>
 8013c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c36:	2b3e      	cmp	r3, #62	; 0x3e
 8013c38:	d819      	bhi.n	8013c6e <USB_EPStartXfer+0x210>
 8013c3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c3e:	085b      	lsrs	r3, r3, #1
 8013c40:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013c44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c48:	f003 0301 	and.w	r3, r3, #1
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d004      	beq.n	8013c5a <USB_EPStartXfer+0x1fc>
 8013c50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c54:	3301      	adds	r3, #1
 8013c56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c5e:	b29b      	uxth	r3, r3
 8013c60:	029b      	lsls	r3, r3, #10
 8013c62:	b29a      	uxth	r2, r3
 8013c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	801a      	strh	r2, [r3, #0]
 8013c6c:	e044      	b.n	8013cf8 <USB_EPStartXfer+0x29a>
 8013c6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c72:	095b      	lsrs	r3, r3, #5
 8013c74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013c78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013c7c:	f003 031f 	and.w	r3, r3, #31
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d104      	bne.n	8013c8e <USB_EPStartXfer+0x230>
 8013c84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c88:	3b01      	subs	r3, #1
 8013c8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8013c8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013c92:	b29b      	uxth	r3, r3
 8013c94:	029b      	lsls	r3, r3, #10
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013c9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	801a      	strh	r2, [r3, #0]
 8013caa:	e025      	b.n	8013cf8 <USB_EPStartXfer+0x29a>
 8013cac:	463b      	mov	r3, r7
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	785b      	ldrb	r3, [r3, #1]
 8013cb2:	2b01      	cmp	r3, #1
 8013cb4:	d120      	bne.n	8013cf8 <USB_EPStartXfer+0x29a>
 8013cb6:	1d3b      	adds	r3, r7, #4
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013cbe:	b29b      	uxth	r3, r3
 8013cc0:	4619      	mov	r1, r3
 8013cc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cc6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8013cca:	6812      	ldr	r2, [r2, #0]
 8013ccc:	440a      	add	r2, r1
 8013cce:	601a      	str	r2, [r3, #0]
 8013cd0:	463b      	mov	r3, r7
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	781b      	ldrb	r3, [r3, #0]
 8013cd6:	00da      	lsls	r2, r3, #3
 8013cd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4413      	add	r3, r2
 8013ce0:	f203 4206 	addw	r2, r3, #1030	; 0x406
 8013ce4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013ce8:	601a      	str	r2, [r3, #0]
 8013cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013cee:	b29a      	uxth	r2, r3
 8013cf0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8013cf8:	463b      	mov	r3, r7
 8013cfa:	681b      	ldr	r3, [r3, #0]
 8013cfc:	895b      	ldrh	r3, [r3, #10]
 8013cfe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013d02:	463b      	mov	r3, r7
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6959      	ldr	r1, [r3, #20]
 8013d08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d0c:	b29b      	uxth	r3, r3
 8013d0e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013d12:	1d38      	adds	r0, r7, #4
 8013d14:	6800      	ldr	r0, [r0, #0]
 8013d16:	f001 faf4 	bl	8015302 <USB_WritePMA>
            ep->xfer_buff += len;
 8013d1a:	463b      	mov	r3, r7
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	695a      	ldr	r2, [r3, #20]
 8013d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d24:	441a      	add	r2, r3
 8013d26:	463b      	mov	r3, r7
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8013d2c:	463b      	mov	r3, r7
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	6a1a      	ldr	r2, [r3, #32]
 8013d32:	463b      	mov	r3, r7
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	691b      	ldr	r3, [r3, #16]
 8013d38:	429a      	cmp	r2, r3
 8013d3a:	d909      	bls.n	8013d50 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8013d3c:	463b      	mov	r3, r7
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	6a1a      	ldr	r2, [r3, #32]
 8013d42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013d46:	1ad2      	subs	r2, r2, r3
 8013d48:	463b      	mov	r3, r7
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	621a      	str	r2, [r3, #32]
 8013d4e:	e008      	b.n	8013d62 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8013d50:	463b      	mov	r3, r7
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8013d5a:	463b      	mov	r3, r7
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013d62:	463b      	mov	r3, r7
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	785b      	ldrb	r3, [r3, #1]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d17a      	bne.n	8013e62 <USB_EPStartXfer+0x404>
 8013d6c:	f107 0318 	add.w	r3, r7, #24
 8013d70:	1d3a      	adds	r2, r7, #4
 8013d72:	6812      	ldr	r2, [r2, #0]
 8013d74:	601a      	str	r2, [r3, #0]
 8013d76:	1d3b      	adds	r3, r7, #4
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d7e:	b29b      	uxth	r3, r3
 8013d80:	4619      	mov	r1, r3
 8013d82:	f107 0318 	add.w	r3, r7, #24
 8013d86:	f107 0218 	add.w	r2, r7, #24
 8013d8a:	6812      	ldr	r2, [r2, #0]
 8013d8c:	440a      	add	r2, r1
 8013d8e:	601a      	str	r2, [r3, #0]
 8013d90:	463b      	mov	r3, r7
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	00da      	lsls	r2, r3, #3
 8013d98:	f107 0318 	add.w	r3, r7, #24
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4413      	add	r3, r2
 8013da0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8013da4:	f107 0314 	add.w	r3, r7, #20
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d11a      	bne.n	8013de8 <USB_EPStartXfer+0x38a>
 8013db2:	f107 0314 	add.w	r3, r7, #20
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	b29b      	uxth	r3, r3
 8013dbc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013dc0:	b29a      	uxth	r2, r3
 8013dc2:	f107 0314 	add.w	r3, r7, #20
 8013dc6:	681b      	ldr	r3, [r3, #0]
 8013dc8:	801a      	strh	r2, [r3, #0]
 8013dca:	f107 0314 	add.w	r3, r7, #20
 8013dce:	681b      	ldr	r3, [r3, #0]
 8013dd0:	881b      	ldrh	r3, [r3, #0]
 8013dd2:	b29b      	uxth	r3, r3
 8013dd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013dd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013ddc:	b29a      	uxth	r2, r3
 8013dde:	f107 0314 	add.w	r3, r7, #20
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	801a      	strh	r2, [r3, #0]
 8013de6:	e067      	b.n	8013eb8 <USB_EPStartXfer+0x45a>
 8013de8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013dec:	2b3e      	cmp	r3, #62	; 0x3e
 8013dee:	d819      	bhi.n	8013e24 <USB_EPStartXfer+0x3c6>
 8013df0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013df4:	085b      	lsrs	r3, r3, #1
 8013df6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8013dfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013dfe:	f003 0301 	and.w	r3, r3, #1
 8013e02:	2b00      	cmp	r3, #0
 8013e04:	d004      	beq.n	8013e10 <USB_EPStartXfer+0x3b2>
 8013e06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e0a:	3301      	adds	r3, #1
 8013e0c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8013e10:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e14:	b29b      	uxth	r3, r3
 8013e16:	029b      	lsls	r3, r3, #10
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	f107 0314 	add.w	r3, r7, #20
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	801a      	strh	r2, [r3, #0]
 8013e22:	e049      	b.n	8013eb8 <USB_EPStartXfer+0x45a>
 8013e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013e28:	095b      	lsrs	r3, r3, #5
 8013e2a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8013e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013e32:	f003 031f 	and.w	r3, r3, #31
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d104      	bne.n	8013e44 <USB_EPStartXfer+0x3e6>
 8013e3a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e3e:	3b01      	subs	r3, #1
 8013e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8013e44:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8013e48:	b29b      	uxth	r3, r3
 8013e4a:	029b      	lsls	r3, r3, #10
 8013e4c:	b29b      	uxth	r3, r3
 8013e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013e56:	b29a      	uxth	r2, r3
 8013e58:	f107 0314 	add.w	r3, r7, #20
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	801a      	strh	r2, [r3, #0]
 8013e60:	e02a      	b.n	8013eb8 <USB_EPStartXfer+0x45a>
 8013e62:	463b      	mov	r3, r7
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	785b      	ldrb	r3, [r3, #1]
 8013e68:	2b01      	cmp	r3, #1
 8013e6a:	d125      	bne.n	8013eb8 <USB_EPStartXfer+0x45a>
 8013e6c:	f107 0320 	add.w	r3, r7, #32
 8013e70:	1d3a      	adds	r2, r7, #4
 8013e72:	6812      	ldr	r2, [r2, #0]
 8013e74:	601a      	str	r2, [r3, #0]
 8013e76:	1d3b      	adds	r3, r7, #4
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013e7e:	b29b      	uxth	r3, r3
 8013e80:	4619      	mov	r1, r3
 8013e82:	f107 0320 	add.w	r3, r7, #32
 8013e86:	f107 0220 	add.w	r2, r7, #32
 8013e8a:	6812      	ldr	r2, [r2, #0]
 8013e8c:	440a      	add	r2, r1
 8013e8e:	601a      	str	r2, [r3, #0]
 8013e90:	463b      	mov	r3, r7
 8013e92:	681b      	ldr	r3, [r3, #0]
 8013e94:	781b      	ldrb	r3, [r3, #0]
 8013e96:	00da      	lsls	r2, r3, #3
 8013e98:	f107 0320 	add.w	r3, r7, #32
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	4413      	add	r3, r2
 8013ea0:	f203 4202 	addw	r2, r3, #1026	; 0x402
 8013ea4:	f107 031c 	add.w	r3, r7, #28
 8013ea8:	601a      	str	r2, [r3, #0]
 8013eaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013eae:	b29a      	uxth	r2, r3
 8013eb0:	f107 031c 	add.w	r3, r7, #28
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013eb8:	463b      	mov	r3, r7
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	891b      	ldrh	r3, [r3, #8]
 8013ebe:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ec2:	463b      	mov	r3, r7
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	6959      	ldr	r1, [r3, #20]
 8013ec8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013ecc:	b29b      	uxth	r3, r3
 8013ece:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8013ed2:	1d38      	adds	r0, r7, #4
 8013ed4:	6800      	ldr	r0, [r0, #0]
 8013ed6:	f001 fa14 	bl	8015302 <USB_WritePMA>
 8013eda:	f000 bcc6 	b.w	801486a <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8013ede:	463b      	mov	r3, r7
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	785b      	ldrb	r3, [r3, #1]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d164      	bne.n	8013fb2 <USB_EPStartXfer+0x554>
 8013ee8:	1d3b      	adds	r3, r7, #4
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	64bb      	str	r3, [r7, #72]	; 0x48
 8013eee:	1d3b      	adds	r3, r7, #4
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013ef6:	b29b      	uxth	r3, r3
 8013ef8:	461a      	mov	r2, r3
 8013efa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013efc:	4413      	add	r3, r2
 8013efe:	64bb      	str	r3, [r7, #72]	; 0x48
 8013f00:	463b      	mov	r3, r7
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	781b      	ldrb	r3, [r3, #0]
 8013f06:	00da      	lsls	r2, r3, #3
 8013f08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f0a:	4413      	add	r3, r2
 8013f0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013f10:	647b      	str	r3, [r7, #68]	; 0x44
 8013f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d112      	bne.n	8013f40 <USB_EPStartXfer+0x4e2>
 8013f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f1c:	881b      	ldrh	r3, [r3, #0]
 8013f1e:	b29b      	uxth	r3, r3
 8013f20:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8013f24:	b29a      	uxth	r2, r3
 8013f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f28:	801a      	strh	r2, [r3, #0]
 8013f2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f2c:	881b      	ldrh	r3, [r3, #0]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013f38:	b29a      	uxth	r2, r3
 8013f3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f3c:	801a      	strh	r2, [r3, #0]
 8013f3e:	e057      	b.n	8013ff0 <USB_EPStartXfer+0x592>
 8013f40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f44:	2b3e      	cmp	r3, #62	; 0x3e
 8013f46:	d817      	bhi.n	8013f78 <USB_EPStartXfer+0x51a>
 8013f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f4c:	085b      	lsrs	r3, r3, #1
 8013f4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f56:	f003 0301 	and.w	r3, r3, #1
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d004      	beq.n	8013f68 <USB_EPStartXfer+0x50a>
 8013f5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013f62:	3301      	adds	r3, #1
 8013f64:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013f68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013f6c:	b29b      	uxth	r3, r3
 8013f6e:	029b      	lsls	r3, r3, #10
 8013f70:	b29a      	uxth	r2, r3
 8013f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013f74:	801a      	strh	r2, [r3, #0]
 8013f76:	e03b      	b.n	8013ff0 <USB_EPStartXfer+0x592>
 8013f78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f7c:	095b      	lsrs	r3, r3, #5
 8013f7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013f82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013f86:	f003 031f 	and.w	r3, r3, #31
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d104      	bne.n	8013f98 <USB_EPStartXfer+0x53a>
 8013f8e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013f92:	3b01      	subs	r3, #1
 8013f94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8013f98:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013f9c:	b29b      	uxth	r3, r3
 8013f9e:	029b      	lsls	r3, r3, #10
 8013fa0:	b29b      	uxth	r3, r3
 8013fa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8013fa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8013faa:	b29a      	uxth	r2, r3
 8013fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013fae:	801a      	strh	r2, [r3, #0]
 8013fb0:	e01e      	b.n	8013ff0 <USB_EPStartXfer+0x592>
 8013fb2:	463b      	mov	r3, r7
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	785b      	ldrb	r3, [r3, #1]
 8013fb8:	2b01      	cmp	r3, #1
 8013fba:	d119      	bne.n	8013ff0 <USB_EPStartXfer+0x592>
 8013fbc:	1d3b      	adds	r3, r7, #4
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	653b      	str	r3, [r7, #80]	; 0x50
 8013fc2:	1d3b      	adds	r3, r7, #4
 8013fc4:	681b      	ldr	r3, [r3, #0]
 8013fc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013fca:	b29b      	uxth	r3, r3
 8013fcc:	461a      	mov	r2, r3
 8013fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fd0:	4413      	add	r3, r2
 8013fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8013fd4:	463b      	mov	r3, r7
 8013fd6:	681b      	ldr	r3, [r3, #0]
 8013fd8:	781b      	ldrb	r3, [r3, #0]
 8013fda:	00da      	lsls	r2, r3, #3
 8013fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013fde:	4413      	add	r3, r2
 8013fe0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013fe6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013fee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8013ff0:	463b      	mov	r3, r7
 8013ff2:	681b      	ldr	r3, [r3, #0]
 8013ff4:	891b      	ldrh	r3, [r3, #8]
 8013ff6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8013ffa:	463b      	mov	r3, r7
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	6959      	ldr	r1, [r3, #20]
 8014000:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014004:	b29b      	uxth	r3, r3
 8014006:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 801400a:	1d38      	adds	r0, r7, #4
 801400c:	6800      	ldr	r0, [r0, #0]
 801400e:	f001 f978 	bl	8015302 <USB_WritePMA>
            ep->xfer_buff += len;
 8014012:	463b      	mov	r3, r7
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	695a      	ldr	r2, [r3, #20]
 8014018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801401c:	441a      	add	r2, r3
 801401e:	463b      	mov	r3, r7
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8014024:	463b      	mov	r3, r7
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	6a1a      	ldr	r2, [r3, #32]
 801402a:	463b      	mov	r3, r7
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	691b      	ldr	r3, [r3, #16]
 8014030:	429a      	cmp	r2, r3
 8014032:	d909      	bls.n	8014048 <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 8014034:	463b      	mov	r3, r7
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	6a1a      	ldr	r2, [r3, #32]
 801403a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801403e:	1ad2      	subs	r2, r2, r3
 8014040:	463b      	mov	r3, r7
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	621a      	str	r2, [r3, #32]
 8014046:	e008      	b.n	801405a <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 8014048:	463b      	mov	r3, r7
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	6a1b      	ldr	r3, [r3, #32]
 801404e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8014052:	463b      	mov	r3, r7
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	2200      	movs	r2, #0
 8014058:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801405a:	1d3b      	adds	r3, r7, #4
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	643b      	str	r3, [r7, #64]	; 0x40
 8014060:	463b      	mov	r3, r7
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	785b      	ldrb	r3, [r3, #1]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d164      	bne.n	8014134 <USB_EPStartXfer+0x6d6>
 801406a:	1d3b      	adds	r3, r7, #4
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	63bb      	str	r3, [r7, #56]	; 0x38
 8014070:	1d3b      	adds	r3, r7, #4
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014078:	b29b      	uxth	r3, r3
 801407a:	461a      	mov	r2, r3
 801407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407e:	4413      	add	r3, r2
 8014080:	63bb      	str	r3, [r7, #56]	; 0x38
 8014082:	463b      	mov	r3, r7
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	00da      	lsls	r2, r3, #3
 801408a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408c:	4413      	add	r3, r2
 801408e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014092:	637b      	str	r3, [r7, #52]	; 0x34
 8014094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014098:	2b00      	cmp	r3, #0
 801409a:	d112      	bne.n	80140c2 <USB_EPStartXfer+0x664>
 801409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801409e:	881b      	ldrh	r3, [r3, #0]
 80140a0:	b29b      	uxth	r3, r3
 80140a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140aa:	801a      	strh	r2, [r3, #0]
 80140ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ae:	881b      	ldrh	r3, [r3, #0]
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80140b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140be:	801a      	strh	r2, [r3, #0]
 80140c0:	e054      	b.n	801416c <USB_EPStartXfer+0x70e>
 80140c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140c6:	2b3e      	cmp	r3, #62	; 0x3e
 80140c8:	d817      	bhi.n	80140fa <USB_EPStartXfer+0x69c>
 80140ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140ce:	085b      	lsrs	r3, r3, #1
 80140d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80140d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140d8:	f003 0301 	and.w	r3, r3, #1
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d004      	beq.n	80140ea <USB_EPStartXfer+0x68c>
 80140e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80140e4:	3301      	adds	r3, #1
 80140e6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80140ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80140ee:	b29b      	uxth	r3, r3
 80140f0:	029b      	lsls	r3, r3, #10
 80140f2:	b29a      	uxth	r2, r3
 80140f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140f6:	801a      	strh	r2, [r3, #0]
 80140f8:	e038      	b.n	801416c <USB_EPStartXfer+0x70e>
 80140fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80140fe:	095b      	lsrs	r3, r3, #5
 8014100:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8014104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014108:	f003 031f 	and.w	r3, r3, #31
 801410c:	2b00      	cmp	r3, #0
 801410e:	d104      	bne.n	801411a <USB_EPStartXfer+0x6bc>
 8014110:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8014114:	3b01      	subs	r3, #1
 8014116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 801411a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801411e:	b29b      	uxth	r3, r3
 8014120:	029b      	lsls	r3, r3, #10
 8014122:	b29b      	uxth	r3, r3
 8014124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801412c:	b29a      	uxth	r2, r3
 801412e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014130:	801a      	strh	r2, [r3, #0]
 8014132:	e01b      	b.n	801416c <USB_EPStartXfer+0x70e>
 8014134:	463b      	mov	r3, r7
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	785b      	ldrb	r3, [r3, #1]
 801413a:	2b01      	cmp	r3, #1
 801413c:	d116      	bne.n	801416c <USB_EPStartXfer+0x70e>
 801413e:	1d3b      	adds	r3, r7, #4
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014146:	b29b      	uxth	r3, r3
 8014148:	461a      	mov	r2, r3
 801414a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801414c:	4413      	add	r3, r2
 801414e:	643b      	str	r3, [r7, #64]	; 0x40
 8014150:	463b      	mov	r3, r7
 8014152:	681b      	ldr	r3, [r3, #0]
 8014154:	781b      	ldrb	r3, [r3, #0]
 8014156:	00da      	lsls	r2, r3, #3
 8014158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801415a:	4413      	add	r3, r2
 801415c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014160:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014162:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014166:	b29a      	uxth	r2, r3
 8014168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801416a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801416c:	463b      	mov	r3, r7
 801416e:	681b      	ldr	r3, [r3, #0]
 8014170:	895b      	ldrh	r3, [r3, #10]
 8014172:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014176:	463b      	mov	r3, r7
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	6959      	ldr	r1, [r3, #20]
 801417c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014180:	b29b      	uxth	r3, r3
 8014182:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8014186:	1d38      	adds	r0, r7, #4
 8014188:	6800      	ldr	r0, [r0, #0]
 801418a:	f001 f8ba 	bl	8015302 <USB_WritePMA>
 801418e:	e36c      	b.n	801486a <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8014190:	463b      	mov	r3, r7
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6a1b      	ldr	r3, [r3, #32]
 8014196:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 801419a:	1d3b      	adds	r3, r7, #4
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	463b      	mov	r3, r7
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	4413      	add	r3, r2
 80141a8:	881b      	ldrh	r3, [r3, #0]
 80141aa:	b29b      	uxth	r3, r3
 80141ac:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80141b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80141b4:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80141b8:	1d3b      	adds	r3, r7, #4
 80141ba:	681a      	ldr	r2, [r3, #0]
 80141bc:	463b      	mov	r3, r7
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	781b      	ldrb	r3, [r3, #0]
 80141c2:	009b      	lsls	r3, r3, #2
 80141c4:	441a      	add	r2, r3
 80141c6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80141ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80141ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80141d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80141d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141da:	b29b      	uxth	r3, r3
 80141dc:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80141de:	1d3b      	adds	r3, r7, #4
 80141e0:	681b      	ldr	r3, [r3, #0]
 80141e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80141e4:	1d3b      	adds	r3, r7, #4
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80141ec:	b29b      	uxth	r3, r3
 80141ee:	461a      	mov	r2, r3
 80141f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80141f2:	4413      	add	r3, r2
 80141f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80141f6:	463b      	mov	r3, r7
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	00da      	lsls	r2, r3, #3
 80141fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014200:	4413      	add	r3, r2
 8014202:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014206:	65bb      	str	r3, [r7, #88]	; 0x58
 8014208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801420c:	b29a      	uxth	r2, r3
 801420e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014210:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8014212:	463b      	mov	r3, r7
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	891b      	ldrh	r3, [r3, #8]
 8014218:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801421c:	463b      	mov	r3, r7
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	6959      	ldr	r1, [r3, #20]
 8014222:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014226:	b29b      	uxth	r3, r3
 8014228:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 801422c:	1d38      	adds	r0, r7, #4
 801422e:	6800      	ldr	r0, [r0, #0]
 8014230:	f001 f867 	bl	8015302 <USB_WritePMA>
 8014234:	e319      	b.n	801486a <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8014236:	1d3b      	adds	r3, r7, #4
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	463b      	mov	r3, r7
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	781b      	ldrb	r3, [r3, #0]
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	4413      	add	r3, r2
 8014244:	881b      	ldrh	r3, [r3, #0]
 8014246:	b29b      	uxth	r3, r3
 8014248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801424c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014250:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8014254:	1d3b      	adds	r3, r7, #4
 8014256:	681a      	ldr	r2, [r3, #0]
 8014258:	463b      	mov	r3, r7
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	781b      	ldrb	r3, [r3, #0]
 801425e:	009b      	lsls	r3, r3, #2
 8014260:	441a      	add	r2, r3
 8014262:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8014266:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801426a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801426e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8014272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014276:	b29b      	uxth	r3, r3
 8014278:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 801427a:	463b      	mov	r3, r7
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	6a1a      	ldr	r2, [r3, #32]
 8014280:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014284:	1ad2      	subs	r2, r2, r3
 8014286:	463b      	mov	r3, r7
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801428c:	1d3b      	adds	r3, r7, #4
 801428e:	681a      	ldr	r2, [r3, #0]
 8014290:	463b      	mov	r3, r7
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	781b      	ldrb	r3, [r3, #0]
 8014296:	009b      	lsls	r3, r3, #2
 8014298:	4413      	add	r3, r2
 801429a:	881b      	ldrh	r3, [r3, #0]
 801429c:	b29b      	uxth	r3, r3
 801429e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	f000 8162 	beq.w	801456c <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80142a8:	1d3b      	adds	r3, r7, #4
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80142b0:	463b      	mov	r3, r7
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	785b      	ldrb	r3, [r3, #1]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d164      	bne.n	8014384 <USB_EPStartXfer+0x926>
 80142ba:	1d3b      	adds	r3, r7, #4
 80142bc:	681b      	ldr	r3, [r3, #0]
 80142be:	67bb      	str	r3, [r7, #120]	; 0x78
 80142c0:	1d3b      	adds	r3, r7, #4
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80142c8:	b29b      	uxth	r3, r3
 80142ca:	461a      	mov	r2, r3
 80142cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142ce:	4413      	add	r3, r2
 80142d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80142d2:	463b      	mov	r3, r7
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	00da      	lsls	r2, r3, #3
 80142da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80142dc:	4413      	add	r3, r2
 80142de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80142e2:	677b      	str	r3, [r7, #116]	; 0x74
 80142e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	d112      	bne.n	8014312 <USB_EPStartXfer+0x8b4>
 80142ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142ee:	881b      	ldrh	r3, [r3, #0]
 80142f0:	b29b      	uxth	r3, r3
 80142f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80142f6:	b29a      	uxth	r2, r3
 80142f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142fa:	801a      	strh	r2, [r3, #0]
 80142fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80142fe:	881b      	ldrh	r3, [r3, #0]
 8014300:	b29b      	uxth	r3, r3
 8014302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801430a:	b29a      	uxth	r2, r3
 801430c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801430e:	801a      	strh	r2, [r3, #0]
 8014310:	e057      	b.n	80143c2 <USB_EPStartXfer+0x964>
 8014312:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014316:	2b3e      	cmp	r3, #62	; 0x3e
 8014318:	d817      	bhi.n	801434a <USB_EPStartXfer+0x8ec>
 801431a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801431e:	085b      	lsrs	r3, r3, #1
 8014320:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014324:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014328:	f003 0301 	and.w	r3, r3, #1
 801432c:	2b00      	cmp	r3, #0
 801432e:	d004      	beq.n	801433a <USB_EPStartXfer+0x8dc>
 8014330:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014334:	3301      	adds	r3, #1
 8014336:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801433a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801433e:	b29b      	uxth	r3, r3
 8014340:	029b      	lsls	r3, r3, #10
 8014342:	b29a      	uxth	r2, r3
 8014344:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014346:	801a      	strh	r2, [r3, #0]
 8014348:	e03b      	b.n	80143c2 <USB_EPStartXfer+0x964>
 801434a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801434e:	095b      	lsrs	r3, r3, #5
 8014350:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8014354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014358:	f003 031f 	and.w	r3, r3, #31
 801435c:	2b00      	cmp	r3, #0
 801435e:	d104      	bne.n	801436a <USB_EPStartXfer+0x90c>
 8014360:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8014364:	3b01      	subs	r3, #1
 8014366:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801436a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801436e:	b29b      	uxth	r3, r3
 8014370:	029b      	lsls	r3, r3, #10
 8014372:	b29b      	uxth	r3, r3
 8014374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801437c:	b29a      	uxth	r2, r3
 801437e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014380:	801a      	strh	r2, [r3, #0]
 8014382:	e01e      	b.n	80143c2 <USB_EPStartXfer+0x964>
 8014384:	463b      	mov	r3, r7
 8014386:	681b      	ldr	r3, [r3, #0]
 8014388:	785b      	ldrb	r3, [r3, #1]
 801438a:	2b01      	cmp	r3, #1
 801438c:	d119      	bne.n	80143c2 <USB_EPStartXfer+0x964>
 801438e:	1d3b      	adds	r3, r7, #4
 8014390:	681b      	ldr	r3, [r3, #0]
 8014392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014396:	b29b      	uxth	r3, r3
 8014398:	461a      	mov	r2, r3
 801439a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801439e:	4413      	add	r3, r2
 80143a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80143a4:	463b      	mov	r3, r7
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	781b      	ldrb	r3, [r3, #0]
 80143aa:	00da      	lsls	r2, r3, #3
 80143ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80143b0:	4413      	add	r3, r2
 80143b2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80143b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80143b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80143bc:	b29a      	uxth	r2, r3
 80143be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80143c2:	463b      	mov	r3, r7
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	895b      	ldrh	r3, [r3, #10]
 80143c8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80143cc:	463b      	mov	r3, r7
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	6959      	ldr	r1, [r3, #20]
 80143d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80143dc:	1d38      	adds	r0, r7, #4
 80143de:	6800      	ldr	r0, [r0, #0]
 80143e0:	f000 ff8f 	bl	8015302 <USB_WritePMA>
          ep->xfer_buff += len;
 80143e4:	463b      	mov	r3, r7
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	695a      	ldr	r2, [r3, #20]
 80143ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80143ee:	441a      	add	r2, r3
 80143f0:	463b      	mov	r3, r7
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80143f6:	463b      	mov	r3, r7
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	6a1a      	ldr	r2, [r3, #32]
 80143fc:	463b      	mov	r3, r7
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	691b      	ldr	r3, [r3, #16]
 8014402:	429a      	cmp	r2, r3
 8014404:	d909      	bls.n	801441a <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8014406:	463b      	mov	r3, r7
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	6a1a      	ldr	r2, [r3, #32]
 801440c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014410:	1ad2      	subs	r2, r2, r3
 8014412:	463b      	mov	r3, r7
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	621a      	str	r2, [r3, #32]
 8014418:	e008      	b.n	801442c <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 801441a:	463b      	mov	r3, r7
 801441c:	681b      	ldr	r3, [r3, #0]
 801441e:	6a1b      	ldr	r3, [r3, #32]
 8014420:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8014424:	463b      	mov	r3, r7
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	2200      	movs	r2, #0
 801442a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 801442c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014430:	2b00      	cmp	r3, #0
 8014432:	f000 821a 	beq.w	801486a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8014436:	463b      	mov	r3, r7
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	785b      	ldrb	r3, [r3, #1]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d164      	bne.n	801450a <USB_EPStartXfer+0xaac>
 8014440:	1d3b      	adds	r3, r7, #4
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	66bb      	str	r3, [r7, #104]	; 0x68
 8014446:	1d3b      	adds	r3, r7, #4
 8014448:	681b      	ldr	r3, [r3, #0]
 801444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801444e:	b29b      	uxth	r3, r3
 8014450:	461a      	mov	r2, r3
 8014452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014454:	4413      	add	r3, r2
 8014456:	66bb      	str	r3, [r7, #104]	; 0x68
 8014458:	463b      	mov	r3, r7
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	781b      	ldrb	r3, [r3, #0]
 801445e:	00da      	lsls	r2, r3, #3
 8014460:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014462:	4413      	add	r3, r2
 8014464:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014468:	667b      	str	r3, [r7, #100]	; 0x64
 801446a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801446e:	2b00      	cmp	r3, #0
 8014470:	d112      	bne.n	8014498 <USB_EPStartXfer+0xa3a>
 8014472:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014474:	881b      	ldrh	r3, [r3, #0]
 8014476:	b29b      	uxth	r3, r3
 8014478:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801447c:	b29a      	uxth	r2, r3
 801447e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014480:	801a      	strh	r2, [r3, #0]
 8014482:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014484:	881b      	ldrh	r3, [r3, #0]
 8014486:	b29b      	uxth	r3, r3
 8014488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801448c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014490:	b29a      	uxth	r2, r3
 8014492:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014494:	801a      	strh	r2, [r3, #0]
 8014496:	e057      	b.n	8014548 <USB_EPStartXfer+0xaea>
 8014498:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801449c:	2b3e      	cmp	r3, #62	; 0x3e
 801449e:	d817      	bhi.n	80144d0 <USB_EPStartXfer+0xa72>
 80144a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144a4:	085b      	lsrs	r3, r3, #1
 80144a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80144aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144ae:	f003 0301 	and.w	r3, r3, #1
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d004      	beq.n	80144c0 <USB_EPStartXfer+0xa62>
 80144b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80144ba:	3301      	adds	r3, #1
 80144bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80144c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	029b      	lsls	r3, r3, #10
 80144c8:	b29a      	uxth	r2, r3
 80144ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80144cc:	801a      	strh	r2, [r3, #0]
 80144ce:	e03b      	b.n	8014548 <USB_EPStartXfer+0xaea>
 80144d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144d4:	095b      	lsrs	r3, r3, #5
 80144d6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80144da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144de:	f003 031f 	and.w	r3, r3, #31
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d104      	bne.n	80144f0 <USB_EPStartXfer+0xa92>
 80144e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80144ea:	3b01      	subs	r3, #1
 80144ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80144f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80144f4:	b29b      	uxth	r3, r3
 80144f6:	029b      	lsls	r3, r3, #10
 80144f8:	b29b      	uxth	r3, r3
 80144fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80144fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014502:	b29a      	uxth	r2, r3
 8014504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8014506:	801a      	strh	r2, [r3, #0]
 8014508:	e01e      	b.n	8014548 <USB_EPStartXfer+0xaea>
 801450a:	463b      	mov	r3, r7
 801450c:	681b      	ldr	r3, [r3, #0]
 801450e:	785b      	ldrb	r3, [r3, #1]
 8014510:	2b01      	cmp	r3, #1
 8014512:	d119      	bne.n	8014548 <USB_EPStartXfer+0xaea>
 8014514:	1d3b      	adds	r3, r7, #4
 8014516:	681b      	ldr	r3, [r3, #0]
 8014518:	673b      	str	r3, [r7, #112]	; 0x70
 801451a:	1d3b      	adds	r3, r7, #4
 801451c:	681b      	ldr	r3, [r3, #0]
 801451e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014522:	b29b      	uxth	r3, r3
 8014524:	461a      	mov	r2, r3
 8014526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014528:	4413      	add	r3, r2
 801452a:	673b      	str	r3, [r7, #112]	; 0x70
 801452c:	463b      	mov	r3, r7
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	00da      	lsls	r2, r3, #3
 8014534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014536:	4413      	add	r3, r2
 8014538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801453c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801453e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014542:	b29a      	uxth	r2, r3
 8014544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014546:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8014548:	463b      	mov	r3, r7
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	891b      	ldrh	r3, [r3, #8]
 801454e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014552:	463b      	mov	r3, r7
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	6959      	ldr	r1, [r3, #20]
 8014558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801455c:	b29b      	uxth	r3, r3
 801455e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8014562:	1d38      	adds	r0, r7, #4
 8014564:	6800      	ldr	r0, [r0, #0]
 8014566:	f000 fecc 	bl	8015302 <USB_WritePMA>
 801456a:	e17e      	b.n	801486a <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801456c:	463b      	mov	r3, r7
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	785b      	ldrb	r3, [r3, #1]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d16f      	bne.n	8014656 <USB_EPStartXfer+0xbf8>
 8014576:	1d3b      	adds	r3, r7, #4
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801457e:	1d3b      	adds	r3, r7, #4
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014586:	b29b      	uxth	r3, r3
 8014588:	461a      	mov	r2, r3
 801458a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801458e:	4413      	add	r3, r2
 8014590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8014594:	463b      	mov	r3, r7
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	00da      	lsls	r2, r3, #3
 801459c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80145a0:	4413      	add	r3, r2
 80145a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80145a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80145aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d116      	bne.n	80145e0 <USB_EPStartXfer+0xb82>
 80145b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145b6:	881b      	ldrh	r3, [r3, #0]
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80145be:	b29a      	uxth	r2, r3
 80145c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145c4:	801a      	strh	r2, [r3, #0]
 80145c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145ca:	881b      	ldrh	r3, [r3, #0]
 80145cc:	b29b      	uxth	r3, r3
 80145ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80145d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80145d6:	b29a      	uxth	r2, r3
 80145d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80145dc:	801a      	strh	r2, [r3, #0]
 80145de:	e05f      	b.n	80146a0 <USB_EPStartXfer+0xc42>
 80145e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145e4:	2b3e      	cmp	r3, #62	; 0x3e
 80145e6:	d818      	bhi.n	801461a <USB_EPStartXfer+0xbbc>
 80145e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145ec:	085b      	lsrs	r3, r3, #1
 80145ee:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80145f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145f6:	f003 0301 	and.w	r3, r3, #1
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	d004      	beq.n	8014608 <USB_EPStartXfer+0xbaa>
 80145fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014602:	3301      	adds	r3, #1
 8014604:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014608:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801460c:	b29b      	uxth	r3, r3
 801460e:	029b      	lsls	r3, r3, #10
 8014610:	b29a      	uxth	r2, r3
 8014612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014616:	801a      	strh	r2, [r3, #0]
 8014618:	e042      	b.n	80146a0 <USB_EPStartXfer+0xc42>
 801461a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801461e:	095b      	lsrs	r3, r3, #5
 8014620:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8014624:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014628:	f003 031f 	and.w	r3, r3, #31
 801462c:	2b00      	cmp	r3, #0
 801462e:	d104      	bne.n	801463a <USB_EPStartXfer+0xbdc>
 8014630:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8014634:	3b01      	subs	r3, #1
 8014636:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 801463a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801463e:	b29b      	uxth	r3, r3
 8014640:	029b      	lsls	r3, r3, #10
 8014642:	b29b      	uxth	r3, r3
 8014644:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014648:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801464c:	b29a      	uxth	r2, r3
 801464e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014652:	801a      	strh	r2, [r3, #0]
 8014654:	e024      	b.n	80146a0 <USB_EPStartXfer+0xc42>
 8014656:	463b      	mov	r3, r7
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	785b      	ldrb	r3, [r3, #1]
 801465c:	2b01      	cmp	r3, #1
 801465e:	d11f      	bne.n	80146a0 <USB_EPStartXfer+0xc42>
 8014660:	1d3b      	adds	r3, r7, #4
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8014668:	1d3b      	adds	r3, r7, #4
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014670:	b29b      	uxth	r3, r3
 8014672:	461a      	mov	r2, r3
 8014674:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8014678:	4413      	add	r3, r2
 801467a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801467e:	463b      	mov	r3, r7
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	781b      	ldrb	r3, [r3, #0]
 8014684:	00da      	lsls	r2, r3, #3
 8014686:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801468a:	4413      	add	r3, r2
 801468c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014690:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8014694:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014698:	b29a      	uxth	r2, r3
 801469a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801469e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80146a0:	463b      	mov	r3, r7
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	891b      	ldrh	r3, [r3, #8]
 80146a6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80146aa:	463b      	mov	r3, r7
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	6959      	ldr	r1, [r3, #20]
 80146b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146b4:	b29b      	uxth	r3, r3
 80146b6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80146ba:	1d38      	adds	r0, r7, #4
 80146bc:	6800      	ldr	r0, [r0, #0]
 80146be:	f000 fe20 	bl	8015302 <USB_WritePMA>
          ep->xfer_buff += len;
 80146c2:	463b      	mov	r3, r7
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	695a      	ldr	r2, [r3, #20]
 80146c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146cc:	441a      	add	r2, r3
 80146ce:	463b      	mov	r3, r7
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80146d4:	463b      	mov	r3, r7
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	6a1a      	ldr	r2, [r3, #32]
 80146da:	463b      	mov	r3, r7
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	691b      	ldr	r3, [r3, #16]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d909      	bls.n	80146f8 <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 80146e4:	463b      	mov	r3, r7
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	6a1a      	ldr	r2, [r3, #32]
 80146ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80146ee:	1ad2      	subs	r2, r2, r3
 80146f0:	463b      	mov	r3, r7
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	621a      	str	r2, [r3, #32]
 80146f6:	e008      	b.n	801470a <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 80146f8:	463b      	mov	r3, r7
 80146fa:	681b      	ldr	r3, [r3, #0]
 80146fc:	6a1b      	ldr	r3, [r3, #32]
 80146fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8014702:	463b      	mov	r3, r7
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	2200      	movs	r2, #0
 8014708:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 801470a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801470e:	2b00      	cmp	r3, #0
 8014710:	f000 80ab 	beq.w	801486a <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8014714:	1d3b      	adds	r3, r7, #4
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801471c:	463b      	mov	r3, r7
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	785b      	ldrb	r3, [r3, #1]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d16f      	bne.n	8014806 <USB_EPStartXfer+0xda8>
 8014726:	1d3b      	adds	r3, r7, #4
 8014728:	681b      	ldr	r3, [r3, #0]
 801472a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801472e:	1d3b      	adds	r3, r7, #4
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014736:	b29b      	uxth	r3, r3
 8014738:	461a      	mov	r2, r3
 801473a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801473e:	4413      	add	r3, r2
 8014740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8014744:	463b      	mov	r3, r7
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	781b      	ldrb	r3, [r3, #0]
 801474a:	00da      	lsls	r2, r3, #3
 801474c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8014750:	4413      	add	r3, r2
 8014752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801475a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801475e:	2b00      	cmp	r3, #0
 8014760:	d116      	bne.n	8014790 <USB_EPStartXfer+0xd32>
 8014762:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014766:	881b      	ldrh	r3, [r3, #0]
 8014768:	b29b      	uxth	r3, r3
 801476a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 801476e:	b29a      	uxth	r2, r3
 8014770:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014774:	801a      	strh	r2, [r3, #0]
 8014776:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801477a:	881b      	ldrh	r3, [r3, #0]
 801477c:	b29b      	uxth	r3, r3
 801477e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014782:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014786:	b29a      	uxth	r2, r3
 8014788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801478c:	801a      	strh	r2, [r3, #0]
 801478e:	e05b      	b.n	8014848 <USB_EPStartXfer+0xdea>
 8014790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014794:	2b3e      	cmp	r3, #62	; 0x3e
 8014796:	d818      	bhi.n	80147ca <USB_EPStartXfer+0xd6c>
 8014798:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801479c:	085b      	lsrs	r3, r3, #1
 801479e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80147a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147a6:	f003 0301 	and.w	r3, r3, #1
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d004      	beq.n	80147b8 <USB_EPStartXfer+0xd5a>
 80147ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147b2:	3301      	adds	r3, #1
 80147b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80147b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147bc:	b29b      	uxth	r3, r3
 80147be:	029b      	lsls	r3, r3, #10
 80147c0:	b29a      	uxth	r2, r3
 80147c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80147c6:	801a      	strh	r2, [r3, #0]
 80147c8:	e03e      	b.n	8014848 <USB_EPStartXfer+0xdea>
 80147ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147ce:	095b      	lsrs	r3, r3, #5
 80147d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80147d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147d8:	f003 031f 	and.w	r3, r3, #31
 80147dc:	2b00      	cmp	r3, #0
 80147de:	d104      	bne.n	80147ea <USB_EPStartXfer+0xd8c>
 80147e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147e4:	3b01      	subs	r3, #1
 80147e6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80147ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80147ee:	b29b      	uxth	r3, r3
 80147f0:	029b      	lsls	r3, r3, #10
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80147f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80147fc:	b29a      	uxth	r2, r3
 80147fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014802:	801a      	strh	r2, [r3, #0]
 8014804:	e020      	b.n	8014848 <USB_EPStartXfer+0xdea>
 8014806:	463b      	mov	r3, r7
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	785b      	ldrb	r3, [r3, #1]
 801480c:	2b01      	cmp	r3, #1
 801480e:	d11b      	bne.n	8014848 <USB_EPStartXfer+0xdea>
 8014810:	1d3b      	adds	r3, r7, #4
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014818:	b29b      	uxth	r3, r3
 801481a:	461a      	mov	r2, r3
 801481c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014820:	4413      	add	r3, r2
 8014822:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8014826:	463b      	mov	r3, r7
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	00da      	lsls	r2, r3, #3
 801482e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8014832:	4413      	add	r3, r2
 8014834:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014838:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801483c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014840:	b29a      	uxth	r2, r3
 8014842:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8014846:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8014848:	463b      	mov	r3, r7
 801484a:	681b      	ldr	r3, [r3, #0]
 801484c:	895b      	ldrh	r3, [r3, #10]
 801484e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8014852:	463b      	mov	r3, r7
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	6959      	ldr	r1, [r3, #20]
 8014858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801485c:	b29b      	uxth	r3, r3
 801485e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8014862:	1d38      	adds	r0, r7, #4
 8014864:	6800      	ldr	r0, [r0, #0]
 8014866:	f000 fd4c 	bl	8015302 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 801486a:	1d3b      	adds	r3, r7, #4
 801486c:	681a      	ldr	r2, [r3, #0]
 801486e:	463b      	mov	r3, r7
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	781b      	ldrb	r3, [r3, #0]
 8014874:	009b      	lsls	r3, r3, #2
 8014876:	4413      	add	r3, r2
 8014878:	881b      	ldrh	r3, [r3, #0]
 801487a:	b29b      	uxth	r3, r3
 801487c:	f107 020a 	add.w	r2, r7, #10
 8014880:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014888:	8013      	strh	r3, [r2, #0]
 801488a:	f107 030a 	add.w	r3, r7, #10
 801488e:	f107 020a 	add.w	r2, r7, #10
 8014892:	8812      	ldrh	r2, [r2, #0]
 8014894:	f082 0210 	eor.w	r2, r2, #16
 8014898:	801a      	strh	r2, [r3, #0]
 801489a:	f107 030a 	add.w	r3, r7, #10
 801489e:	f107 020a 	add.w	r2, r7, #10
 80148a2:	8812      	ldrh	r2, [r2, #0]
 80148a4:	f082 0220 	eor.w	r2, r2, #32
 80148a8:	801a      	strh	r2, [r3, #0]
 80148aa:	1d3b      	adds	r3, r7, #4
 80148ac:	681a      	ldr	r2, [r3, #0]
 80148ae:	463b      	mov	r3, r7
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	009b      	lsls	r3, r3, #2
 80148b6:	441a      	add	r2, r3
 80148b8:	f107 030a 	add.w	r3, r7, #10
 80148bc:	881b      	ldrh	r3, [r3, #0]
 80148be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80148c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80148c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80148ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80148ce:	b29b      	uxth	r3, r3
 80148d0:	8013      	strh	r3, [r2, #0]
 80148d2:	e3b5      	b.n	8015040 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80148d4:	463b      	mov	r3, r7
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	7b1b      	ldrb	r3, [r3, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	f040 8090 	bne.w	8014a00 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80148e0:	463b      	mov	r3, r7
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	699a      	ldr	r2, [r3, #24]
 80148e6:	463b      	mov	r3, r7
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	691b      	ldr	r3, [r3, #16]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d90e      	bls.n	801490e <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 80148f0:	463b      	mov	r3, r7
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80148fa:	463b      	mov	r3, r7
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	699a      	ldr	r2, [r3, #24]
 8014900:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014904:	1ad2      	subs	r2, r2, r3
 8014906:	463b      	mov	r3, r7
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	619a      	str	r2, [r3, #24]
 801490c:	e008      	b.n	8014920 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 801490e:	463b      	mov	r3, r7
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	699b      	ldr	r3, [r3, #24]
 8014914:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8014918:	463b      	mov	r3, r7
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	2200      	movs	r2, #0
 801491e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8014920:	1d3b      	adds	r3, r7, #4
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8014928:	1d3b      	adds	r3, r7, #4
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014930:	b29b      	uxth	r3, r3
 8014932:	461a      	mov	r2, r3
 8014934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8014938:	4413      	add	r3, r2
 801493a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801493e:	463b      	mov	r3, r7
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	00da      	lsls	r2, r3, #3
 8014946:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801494a:	4413      	add	r3, r2
 801494c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8014954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014958:	2b00      	cmp	r3, #0
 801495a:	d116      	bne.n	801498a <USB_EPStartXfer+0xf2c>
 801495c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014960:	881b      	ldrh	r3, [r3, #0]
 8014962:	b29b      	uxth	r3, r3
 8014964:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014968:	b29a      	uxth	r2, r3
 801496a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801496e:	801a      	strh	r2, [r3, #0]
 8014970:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014974:	881b      	ldrh	r3, [r3, #0]
 8014976:	b29b      	uxth	r3, r3
 8014978:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801497c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014980:	b29a      	uxth	r2, r3
 8014982:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8014986:	801a      	strh	r2, [r3, #0]
 8014988:	e32c      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
 801498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801498e:	2b3e      	cmp	r3, #62	; 0x3e
 8014990:	d818      	bhi.n	80149c4 <USB_EPStartXfer+0xf66>
 8014992:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014996:	085b      	lsrs	r3, r3, #1
 8014998:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801499c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80149a0:	f003 0301 	and.w	r3, r3, #1
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d004      	beq.n	80149b2 <USB_EPStartXfer+0xf54>
 80149a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80149ac:	3301      	adds	r3, #1
 80149ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80149b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80149b6:	b29b      	uxth	r3, r3
 80149b8:	029b      	lsls	r3, r3, #10
 80149ba:	b29a      	uxth	r2, r3
 80149bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149c0:	801a      	strh	r2, [r3, #0]
 80149c2:	e30f      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
 80149c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80149c8:	095b      	lsrs	r3, r3, #5
 80149ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80149ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80149d2:	f003 031f 	and.w	r3, r3, #31
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d104      	bne.n	80149e4 <USB_EPStartXfer+0xf86>
 80149da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80149de:	3b01      	subs	r3, #1
 80149e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80149e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	029b      	lsls	r3, r3, #10
 80149ec:	b29b      	uxth	r3, r3
 80149ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80149f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80149f6:	b29a      	uxth	r2, r3
 80149f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80149fc:	801a      	strh	r2, [r3, #0]
 80149fe:	e2f1      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8014a00:	463b      	mov	r3, r7
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	78db      	ldrb	r3, [r3, #3]
 8014a06:	2b02      	cmp	r3, #2
 8014a08:	f040 818f 	bne.w	8014d2a <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8014a0c:	463b      	mov	r3, r7
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	785b      	ldrb	r3, [r3, #1]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d175      	bne.n	8014b02 <USB_EPStartXfer+0x10a4>
 8014a16:	1d3b      	adds	r3, r7, #4
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014a1e:	1d3b      	adds	r3, r7, #4
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014a26:	b29b      	uxth	r3, r3
 8014a28:	461a      	mov	r2, r3
 8014a2a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014a2e:	4413      	add	r3, r2
 8014a30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8014a34:	463b      	mov	r3, r7
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	781b      	ldrb	r3, [r3, #0]
 8014a3a:	00da      	lsls	r2, r3, #3
 8014a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8014a40:	4413      	add	r3, r2
 8014a42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014a46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8014a4a:	463b      	mov	r3, r7
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	691b      	ldr	r3, [r3, #16]
 8014a50:	2b00      	cmp	r3, #0
 8014a52:	d116      	bne.n	8014a82 <USB_EPStartXfer+0x1024>
 8014a54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a58:	881b      	ldrh	r3, [r3, #0]
 8014a5a:	b29b      	uxth	r3, r3
 8014a5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014a60:	b29a      	uxth	r2, r3
 8014a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a66:	801a      	strh	r2, [r3, #0]
 8014a68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a6c:	881b      	ldrh	r3, [r3, #0]
 8014a6e:	b29b      	uxth	r3, r3
 8014a70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014a74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014a78:	b29a      	uxth	r2, r3
 8014a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014a7e:	801a      	strh	r2, [r3, #0]
 8014a80:	e065      	b.n	8014b4e <USB_EPStartXfer+0x10f0>
 8014a82:	463b      	mov	r3, r7
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	691b      	ldr	r3, [r3, #16]
 8014a88:	2b3e      	cmp	r3, #62	; 0x3e
 8014a8a:	d81a      	bhi.n	8014ac2 <USB_EPStartXfer+0x1064>
 8014a8c:	463b      	mov	r3, r7
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	691b      	ldr	r3, [r3, #16]
 8014a92:	085b      	lsrs	r3, r3, #1
 8014a94:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014a98:	463b      	mov	r3, r7
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	691b      	ldr	r3, [r3, #16]
 8014a9e:	f003 0301 	and.w	r3, r3, #1
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d004      	beq.n	8014ab0 <USB_EPStartXfer+0x1052>
 8014aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aaa:	3301      	adds	r3, #1
 8014aac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ab4:	b29b      	uxth	r3, r3
 8014ab6:	029b      	lsls	r3, r3, #10
 8014ab8:	b29a      	uxth	r2, r3
 8014aba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014abe:	801a      	strh	r2, [r3, #0]
 8014ac0:	e045      	b.n	8014b4e <USB_EPStartXfer+0x10f0>
 8014ac2:	463b      	mov	r3, r7
 8014ac4:	681b      	ldr	r3, [r3, #0]
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	095b      	lsrs	r3, r3, #5
 8014aca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ace:	463b      	mov	r3, r7
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	691b      	ldr	r3, [r3, #16]
 8014ad4:	f003 031f 	and.w	r3, r3, #31
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d104      	bne.n	8014ae6 <USB_EPStartXfer+0x1088>
 8014adc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014ae0:	3b01      	subs	r3, #1
 8014ae2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8014ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	029b      	lsls	r3, r3, #10
 8014aee:	b29b      	uxth	r3, r3
 8014af0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014af4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014af8:	b29a      	uxth	r2, r3
 8014afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8014afe:	801a      	strh	r2, [r3, #0]
 8014b00:	e025      	b.n	8014b4e <USB_EPStartXfer+0x10f0>
 8014b02:	463b      	mov	r3, r7
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	785b      	ldrb	r3, [r3, #1]
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d120      	bne.n	8014b4e <USB_EPStartXfer+0x10f0>
 8014b0c:	1d3b      	adds	r3, r7, #4
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014b14:	1d3b      	adds	r3, r7, #4
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	461a      	mov	r2, r3
 8014b20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b24:	4413      	add	r3, r2
 8014b26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8014b2a:	463b      	mov	r3, r7
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	781b      	ldrb	r3, [r3, #0]
 8014b30:	00da      	lsls	r2, r3, #3
 8014b32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8014b36:	4413      	add	r3, r2
 8014b38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8014b40:	463b      	mov	r3, r7
 8014b42:	681b      	ldr	r3, [r3, #0]
 8014b44:	691b      	ldr	r3, [r3, #16]
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8014b4c:	801a      	strh	r2, [r3, #0]
 8014b4e:	1d3b      	adds	r3, r7, #4
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014b56:	463b      	mov	r3, r7
 8014b58:	681b      	ldr	r3, [r3, #0]
 8014b5a:	785b      	ldrb	r3, [r3, #1]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d175      	bne.n	8014c4c <USB_EPStartXfer+0x11ee>
 8014b60:	1d3b      	adds	r3, r7, #4
 8014b62:	681b      	ldr	r3, [r3, #0]
 8014b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014b68:	1d3b      	adds	r3, r7, #4
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	461a      	mov	r2, r3
 8014b74:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014b78:	4413      	add	r3, r2
 8014b7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8014b7e:	463b      	mov	r3, r7
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	00da      	lsls	r2, r3, #3
 8014b86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8014b8a:	4413      	add	r3, r2
 8014b8c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014b90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8014b94:	463b      	mov	r3, r7
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	691b      	ldr	r3, [r3, #16]
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d116      	bne.n	8014bcc <USB_EPStartXfer+0x116e>
 8014b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014ba2:	881b      	ldrh	r3, [r3, #0]
 8014ba4:	b29b      	uxth	r3, r3
 8014ba6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014baa:	b29a      	uxth	r2, r3
 8014bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014bb0:	801a      	strh	r2, [r3, #0]
 8014bb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014bb6:	881b      	ldrh	r3, [r3, #0]
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014bbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014bc2:	b29a      	uxth	r2, r3
 8014bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014bc8:	801a      	strh	r2, [r3, #0]
 8014bca:	e061      	b.n	8014c90 <USB_EPStartXfer+0x1232>
 8014bcc:	463b      	mov	r3, r7
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	691b      	ldr	r3, [r3, #16]
 8014bd2:	2b3e      	cmp	r3, #62	; 0x3e
 8014bd4:	d81a      	bhi.n	8014c0c <USB_EPStartXfer+0x11ae>
 8014bd6:	463b      	mov	r3, r7
 8014bd8:	681b      	ldr	r3, [r3, #0]
 8014bda:	691b      	ldr	r3, [r3, #16]
 8014bdc:	085b      	lsrs	r3, r3, #1
 8014bde:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014be2:	463b      	mov	r3, r7
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	691b      	ldr	r3, [r3, #16]
 8014be8:	f003 0301 	and.w	r3, r3, #1
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d004      	beq.n	8014bfa <USB_EPStartXfer+0x119c>
 8014bf0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014bf4:	3301      	adds	r3, #1
 8014bf6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	029b      	lsls	r3, r3, #10
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c08:	801a      	strh	r2, [r3, #0]
 8014c0a:	e041      	b.n	8014c90 <USB_EPStartXfer+0x1232>
 8014c0c:	463b      	mov	r3, r7
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	691b      	ldr	r3, [r3, #16]
 8014c12:	095b      	lsrs	r3, r3, #5
 8014c14:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014c18:	463b      	mov	r3, r7
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	691b      	ldr	r3, [r3, #16]
 8014c1e:	f003 031f 	and.w	r3, r3, #31
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d104      	bne.n	8014c30 <USB_EPStartXfer+0x11d2>
 8014c26:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014c2a:	3b01      	subs	r3, #1
 8014c2c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8014c30:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	029b      	lsls	r3, r3, #10
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014c42:	b29a      	uxth	r2, r3
 8014c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014c48:	801a      	strh	r2, [r3, #0]
 8014c4a:	e021      	b.n	8014c90 <USB_EPStartXfer+0x1232>
 8014c4c:	463b      	mov	r3, r7
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	785b      	ldrb	r3, [r3, #1]
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d11c      	bne.n	8014c90 <USB_EPStartXfer+0x1232>
 8014c56:	1d3b      	adds	r3, r7, #4
 8014c58:	681b      	ldr	r3, [r3, #0]
 8014c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014c5e:	b29b      	uxth	r3, r3
 8014c60:	461a      	mov	r2, r3
 8014c62:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014c66:	4413      	add	r3, r2
 8014c68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8014c6c:	463b      	mov	r3, r7
 8014c6e:	681b      	ldr	r3, [r3, #0]
 8014c70:	781b      	ldrb	r3, [r3, #0]
 8014c72:	00da      	lsls	r2, r3, #3
 8014c74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8014c78:	4413      	add	r3, r2
 8014c7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8014c82:	463b      	mov	r3, r7
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	691b      	ldr	r3, [r3, #16]
 8014c88:	b29a      	uxth	r2, r3
 8014c8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8014c8e:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8014c90:	463b      	mov	r3, r7
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	69db      	ldr	r3, [r3, #28]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	f000 81a4 	beq.w	8014fe4 <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8014c9c:	1d3b      	adds	r3, r7, #4
 8014c9e:	681a      	ldr	r2, [r3, #0]
 8014ca0:	463b      	mov	r3, r7
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	4413      	add	r3, r2
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014cb0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d005      	beq.n	8014cc8 <USB_EPStartXfer+0x126a>
 8014cbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d10d      	bne.n	8014ce4 <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014cc8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8014cd0:	2b00      	cmp	r3, #0
 8014cd2:	f040 8187 	bne.w	8014fe4 <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8014cd6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8014cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	f040 8180 	bne.w	8014fe4 <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8014ce4:	1d3b      	adds	r3, r7, #4
 8014ce6:	681a      	ldr	r2, [r3, #0]
 8014ce8:	463b      	mov	r3, r7
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	781b      	ldrb	r3, [r3, #0]
 8014cee:	009b      	lsls	r3, r3, #2
 8014cf0:	4413      	add	r3, r2
 8014cf2:	881b      	ldrh	r3, [r3, #0]
 8014cf4:	b29b      	uxth	r3, r3
 8014cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8014cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014cfe:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8014d02:	1d3b      	adds	r3, r7, #4
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	463b      	mov	r3, r7
 8014d08:	681b      	ldr	r3, [r3, #0]
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	009b      	lsls	r3, r3, #2
 8014d0e:	441a      	add	r2, r3
 8014d10:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8014d14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8014d18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8014d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8014d20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8014d24:	b29b      	uxth	r3, r3
 8014d26:	8013      	strh	r3, [r2, #0]
 8014d28:	e15c      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8014d2a:	463b      	mov	r3, r7
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	78db      	ldrb	r3, [r3, #3]
 8014d30:	2b01      	cmp	r3, #1
 8014d32:	f040 8155 	bne.w	8014fe0 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8014d36:	463b      	mov	r3, r7
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	699a      	ldr	r2, [r3, #24]
 8014d3c:	463b      	mov	r3, r7
 8014d3e:	681b      	ldr	r3, [r3, #0]
 8014d40:	691b      	ldr	r3, [r3, #16]
 8014d42:	429a      	cmp	r2, r3
 8014d44:	d90e      	bls.n	8014d64 <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 8014d46:	463b      	mov	r3, r7
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	691b      	ldr	r3, [r3, #16]
 8014d4c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8014d50:	463b      	mov	r3, r7
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	699a      	ldr	r2, [r3, #24]
 8014d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014d5a:	1ad2      	subs	r2, r2, r3
 8014d5c:	463b      	mov	r3, r7
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	619a      	str	r2, [r3, #24]
 8014d62:	e008      	b.n	8014d76 <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 8014d64:	463b      	mov	r3, r7
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	699b      	ldr	r3, [r3, #24]
 8014d6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8014d6e:	463b      	mov	r3, r7
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	2200      	movs	r2, #0
 8014d74:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8014d76:	463b      	mov	r3, r7
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	785b      	ldrb	r3, [r3, #1]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d16f      	bne.n	8014e60 <USB_EPStartXfer+0x1402>
 8014d80:	1d3b      	adds	r3, r7, #4
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014d88:	1d3b      	adds	r3, r7, #4
 8014d8a:	681b      	ldr	r3, [r3, #0]
 8014d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	461a      	mov	r2, r3
 8014d94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014d98:	4413      	add	r3, r2
 8014d9a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8014d9e:	463b      	mov	r3, r7
 8014da0:	681b      	ldr	r3, [r3, #0]
 8014da2:	781b      	ldrb	r3, [r3, #0]
 8014da4:	00da      	lsls	r2, r3, #3
 8014da6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8014daa:	4413      	add	r3, r2
 8014dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014db0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8014db4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d116      	bne.n	8014dea <USB_EPStartXfer+0x138c>
 8014dbc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014dc0:	881b      	ldrh	r3, [r3, #0]
 8014dc2:	b29b      	uxth	r3, r3
 8014dc4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014dc8:	b29a      	uxth	r2, r3
 8014dca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014dce:	801a      	strh	r2, [r3, #0]
 8014dd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	b29b      	uxth	r3, r3
 8014dd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014ddc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014de0:	b29a      	uxth	r2, r3
 8014de2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014de6:	801a      	strh	r2, [r3, #0]
 8014de8:	e05f      	b.n	8014eaa <USB_EPStartXfer+0x144c>
 8014dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014dee:	2b3e      	cmp	r3, #62	; 0x3e
 8014df0:	d818      	bhi.n	8014e24 <USB_EPStartXfer+0x13c6>
 8014df2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014df6:	085b      	lsrs	r3, r3, #1
 8014df8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014dfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e00:	f003 0301 	and.w	r3, r3, #1
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d004      	beq.n	8014e12 <USB_EPStartXfer+0x13b4>
 8014e08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014e0c:	3301      	adds	r3, #1
 8014e0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014e16:	b29b      	uxth	r3, r3
 8014e18:	029b      	lsls	r3, r3, #10
 8014e1a:	b29a      	uxth	r2, r3
 8014e1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e20:	801a      	strh	r2, [r3, #0]
 8014e22:	e042      	b.n	8014eaa <USB_EPStartXfer+0x144c>
 8014e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e28:	095b      	lsrs	r3, r3, #5
 8014e2a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e32:	f003 031f 	and.w	r3, r3, #31
 8014e36:	2b00      	cmp	r3, #0
 8014e38:	d104      	bne.n	8014e44 <USB_EPStartXfer+0x13e6>
 8014e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014e3e:	3b01      	subs	r3, #1
 8014e40:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8014e44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8014e48:	b29b      	uxth	r3, r3
 8014e4a:	029b      	lsls	r3, r3, #10
 8014e4c:	b29b      	uxth	r3, r3
 8014e4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014e52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014e56:	b29a      	uxth	r2, r3
 8014e58:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8014e5c:	801a      	strh	r2, [r3, #0]
 8014e5e:	e024      	b.n	8014eaa <USB_EPStartXfer+0x144c>
 8014e60:	463b      	mov	r3, r7
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	785b      	ldrb	r3, [r3, #1]
 8014e66:	2b01      	cmp	r3, #1
 8014e68:	d11f      	bne.n	8014eaa <USB_EPStartXfer+0x144c>
 8014e6a:	1d3b      	adds	r3, r7, #4
 8014e6c:	681b      	ldr	r3, [r3, #0]
 8014e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014e72:	1d3b      	adds	r3, r7, #4
 8014e74:	681b      	ldr	r3, [r3, #0]
 8014e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	461a      	mov	r2, r3
 8014e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014e82:	4413      	add	r3, r2
 8014e84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8014e88:	463b      	mov	r3, r7
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	00da      	lsls	r2, r3, #3
 8014e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8014e94:	4413      	add	r3, r2
 8014e96:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8014e9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8014e9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ea2:	b29a      	uxth	r2, r3
 8014ea4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8014ea8:	801a      	strh	r2, [r3, #0]
 8014eaa:	1d3b      	adds	r3, r7, #4
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014eb2:	463b      	mov	r3, r7
 8014eb4:	681b      	ldr	r3, [r3, #0]
 8014eb6:	785b      	ldrb	r3, [r3, #1]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d16f      	bne.n	8014f9c <USB_EPStartXfer+0x153e>
 8014ebc:	1d3b      	adds	r3, r7, #4
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014ec4:	1d3b      	adds	r3, r7, #4
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014ecc:	b29b      	uxth	r3, r3
 8014ece:	461a      	mov	r2, r3
 8014ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ed4:	4413      	add	r3, r2
 8014ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8014eda:	463b      	mov	r3, r7
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	781b      	ldrb	r3, [r3, #0]
 8014ee0:	00da      	lsls	r2, r3, #3
 8014ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8014ee6:	4413      	add	r3, r2
 8014ee8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014eec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8014ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d116      	bne.n	8014f26 <USB_EPStartXfer+0x14c8>
 8014ef8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014efc:	881b      	ldrh	r3, [r3, #0]
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8014f04:	b29a      	uxth	r2, r3
 8014f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f0a:	801a      	strh	r2, [r3, #0]
 8014f0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f10:	881b      	ldrh	r3, [r3, #0]
 8014f12:	b29b      	uxth	r3, r3
 8014f14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014f18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014f1c:	b29a      	uxth	r2, r3
 8014f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f22:	801a      	strh	r2, [r3, #0]
 8014f24:	e05e      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
 8014f26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f2a:	2b3e      	cmp	r3, #62	; 0x3e
 8014f2c:	d818      	bhi.n	8014f60 <USB_EPStartXfer+0x1502>
 8014f2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f32:	085b      	lsrs	r3, r3, #1
 8014f34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f3c:	f003 0301 	and.w	r3, r3, #1
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d004      	beq.n	8014f4e <USB_EPStartXfer+0x14f0>
 8014f44:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014f48:	3301      	adds	r3, #1
 8014f4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014f4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	029b      	lsls	r3, r3, #10
 8014f56:	b29a      	uxth	r2, r3
 8014f58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f5c:	801a      	strh	r2, [r3, #0]
 8014f5e:	e041      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
 8014f60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f64:	095b      	lsrs	r3, r3, #5
 8014f66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014f6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f6e:	f003 031f 	and.w	r3, r3, #31
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d104      	bne.n	8014f80 <USB_EPStartXfer+0x1522>
 8014f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014f7a:	3b01      	subs	r3, #1
 8014f7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8014f80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8014f84:	b29b      	uxth	r3, r3
 8014f86:	029b      	lsls	r3, r3, #10
 8014f88:	b29b      	uxth	r3, r3
 8014f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8014f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8014f92:	b29a      	uxth	r2, r3
 8014f94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8014f98:	801a      	strh	r2, [r3, #0]
 8014f9a:	e023      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
 8014f9c:	463b      	mov	r3, r7
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	785b      	ldrb	r3, [r3, #1]
 8014fa2:	2b01      	cmp	r3, #1
 8014fa4:	d11e      	bne.n	8014fe4 <USB_EPStartXfer+0x1586>
 8014fa6:	1d3b      	adds	r3, r7, #4
 8014fa8:	681b      	ldr	r3, [r3, #0]
 8014faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	461a      	mov	r2, r3
 8014fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fb6:	4413      	add	r3, r2
 8014fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8014fbc:	463b      	mov	r3, r7
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	00da      	lsls	r2, r3, #3
 8014fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8014fc8:	4413      	add	r3, r2
 8014fca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8014fce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8014fd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014fd6:	b29a      	uxth	r2, r3
 8014fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8014fdc:	801a      	strh	r2, [r3, #0]
 8014fde:	e001      	b.n	8014fe4 <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 8014fe0:	2301      	movs	r3, #1
 8014fe2:	e02e      	b.n	8015042 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8014fe4:	1d3b      	adds	r3, r7, #4
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	463b      	mov	r3, r7
 8014fea:	681b      	ldr	r3, [r3, #0]
 8014fec:	781b      	ldrb	r3, [r3, #0]
 8014fee:	009b      	lsls	r3, r3, #2
 8014ff0:	4413      	add	r3, r2
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	b29b      	uxth	r3, r3
 8014ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014ffe:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8015002:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015006:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 801500a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801500e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8015012:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8015016:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 801501a:	1d3b      	adds	r3, r7, #4
 801501c:	681a      	ldr	r2, [r3, #0]
 801501e:	463b      	mov	r3, r7
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	781b      	ldrb	r3, [r3, #0]
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	441a      	add	r2, r3
 8015028:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801502c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801503c:	b29b      	uxth	r3, r3
 801503e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8015040:	2300      	movs	r3, #0
}
 8015042:	4618      	mov	r0, r3
 8015044:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015048:	46bd      	mov	sp, r7
 801504a:	bd80      	pop	{r7, pc}

0801504c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 801504c:	b480      	push	{r7}
 801504e:	b085      	sub	sp, #20
 8015050:	af00      	add	r7, sp, #0
 8015052:	6078      	str	r0, [r7, #4]
 8015054:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8015056:	683b      	ldr	r3, [r7, #0]
 8015058:	785b      	ldrb	r3, [r3, #1]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d020      	beq.n	80150a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801505e:	687a      	ldr	r2, [r7, #4]
 8015060:	683b      	ldr	r3, [r7, #0]
 8015062:	781b      	ldrb	r3, [r3, #0]
 8015064:	009b      	lsls	r3, r3, #2
 8015066:	4413      	add	r3, r2
 8015068:	881b      	ldrh	r3, [r3, #0]
 801506a:	b29b      	uxth	r3, r3
 801506c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015074:	81bb      	strh	r3, [r7, #12]
 8015076:	89bb      	ldrh	r3, [r7, #12]
 8015078:	f083 0310 	eor.w	r3, r3, #16
 801507c:	81bb      	strh	r3, [r7, #12]
 801507e:	687a      	ldr	r2, [r7, #4]
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	781b      	ldrb	r3, [r3, #0]
 8015084:	009b      	lsls	r3, r3, #2
 8015086:	441a      	add	r2, r3
 8015088:	89bb      	ldrh	r3, [r7, #12]
 801508a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801508e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015092:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801509a:	b29b      	uxth	r3, r3
 801509c:	8013      	strh	r3, [r2, #0]
 801509e:	e01f      	b.n	80150e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	683b      	ldr	r3, [r7, #0]
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	009b      	lsls	r3, r3, #2
 80150a8:	4413      	add	r3, r2
 80150aa:	881b      	ldrh	r3, [r3, #0]
 80150ac:	b29b      	uxth	r3, r3
 80150ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80150b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80150b6:	81fb      	strh	r3, [r7, #14]
 80150b8:	89fb      	ldrh	r3, [r7, #14]
 80150ba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80150be:	81fb      	strh	r3, [r7, #14]
 80150c0:	687a      	ldr	r2, [r7, #4]
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	781b      	ldrb	r3, [r3, #0]
 80150c6:	009b      	lsls	r3, r3, #2
 80150c8:	441a      	add	r2, r3
 80150ca:	89fb      	ldrh	r3, [r7, #14]
 80150cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80150d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80150d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80150d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150dc:	b29b      	uxth	r3, r3
 80150de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80150e0:	2300      	movs	r3, #0
}
 80150e2:	4618      	mov	r0, r3
 80150e4:	3714      	adds	r7, #20
 80150e6:	46bd      	mov	sp, r7
 80150e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150ec:	4770      	bx	lr

080150ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80150ee:	b480      	push	{r7}
 80150f0:	b087      	sub	sp, #28
 80150f2:	af00      	add	r7, sp, #0
 80150f4:	6078      	str	r0, [r7, #4]
 80150f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80150f8:	683b      	ldr	r3, [r7, #0]
 80150fa:	7b1b      	ldrb	r3, [r3, #12]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	f040 809d 	bne.w	801523c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	785b      	ldrb	r3, [r3, #1]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d04c      	beq.n	80151a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	683b      	ldr	r3, [r7, #0]
 801510e:	781b      	ldrb	r3, [r3, #0]
 8015110:	009b      	lsls	r3, r3, #2
 8015112:	4413      	add	r3, r2
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	823b      	strh	r3, [r7, #16]
 8015118:	8a3b      	ldrh	r3, [r7, #16]
 801511a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801511e:	2b00      	cmp	r3, #0
 8015120:	d01b      	beq.n	801515a <USB_EPClearStall+0x6c>
 8015122:	687a      	ldr	r2, [r7, #4]
 8015124:	683b      	ldr	r3, [r7, #0]
 8015126:	781b      	ldrb	r3, [r3, #0]
 8015128:	009b      	lsls	r3, r3, #2
 801512a:	4413      	add	r3, r2
 801512c:	881b      	ldrh	r3, [r3, #0]
 801512e:	b29b      	uxth	r3, r3
 8015130:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8015138:	81fb      	strh	r3, [r7, #14]
 801513a:	687a      	ldr	r2, [r7, #4]
 801513c:	683b      	ldr	r3, [r7, #0]
 801513e:	781b      	ldrb	r3, [r3, #0]
 8015140:	009b      	lsls	r3, r3, #2
 8015142:	441a      	add	r2, r3
 8015144:	89fb      	ldrh	r3, [r7, #14]
 8015146:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801514a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801514e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015152:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8015156:	b29b      	uxth	r3, r3
 8015158:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801515a:	683b      	ldr	r3, [r7, #0]
 801515c:	78db      	ldrb	r3, [r3, #3]
 801515e:	2b01      	cmp	r3, #1
 8015160:	d06c      	beq.n	801523c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015162:	687a      	ldr	r2, [r7, #4]
 8015164:	683b      	ldr	r3, [r7, #0]
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	009b      	lsls	r3, r3, #2
 801516a:	4413      	add	r3, r2
 801516c:	881b      	ldrh	r3, [r3, #0]
 801516e:	b29b      	uxth	r3, r3
 8015170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8015174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015178:	81bb      	strh	r3, [r7, #12]
 801517a:	89bb      	ldrh	r3, [r7, #12]
 801517c:	f083 0320 	eor.w	r3, r3, #32
 8015180:	81bb      	strh	r3, [r7, #12]
 8015182:	687a      	ldr	r2, [r7, #4]
 8015184:	683b      	ldr	r3, [r7, #0]
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	009b      	lsls	r3, r3, #2
 801518a:	441a      	add	r2, r3
 801518c:	89bb      	ldrh	r3, [r7, #12]
 801518e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8015192:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015196:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801519e:	b29b      	uxth	r3, r3
 80151a0:	8013      	strh	r3, [r2, #0]
 80151a2:	e04b      	b.n	801523c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	009b      	lsls	r3, r3, #2
 80151ac:	4413      	add	r3, r2
 80151ae:	881b      	ldrh	r3, [r3, #0]
 80151b0:	82fb      	strh	r3, [r7, #22]
 80151b2:	8afb      	ldrh	r3, [r7, #22]
 80151b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d01b      	beq.n	80151f4 <USB_EPClearStall+0x106>
 80151bc:	687a      	ldr	r2, [r7, #4]
 80151be:	683b      	ldr	r3, [r7, #0]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	009b      	lsls	r3, r3, #2
 80151c4:	4413      	add	r3, r2
 80151c6:	881b      	ldrh	r3, [r3, #0]
 80151c8:	b29b      	uxth	r3, r3
 80151ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80151ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80151d2:	82bb      	strh	r3, [r7, #20]
 80151d4:	687a      	ldr	r2, [r7, #4]
 80151d6:	683b      	ldr	r3, [r7, #0]
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	441a      	add	r2, r3
 80151de:	8abb      	ldrh	r3, [r7, #20]
 80151e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80151e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80151e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80151ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151f0:	b29b      	uxth	r3, r3
 80151f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80151f4:	687a      	ldr	r2, [r7, #4]
 80151f6:	683b      	ldr	r3, [r7, #0]
 80151f8:	781b      	ldrb	r3, [r3, #0]
 80151fa:	009b      	lsls	r3, r3, #2
 80151fc:	4413      	add	r3, r2
 80151fe:	881b      	ldrh	r3, [r3, #0]
 8015200:	b29b      	uxth	r3, r3
 8015202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8015206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801520a:	827b      	strh	r3, [r7, #18]
 801520c:	8a7b      	ldrh	r3, [r7, #18]
 801520e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8015212:	827b      	strh	r3, [r7, #18]
 8015214:	8a7b      	ldrh	r3, [r7, #18]
 8015216:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 801521a:	827b      	strh	r3, [r7, #18]
 801521c:	687a      	ldr	r2, [r7, #4]
 801521e:	683b      	ldr	r3, [r7, #0]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	441a      	add	r2, r3
 8015226:	8a7b      	ldrh	r3, [r7, #18]
 8015228:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801522c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8015230:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015234:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015238:	b29b      	uxth	r3, r3
 801523a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	371c      	adds	r7, #28
 8015242:	46bd      	mov	sp, r7
 8015244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015248:	4770      	bx	lr

0801524a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801524a:	b480      	push	{r7}
 801524c:	b083      	sub	sp, #12
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
 8015252:	460b      	mov	r3, r1
 8015254:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8015256:	78fb      	ldrb	r3, [r7, #3]
 8015258:	2b00      	cmp	r3, #0
 801525a:	d103      	bne.n	8015264 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 801525c:	687b      	ldr	r3, [r7, #4]
 801525e:	2280      	movs	r2, #128	; 0x80
 8015260:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8015264:	2300      	movs	r3, #0
}
 8015266:	4618      	mov	r0, r3
 8015268:	370c      	adds	r7, #12
 801526a:	46bd      	mov	sp, r7
 801526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015270:	4770      	bx	lr

08015272 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8015272:	b480      	push	{r7}
 8015274:	b083      	sub	sp, #12
 8015276:	af00      	add	r7, sp, #0
 8015278:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8015280:	b29b      	uxth	r3, r3
 8015282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8015286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801528a:	b29a      	uxth	r2, r3
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr

080152a0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80152a0:	b480      	push	{r7}
 80152a2:	b083      	sub	sp, #12
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= (uint16_t)(~(USB_BCDR_DPPU));
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80152ae:	b29b      	uxth	r3, r3
 80152b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80152b4:	b29a      	uxth	r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	370c      	adds	r7, #12
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80152ca:	b480      	push	{r7}
 80152cc:	b085      	sub	sp, #20
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80152d8:	b29b      	uxth	r3, r3
 80152da:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80152dc:	68fb      	ldr	r3, [r7, #12]
}
 80152de:	4618      	mov	r0, r3
 80152e0:	3714      	adds	r7, #20
 80152e2:	46bd      	mov	sp, r7
 80152e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e8:	4770      	bx	lr

080152ea <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80152ea:	b480      	push	{r7}
 80152ec:	b083      	sub	sp, #12
 80152ee:	af00      	add	r7, sp, #0
 80152f0:	6078      	str	r0, [r7, #4]
 80152f2:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80152f4:	2300      	movs	r3, #0
}
 80152f6:	4618      	mov	r0, r3
 80152f8:	370c      	adds	r7, #12
 80152fa:	46bd      	mov	sp, r7
 80152fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015300:	4770      	bx	lr

08015302 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015302:	b480      	push	{r7}
 8015304:	b08d      	sub	sp, #52	; 0x34
 8015306:	af00      	add	r7, sp, #0
 8015308:	60f8      	str	r0, [r7, #12]
 801530a:	60b9      	str	r1, [r7, #8]
 801530c:	4611      	mov	r1, r2
 801530e:	461a      	mov	r2, r3
 8015310:	460b      	mov	r3, r1
 8015312:	80fb      	strh	r3, [r7, #6]
 8015314:	4613      	mov	r3, r2
 8015316:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8015318:	88bb      	ldrh	r3, [r7, #4]
 801531a:	3301      	adds	r3, #1
 801531c:	085b      	lsrs	r3, r3, #1
 801531e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8015320:	68fb      	ldr	r3, [r7, #12]
 8015322:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8015324:	68bb      	ldr	r3, [r7, #8]
 8015326:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8015328:	88fa      	ldrh	r2, [r7, #6]
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	4413      	add	r3, r2
 801532e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015332:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8015334:	6a3b      	ldr	r3, [r7, #32]
 8015336:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015338:	e01b      	b.n	8015372 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 801533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801533c:	781b      	ldrb	r3, [r3, #0]
 801533e:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8015340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015342:	3301      	adds	r3, #1
 8015344:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8015346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015348:	781b      	ldrb	r3, [r3, #0]
 801534a:	b29b      	uxth	r3, r3
 801534c:	021b      	lsls	r3, r3, #8
 801534e:	b29b      	uxth	r3, r3
 8015350:	461a      	mov	r2, r3
 8015352:	69bb      	ldr	r3, [r7, #24]
 8015354:	4313      	orrs	r3, r2
 8015356:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	b29a      	uxth	r2, r3
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8015360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015362:	3302      	adds	r3, #2
 8015364:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8015366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015368:	3301      	adds	r3, #1
 801536a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 801536c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801536e:	3b01      	subs	r3, #1
 8015370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015374:	2b00      	cmp	r3, #0
 8015376:	d1e0      	bne.n	801533a <USB_WritePMA+0x38>
  }
}
 8015378:	bf00      	nop
 801537a:	bf00      	nop
 801537c:	3734      	adds	r7, #52	; 0x34
 801537e:	46bd      	mov	sp, r7
 8015380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015384:	4770      	bx	lr

08015386 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8015386:	b480      	push	{r7}
 8015388:	b08b      	sub	sp, #44	; 0x2c
 801538a:	af00      	add	r7, sp, #0
 801538c:	60f8      	str	r0, [r7, #12]
 801538e:	60b9      	str	r1, [r7, #8]
 8015390:	4611      	mov	r1, r2
 8015392:	461a      	mov	r2, r3
 8015394:	460b      	mov	r3, r1
 8015396:	80fb      	strh	r3, [r7, #6]
 8015398:	4613      	mov	r3, r2
 801539a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 801539c:	88bb      	ldrh	r3, [r7, #4]
 801539e:	085b      	lsrs	r3, r3, #1
 80153a0:	b29b      	uxth	r3, r3
 80153a2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80153ac:	88fa      	ldrh	r2, [r7, #6]
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	4413      	add	r3, r2
 80153b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80153b6:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80153b8:	69bb      	ldr	r3, [r7, #24]
 80153ba:	627b      	str	r3, [r7, #36]	; 0x24
 80153bc:	e018      	b.n	80153f0 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80153be:	6a3b      	ldr	r3, [r7, #32]
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80153c6:	6a3b      	ldr	r3, [r7, #32]
 80153c8:	3302      	adds	r3, #2
 80153ca:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80153cc:	693b      	ldr	r3, [r7, #16]
 80153ce:	b2da      	uxtb	r2, r3
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80153d4:	69fb      	ldr	r3, [r7, #28]
 80153d6:	3301      	adds	r3, #1
 80153d8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80153da:	693b      	ldr	r3, [r7, #16]
 80153dc:	0a1b      	lsrs	r3, r3, #8
 80153de:	b2da      	uxtb	r2, r3
 80153e0:	69fb      	ldr	r3, [r7, #28]
 80153e2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80153e4:	69fb      	ldr	r3, [r7, #28]
 80153e6:	3301      	adds	r3, #1
 80153e8:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 80153ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ec:	3b01      	subs	r3, #1
 80153ee:	627b      	str	r3, [r7, #36]	; 0x24
 80153f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d1e3      	bne.n	80153be <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80153f6:	88bb      	ldrh	r3, [r7, #4]
 80153f8:	f003 0301 	and.w	r3, r3, #1
 80153fc:	b29b      	uxth	r3, r3
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d007      	beq.n	8015412 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8015402:	6a3b      	ldr	r3, [r7, #32]
 8015404:	881b      	ldrh	r3, [r3, #0]
 8015406:	b29b      	uxth	r3, r3
 8015408:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	b2da      	uxtb	r2, r3
 801540e:	69fb      	ldr	r3, [r7, #28]
 8015410:	701a      	strb	r2, [r3, #0]
  }
}
 8015412:	bf00      	nop
 8015414:	372c      	adds	r7, #44	; 0x2c
 8015416:	46bd      	mov	sp, r7
 8015418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541c:	4770      	bx	lr
	...

08015420 <__NVIC_SystemReset>:
{
 8015420:	b480      	push	{r7}
 8015422:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8015424:	f3bf 8f4f 	dsb	sy
}
 8015428:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 801542a:	4b06      	ldr	r3, [pc, #24]	; (8015444 <__NVIC_SystemReset+0x24>)
 801542c:	68db      	ldr	r3, [r3, #12]
 801542e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015432:	4904      	ldr	r1, [pc, #16]	; (8015444 <__NVIC_SystemReset+0x24>)
 8015434:	4b04      	ldr	r3, [pc, #16]	; (8015448 <__NVIC_SystemReset+0x28>)
 8015436:	4313      	orrs	r3, r2
 8015438:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801543a:	f3bf 8f4f 	dsb	sy
}
 801543e:	bf00      	nop
    __NOP();
 8015440:	bf00      	nop
 8015442:	e7fd      	b.n	8015440 <__NVIC_SystemReset+0x20>
 8015444:	e000ed00 	.word	0xe000ed00
 8015448:	05fa0004 	.word	0x05fa0004

0801544c <USBD_DFU_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801544c:	b580      	push	{r7, lr}
 801544e:	b084      	sub	sp, #16
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	460b      	mov	r3, r1
 8015456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_DFU_HandleTypeDef *hdfu;

  /* Allocate Audio structure */
  hdfu = USBD_malloc(sizeof(USBD_DFU_HandleTypeDef));
 8015458:	f240 401c 	movw	r0, #1052	; 0x41c
 801545c:	f002 fdc2 	bl	8017fe4 <USBD_static_malloc>
 8015460:	60f8      	str	r0, [r7, #12]

  if (hdfu == NULL)
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d105      	bne.n	8015474 <USBD_DFU_Init+0x28>
  {
    pdev->pClassData = NULL;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	2200      	movs	r2, #0
 801546c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8015470:	2302      	movs	r3, #2
 8015472:	e03f      	b.n	80154f4 <USBD_DFU_Init+0xa8>
  }

  pdev->pClassData = (void *)hdfu;
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  hdfu->alt_setting = 0U;
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	2200      	movs	r2, #0
 8015480:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
  hdfu->data_ptr = USBD_DFU_APP_DEFAULT_ADD;
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 801548a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
  hdfu->wblock_num = 0U;
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	2200      	movs	r2, #0
 8015492:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	2200      	movs	r2, #0
 801549a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	2200      	movs	r2, #0
 80154a2:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
  hdfu->dev_state = DFU_STATE_IDLE;
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	2202      	movs	r2, #2
 80154aa:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

  hdfu->dev_status[0] = DFU_ERROR_NONE;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	2200      	movs	r2, #0
 80154b2:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[1] = 0U;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2200      	movs	r2, #0
 80154ba:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
  hdfu->dev_status[2] = 0U;
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	2200      	movs	r2, #0
 80154c2:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
  hdfu->dev_status[3] = 0U;
 80154c6:	68fb      	ldr	r3, [r7, #12]
 80154c8:	2200      	movs	r2, #0
 80154ca:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	2202      	movs	r2, #2
 80154d2:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
  hdfu->dev_status[5] = 0U;
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2200      	movs	r2, #0
 80154da:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415

  /* Initialize Hardware layer */
  if (((USBD_DFU_MediaTypeDef *)pdev->pUserData)->Init() != USBD_OK)
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80154e4:	685b      	ldr	r3, [r3, #4]
 80154e6:	4798      	blx	r3
 80154e8:	4603      	mov	r3, r0
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d001      	beq.n	80154f2 <USBD_DFU_Init+0xa6>
  {
    return (uint8_t)USBD_FAIL;
 80154ee:	2303      	movs	r3, #3
 80154f0:	e000      	b.n	80154f4 <USBD_DFU_Init+0xa8>
  }

  return (uint8_t)USBD_OK;
 80154f2:	2300      	movs	r3, #0
}
 80154f4:	4618      	mov	r0, r3
 80154f6:	3710      	adds	r7, #16
 80154f8:	46bd      	mov	sp, r7
 80154fa:	bd80      	pop	{r7, pc}

080154fc <USBD_DFU_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_DFU_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	460b      	mov	r3, r1
 8015506:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_DFU_HandleTypeDef *hdfu;

  if (pdev->pClassData == NULL)
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801550e:	2b00      	cmp	r3, #0
 8015510:	d101      	bne.n	8015516 <USBD_DFU_DeInit+0x1a>
  {
    return (uint8_t)USBD_EMEM;
 8015512:	2302      	movs	r3, #2
 8015514:	e027      	b.n	8015566 <USBD_DFU_DeInit+0x6a>
  }

  hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801551c:	60fb      	str	r3, [r7, #12]
  hdfu->wblock_num = 0U;
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	2200      	movs	r2, #0
 8015522:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  hdfu->wlength = 0U;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	2200      	movs	r2, #0
 801552a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

  hdfu->dev_state = DFU_STATE_IDLE;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	2202      	movs	r2, #2
 8015532:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
  hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	2200      	movs	r2, #0
 801553a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
  hdfu->dev_status[4] = DFU_STATE_IDLE;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	2202      	movs	r2, #2
 8015542:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

  /* DeInit  physical Interface components and Hardware Layer */
  ((USBD_DFU_MediaTypeDef *)pdev->pUserData)->DeInit();
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801554c:	689b      	ldr	r3, [r3, #8]
 801554e:	4798      	blx	r3
  USBD_free(pdev->pClassData);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015556:	4618      	mov	r0, r3
 8015558:	f002 fd52 	bl	8018000 <USBD_static_free>
  pdev->pClassData = NULL;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2200      	movs	r2, #0
 8015560:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  return (uint8_t)USBD_OK;
 8015564:	2300      	movs	r3, #0
}
 8015566:	4618      	mov	r0, r3
 8015568:	3710      	adds	r7, #16
 801556a:	46bd      	mov	sp, r7
 801556c:	bd80      	pop	{r7, pc}
	...

08015570 <USBD_DFU_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_DFU_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015570:	b580      	push	{r7, lr}
 8015572:	b088      	sub	sp, #32
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015580:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8015582:	2300      	movs	r3, #0
 8015584:	77fb      	strb	r3, [r7, #31]
  uint8_t *pbuf = NULL;
 8015586:	2300      	movs	r3, #0
 8015588:	61bb      	str	r3, [r7, #24]
  uint16_t len = 0U;
 801558a:	2300      	movs	r3, #0
 801558c:	82fb      	strh	r3, [r7, #22]
  uint16_t status_info = 0U;
 801558e:	2300      	movs	r3, #0
 8015590:	81fb      	strh	r3, [r7, #14]

  if (hdfu == NULL)
 8015592:	693b      	ldr	r3, [r7, #16]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d101      	bne.n	801559c <USBD_DFU_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8015598:	2303      	movs	r3, #3
 801559a:	e0d5      	b.n	8015748 <USBD_DFU_Setup+0x1d8>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	781b      	ldrb	r3, [r3, #0]
 80155a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d03e      	beq.n	8015626 <USBD_DFU_Setup+0xb6>
 80155a8:	2b20      	cmp	r3, #32
 80155aa:	f040 80c5 	bne.w	8015738 <USBD_DFU_Setup+0x1c8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80155ae:	683b      	ldr	r3, [r7, #0]
 80155b0:	785b      	ldrb	r3, [r3, #1]
 80155b2:	2b06      	cmp	r3, #6
 80155b4:	d82f      	bhi.n	8015616 <USBD_DFU_Setup+0xa6>
 80155b6:	a201      	add	r2, pc, #4	; (adr r2, 80155bc <USBD_DFU_Setup+0x4c>)
 80155b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155bc:	0801560d 	.word	0x0801560d
 80155c0:	080155d9 	.word	0x080155d9
 80155c4:	080155e3 	.word	0x080155e3
 80155c8:	080155ed 	.word	0x080155ed
 80155cc:	080155f5 	.word	0x080155f5
 80155d0:	080155fd 	.word	0x080155fd
 80155d4:	08015605 	.word	0x08015605
      {
        case DFU_DNLOAD:
          DFU_Download(pdev, req);
 80155d8:	6839      	ldr	r1, [r7, #0]
 80155da:	6878      	ldr	r0, [r7, #4]
 80155dc:	f000 fa6c 	bl	8015ab8 <DFU_Download>
          break;
 80155e0:	e020      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_UPLOAD:
          DFU_Upload(pdev, req);
 80155e2:	6839      	ldr	r1, [r7, #0]
 80155e4:	6878      	ldr	r0, [r7, #4]
 80155e6:	f000 fad3 	bl	8015b90 <DFU_Upload>
          break;
 80155ea:	e01b      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATUS:
          DFU_GetStatus(pdev);
 80155ec:	6878      	ldr	r0, [r7, #4]
 80155ee:	f000 fba9 	bl	8015d44 <DFU_GetStatus>
          break;
 80155f2:	e017      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_CLRSTATUS:
          DFU_ClearStatus(pdev);
 80155f4:	6878      	ldr	r0, [r7, #4]
 80155f6:	f000 fc5b 	bl	8015eb0 <DFU_ClearStatus>
          break;
 80155fa:	e013      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_GETSTATE:
          DFU_GetState(pdev);
 80155fc:	6878      	ldr	r0, [r7, #4]
 80155fe:	f000 fcab 	bl	8015f58 <DFU_GetState>
          break;
 8015602:	e00f      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_ABORT:
          DFU_Abort(pdev);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f000 fcbf 	bl	8015f88 <DFU_Abort>
          break;
 801560a:	e00b      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        case DFU_DETACH:
          DFU_Detach(pdev, req);
 801560c:	6839      	ldr	r1, [r7, #0]
 801560e:	6878      	ldr	r0, [r7, #4]
 8015610:	f000 f9ee 	bl	80159f0 <DFU_Detach>
          break;
 8015614:	e006      	b.n	8015624 <USBD_DFU_Setup+0xb4>

        default:
          USBD_CtlError(pdev, req);
 8015616:	6839      	ldr	r1, [r7, #0]
 8015618:	6878      	ldr	r0, [r7, #4]
 801561a:	f001 fde1 	bl	80171e0 <USBD_CtlError>
          ret = USBD_FAIL;
 801561e:	2303      	movs	r3, #3
 8015620:	77fb      	strb	r3, [r7, #31]
          break;
 8015622:	bf00      	nop
      }
      break;
 8015624:	e08f      	b.n	8015746 <USBD_DFU_Setup+0x1d6>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015626:	683b      	ldr	r3, [r7, #0]
 8015628:	785b      	ldrb	r3, [r3, #1]
 801562a:	2b0b      	cmp	r3, #11
 801562c:	d87b      	bhi.n	8015726 <USBD_DFU_Setup+0x1b6>
 801562e:	a201      	add	r2, pc, #4	; (adr r2, 8015634 <USBD_DFU_Setup+0xc4>)
 8015630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015634:	08015665 	.word	0x08015665
 8015638:	08015735 	.word	0x08015735
 801563c:	08015727 	.word	0x08015727
 8015640:	08015727 	.word	0x08015727
 8015644:	08015727 	.word	0x08015727
 8015648:	08015727 	.word	0x08015727
 801564c:	0801568f 	.word	0x0801568f
 8015650:	08015727 	.word	0x08015727
 8015654:	08015727 	.word	0x08015727
 8015658:	08015727 	.word	0x08015727
 801565c:	080156b9 	.word	0x080156b9
 8015660:	080156e5 	.word	0x080156e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801566a:	b2db      	uxtb	r3, r3
 801566c:	2b03      	cmp	r3, #3
 801566e:	d107      	bne.n	8015680 <USBD_DFU_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8015670:	f107 030e 	add.w	r3, r7, #14
 8015674:	2202      	movs	r2, #2
 8015676:	4619      	mov	r1, r3
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f001 fe22 	bl	80172c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801567e:	e05a      	b.n	8015736 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8015680:	6839      	ldr	r1, [r7, #0]
 8015682:	6878      	ldr	r0, [r7, #4]
 8015684:	f001 fdac 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8015688:	2303      	movs	r3, #3
 801568a:	77fb      	strb	r3, [r7, #31]
          break;
 801568c:	e053      	b.n	8015736 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == DFU_DESCRIPTOR_TYPE)
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	885b      	ldrh	r3, [r3, #2]
 8015692:	0a1b      	lsrs	r3, r3, #8
 8015694:	b29b      	uxth	r3, r3
 8015696:	2b21      	cmp	r3, #33	; 0x21
 8015698:	d107      	bne.n	80156aa <USBD_DFU_Setup+0x13a>
          {
            pbuf = USBD_DFU_CfgDesc + (9U * (USBD_DFU_MAX_ITF_NUM + 1U));
 801569a:	4b2d      	ldr	r3, [pc, #180]	; (8015750 <USBD_DFU_Setup+0x1e0>)
 801569c:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_DFU_DESC_SIZ, req->wLength);
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	88db      	ldrh	r3, [r3, #6]
 80156a2:	2b09      	cmp	r3, #9
 80156a4:	bf28      	it	cs
 80156a6:	2309      	movcs	r3, #9
 80156a8:	82fb      	strh	r3, [r7, #22]
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80156aa:	8afb      	ldrh	r3, [r7, #22]
 80156ac:	461a      	mov	r2, r3
 80156ae:	69b9      	ldr	r1, [r7, #24]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f001 fe06 	bl	80172c2 <USBD_CtlSendData>
          break;
 80156b6:	e03e      	b.n	8015736 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156be:	b2db      	uxtb	r3, r3
 80156c0:	2b03      	cmp	r3, #3
 80156c2:	d108      	bne.n	80156d6 <USBD_DFU_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hdfu->alt_setting, 1U);
 80156c4:	693b      	ldr	r3, [r7, #16]
 80156c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80156ca:	2201      	movs	r2, #1
 80156cc:	4619      	mov	r1, r3
 80156ce:	6878      	ldr	r0, [r7, #4]
 80156d0:	f001 fdf7 	bl	80172c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80156d4:	e02f      	b.n	8015736 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 80156d6:	6839      	ldr	r1, [r7, #0]
 80156d8:	6878      	ldr	r0, [r7, #4]
 80156da:	f001 fd81 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 80156de:	2303      	movs	r3, #3
 80156e0:	77fb      	strb	r3, [r7, #31]
          break;
 80156e2:	e028      	b.n	8015736 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_SET_INTERFACE:
          if ((uint8_t)(req->wValue) < USBD_DFU_MAX_ITF_NUM)
 80156e4:	683b      	ldr	r3, [r7, #0]
 80156e6:	885b      	ldrh	r3, [r3, #2]
 80156e8:	b2db      	uxtb	r3, r3
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d114      	bne.n	8015718 <USBD_DFU_Setup+0x1a8>
          {
            if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	2b03      	cmp	r3, #3
 80156f8:	d107      	bne.n	801570a <USBD_DFU_Setup+0x19a>
            {
              hdfu->alt_setting = (uint8_t)(req->wValue);
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	885b      	ldrh	r3, [r3, #2]
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	461a      	mov	r2, r3
 8015702:	693b      	ldr	r3, [r7, #16]
 8015704:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
          {
            /* Call the error management function (command will be NAKed */
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015708:	e015      	b.n	8015736 <USBD_DFU_Setup+0x1c6>
              USBD_CtlError(pdev, req);
 801570a:	6839      	ldr	r1, [r7, #0]
 801570c:	6878      	ldr	r0, [r7, #4]
 801570e:	f001 fd67 	bl	80171e0 <USBD_CtlError>
              ret = USBD_FAIL;
 8015712:	2303      	movs	r3, #3
 8015714:	77fb      	strb	r3, [r7, #31]
          break;
 8015716:	e00e      	b.n	8015736 <USBD_DFU_Setup+0x1c6>
            USBD_CtlError(pdev, req);
 8015718:	6839      	ldr	r1, [r7, #0]
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f001 fd60 	bl	80171e0 <USBD_CtlError>
            ret = USBD_FAIL;
 8015720:	2303      	movs	r3, #3
 8015722:	77fb      	strb	r3, [r7, #31]
          break;
 8015724:	e007      	b.n	8015736 <USBD_DFU_Setup+0x1c6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8015726:	6839      	ldr	r1, [r7, #0]
 8015728:	6878      	ldr	r0, [r7, #4]
 801572a:	f001 fd59 	bl	80171e0 <USBD_CtlError>
          ret = USBD_FAIL;
 801572e:	2303      	movs	r3, #3
 8015730:	77fb      	strb	r3, [r7, #31]
          break;
 8015732:	e000      	b.n	8015736 <USBD_DFU_Setup+0x1c6>
          break;
 8015734:	bf00      	nop
      }
      break;
 8015736:	e006      	b.n	8015746 <USBD_DFU_Setup+0x1d6>

    default:
      USBD_CtlError(pdev, req);
 8015738:	6839      	ldr	r1, [r7, #0]
 801573a:	6878      	ldr	r0, [r7, #4]
 801573c:	f001 fd50 	bl	80171e0 <USBD_CtlError>
      ret = USBD_FAIL;
 8015740:	2303      	movs	r3, #3
 8015742:	77fb      	strb	r3, [r7, #31]
      break;
 8015744:	bf00      	nop
  }

  return (uint8_t)ret;
 8015746:	7ffb      	ldrb	r3, [r7, #31]
}
 8015748:	4618      	mov	r0, r3
 801574a:	3720      	adds	r7, #32
 801574c:	46bd      	mov	sp, r7
 801574e:	bd80      	pop	{r7, pc}
 8015750:	2000087e 	.word	0x2000087e

08015754 <USBD_DFU_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetCfgDesc(uint16_t *length)
{
 8015754:	b480      	push	{r7}
 8015756:	b083      	sub	sp, #12
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_CfgDesc);
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	221b      	movs	r2, #27
 8015760:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_CfgDesc;
 8015762:	4b03      	ldr	r3, [pc, #12]	; (8015770 <USBD_DFU_GetCfgDesc+0x1c>)
}
 8015764:	4618      	mov	r0, r3
 8015766:	370c      	adds	r7, #12
 8015768:	46bd      	mov	sp, r7
 801576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576e:	4770      	bx	lr
 8015770:	2000086c 	.word	0x2000086c

08015774 <USBD_DFU_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8015774:	b480      	push	{r7}
 8015776:	b083      	sub	sp, #12
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801577c:	2300      	movs	r3, #0
}
 801577e:	4618      	mov	r0, r3
 8015780:	370c      	adds	r7, #12
 8015782:	46bd      	mov	sp, r7
 8015784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015788:	4770      	bx	lr

0801578a <USBD_DFU_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_DFU_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 801578a:	b580      	push	{r7, lr}
 801578c:	b088      	sub	sp, #32
 801578e:	af00      	add	r7, sp, #0
 8015790:	6078      	str	r0, [r7, #4]
  USBD_SetupReqTypedef req;
  uint32_t addr;
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015798:	61fb      	str	r3, [r7, #28]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80157a0:	61bb      	str	r3, [r7, #24]

  if (hdfu == NULL)
 80157a2:	69fb      	ldr	r3, [r7, #28]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d101      	bne.n	80157ac <USBD_DFU_EP0_TxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80157a8:	2303      	movs	r3, #3
 80157aa:	e0ce      	b.n	801594a <USBD_DFU_EP0_TxReady+0x1c0>
  }

  if (hdfu->dev_state == DFU_STATE_DNLOAD_BUSY)
 80157ac:	69fb      	ldr	r3, [r7, #28]
 80157ae:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 80157b2:	2b04      	cmp	r3, #4
 80157b4:	f040 80bd 	bne.w	8015932 <USBD_DFU_EP0_TxReady+0x1a8>
  {
    /* Decode the Special Command */
    if (hdfu->wblock_num == 0U)
 80157b8:	69fb      	ldr	r3, [r7, #28]
 80157ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d17c      	bne.n	80158bc <USBD_DFU_EP0_TxReady+0x132>
    {
      if (hdfu->wlength == 1U)
 80157c2:	69fb      	ldr	r3, [r7, #28]
 80157c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157c8:	2b01      	cmp	r3, #1
 80157ca:	f000 8093 	beq.w	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
        if (hdfu->buffer.d8[0] == DFU_CMD_GETCOMMANDS)
        {
          /* Nothing to do */
        }
      }
      else if (hdfu->wlength == 5U)
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80157d4:	2b05      	cmp	r3, #5
 80157d6:	d15e      	bne.n	8015896 <USBD_DFU_EP0_TxReady+0x10c>
      {
        if (hdfu->buffer.d8[0] == DFU_CMD_SETADDRESSPOINTER)
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	781b      	ldrb	r3, [r3, #0]
 80157dc:	2b21      	cmp	r3, #33	; 0x21
 80157de:	d124      	bne.n	801582a <USBD_DFU_EP0_TxReady+0xa0>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	785b      	ldrb	r3, [r3, #1]
 80157e4:	461a      	mov	r2, r3
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80157f2:	69fb      	ldr	r3, [r7, #28]
 80157f4:	789b      	ldrb	r3, [r3, #2]
 80157f6:	021b      	lsls	r3, r3, #8
 80157f8:	441a      	add	r2, r3
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8015800:	69fb      	ldr	r3, [r7, #28]
 8015802:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015806:	69fb      	ldr	r3, [r7, #28]
 8015808:	78db      	ldrb	r3, [r3, #3]
 801580a:	041b      	lsls	r3, r3, #16
 801580c:	441a      	add	r2, r3
 801580e:	69fb      	ldr	r3, [r7, #28]
 8015810:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8015814:	69fb      	ldr	r3, [r7, #28]
 8015816:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	791b      	ldrb	r3, [r3, #4]
 801581e:	061b      	lsls	r3, r3, #24
 8015820:	441a      	add	r2, r3
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8015828:	e064      	b.n	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
        }
        else if (hdfu->buffer.d8[0] == DFU_CMD_ERASE)
 801582a:	69fb      	ldr	r3, [r7, #28]
 801582c:	781b      	ldrb	r3, [r3, #0]
 801582e:	2b41      	cmp	r3, #65	; 0x41
 8015830:	d12f      	bne.n	8015892 <USBD_DFU_EP0_TxReady+0x108>
        {
          hdfu->data_ptr = hdfu->buffer.d8[1];
 8015832:	69fb      	ldr	r3, [r7, #28]
 8015834:	785b      	ldrb	r3, [r3, #1]
 8015836:	461a      	mov	r2, r3
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[2] << 8;
 801583e:	69fb      	ldr	r3, [r7, #28]
 8015840:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	789b      	ldrb	r3, [r3, #2]
 8015848:	021b      	lsls	r3, r3, #8
 801584a:	441a      	add	r2, r3
 801584c:	69fb      	ldr	r3, [r7, #28]
 801584e:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[3] << 16;
 8015852:	69fb      	ldr	r3, [r7, #28]
 8015854:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8015858:	69fb      	ldr	r3, [r7, #28]
 801585a:	78db      	ldrb	r3, [r3, #3]
 801585c:	041b      	lsls	r3, r3, #16
 801585e:	441a      	add	r2, r3
 8015860:	69fb      	ldr	r3, [r7, #28]
 8015862:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
          hdfu->data_ptr += (uint32_t)hdfu->buffer.d8[4] << 24;
 8015866:	69fb      	ldr	r3, [r7, #28]
 8015868:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 801586c:	69fb      	ldr	r3, [r7, #28]
 801586e:	791b      	ldrb	r3, [r3, #4]
 8015870:	061b      	lsls	r3, r3, #24
 8015872:	441a      	add	r2, r3
 8015874:	69fb      	ldr	r3, [r7, #28]
 8015876:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

          if (DfuInterface->Erase(hdfu->data_ptr) != USBD_OK)
 801587a:	69bb      	ldr	r3, [r7, #24]
 801587c:	68db      	ldr	r3, [r3, #12]
 801587e:	69fa      	ldr	r2, [r7, #28]
 8015880:	f8d2 2408 	ldr.w	r2, [r2, #1032]	; 0x408
 8015884:	4610      	mov	r0, r2
 8015886:	4798      	blx	r3
 8015888:	4603      	mov	r3, r0
 801588a:	2b00      	cmp	r3, #0
 801588c:	d032      	beq.n	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
          {
            return (uint8_t)USBD_FAIL;
 801588e:	2303      	movs	r3, #3
 8015890:	e05b      	b.n	801594a <USBD_DFU_EP0_TxReady+0x1c0>
          }
        }
        else
        {
          return (uint8_t)USBD_FAIL;
 8015892:	2303      	movs	r3, #3
 8015894:	e059      	b.n	801594a <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
      else
      {
        /* Reset the global length and block number */
        hdfu->wlength = 0U;
 8015896:	69fb      	ldr	r3, [r7, #28]
 8015898:	2200      	movs	r2, #0
 801589a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
        hdfu->wblock_num = 0U;
 801589e:	69fb      	ldr	r3, [r7, #28]
 80158a0:	2200      	movs	r2, #0
 80158a2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
        /* Call the error management function (command will be NAKed) */
        req.bmRequest = 0U;
 80158a6:	2300      	movs	r3, #0
 80158a8:	733b      	strb	r3, [r7, #12]
        req.wLength = 1U;
 80158aa:	2301      	movs	r3, #1
 80158ac:	827b      	strh	r3, [r7, #18]
        USBD_CtlError(pdev, &req);
 80158ae:	f107 030c 	add.w	r3, r7, #12
 80158b2:	4619      	mov	r1, r3
 80158b4:	6878      	ldr	r0, [r7, #4]
 80158b6:	f001 fc93 	bl	80171e0 <USBD_CtlError>
 80158ba:	e01b      	b.n	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
      }
    }
    /* Regular Download Command */
    else
    {
      if (hdfu->wblock_num > 1U)
 80158bc:	69fb      	ldr	r3, [r7, #28]
 80158be:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d916      	bls.n	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
      {
        /* Decode the required address */
        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 80158c6:	69fb      	ldr	r3, [r7, #28]
 80158c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80158cc:	3b02      	subs	r3, #2
 80158ce:	029a      	lsls	r2, r3, #10
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80158d6:	4413      	add	r3, r2
 80158d8:	617b      	str	r3, [r7, #20]

        /* Perform the write operation */
        if (DfuInterface->Write(hdfu->buffer.d8, (uint8_t *)addr, hdfu->wlength) != USBD_OK)
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	691b      	ldr	r3, [r3, #16]
 80158de:	69f8      	ldr	r0, [r7, #28]
 80158e0:	6979      	ldr	r1, [r7, #20]
 80158e2:	69fa      	ldr	r2, [r7, #28]
 80158e4:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 80158e8:	4798      	blx	r3
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d001      	beq.n	80158f4 <USBD_DFU_EP0_TxReady+0x16a>
        {
          return (uint8_t)USBD_FAIL;
 80158f0:	2303      	movs	r3, #3
 80158f2:	e02a      	b.n	801594a <USBD_DFU_EP0_TxReady+0x1c0>
        }
      }
    }

    /* Reset the global length and block number */
    hdfu->wlength = 0U;
 80158f4:	69fb      	ldr	r3, [r7, #28]
 80158f6:	2200      	movs	r2, #0
 80158f8:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    hdfu->wblock_num = 0U;
 80158fc:	69fb      	ldr	r3, [r7, #28]
 80158fe:	2200      	movs	r2, #0
 8015900:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

    /* Update the state machine */
    hdfu->dev_state =  DFU_STATE_DNLOAD_SYNC;
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	2203      	movs	r2, #3
 8015908:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801590c:	69fb      	ldr	r3, [r7, #28]
 801590e:	2200      	movs	r2, #0
 8015910:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015914:	69fb      	ldr	r3, [r7, #28]
 8015916:	2200      	movs	r2, #0
 8015918:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801591c:	69fb      	ldr	r3, [r7, #28]
 801591e:	2200      	movs	r2, #0
 8015920:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015924:	69fb      	ldr	r3, [r7, #28]
 8015926:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801592a:	69fb      	ldr	r3, [r7, #28]
 801592c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015930:	e00a      	b.n	8015948 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else if (hdfu->dev_state == DFU_STATE_MANIFEST)/* Manifestation in progress */
 8015932:	69fb      	ldr	r3, [r7, #28]
 8015934:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015938:	2b07      	cmp	r3, #7
 801593a:	d103      	bne.n	8015944 <USBD_DFU_EP0_TxReady+0x1ba>
  {
    /* Start leaving DFU mode */
    DFU_Leave(pdev);
 801593c:	6878      	ldr	r0, [r7, #4]
 801593e:	f000 fb75 	bl	801602c <DFU_Leave>
 8015942:	e001      	b.n	8015948 <USBD_DFU_EP0_TxReady+0x1be>
  }
  else
  {
    return (uint8_t)USBD_FAIL;
 8015944:	2303      	movs	r3, #3
 8015946:	e000      	b.n	801594a <USBD_DFU_EP0_TxReady+0x1c0>
  }

  return (uint8_t)USBD_OK;
 8015948:	2300      	movs	r3, #0
}
 801594a:	4618      	mov	r0, r3
 801594c:	3720      	adds	r7, #32
 801594e:	46bd      	mov	sp, r7
 8015950:	bd80      	pop	{r7, pc}

08015952 <USBD_DFU_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_DFU_SOF(USBD_HandleTypeDef *pdev)
{
 8015952:	b480      	push	{r7}
 8015954:	b083      	sub	sp, #12
 8015956:	af00      	add	r7, sp, #0
 8015958:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 801595a:	2300      	movs	r3, #0
}
 801595c:	4618      	mov	r0, r3
 801595e:	370c      	adds	r7, #12
 8015960:	46bd      	mov	sp, r7
 8015962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015966:	4770      	bx	lr

08015968 <USBD_DFU_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_DFU_GetDeviceQualifierDesc(uint16_t *length)
{
 8015968:	b480      	push	{r7}
 801596a:	b083      	sub	sp, #12
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_DFU_DeviceQualifierDesc);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	220a      	movs	r2, #10
 8015974:	801a      	strh	r2, [r3, #0]

  return USBD_DFU_DeviceQualifierDesc;
 8015976:	4b03      	ldr	r3, [pc, #12]	; (8015984 <USBD_DFU_GetDeviceQualifierDesc+0x1c>)
}
 8015978:	4618      	mov	r0, r3
 801597a:	370c      	adds	r7, #12
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr
 8015984:	20000888 	.word	0x20000888

08015988 <USBD_DFU_GetUsrStringDesc>:
  * @param  length : pointer data length
  * @retval pointer to the descriptor table or NULL if the descriptor is not supported.
  */
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
static uint8_t *USBD_DFU_GetUsrStringDesc(USBD_HandleTypeDef *pdev, uint8_t index, uint16_t *length)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b086      	sub	sp, #24
 801598c:	af00      	add	r7, sp, #0
 801598e:	60f8      	str	r0, [r7, #12]
 8015990:	460b      	mov	r3, r1
 8015992:	607a      	str	r2, [r7, #4]
 8015994:	72fb      	strb	r3, [r7, #11]
  static uint8_t USBD_StrDesc[255];
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801599c:	617b      	str	r3, [r7, #20]

  /* Check if the requested string interface is supported */
  if (index <= (USBD_IDX_INTERFACE_STR + USBD_DFU_MAX_ITF_NUM))
 801599e:	7afb      	ldrb	r3, [r7, #11]
 80159a0:	2b06      	cmp	r3, #6
 80159a2:	d808      	bhi.n	80159b6 <USBD_DFU_GetUsrStringDesc+0x2e>
  {
    USBD_GetString((uint8_t *)DfuInterface->pStrDesc, USBD_StrDesc, length);
 80159a4:	697b      	ldr	r3, [r7, #20]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	687a      	ldr	r2, [r7, #4]
 80159aa:	4905      	ldr	r1, [pc, #20]	; (80159c0 <USBD_DFU_GetUsrStringDesc+0x38>)
 80159ac:	4618      	mov	r0, r3
 80159ae:	f001 fc28 	bl	8017202 <USBD_GetString>
    return USBD_StrDesc;
 80159b2:	4b03      	ldr	r3, [pc, #12]	; (80159c0 <USBD_DFU_GetUsrStringDesc+0x38>)
 80159b4:	e000      	b.n	80159b8 <USBD_DFU_GetUsrStringDesc+0x30>
  }
  else
  {
    /* Not supported Interface Descriptor index */
    return NULL;
 80159b6:	2300      	movs	r3, #0
  }
}
 80159b8:	4618      	mov	r0, r3
 80159ba:	3718      	adds	r7, #24
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}
 80159c0:	20000c30 	.word	0x20000c30

080159c4 <USBD_DFU_RegisterMedia>:
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_DFU_RegisterMedia(USBD_HandleTypeDef *pdev,
                               USBD_DFU_MediaTypeDef *fops)
{
 80159c4:	b480      	push	{r7}
 80159c6:	b083      	sub	sp, #12
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	6078      	str	r0, [r7, #4]
 80159cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80159ce:	683b      	ldr	r3, [r7, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d101      	bne.n	80159d8 <USBD_DFU_RegisterMedia+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80159d4:	2303      	movs	r3, #3
 80159d6:	e004      	b.n	80159e2 <USBD_DFU_RegisterMedia+0x1e>
  }

  pdev->pUserData = fops;
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	683a      	ldr	r2, [r7, #0]
 80159dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80159e0:	2300      	movs	r3, #0
}
 80159e2:	4618      	mov	r0, r3
 80159e4:	370c      	adds	r7, #12
 80159e6:	46bd      	mov	sp, r7
 80159e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ec:	4770      	bx	lr
	...

080159f0 <DFU_Detach>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure.
  * @retval None.
  */
static void DFU_Detach(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b084      	sub	sp, #16
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015a00:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015a02:	68fb      	ldr	r3, [r7, #12]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d051      	beq.n	8015aac <DFU_Detach+0xbc>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015a0e:	2b02      	cmp	r3, #2
 8015a10:	d013      	beq.n	8015a3a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015a18:	2b03      	cmp	r3, #3
 8015a1a:	d00e      	beq.n	8015a3a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015a22:	2b05      	cmp	r3, #5
 8015a24:	d009      	beq.n	8015a3a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015a2c:	2b06      	cmp	r3, #6
 8015a2e:	d004      	beq.n	8015a3a <DFU_Detach+0x4a>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015a36:	2b09      	cmp	r3, #9
 8015a38:	d125      	bne.n	8015a86 <DFU_Detach+0x96>
  {
    /* Update the state machine */
    hdfu->dev_state = DFU_STATE_IDLE;
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	2202      	movs	r2, #2
 8015a3e:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	2200      	movs	r2, #0
 8015a46:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	2200      	movs	r2, #0
 8015a56:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /*bwPollTimeout=0ms*/
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015a62:	68fb      	ldr	r3, [r7, #12]
 8015a64:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /*iString*/
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	2200      	movs	r2, #0
 8015a72:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	2200      	movs	r2, #0
 8015a7a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8015a7e:	68fb      	ldr	r3, [r7, #12]
 8015a80:	2200      	movs	r2, #0
 8015a82:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
  }

  /* Check the detach capability in the DFU functional descriptor */
  if (((USBD_DFU_CfgDesc[12U + (9U * USBD_DFU_MAX_ITF_NUM)]) & DFU_DETACH_MASK) != 0U)
 8015a86:	4b0b      	ldr	r3, [pc, #44]	; (8015ab4 <DFU_Detach+0xc4>)
 8015a88:	7d5b      	ldrb	r3, [r3, #21]
 8015a8a:	f003 0310 	and.w	r3, r3, #16
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d006      	beq.n	8015aa0 <DFU_Detach+0xb0>
  {
    /* Perform an Attach-Detach operation on USB bus */
    (void)USBD_Stop(pdev);
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f000 fbab 	bl	80161ee <USBD_Stop>
    (void)USBD_Start(pdev);
 8015a98:	6878      	ldr	r0, [r7, #4]
 8015a9a:	f000 fb9c 	bl	80161d6 <USBD_Start>
 8015a9e:	e006      	b.n	8015aae <DFU_Detach+0xbe>
  }
  else
  {
    /* Wait for the period of time specified in Detach request */
    USBD_Delay((uint32_t)req->wValue);
 8015aa0:	683b      	ldr	r3, [r7, #0]
 8015aa2:	885b      	ldrh	r3, [r3, #2]
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	f7f6 f90f 	bl	800bcc8 <HAL_Delay>
 8015aaa:	e000      	b.n	8015aae <DFU_Detach+0xbe>
    return;
 8015aac:	bf00      	nop
  }
}
 8015aae:	3710      	adds	r7, #16
 8015ab0:	46bd      	mov	sp, r7
 8015ab2:	bd80      	pop	{r7, pc}
 8015ab4:	2000086c 	.word	0x2000086c

08015ab8 <DFU_Download>:
  * @param  pdev: device instance
  * @param  req: pointer to the request structure
  * @retval None
  */
static void DFU_Download(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ab8:	b580      	push	{r7, lr}
 8015aba:	b084      	sub	sp, #16
 8015abc:	af00      	add	r7, sp, #0
 8015abe:	6078      	str	r0, [r7, #4]
 8015ac0:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ac8:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d05b      	beq.n	8015b88 <DFU_Download+0xd0>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8015ad0:	683b      	ldr	r3, [r7, #0]
 8015ad2:	88db      	ldrh	r3, [r3, #6]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d02d      	beq.n	8015b34 <DFU_Download+0x7c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE))
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015ade:	2b02      	cmp	r3, #2
 8015ae0:	d004      	beq.n	8015aec <DFU_Download+0x34>
 8015ae2:	68fb      	ldr	r3, [r7, #12]
 8015ae4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015ae8:	2b05      	cmp	r3, #5
 8015aea:	d11e      	bne.n	8015b2a <DFU_Download+0x72>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8015aec:	683b      	ldr	r3, [r7, #0]
 8015aee:	885b      	ldrh	r3, [r3, #2]
 8015af0:	461a      	mov	r2, r3
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8015af8:	683b      	ldr	r3, [r7, #0]
 8015afa:	88db      	ldrh	r3, [r3, #6]
 8015afc:	461a      	mov	r2, r3
 8015afe:	68fb      	ldr	r3, [r7, #12]
 8015b00:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* Update the state machine */
      hdfu->dev_state = DFU_STATE_DNLOAD_SYNC;
 8015b04:	68fb      	ldr	r3, [r7, #12]
 8015b06:	2203      	movs	r2, #3
 8015b08:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[4] = hdfu->dev_state;
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

      /* Prepare the reception of the buffer over EP0 */
      (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hdfu->buffer.d8, hdfu->wlength);
 8015b18:	68f9      	ldr	r1, [r7, #12]
 8015b1a:	68fb      	ldr	r3, [r7, #12]
 8015b1c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015b20:	461a      	mov	r2, r3
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f001 fbf9 	bl	801731a <USBD_CtlPrepareRx>
 8015b28:	e02f      	b.n	8015b8a <DFU_Download+0xd2>
    }
    /* Unsupported state */
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8015b2a:	6839      	ldr	r1, [r7, #0]
 8015b2c:	6878      	ldr	r0, [r7, #4]
 8015b2e:	f001 fb57 	bl	80171e0 <USBD_CtlError>
 8015b32:	e02a      	b.n	8015b8a <DFU_Download+0xd2>
  }
  /* 0 Data DNLOAD request */
  else
  {
    /* End of DNLOAD operation*/
    if ((hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) || (hdfu->dev_state == DFU_STATE_IDLE))
 8015b34:	68fb      	ldr	r3, [r7, #12]
 8015b36:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015b3a:	2b05      	cmp	r3, #5
 8015b3c:	d004      	beq.n	8015b48 <DFU_Download+0x90>
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015b44:	2b02      	cmp	r3, #2
 8015b46:	d11a      	bne.n	8015b7e <DFU_Download+0xc6>
    {
      hdfu->manif_state = DFU_MANIFEST_IN_PROGRESS;
 8015b48:	68fb      	ldr	r3, [r7, #12]
 8015b4a:	2201      	movs	r2, #1
 8015b4c:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
      hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	2206      	movs	r2, #6
 8015b54:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
      hdfu->dev_status[1] = 0U;
 8015b58:	68fb      	ldr	r3, [r7, #12]
 8015b5a:	2200      	movs	r2, #0
 8015b5c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
      hdfu->dev_status[2] = 0U;
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	2200      	movs	r2, #0
 8015b64:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
      hdfu->dev_status[3] = 0U;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
      hdfu->dev_status[4] = hdfu->dev_state;
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015b7c:	e005      	b.n	8015b8a <DFU_Download+0xd2>
    }
    else
    {
      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8015b7e:	6839      	ldr	r1, [r7, #0]
 8015b80:	6878      	ldr	r0, [r7, #4]
 8015b82:	f001 fb2d 	bl	80171e0 <USBD_CtlError>
 8015b86:	e000      	b.n	8015b8a <DFU_Download+0xd2>
    return;
 8015b88:	bf00      	nop
    }
  }
}
 8015b8a:	3710      	adds	r7, #16
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	bd80      	pop	{r7, pc}

08015b90 <DFU_Upload>:
  * @param  pdev: instance
  * @param  req: pointer to the request structure
  * @retval status
  */
static void DFU_Upload(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b086      	sub	sp, #24
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
 8015b98:	6039      	str	r1, [r7, #0]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ba0:	617b      	str	r3, [r7, #20]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015ba8:	613b      	str	r3, [r7, #16]
  uint8_t *phaddr;
  uint32_t addr;

  if (hdfu == NULL)
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	f000 80c4 	beq.w	8015d3a <DFU_Upload+0x1aa>
  {
    return;
  }

  /* Data setup request */
  if (req->wLength > 0U)
 8015bb2:	683b      	ldr	r3, [r7, #0]
 8015bb4:	88db      	ldrh	r3, [r3, #6]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 80a8 	beq.w	8015d0c <DFU_Upload+0x17c>
  {
    if ((hdfu->dev_state == DFU_STATE_IDLE) || (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015bc2:	2b02      	cmp	r3, #2
 8015bc4:	d005      	beq.n	8015bd2 <DFU_Upload+0x42>
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015bcc:	2b09      	cmp	r3, #9
 8015bce:	f040 8090 	bne.w	8015cf2 <DFU_Upload+0x162>
    {
      /* Update the global length and block number */
      hdfu->wblock_num = req->wValue;
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	885b      	ldrh	r3, [r3, #2]
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	697b      	ldr	r3, [r7, #20]
 8015bda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
      hdfu->wlength = req->wLength;
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	88db      	ldrh	r3, [r3, #6]
 8015be2:	461a      	mov	r2, r3
 8015be4:	697b      	ldr	r3, [r7, #20]
 8015be6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404

      /* DFU Get Command */
      if (hdfu->wblock_num == 0U)
 8015bea:	697b      	ldr	r3, [r7, #20]
 8015bec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	d12c      	bne.n	8015c4e <DFU_Upload+0xbe>
      {
        /* Update the state machine */
        hdfu->dev_state = (hdfu->wlength > 3U) ? DFU_STATE_IDLE : DFU_STATE_UPLOAD_IDLE;
 8015bf4:	697b      	ldr	r3, [r7, #20]
 8015bf6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015bfa:	2b03      	cmp	r3, #3
 8015bfc:	d901      	bls.n	8015c02 <DFU_Upload+0x72>
 8015bfe:	2202      	movs	r2, #2
 8015c00:	e000      	b.n	8015c04 <DFU_Upload+0x74>
 8015c02:	2209      	movs	r2, #9
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015c0a:	697b      	ldr	r3, [r7, #20]
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015c12:	697b      	ldr	r3, [r7, #20]
 8015c14:	2200      	movs	r2, #0
 8015c16:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Store the values of all supported commands */
        hdfu->buffer.d8[0] = DFU_CMD_GETCOMMANDS;
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2200      	movs	r2, #0
 8015c32:	701a      	strb	r2, [r3, #0]
        hdfu->buffer.d8[1] = DFU_CMD_SETADDRESSPOINTER;
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	2221      	movs	r2, #33	; 0x21
 8015c38:	705a      	strb	r2, [r3, #1]
        hdfu->buffer.d8[2] = DFU_CMD_ERASE;
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	2241      	movs	r2, #65	; 0x41
 8015c3e:	709a      	strb	r2, [r3, #2]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->buffer.d8[0])), 3U);
 8015c40:	697b      	ldr	r3, [r7, #20]
 8015c42:	2203      	movs	r2, #3
 8015c44:	4619      	mov	r1, r3
 8015c46:	6878      	ldr	r0, [r7, #4]
 8015c48:	f001 fb3b 	bl	80172c2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8015c4c:	e076      	b.n	8015d3c <DFU_Upload+0x1ac>
      }
      else if (hdfu->wblock_num > 1U)
 8015c4e:	697b      	ldr	r3, [r7, #20]
 8015c50:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d931      	bls.n	8015cbc <DFU_Upload+0x12c>
      {
        hdfu->dev_state = DFU_STATE_UPLOAD_IDLE;
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	2209      	movs	r2, #9
 8015c5c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	2200      	movs	r2, #0
 8015c64:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015c68:	697b      	ldr	r3, [r7, #20]
 8015c6a:	2200      	movs	r2, #0
 8015c6c:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015c70:	697b      	ldr	r3, [r7, #20]
 8015c72:	2200      	movs	r2, #0
 8015c74:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015c78:	697b      	ldr	r3, [r7, #20]
 8015c7a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015c7e:	697b      	ldr	r3, [r7, #20]
 8015c80:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        addr = ((hdfu->wblock_num - 2U) * USBD_DFU_XFER_SIZE) + hdfu->data_ptr;
 8015c84:	697b      	ldr	r3, [r7, #20]
 8015c86:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015c8a:	3b02      	subs	r3, #2
 8015c8c:	029a      	lsls	r2, r3, #10
 8015c8e:	697b      	ldr	r3, [r7, #20]
 8015c90:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8015c94:	4413      	add	r3, r2
 8015c96:	60fb      	str	r3, [r7, #12]

        /* Return the physical address where data are stored */
        phaddr = DfuInterface->Read((uint8_t *)addr, hdfu->buffer.d8, hdfu->wlength);
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	695b      	ldr	r3, [r3, #20]
 8015c9c:	68f8      	ldr	r0, [r7, #12]
 8015c9e:	6979      	ldr	r1, [r7, #20]
 8015ca0:	697a      	ldr	r2, [r7, #20]
 8015ca2:	f8d2 2404 	ldr.w	r2, [r2, #1028]	; 0x404
 8015ca6:	4798      	blx	r3
 8015ca8:	60b8      	str	r0, [r7, #8]

        /* Send the status data over EP0 */
        (void)USBD_CtlSendData(pdev, phaddr, hdfu->wlength);
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	68b9      	ldr	r1, [r7, #8]
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f001 fb04 	bl	80172c2 <USBD_CtlSendData>
      if (hdfu->wblock_num == 0U)
 8015cba:	e03f      	b.n	8015d3c <DFU_Upload+0x1ac>
      }
      else  /* unsupported hdfu->wblock_num */
      {
        hdfu->dev_state = DFU_ERROR_STALLEDPKT;
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	220f      	movs	r2, #15
 8015cc0:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

        hdfu->dev_status[1] = 0U;
 8015cc4:	697b      	ldr	r3, [r7, #20]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015ccc:	697b      	ldr	r3, [r7, #20]
 8015cce:	2200      	movs	r2, #0
 8015cd0:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015cd4:	697b      	ldr	r3, [r7, #20]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015ce2:	697b      	ldr	r3, [r7, #20]
 8015ce4:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

        /* Call the error management function (command will be NAKed */
        USBD_CtlError(pdev, req);
 8015ce8:	6839      	ldr	r1, [r7, #0]
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f001 fa78 	bl	80171e0 <USBD_CtlError>
      if (hdfu->wblock_num == 0U)
 8015cf0:	e024      	b.n	8015d3c <DFU_Upload+0x1ac>
      }
    }
    /* Unsupported state */
    else
    {
      hdfu->wlength = 0U;
 8015cf2:	697b      	ldr	r3, [r7, #20]
 8015cf4:	2200      	movs	r2, #0
 8015cf6:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
      hdfu->wblock_num = 0U;
 8015cfa:	697b      	ldr	r3, [r7, #20]
 8015cfc:	2200      	movs	r2, #0
 8015cfe:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

      /* Call the error management function (command will be NAKed */
      USBD_CtlError(pdev, req);
 8015d02:	6839      	ldr	r1, [r7, #0]
 8015d04:	6878      	ldr	r0, [r7, #4]
 8015d06:	f001 fa6b 	bl	80171e0 <USBD_CtlError>
 8015d0a:	e017      	b.n	8015d3c <DFU_Upload+0x1ac>
    }
  }
  /* No Data setup request */
  else
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015d0c:	697b      	ldr	r3, [r7, #20]
 8015d0e:	2202      	movs	r2, #2
 8015d10:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 8015d14:	697b      	ldr	r3, [r7, #20]
 8015d16:	2200      	movs	r2, #0
 8015d18:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015d1c:	697b      	ldr	r3, [r7, #20]
 8015d1e:	2200      	movs	r2, #0
 8015d20:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 8015d24:	697b      	ldr	r3, [r7, #20]
 8015d26:	2200      	movs	r2, #0
 8015d28:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015d2c:	697b      	ldr	r3, [r7, #20]
 8015d2e:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015d32:	697b      	ldr	r3, [r7, #20]
 8015d34:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
 8015d38:	e000      	b.n	8015d3c <DFU_Upload+0x1ac>
    return;
 8015d3a:	bf00      	nop
  }
}
 8015d3c:	3718      	adds	r7, #24
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
	...

08015d44 <DFU_GetStatus>:
  *         Handles the DFU GETSTATUS request.
  * @param  pdev: instance
  * @retval status
  */
static void DFU_GetStatus(USBD_HandleTypeDef *pdev)
{
 8015d44:	b580      	push	{r7, lr}
 8015d46:	b084      	sub	sp, #16
 8015d48:	af00      	add	r7, sp, #0
 8015d4a:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015d52:	60fb      	str	r3, [r7, #12]
  USBD_DFU_MediaTypeDef *DfuInterface = (USBD_DFU_MediaTypeDef *)pdev->pUserData;
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015d5a:	60bb      	str	r3, [r7, #8]

  if (hdfu == NULL)
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	2b00      	cmp	r3, #0
 8015d60:	f000 80a0 	beq.w	8015ea4 <DFU_GetStatus+0x160>
  {
    return;
  }

  switch (hdfu->dev_state)
 8015d64:	68fb      	ldr	r3, [r7, #12]
 8015d66:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015d6a:	2b03      	cmp	r3, #3
 8015d6c:	d002      	beq.n	8015d74 <DFU_GetStatus+0x30>
 8015d6e:	2b06      	cmp	r3, #6
 8015d70:	d051      	beq.n	8015e16 <DFU_GetStatus+0xd2>
        }
      }
      break;

    default:
      break;
 8015d72:	e08e      	b.n	8015e92 <DFU_GetStatus+0x14e>
      if (hdfu->wlength != 0U)
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015d7a:	2b00      	cmp	r3, #0
 8015d7c:	d034      	beq.n	8015de8 <DFU_GetStatus+0xa4>
        hdfu->dev_state = DFU_STATE_DNLOAD_BUSY;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	2204      	movs	r2, #4
 8015d82:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2200      	movs	r2, #0
 8015d8a:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	2200      	movs	r2, #0
 8015d92:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015d96:	68fb      	ldr	r3, [r7, #12]
 8015d98:	2200      	movs	r2, #0
 8015d9a:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
        if ((hdfu->wblock_num == 0U) && (hdfu->buffer.d8[0] == DFU_CMD_ERASE))
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d10e      	bne.n	8015dd2 <DFU_GetStatus+0x8e>
 8015db4:	68fb      	ldr	r3, [r7, #12]
 8015db6:	781b      	ldrb	r3, [r3, #0]
 8015db8:	2b41      	cmp	r3, #65	; 0x41
 8015dba:	d10a      	bne.n	8015dd2 <DFU_GetStatus+0x8e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_ERASE, hdfu->dev_status);
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	699b      	ldr	r3, [r3, #24]
 8015dc0:	68fa      	ldr	r2, [r7, #12]
 8015dc2:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8015dc6:	68fa      	ldr	r2, [r7, #12]
 8015dc8:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8015dcc:	2100      	movs	r1, #0
 8015dce:	4798      	blx	r3
      break;
 8015dd0:	e05f      	b.n	8015e92 <DFU_GetStatus+0x14e>
          DfuInterface->GetStatus(hdfu->data_ptr, DFU_MEDIA_PROGRAM, hdfu->dev_status);
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	699b      	ldr	r3, [r3, #24]
 8015dd6:	68fa      	ldr	r2, [r7, #12]
 8015dd8:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
 8015ddc:	68fa      	ldr	r2, [r7, #12]
 8015dde:	f502 6282 	add.w	r2, r2, #1040	; 0x410
 8015de2:	2101      	movs	r1, #1
 8015de4:	4798      	blx	r3
      break;
 8015de6:	e054      	b.n	8015e92 <DFU_GetStatus+0x14e>
        hdfu->dev_state = DFU_STATE_DNLOAD_IDLE;
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2205      	movs	r2, #5
 8015dec:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 0U;
 8015df0:	68fb      	ldr	r3, [r7, #12]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015df8:	68fb      	ldr	r3, [r7, #12]
 8015dfa:	2200      	movs	r2, #0
 8015dfc:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015e00:	68fb      	ldr	r3, [r7, #12]
 8015e02:	2200      	movs	r2, #0
 8015e04:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015e0e:	68fb      	ldr	r3, [r7, #12]
 8015e10:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8015e14:	e03d      	b.n	8015e92 <DFU_GetStatus+0x14e>
      if (hdfu->manif_state == DFU_MANIFEST_IN_PROGRESS)
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	d116      	bne.n	8015e4e <DFU_GetStatus+0x10a>
        hdfu->dev_state = DFU_STATE_MANIFEST;
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	2207      	movs	r2, #7
 8015e24:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
        hdfu->dev_status[1] = 1U;             /*bwPollTimeout = 1ms*/
 8015e28:	68fb      	ldr	r3, [r7, #12]
 8015e2a:	2201      	movs	r2, #1
 8015e2c:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
        hdfu->dev_status[2] = 0U;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	2200      	movs	r2, #0
 8015e34:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
        hdfu->dev_status[3] = 0U;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2200      	movs	r2, #0
 8015e3c:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
        hdfu->dev_status[4] = hdfu->dev_state;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8015e4c:	e020      	b.n	8015e90 <DFU_GetStatus+0x14c>
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d11b      	bne.n	8015e90 <DFU_GetStatus+0x14c>
            (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U))
 8015e58:	4b14      	ldr	r3, [pc, #80]	; (8015eac <DFU_GetStatus+0x168>)
 8015e5a:	7d1b      	ldrb	r3, [r3, #20]
 8015e5c:	f003 0304 	and.w	r3, r3, #4
        if ((hdfu->manif_state == DFU_MANIFEST_COMPLETE) &&
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d015      	beq.n	8015e90 <DFU_GetStatus+0x14c>
          hdfu->dev_state = DFU_STATE_IDLE;
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2202      	movs	r2, #2
 8015e68:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
          hdfu->dev_status[1] = 0U;
 8015e6c:	68fb      	ldr	r3, [r7, #12]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
          hdfu->dev_status[2] = 0U;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	2200      	movs	r2, #0
 8015e78:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
          hdfu->dev_status[3] = 0U;
 8015e7c:	68fb      	ldr	r3, [r7, #12]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
          hdfu->dev_status[4] = hdfu->dev_state;
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
      break;
 8015e90:	bf00      	nop
  }

  /* Send the status data over EP0 */
  (void)USBD_CtlSendData(pdev, (uint8_t *)(&(hdfu->dev_status[0])), 6U);
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8015e98:	2206      	movs	r2, #6
 8015e9a:	4619      	mov	r1, r3
 8015e9c:	6878      	ldr	r0, [r7, #4]
 8015e9e:	f001 fa10 	bl	80172c2 <USBD_CtlSendData>
 8015ea2:	e000      	b.n	8015ea6 <DFU_GetStatus+0x162>
    return;
 8015ea4:	bf00      	nop
}
 8015ea6:	3710      	adds	r7, #16
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	bd80      	pop	{r7, pc}
 8015eac:	2000086c 	.word	0x2000086c

08015eb0 <DFU_ClearStatus>:
  *         Handles the DFU CLRSTATUS request.
  * @param  pdev: device instance
  * @retval status
  */
static void DFU_ClearStatus(USBD_HandleTypeDef *pdev)
{
 8015eb0:	b480      	push	{r7}
 8015eb2:	b085      	sub	sp, #20
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015ebe:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d042      	beq.n	8015f4c <DFU_ClearStatus+0x9c>
  {
    return;
  }

  if (hdfu->dev_state == DFU_STATE_ERROR)
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015ecc:	2b0a      	cmp	r3, #10
 8015ece:	d11e      	bne.n	8015f0e <DFU_ClearStatus+0x5e>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	2202      	movs	r2, #2
 8015ed4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE; /* bStatus */
 8015ed8:	68fb      	ldr	r3, [r7, #12]
 8015eda:	2200      	movs	r2, #0
 8015edc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015ee0:	68fb      	ldr	r3, [r7, #12]
 8015ee2:	2200      	movs	r2, #0
 8015ee4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	2200      	movs	r2, #0
 8015eec:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8015ef0:	68fb      	ldr	r3, [r7, #12]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2200      	movs	r2, #0
 8015f08:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8015f0c:	e01f      	b.n	8015f4e <DFU_ClearStatus+0x9e>
  }
  else
  {
    /* State Error */
    hdfu->dev_state = DFU_STATE_ERROR;
 8015f0e:	68fb      	ldr	r3, [r7, #12]
 8015f10:	220a      	movs	r2, #10
 8015f12:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_UNKNOWN; /* bStatus */
 8015f16:	68fb      	ldr	r3, [r7, #12]
 8015f18:	220e      	movs	r2, #14
 8015f1a:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	2200      	movs	r2, #0
 8015f22:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015f26:	68fb      	ldr	r3, [r7, #12]
 8015f28:	2200      	movs	r2, #0
 8015f2a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2200      	movs	r2, #0
 8015f32:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state; /* bState */
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	2200      	movs	r2, #0
 8015f46:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
 8015f4a:	e000      	b.n	8015f4e <DFU_ClearStatus+0x9e>
    return;
 8015f4c:	bf00      	nop
  }
}
 8015f4e:	3714      	adds	r7, #20
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr

08015f58 <DFU_GetState>:
  *         Handles the DFU GETSTATE request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_GetState(USBD_HandleTypeDef *pdev)
{
 8015f58:	b580      	push	{r7, lr}
 8015f5a:	b084      	sub	sp, #16
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015f66:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015f68:	68fb      	ldr	r3, [r7, #12]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d008      	beq.n	8015f80 <DFU_GetState+0x28>
  {
    return;
  }

  /* Return the current state of the DFU interface */
  (void)USBD_CtlSendData(pdev, &hdfu->dev_state, 1U);
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	f503 6383 	add.w	r3, r3, #1048	; 0x418
 8015f74:	2201      	movs	r2, #1
 8015f76:	4619      	mov	r1, r3
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f001 f9a2 	bl	80172c2 <USBD_CtlSendData>
 8015f7e:	e000      	b.n	8015f82 <DFU_GetState+0x2a>
    return;
 8015f80:	bf00      	nop
}
 8015f82:	3710      	adds	r7, #16
 8015f84:	46bd      	mov	sp, r7
 8015f86:	bd80      	pop	{r7, pc}

08015f88 <DFU_Abort>:
  *         Handles the DFU ABORT request.
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Abort(USBD_HandleTypeDef *pdev)
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015f96:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d03f      	beq.n	801601e <DFU_Abort+0x96>
  {
    return;
  }

  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8015fa4:	2b02      	cmp	r3, #2
 8015fa6:	d013      	beq.n	8015fd0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
  if ((hdfu->dev_state == DFU_STATE_IDLE) ||
 8015fae:	2b03      	cmp	r3, #3
 8015fb0:	d00e      	beq.n	8015fd0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015fb2:	68fb      	ldr	r3, [r7, #12]
 8015fb4:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_SYNC) ||
 8015fb8:	2b05      	cmp	r3, #5
 8015fba:	d009      	beq.n	8015fd0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_DNLOAD_IDLE) ||
 8015fc2:	2b06      	cmp	r3, #6
 8015fc4:	d004      	beq.n	8015fd0 <DFU_Abort+0x48>
      (hdfu->dev_state == DFU_STATE_UPLOAD_IDLE))
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
      (hdfu->dev_state == DFU_STATE_MANIFEST_SYNC) ||
 8015fcc:	2b09      	cmp	r3, #9
 8015fce:	d127      	bne.n	8016020 <DFU_Abort+0x98>
  {
    hdfu->dev_state = DFU_STATE_IDLE;
 8015fd0:	68fb      	ldr	r3, [r7, #12]
 8015fd2:	2202      	movs	r2, #2
 8015fd4:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    hdfu->dev_status[0] = DFU_ERROR_NONE;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	2200      	movs	r2, #0
 8015fdc:	f883 2410 	strb.w	r2, [r3, #1040]	; 0x410
    hdfu->dev_status[1] = 0U;
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	2200      	movs	r2, #0
 8015fe4:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	2200      	movs	r2, #0
 8015fec:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U; /* bwPollTimeout=0ms */
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8015ff8:	68fb      	ldr	r3, [r7, #12]
 8015ffa:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    hdfu->dev_status[5] = 0U; /* iString */
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	2200      	movs	r2, #0
 8016008:	f883 2415 	strb.w	r2, [r3, #1045]	; 0x415
    hdfu->wblock_num = 0U;
 801600c:	68fb      	ldr	r3, [r7, #12]
 801600e:	2200      	movs	r2, #0
 8016010:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    hdfu->wlength = 0U;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	2200      	movs	r2, #0
 8016018:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 801601c:	e000      	b.n	8016020 <DFU_Abort+0x98>
    return;
 801601e:	bf00      	nop
  }
}
 8016020:	3714      	adds	r7, #20
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr
	...

0801602c <DFU_Leave>:
  *         and resets device to jump to user loaded code).
  * @param  pdev: device instance
  * @retval None
  */
static void DFU_Leave(USBD_HandleTypeDef *pdev)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b084      	sub	sp, #16
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
  USBD_DFU_HandleTypeDef *hdfu = (USBD_DFU_HandleTypeDef *)pdev->pClassData;
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801603a:	60fb      	str	r3, [r7, #12]

  if (hdfu == NULL)
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	2b00      	cmp	r3, #0
 8016040:	d03b      	beq.n	80160ba <DFU_Leave+0x8e>
  {
    return;
  }

  hdfu->manif_state = DFU_MANIFEST_COMPLETE;
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	2200      	movs	r2, #0
 8016046:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419

  if (((USBD_DFU_CfgDesc[(11U + (9U * USBD_DFU_MAX_ITF_NUM))]) & 0x04U) != 0U)
 801604a:	4b1e      	ldr	r3, [pc, #120]	; (80160c4 <DFU_Leave+0x98>)
 801604c:	7d1b      	ldrb	r3, [r3, #20]
 801604e:	f003 0304 	and.w	r3, r3, #4
 8016052:	2b00      	cmp	r3, #0
 8016054:	d016      	beq.n	8016084 <DFU_Leave+0x58>
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_SYNC;
 8016056:	68fb      	ldr	r3, [r7, #12]
 8016058:	2206      	movs	r2, #6
 801605a:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	2200      	movs	r2, #0
 8016062:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	2200      	movs	r2, #0
 801606a:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	2200      	movs	r2, #0
 8016072:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 801607c:	68fb      	ldr	r3, [r7, #12]
 801607e:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414
    return;
 8016082:	e01b      	b.n	80160bc <DFU_Leave+0x90>
  }
  else
  {
    hdfu->dev_state = DFU_STATE_MANIFEST_WAIT_RESET;
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	2208      	movs	r2, #8
 8016088:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418

    hdfu->dev_status[1] = 0U;
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	2200      	movs	r2, #0
 8016090:	f883 2411 	strb.w	r2, [r3, #1041]	; 0x411
    hdfu->dev_status[2] = 0U;
 8016094:	68fb      	ldr	r3, [r7, #12]
 8016096:	2200      	movs	r2, #0
 8016098:	f883 2412 	strb.w	r2, [r3, #1042]	; 0x412
    hdfu->dev_status[3] = 0U;
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	2200      	movs	r2, #0
 80160a0:	f883 2413 	strb.w	r2, [r3, #1043]	; 0x413
    hdfu->dev_status[4] = hdfu->dev_state;
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 80160aa:	68fb      	ldr	r3, [r7, #12]
 80160ac:	f883 2414 	strb.w	r2, [r3, #1044]	; 0x414

    /* Disconnect the USB device */
    (void)USBD_Stop(pdev);
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 f89c 	bl	80161ee <USBD_Stop>

    /* Generate system reset to allow jumping to the user code */
    NVIC_SystemReset();
 80160b6:	f7ff f9b3 	bl	8015420 <__NVIC_SystemReset>
    return;
 80160ba:	bf00      	nop

    /* The next instructions will not be reached (system reset) */
  }
}
 80160bc:	3710      	adds	r7, #16
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	2000086c 	.word	0x2000086c

080160c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b086      	sub	sp, #24
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	60f8      	str	r0, [r7, #12]
 80160d0:	60b9      	str	r1, [r7, #8]
 80160d2:	4613      	mov	r3, r2
 80160d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d101      	bne.n	80160e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80160dc:	2303      	movs	r3, #3
 80160de:	e01f      	b.n	8016120 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	2200      	movs	r2, #0
 80160e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2200      	movs	r2, #0
 80160ec:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2200      	movs	r2, #0
 80160f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80160f8:	68bb      	ldr	r3, [r7, #8]
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d003      	beq.n	8016106 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	68ba      	ldr	r2, [r7, #8]
 8016102:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	2201      	movs	r2, #1
 801610a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	79fa      	ldrb	r2, [r7, #7]
 8016112:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	f001 fc59 	bl	80179cc <USBD_LL_Init>
 801611a:	4603      	mov	r3, r0
 801611c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801611e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016120:	4618      	mov	r0, r3
 8016122:	3718      	adds	r7, #24
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <USBD_Init_CDC>:

/* USER CODE BEGIN*/
USBD_StatusTypeDef USBD_Init_CDC(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8016128:	b580      	push	{r7, lr}
 801612a:	b086      	sub	sp, #24
 801612c:	af00      	add	r7, sp, #0
 801612e:	60f8      	str	r0, [r7, #12]
 8016130:	60b9      	str	r1, [r7, #8]
 8016132:	4613      	mov	r3, r2
 8016134:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d101      	bne.n	8016140 <USBD_Init_CDC+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801613c:	2303      	movs	r3, #3
 801613e:	e01f      	b.n	8016180 <USBD_Init_CDC+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	2200      	movs	r2, #0
 8016144:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8016148:	68fb      	ldr	r3, [r7, #12]
 801614a:	2200      	movs	r2, #0
 801614c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	2200      	movs	r2, #0
 8016154:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8016158:	68bb      	ldr	r3, [r7, #8]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d003      	beq.n	8016166 <USBD_Init_CDC+0x3e>
  {
    pdev->pDesc = pdesc;
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	2201      	movs	r2, #1
 801616a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	79fa      	ldrb	r2, [r7, #7]
 8016172:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init_CDC(pdev);
 8016174:	68f8      	ldr	r0, [r7, #12]
 8016176:	f001 fc71 	bl	8017a5c <USBD_LL_Init_CDC>
 801617a:	4603      	mov	r3, r0
 801617c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801617e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016180:	4618      	mov	r0, r3
 8016182:	3718      	adds	r7, #24
 8016184:	46bd      	mov	sp, r7
 8016186:	bd80      	pop	{r7, pc}

08016188 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	b084      	sub	sp, #16
 801618c:	af00      	add	r7, sp, #0
 801618e:	6078      	str	r0, [r7, #4]
 8016190:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016192:	2300      	movs	r3, #0
 8016194:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8016196:	683b      	ldr	r3, [r7, #0]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d101      	bne.n	80161a0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801619c:	2303      	movs	r3, #3
 801619e:	e016      	b.n	80161ce <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	683a      	ldr	r2, [r7, #0]
 80161a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d00b      	beq.n	80161cc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161bc:	f107 020e 	add.w	r2, r7, #14
 80161c0:	4610      	mov	r0, r2
 80161c2:	4798      	blx	r3
 80161c4:	4602      	mov	r2, r0
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80161cc:	2300      	movs	r3, #0
}
 80161ce:	4618      	mov	r0, r3
 80161d0:	3710      	adds	r7, #16
 80161d2:	46bd      	mov	sp, r7
 80161d4:	bd80      	pop	{r7, pc}

080161d6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80161d6:	b580      	push	{r7, lr}
 80161d8:	b082      	sub	sp, #8
 80161da:	af00      	add	r7, sp, #0
 80161dc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80161de:	6878      	ldr	r0, [r7, #4]
 80161e0:	f001 fc9e 	bl	8017b20 <USBD_LL_Start>
 80161e4:	4603      	mov	r3, r0
}
 80161e6:	4618      	mov	r0, r3
 80161e8:	3708      	adds	r7, #8
 80161ea:	46bd      	mov	sp, r7
 80161ec:	bd80      	pop	{r7, pc}

080161ee <USBD_Stop>:
  *         Stop the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Stop(USBD_HandleTypeDef *pdev)
{
 80161ee:	b580      	push	{r7, lr}
 80161f0:	b082      	sub	sp, #8
 80161f2:	af00      	add	r7, sp, #0
 80161f4:	6078      	str	r0, [r7, #4]
  /* Disconnect USB Device */
  (void)USBD_LL_Stop(pdev);
 80161f6:	6878      	ldr	r0, [r7, #4]
 80161f8:	f001 fcc4 	bl	8017b84 <USBD_LL_Stop>

  /* Free Class Resources */
  if (pdev->pClass != NULL)
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016202:	2b00      	cmp	r3, #0
 8016204:	d009      	beq.n	801621a <USBD_Stop+0x2c>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	687a      	ldr	r2, [r7, #4]
 8016210:	6852      	ldr	r2, [r2, #4]
 8016212:	b2d2      	uxtb	r2, r2
 8016214:	4611      	mov	r1, r2
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	4798      	blx	r3
  }

  return USBD_OK;
 801621a:	2300      	movs	r3, #0
}
 801621c:	4618      	mov	r0, r3
 801621e:	3708      	adds	r7, #8
 8016220:	46bd      	mov	sp, r7
 8016222:	bd80      	pop	{r7, pc}

08016224 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8016224:	b480      	push	{r7}
 8016226:	b083      	sub	sp, #12
 8016228:	af00      	add	r7, sp, #0
 801622a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801622c:	2300      	movs	r3, #0
}
 801622e:	4618      	mov	r0, r3
 8016230:	370c      	adds	r7, #12
 8016232:	46bd      	mov	sp, r7
 8016234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016238:	4770      	bx	lr

0801623a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b084      	sub	sp, #16
 801623e:	af00      	add	r7, sp, #0
 8016240:	6078      	str	r0, [r7, #4]
 8016242:	460b      	mov	r3, r1
 8016244:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8016246:	2303      	movs	r3, #3
 8016248:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016250:	2b00      	cmp	r3, #0
 8016252:	d009      	beq.n	8016268 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	78fa      	ldrb	r2, [r7, #3]
 801625e:	4611      	mov	r1, r2
 8016260:	6878      	ldr	r0, [r7, #4]
 8016262:	4798      	blx	r3
 8016264:	4603      	mov	r3, r0
 8016266:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8016268:	7bfb      	ldrb	r3, [r7, #15]
}
 801626a:	4618      	mov	r0, r3
 801626c:	3710      	adds	r7, #16
 801626e:	46bd      	mov	sp, r7
 8016270:	bd80      	pop	{r7, pc}

08016272 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8016272:	b580      	push	{r7, lr}
 8016274:	b082      	sub	sp, #8
 8016276:	af00      	add	r7, sp, #0
 8016278:	6078      	str	r0, [r7, #4]
 801627a:	460b      	mov	r3, r1
 801627c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016284:	2b00      	cmp	r3, #0
 8016286:	d007      	beq.n	8016298 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801628e:	685b      	ldr	r3, [r3, #4]
 8016290:	78fa      	ldrb	r2, [r7, #3]
 8016292:	4611      	mov	r1, r2
 8016294:	6878      	ldr	r0, [r7, #4]
 8016296:	4798      	blx	r3
  }

  return USBD_OK;
 8016298:	2300      	movs	r3, #0
}
 801629a:	4618      	mov	r0, r3
 801629c:	3708      	adds	r7, #8
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}

080162a2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80162a2:	b580      	push	{r7, lr}
 80162a4:	b084      	sub	sp, #16
 80162a6:	af00      	add	r7, sp, #0
 80162a8:	6078      	str	r0, [r7, #4]
 80162aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80162b2:	6839      	ldr	r1, [r7, #0]
 80162b4:	4618      	mov	r0, r3
 80162b6:	f000 ff59 	bl	801716c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	2201      	movs	r2, #1
 80162be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80162c8:	461a      	mov	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80162d6:	f003 031f 	and.w	r3, r3, #31
 80162da:	2b02      	cmp	r3, #2
 80162dc:	d01a      	beq.n	8016314 <USBD_LL_SetupStage+0x72>
 80162de:	2b02      	cmp	r3, #2
 80162e0:	d822      	bhi.n	8016328 <USBD_LL_SetupStage+0x86>
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d002      	beq.n	80162ec <USBD_LL_SetupStage+0x4a>
 80162e6:	2b01      	cmp	r3, #1
 80162e8:	d00a      	beq.n	8016300 <USBD_LL_SetupStage+0x5e>
 80162ea:	e01d      	b.n	8016328 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80162f2:	4619      	mov	r1, r3
 80162f4:	6878      	ldr	r0, [r7, #4]
 80162f6:	f000 f9ef 	bl	80166d8 <USBD_StdDevReq>
 80162fa:	4603      	mov	r3, r0
 80162fc:	73fb      	strb	r3, [r7, #15]
      break;
 80162fe:	e020      	b.n	8016342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8016300:	687b      	ldr	r3, [r7, #4]
 8016302:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8016306:	4619      	mov	r1, r3
 8016308:	6878      	ldr	r0, [r7, #4]
 801630a:	f000 fa53 	bl	80167b4 <USBD_StdItfReq>
 801630e:	4603      	mov	r3, r0
 8016310:	73fb      	strb	r3, [r7, #15]
      break;
 8016312:	e016      	b.n	8016342 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801631a:	4619      	mov	r1, r3
 801631c:	6878      	ldr	r0, [r7, #4]
 801631e:	f000 fa92 	bl	8016846 <USBD_StdEPReq>
 8016322:	4603      	mov	r3, r0
 8016324:	73fb      	strb	r3, [r7, #15]
      break;
 8016326:	e00c      	b.n	8016342 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801632e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016332:	b2db      	uxtb	r3, r3
 8016334:	4619      	mov	r1, r3
 8016336:	6878      	ldr	r0, [r7, #4]
 8016338:	f001 fcca 	bl	8017cd0 <USBD_LL_StallEP>
 801633c:	4603      	mov	r3, r0
 801633e:	73fb      	strb	r3, [r7, #15]
      break;
 8016340:	bf00      	nop
  }

  return ret;
 8016342:	7bfb      	ldrb	r3, [r7, #15]
}
 8016344:	4618      	mov	r0, r3
 8016346:	3710      	adds	r7, #16
 8016348:	46bd      	mov	sp, r7
 801634a:	bd80      	pop	{r7, pc}

0801634c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801634c:	b580      	push	{r7, lr}
 801634e:	b086      	sub	sp, #24
 8016350:	af00      	add	r7, sp, #0
 8016352:	60f8      	str	r0, [r7, #12]
 8016354:	460b      	mov	r3, r1
 8016356:	607a      	str	r2, [r7, #4]
 8016358:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801635a:	7afb      	ldrb	r3, [r7, #11]
 801635c:	2b00      	cmp	r3, #0
 801635e:	d138      	bne.n	80163d2 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8016366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801636e:	2b03      	cmp	r3, #3
 8016370:	d14a      	bne.n	8016408 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	689a      	ldr	r2, [r3, #8]
 8016376:	693b      	ldr	r3, [r7, #16]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	429a      	cmp	r2, r3
 801637c:	d913      	bls.n	80163a6 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801637e:	693b      	ldr	r3, [r7, #16]
 8016380:	689a      	ldr	r2, [r3, #8]
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	68db      	ldr	r3, [r3, #12]
 8016386:	1ad2      	subs	r2, r2, r3
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801638c:	693b      	ldr	r3, [r7, #16]
 801638e:	68da      	ldr	r2, [r3, #12]
 8016390:	693b      	ldr	r3, [r7, #16]
 8016392:	689b      	ldr	r3, [r3, #8]
 8016394:	4293      	cmp	r3, r2
 8016396:	bf28      	it	cs
 8016398:	4613      	movcs	r3, r2
 801639a:	461a      	mov	r2, r3
 801639c:	6879      	ldr	r1, [r7, #4]
 801639e:	68f8      	ldr	r0, [r7, #12]
 80163a0:	f000 ffd8 	bl	8017354 <USBD_CtlContinueRx>
 80163a4:	e030      	b.n	8016408 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163a6:	68fb      	ldr	r3, [r7, #12]
 80163a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163ac:	b2db      	uxtb	r3, r3
 80163ae:	2b03      	cmp	r3, #3
 80163b0:	d10b      	bne.n	80163ca <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163b8:	691b      	ldr	r3, [r3, #16]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d005      	beq.n	80163ca <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80163be:	68fb      	ldr	r3, [r7, #12]
 80163c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163c4:	691b      	ldr	r3, [r3, #16]
 80163c6:	68f8      	ldr	r0, [r7, #12]
 80163c8:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80163ca:	68f8      	ldr	r0, [r7, #12]
 80163cc:	f000 ffd3 	bl	8017376 <USBD_CtlSendStatus>
 80163d0:	e01a      	b.n	8016408 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80163d8:	b2db      	uxtb	r3, r3
 80163da:	2b03      	cmp	r3, #3
 80163dc:	d114      	bne.n	8016408 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163e4:	699b      	ldr	r3, [r3, #24]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d00e      	beq.n	8016408 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163f0:	699b      	ldr	r3, [r3, #24]
 80163f2:	7afa      	ldrb	r2, [r7, #11]
 80163f4:	4611      	mov	r1, r2
 80163f6:	68f8      	ldr	r0, [r7, #12]
 80163f8:	4798      	blx	r3
 80163fa:	4603      	mov	r3, r0
 80163fc:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80163fe:	7dfb      	ldrb	r3, [r7, #23]
 8016400:	2b00      	cmp	r3, #0
 8016402:	d001      	beq.n	8016408 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8016404:	7dfb      	ldrb	r3, [r7, #23]
 8016406:	e000      	b.n	801640a <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8016408:	2300      	movs	r3, #0
}
 801640a:	4618      	mov	r0, r3
 801640c:	3718      	adds	r7, #24
 801640e:	46bd      	mov	sp, r7
 8016410:	bd80      	pop	{r7, pc}

08016412 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8016412:	b580      	push	{r7, lr}
 8016414:	b086      	sub	sp, #24
 8016416:	af00      	add	r7, sp, #0
 8016418:	60f8      	str	r0, [r7, #12]
 801641a:	460b      	mov	r3, r1
 801641c:	607a      	str	r2, [r7, #4]
 801641e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8016420:	7afb      	ldrb	r3, [r7, #11]
 8016422:	2b00      	cmp	r3, #0
 8016424:	d16b      	bne.n	80164fe <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3314      	adds	r3, #20
 801642a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801642c:	68fb      	ldr	r3, [r7, #12]
 801642e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8016432:	2b02      	cmp	r3, #2
 8016434:	d156      	bne.n	80164e4 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8016436:	693b      	ldr	r3, [r7, #16]
 8016438:	689a      	ldr	r2, [r3, #8]
 801643a:	693b      	ldr	r3, [r7, #16]
 801643c:	68db      	ldr	r3, [r3, #12]
 801643e:	429a      	cmp	r2, r3
 8016440:	d914      	bls.n	801646c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8016442:	693b      	ldr	r3, [r7, #16]
 8016444:	689a      	ldr	r2, [r3, #8]
 8016446:	693b      	ldr	r3, [r7, #16]
 8016448:	68db      	ldr	r3, [r3, #12]
 801644a:	1ad2      	subs	r2, r2, r3
 801644c:	693b      	ldr	r3, [r7, #16]
 801644e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8016450:	693b      	ldr	r3, [r7, #16]
 8016452:	689b      	ldr	r3, [r3, #8]
 8016454:	461a      	mov	r2, r3
 8016456:	6879      	ldr	r1, [r7, #4]
 8016458:	68f8      	ldr	r0, [r7, #12]
 801645a:	f000 ff4d 	bl	80172f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801645e:	2300      	movs	r3, #0
 8016460:	2200      	movs	r2, #0
 8016462:	2100      	movs	r1, #0
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f001 fd3b 	bl	8017ee0 <USBD_LL_PrepareReceive>
 801646a:	e03b      	b.n	80164e4 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801646c:	693b      	ldr	r3, [r7, #16]
 801646e:	68da      	ldr	r2, [r3, #12]
 8016470:	693b      	ldr	r3, [r7, #16]
 8016472:	689b      	ldr	r3, [r3, #8]
 8016474:	429a      	cmp	r2, r3
 8016476:	d11c      	bne.n	80164b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8016478:	693b      	ldr	r3, [r7, #16]
 801647a:	685a      	ldr	r2, [r3, #4]
 801647c:	693b      	ldr	r3, [r7, #16]
 801647e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8016480:	429a      	cmp	r2, r3
 8016482:	d316      	bcc.n	80164b2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8016484:	693b      	ldr	r3, [r7, #16]
 8016486:	685a      	ldr	r2, [r3, #4]
 8016488:	68fb      	ldr	r3, [r7, #12]
 801648a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801648e:	429a      	cmp	r2, r3
 8016490:	d20f      	bcs.n	80164b2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8016492:	2200      	movs	r2, #0
 8016494:	2100      	movs	r1, #0
 8016496:	68f8      	ldr	r0, [r7, #12]
 8016498:	f000 ff2e 	bl	80172f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801649c:	68fb      	ldr	r3, [r7, #12]
 801649e:	2200      	movs	r2, #0
 80164a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80164a4:	2300      	movs	r3, #0
 80164a6:	2200      	movs	r2, #0
 80164a8:	2100      	movs	r1, #0
 80164aa:	68f8      	ldr	r0, [r7, #12]
 80164ac:	f001 fd18 	bl	8017ee0 <USBD_LL_PrepareReceive>
 80164b0:	e018      	b.n	80164e4 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164b2:	68fb      	ldr	r3, [r7, #12]
 80164b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	2b03      	cmp	r3, #3
 80164bc:	d10b      	bne.n	80164d6 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80164be:	68fb      	ldr	r3, [r7, #12]
 80164c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d005      	beq.n	80164d6 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80164ca:	68fb      	ldr	r3, [r7, #12]
 80164cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164d0:	68db      	ldr	r3, [r3, #12]
 80164d2:	68f8      	ldr	r0, [r7, #12]
 80164d4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80164d6:	2180      	movs	r1, #128	; 0x80
 80164d8:	68f8      	ldr	r0, [r7, #12]
 80164da:	f001 fbf9 	bl	8017cd0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80164de:	68f8      	ldr	r0, [r7, #12]
 80164e0:	f000 ff5c 	bl	801739c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80164ea:	2b01      	cmp	r3, #1
 80164ec:	d122      	bne.n	8016534 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80164ee:	68f8      	ldr	r0, [r7, #12]
 80164f0:	f7ff fe98 	bl	8016224 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80164f4:	68fb      	ldr	r3, [r7, #12]
 80164f6:	2200      	movs	r2, #0
 80164f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80164fc:	e01a      	b.n	8016534 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80164fe:	68fb      	ldr	r3, [r7, #12]
 8016500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016504:	b2db      	uxtb	r3, r3
 8016506:	2b03      	cmp	r3, #3
 8016508:	d114      	bne.n	8016534 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 801650a:	68fb      	ldr	r3, [r7, #12]
 801650c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016510:	695b      	ldr	r3, [r3, #20]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d00e      	beq.n	8016534 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801651c:	695b      	ldr	r3, [r3, #20]
 801651e:	7afa      	ldrb	r2, [r7, #11]
 8016520:	4611      	mov	r1, r2
 8016522:	68f8      	ldr	r0, [r7, #12]
 8016524:	4798      	blx	r3
 8016526:	4603      	mov	r3, r0
 8016528:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 801652a:	7dfb      	ldrb	r3, [r7, #23]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d001      	beq.n	8016534 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8016530:	7dfb      	ldrb	r3, [r7, #23]
 8016532:	e000      	b.n	8016536 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8016534:	2300      	movs	r3, #0
}
 8016536:	4618      	mov	r0, r3
 8016538:	3718      	adds	r7, #24
 801653a:	46bd      	mov	sp, r7
 801653c:	bd80      	pop	{r7, pc}

0801653e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801653e:	b580      	push	{r7, lr}
 8016540:	b082      	sub	sp, #8
 8016542:	af00      	add	r7, sp, #0
 8016544:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	2201      	movs	r2, #1
 801654a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	2200      	movs	r2, #0
 8016552:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2200      	movs	r2, #0
 801655a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801656a:	2b00      	cmp	r3, #0
 801656c:	d101      	bne.n	8016572 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801656e:	2303      	movs	r3, #3
 8016570:	e02f      	b.n	80165d2 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016578:	2b00      	cmp	r3, #0
 801657a:	d00f      	beq.n	801659c <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016582:	685b      	ldr	r3, [r3, #4]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d009      	beq.n	801659c <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801658e:	685b      	ldr	r3, [r3, #4]
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	6852      	ldr	r2, [r2, #4]
 8016594:	b2d2      	uxtb	r2, r2
 8016596:	4611      	mov	r1, r2
 8016598:	6878      	ldr	r0, [r7, #4]
 801659a:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801659c:	2340      	movs	r3, #64	; 0x40
 801659e:	2200      	movs	r2, #0
 80165a0:	2100      	movs	r1, #0
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f001 fb20 	bl	8017be8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2201      	movs	r2, #1
 80165ac:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2240      	movs	r2, #64	; 0x40
 80165b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80165b8:	2340      	movs	r3, #64	; 0x40
 80165ba:	2200      	movs	r2, #0
 80165bc:	2180      	movs	r1, #128	; 0x80
 80165be:	6878      	ldr	r0, [r7, #4]
 80165c0:	f001 fb12 	bl	8017be8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2201      	movs	r2, #1
 80165c8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	2240      	movs	r2, #64	; 0x40
 80165ce:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80165d0:	2300      	movs	r3, #0
}
 80165d2:	4618      	mov	r0, r3
 80165d4:	3708      	adds	r7, #8
 80165d6:	46bd      	mov	sp, r7
 80165d8:	bd80      	pop	{r7, pc}

080165da <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80165da:	b480      	push	{r7}
 80165dc:	b083      	sub	sp, #12
 80165de:	af00      	add	r7, sp, #0
 80165e0:	6078      	str	r0, [r7, #4]
 80165e2:	460b      	mov	r3, r1
 80165e4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80165e6:	687b      	ldr	r3, [r7, #4]
 80165e8:	78fa      	ldrb	r2, [r7, #3]
 80165ea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80165ec:	2300      	movs	r3, #0
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	370c      	adds	r7, #12
 80165f2:	46bd      	mov	sp, r7
 80165f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f8:	4770      	bx	lr

080165fa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80165fa:	b480      	push	{r7}
 80165fc:	b083      	sub	sp, #12
 80165fe:	af00      	add	r7, sp, #0
 8016600:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016608:	b2da      	uxtb	r2, r3
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2204      	movs	r2, #4
 8016614:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8016618:	2300      	movs	r3, #0
}
 801661a:	4618      	mov	r0, r3
 801661c:	370c      	adds	r7, #12
 801661e:	46bd      	mov	sp, r7
 8016620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016624:	4770      	bx	lr

08016626 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8016626:	b480      	push	{r7}
 8016628:	b083      	sub	sp, #12
 801662a:	af00      	add	r7, sp, #0
 801662c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016634:	b2db      	uxtb	r3, r3
 8016636:	2b04      	cmp	r3, #4
 8016638:	d106      	bne.n	8016648 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801663a:	687b      	ldr	r3, [r7, #4]
 801663c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8016640:	b2da      	uxtb	r2, r3
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8016648:	2300      	movs	r3, #0
}
 801664a:	4618      	mov	r0, r3
 801664c:	370c      	adds	r7, #12
 801664e:	46bd      	mov	sp, r7
 8016650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016654:	4770      	bx	lr

08016656 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8016656:	b580      	push	{r7, lr}
 8016658:	b082      	sub	sp, #8
 801665a:	af00      	add	r7, sp, #0
 801665c:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016664:	2b00      	cmp	r3, #0
 8016666:	d101      	bne.n	801666c <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8016668:	2303      	movs	r3, #3
 801666a:	e012      	b.n	8016692 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016672:	b2db      	uxtb	r3, r3
 8016674:	2b03      	cmp	r3, #3
 8016676:	d10b      	bne.n	8016690 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801667e:	69db      	ldr	r3, [r3, #28]
 8016680:	2b00      	cmp	r3, #0
 8016682:	d005      	beq.n	8016690 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801668a:	69db      	ldr	r3, [r3, #28]
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8016690:	2300      	movs	r3, #0
}
 8016692:	4618      	mov	r0, r3
 8016694:	3708      	adds	r7, #8
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801669a:	b480      	push	{r7}
 801669c:	b087      	sub	sp, #28
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80166a6:	697b      	ldr	r3, [r7, #20]
 80166a8:	781b      	ldrb	r3, [r3, #0]
 80166aa:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	3301      	adds	r3, #1
 80166b0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80166b2:	697b      	ldr	r3, [r7, #20]
 80166b4:	781b      	ldrb	r3, [r3, #0]
 80166b6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80166b8:	8a3b      	ldrh	r3, [r7, #16]
 80166ba:	021b      	lsls	r3, r3, #8
 80166bc:	b21a      	sxth	r2, r3
 80166be:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80166c2:	4313      	orrs	r3, r2
 80166c4:	b21b      	sxth	r3, r3
 80166c6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80166c8:	89fb      	ldrh	r3, [r7, #14]
}
 80166ca:	4618      	mov	r0, r3
 80166cc:	371c      	adds	r7, #28
 80166ce:	46bd      	mov	sp, r7
 80166d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166d4:	4770      	bx	lr
	...

080166d8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b084      	sub	sp, #16
 80166dc:	af00      	add	r7, sp, #0
 80166de:	6078      	str	r0, [r7, #4]
 80166e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166e2:	2300      	movs	r3, #0
 80166e4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80166e6:	683b      	ldr	r3, [r7, #0]
 80166e8:	781b      	ldrb	r3, [r3, #0]
 80166ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80166ee:	2b40      	cmp	r3, #64	; 0x40
 80166f0:	d005      	beq.n	80166fe <USBD_StdDevReq+0x26>
 80166f2:	2b40      	cmp	r3, #64	; 0x40
 80166f4:	d853      	bhi.n	801679e <USBD_StdDevReq+0xc6>
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d00b      	beq.n	8016712 <USBD_StdDevReq+0x3a>
 80166fa:	2b20      	cmp	r3, #32
 80166fc:	d14f      	bne.n	801679e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80166fe:	687b      	ldr	r3, [r7, #4]
 8016700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016704:	689b      	ldr	r3, [r3, #8]
 8016706:	6839      	ldr	r1, [r7, #0]
 8016708:	6878      	ldr	r0, [r7, #4]
 801670a:	4798      	blx	r3
 801670c:	4603      	mov	r3, r0
 801670e:	73fb      	strb	r3, [r7, #15]
      break;
 8016710:	e04a      	b.n	80167a8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016712:	683b      	ldr	r3, [r7, #0]
 8016714:	785b      	ldrb	r3, [r3, #1]
 8016716:	2b09      	cmp	r3, #9
 8016718:	d83b      	bhi.n	8016792 <USBD_StdDevReq+0xba>
 801671a:	a201      	add	r2, pc, #4	; (adr r2, 8016720 <USBD_StdDevReq+0x48>)
 801671c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016720:	08016775 	.word	0x08016775
 8016724:	08016789 	.word	0x08016789
 8016728:	08016793 	.word	0x08016793
 801672c:	0801677f 	.word	0x0801677f
 8016730:	08016793 	.word	0x08016793
 8016734:	08016753 	.word	0x08016753
 8016738:	08016749 	.word	0x08016749
 801673c:	08016793 	.word	0x08016793
 8016740:	0801676b 	.word	0x0801676b
 8016744:	0801675d 	.word	0x0801675d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8016748:	6839      	ldr	r1, [r7, #0]
 801674a:	6878      	ldr	r0, [r7, #4]
 801674c:	f000 f9de 	bl	8016b0c <USBD_GetDescriptor>
          break;
 8016750:	e024      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8016752:	6839      	ldr	r1, [r7, #0]
 8016754:	6878      	ldr	r0, [r7, #4]
 8016756:	f000 fb7f 	bl	8016e58 <USBD_SetAddress>
          break;
 801675a:	e01f      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801675c:	6839      	ldr	r1, [r7, #0]
 801675e:	6878      	ldr	r0, [r7, #4]
 8016760:	f000 fbbe 	bl	8016ee0 <USBD_SetConfig>
 8016764:	4603      	mov	r3, r0
 8016766:	73fb      	strb	r3, [r7, #15]
          break;
 8016768:	e018      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801676a:	6839      	ldr	r1, [r7, #0]
 801676c:	6878      	ldr	r0, [r7, #4]
 801676e:	f000 fc5d 	bl	801702c <USBD_GetConfig>
          break;
 8016772:	e013      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8016774:	6839      	ldr	r1, [r7, #0]
 8016776:	6878      	ldr	r0, [r7, #4]
 8016778:	f000 fc8e 	bl	8017098 <USBD_GetStatus>
          break;
 801677c:	e00e      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801677e:	6839      	ldr	r1, [r7, #0]
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f000 fcbd 	bl	8017100 <USBD_SetFeature>
          break;
 8016786:	e009      	b.n	801679c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8016788:	6839      	ldr	r1, [r7, #0]
 801678a:	6878      	ldr	r0, [r7, #4]
 801678c:	f000 fccc 	bl	8017128 <USBD_ClrFeature>
          break;
 8016790:	e004      	b.n	801679c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8016792:	6839      	ldr	r1, [r7, #0]
 8016794:	6878      	ldr	r0, [r7, #4]
 8016796:	f000 fd23 	bl	80171e0 <USBD_CtlError>
          break;
 801679a:	bf00      	nop
      }
      break;
 801679c:	e004      	b.n	80167a8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801679e:	6839      	ldr	r1, [r7, #0]
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f000 fd1d 	bl	80171e0 <USBD_CtlError>
      break;
 80167a6:	bf00      	nop
  }

  return ret;
 80167a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80167aa:	4618      	mov	r0, r3
 80167ac:	3710      	adds	r7, #16
 80167ae:	46bd      	mov	sp, r7
 80167b0:	bd80      	pop	{r7, pc}
 80167b2:	bf00      	nop

080167b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167b4:	b580      	push	{r7, lr}
 80167b6:	b084      	sub	sp, #16
 80167b8:	af00      	add	r7, sp, #0
 80167ba:	6078      	str	r0, [r7, #4]
 80167bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80167be:	2300      	movs	r3, #0
 80167c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80167c2:	683b      	ldr	r3, [r7, #0]
 80167c4:	781b      	ldrb	r3, [r3, #0]
 80167c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80167ca:	2b40      	cmp	r3, #64	; 0x40
 80167cc:	d005      	beq.n	80167da <USBD_StdItfReq+0x26>
 80167ce:	2b40      	cmp	r3, #64	; 0x40
 80167d0:	d82f      	bhi.n	8016832 <USBD_StdItfReq+0x7e>
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d001      	beq.n	80167da <USBD_StdItfReq+0x26>
 80167d6:	2b20      	cmp	r3, #32
 80167d8:	d12b      	bne.n	8016832 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167e0:	b2db      	uxtb	r3, r3
 80167e2:	3b01      	subs	r3, #1
 80167e4:	2b02      	cmp	r3, #2
 80167e6:	d81d      	bhi.n	8016824 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	889b      	ldrh	r3, [r3, #4]
 80167ec:	b2db      	uxtb	r3, r3
 80167ee:	2b01      	cmp	r3, #1
 80167f0:	d813      	bhi.n	801681a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80167f8:	689b      	ldr	r3, [r3, #8]
 80167fa:	6839      	ldr	r1, [r7, #0]
 80167fc:	6878      	ldr	r0, [r7, #4]
 80167fe:	4798      	blx	r3
 8016800:	4603      	mov	r3, r0
 8016802:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016804:	683b      	ldr	r3, [r7, #0]
 8016806:	88db      	ldrh	r3, [r3, #6]
 8016808:	2b00      	cmp	r3, #0
 801680a:	d110      	bne.n	801682e <USBD_StdItfReq+0x7a>
 801680c:	7bfb      	ldrb	r3, [r7, #15]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d10d      	bne.n	801682e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f000 fdaf 	bl	8017376 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8016818:	e009      	b.n	801682e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 801681a:	6839      	ldr	r1, [r7, #0]
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f000 fcdf 	bl	80171e0 <USBD_CtlError>
          break;
 8016822:	e004      	b.n	801682e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8016824:	6839      	ldr	r1, [r7, #0]
 8016826:	6878      	ldr	r0, [r7, #4]
 8016828:	f000 fcda 	bl	80171e0 <USBD_CtlError>
          break;
 801682c:	e000      	b.n	8016830 <USBD_StdItfReq+0x7c>
          break;
 801682e:	bf00      	nop
      }
      break;
 8016830:	e004      	b.n	801683c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8016832:	6839      	ldr	r1, [r7, #0]
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f000 fcd3 	bl	80171e0 <USBD_CtlError>
      break;
 801683a:	bf00      	nop
  }

  return ret;
 801683c:	7bfb      	ldrb	r3, [r7, #15]
}
 801683e:	4618      	mov	r0, r3
 8016840:	3710      	adds	r7, #16
 8016842:	46bd      	mov	sp, r7
 8016844:	bd80      	pop	{r7, pc}

08016846 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016846:	b580      	push	{r7, lr}
 8016848:	b084      	sub	sp, #16
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
 801684e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8016850:	2300      	movs	r3, #0
 8016852:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8016854:	683b      	ldr	r3, [r7, #0]
 8016856:	889b      	ldrh	r3, [r3, #4]
 8016858:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016862:	2b40      	cmp	r3, #64	; 0x40
 8016864:	d007      	beq.n	8016876 <USBD_StdEPReq+0x30>
 8016866:	2b40      	cmp	r3, #64	; 0x40
 8016868:	f200 8145 	bhi.w	8016af6 <USBD_StdEPReq+0x2b0>
 801686c:	2b00      	cmp	r3, #0
 801686e:	d00c      	beq.n	801688a <USBD_StdEPReq+0x44>
 8016870:	2b20      	cmp	r3, #32
 8016872:	f040 8140 	bne.w	8016af6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801687c:	689b      	ldr	r3, [r3, #8]
 801687e:	6839      	ldr	r1, [r7, #0]
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	4798      	blx	r3
 8016884:	4603      	mov	r3, r0
 8016886:	73fb      	strb	r3, [r7, #15]
      break;
 8016888:	e13a      	b.n	8016b00 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801688a:	683b      	ldr	r3, [r7, #0]
 801688c:	785b      	ldrb	r3, [r3, #1]
 801688e:	2b03      	cmp	r3, #3
 8016890:	d007      	beq.n	80168a2 <USBD_StdEPReq+0x5c>
 8016892:	2b03      	cmp	r3, #3
 8016894:	f300 8129 	bgt.w	8016aea <USBD_StdEPReq+0x2a4>
 8016898:	2b00      	cmp	r3, #0
 801689a:	d07f      	beq.n	801699c <USBD_StdEPReq+0x156>
 801689c:	2b01      	cmp	r3, #1
 801689e:	d03c      	beq.n	801691a <USBD_StdEPReq+0xd4>
 80168a0:	e123      	b.n	8016aea <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168a8:	b2db      	uxtb	r3, r3
 80168aa:	2b02      	cmp	r3, #2
 80168ac:	d002      	beq.n	80168b4 <USBD_StdEPReq+0x6e>
 80168ae:	2b03      	cmp	r3, #3
 80168b0:	d016      	beq.n	80168e0 <USBD_StdEPReq+0x9a>
 80168b2:	e02c      	b.n	801690e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80168b4:	7bbb      	ldrb	r3, [r7, #14]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d00d      	beq.n	80168d6 <USBD_StdEPReq+0x90>
 80168ba:	7bbb      	ldrb	r3, [r7, #14]
 80168bc:	2b80      	cmp	r3, #128	; 0x80
 80168be:	d00a      	beq.n	80168d6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80168c0:	7bbb      	ldrb	r3, [r7, #14]
 80168c2:	4619      	mov	r1, r3
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f001 fa03 	bl	8017cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80168ca:	2180      	movs	r1, #128	; 0x80
 80168cc:	6878      	ldr	r0, [r7, #4]
 80168ce:	f001 f9ff 	bl	8017cd0 <USBD_LL_StallEP>
 80168d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80168d4:	e020      	b.n	8016918 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80168d6:	6839      	ldr	r1, [r7, #0]
 80168d8:	6878      	ldr	r0, [r7, #4]
 80168da:	f000 fc81 	bl	80171e0 <USBD_CtlError>
              break;
 80168de:	e01b      	b.n	8016918 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80168e0:	683b      	ldr	r3, [r7, #0]
 80168e2:	885b      	ldrh	r3, [r3, #2]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d10e      	bne.n	8016906 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80168e8:	7bbb      	ldrb	r3, [r7, #14]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d00b      	beq.n	8016906 <USBD_StdEPReq+0xc0>
 80168ee:	7bbb      	ldrb	r3, [r7, #14]
 80168f0:	2b80      	cmp	r3, #128	; 0x80
 80168f2:	d008      	beq.n	8016906 <USBD_StdEPReq+0xc0>
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	88db      	ldrh	r3, [r3, #6]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d104      	bne.n	8016906 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80168fc:	7bbb      	ldrb	r3, [r7, #14]
 80168fe:	4619      	mov	r1, r3
 8016900:	6878      	ldr	r0, [r7, #4]
 8016902:	f001 f9e5 	bl	8017cd0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 fd35 	bl	8017376 <USBD_CtlSendStatus>

              break;
 801690c:	e004      	b.n	8016918 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 801690e:	6839      	ldr	r1, [r7, #0]
 8016910:	6878      	ldr	r0, [r7, #4]
 8016912:	f000 fc65 	bl	80171e0 <USBD_CtlError>
              break;
 8016916:	bf00      	nop
          }
          break;
 8016918:	e0ec      	b.n	8016af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016920:	b2db      	uxtb	r3, r3
 8016922:	2b02      	cmp	r3, #2
 8016924:	d002      	beq.n	801692c <USBD_StdEPReq+0xe6>
 8016926:	2b03      	cmp	r3, #3
 8016928:	d016      	beq.n	8016958 <USBD_StdEPReq+0x112>
 801692a:	e030      	b.n	801698e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801692c:	7bbb      	ldrb	r3, [r7, #14]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d00d      	beq.n	801694e <USBD_StdEPReq+0x108>
 8016932:	7bbb      	ldrb	r3, [r7, #14]
 8016934:	2b80      	cmp	r3, #128	; 0x80
 8016936:	d00a      	beq.n	801694e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016938:	7bbb      	ldrb	r3, [r7, #14]
 801693a:	4619      	mov	r1, r3
 801693c:	6878      	ldr	r0, [r7, #4]
 801693e:	f001 f9c7 	bl	8017cd0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016942:	2180      	movs	r1, #128	; 0x80
 8016944:	6878      	ldr	r0, [r7, #4]
 8016946:	f001 f9c3 	bl	8017cd0 <USBD_LL_StallEP>
 801694a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801694c:	e025      	b.n	801699a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801694e:	6839      	ldr	r1, [r7, #0]
 8016950:	6878      	ldr	r0, [r7, #4]
 8016952:	f000 fc45 	bl	80171e0 <USBD_CtlError>
              break;
 8016956:	e020      	b.n	801699a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016958:	683b      	ldr	r3, [r7, #0]
 801695a:	885b      	ldrh	r3, [r3, #2]
 801695c:	2b00      	cmp	r3, #0
 801695e:	d11b      	bne.n	8016998 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016960:	7bbb      	ldrb	r3, [r7, #14]
 8016962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016966:	2b00      	cmp	r3, #0
 8016968:	d004      	beq.n	8016974 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801696a:	7bbb      	ldrb	r3, [r7, #14]
 801696c:	4619      	mov	r1, r3
 801696e:	6878      	ldr	r0, [r7, #4]
 8016970:	f001 f9e4 	bl	8017d3c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8016974:	6878      	ldr	r0, [r7, #4]
 8016976:	f000 fcfe 	bl	8017376 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016980:	689b      	ldr	r3, [r3, #8]
 8016982:	6839      	ldr	r1, [r7, #0]
 8016984:	6878      	ldr	r0, [r7, #4]
 8016986:	4798      	blx	r3
 8016988:	4603      	mov	r3, r0
 801698a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801698c:	e004      	b.n	8016998 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801698e:	6839      	ldr	r1, [r7, #0]
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 fc25 	bl	80171e0 <USBD_CtlError>
              break;
 8016996:	e000      	b.n	801699a <USBD_StdEPReq+0x154>
              break;
 8016998:	bf00      	nop
          }
          break;
 801699a:	e0ab      	b.n	8016af4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801699c:	687b      	ldr	r3, [r7, #4]
 801699e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169a2:	b2db      	uxtb	r3, r3
 80169a4:	2b02      	cmp	r3, #2
 80169a6:	d002      	beq.n	80169ae <USBD_StdEPReq+0x168>
 80169a8:	2b03      	cmp	r3, #3
 80169aa:	d032      	beq.n	8016a12 <USBD_StdEPReq+0x1cc>
 80169ac:	e097      	b.n	8016ade <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80169ae:	7bbb      	ldrb	r3, [r7, #14]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d007      	beq.n	80169c4 <USBD_StdEPReq+0x17e>
 80169b4:	7bbb      	ldrb	r3, [r7, #14]
 80169b6:	2b80      	cmp	r3, #128	; 0x80
 80169b8:	d004      	beq.n	80169c4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80169ba:	6839      	ldr	r1, [r7, #0]
 80169bc:	6878      	ldr	r0, [r7, #4]
 80169be:	f000 fc0f 	bl	80171e0 <USBD_CtlError>
                break;
 80169c2:	e091      	b.n	8016ae8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	da0b      	bge.n	80169e4 <USBD_StdEPReq+0x19e>
 80169cc:	7bbb      	ldrb	r3, [r7, #14]
 80169ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169d2:	4613      	mov	r3, r2
 80169d4:	009b      	lsls	r3, r3, #2
 80169d6:	4413      	add	r3, r2
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	3310      	adds	r3, #16
 80169dc:	687a      	ldr	r2, [r7, #4]
 80169de:	4413      	add	r3, r2
 80169e0:	3304      	adds	r3, #4
 80169e2:	e00b      	b.n	80169fc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80169e4:	7bbb      	ldrb	r3, [r7, #14]
 80169e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80169ea:	4613      	mov	r3, r2
 80169ec:	009b      	lsls	r3, r3, #2
 80169ee:	4413      	add	r3, r2
 80169f0:	009b      	lsls	r3, r3, #2
 80169f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	4413      	add	r3, r2
 80169fa:	3304      	adds	r3, #4
 80169fc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80169fe:	68bb      	ldr	r3, [r7, #8]
 8016a00:	2200      	movs	r2, #0
 8016a02:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016a04:	68bb      	ldr	r3, [r7, #8]
 8016a06:	2202      	movs	r2, #2
 8016a08:	4619      	mov	r1, r3
 8016a0a:	6878      	ldr	r0, [r7, #4]
 8016a0c:	f000 fc59 	bl	80172c2 <USBD_CtlSendData>
              break;
 8016a10:	e06a      	b.n	8016ae8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016a12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	da11      	bge.n	8016a3e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016a1a:	7bbb      	ldrb	r3, [r7, #14]
 8016a1c:	f003 020f 	and.w	r2, r3, #15
 8016a20:	6879      	ldr	r1, [r7, #4]
 8016a22:	4613      	mov	r3, r2
 8016a24:	009b      	lsls	r3, r3, #2
 8016a26:	4413      	add	r3, r2
 8016a28:	009b      	lsls	r3, r3, #2
 8016a2a:	440b      	add	r3, r1
 8016a2c:	3324      	adds	r3, #36	; 0x24
 8016a2e:	881b      	ldrh	r3, [r3, #0]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d117      	bne.n	8016a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016a34:	6839      	ldr	r1, [r7, #0]
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 fbd2 	bl	80171e0 <USBD_CtlError>
                  break;
 8016a3c:	e054      	b.n	8016ae8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8016a3e:	7bbb      	ldrb	r3, [r7, #14]
 8016a40:	f003 020f 	and.w	r2, r3, #15
 8016a44:	6879      	ldr	r1, [r7, #4]
 8016a46:	4613      	mov	r3, r2
 8016a48:	009b      	lsls	r3, r3, #2
 8016a4a:	4413      	add	r3, r2
 8016a4c:	009b      	lsls	r3, r3, #2
 8016a4e:	440b      	add	r3, r1
 8016a50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016a54:	881b      	ldrh	r3, [r3, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d104      	bne.n	8016a64 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8016a5a:	6839      	ldr	r1, [r7, #0]
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 fbbf 	bl	80171e0 <USBD_CtlError>
                  break;
 8016a62:	e041      	b.n	8016ae8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	da0b      	bge.n	8016a84 <USBD_StdEPReq+0x23e>
 8016a6c:	7bbb      	ldrb	r3, [r7, #14]
 8016a6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016a72:	4613      	mov	r3, r2
 8016a74:	009b      	lsls	r3, r3, #2
 8016a76:	4413      	add	r3, r2
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	3310      	adds	r3, #16
 8016a7c:	687a      	ldr	r2, [r7, #4]
 8016a7e:	4413      	add	r3, r2
 8016a80:	3304      	adds	r3, #4
 8016a82:	e00b      	b.n	8016a9c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016a84:	7bbb      	ldrb	r3, [r7, #14]
 8016a86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016a8a:	4613      	mov	r3, r2
 8016a8c:	009b      	lsls	r3, r3, #2
 8016a8e:	4413      	add	r3, r2
 8016a90:	009b      	lsls	r3, r3, #2
 8016a92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016a96:	687a      	ldr	r2, [r7, #4]
 8016a98:	4413      	add	r3, r2
 8016a9a:	3304      	adds	r3, #4
 8016a9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016a9e:	7bbb      	ldrb	r3, [r7, #14]
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d002      	beq.n	8016aaa <USBD_StdEPReq+0x264>
 8016aa4:	7bbb      	ldrb	r3, [r7, #14]
 8016aa6:	2b80      	cmp	r3, #128	; 0x80
 8016aa8:	d103      	bne.n	8016ab2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	2200      	movs	r2, #0
 8016aae:	601a      	str	r2, [r3, #0]
 8016ab0:	e00e      	b.n	8016ad0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016ab2:	7bbb      	ldrb	r3, [r7, #14]
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f001 f976 	bl	8017da8 <USBD_LL_IsStallEP>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d003      	beq.n	8016aca <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8016ac2:	68bb      	ldr	r3, [r7, #8]
 8016ac4:	2201      	movs	r2, #1
 8016ac6:	601a      	str	r2, [r3, #0]
 8016ac8:	e002      	b.n	8016ad0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8016aca:	68bb      	ldr	r3, [r7, #8]
 8016acc:	2200      	movs	r2, #0
 8016ace:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	2202      	movs	r2, #2
 8016ad4:	4619      	mov	r1, r3
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f000 fbf3 	bl	80172c2 <USBD_CtlSendData>
              break;
 8016adc:	e004      	b.n	8016ae8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8016ade:	6839      	ldr	r1, [r7, #0]
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f000 fb7d 	bl	80171e0 <USBD_CtlError>
              break;
 8016ae6:	bf00      	nop
          }
          break;
 8016ae8:	e004      	b.n	8016af4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8016aea:	6839      	ldr	r1, [r7, #0]
 8016aec:	6878      	ldr	r0, [r7, #4]
 8016aee:	f000 fb77 	bl	80171e0 <USBD_CtlError>
          break;
 8016af2:	bf00      	nop
      }
      break;
 8016af4:	e004      	b.n	8016b00 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8016af6:	6839      	ldr	r1, [r7, #0]
 8016af8:	6878      	ldr	r0, [r7, #4]
 8016afa:	f000 fb71 	bl	80171e0 <USBD_CtlError>
      break;
 8016afe:	bf00      	nop
  }

  return ret;
 8016b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b02:	4618      	mov	r0, r3
 8016b04:	3710      	adds	r7, #16
 8016b06:	46bd      	mov	sp, r7
 8016b08:	bd80      	pop	{r7, pc}
	...

08016b0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016b0c:	b580      	push	{r7, lr}
 8016b0e:	b084      	sub	sp, #16
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
 8016b14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016b16:	2300      	movs	r3, #0
 8016b18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016b1a:	2300      	movs	r3, #0
 8016b1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8016b1e:	2300      	movs	r3, #0
 8016b20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016b22:	683b      	ldr	r3, [r7, #0]
 8016b24:	885b      	ldrh	r3, [r3, #2]
 8016b26:	0a1b      	lsrs	r3, r3, #8
 8016b28:	b29b      	uxth	r3, r3
 8016b2a:	3b01      	subs	r3, #1
 8016b2c:	2b0e      	cmp	r3, #14
 8016b2e:	f200 8165 	bhi.w	8016dfc <USBD_GetDescriptor+0x2f0>
 8016b32:	a201      	add	r2, pc, #4	; (adr r2, 8016b38 <USBD_GetDescriptor+0x2c>)
 8016b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b38:	08016ba9 	.word	0x08016ba9
 8016b3c:	08016bc1 	.word	0x08016bc1
 8016b40:	08016c01 	.word	0x08016c01
 8016b44:	08016dfd 	.word	0x08016dfd
 8016b48:	08016dfd 	.word	0x08016dfd
 8016b4c:	08016d9d 	.word	0x08016d9d
 8016b50:	08016dc9 	.word	0x08016dc9
 8016b54:	08016dfd 	.word	0x08016dfd
 8016b58:	08016dfd 	.word	0x08016dfd
 8016b5c:	08016dfd 	.word	0x08016dfd
 8016b60:	08016dfd 	.word	0x08016dfd
 8016b64:	08016dfd 	.word	0x08016dfd
 8016b68:	08016dfd 	.word	0x08016dfd
 8016b6c:	08016dfd 	.word	0x08016dfd
 8016b70:	08016b75 	.word	0x08016b75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016b74:	687b      	ldr	r3, [r7, #4]
 8016b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b7a:	69db      	ldr	r3, [r3, #28]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d00b      	beq.n	8016b98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016b86:	69db      	ldr	r3, [r3, #28]
 8016b88:	687a      	ldr	r2, [r7, #4]
 8016b8a:	7c12      	ldrb	r2, [r2, #16]
 8016b8c:	f107 0108 	add.w	r1, r7, #8
 8016b90:	4610      	mov	r0, r2
 8016b92:	4798      	blx	r3
 8016b94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016b96:	e139      	b.n	8016e0c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8016b98:	6839      	ldr	r1, [r7, #0]
 8016b9a:	6878      	ldr	r0, [r7, #4]
 8016b9c:	f000 fb20 	bl	80171e0 <USBD_CtlError>
        err++;
 8016ba0:	7afb      	ldrb	r3, [r7, #11]
 8016ba2:	3301      	adds	r3, #1
 8016ba4:	72fb      	strb	r3, [r7, #11]
      break;
 8016ba6:	e131      	b.n	8016e0c <USBD_GetDescriptor+0x300>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	687a      	ldr	r2, [r7, #4]
 8016bb2:	7c12      	ldrb	r2, [r2, #16]
 8016bb4:	f107 0108 	add.w	r1, r7, #8
 8016bb8:	4610      	mov	r0, r2
 8016bba:	4798      	blx	r3
 8016bbc:	60f8      	str	r0, [r7, #12]
      break;
 8016bbe:	e125      	b.n	8016e0c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	7c1b      	ldrb	r3, [r3, #16]
 8016bc4:	2b00      	cmp	r3, #0
 8016bc6:	d10d      	bne.n	8016be4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bd0:	f107 0208 	add.w	r2, r7, #8
 8016bd4:	4610      	mov	r0, r2
 8016bd6:	4798      	blx	r3
 8016bd8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	3301      	adds	r3, #1
 8016bde:	2202      	movs	r2, #2
 8016be0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016be2:	e113      	b.n	8016e0c <USBD_GetDescriptor+0x300>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016bec:	f107 0208 	add.w	r2, r7, #8
 8016bf0:	4610      	mov	r0, r2
 8016bf2:	4798      	blx	r3
 8016bf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	3301      	adds	r3, #1
 8016bfa:	2202      	movs	r2, #2
 8016bfc:	701a      	strb	r2, [r3, #0]
      break;
 8016bfe:	e105      	b.n	8016e0c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	885b      	ldrh	r3, [r3, #2]
 8016c04:	b2db      	uxtb	r3, r3
 8016c06:	2b05      	cmp	r3, #5
 8016c08:	f200 80ac 	bhi.w	8016d64 <USBD_GetDescriptor+0x258>
 8016c0c:	a201      	add	r2, pc, #4	; (adr r2, 8016c14 <USBD_GetDescriptor+0x108>)
 8016c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c12:	bf00      	nop
 8016c14:	08016c2d 	.word	0x08016c2d
 8016c18:	08016c61 	.word	0x08016c61
 8016c1c:	08016c95 	.word	0x08016c95
 8016c20:	08016cc9 	.word	0x08016cc9
 8016c24:	08016cfd 	.word	0x08016cfd
 8016c28:	08016d31 	.word	0x08016d31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c32:	685b      	ldr	r3, [r3, #4]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d00b      	beq.n	8016c50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c3e:	685b      	ldr	r3, [r3, #4]
 8016c40:	687a      	ldr	r2, [r7, #4]
 8016c42:	7c12      	ldrb	r2, [r2, #16]
 8016c44:	f107 0108 	add.w	r1, r7, #8
 8016c48:	4610      	mov	r0, r2
 8016c4a:	4798      	blx	r3
 8016c4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c4e:	e0a4      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016c50:	6839      	ldr	r1, [r7, #0]
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 fac4 	bl	80171e0 <USBD_CtlError>
            err++;
 8016c58:	7afb      	ldrb	r3, [r7, #11]
 8016c5a:	3301      	adds	r3, #1
 8016c5c:	72fb      	strb	r3, [r7, #11]
          break;
 8016c5e:	e09c      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c66:	689b      	ldr	r3, [r3, #8]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d00b      	beq.n	8016c84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c72:	689b      	ldr	r3, [r3, #8]
 8016c74:	687a      	ldr	r2, [r7, #4]
 8016c76:	7c12      	ldrb	r2, [r2, #16]
 8016c78:	f107 0108 	add.w	r1, r7, #8
 8016c7c:	4610      	mov	r0, r2
 8016c7e:	4798      	blx	r3
 8016c80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016c82:	e08a      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016c84:	6839      	ldr	r1, [r7, #0]
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f000 faaa 	bl	80171e0 <USBD_CtlError>
            err++;
 8016c8c:	7afb      	ldrb	r3, [r7, #11]
 8016c8e:	3301      	adds	r3, #1
 8016c90:	72fb      	strb	r3, [r7, #11]
          break;
 8016c92:	e082      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d00b      	beq.n	8016cb8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016ca6:	68db      	ldr	r3, [r3, #12]
 8016ca8:	687a      	ldr	r2, [r7, #4]
 8016caa:	7c12      	ldrb	r2, [r2, #16]
 8016cac:	f107 0108 	add.w	r1, r7, #8
 8016cb0:	4610      	mov	r0, r2
 8016cb2:	4798      	blx	r3
 8016cb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cb6:	e070      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016cb8:	6839      	ldr	r1, [r7, #0]
 8016cba:	6878      	ldr	r0, [r7, #4]
 8016cbc:	f000 fa90 	bl	80171e0 <USBD_CtlError>
            err++;
 8016cc0:	7afb      	ldrb	r3, [r7, #11]
 8016cc2:	3301      	adds	r3, #1
 8016cc4:	72fb      	strb	r3, [r7, #11]
          break;
 8016cc6:	e068      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cce:	691b      	ldr	r3, [r3, #16]
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d00b      	beq.n	8016cec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016cda:	691b      	ldr	r3, [r3, #16]
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	7c12      	ldrb	r2, [r2, #16]
 8016ce0:	f107 0108 	add.w	r1, r7, #8
 8016ce4:	4610      	mov	r0, r2
 8016ce6:	4798      	blx	r3
 8016ce8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016cea:	e056      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016cec:	6839      	ldr	r1, [r7, #0]
 8016cee:	6878      	ldr	r0, [r7, #4]
 8016cf0:	f000 fa76 	bl	80171e0 <USBD_CtlError>
            err++;
 8016cf4:	7afb      	ldrb	r3, [r7, #11]
 8016cf6:	3301      	adds	r3, #1
 8016cf8:	72fb      	strb	r3, [r7, #11]
          break;
 8016cfa:	e04e      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d02:	695b      	ldr	r3, [r3, #20]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d00b      	beq.n	8016d20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d0e:	695b      	ldr	r3, [r3, #20]
 8016d10:	687a      	ldr	r2, [r7, #4]
 8016d12:	7c12      	ldrb	r2, [r2, #16]
 8016d14:	f107 0108 	add.w	r1, r7, #8
 8016d18:	4610      	mov	r0, r2
 8016d1a:	4798      	blx	r3
 8016d1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d1e:	e03c      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016d20:	6839      	ldr	r1, [r7, #0]
 8016d22:	6878      	ldr	r0, [r7, #4]
 8016d24:	f000 fa5c 	bl	80171e0 <USBD_CtlError>
            err++;
 8016d28:	7afb      	ldrb	r3, [r7, #11]
 8016d2a:	3301      	adds	r3, #1
 8016d2c:	72fb      	strb	r3, [r7, #11]
          break;
 8016d2e:	e034      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d36:	699b      	ldr	r3, [r3, #24]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d00b      	beq.n	8016d54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016d42:	699b      	ldr	r3, [r3, #24]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	7c12      	ldrb	r2, [r2, #16]
 8016d48:	f107 0108 	add.w	r1, r7, #8
 8016d4c:	4610      	mov	r0, r2
 8016d4e:	4798      	blx	r3
 8016d50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016d52:	e022      	b.n	8016d9a <USBD_GetDescriptor+0x28e>
            USBD_CtlError(pdev, req);
 8016d54:	6839      	ldr	r1, [r7, #0]
 8016d56:	6878      	ldr	r0, [r7, #4]
 8016d58:	f000 fa42 	bl	80171e0 <USBD_CtlError>
            err++;
 8016d5c:	7afb      	ldrb	r3, [r7, #11]
 8016d5e:	3301      	adds	r3, #1
 8016d60:	72fb      	strb	r3, [r7, #11]
          break;
 8016d62:	e01a      	b.n	8016d9a <USBD_GetDescriptor+0x28e>

        default:
#if (USBD_SUPPORT_USER_STRING_DESC == 1U)
          if (pdev->pClass->GetUsrStrDescriptor != NULL)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00c      	beq.n	8016d8a <USBD_GetDescriptor+0x27e>
          {
            pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue), &len);
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d78:	683a      	ldr	r2, [r7, #0]
 8016d7a:	8852      	ldrh	r2, [r2, #2]
 8016d7c:	b2d1      	uxtb	r1, r2
 8016d7e:	f107 0208 	add.w	r2, r7, #8
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	4798      	blx	r3
 8016d86:	60f8      	str	r0, [r7, #12]

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
          err++;
#endif
          break;
 8016d88:	e006      	b.n	8016d98 <USBD_GetDescriptor+0x28c>
            USBD_CtlError(pdev, req);
 8016d8a:	6839      	ldr	r1, [r7, #0]
 8016d8c:	6878      	ldr	r0, [r7, #4]
 8016d8e:	f000 fa27 	bl	80171e0 <USBD_CtlError>
            err++;
 8016d92:	7afb      	ldrb	r3, [r7, #11]
 8016d94:	3301      	adds	r3, #1
 8016d96:	72fb      	strb	r3, [r7, #11]
          break;
 8016d98:	bf00      	nop
      }
      break;
 8016d9a:	e037      	b.n	8016e0c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	7c1b      	ldrb	r3, [r3, #16]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d109      	bne.n	8016db8 <USBD_GetDescriptor+0x2ac>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dac:	f107 0208 	add.w	r2, r7, #8
 8016db0:	4610      	mov	r0, r2
 8016db2:	4798      	blx	r3
 8016db4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016db6:	e029      	b.n	8016e0c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8016db8:	6839      	ldr	r1, [r7, #0]
 8016dba:	6878      	ldr	r0, [r7, #4]
 8016dbc:	f000 fa10 	bl	80171e0 <USBD_CtlError>
        err++;
 8016dc0:	7afb      	ldrb	r3, [r7, #11]
 8016dc2:	3301      	adds	r3, #1
 8016dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8016dc6:	e021      	b.n	8016e0c <USBD_GetDescriptor+0x300>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	7c1b      	ldrb	r3, [r3, #16]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d10d      	bne.n	8016dec <USBD_GetDescriptor+0x2e0>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dd8:	f107 0208 	add.w	r2, r7, #8
 8016ddc:	4610      	mov	r0, r2
 8016dde:	4798      	blx	r3
 8016de0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	3301      	adds	r3, #1
 8016de6:	2207      	movs	r2, #7
 8016de8:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016dea:	e00f      	b.n	8016e0c <USBD_GetDescriptor+0x300>
        USBD_CtlError(pdev, req);
 8016dec:	6839      	ldr	r1, [r7, #0]
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f000 f9f6 	bl	80171e0 <USBD_CtlError>
        err++;
 8016df4:	7afb      	ldrb	r3, [r7, #11]
 8016df6:	3301      	adds	r3, #1
 8016df8:	72fb      	strb	r3, [r7, #11]
      break;
 8016dfa:	e007      	b.n	8016e0c <USBD_GetDescriptor+0x300>

    default:
      USBD_CtlError(pdev, req);
 8016dfc:	6839      	ldr	r1, [r7, #0]
 8016dfe:	6878      	ldr	r0, [r7, #4]
 8016e00:	f000 f9ee 	bl	80171e0 <USBD_CtlError>
      err++;
 8016e04:	7afb      	ldrb	r3, [r7, #11]
 8016e06:	3301      	adds	r3, #1
 8016e08:	72fb      	strb	r3, [r7, #11]
      break;
 8016e0a:	bf00      	nop
  }

  if (err != 0U)
 8016e0c:	7afb      	ldrb	r3, [r7, #11]
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d11e      	bne.n	8016e50 <USBD_GetDescriptor+0x344>
  {
    return;
  }

  if (req->wLength != 0U)
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	88db      	ldrh	r3, [r3, #6]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d016      	beq.n	8016e48 <USBD_GetDescriptor+0x33c>
  {
    if (len != 0U)
 8016e1a:	893b      	ldrh	r3, [r7, #8]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d00e      	beq.n	8016e3e <USBD_GetDescriptor+0x332>
    {
      len = MIN(len, req->wLength);
 8016e20:	683b      	ldr	r3, [r7, #0]
 8016e22:	88da      	ldrh	r2, [r3, #6]
 8016e24:	893b      	ldrh	r3, [r7, #8]
 8016e26:	4293      	cmp	r3, r2
 8016e28:	bf28      	it	cs
 8016e2a:	4613      	movcs	r3, r2
 8016e2c:	b29b      	uxth	r3, r3
 8016e2e:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8016e30:	893b      	ldrh	r3, [r7, #8]
 8016e32:	461a      	mov	r2, r3
 8016e34:	68f9      	ldr	r1, [r7, #12]
 8016e36:	6878      	ldr	r0, [r7, #4]
 8016e38:	f000 fa43 	bl	80172c2 <USBD_CtlSendData>
 8016e3c:	e009      	b.n	8016e52 <USBD_GetDescriptor+0x346>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016e3e:	6839      	ldr	r1, [r7, #0]
 8016e40:	6878      	ldr	r0, [r7, #4]
 8016e42:	f000 f9cd 	bl	80171e0 <USBD_CtlError>
 8016e46:	e004      	b.n	8016e52 <USBD_GetDescriptor+0x346>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016e48:	6878      	ldr	r0, [r7, #4]
 8016e4a:	f000 fa94 	bl	8017376 <USBD_CtlSendStatus>
 8016e4e:	e000      	b.n	8016e52 <USBD_GetDescriptor+0x346>
    return;
 8016e50:	bf00      	nop
  }
}
 8016e52:	3710      	adds	r7, #16
 8016e54:	46bd      	mov	sp, r7
 8016e56:	bd80      	pop	{r7, pc}

08016e58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b084      	sub	sp, #16
 8016e5c:	af00      	add	r7, sp, #0
 8016e5e:	6078      	str	r0, [r7, #4]
 8016e60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016e62:	683b      	ldr	r3, [r7, #0]
 8016e64:	889b      	ldrh	r3, [r3, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d131      	bne.n	8016ece <USBD_SetAddress+0x76>
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	88db      	ldrh	r3, [r3, #6]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d12d      	bne.n	8016ece <USBD_SetAddress+0x76>
 8016e72:	683b      	ldr	r3, [r7, #0]
 8016e74:	885b      	ldrh	r3, [r3, #2]
 8016e76:	2b7f      	cmp	r3, #127	; 0x7f
 8016e78:	d829      	bhi.n	8016ece <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016e7a:	683b      	ldr	r3, [r7, #0]
 8016e7c:	885b      	ldrh	r3, [r3, #2]
 8016e7e:	b2db      	uxtb	r3, r3
 8016e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016e8c:	b2db      	uxtb	r3, r3
 8016e8e:	2b03      	cmp	r3, #3
 8016e90:	d104      	bne.n	8016e9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8016e92:	6839      	ldr	r1, [r7, #0]
 8016e94:	6878      	ldr	r0, [r7, #4]
 8016e96:	f000 f9a3 	bl	80171e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016e9a:	e01d      	b.n	8016ed8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	7bfa      	ldrb	r2, [r7, #15]
 8016ea0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016ea4:	7bfb      	ldrb	r3, [r7, #15]
 8016ea6:	4619      	mov	r1, r3
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f000 ffab 	bl	8017e04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016eae:	6878      	ldr	r0, [r7, #4]
 8016eb0:	f000 fa61 	bl	8017376 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016eb4:	7bfb      	ldrb	r3, [r7, #15]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d004      	beq.n	8016ec4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	2202      	movs	r2, #2
 8016ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ec2:	e009      	b.n	8016ed8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	2201      	movs	r2, #1
 8016ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016ecc:	e004      	b.n	8016ed8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016ece:	6839      	ldr	r1, [r7, #0]
 8016ed0:	6878      	ldr	r0, [r7, #4]
 8016ed2:	f000 f985 	bl	80171e0 <USBD_CtlError>
  }
}
 8016ed6:	bf00      	nop
 8016ed8:	bf00      	nop
 8016eda:	3710      	adds	r7, #16
 8016edc:	46bd      	mov	sp, r7
 8016ede:	bd80      	pop	{r7, pc}

08016ee0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016ee0:	b580      	push	{r7, lr}
 8016ee2:	b084      	sub	sp, #16
 8016ee4:	af00      	add	r7, sp, #0
 8016ee6:	6078      	str	r0, [r7, #4]
 8016ee8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8016eea:	2300      	movs	r3, #0
 8016eec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8016eee:	683b      	ldr	r3, [r7, #0]
 8016ef0:	885b      	ldrh	r3, [r3, #2]
 8016ef2:	b2da      	uxtb	r2, r3
 8016ef4:	4b4c      	ldr	r3, [pc, #304]	; (8017028 <USBD_SetConfig+0x148>)
 8016ef6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016ef8:	4b4b      	ldr	r3, [pc, #300]	; (8017028 <USBD_SetConfig+0x148>)
 8016efa:	781b      	ldrb	r3, [r3, #0]
 8016efc:	2b01      	cmp	r3, #1
 8016efe:	d905      	bls.n	8016f0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016f00:	6839      	ldr	r1, [r7, #0]
 8016f02:	6878      	ldr	r0, [r7, #4]
 8016f04:	f000 f96c 	bl	80171e0 <USBD_CtlError>
    return USBD_FAIL;
 8016f08:	2303      	movs	r3, #3
 8016f0a:	e088      	b.n	801701e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016f12:	b2db      	uxtb	r3, r3
 8016f14:	2b02      	cmp	r3, #2
 8016f16:	d002      	beq.n	8016f1e <USBD_SetConfig+0x3e>
 8016f18:	2b03      	cmp	r3, #3
 8016f1a:	d025      	beq.n	8016f68 <USBD_SetConfig+0x88>
 8016f1c:	e071      	b.n	8017002 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8016f1e:	4b42      	ldr	r3, [pc, #264]	; (8017028 <USBD_SetConfig+0x148>)
 8016f20:	781b      	ldrb	r3, [r3, #0]
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	d01c      	beq.n	8016f60 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8016f26:	4b40      	ldr	r3, [pc, #256]	; (8017028 <USBD_SetConfig+0x148>)
 8016f28:	781b      	ldrb	r3, [r3, #0]
 8016f2a:	461a      	mov	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016f30:	4b3d      	ldr	r3, [pc, #244]	; (8017028 <USBD_SetConfig+0x148>)
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	4619      	mov	r1, r3
 8016f36:	6878      	ldr	r0, [r7, #4]
 8016f38:	f7ff f97f 	bl	801623a <USBD_SetClassConfig>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016f40:	7bfb      	ldrb	r3, [r7, #15]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d004      	beq.n	8016f50 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8016f46:	6839      	ldr	r1, [r7, #0]
 8016f48:	6878      	ldr	r0, [r7, #4]
 8016f4a:	f000 f949 	bl	80171e0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f4e:	e065      	b.n	801701c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016f50:	6878      	ldr	r0, [r7, #4]
 8016f52:	f000 fa10 	bl	8017376 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	2203      	movs	r2, #3
 8016f5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016f5e:	e05d      	b.n	801701c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8016f60:	6878      	ldr	r0, [r7, #4]
 8016f62:	f000 fa08 	bl	8017376 <USBD_CtlSendStatus>
      break;
 8016f66:	e059      	b.n	801701c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016f68:	4b2f      	ldr	r3, [pc, #188]	; (8017028 <USBD_SetConfig+0x148>)
 8016f6a:	781b      	ldrb	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d112      	bne.n	8016f96 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	2202      	movs	r2, #2
 8016f74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016f78:	4b2b      	ldr	r3, [pc, #172]	; (8017028 <USBD_SetConfig+0x148>)
 8016f7a:	781b      	ldrb	r3, [r3, #0]
 8016f7c:	461a      	mov	r2, r3
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016f82:	4b29      	ldr	r3, [pc, #164]	; (8017028 <USBD_SetConfig+0x148>)
 8016f84:	781b      	ldrb	r3, [r3, #0]
 8016f86:	4619      	mov	r1, r3
 8016f88:	6878      	ldr	r0, [r7, #4]
 8016f8a:	f7ff f972 	bl	8016272 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016f8e:	6878      	ldr	r0, [r7, #4]
 8016f90:	f000 f9f1 	bl	8017376 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016f94:	e042      	b.n	801701c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8016f96:	4b24      	ldr	r3, [pc, #144]	; (8017028 <USBD_SetConfig+0x148>)
 8016f98:	781b      	ldrb	r3, [r3, #0]
 8016f9a:	461a      	mov	r2, r3
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	685b      	ldr	r3, [r3, #4]
 8016fa0:	429a      	cmp	r2, r3
 8016fa2:	d02a      	beq.n	8016ffa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	685b      	ldr	r3, [r3, #4]
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	4619      	mov	r1, r3
 8016fac:	6878      	ldr	r0, [r7, #4]
 8016fae:	f7ff f960 	bl	8016272 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016fb2:	4b1d      	ldr	r3, [pc, #116]	; (8017028 <USBD_SetConfig+0x148>)
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	461a      	mov	r2, r3
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016fbc:	4b1a      	ldr	r3, [pc, #104]	; (8017028 <USBD_SetConfig+0x148>)
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	4619      	mov	r1, r3
 8016fc2:	6878      	ldr	r0, [r7, #4]
 8016fc4:	f7ff f939 	bl	801623a <USBD_SetClassConfig>
 8016fc8:	4603      	mov	r3, r0
 8016fca:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8016fcc:	7bfb      	ldrb	r3, [r7, #15]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d00f      	beq.n	8016ff2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8016fd2:	6839      	ldr	r1, [r7, #0]
 8016fd4:	6878      	ldr	r0, [r7, #4]
 8016fd6:	f000 f903 	bl	80171e0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	685b      	ldr	r3, [r3, #4]
 8016fde:	b2db      	uxtb	r3, r3
 8016fe0:	4619      	mov	r1, r3
 8016fe2:	6878      	ldr	r0, [r7, #4]
 8016fe4:	f7ff f945 	bl	8016272 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	2202      	movs	r2, #2
 8016fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016ff0:	e014      	b.n	801701c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8016ff2:	6878      	ldr	r0, [r7, #4]
 8016ff4:	f000 f9bf 	bl	8017376 <USBD_CtlSendStatus>
      break;
 8016ff8:	e010      	b.n	801701c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8016ffa:	6878      	ldr	r0, [r7, #4]
 8016ffc:	f000 f9bb 	bl	8017376 <USBD_CtlSendStatus>
      break;
 8017000:	e00c      	b.n	801701c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8017002:	6839      	ldr	r1, [r7, #0]
 8017004:	6878      	ldr	r0, [r7, #4]
 8017006:	f000 f8eb 	bl	80171e0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801700a:	4b07      	ldr	r3, [pc, #28]	; (8017028 <USBD_SetConfig+0x148>)
 801700c:	781b      	ldrb	r3, [r3, #0]
 801700e:	4619      	mov	r1, r3
 8017010:	6878      	ldr	r0, [r7, #4]
 8017012:	f7ff f92e 	bl	8016272 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8017016:	2303      	movs	r3, #3
 8017018:	73fb      	strb	r3, [r7, #15]
      break;
 801701a:	bf00      	nop
  }

  return ret;
 801701c:	7bfb      	ldrb	r3, [r7, #15]
}
 801701e:	4618      	mov	r0, r3
 8017020:	3710      	adds	r7, #16
 8017022:	46bd      	mov	sp, r7
 8017024:	bd80      	pop	{r7, pc}
 8017026:	bf00      	nop
 8017028:	20000d2f 	.word	0x20000d2f

0801702c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b082      	sub	sp, #8
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8017036:	683b      	ldr	r3, [r7, #0]
 8017038:	88db      	ldrh	r3, [r3, #6]
 801703a:	2b01      	cmp	r3, #1
 801703c:	d004      	beq.n	8017048 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801703e:	6839      	ldr	r1, [r7, #0]
 8017040:	6878      	ldr	r0, [r7, #4]
 8017042:	f000 f8cd 	bl	80171e0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8017046:	e023      	b.n	8017090 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801704e:	b2db      	uxtb	r3, r3
 8017050:	2b02      	cmp	r3, #2
 8017052:	dc02      	bgt.n	801705a <USBD_GetConfig+0x2e>
 8017054:	2b00      	cmp	r3, #0
 8017056:	dc03      	bgt.n	8017060 <USBD_GetConfig+0x34>
 8017058:	e015      	b.n	8017086 <USBD_GetConfig+0x5a>
 801705a:	2b03      	cmp	r3, #3
 801705c:	d00b      	beq.n	8017076 <USBD_GetConfig+0x4a>
 801705e:	e012      	b.n	8017086 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2200      	movs	r2, #0
 8017064:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8017066:	687b      	ldr	r3, [r7, #4]
 8017068:	3308      	adds	r3, #8
 801706a:	2201      	movs	r2, #1
 801706c:	4619      	mov	r1, r3
 801706e:	6878      	ldr	r0, [r7, #4]
 8017070:	f000 f927 	bl	80172c2 <USBD_CtlSendData>
        break;
 8017074:	e00c      	b.n	8017090 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8017076:	687b      	ldr	r3, [r7, #4]
 8017078:	3304      	adds	r3, #4
 801707a:	2201      	movs	r2, #1
 801707c:	4619      	mov	r1, r3
 801707e:	6878      	ldr	r0, [r7, #4]
 8017080:	f000 f91f 	bl	80172c2 <USBD_CtlSendData>
        break;
 8017084:	e004      	b.n	8017090 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6878      	ldr	r0, [r7, #4]
 801708a:	f000 f8a9 	bl	80171e0 <USBD_CtlError>
        break;
 801708e:	bf00      	nop
}
 8017090:	bf00      	nop
 8017092:	3708      	adds	r7, #8
 8017094:	46bd      	mov	sp, r7
 8017096:	bd80      	pop	{r7, pc}

08017098 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017098:	b580      	push	{r7, lr}
 801709a:	b082      	sub	sp, #8
 801709c:	af00      	add	r7, sp, #0
 801709e:	6078      	str	r0, [r7, #4]
 80170a0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80170a8:	b2db      	uxtb	r3, r3
 80170aa:	3b01      	subs	r3, #1
 80170ac:	2b02      	cmp	r3, #2
 80170ae:	d81e      	bhi.n	80170ee <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80170b0:	683b      	ldr	r3, [r7, #0]
 80170b2:	88db      	ldrh	r3, [r3, #6]
 80170b4:	2b02      	cmp	r3, #2
 80170b6:	d004      	beq.n	80170c2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80170b8:	6839      	ldr	r1, [r7, #0]
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 f890 	bl	80171e0 <USBD_CtlError>
        break;
 80170c0:	e01a      	b.n	80170f8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	2201      	movs	r2, #1
 80170c6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d005      	beq.n	80170de <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	68db      	ldr	r3, [r3, #12]
 80170d6:	f043 0202 	orr.w	r2, r3, #2
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	330c      	adds	r3, #12
 80170e2:	2202      	movs	r2, #2
 80170e4:	4619      	mov	r1, r3
 80170e6:	6878      	ldr	r0, [r7, #4]
 80170e8:	f000 f8eb 	bl	80172c2 <USBD_CtlSendData>
      break;
 80170ec:	e004      	b.n	80170f8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80170ee:	6839      	ldr	r1, [r7, #0]
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f000 f875 	bl	80171e0 <USBD_CtlError>
      break;
 80170f6:	bf00      	nop
  }
}
 80170f8:	bf00      	nop
 80170fa:	3708      	adds	r7, #8
 80170fc:	46bd      	mov	sp, r7
 80170fe:	bd80      	pop	{r7, pc}

08017100 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017100:	b580      	push	{r7, lr}
 8017102:	b082      	sub	sp, #8
 8017104:	af00      	add	r7, sp, #0
 8017106:	6078      	str	r0, [r7, #4]
 8017108:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801710a:	683b      	ldr	r3, [r7, #0]
 801710c:	885b      	ldrh	r3, [r3, #2]
 801710e:	2b01      	cmp	r3, #1
 8017110:	d106      	bne.n	8017120 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	2201      	movs	r2, #1
 8017116:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f000 f92b 	bl	8017376 <USBD_CtlSendStatus>
  }
}
 8017120:	bf00      	nop
 8017122:	3708      	adds	r7, #8
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}

08017128 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8017128:	b580      	push	{r7, lr}
 801712a:	b082      	sub	sp, #8
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8017138:	b2db      	uxtb	r3, r3
 801713a:	3b01      	subs	r3, #1
 801713c:	2b02      	cmp	r3, #2
 801713e:	d80b      	bhi.n	8017158 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8017140:	683b      	ldr	r3, [r7, #0]
 8017142:	885b      	ldrh	r3, [r3, #2]
 8017144:	2b01      	cmp	r3, #1
 8017146:	d10c      	bne.n	8017162 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	2200      	movs	r2, #0
 801714c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8017150:	6878      	ldr	r0, [r7, #4]
 8017152:	f000 f910 	bl	8017376 <USBD_CtlSendStatus>
      }
      break;
 8017156:	e004      	b.n	8017162 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8017158:	6839      	ldr	r1, [r7, #0]
 801715a:	6878      	ldr	r0, [r7, #4]
 801715c:	f000 f840 	bl	80171e0 <USBD_CtlError>
      break;
 8017160:	e000      	b.n	8017164 <USBD_ClrFeature+0x3c>
      break;
 8017162:	bf00      	nop
  }
}
 8017164:	bf00      	nop
 8017166:	3708      	adds	r7, #8
 8017168:	46bd      	mov	sp, r7
 801716a:	bd80      	pop	{r7, pc}

0801716c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801716c:	b580      	push	{r7, lr}
 801716e:	b084      	sub	sp, #16
 8017170:	af00      	add	r7, sp, #0
 8017172:	6078      	str	r0, [r7, #4]
 8017174:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8017176:	683b      	ldr	r3, [r7, #0]
 8017178:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801717a:	68fb      	ldr	r3, [r7, #12]
 801717c:	781a      	ldrb	r2, [r3, #0]
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	3301      	adds	r3, #1
 8017186:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	781a      	ldrb	r2, [r3, #0]
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	3301      	adds	r3, #1
 8017194:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8017196:	68f8      	ldr	r0, [r7, #12]
 8017198:	f7ff fa7f 	bl	801669a <SWAPBYTE>
 801719c:	4603      	mov	r3, r0
 801719e:	461a      	mov	r2, r3
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	3301      	adds	r3, #1
 80171a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	3301      	adds	r3, #1
 80171ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80171b0:	68f8      	ldr	r0, [r7, #12]
 80171b2:	f7ff fa72 	bl	801669a <SWAPBYTE>
 80171b6:	4603      	mov	r3, r0
 80171b8:	461a      	mov	r2, r3
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	3301      	adds	r3, #1
 80171c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	3301      	adds	r3, #1
 80171c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80171ca:	68f8      	ldr	r0, [r7, #12]
 80171cc:	f7ff fa65 	bl	801669a <SWAPBYTE>
 80171d0:	4603      	mov	r3, r0
 80171d2:	461a      	mov	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	80da      	strh	r2, [r3, #6]
}
 80171d8:	bf00      	nop
 80171da:	3710      	adds	r7, #16
 80171dc:	46bd      	mov	sp, r7
 80171de:	bd80      	pop	{r7, pc}

080171e0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
 80171e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80171ea:	2180      	movs	r1, #128	; 0x80
 80171ec:	6878      	ldr	r0, [r7, #4]
 80171ee:	f000 fd6f 	bl	8017cd0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80171f2:	2100      	movs	r1, #0
 80171f4:	6878      	ldr	r0, [r7, #4]
 80171f6:	f000 fd6b 	bl	8017cd0 <USBD_LL_StallEP>
}
 80171fa:	bf00      	nop
 80171fc:	3708      	adds	r7, #8
 80171fe:	46bd      	mov	sp, r7
 8017200:	bd80      	pop	{r7, pc}

08017202 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8017202:	b580      	push	{r7, lr}
 8017204:	b086      	sub	sp, #24
 8017206:	af00      	add	r7, sp, #0
 8017208:	60f8      	str	r0, [r7, #12]
 801720a:	60b9      	str	r1, [r7, #8]
 801720c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801720e:	2300      	movs	r3, #0
 8017210:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	2b00      	cmp	r3, #0
 8017216:	d036      	beq.n	8017286 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801721c:	6938      	ldr	r0, [r7, #16]
 801721e:	f000 f836 	bl	801728e <USBD_GetLen>
 8017222:	4603      	mov	r3, r0
 8017224:	3301      	adds	r3, #1
 8017226:	b29b      	uxth	r3, r3
 8017228:	005b      	lsls	r3, r3, #1
 801722a:	b29a      	uxth	r2, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8017230:	7dfb      	ldrb	r3, [r7, #23]
 8017232:	68ba      	ldr	r2, [r7, #8]
 8017234:	4413      	add	r3, r2
 8017236:	687a      	ldr	r2, [r7, #4]
 8017238:	7812      	ldrb	r2, [r2, #0]
 801723a:	701a      	strb	r2, [r3, #0]
  idx++;
 801723c:	7dfb      	ldrb	r3, [r7, #23]
 801723e:	3301      	adds	r3, #1
 8017240:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8017242:	7dfb      	ldrb	r3, [r7, #23]
 8017244:	68ba      	ldr	r2, [r7, #8]
 8017246:	4413      	add	r3, r2
 8017248:	2203      	movs	r2, #3
 801724a:	701a      	strb	r2, [r3, #0]
  idx++;
 801724c:	7dfb      	ldrb	r3, [r7, #23]
 801724e:	3301      	adds	r3, #1
 8017250:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8017252:	e013      	b.n	801727c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8017254:	7dfb      	ldrb	r3, [r7, #23]
 8017256:	68ba      	ldr	r2, [r7, #8]
 8017258:	4413      	add	r3, r2
 801725a:	693a      	ldr	r2, [r7, #16]
 801725c:	7812      	ldrb	r2, [r2, #0]
 801725e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8017260:	693b      	ldr	r3, [r7, #16]
 8017262:	3301      	adds	r3, #1
 8017264:	613b      	str	r3, [r7, #16]
    idx++;
 8017266:	7dfb      	ldrb	r3, [r7, #23]
 8017268:	3301      	adds	r3, #1
 801726a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801726c:	7dfb      	ldrb	r3, [r7, #23]
 801726e:	68ba      	ldr	r2, [r7, #8]
 8017270:	4413      	add	r3, r2
 8017272:	2200      	movs	r2, #0
 8017274:	701a      	strb	r2, [r3, #0]
    idx++;
 8017276:	7dfb      	ldrb	r3, [r7, #23]
 8017278:	3301      	adds	r3, #1
 801727a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801727c:	693b      	ldr	r3, [r7, #16]
 801727e:	781b      	ldrb	r3, [r3, #0]
 8017280:	2b00      	cmp	r3, #0
 8017282:	d1e7      	bne.n	8017254 <USBD_GetString+0x52>
 8017284:	e000      	b.n	8017288 <USBD_GetString+0x86>
    return;
 8017286:	bf00      	nop
  }
}
 8017288:	3718      	adds	r7, #24
 801728a:	46bd      	mov	sp, r7
 801728c:	bd80      	pop	{r7, pc}

0801728e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801728e:	b480      	push	{r7}
 8017290:	b085      	sub	sp, #20
 8017292:	af00      	add	r7, sp, #0
 8017294:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8017296:	2300      	movs	r3, #0
 8017298:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801729e:	e005      	b.n	80172ac <USBD_GetLen+0x1e>
  {
    len++;
 80172a0:	7bfb      	ldrb	r3, [r7, #15]
 80172a2:	3301      	adds	r3, #1
 80172a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80172a6:	68bb      	ldr	r3, [r7, #8]
 80172a8:	3301      	adds	r3, #1
 80172aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80172ac:	68bb      	ldr	r3, [r7, #8]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	2b00      	cmp	r3, #0
 80172b2:	d1f5      	bne.n	80172a0 <USBD_GetLen+0x12>
  }

  return len;
 80172b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3714      	adds	r7, #20
 80172ba:	46bd      	mov	sp, r7
 80172bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172c0:	4770      	bx	lr

080172c2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80172c2:	b580      	push	{r7, lr}
 80172c4:	b084      	sub	sp, #16
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	60f8      	str	r0, [r7, #12]
 80172ca:	60b9      	str	r1, [r7, #8]
 80172cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80172ce:	68fb      	ldr	r3, [r7, #12]
 80172d0:	2202      	movs	r2, #2
 80172d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	687a      	ldr	r2, [r7, #4]
 80172da:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	687a      	ldr	r2, [r7, #4]
 80172e0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	68ba      	ldr	r2, [r7, #8]
 80172e6:	2100      	movs	r1, #0
 80172e8:	68f8      	ldr	r0, [r7, #12]
 80172ea:	f000 fdc1 	bl	8017e70 <USBD_LL_Transmit>

  return USBD_OK;
 80172ee:	2300      	movs	r3, #0
}
 80172f0:	4618      	mov	r0, r3
 80172f2:	3710      	adds	r7, #16
 80172f4:	46bd      	mov	sp, r7
 80172f6:	bd80      	pop	{r7, pc}

080172f8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80172f8:	b580      	push	{r7, lr}
 80172fa:	b084      	sub	sp, #16
 80172fc:	af00      	add	r7, sp, #0
 80172fe:	60f8      	str	r0, [r7, #12]
 8017300:	60b9      	str	r1, [r7, #8]
 8017302:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	68ba      	ldr	r2, [r7, #8]
 8017308:	2100      	movs	r1, #0
 801730a:	68f8      	ldr	r0, [r7, #12]
 801730c:	f000 fdb0 	bl	8017e70 <USBD_LL_Transmit>

  return USBD_OK;
 8017310:	2300      	movs	r3, #0
}
 8017312:	4618      	mov	r0, r3
 8017314:	3710      	adds	r7, #16
 8017316:	46bd      	mov	sp, r7
 8017318:	bd80      	pop	{r7, pc}

0801731a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801731a:	b580      	push	{r7, lr}
 801731c:	b084      	sub	sp, #16
 801731e:	af00      	add	r7, sp, #0
 8017320:	60f8      	str	r0, [r7, #12]
 8017322:	60b9      	str	r1, [r7, #8]
 8017324:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	2203      	movs	r2, #3
 801732a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	687a      	ldr	r2, [r7, #4]
 8017332:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	687a      	ldr	r2, [r7, #4]
 801733a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	68ba      	ldr	r2, [r7, #8]
 8017342:	2100      	movs	r1, #0
 8017344:	68f8      	ldr	r0, [r7, #12]
 8017346:	f000 fdcb 	bl	8017ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801734a:	2300      	movs	r3, #0
}
 801734c:	4618      	mov	r0, r3
 801734e:	3710      	adds	r7, #16
 8017350:	46bd      	mov	sp, r7
 8017352:	bd80      	pop	{r7, pc}

08017354 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8017354:	b580      	push	{r7, lr}
 8017356:	b084      	sub	sp, #16
 8017358:	af00      	add	r7, sp, #0
 801735a:	60f8      	str	r0, [r7, #12]
 801735c:	60b9      	str	r1, [r7, #8]
 801735e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	68ba      	ldr	r2, [r7, #8]
 8017364:	2100      	movs	r1, #0
 8017366:	68f8      	ldr	r0, [r7, #12]
 8017368:	f000 fdba 	bl	8017ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801736c:	2300      	movs	r3, #0
}
 801736e:	4618      	mov	r0, r3
 8017370:	3710      	adds	r7, #16
 8017372:	46bd      	mov	sp, r7
 8017374:	bd80      	pop	{r7, pc}

08017376 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8017376:	b580      	push	{r7, lr}
 8017378:	b082      	sub	sp, #8
 801737a:	af00      	add	r7, sp, #0
 801737c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	2204      	movs	r2, #4
 8017382:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8017386:	2300      	movs	r3, #0
 8017388:	2200      	movs	r2, #0
 801738a:	2100      	movs	r1, #0
 801738c:	6878      	ldr	r0, [r7, #4]
 801738e:	f000 fd6f 	bl	8017e70 <USBD_LL_Transmit>

  return USBD_OK;
 8017392:	2300      	movs	r3, #0
}
 8017394:	4618      	mov	r0, r3
 8017396:	3708      	adds	r7, #8
 8017398:	46bd      	mov	sp, r7
 801739a:	bd80      	pop	{r7, pc}

0801739c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	b082      	sub	sp, #8
 80173a0:	af00      	add	r7, sp, #0
 80173a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	2205      	movs	r2, #5
 80173a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80173ac:	2300      	movs	r3, #0
 80173ae:	2200      	movs	r2, #0
 80173b0:	2100      	movs	r1, #0
 80173b2:	6878      	ldr	r0, [r7, #4]
 80173b4:	f000 fd94 	bl	8017ee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80173b8:	2300      	movs	r3, #0
}
 80173ba:	4618      	mov	r0, r3
 80173bc:	3708      	adds	r7, #8
 80173be:	46bd      	mov	sp, r7
 80173c0:	bd80      	pop	{r7, pc}
	...

080173c4 <Hes_USB_Config_Mode>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void Hes_USB_Config_Mode(void)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	af00      	add	r7, sp, #0
	if (USBD_Init_CDC(&hUsbDeviceFS, &FS_Desc_CDC, DEVICE_FS) != USBD_OK)
 80173c8:	2200      	movs	r2, #0
 80173ca:	4912      	ldr	r1, [pc, #72]	; (8017414 <Hes_USB_Config_Mode+0x50>)
 80173cc:	4812      	ldr	r0, [pc, #72]	; (8017418 <Hes_USB_Config_Mode+0x54>)
 80173ce:	f7fe feab 	bl	8016128 <USBD_Init_CDC>
 80173d2:	4603      	mov	r3, r0
 80173d4:	2b00      	cmp	r3, #0
 80173d6:	d001      	beq.n	80173dc <Hes_USB_Config_Mode+0x18>
	{
	  Error_Handler();
 80173d8:	f7f3 ff18 	bl	800b20c <Error_Handler>
	}
	if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80173dc:	490f      	ldr	r1, [pc, #60]	; (801741c <Hes_USB_Config_Mode+0x58>)
 80173de:	480e      	ldr	r0, [pc, #56]	; (8017418 <Hes_USB_Config_Mode+0x54>)
 80173e0:	f7fe fed2 	bl	8016188 <USBD_RegisterClass>
 80173e4:	4603      	mov	r3, r0
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d001      	beq.n	80173ee <Hes_USB_Config_Mode+0x2a>
	{
	  Error_Handler();
 80173ea:	f7f3 ff0f 	bl	800b20c <Error_Handler>
	}
	if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80173ee:	490c      	ldr	r1, [pc, #48]	; (8017420 <Hes_USB_Config_Mode+0x5c>)
 80173f0:	4809      	ldr	r0, [pc, #36]	; (8017418 <Hes_USB_Config_Mode+0x54>)
 80173f2:	f7ea f845 	bl	8001480 <USBD_CDC_RegisterInterface>
 80173f6:	4603      	mov	r3, r0
 80173f8:	2b00      	cmp	r3, #0
 80173fa:	d001      	beq.n	8017400 <Hes_USB_Config_Mode+0x3c>
	{
	  Error_Handler();
 80173fc:	f7f3 ff06 	bl	800b20c <Error_Handler>
	}
	if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017400:	4805      	ldr	r0, [pc, #20]	; (8017418 <Hes_USB_Config_Mode+0x54>)
 8017402:	f7fe fee8 	bl	80161d6 <USBD_Start>
 8017406:	4603      	mov	r3, r0
 8017408:	2b00      	cmp	r3, #0
 801740a:	d001      	beq.n	8017410 <Hes_USB_Config_Mode+0x4c>
	{
	  Error_Handler();
 801740c:	f7f3 fefe 	bl	800b20c <Error_Handler>
	}
}
 8017410:	bf00      	nop
 8017412:	bd80      	pop	{r7, pc}
 8017414:	20000894 	.word	0x20000894
 8017418:	20003604 	.word	0x20003604
 801741c:	2000000c 	.word	0x2000000c
 8017420:	20000114 	.word	0x20000114

08017424 <USB_DFU>:

void USB_DFU(void)
{
 8017424:	b580      	push	{r7, lr}
 8017426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017428:	2200      	movs	r2, #0
 801742a:	4912      	ldr	r1, [pc, #72]	; (8017474 <USB_DFU+0x50>)
 801742c:	4812      	ldr	r0, [pc, #72]	; (8017478 <USB_DFU+0x54>)
 801742e:	f7fe fe4b 	bl	80160c8 <USBD_Init>
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	d001      	beq.n	801743c <USB_DFU+0x18>
  {
    Error_Handler();
 8017438:	f7f3 fee8 	bl	800b20c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_DFU) != USBD_OK)
 801743c:	490f      	ldr	r1, [pc, #60]	; (801747c <USB_DFU+0x58>)
 801743e:	480e      	ldr	r0, [pc, #56]	; (8017478 <USB_DFU+0x54>)
 8017440:	f7fe fea2 	bl	8016188 <USBD_RegisterClass>
 8017444:	4603      	mov	r3, r0
 8017446:	2b00      	cmp	r3, #0
 8017448:	d001      	beq.n	801744e <USB_DFU+0x2a>
  {
    Error_Handler();
 801744a:	f7f3 fedf 	bl	800b20c <Error_Handler>
  }
  if (USBD_DFU_RegisterMedia(&hUsbDeviceFS, &USBD_DFU_fops_FS) != USBD_OK)
 801744e:	490c      	ldr	r1, [pc, #48]	; (8017480 <USB_DFU+0x5c>)
 8017450:	4809      	ldr	r0, [pc, #36]	; (8017478 <USB_DFU+0x54>)
 8017452:	f7fe fab7 	bl	80159c4 <USBD_DFU_RegisterMedia>
 8017456:	4603      	mov	r3, r0
 8017458:	2b00      	cmp	r3, #0
 801745a:	d001      	beq.n	8017460 <USB_DFU+0x3c>
  {
    Error_Handler();
 801745c:	f7f3 fed6 	bl	800b20c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017460:	4805      	ldr	r0, [pc, #20]	; (8017478 <USB_DFU+0x54>)
 8017462:	f7fe feb8 	bl	80161d6 <USBD_Start>
 8017466:	4603      	mov	r3, r0
 8017468:	2b00      	cmp	r3, #0
 801746a:	d001      	beq.n	8017470 <USB_DFU+0x4c>
  {
    Error_Handler();
 801746c:	f7f3 fece 	bl	800b20c <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017470:	bf00      	nop
 8017472:	bd80      	pop	{r7, pc}
 8017474:	200008b4 	.word	0x200008b4
 8017478:	20003604 	.word	0x20003604
 801747c:	20000830 	.word	0x20000830
 8017480:	20000928 	.word	0x20000928

08017484 <USBD_FS_DeviceDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_DeviceDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017484:	b480      	push	{r7}
 8017486:	b083      	sub	sp, #12
 8017488:	af00      	add	r7, sp, #0
 801748a:	4603      	mov	r3, r0
 801748c:	6039      	str	r1, [r7, #0]
 801748e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc_CDC);
 8017490:	683b      	ldr	r3, [r7, #0]
 8017492:	2212      	movs	r2, #18
 8017494:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc_CDC;
 8017496:	4b03      	ldr	r3, [pc, #12]	; (80174a4 <USBD_FS_DeviceDescriptor_CDC+0x20>)
}
 8017498:	4618      	mov	r0, r3
 801749a:	370c      	adds	r7, #12
 801749c:	46bd      	mov	sp, r7
 801749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a2:	4770      	bx	lr
 80174a4:	200008e8 	.word	0x200008e8

080174a8 <USBD_FS_DeviceDescriptor>:

uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174a8:	b480      	push	{r7}
 80174aa:	b083      	sub	sp, #12
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	4603      	mov	r3, r0
 80174b0:	6039      	str	r1, [r7, #0]
 80174b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80174b4:	683b      	ldr	r3, [r7, #0]
 80174b6:	2212      	movs	r2, #18
 80174b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80174ba:	4b03      	ldr	r3, [pc, #12]	; (80174c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80174bc:	4618      	mov	r0, r3
 80174be:	370c      	adds	r7, #12
 80174c0:	46bd      	mov	sp, r7
 80174c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174c6:	4770      	bx	lr
 80174c8:	200008d4 	.word	0x200008d4

080174cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	4603      	mov	r3, r0
 80174d4:	6039      	str	r1, [r7, #0]
 80174d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80174d8:	683b      	ldr	r3, [r7, #0]
 80174da:	2204      	movs	r2, #4
 80174dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80174de:	4b03      	ldr	r3, [pc, #12]	; (80174ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80174e0:	4618      	mov	r0, r3
 80174e2:	370c      	adds	r7, #12
 80174e4:	46bd      	mov	sp, r7
 80174e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ea:	4770      	bx	lr
 80174ec:	20000908 	.word	0x20000908

080174f0 <USBD_FS_ProductStrDescriptor_CDC>:
  */

/* USER CODE BEGIN */

uint8_t * USBD_FS_ProductStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b082      	sub	sp, #8
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	4603      	mov	r3, r0
 80174f8:	6039      	str	r1, [r7, #0]
 80174fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80174fc:	79fb      	ldrb	r3, [r7, #7]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d105      	bne.n	801750e <USBD_FS_ProductStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 8017502:	683a      	ldr	r2, [r7, #0]
 8017504:	4907      	ldr	r1, [pc, #28]	; (8017524 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8017506:	4808      	ldr	r0, [pc, #32]	; (8017528 <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8017508:	f7ff fe7b 	bl	8017202 <USBD_GetString>
 801750c:	e004      	b.n	8017518 <USBD_FS_ProductStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS_CDC, USBD_StrDesc, length);
 801750e:	683a      	ldr	r2, [r7, #0]
 8017510:	4904      	ldr	r1, [pc, #16]	; (8017524 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
 8017512:	4805      	ldr	r0, [pc, #20]	; (8017528 <USBD_FS_ProductStrDescriptor_CDC+0x38>)
 8017514:	f7ff fe75 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017518:	4b02      	ldr	r3, [pc, #8]	; (8017524 <USBD_FS_ProductStrDescriptor_CDC+0x34>)
}
 801751a:	4618      	mov	r0, r3
 801751c:	3708      	adds	r7, #8
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}
 8017522:	bf00      	nop
 8017524:	200038d4 	.word	0x200038d4
 8017528:	0801bdcc 	.word	0x0801bdcc

0801752c <USBD_FS_ProductStrDescriptor>:

/* USER CODE END */

uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b082      	sub	sp, #8
 8017530:	af00      	add	r7, sp, #0
 8017532:	4603      	mov	r3, r0
 8017534:	6039      	str	r1, [r7, #0]
 8017536:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017538:	79fb      	ldrb	r3, [r7, #7]
 801753a:	2b00      	cmp	r3, #0
 801753c:	d105      	bne.n	801754a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801753e:	683a      	ldr	r2, [r7, #0]
 8017540:	4907      	ldr	r1, [pc, #28]	; (8017560 <USBD_FS_ProductStrDescriptor+0x34>)
 8017542:	4808      	ldr	r0, [pc, #32]	; (8017564 <USBD_FS_ProductStrDescriptor+0x38>)
 8017544:	f7ff fe5d 	bl	8017202 <USBD_GetString>
 8017548:	e004      	b.n	8017554 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801754a:	683a      	ldr	r2, [r7, #0]
 801754c:	4904      	ldr	r1, [pc, #16]	; (8017560 <USBD_FS_ProductStrDescriptor+0x34>)
 801754e:	4805      	ldr	r0, [pc, #20]	; (8017564 <USBD_FS_ProductStrDescriptor+0x38>)
 8017550:	f7ff fe57 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017554:	4b02      	ldr	r3, [pc, #8]	; (8017560 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017556:	4618      	mov	r0, r3
 8017558:	3708      	adds	r7, #8
 801755a:	46bd      	mov	sp, r7
 801755c:	bd80      	pop	{r7, pc}
 801755e:	bf00      	nop
 8017560:	200038d4 	.word	0x200038d4
 8017564:	0801bde4 	.word	0x0801bde4

08017568 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b082      	sub	sp, #8
 801756c:	af00      	add	r7, sp, #0
 801756e:	4603      	mov	r3, r0
 8017570:	6039      	str	r1, [r7, #0]
 8017572:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017574:	683a      	ldr	r2, [r7, #0]
 8017576:	4904      	ldr	r1, [pc, #16]	; (8017588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017578:	4804      	ldr	r0, [pc, #16]	; (801758c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801757a:	f7ff fe42 	bl	8017202 <USBD_GetString>
  return USBD_StrDesc;
 801757e:	4b02      	ldr	r3, [pc, #8]	; (8017588 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017580:	4618      	mov	r0, r3
 8017582:	3708      	adds	r7, #8
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}
 8017588:	200038d4 	.word	0x200038d4
 801758c:	0801be04 	.word	0x0801be04

08017590 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017590:	b580      	push	{r7, lr}
 8017592:	b082      	sub	sp, #8
 8017594:	af00      	add	r7, sp, #0
 8017596:	4603      	mov	r3, r0
 8017598:	6039      	str	r1, [r7, #0]
 801759a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801759c:	683b      	ldr	r3, [r7, #0]
 801759e:	221a      	movs	r2, #26
 80175a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80175a2:	f000 f891 	bl	80176c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80175a6:	4b02      	ldr	r3, [pc, #8]	; (80175b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80175a8:	4618      	mov	r0, r3
 80175aa:	3708      	adds	r7, #8
 80175ac:	46bd      	mov	sp, r7
 80175ae:	bd80      	pop	{r7, pc}
 80175b0:	2000090c 	.word	0x2000090c

080175b4 <USBD_FS_ConfigStrDescriptor_CDC>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b082      	sub	sp, #8
 80175b8:	af00      	add	r7, sp, #0
 80175ba:	4603      	mov	r3, r0
 80175bc:	6039      	str	r1, [r7, #0]
 80175be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80175c0:	79fb      	ldrb	r3, [r7, #7]
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d105      	bne.n	80175d2 <USBD_FS_ConfigStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 80175c6:	683a      	ldr	r2, [r7, #0]
 80175c8:	4907      	ldr	r1, [pc, #28]	; (80175e8 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 80175ca:	4808      	ldr	r0, [pc, #32]	; (80175ec <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 80175cc:	f7ff fe19 	bl	8017202 <USBD_GetString>
 80175d0:	e004      	b.n	80175dc <USBD_FS_ConfigStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS_CDC, USBD_StrDesc, length);
 80175d2:	683a      	ldr	r2, [r7, #0]
 80175d4:	4904      	ldr	r1, [pc, #16]	; (80175e8 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
 80175d6:	4805      	ldr	r0, [pc, #20]	; (80175ec <USBD_FS_ConfigStrDescriptor_CDC+0x38>)
 80175d8:	f7ff fe13 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 80175dc:	4b02      	ldr	r3, [pc, #8]	; (80175e8 <USBD_FS_ConfigStrDescriptor_CDC+0x34>)
}
 80175de:	4618      	mov	r0, r3
 80175e0:	3708      	adds	r7, #8
 80175e2:	46bd      	mov	sp, r7
 80175e4:	bd80      	pop	{r7, pc}
 80175e6:	bf00      	nop
 80175e8:	200038d4 	.word	0x200038d4
 80175ec:	0801be10 	.word	0x0801be10

080175f0 <USBD_FS_ConfigStrDescriptor>:


uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	4603      	mov	r3, r0
 80175f8:	6039      	str	r1, [r7, #0]
 80175fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80175fc:	79fb      	ldrb	r3, [r7, #7]
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d105      	bne.n	801760e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017602:	683a      	ldr	r2, [r7, #0]
 8017604:	4907      	ldr	r1, [pc, #28]	; (8017624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017606:	4808      	ldr	r0, [pc, #32]	; (8017628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017608:	f7ff fdfb 	bl	8017202 <USBD_GetString>
 801760c:	e004      	b.n	8017618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801760e:	683a      	ldr	r2, [r7, #0]
 8017610:	4904      	ldr	r1, [pc, #16]	; (8017624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017612:	4805      	ldr	r0, [pc, #20]	; (8017628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017614:	f7ff fdf5 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017618:	4b02      	ldr	r3, [pc, #8]	; (8017624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801761a:	4618      	mov	r0, r3
 801761c:	3708      	adds	r7, #8
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
 8017622:	bf00      	nop
 8017624:	200038d4 	.word	0x200038d4
 8017628:	0801be1c 	.word	0x0801be1c

0801762c <USBD_FS_InterfaceStrDescriptor_CDC>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */

uint8_t * USBD_FS_InterfaceStrDescriptor_CDC(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801762c:	b580      	push	{r7, lr}
 801762e:	b082      	sub	sp, #8
 8017630:	af00      	add	r7, sp, #0
 8017632:	4603      	mov	r3, r0
 8017634:	6039      	str	r1, [r7, #0]
 8017636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017638:	79fb      	ldrb	r3, [r7, #7]
 801763a:	2b00      	cmp	r3, #0
 801763c:	d105      	bne.n	801764a <USBD_FS_InterfaceStrDescriptor_CDC+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 801763e:	683a      	ldr	r2, [r7, #0]
 8017640:	4907      	ldr	r1, [pc, #28]	; (8017660 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 8017642:	4808      	ldr	r0, [pc, #32]	; (8017664 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8017644:	f7ff fddd 	bl	8017202 <USBD_GetString>
 8017648:	e004      	b.n	8017654 <USBD_FS_InterfaceStrDescriptor_CDC+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS_CDC, USBD_StrDesc, length);
 801764a:	683a      	ldr	r2, [r7, #0]
 801764c:	4904      	ldr	r1, [pc, #16]	; (8017660 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
 801764e:	4805      	ldr	r0, [pc, #20]	; (8017664 <USBD_FS_InterfaceStrDescriptor_CDC+0x38>)
 8017650:	f7ff fdd7 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017654:	4b02      	ldr	r3, [pc, #8]	; (8017660 <USBD_FS_InterfaceStrDescriptor_CDC+0x34>)
}
 8017656:	4618      	mov	r0, r3
 8017658:	3708      	adds	r7, #8
 801765a:	46bd      	mov	sp, r7
 801765c:	bd80      	pop	{r7, pc}
 801765e:	bf00      	nop
 8017660:	200038d4 	.word	0x200038d4
 8017664:	0801be28 	.word	0x0801be28

08017668 <USBD_FS_InterfaceStrDescriptor>:


uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b082      	sub	sp, #8
 801766c:	af00      	add	r7, sp, #0
 801766e:	4603      	mov	r3, r0
 8017670:	6039      	str	r1, [r7, #0]
 8017672:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017674:	79fb      	ldrb	r3, [r7, #7]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d105      	bne.n	8017686 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801767a:	683a      	ldr	r2, [r7, #0]
 801767c:	4907      	ldr	r1, [pc, #28]	; (801769c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801767e:	4808      	ldr	r0, [pc, #32]	; (80176a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017680:	f7ff fdbf 	bl	8017202 <USBD_GetString>
 8017684:	e004      	b.n	8017690 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017686:	683a      	ldr	r2, [r7, #0]
 8017688:	4904      	ldr	r1, [pc, #16]	; (801769c <USBD_FS_InterfaceStrDescriptor+0x34>)
 801768a:	4805      	ldr	r0, [pc, #20]	; (80176a0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801768c:	f7ff fdb9 	bl	8017202 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017690:	4b02      	ldr	r3, [pc, #8]	; (801769c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017692:	4618      	mov	r0, r3
 8017694:	3708      	adds	r7, #8
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
 801769a:	bf00      	nop
 801769c:	200038d4 	.word	0x200038d4
 80176a0:	0801be38 	.word	0x0801be38

080176a4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80176a4:	b480      	push	{r7}
 80176a6:	b083      	sub	sp, #12
 80176a8:	af00      	add	r7, sp, #0
 80176aa:	4603      	mov	r3, r0
 80176ac:	6039      	str	r1, [r7, #0]
 80176ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80176b0:	683b      	ldr	r3, [r7, #0]
 80176b2:	220c      	movs	r2, #12
 80176b4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80176b6:	4b03      	ldr	r3, [pc, #12]	; (80176c4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	370c      	adds	r7, #12
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr
 80176c4:	200008fc 	.word	0x200008fc

080176c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80176c8:	b580      	push	{r7, lr}
 80176ca:	b084      	sub	sp, #16
 80176cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80176ce:	4b0f      	ldr	r3, [pc, #60]	; (801770c <Get_SerialNum+0x44>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80176d4:	4b0e      	ldr	r3, [pc, #56]	; (8017710 <Get_SerialNum+0x48>)
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80176da:	4b0e      	ldr	r3, [pc, #56]	; (8017714 <Get_SerialNum+0x4c>)
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80176e0:	68fa      	ldr	r2, [r7, #12]
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	4413      	add	r3, r2
 80176e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d009      	beq.n	8017702 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80176ee:	2208      	movs	r2, #8
 80176f0:	4909      	ldr	r1, [pc, #36]	; (8017718 <Get_SerialNum+0x50>)
 80176f2:	68f8      	ldr	r0, [r7, #12]
 80176f4:	f000 f814 	bl	8017720 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80176f8:	2204      	movs	r2, #4
 80176fa:	4908      	ldr	r1, [pc, #32]	; (801771c <Get_SerialNum+0x54>)
 80176fc:	68b8      	ldr	r0, [r7, #8]
 80176fe:	f000 f80f 	bl	8017720 <IntToUnicode>
  }
}
 8017702:	bf00      	nop
 8017704:	3710      	adds	r7, #16
 8017706:	46bd      	mov	sp, r7
 8017708:	bd80      	pop	{r7, pc}
 801770a:	bf00      	nop
 801770c:	1fff7590 	.word	0x1fff7590
 8017710:	1fff7594 	.word	0x1fff7594
 8017714:	1fff7598 	.word	0x1fff7598
 8017718:	2000090e 	.word	0x2000090e
 801771c:	2000091e 	.word	0x2000091e

08017720 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017720:	b480      	push	{r7}
 8017722:	b087      	sub	sp, #28
 8017724:	af00      	add	r7, sp, #0
 8017726:	60f8      	str	r0, [r7, #12]
 8017728:	60b9      	str	r1, [r7, #8]
 801772a:	4613      	mov	r3, r2
 801772c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801772e:	2300      	movs	r3, #0
 8017730:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017732:	2300      	movs	r3, #0
 8017734:	75fb      	strb	r3, [r7, #23]
 8017736:	e027      	b.n	8017788 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	0f1b      	lsrs	r3, r3, #28
 801773c:	2b09      	cmp	r3, #9
 801773e:	d80b      	bhi.n	8017758 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	0f1b      	lsrs	r3, r3, #28
 8017744:	b2da      	uxtb	r2, r3
 8017746:	7dfb      	ldrb	r3, [r7, #23]
 8017748:	005b      	lsls	r3, r3, #1
 801774a:	4619      	mov	r1, r3
 801774c:	68bb      	ldr	r3, [r7, #8]
 801774e:	440b      	add	r3, r1
 8017750:	3230      	adds	r2, #48	; 0x30
 8017752:	b2d2      	uxtb	r2, r2
 8017754:	701a      	strb	r2, [r3, #0]
 8017756:	e00a      	b.n	801776e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017758:	68fb      	ldr	r3, [r7, #12]
 801775a:	0f1b      	lsrs	r3, r3, #28
 801775c:	b2da      	uxtb	r2, r3
 801775e:	7dfb      	ldrb	r3, [r7, #23]
 8017760:	005b      	lsls	r3, r3, #1
 8017762:	4619      	mov	r1, r3
 8017764:	68bb      	ldr	r3, [r7, #8]
 8017766:	440b      	add	r3, r1
 8017768:	3237      	adds	r2, #55	; 0x37
 801776a:	b2d2      	uxtb	r2, r2
 801776c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	011b      	lsls	r3, r3, #4
 8017772:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017774:	7dfb      	ldrb	r3, [r7, #23]
 8017776:	005b      	lsls	r3, r3, #1
 8017778:	3301      	adds	r3, #1
 801777a:	68ba      	ldr	r2, [r7, #8]
 801777c:	4413      	add	r3, r2
 801777e:	2200      	movs	r2, #0
 8017780:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017782:	7dfb      	ldrb	r3, [r7, #23]
 8017784:	3301      	adds	r3, #1
 8017786:	75fb      	strb	r3, [r7, #23]
 8017788:	7dfa      	ldrb	r2, [r7, #23]
 801778a:	79fb      	ldrb	r3, [r7, #7]
 801778c:	429a      	cmp	r2, r3
 801778e:	d3d3      	bcc.n	8017738 <IntToUnicode+0x18>
  }
}
 8017790:	bf00      	nop
 8017792:	bf00      	nop
 8017794:	371c      	adds	r7, #28
 8017796:	46bd      	mov	sp, r7
 8017798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779c:	4770      	bx	lr

0801779e <MEM_If_Init_FS>:
/**
  * @brief  Memory initialization routine.
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Init_FS(void)
{
 801779e:	b480      	push	{r7}
 80177a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 0 */
  return (USBD_OK);
 80177a2:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	46bd      	mov	sp, r7
 80177a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ac:	4770      	bx	lr

080177ae <MEM_If_DeInit_FS>:
/**
  * @brief  De-Initializes Memory
  * @retval USBD_OK if operation is successful, MAL_FAIL else
  */
uint16_t MEM_If_DeInit_FS(void)
{
 80177ae:	b480      	push	{r7}
 80177b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  return (USBD_OK);
 80177b2:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 80177b4:	4618      	mov	r0, r3
 80177b6:	46bd      	mov	sp, r7
 80177b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177bc:	4770      	bx	lr

080177be <MEM_If_Erase_FS>:
  * @brief  Erase sector.
  * @param  Add: Address of sector to be erased.
  * @retval 0 if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Erase_FS(uint32_t Add)
{
 80177be:	b480      	push	{r7}
 80177c0:	b083      	sub	sp, #12
 80177c2:	af00      	add	r7, sp, #0
 80177c4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 2 */

  return (USBD_OK);
 80177c6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	370c      	adds	r7, #12
 80177cc:	46bd      	mov	sp, r7
 80177ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177d2:	4770      	bx	lr

080177d4 <MEM_If_Write_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be written (in bytes).
  * @retval USBD_OK if operation is successful, MAL_FAIL else.
  */
uint16_t MEM_If_Write_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80177d4:	b480      	push	{r7}
 80177d6:	b085      	sub	sp, #20
 80177d8:	af00      	add	r7, sp, #0
 80177da:	60f8      	str	r0, [r7, #12]
 80177dc:	60b9      	str	r1, [r7, #8]
 80177de:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 3 */
  return (USBD_OK);
 80177e0:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80177e2:	4618      	mov	r0, r3
 80177e4:	3714      	adds	r7, #20
 80177e6:	46bd      	mov	sp, r7
 80177e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177ec:	4770      	bx	lr

080177ee <MEM_If_Read_FS>:
  * @param  dest: Pointer to the destination buffer.
  * @param  Len: Number of data to be read (in bytes).
  * @retval Pointer to the physical address where data should be read.
  */
uint8_t *MEM_If_Read_FS(uint8_t *src, uint8_t *dest, uint32_t Len)
{
 80177ee:	b480      	push	{r7}
 80177f0:	b085      	sub	sp, #20
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	60f8      	str	r0, [r7, #12]
 80177f6:	60b9      	str	r1, [r7, #8]
 80177f8:	607a      	str	r2, [r7, #4]
  /* Return a valid address to avoid HardFault */
  /* USER CODE BEGIN 4 */
  return (uint8_t*)(USBD_OK);
 80177fa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80177fc:	4618      	mov	r0, r3
 80177fe:	3714      	adds	r7, #20
 8017800:	46bd      	mov	sp, r7
 8017802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017806:	4770      	bx	lr

08017808 <MEM_If_GetStatus_FS>:
  * @param  Cmd: Number of data to be read (in bytes)
  * @param  buffer: used for returning the time necessary for a program or an erase operation
  * @retval USBD_OK if operation is successful
  */
uint16_t MEM_If_GetStatus_FS(uint32_t Add, uint8_t Cmd, uint8_t *buffer)
{
 8017808:	b480      	push	{r7}
 801780a:	b085      	sub	sp, #20
 801780c:	af00      	add	r7, sp, #0
 801780e:	60f8      	str	r0, [r7, #12]
 8017810:	460b      	mov	r3, r1
 8017812:	607a      	str	r2, [r7, #4]
 8017814:	72fb      	strb	r3, [r7, #11]
  /* USER CODE BEGIN 5 */
  switch (Cmd)
 8017816:	7afb      	ldrb	r3, [r7, #11]
 8017818:	2b01      	cmp	r3, #1
    break;

    case DFU_MEDIA_ERASE:
    default:

    break;
 801781a:	bf00      	nop
  }
  return (USBD_OK);
 801781c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801781e:	4618      	mov	r0, r3
 8017820:	3714      	adds	r7, #20
 8017822:	46bd      	mov	sp, r7
 8017824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017828:	4770      	bx	lr
	...

0801782c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b084      	sub	sp, #16
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	4a0d      	ldr	r2, [pc, #52]	; (8017870 <HAL_PCD_MspInit+0x44>)
 801783a:	4293      	cmp	r3, r2
 801783c:	d113      	bne.n	8017866 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801783e:	4b0d      	ldr	r3, [pc, #52]	; (8017874 <HAL_PCD_MspInit+0x48>)
 8017840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017842:	4a0c      	ldr	r2, [pc, #48]	; (8017874 <HAL_PCD_MspInit+0x48>)
 8017844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8017848:	6593      	str	r3, [r2, #88]	; 0x58
 801784a:	4b0a      	ldr	r3, [pc, #40]	; (8017874 <HAL_PCD_MspInit+0x48>)
 801784c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801784e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017852:	60fb      	str	r3, [r7, #12]
 8017854:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8017856:	2200      	movs	r2, #0
 8017858:	2100      	movs	r1, #0
 801785a:	2043      	movs	r0, #67	; 0x43
 801785c:	f7f4 fb33 	bl	800bec6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8017860:	2043      	movs	r0, #67	; 0x43
 8017862:	f7f4 fb4c 	bl	800befe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8017866:	bf00      	nop
 8017868:	3710      	adds	r7, #16
 801786a:	46bd      	mov	sp, r7
 801786c:	bd80      	pop	{r7, pc}
 801786e:	bf00      	nop
 8017870:	40006800 	.word	0x40006800
 8017874:	40021000 	.word	0x40021000

08017878 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 801788c:	4619      	mov	r1, r3
 801788e:	4610      	mov	r0, r2
 8017890:	f7fe fd07 	bl	80162a2 <USBD_LL_SetupStage>
}
 8017894:	bf00      	nop
 8017896:	3708      	adds	r7, #8
 8017898:	46bd      	mov	sp, r7
 801789a:	bd80      	pop	{r7, pc}

0801789c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b082      	sub	sp, #8
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	460b      	mov	r3, r1
 80178a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80178ae:	78fa      	ldrb	r2, [r7, #3]
 80178b0:	6879      	ldr	r1, [r7, #4]
 80178b2:	4613      	mov	r3, r2
 80178b4:	009b      	lsls	r3, r3, #2
 80178b6:	4413      	add	r3, r2
 80178b8:	00db      	lsls	r3, r3, #3
 80178ba:	440b      	add	r3, r1
 80178bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80178c0:	681a      	ldr	r2, [r3, #0]
 80178c2:	78fb      	ldrb	r3, [r7, #3]
 80178c4:	4619      	mov	r1, r3
 80178c6:	f7fe fd41 	bl	801634c <USBD_LL_DataOutStage>
}
 80178ca:	bf00      	nop
 80178cc:	3708      	adds	r7, #8
 80178ce:	46bd      	mov	sp, r7
 80178d0:	bd80      	pop	{r7, pc}

080178d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80178d2:	b580      	push	{r7, lr}
 80178d4:	b082      	sub	sp, #8
 80178d6:	af00      	add	r7, sp, #0
 80178d8:	6078      	str	r0, [r7, #4]
 80178da:	460b      	mov	r3, r1
 80178dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 80178e4:	78fa      	ldrb	r2, [r7, #3]
 80178e6:	6879      	ldr	r1, [r7, #4]
 80178e8:	4613      	mov	r3, r2
 80178ea:	009b      	lsls	r3, r3, #2
 80178ec:	4413      	add	r3, r2
 80178ee:	00db      	lsls	r3, r3, #3
 80178f0:	440b      	add	r3, r1
 80178f2:	333c      	adds	r3, #60	; 0x3c
 80178f4:	681a      	ldr	r2, [r3, #0]
 80178f6:	78fb      	ldrb	r3, [r7, #3]
 80178f8:	4619      	mov	r1, r3
 80178fa:	f7fe fd8a 	bl	8016412 <USBD_LL_DataInStage>
}
 80178fe:	bf00      	nop
 8017900:	3708      	adds	r7, #8
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}

08017906 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017906:	b580      	push	{r7, lr}
 8017908:	b082      	sub	sp, #8
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017914:	4618      	mov	r0, r3
 8017916:	f7fe fe9e 	bl	8016656 <USBD_LL_SOF>
}
 801791a:	bf00      	nop
 801791c:	3708      	adds	r7, #8
 801791e:	46bd      	mov	sp, r7
 8017920:	bd80      	pop	{r7, pc}

08017922 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017922:	b580      	push	{r7, lr}
 8017924:	b084      	sub	sp, #16
 8017926:	af00      	add	r7, sp, #0
 8017928:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801792a:	2301      	movs	r3, #1
 801792c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	689b      	ldr	r3, [r3, #8]
 8017932:	2b02      	cmp	r3, #2
 8017934:	d001      	beq.n	801793a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8017936:	f7f3 fc69 	bl	800b20c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801793a:	687b      	ldr	r3, [r7, #4]
 801793c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017940:	7bfa      	ldrb	r2, [r7, #15]
 8017942:	4611      	mov	r1, r2
 8017944:	4618      	mov	r0, r3
 8017946:	f7fe fe48 	bl	80165da <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017950:	4618      	mov	r0, r3
 8017952:	f7fe fdf4 	bl	801653e <USBD_LL_Reset>
}
 8017956:	bf00      	nop
 8017958:	3710      	adds	r7, #16
 801795a:	46bd      	mov	sp, r7
 801795c:	bd80      	pop	{r7, pc}
	...

08017960 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017960:	b580      	push	{r7, lr}
 8017962:	b082      	sub	sp, #8
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 801796e:	4618      	mov	r0, r3
 8017970:	f7fe fe43 	bl	80165fa <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	699b      	ldr	r3, [r3, #24]
 8017978:	2b00      	cmp	r3, #0
 801797a:	d005      	beq.n	8017988 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801797c:	4b04      	ldr	r3, [pc, #16]	; (8017990 <HAL_PCD_SuspendCallback+0x30>)
 801797e:	691b      	ldr	r3, [r3, #16]
 8017980:	4a03      	ldr	r2, [pc, #12]	; (8017990 <HAL_PCD_SuspendCallback+0x30>)
 8017982:	f043 0306 	orr.w	r3, r3, #6
 8017986:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017988:	bf00      	nop
 801798a:	3708      	adds	r7, #8
 801798c:	46bd      	mov	sp, r7
 801798e:	bd80      	pop	{r7, pc}
 8017990:	e000ed00 	.word	0xe000ed00

08017994 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017994:	b580      	push	{r7, lr}
 8017996:	b082      	sub	sp, #8
 8017998:	af00      	add	r7, sp, #0
 801799a:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 801799c:	687b      	ldr	r3, [r7, #4]
 801799e:	699b      	ldr	r3, [r3, #24]
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	d007      	beq.n	80179b4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80179a4:	4b08      	ldr	r3, [pc, #32]	; (80179c8 <HAL_PCD_ResumeCallback+0x34>)
 80179a6:	691b      	ldr	r3, [r3, #16]
 80179a8:	4a07      	ldr	r2, [pc, #28]	; (80179c8 <HAL_PCD_ResumeCallback+0x34>)
 80179aa:	f023 0306 	bic.w	r3, r3, #6
 80179ae:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 80179b0:	f000 fb30 	bl	8018014 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 80179ba:	4618      	mov	r0, r3
 80179bc:	f7fe fe33 	bl	8016626 <USBD_LL_Resume>
}
 80179c0:	bf00      	nop
 80179c2:	3708      	adds	r7, #8
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd80      	pop	{r7, pc}
 80179c8:	e000ed00 	.word	0xe000ed00

080179cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80179cc:	b580      	push	{r7, lr}
 80179ce:	b082      	sub	sp, #8
 80179d0:	af00      	add	r7, sp, #0
 80179d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 80179d4:	f7f7 fe40 	bl	800f658 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80179d8:	4a1e      	ldr	r2, [pc, #120]	; (8017a54 <USBD_LL_Init+0x88>)
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	4a1c      	ldr	r2, [pc, #112]	; (8017a54 <USBD_LL_Init+0x88>)
 80179e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 80179e8:	4b1a      	ldr	r3, [pc, #104]	; (8017a54 <USBD_LL_Init+0x88>)
 80179ea:	4a1b      	ldr	r2, [pc, #108]	; (8017a58 <USBD_LL_Init+0x8c>)
 80179ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80179ee:	4b19      	ldr	r3, [pc, #100]	; (8017a54 <USBD_LL_Init+0x88>)
 80179f0:	2208      	movs	r2, #8
 80179f2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80179f4:	4b17      	ldr	r3, [pc, #92]	; (8017a54 <USBD_LL_Init+0x88>)
 80179f6:	2202      	movs	r2, #2
 80179f8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80179fa:	4b16      	ldr	r3, [pc, #88]	; (8017a54 <USBD_LL_Init+0x88>)
 80179fc:	2202      	movs	r2, #2
 80179fe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017a00:	4b14      	ldr	r3, [pc, #80]	; (8017a54 <USBD_LL_Init+0x88>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017a06:	4b13      	ldr	r3, [pc, #76]	; (8017a54 <USBD_LL_Init+0x88>)
 8017a08:	2200      	movs	r2, #0
 8017a0a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017a0c:	4b11      	ldr	r3, [pc, #68]	; (8017a54 <USBD_LL_Init+0x88>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017a12:	4b10      	ldr	r3, [pc, #64]	; (8017a54 <USBD_LL_Init+0x88>)
 8017a14:	2200      	movs	r2, #0
 8017a16:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017a18:	480e      	ldr	r0, [pc, #56]	; (8017a54 <USBD_LL_Init+0x88>)
 8017a1a:	f7f6 f8b8 	bl	800db8e <HAL_PCD_Init>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d001      	beq.n	8017a28 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8017a24:	f7f3 fbf2 	bl	800b20c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a2e:	2318      	movs	r3, #24
 8017a30:	2200      	movs	r2, #0
 8017a32:	2100      	movs	r1, #0
 8017a34:	f7f7 fd2f 	bl	800f496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017a3e:	2358      	movs	r3, #88	; 0x58
 8017a40:	2200      	movs	r2, #0
 8017a42:	2180      	movs	r1, #128	; 0x80
 8017a44:	f7f7 fd27 	bl	800f496 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  return USBD_OK;
 8017a48:	2300      	movs	r3, #0
}
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	3708      	adds	r7, #8
 8017a4e:	46bd      	mov	sp, r7
 8017a50:	bd80      	pop	{r7, pc}
 8017a52:	bf00      	nop
 8017a54:	20003ad4 	.word	0x20003ad4
 8017a58:	40006800 	.word	0x40006800

08017a5c <USBD_LL_Init_CDC>:

/* USER CODE BEGIN */
//LBLeo
USBD_StatusTypeDef USBD_LL_Init_CDC(USBD_HandleTypeDef *pdev)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	b082      	sub	sp, #8
 8017a60:	af00      	add	r7, sp, #0
 8017a62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8017a64:	f7f7 fdf8 	bl	800f658 <HAL_PWREx_EnableVddUSB>
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8017a68:	4a2b      	ldr	r2, [pc, #172]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  pdev->pData = &hpcd_USB_FS;
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	4a29      	ldr	r2, [pc, #164]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8017a78:	4b27      	ldr	r3, [pc, #156]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a7a:	4a28      	ldr	r2, [pc, #160]	; (8017b1c <USBD_LL_Init_CDC+0xc0>)
 8017a7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8017a7e:	4b26      	ldr	r3, [pc, #152]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a80:	2208      	movs	r2, #8
 8017a82:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8017a84:	4b24      	ldr	r3, [pc, #144]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a86:	2202      	movs	r2, #2
 8017a88:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017a8a:	4b23      	ldr	r3, [pc, #140]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a8c:	2202      	movs	r2, #2
 8017a8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8017a90:	4b21      	ldr	r3, [pc, #132]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a92:	2200      	movs	r2, #0
 8017a94:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8017a96:	4b20      	ldr	r3, [pc, #128]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a98:	2200      	movs	r2, #0
 8017a9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8017a9c:	4b1e      	ldr	r3, [pc, #120]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8017aa2:	4b1d      	ldr	r3, [pc, #116]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8017aa8:	481b      	ldr	r0, [pc, #108]	; (8017b18 <USBD_LL_Init_CDC+0xbc>)
 8017aaa:	f7f6 f870 	bl	800db8e <HAL_PCD_Init>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	2b00      	cmp	r3, #0
 8017ab2:	d001      	beq.n	8017ab8 <USBD_LL_Init_CDC+0x5c>
  {
    Error_Handler( );
 8017ab4:	f7f3 fbaa 	bl	800b20c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017abe:	2318      	movs	r3, #24
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	2100      	movs	r1, #0
 8017ac4:	f7f7 fce7 	bl	800f496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017ace:	2358      	movs	r3, #88	; 0x58
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	2180      	movs	r1, #128	; 0x80
 8017ad4:	f7f7 fcdf 	bl	800f496 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8017ad8:	687b      	ldr	r3, [r7, #4]
 8017ada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017ade:	23c0      	movs	r3, #192	; 0xc0
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	2181      	movs	r1, #129	; 0x81
 8017ae4:	f7f7 fcd7 	bl	800f496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017aee:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017af2:	2200      	movs	r2, #0
 8017af4:	2101      	movs	r1, #1
 8017af6:	f7f7 fcce 	bl	800f496 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017b00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017b04:	2200      	movs	r2, #0
 8017b06:	2182      	movs	r1, #130	; 0x82
 8017b08:	f7f7 fcc5 	bl	800f496 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8017b0c:	2300      	movs	r3, #0
}
 8017b0e:	4618      	mov	r0, r3
 8017b10:	3708      	adds	r7, #8
 8017b12:	46bd      	mov	sp, r7
 8017b14:	bd80      	pop	{r7, pc}
 8017b16:	bf00      	nop
 8017b18:	20003ad4 	.word	0x20003ad4
 8017b1c:	40006800 	.word	0x40006800

08017b20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017b20:	b580      	push	{r7, lr}
 8017b22:	b084      	sub	sp, #16
 8017b24:	af00      	add	r7, sp, #0
 8017b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b28:	2300      	movs	r3, #0
 8017b2a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b36:	4618      	mov	r0, r3
 8017b38:	f7f6 f93b 	bl	800ddb2 <HAL_PCD_Start>
 8017b3c:	4603      	mov	r3, r0
 8017b3e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017b40:	7bbb      	ldrb	r3, [r7, #14]
 8017b42:	2b03      	cmp	r3, #3
 8017b44:	d816      	bhi.n	8017b74 <USBD_LL_Start+0x54>
 8017b46:	a201      	add	r2, pc, #4	; (adr r2, 8017b4c <USBD_LL_Start+0x2c>)
 8017b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b4c:	08017b5d 	.word	0x08017b5d
 8017b50:	08017b63 	.word	0x08017b63
 8017b54:	08017b69 	.word	0x08017b69
 8017b58:	08017b6f 	.word	0x08017b6f
    case HAL_OK :
      usb_status = USBD_OK;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8017b60:	e00b      	b.n	8017b7a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017b62:	2303      	movs	r3, #3
 8017b64:	73fb      	strb	r3, [r7, #15]
    break;
 8017b66:	e008      	b.n	8017b7a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017b68:	2301      	movs	r3, #1
 8017b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8017b6c:	e005      	b.n	8017b7a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017b6e:	2303      	movs	r3, #3
 8017b70:	73fb      	strb	r3, [r7, #15]
    break;
 8017b72:	e002      	b.n	8017b7a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8017b74:	2303      	movs	r3, #3
 8017b76:	73fb      	strb	r3, [r7, #15]
    break;
 8017b78:	bf00      	nop
  }
  return usb_status;
 8017b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	3710      	adds	r7, #16
 8017b80:	46bd      	mov	sp, r7
 8017b82:	bd80      	pop	{r7, pc}

08017b84 <USBD_LL_Stop>:
  * @brief  Stops the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Stop(USBD_HandleTypeDef *pdev)
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b084      	sub	sp, #16
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b90:	2300      	movs	r3, #0
 8017b92:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Stop(pdev->pData);
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	f7f6 f92b 	bl	800ddf6 <HAL_PCD_Stop>
 8017ba0:	4603      	mov	r3, r0
 8017ba2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017ba4:	7bbb      	ldrb	r3, [r7, #14]
 8017ba6:	2b03      	cmp	r3, #3
 8017ba8:	d816      	bhi.n	8017bd8 <USBD_LL_Stop+0x54>
 8017baa:	a201      	add	r2, pc, #4	; (adr r2, 8017bb0 <USBD_LL_Stop+0x2c>)
 8017bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017bb0:	08017bc1 	.word	0x08017bc1
 8017bb4:	08017bc7 	.word	0x08017bc7
 8017bb8:	08017bcd 	.word	0x08017bcd
 8017bbc:	08017bd3 	.word	0x08017bd3
    case HAL_OK :
      usb_status = USBD_OK;
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	73fb      	strb	r3, [r7, #15]
    break;
 8017bc4:	e00b      	b.n	8017bde <USBD_LL_Stop+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017bc6:	2303      	movs	r3, #3
 8017bc8:	73fb      	strb	r3, [r7, #15]
    break;
 8017bca:	e008      	b.n	8017bde <USBD_LL_Stop+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017bcc:	2301      	movs	r3, #1
 8017bce:	73fb      	strb	r3, [r7, #15]
    break;
 8017bd0:	e005      	b.n	8017bde <USBD_LL_Stop+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017bd2:	2303      	movs	r3, #3
 8017bd4:	73fb      	strb	r3, [r7, #15]
    break;
 8017bd6:	e002      	b.n	8017bde <USBD_LL_Stop+0x5a>
    default :
      usb_status = USBD_FAIL;
 8017bd8:	2303      	movs	r3, #3
 8017bda:	73fb      	strb	r3, [r7, #15]
    break;
 8017bdc:	bf00      	nop
  }
  return usb_status;
 8017bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8017be0:	4618      	mov	r0, r3
 8017be2:	3710      	adds	r7, #16
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b084      	sub	sp, #16
 8017bec:	af00      	add	r7, sp, #0
 8017bee:	6078      	str	r0, [r7, #4]
 8017bf0:	4608      	mov	r0, r1
 8017bf2:	4611      	mov	r1, r2
 8017bf4:	461a      	mov	r2, r3
 8017bf6:	4603      	mov	r3, r0
 8017bf8:	70fb      	strb	r3, [r7, #3]
 8017bfa:	460b      	mov	r3, r1
 8017bfc:	70bb      	strb	r3, [r7, #2]
 8017bfe:	4613      	mov	r3, r2
 8017c00:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c02:	2300      	movs	r3, #0
 8017c04:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c06:	2300      	movs	r3, #0
 8017c08:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017c10:	78bb      	ldrb	r3, [r7, #2]
 8017c12:	883a      	ldrh	r2, [r7, #0]
 8017c14:	78f9      	ldrb	r1, [r7, #3]
 8017c16:	f7f6 fa83 	bl	800e120 <HAL_PCD_EP_Open>
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017c1e:	7bbb      	ldrb	r3, [r7, #14]
 8017c20:	2b03      	cmp	r3, #3
 8017c22:	d817      	bhi.n	8017c54 <USBD_LL_OpenEP+0x6c>
 8017c24:	a201      	add	r2, pc, #4	; (adr r2, 8017c2c <USBD_LL_OpenEP+0x44>)
 8017c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c2a:	bf00      	nop
 8017c2c:	08017c3d 	.word	0x08017c3d
 8017c30:	08017c43 	.word	0x08017c43
 8017c34:	08017c49 	.word	0x08017c49
 8017c38:	08017c4f 	.word	0x08017c4f
    case HAL_OK :
      usb_status = USBD_OK;
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	73fb      	strb	r3, [r7, #15]
    break;
 8017c40:	e00b      	b.n	8017c5a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017c42:	2303      	movs	r3, #3
 8017c44:	73fb      	strb	r3, [r7, #15]
    break;
 8017c46:	e008      	b.n	8017c5a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017c48:	2301      	movs	r3, #1
 8017c4a:	73fb      	strb	r3, [r7, #15]
    break;
 8017c4c:	e005      	b.n	8017c5a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017c4e:	2303      	movs	r3, #3
 8017c50:	73fb      	strb	r3, [r7, #15]
    break;
 8017c52:	e002      	b.n	8017c5a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8017c54:	2303      	movs	r3, #3
 8017c56:	73fb      	strb	r3, [r7, #15]
    break;
 8017c58:	bf00      	nop
  }
  return usb_status;
 8017c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c5c:	4618      	mov	r0, r3
 8017c5e:	3710      	adds	r7, #16
 8017c60:	46bd      	mov	sp, r7
 8017c62:	bd80      	pop	{r7, pc}

08017c64 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b084      	sub	sp, #16
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
 8017c6c:	460b      	mov	r3, r1
 8017c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017c70:	2300      	movs	r3, #0
 8017c72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017c74:	2300      	movs	r3, #0
 8017c76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017c7e:	78fa      	ldrb	r2, [r7, #3]
 8017c80:	4611      	mov	r1, r2
 8017c82:	4618      	mov	r0, r3
 8017c84:	f7f6 fab2 	bl	800e1ec <HAL_PCD_EP_Close>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017c8c:	7bbb      	ldrb	r3, [r7, #14]
 8017c8e:	2b03      	cmp	r3, #3
 8017c90:	d816      	bhi.n	8017cc0 <USBD_LL_CloseEP+0x5c>
 8017c92:	a201      	add	r2, pc, #4	; (adr r2, 8017c98 <USBD_LL_CloseEP+0x34>)
 8017c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c98:	08017ca9 	.word	0x08017ca9
 8017c9c:	08017caf 	.word	0x08017caf
 8017ca0:	08017cb5 	.word	0x08017cb5
 8017ca4:	08017cbb 	.word	0x08017cbb
    case HAL_OK :
      usb_status = USBD_OK;
 8017ca8:	2300      	movs	r3, #0
 8017caa:	73fb      	strb	r3, [r7, #15]
    break;
 8017cac:	e00b      	b.n	8017cc6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017cae:	2303      	movs	r3, #3
 8017cb0:	73fb      	strb	r3, [r7, #15]
    break;
 8017cb2:	e008      	b.n	8017cc6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017cb4:	2301      	movs	r3, #1
 8017cb6:	73fb      	strb	r3, [r7, #15]
    break;
 8017cb8:	e005      	b.n	8017cc6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017cba:	2303      	movs	r3, #3
 8017cbc:	73fb      	strb	r3, [r7, #15]
    break;
 8017cbe:	e002      	b.n	8017cc6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017cc0:	2303      	movs	r3, #3
 8017cc2:	73fb      	strb	r3, [r7, #15]
    break;
 8017cc4:	bf00      	nop
  }
  return usb_status;
 8017cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8017cc8:	4618      	mov	r0, r3
 8017cca:	3710      	adds	r7, #16
 8017ccc:	46bd      	mov	sp, r7
 8017cce:	bd80      	pop	{r7, pc}

08017cd0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b084      	sub	sp, #16
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	6078      	str	r0, [r7, #4]
 8017cd8:	460b      	mov	r3, r1
 8017cda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017cdc:	2300      	movs	r3, #0
 8017cde:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017cea:	78fa      	ldrb	r2, [r7, #3]
 8017cec:	4611      	mov	r1, r2
 8017cee:	4618      	mov	r0, r3
 8017cf0:	f7f6 fb5c 	bl	800e3ac <HAL_PCD_EP_SetStall>
 8017cf4:	4603      	mov	r3, r0
 8017cf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017cf8:	7bbb      	ldrb	r3, [r7, #14]
 8017cfa:	2b03      	cmp	r3, #3
 8017cfc:	d816      	bhi.n	8017d2c <USBD_LL_StallEP+0x5c>
 8017cfe:	a201      	add	r2, pc, #4	; (adr r2, 8017d04 <USBD_LL_StallEP+0x34>)
 8017d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d04:	08017d15 	.word	0x08017d15
 8017d08:	08017d1b 	.word	0x08017d1b
 8017d0c:	08017d21 	.word	0x08017d21
 8017d10:	08017d27 	.word	0x08017d27
    case HAL_OK :
      usb_status = USBD_OK;
 8017d14:	2300      	movs	r3, #0
 8017d16:	73fb      	strb	r3, [r7, #15]
    break;
 8017d18:	e00b      	b.n	8017d32 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017d1a:	2303      	movs	r3, #3
 8017d1c:	73fb      	strb	r3, [r7, #15]
    break;
 8017d1e:	e008      	b.n	8017d32 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017d20:	2301      	movs	r3, #1
 8017d22:	73fb      	strb	r3, [r7, #15]
    break;
 8017d24:	e005      	b.n	8017d32 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017d26:	2303      	movs	r3, #3
 8017d28:	73fb      	strb	r3, [r7, #15]
    break;
 8017d2a:	e002      	b.n	8017d32 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017d2c:	2303      	movs	r3, #3
 8017d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8017d30:	bf00      	nop
  }
  return usb_status;
 8017d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d34:	4618      	mov	r0, r3
 8017d36:	3710      	adds	r7, #16
 8017d38:	46bd      	mov	sp, r7
 8017d3a:	bd80      	pop	{r7, pc}

08017d3c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017d3c:	b580      	push	{r7, lr}
 8017d3e:	b084      	sub	sp, #16
 8017d40:	af00      	add	r7, sp, #0
 8017d42:	6078      	str	r0, [r7, #4]
 8017d44:	460b      	mov	r3, r1
 8017d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017d56:	78fa      	ldrb	r2, [r7, #3]
 8017d58:	4611      	mov	r1, r2
 8017d5a:	4618      	mov	r0, r3
 8017d5c:	f7f6 fb86 	bl	800e46c <HAL_PCD_EP_ClrStall>
 8017d60:	4603      	mov	r3, r0
 8017d62:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017d64:	7bbb      	ldrb	r3, [r7, #14]
 8017d66:	2b03      	cmp	r3, #3
 8017d68:	d816      	bhi.n	8017d98 <USBD_LL_ClearStallEP+0x5c>
 8017d6a:	a201      	add	r2, pc, #4	; (adr r2, 8017d70 <USBD_LL_ClearStallEP+0x34>)
 8017d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d70:	08017d81 	.word	0x08017d81
 8017d74:	08017d87 	.word	0x08017d87
 8017d78:	08017d8d 	.word	0x08017d8d
 8017d7c:	08017d93 	.word	0x08017d93
    case HAL_OK :
      usb_status = USBD_OK;
 8017d80:	2300      	movs	r3, #0
 8017d82:	73fb      	strb	r3, [r7, #15]
    break;
 8017d84:	e00b      	b.n	8017d9e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017d86:	2303      	movs	r3, #3
 8017d88:	73fb      	strb	r3, [r7, #15]
    break;
 8017d8a:	e008      	b.n	8017d9e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017d8c:	2301      	movs	r3, #1
 8017d8e:	73fb      	strb	r3, [r7, #15]
    break;
 8017d90:	e005      	b.n	8017d9e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017d92:	2303      	movs	r3, #3
 8017d94:	73fb      	strb	r3, [r7, #15]
    break;
 8017d96:	e002      	b.n	8017d9e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8017d98:	2303      	movs	r3, #3
 8017d9a:	73fb      	strb	r3, [r7, #15]
    break;
 8017d9c:	bf00      	nop
  }
  return usb_status;
 8017d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017da0:	4618      	mov	r0, r3
 8017da2:	3710      	adds	r7, #16
 8017da4:	46bd      	mov	sp, r7
 8017da6:	bd80      	pop	{r7, pc}

08017da8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017da8:	b480      	push	{r7}
 8017daa:	b085      	sub	sp, #20
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
 8017db0:	460b      	mov	r3, r1
 8017db2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017dba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017dbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	da0c      	bge.n	8017dde <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017dc4:	78fb      	ldrb	r3, [r7, #3]
 8017dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017dca:	68f9      	ldr	r1, [r7, #12]
 8017dcc:	1c5a      	adds	r2, r3, #1
 8017dce:	4613      	mov	r3, r2
 8017dd0:	009b      	lsls	r3, r3, #2
 8017dd2:	4413      	add	r3, r2
 8017dd4:	00db      	lsls	r3, r3, #3
 8017dd6:	440b      	add	r3, r1
 8017dd8:	3302      	adds	r3, #2
 8017dda:	781b      	ldrb	r3, [r3, #0]
 8017ddc:	e00b      	b.n	8017df6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017dde:	78fb      	ldrb	r3, [r7, #3]
 8017de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017de4:	68f9      	ldr	r1, [r7, #12]
 8017de6:	4613      	mov	r3, r2
 8017de8:	009b      	lsls	r3, r3, #2
 8017dea:	4413      	add	r3, r2
 8017dec:	00db      	lsls	r3, r3, #3
 8017dee:	440b      	add	r3, r1
 8017df0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8017df4:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017df6:	4618      	mov	r0, r3
 8017df8:	3714      	adds	r7, #20
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e00:	4770      	bx	lr
	...

08017e04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b084      	sub	sp, #16
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
 8017e0c:	460b      	mov	r3, r1
 8017e0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e10:	2300      	movs	r3, #0
 8017e12:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e14:	2300      	movs	r3, #0
 8017e16:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017e1e:	78fa      	ldrb	r2, [r7, #3]
 8017e20:	4611      	mov	r1, r2
 8017e22:	4618      	mov	r0, r3
 8017e24:	f7f6 f957 	bl	800e0d6 <HAL_PCD_SetAddress>
 8017e28:	4603      	mov	r3, r0
 8017e2a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8017e2c:	7bbb      	ldrb	r3, [r7, #14]
 8017e2e:	2b03      	cmp	r3, #3
 8017e30:	d816      	bhi.n	8017e60 <USBD_LL_SetUSBAddress+0x5c>
 8017e32:	a201      	add	r2, pc, #4	; (adr r2, 8017e38 <USBD_LL_SetUSBAddress+0x34>)
 8017e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017e38:	08017e49 	.word	0x08017e49
 8017e3c:	08017e4f 	.word	0x08017e4f
 8017e40:	08017e55 	.word	0x08017e55
 8017e44:	08017e5b 	.word	0x08017e5b
    case HAL_OK :
      usb_status = USBD_OK;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8017e4c:	e00b      	b.n	8017e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017e4e:	2303      	movs	r3, #3
 8017e50:	73fb      	strb	r3, [r7, #15]
    break;
 8017e52:	e008      	b.n	8017e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017e54:	2301      	movs	r3, #1
 8017e56:	73fb      	strb	r3, [r7, #15]
    break;
 8017e58:	e005      	b.n	8017e66 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017e5a:	2303      	movs	r3, #3
 8017e5c:	73fb      	strb	r3, [r7, #15]
    break;
 8017e5e:	e002      	b.n	8017e66 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8017e60:	2303      	movs	r3, #3
 8017e62:	73fb      	strb	r3, [r7, #15]
    break;
 8017e64:	bf00      	nop
  }
  return usb_status;
 8017e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e68:	4618      	mov	r0, r3
 8017e6a:	3710      	adds	r7, #16
 8017e6c:	46bd      	mov	sp, r7
 8017e6e:	bd80      	pop	{r7, pc}

08017e70 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b086      	sub	sp, #24
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	607a      	str	r2, [r7, #4]
 8017e7a:	603b      	str	r3, [r7, #0]
 8017e7c:	460b      	mov	r3, r1
 8017e7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017e80:	2300      	movs	r3, #0
 8017e82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017e84:	2300      	movs	r3, #0
 8017e86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017e8e:	7af9      	ldrb	r1, [r7, #11]
 8017e90:	683b      	ldr	r3, [r7, #0]
 8017e92:	687a      	ldr	r2, [r7, #4]
 8017e94:	f7f6 fa47 	bl	800e326 <HAL_PCD_EP_Transmit>
 8017e98:	4603      	mov	r3, r0
 8017e9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8017e9c:	7dbb      	ldrb	r3, [r7, #22]
 8017e9e:	2b03      	cmp	r3, #3
 8017ea0:	d816      	bhi.n	8017ed0 <USBD_LL_Transmit+0x60>
 8017ea2:	a201      	add	r2, pc, #4	; (adr r2, 8017ea8 <USBD_LL_Transmit+0x38>)
 8017ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ea8:	08017eb9 	.word	0x08017eb9
 8017eac:	08017ebf 	.word	0x08017ebf
 8017eb0:	08017ec5 	.word	0x08017ec5
 8017eb4:	08017ecb 	.word	0x08017ecb
    case HAL_OK :
      usb_status = USBD_OK;
 8017eb8:	2300      	movs	r3, #0
 8017eba:	75fb      	strb	r3, [r7, #23]
    break;
 8017ebc:	e00b      	b.n	8017ed6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017ebe:	2303      	movs	r3, #3
 8017ec0:	75fb      	strb	r3, [r7, #23]
    break;
 8017ec2:	e008      	b.n	8017ed6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	75fb      	strb	r3, [r7, #23]
    break;
 8017ec8:	e005      	b.n	8017ed6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017eca:	2303      	movs	r3, #3
 8017ecc:	75fb      	strb	r3, [r7, #23]
    break;
 8017ece:	e002      	b.n	8017ed6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8017ed0:	2303      	movs	r3, #3
 8017ed2:	75fb      	strb	r3, [r7, #23]
    break;
 8017ed4:	bf00      	nop
  }
  return usb_status;
 8017ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ed8:	4618      	mov	r0, r3
 8017eda:	3718      	adds	r7, #24
 8017edc:	46bd      	mov	sp, r7
 8017ede:	bd80      	pop	{r7, pc}

08017ee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017ee0:	b580      	push	{r7, lr}
 8017ee2:	b086      	sub	sp, #24
 8017ee4:	af00      	add	r7, sp, #0
 8017ee6:	60f8      	str	r0, [r7, #12]
 8017ee8:	607a      	str	r2, [r7, #4]
 8017eea:	603b      	str	r3, [r7, #0]
 8017eec:	460b      	mov	r3, r1
 8017eee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8017efe:	7af9      	ldrb	r1, [r7, #11]
 8017f00:	683b      	ldr	r3, [r7, #0]
 8017f02:	687a      	ldr	r2, [r7, #4]
 8017f04:	f7f6 f9ba 	bl	800e27c <HAL_PCD_EP_Receive>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8017f0c:	7dbb      	ldrb	r3, [r7, #22]
 8017f0e:	2b03      	cmp	r3, #3
 8017f10:	d816      	bhi.n	8017f40 <USBD_LL_PrepareReceive+0x60>
 8017f12:	a201      	add	r2, pc, #4	; (adr r2, 8017f18 <USBD_LL_PrepareReceive+0x38>)
 8017f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017f18:	08017f29 	.word	0x08017f29
 8017f1c:	08017f2f 	.word	0x08017f2f
 8017f20:	08017f35 	.word	0x08017f35
 8017f24:	08017f3b 	.word	0x08017f3b
    case HAL_OK :
      usb_status = USBD_OK;
 8017f28:	2300      	movs	r3, #0
 8017f2a:	75fb      	strb	r3, [r7, #23]
    break;
 8017f2c:	e00b      	b.n	8017f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017f2e:	2303      	movs	r3, #3
 8017f30:	75fb      	strb	r3, [r7, #23]
    break;
 8017f32:	e008      	b.n	8017f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017f34:	2301      	movs	r3, #1
 8017f36:	75fb      	strb	r3, [r7, #23]
    break;
 8017f38:	e005      	b.n	8017f46 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017f3a:	2303      	movs	r3, #3
 8017f3c:	75fb      	strb	r3, [r7, #23]
    break;
 8017f3e:	e002      	b.n	8017f46 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8017f40:	2303      	movs	r3, #3
 8017f42:	75fb      	strb	r3, [r7, #23]
    break;
 8017f44:	bf00      	nop
  }
  return usb_status;
 8017f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8017f48:	4618      	mov	r0, r3
 8017f4a:	3718      	adds	r7, #24
 8017f4c:	46bd      	mov	sp, r7
 8017f4e:	bd80      	pop	{r7, pc}

08017f50 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017f50:	b580      	push	{r7, lr}
 8017f52:	b082      	sub	sp, #8
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	460b      	mov	r3, r1
 8017f5a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017f62:	78fa      	ldrb	r2, [r7, #3]
 8017f64:	4611      	mov	r1, r2
 8017f66:	4618      	mov	r0, r3
 8017f68:	f7f6 f9c5 	bl	800e2f6 <HAL_PCD_EP_GetRxCount>
 8017f6c:	4603      	mov	r3, r0
}
 8017f6e:	4618      	mov	r0, r3
 8017f70:	3708      	adds	r7, #8
 8017f72:	46bd      	mov	sp, r7
 8017f74:	bd80      	pop	{r7, pc}
	...

08017f78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b082      	sub	sp, #8
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	6078      	str	r0, [r7, #4]
 8017f80:	460b      	mov	r3, r1
 8017f82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017f84:	78fb      	ldrb	r3, [r7, #3]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d002      	beq.n	8017f90 <HAL_PCDEx_LPM_Callback+0x18>
 8017f8a:	2b01      	cmp	r3, #1
 8017f8c:	d013      	beq.n	8017fb6 <HAL_PCDEx_LPM_Callback+0x3e>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017f8e:	e023      	b.n	8017fd8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	699b      	ldr	r3, [r3, #24]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d007      	beq.n	8017fa8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8017f98:	f000 f83c 	bl	8018014 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017f9c:	4b10      	ldr	r3, [pc, #64]	; (8017fe0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017f9e:	691b      	ldr	r3, [r3, #16]
 8017fa0:	4a0f      	ldr	r2, [pc, #60]	; (8017fe0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017fa2:	f023 0306 	bic.w	r3, r3, #6
 8017fa6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017fae:	4618      	mov	r0, r3
 8017fb0:	f7fe fb39 	bl	8016626 <USBD_LL_Resume>
    break;
 8017fb4:	e010      	b.n	8017fd8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8017fbc:	4618      	mov	r0, r3
 8017fbe:	f7fe fb1c 	bl	80165fa <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	699b      	ldr	r3, [r3, #24]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d005      	beq.n	8017fd6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017fca:	4b05      	ldr	r3, [pc, #20]	; (8017fe0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017fcc:	691b      	ldr	r3, [r3, #16]
 8017fce:	4a04      	ldr	r2, [pc, #16]	; (8017fe0 <HAL_PCDEx_LPM_Callback+0x68>)
 8017fd0:	f043 0306 	orr.w	r3, r3, #6
 8017fd4:	6113      	str	r3, [r2, #16]
    break;
 8017fd6:	bf00      	nop
}
 8017fd8:	bf00      	nop
 8017fda:	3708      	adds	r7, #8
 8017fdc:	46bd      	mov	sp, r7
 8017fde:	bd80      	pop	{r7, pc}
 8017fe0:	e000ed00 	.word	0xe000ed00

08017fe4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017fe4:	b480      	push	{r7}
 8017fe6:	b083      	sub	sp, #12
 8017fe8:	af00      	add	r7, sp, #0
 8017fea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_DFU_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017fec:	4b03      	ldr	r3, [pc, #12]	; (8017ffc <USBD_static_malloc+0x18>)
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	370c      	adds	r7, #12
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff8:	4770      	bx	lr
 8017ffa:	bf00      	nop
 8017ffc:	20000d30 	.word	0x20000d30

08018000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8018000:	b480      	push	{r7}
 8018002:	b083      	sub	sp, #12
 8018004:	af00      	add	r7, sp, #0
 8018006:	6078      	str	r0, [r7, #4]

}
 8018008:	bf00      	nop
 801800a:	370c      	adds	r7, #12
 801800c:	46bd      	mov	sp, r7
 801800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018012:	4770      	bx	lr

08018014 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8018014:	b580      	push	{r7, lr}
 8018016:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8018018:	f7f2 ff82 	bl	800af20 <SystemClock_Config>
}
 801801c:	bf00      	nop
 801801e:	bd80      	pop	{r7, pc}

08018020 <atoi>:
 8018020:	220a      	movs	r2, #10
 8018022:	2100      	movs	r1, #0
 8018024:	f000 be28 	b.w	8018c78 <strtol>

08018028 <__errno>:
 8018028:	4b01      	ldr	r3, [pc, #4]	; (8018030 <__errno+0x8>)
 801802a:	6818      	ldr	r0, [r3, #0]
 801802c:	4770      	bx	lr
 801802e:	bf00      	nop
 8018030:	20000944 	.word	0x20000944

08018034 <__libc_init_array>:
 8018034:	b570      	push	{r4, r5, r6, lr}
 8018036:	4d0d      	ldr	r5, [pc, #52]	; (801806c <__libc_init_array+0x38>)
 8018038:	4c0d      	ldr	r4, [pc, #52]	; (8018070 <__libc_init_array+0x3c>)
 801803a:	1b64      	subs	r4, r4, r5
 801803c:	10a4      	asrs	r4, r4, #2
 801803e:	2600      	movs	r6, #0
 8018040:	42a6      	cmp	r6, r4
 8018042:	d109      	bne.n	8018058 <__libc_init_array+0x24>
 8018044:	4d0b      	ldr	r5, [pc, #44]	; (8018074 <__libc_init_array+0x40>)
 8018046:	4c0c      	ldr	r4, [pc, #48]	; (8018078 <__libc_init_array+0x44>)
 8018048:	f003 fad6 	bl	801b5f8 <_init>
 801804c:	1b64      	subs	r4, r4, r5
 801804e:	10a4      	asrs	r4, r4, #2
 8018050:	2600      	movs	r6, #0
 8018052:	42a6      	cmp	r6, r4
 8018054:	d105      	bne.n	8018062 <__libc_init_array+0x2e>
 8018056:	bd70      	pop	{r4, r5, r6, pc}
 8018058:	f855 3b04 	ldr.w	r3, [r5], #4
 801805c:	4798      	blx	r3
 801805e:	3601      	adds	r6, #1
 8018060:	e7ee      	b.n	8018040 <__libc_init_array+0xc>
 8018062:	f855 3b04 	ldr.w	r3, [r5], #4
 8018066:	4798      	blx	r3
 8018068:	3601      	adds	r6, #1
 801806a:	e7f2      	b.n	8018052 <__libc_init_array+0x1e>
 801806c:	0801d8a8 	.word	0x0801d8a8
 8018070:	0801d8a8 	.word	0x0801d8a8
 8018074:	0801d8a8 	.word	0x0801d8a8
 8018078:	0801d8ac 	.word	0x0801d8ac

0801807c <memcpy>:
 801807c:	440a      	add	r2, r1
 801807e:	4291      	cmp	r1, r2
 8018080:	f100 33ff 	add.w	r3, r0, #4294967295
 8018084:	d100      	bne.n	8018088 <memcpy+0xc>
 8018086:	4770      	bx	lr
 8018088:	b510      	push	{r4, lr}
 801808a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801808e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018092:	4291      	cmp	r1, r2
 8018094:	d1f9      	bne.n	801808a <memcpy+0xe>
 8018096:	bd10      	pop	{r4, pc}

08018098 <memset>:
 8018098:	4402      	add	r2, r0
 801809a:	4603      	mov	r3, r0
 801809c:	4293      	cmp	r3, r2
 801809e:	d100      	bne.n	80180a2 <memset+0xa>
 80180a0:	4770      	bx	lr
 80180a2:	f803 1b01 	strb.w	r1, [r3], #1
 80180a6:	e7f9      	b.n	801809c <memset+0x4>

080180a8 <__cvt>:
 80180a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80180ac:	ec55 4b10 	vmov	r4, r5, d0
 80180b0:	2d00      	cmp	r5, #0
 80180b2:	460e      	mov	r6, r1
 80180b4:	4619      	mov	r1, r3
 80180b6:	462b      	mov	r3, r5
 80180b8:	bfbb      	ittet	lt
 80180ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80180be:	461d      	movlt	r5, r3
 80180c0:	2300      	movge	r3, #0
 80180c2:	232d      	movlt	r3, #45	; 0x2d
 80180c4:	700b      	strb	r3, [r1, #0]
 80180c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80180c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80180cc:	4691      	mov	r9, r2
 80180ce:	f023 0820 	bic.w	r8, r3, #32
 80180d2:	bfbc      	itt	lt
 80180d4:	4622      	movlt	r2, r4
 80180d6:	4614      	movlt	r4, r2
 80180d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80180dc:	d005      	beq.n	80180ea <__cvt+0x42>
 80180de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80180e2:	d100      	bne.n	80180e6 <__cvt+0x3e>
 80180e4:	3601      	adds	r6, #1
 80180e6:	2102      	movs	r1, #2
 80180e8:	e000      	b.n	80180ec <__cvt+0x44>
 80180ea:	2103      	movs	r1, #3
 80180ec:	ab03      	add	r3, sp, #12
 80180ee:	9301      	str	r3, [sp, #4]
 80180f0:	ab02      	add	r3, sp, #8
 80180f2:	9300      	str	r3, [sp, #0]
 80180f4:	ec45 4b10 	vmov	d0, r4, r5
 80180f8:	4653      	mov	r3, sl
 80180fa:	4632      	mov	r2, r6
 80180fc:	f000 fe70 	bl	8018de0 <_dtoa_r>
 8018100:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8018104:	4607      	mov	r7, r0
 8018106:	d102      	bne.n	801810e <__cvt+0x66>
 8018108:	f019 0f01 	tst.w	r9, #1
 801810c:	d022      	beq.n	8018154 <__cvt+0xac>
 801810e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8018112:	eb07 0906 	add.w	r9, r7, r6
 8018116:	d110      	bne.n	801813a <__cvt+0x92>
 8018118:	783b      	ldrb	r3, [r7, #0]
 801811a:	2b30      	cmp	r3, #48	; 0x30
 801811c:	d10a      	bne.n	8018134 <__cvt+0x8c>
 801811e:	2200      	movs	r2, #0
 8018120:	2300      	movs	r3, #0
 8018122:	4620      	mov	r0, r4
 8018124:	4629      	mov	r1, r5
 8018126:	f7e8 fccf 	bl	8000ac8 <__aeabi_dcmpeq>
 801812a:	b918      	cbnz	r0, 8018134 <__cvt+0x8c>
 801812c:	f1c6 0601 	rsb	r6, r6, #1
 8018130:	f8ca 6000 	str.w	r6, [sl]
 8018134:	f8da 3000 	ldr.w	r3, [sl]
 8018138:	4499      	add	r9, r3
 801813a:	2200      	movs	r2, #0
 801813c:	2300      	movs	r3, #0
 801813e:	4620      	mov	r0, r4
 8018140:	4629      	mov	r1, r5
 8018142:	f7e8 fcc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8018146:	b108      	cbz	r0, 801814c <__cvt+0xa4>
 8018148:	f8cd 900c 	str.w	r9, [sp, #12]
 801814c:	2230      	movs	r2, #48	; 0x30
 801814e:	9b03      	ldr	r3, [sp, #12]
 8018150:	454b      	cmp	r3, r9
 8018152:	d307      	bcc.n	8018164 <__cvt+0xbc>
 8018154:	9b03      	ldr	r3, [sp, #12]
 8018156:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018158:	1bdb      	subs	r3, r3, r7
 801815a:	4638      	mov	r0, r7
 801815c:	6013      	str	r3, [r2, #0]
 801815e:	b004      	add	sp, #16
 8018160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018164:	1c59      	adds	r1, r3, #1
 8018166:	9103      	str	r1, [sp, #12]
 8018168:	701a      	strb	r2, [r3, #0]
 801816a:	e7f0      	b.n	801814e <__cvt+0xa6>

0801816c <__exponent>:
 801816c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801816e:	4603      	mov	r3, r0
 8018170:	2900      	cmp	r1, #0
 8018172:	bfb8      	it	lt
 8018174:	4249      	neglt	r1, r1
 8018176:	f803 2b02 	strb.w	r2, [r3], #2
 801817a:	bfb4      	ite	lt
 801817c:	222d      	movlt	r2, #45	; 0x2d
 801817e:	222b      	movge	r2, #43	; 0x2b
 8018180:	2909      	cmp	r1, #9
 8018182:	7042      	strb	r2, [r0, #1]
 8018184:	dd2a      	ble.n	80181dc <__exponent+0x70>
 8018186:	f10d 0407 	add.w	r4, sp, #7
 801818a:	46a4      	mov	ip, r4
 801818c:	270a      	movs	r7, #10
 801818e:	46a6      	mov	lr, r4
 8018190:	460a      	mov	r2, r1
 8018192:	fb91 f6f7 	sdiv	r6, r1, r7
 8018196:	fb07 1516 	mls	r5, r7, r6, r1
 801819a:	3530      	adds	r5, #48	; 0x30
 801819c:	2a63      	cmp	r2, #99	; 0x63
 801819e:	f104 34ff 	add.w	r4, r4, #4294967295
 80181a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80181a6:	4631      	mov	r1, r6
 80181a8:	dcf1      	bgt.n	801818e <__exponent+0x22>
 80181aa:	3130      	adds	r1, #48	; 0x30
 80181ac:	f1ae 0502 	sub.w	r5, lr, #2
 80181b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80181b4:	1c44      	adds	r4, r0, #1
 80181b6:	4629      	mov	r1, r5
 80181b8:	4561      	cmp	r1, ip
 80181ba:	d30a      	bcc.n	80181d2 <__exponent+0x66>
 80181bc:	f10d 0209 	add.w	r2, sp, #9
 80181c0:	eba2 020e 	sub.w	r2, r2, lr
 80181c4:	4565      	cmp	r5, ip
 80181c6:	bf88      	it	hi
 80181c8:	2200      	movhi	r2, #0
 80181ca:	4413      	add	r3, r2
 80181cc:	1a18      	subs	r0, r3, r0
 80181ce:	b003      	add	sp, #12
 80181d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80181d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80181da:	e7ed      	b.n	80181b8 <__exponent+0x4c>
 80181dc:	2330      	movs	r3, #48	; 0x30
 80181de:	3130      	adds	r1, #48	; 0x30
 80181e0:	7083      	strb	r3, [r0, #2]
 80181e2:	70c1      	strb	r1, [r0, #3]
 80181e4:	1d03      	adds	r3, r0, #4
 80181e6:	e7f1      	b.n	80181cc <__exponent+0x60>

080181e8 <_printf_float>:
 80181e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181ec:	ed2d 8b02 	vpush	{d8}
 80181f0:	b08d      	sub	sp, #52	; 0x34
 80181f2:	460c      	mov	r4, r1
 80181f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80181f8:	4616      	mov	r6, r2
 80181fa:	461f      	mov	r7, r3
 80181fc:	4605      	mov	r5, r0
 80181fe:	f001 fce3 	bl	8019bc8 <_localeconv_r>
 8018202:	f8d0 a000 	ldr.w	sl, [r0]
 8018206:	4650      	mov	r0, sl
 8018208:	f7e7 ffe2 	bl	80001d0 <strlen>
 801820c:	2300      	movs	r3, #0
 801820e:	930a      	str	r3, [sp, #40]	; 0x28
 8018210:	6823      	ldr	r3, [r4, #0]
 8018212:	9305      	str	r3, [sp, #20]
 8018214:	f8d8 3000 	ldr.w	r3, [r8]
 8018218:	f894 b018 	ldrb.w	fp, [r4, #24]
 801821c:	3307      	adds	r3, #7
 801821e:	f023 0307 	bic.w	r3, r3, #7
 8018222:	f103 0208 	add.w	r2, r3, #8
 8018226:	f8c8 2000 	str.w	r2, [r8]
 801822a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801822e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8018232:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8018236:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801823a:	9307      	str	r3, [sp, #28]
 801823c:	f8cd 8018 	str.w	r8, [sp, #24]
 8018240:	ee08 0a10 	vmov	s16, r0
 8018244:	4b9f      	ldr	r3, [pc, #636]	; (80184c4 <_printf_float+0x2dc>)
 8018246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801824a:	f04f 32ff 	mov.w	r2, #4294967295
 801824e:	f7e8 fc6d 	bl	8000b2c <__aeabi_dcmpun>
 8018252:	bb88      	cbnz	r0, 80182b8 <_printf_float+0xd0>
 8018254:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018258:	4b9a      	ldr	r3, [pc, #616]	; (80184c4 <_printf_float+0x2dc>)
 801825a:	f04f 32ff 	mov.w	r2, #4294967295
 801825e:	f7e8 fc47 	bl	8000af0 <__aeabi_dcmple>
 8018262:	bb48      	cbnz	r0, 80182b8 <_printf_float+0xd0>
 8018264:	2200      	movs	r2, #0
 8018266:	2300      	movs	r3, #0
 8018268:	4640      	mov	r0, r8
 801826a:	4649      	mov	r1, r9
 801826c:	f7e8 fc36 	bl	8000adc <__aeabi_dcmplt>
 8018270:	b110      	cbz	r0, 8018278 <_printf_float+0x90>
 8018272:	232d      	movs	r3, #45	; 0x2d
 8018274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018278:	4b93      	ldr	r3, [pc, #588]	; (80184c8 <_printf_float+0x2e0>)
 801827a:	4894      	ldr	r0, [pc, #592]	; (80184cc <_printf_float+0x2e4>)
 801827c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8018280:	bf94      	ite	ls
 8018282:	4698      	movls	r8, r3
 8018284:	4680      	movhi	r8, r0
 8018286:	2303      	movs	r3, #3
 8018288:	6123      	str	r3, [r4, #16]
 801828a:	9b05      	ldr	r3, [sp, #20]
 801828c:	f023 0204 	bic.w	r2, r3, #4
 8018290:	6022      	str	r2, [r4, #0]
 8018292:	f04f 0900 	mov.w	r9, #0
 8018296:	9700      	str	r7, [sp, #0]
 8018298:	4633      	mov	r3, r6
 801829a:	aa0b      	add	r2, sp, #44	; 0x2c
 801829c:	4621      	mov	r1, r4
 801829e:	4628      	mov	r0, r5
 80182a0:	f000 f9d8 	bl	8018654 <_printf_common>
 80182a4:	3001      	adds	r0, #1
 80182a6:	f040 8090 	bne.w	80183ca <_printf_float+0x1e2>
 80182aa:	f04f 30ff 	mov.w	r0, #4294967295
 80182ae:	b00d      	add	sp, #52	; 0x34
 80182b0:	ecbd 8b02 	vpop	{d8}
 80182b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182b8:	4642      	mov	r2, r8
 80182ba:	464b      	mov	r3, r9
 80182bc:	4640      	mov	r0, r8
 80182be:	4649      	mov	r1, r9
 80182c0:	f7e8 fc34 	bl	8000b2c <__aeabi_dcmpun>
 80182c4:	b140      	cbz	r0, 80182d8 <_printf_float+0xf0>
 80182c6:	464b      	mov	r3, r9
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	bfbc      	itt	lt
 80182cc:	232d      	movlt	r3, #45	; 0x2d
 80182ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80182d2:	487f      	ldr	r0, [pc, #508]	; (80184d0 <_printf_float+0x2e8>)
 80182d4:	4b7f      	ldr	r3, [pc, #508]	; (80184d4 <_printf_float+0x2ec>)
 80182d6:	e7d1      	b.n	801827c <_printf_float+0x94>
 80182d8:	6863      	ldr	r3, [r4, #4]
 80182da:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80182de:	9206      	str	r2, [sp, #24]
 80182e0:	1c5a      	adds	r2, r3, #1
 80182e2:	d13f      	bne.n	8018364 <_printf_float+0x17c>
 80182e4:	2306      	movs	r3, #6
 80182e6:	6063      	str	r3, [r4, #4]
 80182e8:	9b05      	ldr	r3, [sp, #20]
 80182ea:	6861      	ldr	r1, [r4, #4]
 80182ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80182f0:	2300      	movs	r3, #0
 80182f2:	9303      	str	r3, [sp, #12]
 80182f4:	ab0a      	add	r3, sp, #40	; 0x28
 80182f6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80182fa:	ab09      	add	r3, sp, #36	; 0x24
 80182fc:	ec49 8b10 	vmov	d0, r8, r9
 8018300:	9300      	str	r3, [sp, #0]
 8018302:	6022      	str	r2, [r4, #0]
 8018304:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8018308:	4628      	mov	r0, r5
 801830a:	f7ff fecd 	bl	80180a8 <__cvt>
 801830e:	9b06      	ldr	r3, [sp, #24]
 8018310:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018312:	2b47      	cmp	r3, #71	; 0x47
 8018314:	4680      	mov	r8, r0
 8018316:	d108      	bne.n	801832a <_printf_float+0x142>
 8018318:	1cc8      	adds	r0, r1, #3
 801831a:	db02      	blt.n	8018322 <_printf_float+0x13a>
 801831c:	6863      	ldr	r3, [r4, #4]
 801831e:	4299      	cmp	r1, r3
 8018320:	dd41      	ble.n	80183a6 <_printf_float+0x1be>
 8018322:	f1ab 0b02 	sub.w	fp, fp, #2
 8018326:	fa5f fb8b 	uxtb.w	fp, fp
 801832a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801832e:	d820      	bhi.n	8018372 <_printf_float+0x18a>
 8018330:	3901      	subs	r1, #1
 8018332:	465a      	mov	r2, fp
 8018334:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8018338:	9109      	str	r1, [sp, #36]	; 0x24
 801833a:	f7ff ff17 	bl	801816c <__exponent>
 801833e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018340:	1813      	adds	r3, r2, r0
 8018342:	2a01      	cmp	r2, #1
 8018344:	4681      	mov	r9, r0
 8018346:	6123      	str	r3, [r4, #16]
 8018348:	dc02      	bgt.n	8018350 <_printf_float+0x168>
 801834a:	6822      	ldr	r2, [r4, #0]
 801834c:	07d2      	lsls	r2, r2, #31
 801834e:	d501      	bpl.n	8018354 <_printf_float+0x16c>
 8018350:	3301      	adds	r3, #1
 8018352:	6123      	str	r3, [r4, #16]
 8018354:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8018358:	2b00      	cmp	r3, #0
 801835a:	d09c      	beq.n	8018296 <_printf_float+0xae>
 801835c:	232d      	movs	r3, #45	; 0x2d
 801835e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018362:	e798      	b.n	8018296 <_printf_float+0xae>
 8018364:	9a06      	ldr	r2, [sp, #24]
 8018366:	2a47      	cmp	r2, #71	; 0x47
 8018368:	d1be      	bne.n	80182e8 <_printf_float+0x100>
 801836a:	2b00      	cmp	r3, #0
 801836c:	d1bc      	bne.n	80182e8 <_printf_float+0x100>
 801836e:	2301      	movs	r3, #1
 8018370:	e7b9      	b.n	80182e6 <_printf_float+0xfe>
 8018372:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8018376:	d118      	bne.n	80183aa <_printf_float+0x1c2>
 8018378:	2900      	cmp	r1, #0
 801837a:	6863      	ldr	r3, [r4, #4]
 801837c:	dd0b      	ble.n	8018396 <_printf_float+0x1ae>
 801837e:	6121      	str	r1, [r4, #16]
 8018380:	b913      	cbnz	r3, 8018388 <_printf_float+0x1a0>
 8018382:	6822      	ldr	r2, [r4, #0]
 8018384:	07d0      	lsls	r0, r2, #31
 8018386:	d502      	bpl.n	801838e <_printf_float+0x1a6>
 8018388:	3301      	adds	r3, #1
 801838a:	440b      	add	r3, r1
 801838c:	6123      	str	r3, [r4, #16]
 801838e:	65a1      	str	r1, [r4, #88]	; 0x58
 8018390:	f04f 0900 	mov.w	r9, #0
 8018394:	e7de      	b.n	8018354 <_printf_float+0x16c>
 8018396:	b913      	cbnz	r3, 801839e <_printf_float+0x1b6>
 8018398:	6822      	ldr	r2, [r4, #0]
 801839a:	07d2      	lsls	r2, r2, #31
 801839c:	d501      	bpl.n	80183a2 <_printf_float+0x1ba>
 801839e:	3302      	adds	r3, #2
 80183a0:	e7f4      	b.n	801838c <_printf_float+0x1a4>
 80183a2:	2301      	movs	r3, #1
 80183a4:	e7f2      	b.n	801838c <_printf_float+0x1a4>
 80183a6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80183aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80183ac:	4299      	cmp	r1, r3
 80183ae:	db05      	blt.n	80183bc <_printf_float+0x1d4>
 80183b0:	6823      	ldr	r3, [r4, #0]
 80183b2:	6121      	str	r1, [r4, #16]
 80183b4:	07d8      	lsls	r0, r3, #31
 80183b6:	d5ea      	bpl.n	801838e <_printf_float+0x1a6>
 80183b8:	1c4b      	adds	r3, r1, #1
 80183ba:	e7e7      	b.n	801838c <_printf_float+0x1a4>
 80183bc:	2900      	cmp	r1, #0
 80183be:	bfd4      	ite	le
 80183c0:	f1c1 0202 	rsble	r2, r1, #2
 80183c4:	2201      	movgt	r2, #1
 80183c6:	4413      	add	r3, r2
 80183c8:	e7e0      	b.n	801838c <_printf_float+0x1a4>
 80183ca:	6823      	ldr	r3, [r4, #0]
 80183cc:	055a      	lsls	r2, r3, #21
 80183ce:	d407      	bmi.n	80183e0 <_printf_float+0x1f8>
 80183d0:	6923      	ldr	r3, [r4, #16]
 80183d2:	4642      	mov	r2, r8
 80183d4:	4631      	mov	r1, r6
 80183d6:	4628      	mov	r0, r5
 80183d8:	47b8      	blx	r7
 80183da:	3001      	adds	r0, #1
 80183dc:	d12c      	bne.n	8018438 <_printf_float+0x250>
 80183de:	e764      	b.n	80182aa <_printf_float+0xc2>
 80183e0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80183e4:	f240 80e0 	bls.w	80185a8 <_printf_float+0x3c0>
 80183e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80183ec:	2200      	movs	r2, #0
 80183ee:	2300      	movs	r3, #0
 80183f0:	f7e8 fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80183f4:	2800      	cmp	r0, #0
 80183f6:	d034      	beq.n	8018462 <_printf_float+0x27a>
 80183f8:	4a37      	ldr	r2, [pc, #220]	; (80184d8 <_printf_float+0x2f0>)
 80183fa:	2301      	movs	r3, #1
 80183fc:	4631      	mov	r1, r6
 80183fe:	4628      	mov	r0, r5
 8018400:	47b8      	blx	r7
 8018402:	3001      	adds	r0, #1
 8018404:	f43f af51 	beq.w	80182aa <_printf_float+0xc2>
 8018408:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801840c:	429a      	cmp	r2, r3
 801840e:	db02      	blt.n	8018416 <_printf_float+0x22e>
 8018410:	6823      	ldr	r3, [r4, #0]
 8018412:	07d8      	lsls	r0, r3, #31
 8018414:	d510      	bpl.n	8018438 <_printf_float+0x250>
 8018416:	ee18 3a10 	vmov	r3, s16
 801841a:	4652      	mov	r2, sl
 801841c:	4631      	mov	r1, r6
 801841e:	4628      	mov	r0, r5
 8018420:	47b8      	blx	r7
 8018422:	3001      	adds	r0, #1
 8018424:	f43f af41 	beq.w	80182aa <_printf_float+0xc2>
 8018428:	f04f 0800 	mov.w	r8, #0
 801842c:	f104 091a 	add.w	r9, r4, #26
 8018430:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018432:	3b01      	subs	r3, #1
 8018434:	4543      	cmp	r3, r8
 8018436:	dc09      	bgt.n	801844c <_printf_float+0x264>
 8018438:	6823      	ldr	r3, [r4, #0]
 801843a:	079b      	lsls	r3, r3, #30
 801843c:	f100 8105 	bmi.w	801864a <_printf_float+0x462>
 8018440:	68e0      	ldr	r0, [r4, #12]
 8018442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018444:	4298      	cmp	r0, r3
 8018446:	bfb8      	it	lt
 8018448:	4618      	movlt	r0, r3
 801844a:	e730      	b.n	80182ae <_printf_float+0xc6>
 801844c:	2301      	movs	r3, #1
 801844e:	464a      	mov	r2, r9
 8018450:	4631      	mov	r1, r6
 8018452:	4628      	mov	r0, r5
 8018454:	47b8      	blx	r7
 8018456:	3001      	adds	r0, #1
 8018458:	f43f af27 	beq.w	80182aa <_printf_float+0xc2>
 801845c:	f108 0801 	add.w	r8, r8, #1
 8018460:	e7e6      	b.n	8018430 <_printf_float+0x248>
 8018462:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018464:	2b00      	cmp	r3, #0
 8018466:	dc39      	bgt.n	80184dc <_printf_float+0x2f4>
 8018468:	4a1b      	ldr	r2, [pc, #108]	; (80184d8 <_printf_float+0x2f0>)
 801846a:	2301      	movs	r3, #1
 801846c:	4631      	mov	r1, r6
 801846e:	4628      	mov	r0, r5
 8018470:	47b8      	blx	r7
 8018472:	3001      	adds	r0, #1
 8018474:	f43f af19 	beq.w	80182aa <_printf_float+0xc2>
 8018478:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801847c:	4313      	orrs	r3, r2
 801847e:	d102      	bne.n	8018486 <_printf_float+0x29e>
 8018480:	6823      	ldr	r3, [r4, #0]
 8018482:	07d9      	lsls	r1, r3, #31
 8018484:	d5d8      	bpl.n	8018438 <_printf_float+0x250>
 8018486:	ee18 3a10 	vmov	r3, s16
 801848a:	4652      	mov	r2, sl
 801848c:	4631      	mov	r1, r6
 801848e:	4628      	mov	r0, r5
 8018490:	47b8      	blx	r7
 8018492:	3001      	adds	r0, #1
 8018494:	f43f af09 	beq.w	80182aa <_printf_float+0xc2>
 8018498:	f04f 0900 	mov.w	r9, #0
 801849c:	f104 0a1a 	add.w	sl, r4, #26
 80184a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184a2:	425b      	negs	r3, r3
 80184a4:	454b      	cmp	r3, r9
 80184a6:	dc01      	bgt.n	80184ac <_printf_float+0x2c4>
 80184a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80184aa:	e792      	b.n	80183d2 <_printf_float+0x1ea>
 80184ac:	2301      	movs	r3, #1
 80184ae:	4652      	mov	r2, sl
 80184b0:	4631      	mov	r1, r6
 80184b2:	4628      	mov	r0, r5
 80184b4:	47b8      	blx	r7
 80184b6:	3001      	adds	r0, #1
 80184b8:	f43f aef7 	beq.w	80182aa <_printf_float+0xc2>
 80184bc:	f109 0901 	add.w	r9, r9, #1
 80184c0:	e7ee      	b.n	80184a0 <_printf_float+0x2b8>
 80184c2:	bf00      	nop
 80184c4:	7fefffff 	.word	0x7fefffff
 80184c8:	0801d3c0 	.word	0x0801d3c0
 80184cc:	0801d3c4 	.word	0x0801d3c4
 80184d0:	0801d3cc 	.word	0x0801d3cc
 80184d4:	0801d3c8 	.word	0x0801d3c8
 80184d8:	0801d3d0 	.word	0x0801d3d0
 80184dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80184de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80184e0:	429a      	cmp	r2, r3
 80184e2:	bfa8      	it	ge
 80184e4:	461a      	movge	r2, r3
 80184e6:	2a00      	cmp	r2, #0
 80184e8:	4691      	mov	r9, r2
 80184ea:	dc37      	bgt.n	801855c <_printf_float+0x374>
 80184ec:	f04f 0b00 	mov.w	fp, #0
 80184f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80184f4:	f104 021a 	add.w	r2, r4, #26
 80184f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80184fa:	9305      	str	r3, [sp, #20]
 80184fc:	eba3 0309 	sub.w	r3, r3, r9
 8018500:	455b      	cmp	r3, fp
 8018502:	dc33      	bgt.n	801856c <_printf_float+0x384>
 8018504:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8018508:	429a      	cmp	r2, r3
 801850a:	db3b      	blt.n	8018584 <_printf_float+0x39c>
 801850c:	6823      	ldr	r3, [r4, #0]
 801850e:	07da      	lsls	r2, r3, #31
 8018510:	d438      	bmi.n	8018584 <_printf_float+0x39c>
 8018512:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018514:	9b05      	ldr	r3, [sp, #20]
 8018516:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018518:	1ad3      	subs	r3, r2, r3
 801851a:	eba2 0901 	sub.w	r9, r2, r1
 801851e:	4599      	cmp	r9, r3
 8018520:	bfa8      	it	ge
 8018522:	4699      	movge	r9, r3
 8018524:	f1b9 0f00 	cmp.w	r9, #0
 8018528:	dc35      	bgt.n	8018596 <_printf_float+0x3ae>
 801852a:	f04f 0800 	mov.w	r8, #0
 801852e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018532:	f104 0a1a 	add.w	sl, r4, #26
 8018536:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801853a:	1a9b      	subs	r3, r3, r2
 801853c:	eba3 0309 	sub.w	r3, r3, r9
 8018540:	4543      	cmp	r3, r8
 8018542:	f77f af79 	ble.w	8018438 <_printf_float+0x250>
 8018546:	2301      	movs	r3, #1
 8018548:	4652      	mov	r2, sl
 801854a:	4631      	mov	r1, r6
 801854c:	4628      	mov	r0, r5
 801854e:	47b8      	blx	r7
 8018550:	3001      	adds	r0, #1
 8018552:	f43f aeaa 	beq.w	80182aa <_printf_float+0xc2>
 8018556:	f108 0801 	add.w	r8, r8, #1
 801855a:	e7ec      	b.n	8018536 <_printf_float+0x34e>
 801855c:	4613      	mov	r3, r2
 801855e:	4631      	mov	r1, r6
 8018560:	4642      	mov	r2, r8
 8018562:	4628      	mov	r0, r5
 8018564:	47b8      	blx	r7
 8018566:	3001      	adds	r0, #1
 8018568:	d1c0      	bne.n	80184ec <_printf_float+0x304>
 801856a:	e69e      	b.n	80182aa <_printf_float+0xc2>
 801856c:	2301      	movs	r3, #1
 801856e:	4631      	mov	r1, r6
 8018570:	4628      	mov	r0, r5
 8018572:	9205      	str	r2, [sp, #20]
 8018574:	47b8      	blx	r7
 8018576:	3001      	adds	r0, #1
 8018578:	f43f ae97 	beq.w	80182aa <_printf_float+0xc2>
 801857c:	9a05      	ldr	r2, [sp, #20]
 801857e:	f10b 0b01 	add.w	fp, fp, #1
 8018582:	e7b9      	b.n	80184f8 <_printf_float+0x310>
 8018584:	ee18 3a10 	vmov	r3, s16
 8018588:	4652      	mov	r2, sl
 801858a:	4631      	mov	r1, r6
 801858c:	4628      	mov	r0, r5
 801858e:	47b8      	blx	r7
 8018590:	3001      	adds	r0, #1
 8018592:	d1be      	bne.n	8018512 <_printf_float+0x32a>
 8018594:	e689      	b.n	80182aa <_printf_float+0xc2>
 8018596:	9a05      	ldr	r2, [sp, #20]
 8018598:	464b      	mov	r3, r9
 801859a:	4442      	add	r2, r8
 801859c:	4631      	mov	r1, r6
 801859e:	4628      	mov	r0, r5
 80185a0:	47b8      	blx	r7
 80185a2:	3001      	adds	r0, #1
 80185a4:	d1c1      	bne.n	801852a <_printf_float+0x342>
 80185a6:	e680      	b.n	80182aa <_printf_float+0xc2>
 80185a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80185aa:	2a01      	cmp	r2, #1
 80185ac:	dc01      	bgt.n	80185b2 <_printf_float+0x3ca>
 80185ae:	07db      	lsls	r3, r3, #31
 80185b0:	d538      	bpl.n	8018624 <_printf_float+0x43c>
 80185b2:	2301      	movs	r3, #1
 80185b4:	4642      	mov	r2, r8
 80185b6:	4631      	mov	r1, r6
 80185b8:	4628      	mov	r0, r5
 80185ba:	47b8      	blx	r7
 80185bc:	3001      	adds	r0, #1
 80185be:	f43f ae74 	beq.w	80182aa <_printf_float+0xc2>
 80185c2:	ee18 3a10 	vmov	r3, s16
 80185c6:	4652      	mov	r2, sl
 80185c8:	4631      	mov	r1, r6
 80185ca:	4628      	mov	r0, r5
 80185cc:	47b8      	blx	r7
 80185ce:	3001      	adds	r0, #1
 80185d0:	f43f ae6b 	beq.w	80182aa <_printf_float+0xc2>
 80185d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80185d8:	2200      	movs	r2, #0
 80185da:	2300      	movs	r3, #0
 80185dc:	f7e8 fa74 	bl	8000ac8 <__aeabi_dcmpeq>
 80185e0:	b9d8      	cbnz	r0, 801861a <_printf_float+0x432>
 80185e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80185e4:	f108 0201 	add.w	r2, r8, #1
 80185e8:	3b01      	subs	r3, #1
 80185ea:	4631      	mov	r1, r6
 80185ec:	4628      	mov	r0, r5
 80185ee:	47b8      	blx	r7
 80185f0:	3001      	adds	r0, #1
 80185f2:	d10e      	bne.n	8018612 <_printf_float+0x42a>
 80185f4:	e659      	b.n	80182aa <_printf_float+0xc2>
 80185f6:	2301      	movs	r3, #1
 80185f8:	4652      	mov	r2, sl
 80185fa:	4631      	mov	r1, r6
 80185fc:	4628      	mov	r0, r5
 80185fe:	47b8      	blx	r7
 8018600:	3001      	adds	r0, #1
 8018602:	f43f ae52 	beq.w	80182aa <_printf_float+0xc2>
 8018606:	f108 0801 	add.w	r8, r8, #1
 801860a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801860c:	3b01      	subs	r3, #1
 801860e:	4543      	cmp	r3, r8
 8018610:	dcf1      	bgt.n	80185f6 <_printf_float+0x40e>
 8018612:	464b      	mov	r3, r9
 8018614:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018618:	e6dc      	b.n	80183d4 <_printf_float+0x1ec>
 801861a:	f04f 0800 	mov.w	r8, #0
 801861e:	f104 0a1a 	add.w	sl, r4, #26
 8018622:	e7f2      	b.n	801860a <_printf_float+0x422>
 8018624:	2301      	movs	r3, #1
 8018626:	4642      	mov	r2, r8
 8018628:	e7df      	b.n	80185ea <_printf_float+0x402>
 801862a:	2301      	movs	r3, #1
 801862c:	464a      	mov	r2, r9
 801862e:	4631      	mov	r1, r6
 8018630:	4628      	mov	r0, r5
 8018632:	47b8      	blx	r7
 8018634:	3001      	adds	r0, #1
 8018636:	f43f ae38 	beq.w	80182aa <_printf_float+0xc2>
 801863a:	f108 0801 	add.w	r8, r8, #1
 801863e:	68e3      	ldr	r3, [r4, #12]
 8018640:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8018642:	1a5b      	subs	r3, r3, r1
 8018644:	4543      	cmp	r3, r8
 8018646:	dcf0      	bgt.n	801862a <_printf_float+0x442>
 8018648:	e6fa      	b.n	8018440 <_printf_float+0x258>
 801864a:	f04f 0800 	mov.w	r8, #0
 801864e:	f104 0919 	add.w	r9, r4, #25
 8018652:	e7f4      	b.n	801863e <_printf_float+0x456>

08018654 <_printf_common>:
 8018654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018658:	4616      	mov	r6, r2
 801865a:	4699      	mov	r9, r3
 801865c:	688a      	ldr	r2, [r1, #8]
 801865e:	690b      	ldr	r3, [r1, #16]
 8018660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018664:	4293      	cmp	r3, r2
 8018666:	bfb8      	it	lt
 8018668:	4613      	movlt	r3, r2
 801866a:	6033      	str	r3, [r6, #0]
 801866c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018670:	4607      	mov	r7, r0
 8018672:	460c      	mov	r4, r1
 8018674:	b10a      	cbz	r2, 801867a <_printf_common+0x26>
 8018676:	3301      	adds	r3, #1
 8018678:	6033      	str	r3, [r6, #0]
 801867a:	6823      	ldr	r3, [r4, #0]
 801867c:	0699      	lsls	r1, r3, #26
 801867e:	bf42      	ittt	mi
 8018680:	6833      	ldrmi	r3, [r6, #0]
 8018682:	3302      	addmi	r3, #2
 8018684:	6033      	strmi	r3, [r6, #0]
 8018686:	6825      	ldr	r5, [r4, #0]
 8018688:	f015 0506 	ands.w	r5, r5, #6
 801868c:	d106      	bne.n	801869c <_printf_common+0x48>
 801868e:	f104 0a19 	add.w	sl, r4, #25
 8018692:	68e3      	ldr	r3, [r4, #12]
 8018694:	6832      	ldr	r2, [r6, #0]
 8018696:	1a9b      	subs	r3, r3, r2
 8018698:	42ab      	cmp	r3, r5
 801869a:	dc26      	bgt.n	80186ea <_printf_common+0x96>
 801869c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80186a0:	1e13      	subs	r3, r2, #0
 80186a2:	6822      	ldr	r2, [r4, #0]
 80186a4:	bf18      	it	ne
 80186a6:	2301      	movne	r3, #1
 80186a8:	0692      	lsls	r2, r2, #26
 80186aa:	d42b      	bmi.n	8018704 <_printf_common+0xb0>
 80186ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80186b0:	4649      	mov	r1, r9
 80186b2:	4638      	mov	r0, r7
 80186b4:	47c0      	blx	r8
 80186b6:	3001      	adds	r0, #1
 80186b8:	d01e      	beq.n	80186f8 <_printf_common+0xa4>
 80186ba:	6823      	ldr	r3, [r4, #0]
 80186bc:	68e5      	ldr	r5, [r4, #12]
 80186be:	6832      	ldr	r2, [r6, #0]
 80186c0:	f003 0306 	and.w	r3, r3, #6
 80186c4:	2b04      	cmp	r3, #4
 80186c6:	bf08      	it	eq
 80186c8:	1aad      	subeq	r5, r5, r2
 80186ca:	68a3      	ldr	r3, [r4, #8]
 80186cc:	6922      	ldr	r2, [r4, #16]
 80186ce:	bf0c      	ite	eq
 80186d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80186d4:	2500      	movne	r5, #0
 80186d6:	4293      	cmp	r3, r2
 80186d8:	bfc4      	itt	gt
 80186da:	1a9b      	subgt	r3, r3, r2
 80186dc:	18ed      	addgt	r5, r5, r3
 80186de:	2600      	movs	r6, #0
 80186e0:	341a      	adds	r4, #26
 80186e2:	42b5      	cmp	r5, r6
 80186e4:	d11a      	bne.n	801871c <_printf_common+0xc8>
 80186e6:	2000      	movs	r0, #0
 80186e8:	e008      	b.n	80186fc <_printf_common+0xa8>
 80186ea:	2301      	movs	r3, #1
 80186ec:	4652      	mov	r2, sl
 80186ee:	4649      	mov	r1, r9
 80186f0:	4638      	mov	r0, r7
 80186f2:	47c0      	blx	r8
 80186f4:	3001      	adds	r0, #1
 80186f6:	d103      	bne.n	8018700 <_printf_common+0xac>
 80186f8:	f04f 30ff 	mov.w	r0, #4294967295
 80186fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018700:	3501      	adds	r5, #1
 8018702:	e7c6      	b.n	8018692 <_printf_common+0x3e>
 8018704:	18e1      	adds	r1, r4, r3
 8018706:	1c5a      	adds	r2, r3, #1
 8018708:	2030      	movs	r0, #48	; 0x30
 801870a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801870e:	4422      	add	r2, r4
 8018710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018718:	3302      	adds	r3, #2
 801871a:	e7c7      	b.n	80186ac <_printf_common+0x58>
 801871c:	2301      	movs	r3, #1
 801871e:	4622      	mov	r2, r4
 8018720:	4649      	mov	r1, r9
 8018722:	4638      	mov	r0, r7
 8018724:	47c0      	blx	r8
 8018726:	3001      	adds	r0, #1
 8018728:	d0e6      	beq.n	80186f8 <_printf_common+0xa4>
 801872a:	3601      	adds	r6, #1
 801872c:	e7d9      	b.n	80186e2 <_printf_common+0x8e>
	...

08018730 <_printf_i>:
 8018730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018734:	460c      	mov	r4, r1
 8018736:	4691      	mov	r9, r2
 8018738:	7e27      	ldrb	r7, [r4, #24]
 801873a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801873c:	2f78      	cmp	r7, #120	; 0x78
 801873e:	4680      	mov	r8, r0
 8018740:	469a      	mov	sl, r3
 8018742:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018746:	d807      	bhi.n	8018758 <_printf_i+0x28>
 8018748:	2f62      	cmp	r7, #98	; 0x62
 801874a:	d80a      	bhi.n	8018762 <_printf_i+0x32>
 801874c:	2f00      	cmp	r7, #0
 801874e:	f000 80d8 	beq.w	8018902 <_printf_i+0x1d2>
 8018752:	2f58      	cmp	r7, #88	; 0x58
 8018754:	f000 80a3 	beq.w	801889e <_printf_i+0x16e>
 8018758:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801875c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018760:	e03a      	b.n	80187d8 <_printf_i+0xa8>
 8018762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018766:	2b15      	cmp	r3, #21
 8018768:	d8f6      	bhi.n	8018758 <_printf_i+0x28>
 801876a:	a001      	add	r0, pc, #4	; (adr r0, 8018770 <_printf_i+0x40>)
 801876c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8018770:	080187c9 	.word	0x080187c9
 8018774:	080187dd 	.word	0x080187dd
 8018778:	08018759 	.word	0x08018759
 801877c:	08018759 	.word	0x08018759
 8018780:	08018759 	.word	0x08018759
 8018784:	08018759 	.word	0x08018759
 8018788:	080187dd 	.word	0x080187dd
 801878c:	08018759 	.word	0x08018759
 8018790:	08018759 	.word	0x08018759
 8018794:	08018759 	.word	0x08018759
 8018798:	08018759 	.word	0x08018759
 801879c:	080188e9 	.word	0x080188e9
 80187a0:	0801880d 	.word	0x0801880d
 80187a4:	080188cb 	.word	0x080188cb
 80187a8:	08018759 	.word	0x08018759
 80187ac:	08018759 	.word	0x08018759
 80187b0:	0801890b 	.word	0x0801890b
 80187b4:	08018759 	.word	0x08018759
 80187b8:	0801880d 	.word	0x0801880d
 80187bc:	08018759 	.word	0x08018759
 80187c0:	08018759 	.word	0x08018759
 80187c4:	080188d3 	.word	0x080188d3
 80187c8:	680b      	ldr	r3, [r1, #0]
 80187ca:	1d1a      	adds	r2, r3, #4
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	600a      	str	r2, [r1, #0]
 80187d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80187d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80187d8:	2301      	movs	r3, #1
 80187da:	e0a3      	b.n	8018924 <_printf_i+0x1f4>
 80187dc:	6825      	ldr	r5, [r4, #0]
 80187de:	6808      	ldr	r0, [r1, #0]
 80187e0:	062e      	lsls	r6, r5, #24
 80187e2:	f100 0304 	add.w	r3, r0, #4
 80187e6:	d50a      	bpl.n	80187fe <_printf_i+0xce>
 80187e8:	6805      	ldr	r5, [r0, #0]
 80187ea:	600b      	str	r3, [r1, #0]
 80187ec:	2d00      	cmp	r5, #0
 80187ee:	da03      	bge.n	80187f8 <_printf_i+0xc8>
 80187f0:	232d      	movs	r3, #45	; 0x2d
 80187f2:	426d      	negs	r5, r5
 80187f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80187f8:	485e      	ldr	r0, [pc, #376]	; (8018974 <_printf_i+0x244>)
 80187fa:	230a      	movs	r3, #10
 80187fc:	e019      	b.n	8018832 <_printf_i+0x102>
 80187fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8018802:	6805      	ldr	r5, [r0, #0]
 8018804:	600b      	str	r3, [r1, #0]
 8018806:	bf18      	it	ne
 8018808:	b22d      	sxthne	r5, r5
 801880a:	e7ef      	b.n	80187ec <_printf_i+0xbc>
 801880c:	680b      	ldr	r3, [r1, #0]
 801880e:	6825      	ldr	r5, [r4, #0]
 8018810:	1d18      	adds	r0, r3, #4
 8018812:	6008      	str	r0, [r1, #0]
 8018814:	0628      	lsls	r0, r5, #24
 8018816:	d501      	bpl.n	801881c <_printf_i+0xec>
 8018818:	681d      	ldr	r5, [r3, #0]
 801881a:	e002      	b.n	8018822 <_printf_i+0xf2>
 801881c:	0669      	lsls	r1, r5, #25
 801881e:	d5fb      	bpl.n	8018818 <_printf_i+0xe8>
 8018820:	881d      	ldrh	r5, [r3, #0]
 8018822:	4854      	ldr	r0, [pc, #336]	; (8018974 <_printf_i+0x244>)
 8018824:	2f6f      	cmp	r7, #111	; 0x6f
 8018826:	bf0c      	ite	eq
 8018828:	2308      	moveq	r3, #8
 801882a:	230a      	movne	r3, #10
 801882c:	2100      	movs	r1, #0
 801882e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018832:	6866      	ldr	r6, [r4, #4]
 8018834:	60a6      	str	r6, [r4, #8]
 8018836:	2e00      	cmp	r6, #0
 8018838:	bfa2      	ittt	ge
 801883a:	6821      	ldrge	r1, [r4, #0]
 801883c:	f021 0104 	bicge.w	r1, r1, #4
 8018840:	6021      	strge	r1, [r4, #0]
 8018842:	b90d      	cbnz	r5, 8018848 <_printf_i+0x118>
 8018844:	2e00      	cmp	r6, #0
 8018846:	d04d      	beq.n	80188e4 <_printf_i+0x1b4>
 8018848:	4616      	mov	r6, r2
 801884a:	fbb5 f1f3 	udiv	r1, r5, r3
 801884e:	fb03 5711 	mls	r7, r3, r1, r5
 8018852:	5dc7      	ldrb	r7, [r0, r7]
 8018854:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018858:	462f      	mov	r7, r5
 801885a:	42bb      	cmp	r3, r7
 801885c:	460d      	mov	r5, r1
 801885e:	d9f4      	bls.n	801884a <_printf_i+0x11a>
 8018860:	2b08      	cmp	r3, #8
 8018862:	d10b      	bne.n	801887c <_printf_i+0x14c>
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	07df      	lsls	r7, r3, #31
 8018868:	d508      	bpl.n	801887c <_printf_i+0x14c>
 801886a:	6923      	ldr	r3, [r4, #16]
 801886c:	6861      	ldr	r1, [r4, #4]
 801886e:	4299      	cmp	r1, r3
 8018870:	bfde      	ittt	le
 8018872:	2330      	movle	r3, #48	; 0x30
 8018874:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018878:	f106 36ff 	addle.w	r6, r6, #4294967295
 801887c:	1b92      	subs	r2, r2, r6
 801887e:	6122      	str	r2, [r4, #16]
 8018880:	f8cd a000 	str.w	sl, [sp]
 8018884:	464b      	mov	r3, r9
 8018886:	aa03      	add	r2, sp, #12
 8018888:	4621      	mov	r1, r4
 801888a:	4640      	mov	r0, r8
 801888c:	f7ff fee2 	bl	8018654 <_printf_common>
 8018890:	3001      	adds	r0, #1
 8018892:	d14c      	bne.n	801892e <_printf_i+0x1fe>
 8018894:	f04f 30ff 	mov.w	r0, #4294967295
 8018898:	b004      	add	sp, #16
 801889a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801889e:	4835      	ldr	r0, [pc, #212]	; (8018974 <_printf_i+0x244>)
 80188a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80188a4:	6823      	ldr	r3, [r4, #0]
 80188a6:	680e      	ldr	r6, [r1, #0]
 80188a8:	061f      	lsls	r7, r3, #24
 80188aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80188ae:	600e      	str	r6, [r1, #0]
 80188b0:	d514      	bpl.n	80188dc <_printf_i+0x1ac>
 80188b2:	07d9      	lsls	r1, r3, #31
 80188b4:	bf44      	itt	mi
 80188b6:	f043 0320 	orrmi.w	r3, r3, #32
 80188ba:	6023      	strmi	r3, [r4, #0]
 80188bc:	b91d      	cbnz	r5, 80188c6 <_printf_i+0x196>
 80188be:	6823      	ldr	r3, [r4, #0]
 80188c0:	f023 0320 	bic.w	r3, r3, #32
 80188c4:	6023      	str	r3, [r4, #0]
 80188c6:	2310      	movs	r3, #16
 80188c8:	e7b0      	b.n	801882c <_printf_i+0xfc>
 80188ca:	6823      	ldr	r3, [r4, #0]
 80188cc:	f043 0320 	orr.w	r3, r3, #32
 80188d0:	6023      	str	r3, [r4, #0]
 80188d2:	2378      	movs	r3, #120	; 0x78
 80188d4:	4828      	ldr	r0, [pc, #160]	; (8018978 <_printf_i+0x248>)
 80188d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80188da:	e7e3      	b.n	80188a4 <_printf_i+0x174>
 80188dc:	065e      	lsls	r6, r3, #25
 80188de:	bf48      	it	mi
 80188e0:	b2ad      	uxthmi	r5, r5
 80188e2:	e7e6      	b.n	80188b2 <_printf_i+0x182>
 80188e4:	4616      	mov	r6, r2
 80188e6:	e7bb      	b.n	8018860 <_printf_i+0x130>
 80188e8:	680b      	ldr	r3, [r1, #0]
 80188ea:	6826      	ldr	r6, [r4, #0]
 80188ec:	6960      	ldr	r0, [r4, #20]
 80188ee:	1d1d      	adds	r5, r3, #4
 80188f0:	600d      	str	r5, [r1, #0]
 80188f2:	0635      	lsls	r5, r6, #24
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	d501      	bpl.n	80188fc <_printf_i+0x1cc>
 80188f8:	6018      	str	r0, [r3, #0]
 80188fa:	e002      	b.n	8018902 <_printf_i+0x1d2>
 80188fc:	0671      	lsls	r1, r6, #25
 80188fe:	d5fb      	bpl.n	80188f8 <_printf_i+0x1c8>
 8018900:	8018      	strh	r0, [r3, #0]
 8018902:	2300      	movs	r3, #0
 8018904:	6123      	str	r3, [r4, #16]
 8018906:	4616      	mov	r6, r2
 8018908:	e7ba      	b.n	8018880 <_printf_i+0x150>
 801890a:	680b      	ldr	r3, [r1, #0]
 801890c:	1d1a      	adds	r2, r3, #4
 801890e:	600a      	str	r2, [r1, #0]
 8018910:	681e      	ldr	r6, [r3, #0]
 8018912:	6862      	ldr	r2, [r4, #4]
 8018914:	2100      	movs	r1, #0
 8018916:	4630      	mov	r0, r6
 8018918:	f7e7 fc62 	bl	80001e0 <memchr>
 801891c:	b108      	cbz	r0, 8018922 <_printf_i+0x1f2>
 801891e:	1b80      	subs	r0, r0, r6
 8018920:	6060      	str	r0, [r4, #4]
 8018922:	6863      	ldr	r3, [r4, #4]
 8018924:	6123      	str	r3, [r4, #16]
 8018926:	2300      	movs	r3, #0
 8018928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801892c:	e7a8      	b.n	8018880 <_printf_i+0x150>
 801892e:	6923      	ldr	r3, [r4, #16]
 8018930:	4632      	mov	r2, r6
 8018932:	4649      	mov	r1, r9
 8018934:	4640      	mov	r0, r8
 8018936:	47d0      	blx	sl
 8018938:	3001      	adds	r0, #1
 801893a:	d0ab      	beq.n	8018894 <_printf_i+0x164>
 801893c:	6823      	ldr	r3, [r4, #0]
 801893e:	079b      	lsls	r3, r3, #30
 8018940:	d413      	bmi.n	801896a <_printf_i+0x23a>
 8018942:	68e0      	ldr	r0, [r4, #12]
 8018944:	9b03      	ldr	r3, [sp, #12]
 8018946:	4298      	cmp	r0, r3
 8018948:	bfb8      	it	lt
 801894a:	4618      	movlt	r0, r3
 801894c:	e7a4      	b.n	8018898 <_printf_i+0x168>
 801894e:	2301      	movs	r3, #1
 8018950:	4632      	mov	r2, r6
 8018952:	4649      	mov	r1, r9
 8018954:	4640      	mov	r0, r8
 8018956:	47d0      	blx	sl
 8018958:	3001      	adds	r0, #1
 801895a:	d09b      	beq.n	8018894 <_printf_i+0x164>
 801895c:	3501      	adds	r5, #1
 801895e:	68e3      	ldr	r3, [r4, #12]
 8018960:	9903      	ldr	r1, [sp, #12]
 8018962:	1a5b      	subs	r3, r3, r1
 8018964:	42ab      	cmp	r3, r5
 8018966:	dcf2      	bgt.n	801894e <_printf_i+0x21e>
 8018968:	e7eb      	b.n	8018942 <_printf_i+0x212>
 801896a:	2500      	movs	r5, #0
 801896c:	f104 0619 	add.w	r6, r4, #25
 8018970:	e7f5      	b.n	801895e <_printf_i+0x22e>
 8018972:	bf00      	nop
 8018974:	0801d3d2 	.word	0x0801d3d2
 8018978:	0801d3e3 	.word	0x0801d3e3

0801897c <srand>:
 801897c:	b538      	push	{r3, r4, r5, lr}
 801897e:	4b10      	ldr	r3, [pc, #64]	; (80189c0 <srand+0x44>)
 8018980:	681d      	ldr	r5, [r3, #0]
 8018982:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8018984:	4604      	mov	r4, r0
 8018986:	b9b3      	cbnz	r3, 80189b6 <srand+0x3a>
 8018988:	2018      	movs	r0, #24
 801898a:	f001 f925 	bl	8019bd8 <malloc>
 801898e:	4602      	mov	r2, r0
 8018990:	63a8      	str	r0, [r5, #56]	; 0x38
 8018992:	b920      	cbnz	r0, 801899e <srand+0x22>
 8018994:	4b0b      	ldr	r3, [pc, #44]	; (80189c4 <srand+0x48>)
 8018996:	480c      	ldr	r0, [pc, #48]	; (80189c8 <srand+0x4c>)
 8018998:	2142      	movs	r1, #66	; 0x42
 801899a:	f000 f977 	bl	8018c8c <__assert_func>
 801899e:	490b      	ldr	r1, [pc, #44]	; (80189cc <srand+0x50>)
 80189a0:	4b0b      	ldr	r3, [pc, #44]	; (80189d0 <srand+0x54>)
 80189a2:	e9c0 1300 	strd	r1, r3, [r0]
 80189a6:	4b0b      	ldr	r3, [pc, #44]	; (80189d4 <srand+0x58>)
 80189a8:	6083      	str	r3, [r0, #8]
 80189aa:	230b      	movs	r3, #11
 80189ac:	8183      	strh	r3, [r0, #12]
 80189ae:	2100      	movs	r1, #0
 80189b0:	2001      	movs	r0, #1
 80189b2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80189b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80189b8:	2200      	movs	r2, #0
 80189ba:	611c      	str	r4, [r3, #16]
 80189bc:	615a      	str	r2, [r3, #20]
 80189be:	bd38      	pop	{r3, r4, r5, pc}
 80189c0:	20000944 	.word	0x20000944
 80189c4:	0801d3f4 	.word	0x0801d3f4
 80189c8:	0801d40b 	.word	0x0801d40b
 80189cc:	abcd330e 	.word	0xabcd330e
 80189d0:	e66d1234 	.word	0xe66d1234
 80189d4:	0005deec 	.word	0x0005deec

080189d8 <rand>:
 80189d8:	4b17      	ldr	r3, [pc, #92]	; (8018a38 <rand+0x60>)
 80189da:	b510      	push	{r4, lr}
 80189dc:	681c      	ldr	r4, [r3, #0]
 80189de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80189e0:	b9b3      	cbnz	r3, 8018a10 <rand+0x38>
 80189e2:	2018      	movs	r0, #24
 80189e4:	f001 f8f8 	bl	8019bd8 <malloc>
 80189e8:	63a0      	str	r0, [r4, #56]	; 0x38
 80189ea:	b928      	cbnz	r0, 80189f8 <rand+0x20>
 80189ec:	4602      	mov	r2, r0
 80189ee:	4b13      	ldr	r3, [pc, #76]	; (8018a3c <rand+0x64>)
 80189f0:	4813      	ldr	r0, [pc, #76]	; (8018a40 <rand+0x68>)
 80189f2:	214e      	movs	r1, #78	; 0x4e
 80189f4:	f000 f94a 	bl	8018c8c <__assert_func>
 80189f8:	4a12      	ldr	r2, [pc, #72]	; (8018a44 <rand+0x6c>)
 80189fa:	4b13      	ldr	r3, [pc, #76]	; (8018a48 <rand+0x70>)
 80189fc:	e9c0 2300 	strd	r2, r3, [r0]
 8018a00:	4b12      	ldr	r3, [pc, #72]	; (8018a4c <rand+0x74>)
 8018a02:	6083      	str	r3, [r0, #8]
 8018a04:	230b      	movs	r3, #11
 8018a06:	8183      	strh	r3, [r0, #12]
 8018a08:	2201      	movs	r2, #1
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8018a10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018a12:	480f      	ldr	r0, [pc, #60]	; (8018a50 <rand+0x78>)
 8018a14:	690a      	ldr	r2, [r1, #16]
 8018a16:	694b      	ldr	r3, [r1, #20]
 8018a18:	4c0e      	ldr	r4, [pc, #56]	; (8018a54 <rand+0x7c>)
 8018a1a:	4350      	muls	r0, r2
 8018a1c:	fb04 0003 	mla	r0, r4, r3, r0
 8018a20:	fba2 3404 	umull	r3, r4, r2, r4
 8018a24:	1c5a      	adds	r2, r3, #1
 8018a26:	4404      	add	r4, r0
 8018a28:	f144 0000 	adc.w	r0, r4, #0
 8018a2c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8018a30:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8018a34:	bd10      	pop	{r4, pc}
 8018a36:	bf00      	nop
 8018a38:	20000944 	.word	0x20000944
 8018a3c:	0801d3f4 	.word	0x0801d3f4
 8018a40:	0801d40b 	.word	0x0801d40b
 8018a44:	abcd330e 	.word	0xabcd330e
 8018a48:	e66d1234 	.word	0xe66d1234
 8018a4c:	0005deec 	.word	0x0005deec
 8018a50:	5851f42d 	.word	0x5851f42d
 8018a54:	4c957f2d 	.word	0x4c957f2d

08018a58 <siprintf>:
 8018a58:	b40e      	push	{r1, r2, r3}
 8018a5a:	b500      	push	{lr}
 8018a5c:	b09c      	sub	sp, #112	; 0x70
 8018a5e:	ab1d      	add	r3, sp, #116	; 0x74
 8018a60:	9002      	str	r0, [sp, #8]
 8018a62:	9006      	str	r0, [sp, #24]
 8018a64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8018a68:	4809      	ldr	r0, [pc, #36]	; (8018a90 <siprintf+0x38>)
 8018a6a:	9107      	str	r1, [sp, #28]
 8018a6c:	9104      	str	r1, [sp, #16]
 8018a6e:	4909      	ldr	r1, [pc, #36]	; (8018a94 <siprintf+0x3c>)
 8018a70:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a74:	9105      	str	r1, [sp, #20]
 8018a76:	6800      	ldr	r0, [r0, #0]
 8018a78:	9301      	str	r3, [sp, #4]
 8018a7a:	a902      	add	r1, sp, #8
 8018a7c:	f001 fd48 	bl	801a510 <_svfiprintf_r>
 8018a80:	9b02      	ldr	r3, [sp, #8]
 8018a82:	2200      	movs	r2, #0
 8018a84:	701a      	strb	r2, [r3, #0]
 8018a86:	b01c      	add	sp, #112	; 0x70
 8018a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a8c:	b003      	add	sp, #12
 8018a8e:	4770      	bx	lr
 8018a90:	20000944 	.word	0x20000944
 8018a94:	ffff0208 	.word	0xffff0208

08018a98 <strcat>:
 8018a98:	b510      	push	{r4, lr}
 8018a9a:	4602      	mov	r2, r0
 8018a9c:	7814      	ldrb	r4, [r2, #0]
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	3201      	adds	r2, #1
 8018aa2:	2c00      	cmp	r4, #0
 8018aa4:	d1fa      	bne.n	8018a9c <strcat+0x4>
 8018aa6:	3b01      	subs	r3, #1
 8018aa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018aac:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018ab0:	2a00      	cmp	r2, #0
 8018ab2:	d1f9      	bne.n	8018aa8 <strcat+0x10>
 8018ab4:	bd10      	pop	{r4, pc}
	...

08018ab8 <strtok>:
 8018ab8:	4b16      	ldr	r3, [pc, #88]	; (8018b14 <strtok+0x5c>)
 8018aba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018abc:	681e      	ldr	r6, [r3, #0]
 8018abe:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8018ac0:	4605      	mov	r5, r0
 8018ac2:	b9fc      	cbnz	r4, 8018b04 <strtok+0x4c>
 8018ac4:	2050      	movs	r0, #80	; 0x50
 8018ac6:	9101      	str	r1, [sp, #4]
 8018ac8:	f001 f886 	bl	8019bd8 <malloc>
 8018acc:	9901      	ldr	r1, [sp, #4]
 8018ace:	65b0      	str	r0, [r6, #88]	; 0x58
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	b920      	cbnz	r0, 8018ade <strtok+0x26>
 8018ad4:	4b10      	ldr	r3, [pc, #64]	; (8018b18 <strtok+0x60>)
 8018ad6:	4811      	ldr	r0, [pc, #68]	; (8018b1c <strtok+0x64>)
 8018ad8:	2157      	movs	r1, #87	; 0x57
 8018ada:	f000 f8d7 	bl	8018c8c <__assert_func>
 8018ade:	e9c0 4400 	strd	r4, r4, [r0]
 8018ae2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8018ae6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8018aea:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8018aee:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8018af2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8018af6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8018afa:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8018afe:	6184      	str	r4, [r0, #24]
 8018b00:	7704      	strb	r4, [r0, #28]
 8018b02:	6244      	str	r4, [r0, #36]	; 0x24
 8018b04:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8018b06:	2301      	movs	r3, #1
 8018b08:	4628      	mov	r0, r5
 8018b0a:	b002      	add	sp, #8
 8018b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018b10:	f000 b806 	b.w	8018b20 <__strtok_r>
 8018b14:	20000944 	.word	0x20000944
 8018b18:	0801d3f4 	.word	0x0801d3f4
 8018b1c:	0801d46a 	.word	0x0801d46a

08018b20 <__strtok_r>:
 8018b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018b22:	b908      	cbnz	r0, 8018b28 <__strtok_r+0x8>
 8018b24:	6810      	ldr	r0, [r2, #0]
 8018b26:	b188      	cbz	r0, 8018b4c <__strtok_r+0x2c>
 8018b28:	4604      	mov	r4, r0
 8018b2a:	4620      	mov	r0, r4
 8018b2c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8018b30:	460f      	mov	r7, r1
 8018b32:	f817 6b01 	ldrb.w	r6, [r7], #1
 8018b36:	b91e      	cbnz	r6, 8018b40 <__strtok_r+0x20>
 8018b38:	b965      	cbnz	r5, 8018b54 <__strtok_r+0x34>
 8018b3a:	6015      	str	r5, [r2, #0]
 8018b3c:	4628      	mov	r0, r5
 8018b3e:	e005      	b.n	8018b4c <__strtok_r+0x2c>
 8018b40:	42b5      	cmp	r5, r6
 8018b42:	d1f6      	bne.n	8018b32 <__strtok_r+0x12>
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d1f0      	bne.n	8018b2a <__strtok_r+0xa>
 8018b48:	6014      	str	r4, [r2, #0]
 8018b4a:	7003      	strb	r3, [r0, #0]
 8018b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018b4e:	461c      	mov	r4, r3
 8018b50:	e00c      	b.n	8018b6c <__strtok_r+0x4c>
 8018b52:	b915      	cbnz	r5, 8018b5a <__strtok_r+0x3a>
 8018b54:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018b58:	460e      	mov	r6, r1
 8018b5a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8018b5e:	42ab      	cmp	r3, r5
 8018b60:	d1f7      	bne.n	8018b52 <__strtok_r+0x32>
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d0f3      	beq.n	8018b4e <__strtok_r+0x2e>
 8018b66:	2300      	movs	r3, #0
 8018b68:	f804 3c01 	strb.w	r3, [r4, #-1]
 8018b6c:	6014      	str	r4, [r2, #0]
 8018b6e:	e7ed      	b.n	8018b4c <__strtok_r+0x2c>

08018b70 <_strtol_l.isra.0>:
 8018b70:	2b01      	cmp	r3, #1
 8018b72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b76:	d001      	beq.n	8018b7c <_strtol_l.isra.0+0xc>
 8018b78:	2b24      	cmp	r3, #36	; 0x24
 8018b7a:	d906      	bls.n	8018b8a <_strtol_l.isra.0+0x1a>
 8018b7c:	f7ff fa54 	bl	8018028 <__errno>
 8018b80:	2316      	movs	r3, #22
 8018b82:	6003      	str	r3, [r0, #0]
 8018b84:	2000      	movs	r0, #0
 8018b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b8a:	4f3a      	ldr	r7, [pc, #232]	; (8018c74 <_strtol_l.isra.0+0x104>)
 8018b8c:	468e      	mov	lr, r1
 8018b8e:	4676      	mov	r6, lr
 8018b90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018b94:	5de5      	ldrb	r5, [r4, r7]
 8018b96:	f015 0508 	ands.w	r5, r5, #8
 8018b9a:	d1f8      	bne.n	8018b8e <_strtol_l.isra.0+0x1e>
 8018b9c:	2c2d      	cmp	r4, #45	; 0x2d
 8018b9e:	d134      	bne.n	8018c0a <_strtol_l.isra.0+0x9a>
 8018ba0:	f89e 4000 	ldrb.w	r4, [lr]
 8018ba4:	f04f 0801 	mov.w	r8, #1
 8018ba8:	f106 0e02 	add.w	lr, r6, #2
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d05c      	beq.n	8018c6a <_strtol_l.isra.0+0xfa>
 8018bb0:	2b10      	cmp	r3, #16
 8018bb2:	d10c      	bne.n	8018bce <_strtol_l.isra.0+0x5e>
 8018bb4:	2c30      	cmp	r4, #48	; 0x30
 8018bb6:	d10a      	bne.n	8018bce <_strtol_l.isra.0+0x5e>
 8018bb8:	f89e 4000 	ldrb.w	r4, [lr]
 8018bbc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8018bc0:	2c58      	cmp	r4, #88	; 0x58
 8018bc2:	d14d      	bne.n	8018c60 <_strtol_l.isra.0+0xf0>
 8018bc4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8018bc8:	2310      	movs	r3, #16
 8018bca:	f10e 0e02 	add.w	lr, lr, #2
 8018bce:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8018bd2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018bd6:	2600      	movs	r6, #0
 8018bd8:	fbbc f9f3 	udiv	r9, ip, r3
 8018bdc:	4635      	mov	r5, r6
 8018bde:	fb03 ca19 	mls	sl, r3, r9, ip
 8018be2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018be6:	2f09      	cmp	r7, #9
 8018be8:	d818      	bhi.n	8018c1c <_strtol_l.isra.0+0xac>
 8018bea:	463c      	mov	r4, r7
 8018bec:	42a3      	cmp	r3, r4
 8018bee:	dd24      	ble.n	8018c3a <_strtol_l.isra.0+0xca>
 8018bf0:	2e00      	cmp	r6, #0
 8018bf2:	db1f      	blt.n	8018c34 <_strtol_l.isra.0+0xc4>
 8018bf4:	45a9      	cmp	r9, r5
 8018bf6:	d31d      	bcc.n	8018c34 <_strtol_l.isra.0+0xc4>
 8018bf8:	d101      	bne.n	8018bfe <_strtol_l.isra.0+0x8e>
 8018bfa:	45a2      	cmp	sl, r4
 8018bfc:	db1a      	blt.n	8018c34 <_strtol_l.isra.0+0xc4>
 8018bfe:	fb05 4503 	mla	r5, r5, r3, r4
 8018c02:	2601      	movs	r6, #1
 8018c04:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8018c08:	e7eb      	b.n	8018be2 <_strtol_l.isra.0+0x72>
 8018c0a:	2c2b      	cmp	r4, #43	; 0x2b
 8018c0c:	bf08      	it	eq
 8018c0e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8018c12:	46a8      	mov	r8, r5
 8018c14:	bf08      	it	eq
 8018c16:	f106 0e02 	addeq.w	lr, r6, #2
 8018c1a:	e7c7      	b.n	8018bac <_strtol_l.isra.0+0x3c>
 8018c1c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8018c20:	2f19      	cmp	r7, #25
 8018c22:	d801      	bhi.n	8018c28 <_strtol_l.isra.0+0xb8>
 8018c24:	3c37      	subs	r4, #55	; 0x37
 8018c26:	e7e1      	b.n	8018bec <_strtol_l.isra.0+0x7c>
 8018c28:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018c2c:	2f19      	cmp	r7, #25
 8018c2e:	d804      	bhi.n	8018c3a <_strtol_l.isra.0+0xca>
 8018c30:	3c57      	subs	r4, #87	; 0x57
 8018c32:	e7db      	b.n	8018bec <_strtol_l.isra.0+0x7c>
 8018c34:	f04f 36ff 	mov.w	r6, #4294967295
 8018c38:	e7e4      	b.n	8018c04 <_strtol_l.isra.0+0x94>
 8018c3a:	2e00      	cmp	r6, #0
 8018c3c:	da05      	bge.n	8018c4a <_strtol_l.isra.0+0xda>
 8018c3e:	2322      	movs	r3, #34	; 0x22
 8018c40:	6003      	str	r3, [r0, #0]
 8018c42:	4665      	mov	r5, ip
 8018c44:	b942      	cbnz	r2, 8018c58 <_strtol_l.isra.0+0xe8>
 8018c46:	4628      	mov	r0, r5
 8018c48:	e79d      	b.n	8018b86 <_strtol_l.isra.0+0x16>
 8018c4a:	f1b8 0f00 	cmp.w	r8, #0
 8018c4e:	d000      	beq.n	8018c52 <_strtol_l.isra.0+0xe2>
 8018c50:	426d      	negs	r5, r5
 8018c52:	2a00      	cmp	r2, #0
 8018c54:	d0f7      	beq.n	8018c46 <_strtol_l.isra.0+0xd6>
 8018c56:	b10e      	cbz	r6, 8018c5c <_strtol_l.isra.0+0xec>
 8018c58:	f10e 31ff 	add.w	r1, lr, #4294967295
 8018c5c:	6011      	str	r1, [r2, #0]
 8018c5e:	e7f2      	b.n	8018c46 <_strtol_l.isra.0+0xd6>
 8018c60:	2430      	movs	r4, #48	; 0x30
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	d1b3      	bne.n	8018bce <_strtol_l.isra.0+0x5e>
 8018c66:	2308      	movs	r3, #8
 8018c68:	e7b1      	b.n	8018bce <_strtol_l.isra.0+0x5e>
 8018c6a:	2c30      	cmp	r4, #48	; 0x30
 8018c6c:	d0a4      	beq.n	8018bb8 <_strtol_l.isra.0+0x48>
 8018c6e:	230a      	movs	r3, #10
 8018c70:	e7ad      	b.n	8018bce <_strtol_l.isra.0+0x5e>
 8018c72:	bf00      	nop
 8018c74:	0801d508 	.word	0x0801d508

08018c78 <strtol>:
 8018c78:	4613      	mov	r3, r2
 8018c7a:	460a      	mov	r2, r1
 8018c7c:	4601      	mov	r1, r0
 8018c7e:	4802      	ldr	r0, [pc, #8]	; (8018c88 <strtol+0x10>)
 8018c80:	6800      	ldr	r0, [r0, #0]
 8018c82:	f7ff bf75 	b.w	8018b70 <_strtol_l.isra.0>
 8018c86:	bf00      	nop
 8018c88:	20000944 	.word	0x20000944

08018c8c <__assert_func>:
 8018c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c8e:	4614      	mov	r4, r2
 8018c90:	461a      	mov	r2, r3
 8018c92:	4b09      	ldr	r3, [pc, #36]	; (8018cb8 <__assert_func+0x2c>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4605      	mov	r5, r0
 8018c98:	68d8      	ldr	r0, [r3, #12]
 8018c9a:	b14c      	cbz	r4, 8018cb0 <__assert_func+0x24>
 8018c9c:	4b07      	ldr	r3, [pc, #28]	; (8018cbc <__assert_func+0x30>)
 8018c9e:	9100      	str	r1, [sp, #0]
 8018ca0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018ca4:	4906      	ldr	r1, [pc, #24]	; (8018cc0 <__assert_func+0x34>)
 8018ca6:	462b      	mov	r3, r5
 8018ca8:	f000 ff5c 	bl	8019b64 <fiprintf>
 8018cac:	f001 ffb0 	bl	801ac10 <abort>
 8018cb0:	4b04      	ldr	r3, [pc, #16]	; (8018cc4 <__assert_func+0x38>)
 8018cb2:	461c      	mov	r4, r3
 8018cb4:	e7f3      	b.n	8018c9e <__assert_func+0x12>
 8018cb6:	bf00      	nop
 8018cb8:	20000944 	.word	0x20000944
 8018cbc:	0801d4cb 	.word	0x0801d4cb
 8018cc0:	0801d4d8 	.word	0x0801d4d8
 8018cc4:	0801d506 	.word	0x0801d506

08018cc8 <quorem>:
 8018cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ccc:	6903      	ldr	r3, [r0, #16]
 8018cce:	690c      	ldr	r4, [r1, #16]
 8018cd0:	42a3      	cmp	r3, r4
 8018cd2:	4607      	mov	r7, r0
 8018cd4:	f2c0 8081 	blt.w	8018dda <quorem+0x112>
 8018cd8:	3c01      	subs	r4, #1
 8018cda:	f101 0814 	add.w	r8, r1, #20
 8018cde:	f100 0514 	add.w	r5, r0, #20
 8018ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018ce6:	9301      	str	r3, [sp, #4]
 8018ce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018cf0:	3301      	adds	r3, #1
 8018cf2:	429a      	cmp	r2, r3
 8018cf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018cf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018cfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8018d00:	d331      	bcc.n	8018d66 <quorem+0x9e>
 8018d02:	f04f 0e00 	mov.w	lr, #0
 8018d06:	4640      	mov	r0, r8
 8018d08:	46ac      	mov	ip, r5
 8018d0a:	46f2      	mov	sl, lr
 8018d0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8018d10:	b293      	uxth	r3, r2
 8018d12:	fb06 e303 	mla	r3, r6, r3, lr
 8018d16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8018d1a:	b29b      	uxth	r3, r3
 8018d1c:	ebaa 0303 	sub.w	r3, sl, r3
 8018d20:	0c12      	lsrs	r2, r2, #16
 8018d22:	f8dc a000 	ldr.w	sl, [ip]
 8018d26:	fb06 e202 	mla	r2, r6, r2, lr
 8018d2a:	fa13 f38a 	uxtah	r3, r3, sl
 8018d2e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018d32:	fa1f fa82 	uxth.w	sl, r2
 8018d36:	f8dc 2000 	ldr.w	r2, [ip]
 8018d3a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8018d3e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d42:	b29b      	uxth	r3, r3
 8018d44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d48:	4581      	cmp	r9, r0
 8018d4a:	f84c 3b04 	str.w	r3, [ip], #4
 8018d4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018d52:	d2db      	bcs.n	8018d0c <quorem+0x44>
 8018d54:	f855 300b 	ldr.w	r3, [r5, fp]
 8018d58:	b92b      	cbnz	r3, 8018d66 <quorem+0x9e>
 8018d5a:	9b01      	ldr	r3, [sp, #4]
 8018d5c:	3b04      	subs	r3, #4
 8018d5e:	429d      	cmp	r5, r3
 8018d60:	461a      	mov	r2, r3
 8018d62:	d32e      	bcc.n	8018dc2 <quorem+0xfa>
 8018d64:	613c      	str	r4, [r7, #16]
 8018d66:	4638      	mov	r0, r7
 8018d68:	f001 f9bc 	bl	801a0e4 <__mcmp>
 8018d6c:	2800      	cmp	r0, #0
 8018d6e:	db24      	blt.n	8018dba <quorem+0xf2>
 8018d70:	3601      	adds	r6, #1
 8018d72:	4628      	mov	r0, r5
 8018d74:	f04f 0c00 	mov.w	ip, #0
 8018d78:	f858 2b04 	ldr.w	r2, [r8], #4
 8018d7c:	f8d0 e000 	ldr.w	lr, [r0]
 8018d80:	b293      	uxth	r3, r2
 8018d82:	ebac 0303 	sub.w	r3, ip, r3
 8018d86:	0c12      	lsrs	r2, r2, #16
 8018d88:	fa13 f38e 	uxtah	r3, r3, lr
 8018d8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8018d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018d94:	b29b      	uxth	r3, r3
 8018d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018d9a:	45c1      	cmp	r9, r8
 8018d9c:	f840 3b04 	str.w	r3, [r0], #4
 8018da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018da4:	d2e8      	bcs.n	8018d78 <quorem+0xb0>
 8018da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018dae:	b922      	cbnz	r2, 8018dba <quorem+0xf2>
 8018db0:	3b04      	subs	r3, #4
 8018db2:	429d      	cmp	r5, r3
 8018db4:	461a      	mov	r2, r3
 8018db6:	d30a      	bcc.n	8018dce <quorem+0x106>
 8018db8:	613c      	str	r4, [r7, #16]
 8018dba:	4630      	mov	r0, r6
 8018dbc:	b003      	add	sp, #12
 8018dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018dc2:	6812      	ldr	r2, [r2, #0]
 8018dc4:	3b04      	subs	r3, #4
 8018dc6:	2a00      	cmp	r2, #0
 8018dc8:	d1cc      	bne.n	8018d64 <quorem+0x9c>
 8018dca:	3c01      	subs	r4, #1
 8018dcc:	e7c7      	b.n	8018d5e <quorem+0x96>
 8018dce:	6812      	ldr	r2, [r2, #0]
 8018dd0:	3b04      	subs	r3, #4
 8018dd2:	2a00      	cmp	r2, #0
 8018dd4:	d1f0      	bne.n	8018db8 <quorem+0xf0>
 8018dd6:	3c01      	subs	r4, #1
 8018dd8:	e7eb      	b.n	8018db2 <quorem+0xea>
 8018dda:	2000      	movs	r0, #0
 8018ddc:	e7ee      	b.n	8018dbc <quorem+0xf4>
	...

08018de0 <_dtoa_r>:
 8018de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018de4:	ed2d 8b02 	vpush	{d8}
 8018de8:	ec57 6b10 	vmov	r6, r7, d0
 8018dec:	b095      	sub	sp, #84	; 0x54
 8018dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018df0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018df4:	9105      	str	r1, [sp, #20]
 8018df6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8018dfa:	4604      	mov	r4, r0
 8018dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8018dfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8018e00:	b975      	cbnz	r5, 8018e20 <_dtoa_r+0x40>
 8018e02:	2010      	movs	r0, #16
 8018e04:	f000 fee8 	bl	8019bd8 <malloc>
 8018e08:	4602      	mov	r2, r0
 8018e0a:	6260      	str	r0, [r4, #36]	; 0x24
 8018e0c:	b920      	cbnz	r0, 8018e18 <_dtoa_r+0x38>
 8018e0e:	4bb2      	ldr	r3, [pc, #712]	; (80190d8 <_dtoa_r+0x2f8>)
 8018e10:	21ea      	movs	r1, #234	; 0xea
 8018e12:	48b2      	ldr	r0, [pc, #712]	; (80190dc <_dtoa_r+0x2fc>)
 8018e14:	f7ff ff3a 	bl	8018c8c <__assert_func>
 8018e18:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018e1c:	6005      	str	r5, [r0, #0]
 8018e1e:	60c5      	str	r5, [r0, #12]
 8018e20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e22:	6819      	ldr	r1, [r3, #0]
 8018e24:	b151      	cbz	r1, 8018e3c <_dtoa_r+0x5c>
 8018e26:	685a      	ldr	r2, [r3, #4]
 8018e28:	604a      	str	r2, [r1, #4]
 8018e2a:	2301      	movs	r3, #1
 8018e2c:	4093      	lsls	r3, r2
 8018e2e:	608b      	str	r3, [r1, #8]
 8018e30:	4620      	mov	r0, r4
 8018e32:	f000 ff19 	bl	8019c68 <_Bfree>
 8018e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018e38:	2200      	movs	r2, #0
 8018e3a:	601a      	str	r2, [r3, #0]
 8018e3c:	1e3b      	subs	r3, r7, #0
 8018e3e:	bfb9      	ittee	lt
 8018e40:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018e44:	9303      	strlt	r3, [sp, #12]
 8018e46:	2300      	movge	r3, #0
 8018e48:	f8c8 3000 	strge.w	r3, [r8]
 8018e4c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8018e50:	4ba3      	ldr	r3, [pc, #652]	; (80190e0 <_dtoa_r+0x300>)
 8018e52:	bfbc      	itt	lt
 8018e54:	2201      	movlt	r2, #1
 8018e56:	f8c8 2000 	strlt.w	r2, [r8]
 8018e5a:	ea33 0309 	bics.w	r3, r3, r9
 8018e5e:	d11b      	bne.n	8018e98 <_dtoa_r+0xb8>
 8018e60:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018e62:	f242 730f 	movw	r3, #9999	; 0x270f
 8018e66:	6013      	str	r3, [r2, #0]
 8018e68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018e6c:	4333      	orrs	r3, r6
 8018e6e:	f000 857a 	beq.w	8019966 <_dtoa_r+0xb86>
 8018e72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e74:	b963      	cbnz	r3, 8018e90 <_dtoa_r+0xb0>
 8018e76:	4b9b      	ldr	r3, [pc, #620]	; (80190e4 <_dtoa_r+0x304>)
 8018e78:	e024      	b.n	8018ec4 <_dtoa_r+0xe4>
 8018e7a:	4b9b      	ldr	r3, [pc, #620]	; (80190e8 <_dtoa_r+0x308>)
 8018e7c:	9300      	str	r3, [sp, #0]
 8018e7e:	3308      	adds	r3, #8
 8018e80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018e82:	6013      	str	r3, [r2, #0]
 8018e84:	9800      	ldr	r0, [sp, #0]
 8018e86:	b015      	add	sp, #84	; 0x54
 8018e88:	ecbd 8b02 	vpop	{d8}
 8018e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e90:	4b94      	ldr	r3, [pc, #592]	; (80190e4 <_dtoa_r+0x304>)
 8018e92:	9300      	str	r3, [sp, #0]
 8018e94:	3303      	adds	r3, #3
 8018e96:	e7f3      	b.n	8018e80 <_dtoa_r+0xa0>
 8018e98:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018e9c:	2200      	movs	r2, #0
 8018e9e:	ec51 0b17 	vmov	r0, r1, d7
 8018ea2:	2300      	movs	r3, #0
 8018ea4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018ea8:	f7e7 fe0e 	bl	8000ac8 <__aeabi_dcmpeq>
 8018eac:	4680      	mov	r8, r0
 8018eae:	b158      	cbz	r0, 8018ec8 <_dtoa_r+0xe8>
 8018eb0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018eb2:	2301      	movs	r3, #1
 8018eb4:	6013      	str	r3, [r2, #0]
 8018eb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	f000 8551 	beq.w	8019960 <_dtoa_r+0xb80>
 8018ebe:	488b      	ldr	r0, [pc, #556]	; (80190ec <_dtoa_r+0x30c>)
 8018ec0:	6018      	str	r0, [r3, #0]
 8018ec2:	1e43      	subs	r3, r0, #1
 8018ec4:	9300      	str	r3, [sp, #0]
 8018ec6:	e7dd      	b.n	8018e84 <_dtoa_r+0xa4>
 8018ec8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8018ecc:	aa12      	add	r2, sp, #72	; 0x48
 8018ece:	a913      	add	r1, sp, #76	; 0x4c
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	f001 f9ab 	bl	801a22c <__d2b>
 8018ed6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018eda:	4683      	mov	fp, r0
 8018edc:	2d00      	cmp	r5, #0
 8018ede:	d07c      	beq.n	8018fda <_dtoa_r+0x1fa>
 8018ee0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018ee2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8018eea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8018eee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018ef2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018ef6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8018efa:	4b7d      	ldr	r3, [pc, #500]	; (80190f0 <_dtoa_r+0x310>)
 8018efc:	2200      	movs	r2, #0
 8018efe:	4630      	mov	r0, r6
 8018f00:	4639      	mov	r1, r7
 8018f02:	f7e7 f9c1 	bl	8000288 <__aeabi_dsub>
 8018f06:	a36e      	add	r3, pc, #440	; (adr r3, 80190c0 <_dtoa_r+0x2e0>)
 8018f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f0c:	f7e7 fb74 	bl	80005f8 <__aeabi_dmul>
 8018f10:	a36d      	add	r3, pc, #436	; (adr r3, 80190c8 <_dtoa_r+0x2e8>)
 8018f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f16:	f7e7 f9b9 	bl	800028c <__adddf3>
 8018f1a:	4606      	mov	r6, r0
 8018f1c:	4628      	mov	r0, r5
 8018f1e:	460f      	mov	r7, r1
 8018f20:	f7e7 fb00 	bl	8000524 <__aeabi_i2d>
 8018f24:	a36a      	add	r3, pc, #424	; (adr r3, 80190d0 <_dtoa_r+0x2f0>)
 8018f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f2a:	f7e7 fb65 	bl	80005f8 <__aeabi_dmul>
 8018f2e:	4602      	mov	r2, r0
 8018f30:	460b      	mov	r3, r1
 8018f32:	4630      	mov	r0, r6
 8018f34:	4639      	mov	r1, r7
 8018f36:	f7e7 f9a9 	bl	800028c <__adddf3>
 8018f3a:	4606      	mov	r6, r0
 8018f3c:	460f      	mov	r7, r1
 8018f3e:	f7e7 fe0b 	bl	8000b58 <__aeabi_d2iz>
 8018f42:	2200      	movs	r2, #0
 8018f44:	4682      	mov	sl, r0
 8018f46:	2300      	movs	r3, #0
 8018f48:	4630      	mov	r0, r6
 8018f4a:	4639      	mov	r1, r7
 8018f4c:	f7e7 fdc6 	bl	8000adc <__aeabi_dcmplt>
 8018f50:	b148      	cbz	r0, 8018f66 <_dtoa_r+0x186>
 8018f52:	4650      	mov	r0, sl
 8018f54:	f7e7 fae6 	bl	8000524 <__aeabi_i2d>
 8018f58:	4632      	mov	r2, r6
 8018f5a:	463b      	mov	r3, r7
 8018f5c:	f7e7 fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018f60:	b908      	cbnz	r0, 8018f66 <_dtoa_r+0x186>
 8018f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f66:	f1ba 0f16 	cmp.w	sl, #22
 8018f6a:	d854      	bhi.n	8019016 <_dtoa_r+0x236>
 8018f6c:	4b61      	ldr	r3, [pc, #388]	; (80190f4 <_dtoa_r+0x314>)
 8018f6e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018f7a:	f7e7 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8018f7e:	2800      	cmp	r0, #0
 8018f80:	d04b      	beq.n	801901a <_dtoa_r+0x23a>
 8018f82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018f86:	2300      	movs	r3, #0
 8018f88:	930e      	str	r3, [sp, #56]	; 0x38
 8018f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018f8c:	1b5d      	subs	r5, r3, r5
 8018f8e:	1e6b      	subs	r3, r5, #1
 8018f90:	9304      	str	r3, [sp, #16]
 8018f92:	bf43      	ittte	mi
 8018f94:	2300      	movmi	r3, #0
 8018f96:	f1c5 0801 	rsbmi	r8, r5, #1
 8018f9a:	9304      	strmi	r3, [sp, #16]
 8018f9c:	f04f 0800 	movpl.w	r8, #0
 8018fa0:	f1ba 0f00 	cmp.w	sl, #0
 8018fa4:	db3b      	blt.n	801901e <_dtoa_r+0x23e>
 8018fa6:	9b04      	ldr	r3, [sp, #16]
 8018fa8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8018fac:	4453      	add	r3, sl
 8018fae:	9304      	str	r3, [sp, #16]
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	9306      	str	r3, [sp, #24]
 8018fb4:	9b05      	ldr	r3, [sp, #20]
 8018fb6:	2b09      	cmp	r3, #9
 8018fb8:	d869      	bhi.n	801908e <_dtoa_r+0x2ae>
 8018fba:	2b05      	cmp	r3, #5
 8018fbc:	bfc4      	itt	gt
 8018fbe:	3b04      	subgt	r3, #4
 8018fc0:	9305      	strgt	r3, [sp, #20]
 8018fc2:	9b05      	ldr	r3, [sp, #20]
 8018fc4:	f1a3 0302 	sub.w	r3, r3, #2
 8018fc8:	bfcc      	ite	gt
 8018fca:	2500      	movgt	r5, #0
 8018fcc:	2501      	movle	r5, #1
 8018fce:	2b03      	cmp	r3, #3
 8018fd0:	d869      	bhi.n	80190a6 <_dtoa_r+0x2c6>
 8018fd2:	e8df f003 	tbb	[pc, r3]
 8018fd6:	4e2c      	.short	0x4e2c
 8018fd8:	5a4c      	.short	0x5a4c
 8018fda:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8018fde:	441d      	add	r5, r3
 8018fe0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018fe4:	2b20      	cmp	r3, #32
 8018fe6:	bfc1      	itttt	gt
 8018fe8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8018fec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018ff0:	fa09 f303 	lslgt.w	r3, r9, r3
 8018ff4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018ff8:	bfda      	itte	le
 8018ffa:	f1c3 0320 	rsble	r3, r3, #32
 8018ffe:	fa06 f003 	lslle.w	r0, r6, r3
 8019002:	4318      	orrgt	r0, r3
 8019004:	f7e7 fa7e 	bl	8000504 <__aeabi_ui2d>
 8019008:	2301      	movs	r3, #1
 801900a:	4606      	mov	r6, r0
 801900c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8019010:	3d01      	subs	r5, #1
 8019012:	9310      	str	r3, [sp, #64]	; 0x40
 8019014:	e771      	b.n	8018efa <_dtoa_r+0x11a>
 8019016:	2301      	movs	r3, #1
 8019018:	e7b6      	b.n	8018f88 <_dtoa_r+0x1a8>
 801901a:	900e      	str	r0, [sp, #56]	; 0x38
 801901c:	e7b5      	b.n	8018f8a <_dtoa_r+0x1aa>
 801901e:	f1ca 0300 	rsb	r3, sl, #0
 8019022:	9306      	str	r3, [sp, #24]
 8019024:	2300      	movs	r3, #0
 8019026:	eba8 080a 	sub.w	r8, r8, sl
 801902a:	930d      	str	r3, [sp, #52]	; 0x34
 801902c:	e7c2      	b.n	8018fb4 <_dtoa_r+0x1d4>
 801902e:	2300      	movs	r3, #0
 8019030:	9308      	str	r3, [sp, #32]
 8019032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019034:	2b00      	cmp	r3, #0
 8019036:	dc39      	bgt.n	80190ac <_dtoa_r+0x2cc>
 8019038:	f04f 0901 	mov.w	r9, #1
 801903c:	f8cd 9004 	str.w	r9, [sp, #4]
 8019040:	464b      	mov	r3, r9
 8019042:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8019046:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8019048:	2200      	movs	r2, #0
 801904a:	6042      	str	r2, [r0, #4]
 801904c:	2204      	movs	r2, #4
 801904e:	f102 0614 	add.w	r6, r2, #20
 8019052:	429e      	cmp	r6, r3
 8019054:	6841      	ldr	r1, [r0, #4]
 8019056:	d92f      	bls.n	80190b8 <_dtoa_r+0x2d8>
 8019058:	4620      	mov	r0, r4
 801905a:	f000 fdc5 	bl	8019be8 <_Balloc>
 801905e:	9000      	str	r0, [sp, #0]
 8019060:	2800      	cmp	r0, #0
 8019062:	d14b      	bne.n	80190fc <_dtoa_r+0x31c>
 8019064:	4b24      	ldr	r3, [pc, #144]	; (80190f8 <_dtoa_r+0x318>)
 8019066:	4602      	mov	r2, r0
 8019068:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801906c:	e6d1      	b.n	8018e12 <_dtoa_r+0x32>
 801906e:	2301      	movs	r3, #1
 8019070:	e7de      	b.n	8019030 <_dtoa_r+0x250>
 8019072:	2300      	movs	r3, #0
 8019074:	9308      	str	r3, [sp, #32]
 8019076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019078:	eb0a 0903 	add.w	r9, sl, r3
 801907c:	f109 0301 	add.w	r3, r9, #1
 8019080:	2b01      	cmp	r3, #1
 8019082:	9301      	str	r3, [sp, #4]
 8019084:	bfb8      	it	lt
 8019086:	2301      	movlt	r3, #1
 8019088:	e7dd      	b.n	8019046 <_dtoa_r+0x266>
 801908a:	2301      	movs	r3, #1
 801908c:	e7f2      	b.n	8019074 <_dtoa_r+0x294>
 801908e:	2501      	movs	r5, #1
 8019090:	2300      	movs	r3, #0
 8019092:	9305      	str	r3, [sp, #20]
 8019094:	9508      	str	r5, [sp, #32]
 8019096:	f04f 39ff 	mov.w	r9, #4294967295
 801909a:	2200      	movs	r2, #0
 801909c:	f8cd 9004 	str.w	r9, [sp, #4]
 80190a0:	2312      	movs	r3, #18
 80190a2:	9209      	str	r2, [sp, #36]	; 0x24
 80190a4:	e7cf      	b.n	8019046 <_dtoa_r+0x266>
 80190a6:	2301      	movs	r3, #1
 80190a8:	9308      	str	r3, [sp, #32]
 80190aa:	e7f4      	b.n	8019096 <_dtoa_r+0x2b6>
 80190ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80190b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80190b4:	464b      	mov	r3, r9
 80190b6:	e7c6      	b.n	8019046 <_dtoa_r+0x266>
 80190b8:	3101      	adds	r1, #1
 80190ba:	6041      	str	r1, [r0, #4]
 80190bc:	0052      	lsls	r2, r2, #1
 80190be:	e7c6      	b.n	801904e <_dtoa_r+0x26e>
 80190c0:	636f4361 	.word	0x636f4361
 80190c4:	3fd287a7 	.word	0x3fd287a7
 80190c8:	8b60c8b3 	.word	0x8b60c8b3
 80190cc:	3fc68a28 	.word	0x3fc68a28
 80190d0:	509f79fb 	.word	0x509f79fb
 80190d4:	3fd34413 	.word	0x3fd34413
 80190d8:	0801d3f4 	.word	0x0801d3f4
 80190dc:	0801d615 	.word	0x0801d615
 80190e0:	7ff00000 	.word	0x7ff00000
 80190e4:	0801d611 	.word	0x0801d611
 80190e8:	0801d608 	.word	0x0801d608
 80190ec:	0801d3d1 	.word	0x0801d3d1
 80190f0:	3ff80000 	.word	0x3ff80000
 80190f4:	0801d770 	.word	0x0801d770
 80190f8:	0801d674 	.word	0x0801d674
 80190fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80190fe:	9a00      	ldr	r2, [sp, #0]
 8019100:	601a      	str	r2, [r3, #0]
 8019102:	9b01      	ldr	r3, [sp, #4]
 8019104:	2b0e      	cmp	r3, #14
 8019106:	f200 80ad 	bhi.w	8019264 <_dtoa_r+0x484>
 801910a:	2d00      	cmp	r5, #0
 801910c:	f000 80aa 	beq.w	8019264 <_dtoa_r+0x484>
 8019110:	f1ba 0f00 	cmp.w	sl, #0
 8019114:	dd36      	ble.n	8019184 <_dtoa_r+0x3a4>
 8019116:	4ac3      	ldr	r2, [pc, #780]	; (8019424 <_dtoa_r+0x644>)
 8019118:	f00a 030f 	and.w	r3, sl, #15
 801911c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8019120:	ed93 7b00 	vldr	d7, [r3]
 8019124:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8019128:	ea4f 172a 	mov.w	r7, sl, asr #4
 801912c:	eeb0 8a47 	vmov.f32	s16, s14
 8019130:	eef0 8a67 	vmov.f32	s17, s15
 8019134:	d016      	beq.n	8019164 <_dtoa_r+0x384>
 8019136:	4bbc      	ldr	r3, [pc, #752]	; (8019428 <_dtoa_r+0x648>)
 8019138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801913c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8019140:	f7e7 fb84 	bl	800084c <__aeabi_ddiv>
 8019144:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019148:	f007 070f 	and.w	r7, r7, #15
 801914c:	2503      	movs	r5, #3
 801914e:	4eb6      	ldr	r6, [pc, #728]	; (8019428 <_dtoa_r+0x648>)
 8019150:	b957      	cbnz	r7, 8019168 <_dtoa_r+0x388>
 8019152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019156:	ec53 2b18 	vmov	r2, r3, d8
 801915a:	f7e7 fb77 	bl	800084c <__aeabi_ddiv>
 801915e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019162:	e029      	b.n	80191b8 <_dtoa_r+0x3d8>
 8019164:	2502      	movs	r5, #2
 8019166:	e7f2      	b.n	801914e <_dtoa_r+0x36e>
 8019168:	07f9      	lsls	r1, r7, #31
 801916a:	d508      	bpl.n	801917e <_dtoa_r+0x39e>
 801916c:	ec51 0b18 	vmov	r0, r1, d8
 8019170:	e9d6 2300 	ldrd	r2, r3, [r6]
 8019174:	f7e7 fa40 	bl	80005f8 <__aeabi_dmul>
 8019178:	ec41 0b18 	vmov	d8, r0, r1
 801917c:	3501      	adds	r5, #1
 801917e:	107f      	asrs	r7, r7, #1
 8019180:	3608      	adds	r6, #8
 8019182:	e7e5      	b.n	8019150 <_dtoa_r+0x370>
 8019184:	f000 80a6 	beq.w	80192d4 <_dtoa_r+0x4f4>
 8019188:	f1ca 0600 	rsb	r6, sl, #0
 801918c:	4ba5      	ldr	r3, [pc, #660]	; (8019424 <_dtoa_r+0x644>)
 801918e:	4fa6      	ldr	r7, [pc, #664]	; (8019428 <_dtoa_r+0x648>)
 8019190:	f006 020f 	and.w	r2, r6, #15
 8019194:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019198:	e9d3 2300 	ldrd	r2, r3, [r3]
 801919c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80191a0:	f7e7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80191a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80191a8:	1136      	asrs	r6, r6, #4
 80191aa:	2300      	movs	r3, #0
 80191ac:	2502      	movs	r5, #2
 80191ae:	2e00      	cmp	r6, #0
 80191b0:	f040 8085 	bne.w	80192be <_dtoa_r+0x4de>
 80191b4:	2b00      	cmp	r3, #0
 80191b6:	d1d2      	bne.n	801915e <_dtoa_r+0x37e>
 80191b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80191ba:	2b00      	cmp	r3, #0
 80191bc:	f000 808c 	beq.w	80192d8 <_dtoa_r+0x4f8>
 80191c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80191c4:	4b99      	ldr	r3, [pc, #612]	; (801942c <_dtoa_r+0x64c>)
 80191c6:	2200      	movs	r2, #0
 80191c8:	4630      	mov	r0, r6
 80191ca:	4639      	mov	r1, r7
 80191cc:	f7e7 fc86 	bl	8000adc <__aeabi_dcmplt>
 80191d0:	2800      	cmp	r0, #0
 80191d2:	f000 8081 	beq.w	80192d8 <_dtoa_r+0x4f8>
 80191d6:	9b01      	ldr	r3, [sp, #4]
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d07d      	beq.n	80192d8 <_dtoa_r+0x4f8>
 80191dc:	f1b9 0f00 	cmp.w	r9, #0
 80191e0:	dd3c      	ble.n	801925c <_dtoa_r+0x47c>
 80191e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80191e6:	9307      	str	r3, [sp, #28]
 80191e8:	2200      	movs	r2, #0
 80191ea:	4b91      	ldr	r3, [pc, #580]	; (8019430 <_dtoa_r+0x650>)
 80191ec:	4630      	mov	r0, r6
 80191ee:	4639      	mov	r1, r7
 80191f0:	f7e7 fa02 	bl	80005f8 <__aeabi_dmul>
 80191f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80191f8:	3501      	adds	r5, #1
 80191fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80191fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019202:	4628      	mov	r0, r5
 8019204:	f7e7 f98e 	bl	8000524 <__aeabi_i2d>
 8019208:	4632      	mov	r2, r6
 801920a:	463b      	mov	r3, r7
 801920c:	f7e7 f9f4 	bl	80005f8 <__aeabi_dmul>
 8019210:	4b88      	ldr	r3, [pc, #544]	; (8019434 <_dtoa_r+0x654>)
 8019212:	2200      	movs	r2, #0
 8019214:	f7e7 f83a 	bl	800028c <__adddf3>
 8019218:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801921c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019220:	9303      	str	r3, [sp, #12]
 8019222:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019224:	2b00      	cmp	r3, #0
 8019226:	d15c      	bne.n	80192e2 <_dtoa_r+0x502>
 8019228:	4b83      	ldr	r3, [pc, #524]	; (8019438 <_dtoa_r+0x658>)
 801922a:	2200      	movs	r2, #0
 801922c:	4630      	mov	r0, r6
 801922e:	4639      	mov	r1, r7
 8019230:	f7e7 f82a 	bl	8000288 <__aeabi_dsub>
 8019234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019238:	4606      	mov	r6, r0
 801923a:	460f      	mov	r7, r1
 801923c:	f7e7 fc6c 	bl	8000b18 <__aeabi_dcmpgt>
 8019240:	2800      	cmp	r0, #0
 8019242:	f040 8296 	bne.w	8019772 <_dtoa_r+0x992>
 8019246:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801924a:	4630      	mov	r0, r6
 801924c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019250:	4639      	mov	r1, r7
 8019252:	f7e7 fc43 	bl	8000adc <__aeabi_dcmplt>
 8019256:	2800      	cmp	r0, #0
 8019258:	f040 8288 	bne.w	801976c <_dtoa_r+0x98c>
 801925c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8019260:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8019264:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8019266:	2b00      	cmp	r3, #0
 8019268:	f2c0 8158 	blt.w	801951c <_dtoa_r+0x73c>
 801926c:	f1ba 0f0e 	cmp.w	sl, #14
 8019270:	f300 8154 	bgt.w	801951c <_dtoa_r+0x73c>
 8019274:	4b6b      	ldr	r3, [pc, #428]	; (8019424 <_dtoa_r+0x644>)
 8019276:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801927a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801927e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019280:	2b00      	cmp	r3, #0
 8019282:	f280 80e3 	bge.w	801944c <_dtoa_r+0x66c>
 8019286:	9b01      	ldr	r3, [sp, #4]
 8019288:	2b00      	cmp	r3, #0
 801928a:	f300 80df 	bgt.w	801944c <_dtoa_r+0x66c>
 801928e:	f040 826d 	bne.w	801976c <_dtoa_r+0x98c>
 8019292:	4b69      	ldr	r3, [pc, #420]	; (8019438 <_dtoa_r+0x658>)
 8019294:	2200      	movs	r2, #0
 8019296:	4640      	mov	r0, r8
 8019298:	4649      	mov	r1, r9
 801929a:	f7e7 f9ad 	bl	80005f8 <__aeabi_dmul>
 801929e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80192a2:	f7e7 fc2f 	bl	8000b04 <__aeabi_dcmpge>
 80192a6:	9e01      	ldr	r6, [sp, #4]
 80192a8:	4637      	mov	r7, r6
 80192aa:	2800      	cmp	r0, #0
 80192ac:	f040 8243 	bne.w	8019736 <_dtoa_r+0x956>
 80192b0:	9d00      	ldr	r5, [sp, #0]
 80192b2:	2331      	movs	r3, #49	; 0x31
 80192b4:	f805 3b01 	strb.w	r3, [r5], #1
 80192b8:	f10a 0a01 	add.w	sl, sl, #1
 80192bc:	e23f      	b.n	801973e <_dtoa_r+0x95e>
 80192be:	07f2      	lsls	r2, r6, #31
 80192c0:	d505      	bpl.n	80192ce <_dtoa_r+0x4ee>
 80192c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80192c6:	f7e7 f997 	bl	80005f8 <__aeabi_dmul>
 80192ca:	3501      	adds	r5, #1
 80192cc:	2301      	movs	r3, #1
 80192ce:	1076      	asrs	r6, r6, #1
 80192d0:	3708      	adds	r7, #8
 80192d2:	e76c      	b.n	80191ae <_dtoa_r+0x3ce>
 80192d4:	2502      	movs	r5, #2
 80192d6:	e76f      	b.n	80191b8 <_dtoa_r+0x3d8>
 80192d8:	9b01      	ldr	r3, [sp, #4]
 80192da:	f8cd a01c 	str.w	sl, [sp, #28]
 80192de:	930c      	str	r3, [sp, #48]	; 0x30
 80192e0:	e78d      	b.n	80191fe <_dtoa_r+0x41e>
 80192e2:	9900      	ldr	r1, [sp, #0]
 80192e4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80192e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80192e8:	4b4e      	ldr	r3, [pc, #312]	; (8019424 <_dtoa_r+0x644>)
 80192ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 80192ee:	4401      	add	r1, r0
 80192f0:	9102      	str	r1, [sp, #8]
 80192f2:	9908      	ldr	r1, [sp, #32]
 80192f4:	eeb0 8a47 	vmov.f32	s16, s14
 80192f8:	eef0 8a67 	vmov.f32	s17, s15
 80192fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8019300:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8019304:	2900      	cmp	r1, #0
 8019306:	d045      	beq.n	8019394 <_dtoa_r+0x5b4>
 8019308:	494c      	ldr	r1, [pc, #304]	; (801943c <_dtoa_r+0x65c>)
 801930a:	2000      	movs	r0, #0
 801930c:	f7e7 fa9e 	bl	800084c <__aeabi_ddiv>
 8019310:	ec53 2b18 	vmov	r2, r3, d8
 8019314:	f7e6 ffb8 	bl	8000288 <__aeabi_dsub>
 8019318:	9d00      	ldr	r5, [sp, #0]
 801931a:	ec41 0b18 	vmov	d8, r0, r1
 801931e:	4639      	mov	r1, r7
 8019320:	4630      	mov	r0, r6
 8019322:	f7e7 fc19 	bl	8000b58 <__aeabi_d2iz>
 8019326:	900c      	str	r0, [sp, #48]	; 0x30
 8019328:	f7e7 f8fc 	bl	8000524 <__aeabi_i2d>
 801932c:	4602      	mov	r2, r0
 801932e:	460b      	mov	r3, r1
 8019330:	4630      	mov	r0, r6
 8019332:	4639      	mov	r1, r7
 8019334:	f7e6 ffa8 	bl	8000288 <__aeabi_dsub>
 8019338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801933a:	3330      	adds	r3, #48	; 0x30
 801933c:	f805 3b01 	strb.w	r3, [r5], #1
 8019340:	ec53 2b18 	vmov	r2, r3, d8
 8019344:	4606      	mov	r6, r0
 8019346:	460f      	mov	r7, r1
 8019348:	f7e7 fbc8 	bl	8000adc <__aeabi_dcmplt>
 801934c:	2800      	cmp	r0, #0
 801934e:	d165      	bne.n	801941c <_dtoa_r+0x63c>
 8019350:	4632      	mov	r2, r6
 8019352:	463b      	mov	r3, r7
 8019354:	4935      	ldr	r1, [pc, #212]	; (801942c <_dtoa_r+0x64c>)
 8019356:	2000      	movs	r0, #0
 8019358:	f7e6 ff96 	bl	8000288 <__aeabi_dsub>
 801935c:	ec53 2b18 	vmov	r2, r3, d8
 8019360:	f7e7 fbbc 	bl	8000adc <__aeabi_dcmplt>
 8019364:	2800      	cmp	r0, #0
 8019366:	f040 80b9 	bne.w	80194dc <_dtoa_r+0x6fc>
 801936a:	9b02      	ldr	r3, [sp, #8]
 801936c:	429d      	cmp	r5, r3
 801936e:	f43f af75 	beq.w	801925c <_dtoa_r+0x47c>
 8019372:	4b2f      	ldr	r3, [pc, #188]	; (8019430 <_dtoa_r+0x650>)
 8019374:	ec51 0b18 	vmov	r0, r1, d8
 8019378:	2200      	movs	r2, #0
 801937a:	f7e7 f93d 	bl	80005f8 <__aeabi_dmul>
 801937e:	4b2c      	ldr	r3, [pc, #176]	; (8019430 <_dtoa_r+0x650>)
 8019380:	ec41 0b18 	vmov	d8, r0, r1
 8019384:	2200      	movs	r2, #0
 8019386:	4630      	mov	r0, r6
 8019388:	4639      	mov	r1, r7
 801938a:	f7e7 f935 	bl	80005f8 <__aeabi_dmul>
 801938e:	4606      	mov	r6, r0
 8019390:	460f      	mov	r7, r1
 8019392:	e7c4      	b.n	801931e <_dtoa_r+0x53e>
 8019394:	ec51 0b17 	vmov	r0, r1, d7
 8019398:	f7e7 f92e 	bl	80005f8 <__aeabi_dmul>
 801939c:	9b02      	ldr	r3, [sp, #8]
 801939e:	9d00      	ldr	r5, [sp, #0]
 80193a0:	930c      	str	r3, [sp, #48]	; 0x30
 80193a2:	ec41 0b18 	vmov	d8, r0, r1
 80193a6:	4639      	mov	r1, r7
 80193a8:	4630      	mov	r0, r6
 80193aa:	f7e7 fbd5 	bl	8000b58 <__aeabi_d2iz>
 80193ae:	9011      	str	r0, [sp, #68]	; 0x44
 80193b0:	f7e7 f8b8 	bl	8000524 <__aeabi_i2d>
 80193b4:	4602      	mov	r2, r0
 80193b6:	460b      	mov	r3, r1
 80193b8:	4630      	mov	r0, r6
 80193ba:	4639      	mov	r1, r7
 80193bc:	f7e6 ff64 	bl	8000288 <__aeabi_dsub>
 80193c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80193c2:	3330      	adds	r3, #48	; 0x30
 80193c4:	f805 3b01 	strb.w	r3, [r5], #1
 80193c8:	9b02      	ldr	r3, [sp, #8]
 80193ca:	429d      	cmp	r5, r3
 80193cc:	4606      	mov	r6, r0
 80193ce:	460f      	mov	r7, r1
 80193d0:	f04f 0200 	mov.w	r2, #0
 80193d4:	d134      	bne.n	8019440 <_dtoa_r+0x660>
 80193d6:	4b19      	ldr	r3, [pc, #100]	; (801943c <_dtoa_r+0x65c>)
 80193d8:	ec51 0b18 	vmov	r0, r1, d8
 80193dc:	f7e6 ff56 	bl	800028c <__adddf3>
 80193e0:	4602      	mov	r2, r0
 80193e2:	460b      	mov	r3, r1
 80193e4:	4630      	mov	r0, r6
 80193e6:	4639      	mov	r1, r7
 80193e8:	f7e7 fb96 	bl	8000b18 <__aeabi_dcmpgt>
 80193ec:	2800      	cmp	r0, #0
 80193ee:	d175      	bne.n	80194dc <_dtoa_r+0x6fc>
 80193f0:	ec53 2b18 	vmov	r2, r3, d8
 80193f4:	4911      	ldr	r1, [pc, #68]	; (801943c <_dtoa_r+0x65c>)
 80193f6:	2000      	movs	r0, #0
 80193f8:	f7e6 ff46 	bl	8000288 <__aeabi_dsub>
 80193fc:	4602      	mov	r2, r0
 80193fe:	460b      	mov	r3, r1
 8019400:	4630      	mov	r0, r6
 8019402:	4639      	mov	r1, r7
 8019404:	f7e7 fb6a 	bl	8000adc <__aeabi_dcmplt>
 8019408:	2800      	cmp	r0, #0
 801940a:	f43f af27 	beq.w	801925c <_dtoa_r+0x47c>
 801940e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019410:	1e6b      	subs	r3, r5, #1
 8019412:	930c      	str	r3, [sp, #48]	; 0x30
 8019414:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8019418:	2b30      	cmp	r3, #48	; 0x30
 801941a:	d0f8      	beq.n	801940e <_dtoa_r+0x62e>
 801941c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019420:	e04a      	b.n	80194b8 <_dtoa_r+0x6d8>
 8019422:	bf00      	nop
 8019424:	0801d770 	.word	0x0801d770
 8019428:	0801d748 	.word	0x0801d748
 801942c:	3ff00000 	.word	0x3ff00000
 8019430:	40240000 	.word	0x40240000
 8019434:	401c0000 	.word	0x401c0000
 8019438:	40140000 	.word	0x40140000
 801943c:	3fe00000 	.word	0x3fe00000
 8019440:	4baf      	ldr	r3, [pc, #700]	; (8019700 <_dtoa_r+0x920>)
 8019442:	f7e7 f8d9 	bl	80005f8 <__aeabi_dmul>
 8019446:	4606      	mov	r6, r0
 8019448:	460f      	mov	r7, r1
 801944a:	e7ac      	b.n	80193a6 <_dtoa_r+0x5c6>
 801944c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8019450:	9d00      	ldr	r5, [sp, #0]
 8019452:	4642      	mov	r2, r8
 8019454:	464b      	mov	r3, r9
 8019456:	4630      	mov	r0, r6
 8019458:	4639      	mov	r1, r7
 801945a:	f7e7 f9f7 	bl	800084c <__aeabi_ddiv>
 801945e:	f7e7 fb7b 	bl	8000b58 <__aeabi_d2iz>
 8019462:	9002      	str	r0, [sp, #8]
 8019464:	f7e7 f85e 	bl	8000524 <__aeabi_i2d>
 8019468:	4642      	mov	r2, r8
 801946a:	464b      	mov	r3, r9
 801946c:	f7e7 f8c4 	bl	80005f8 <__aeabi_dmul>
 8019470:	4602      	mov	r2, r0
 8019472:	460b      	mov	r3, r1
 8019474:	4630      	mov	r0, r6
 8019476:	4639      	mov	r1, r7
 8019478:	f7e6 ff06 	bl	8000288 <__aeabi_dsub>
 801947c:	9e02      	ldr	r6, [sp, #8]
 801947e:	9f01      	ldr	r7, [sp, #4]
 8019480:	3630      	adds	r6, #48	; 0x30
 8019482:	f805 6b01 	strb.w	r6, [r5], #1
 8019486:	9e00      	ldr	r6, [sp, #0]
 8019488:	1bae      	subs	r6, r5, r6
 801948a:	42b7      	cmp	r7, r6
 801948c:	4602      	mov	r2, r0
 801948e:	460b      	mov	r3, r1
 8019490:	d137      	bne.n	8019502 <_dtoa_r+0x722>
 8019492:	f7e6 fefb 	bl	800028c <__adddf3>
 8019496:	4642      	mov	r2, r8
 8019498:	464b      	mov	r3, r9
 801949a:	4606      	mov	r6, r0
 801949c:	460f      	mov	r7, r1
 801949e:	f7e7 fb3b 	bl	8000b18 <__aeabi_dcmpgt>
 80194a2:	b9c8      	cbnz	r0, 80194d8 <_dtoa_r+0x6f8>
 80194a4:	4642      	mov	r2, r8
 80194a6:	464b      	mov	r3, r9
 80194a8:	4630      	mov	r0, r6
 80194aa:	4639      	mov	r1, r7
 80194ac:	f7e7 fb0c 	bl	8000ac8 <__aeabi_dcmpeq>
 80194b0:	b110      	cbz	r0, 80194b8 <_dtoa_r+0x6d8>
 80194b2:	9b02      	ldr	r3, [sp, #8]
 80194b4:	07d9      	lsls	r1, r3, #31
 80194b6:	d40f      	bmi.n	80194d8 <_dtoa_r+0x6f8>
 80194b8:	4620      	mov	r0, r4
 80194ba:	4659      	mov	r1, fp
 80194bc:	f000 fbd4 	bl	8019c68 <_Bfree>
 80194c0:	2300      	movs	r3, #0
 80194c2:	702b      	strb	r3, [r5, #0]
 80194c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80194c6:	f10a 0001 	add.w	r0, sl, #1
 80194ca:	6018      	str	r0, [r3, #0]
 80194cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	f43f acd8 	beq.w	8018e84 <_dtoa_r+0xa4>
 80194d4:	601d      	str	r5, [r3, #0]
 80194d6:	e4d5      	b.n	8018e84 <_dtoa_r+0xa4>
 80194d8:	f8cd a01c 	str.w	sl, [sp, #28]
 80194dc:	462b      	mov	r3, r5
 80194de:	461d      	mov	r5, r3
 80194e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80194e4:	2a39      	cmp	r2, #57	; 0x39
 80194e6:	d108      	bne.n	80194fa <_dtoa_r+0x71a>
 80194e8:	9a00      	ldr	r2, [sp, #0]
 80194ea:	429a      	cmp	r2, r3
 80194ec:	d1f7      	bne.n	80194de <_dtoa_r+0x6fe>
 80194ee:	9a07      	ldr	r2, [sp, #28]
 80194f0:	9900      	ldr	r1, [sp, #0]
 80194f2:	3201      	adds	r2, #1
 80194f4:	9207      	str	r2, [sp, #28]
 80194f6:	2230      	movs	r2, #48	; 0x30
 80194f8:	700a      	strb	r2, [r1, #0]
 80194fa:	781a      	ldrb	r2, [r3, #0]
 80194fc:	3201      	adds	r2, #1
 80194fe:	701a      	strb	r2, [r3, #0]
 8019500:	e78c      	b.n	801941c <_dtoa_r+0x63c>
 8019502:	4b7f      	ldr	r3, [pc, #508]	; (8019700 <_dtoa_r+0x920>)
 8019504:	2200      	movs	r2, #0
 8019506:	f7e7 f877 	bl	80005f8 <__aeabi_dmul>
 801950a:	2200      	movs	r2, #0
 801950c:	2300      	movs	r3, #0
 801950e:	4606      	mov	r6, r0
 8019510:	460f      	mov	r7, r1
 8019512:	f7e7 fad9 	bl	8000ac8 <__aeabi_dcmpeq>
 8019516:	2800      	cmp	r0, #0
 8019518:	d09b      	beq.n	8019452 <_dtoa_r+0x672>
 801951a:	e7cd      	b.n	80194b8 <_dtoa_r+0x6d8>
 801951c:	9a08      	ldr	r2, [sp, #32]
 801951e:	2a00      	cmp	r2, #0
 8019520:	f000 80c4 	beq.w	80196ac <_dtoa_r+0x8cc>
 8019524:	9a05      	ldr	r2, [sp, #20]
 8019526:	2a01      	cmp	r2, #1
 8019528:	f300 80a8 	bgt.w	801967c <_dtoa_r+0x89c>
 801952c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801952e:	2a00      	cmp	r2, #0
 8019530:	f000 80a0 	beq.w	8019674 <_dtoa_r+0x894>
 8019534:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8019538:	9e06      	ldr	r6, [sp, #24]
 801953a:	4645      	mov	r5, r8
 801953c:	9a04      	ldr	r2, [sp, #16]
 801953e:	2101      	movs	r1, #1
 8019540:	441a      	add	r2, r3
 8019542:	4620      	mov	r0, r4
 8019544:	4498      	add	r8, r3
 8019546:	9204      	str	r2, [sp, #16]
 8019548:	f000 fc4a 	bl	8019de0 <__i2b>
 801954c:	4607      	mov	r7, r0
 801954e:	2d00      	cmp	r5, #0
 8019550:	dd0b      	ble.n	801956a <_dtoa_r+0x78a>
 8019552:	9b04      	ldr	r3, [sp, #16]
 8019554:	2b00      	cmp	r3, #0
 8019556:	dd08      	ble.n	801956a <_dtoa_r+0x78a>
 8019558:	42ab      	cmp	r3, r5
 801955a:	9a04      	ldr	r2, [sp, #16]
 801955c:	bfa8      	it	ge
 801955e:	462b      	movge	r3, r5
 8019560:	eba8 0803 	sub.w	r8, r8, r3
 8019564:	1aed      	subs	r5, r5, r3
 8019566:	1ad3      	subs	r3, r2, r3
 8019568:	9304      	str	r3, [sp, #16]
 801956a:	9b06      	ldr	r3, [sp, #24]
 801956c:	b1fb      	cbz	r3, 80195ae <_dtoa_r+0x7ce>
 801956e:	9b08      	ldr	r3, [sp, #32]
 8019570:	2b00      	cmp	r3, #0
 8019572:	f000 809f 	beq.w	80196b4 <_dtoa_r+0x8d4>
 8019576:	2e00      	cmp	r6, #0
 8019578:	dd11      	ble.n	801959e <_dtoa_r+0x7be>
 801957a:	4639      	mov	r1, r7
 801957c:	4632      	mov	r2, r6
 801957e:	4620      	mov	r0, r4
 8019580:	f000 fcea 	bl	8019f58 <__pow5mult>
 8019584:	465a      	mov	r2, fp
 8019586:	4601      	mov	r1, r0
 8019588:	4607      	mov	r7, r0
 801958a:	4620      	mov	r0, r4
 801958c:	f000 fc3e 	bl	8019e0c <__multiply>
 8019590:	4659      	mov	r1, fp
 8019592:	9007      	str	r0, [sp, #28]
 8019594:	4620      	mov	r0, r4
 8019596:	f000 fb67 	bl	8019c68 <_Bfree>
 801959a:	9b07      	ldr	r3, [sp, #28]
 801959c:	469b      	mov	fp, r3
 801959e:	9b06      	ldr	r3, [sp, #24]
 80195a0:	1b9a      	subs	r2, r3, r6
 80195a2:	d004      	beq.n	80195ae <_dtoa_r+0x7ce>
 80195a4:	4659      	mov	r1, fp
 80195a6:	4620      	mov	r0, r4
 80195a8:	f000 fcd6 	bl	8019f58 <__pow5mult>
 80195ac:	4683      	mov	fp, r0
 80195ae:	2101      	movs	r1, #1
 80195b0:	4620      	mov	r0, r4
 80195b2:	f000 fc15 	bl	8019de0 <__i2b>
 80195b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195b8:	2b00      	cmp	r3, #0
 80195ba:	4606      	mov	r6, r0
 80195bc:	dd7c      	ble.n	80196b8 <_dtoa_r+0x8d8>
 80195be:	461a      	mov	r2, r3
 80195c0:	4601      	mov	r1, r0
 80195c2:	4620      	mov	r0, r4
 80195c4:	f000 fcc8 	bl	8019f58 <__pow5mult>
 80195c8:	9b05      	ldr	r3, [sp, #20]
 80195ca:	2b01      	cmp	r3, #1
 80195cc:	4606      	mov	r6, r0
 80195ce:	dd76      	ble.n	80196be <_dtoa_r+0x8de>
 80195d0:	2300      	movs	r3, #0
 80195d2:	9306      	str	r3, [sp, #24]
 80195d4:	6933      	ldr	r3, [r6, #16]
 80195d6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80195da:	6918      	ldr	r0, [r3, #16]
 80195dc:	f000 fbb0 	bl	8019d40 <__hi0bits>
 80195e0:	f1c0 0020 	rsb	r0, r0, #32
 80195e4:	9b04      	ldr	r3, [sp, #16]
 80195e6:	4418      	add	r0, r3
 80195e8:	f010 001f 	ands.w	r0, r0, #31
 80195ec:	f000 8086 	beq.w	80196fc <_dtoa_r+0x91c>
 80195f0:	f1c0 0320 	rsb	r3, r0, #32
 80195f4:	2b04      	cmp	r3, #4
 80195f6:	dd7f      	ble.n	80196f8 <_dtoa_r+0x918>
 80195f8:	f1c0 001c 	rsb	r0, r0, #28
 80195fc:	9b04      	ldr	r3, [sp, #16]
 80195fe:	4403      	add	r3, r0
 8019600:	4480      	add	r8, r0
 8019602:	4405      	add	r5, r0
 8019604:	9304      	str	r3, [sp, #16]
 8019606:	f1b8 0f00 	cmp.w	r8, #0
 801960a:	dd05      	ble.n	8019618 <_dtoa_r+0x838>
 801960c:	4659      	mov	r1, fp
 801960e:	4642      	mov	r2, r8
 8019610:	4620      	mov	r0, r4
 8019612:	f000 fcfb 	bl	801a00c <__lshift>
 8019616:	4683      	mov	fp, r0
 8019618:	9b04      	ldr	r3, [sp, #16]
 801961a:	2b00      	cmp	r3, #0
 801961c:	dd05      	ble.n	801962a <_dtoa_r+0x84a>
 801961e:	4631      	mov	r1, r6
 8019620:	461a      	mov	r2, r3
 8019622:	4620      	mov	r0, r4
 8019624:	f000 fcf2 	bl	801a00c <__lshift>
 8019628:	4606      	mov	r6, r0
 801962a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801962c:	2b00      	cmp	r3, #0
 801962e:	d069      	beq.n	8019704 <_dtoa_r+0x924>
 8019630:	4631      	mov	r1, r6
 8019632:	4658      	mov	r0, fp
 8019634:	f000 fd56 	bl	801a0e4 <__mcmp>
 8019638:	2800      	cmp	r0, #0
 801963a:	da63      	bge.n	8019704 <_dtoa_r+0x924>
 801963c:	2300      	movs	r3, #0
 801963e:	4659      	mov	r1, fp
 8019640:	220a      	movs	r2, #10
 8019642:	4620      	mov	r0, r4
 8019644:	f000 fb32 	bl	8019cac <__multadd>
 8019648:	9b08      	ldr	r3, [sp, #32]
 801964a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801964e:	4683      	mov	fp, r0
 8019650:	2b00      	cmp	r3, #0
 8019652:	f000 818f 	beq.w	8019974 <_dtoa_r+0xb94>
 8019656:	4639      	mov	r1, r7
 8019658:	2300      	movs	r3, #0
 801965a:	220a      	movs	r2, #10
 801965c:	4620      	mov	r0, r4
 801965e:	f000 fb25 	bl	8019cac <__multadd>
 8019662:	f1b9 0f00 	cmp.w	r9, #0
 8019666:	4607      	mov	r7, r0
 8019668:	f300 808e 	bgt.w	8019788 <_dtoa_r+0x9a8>
 801966c:	9b05      	ldr	r3, [sp, #20]
 801966e:	2b02      	cmp	r3, #2
 8019670:	dc50      	bgt.n	8019714 <_dtoa_r+0x934>
 8019672:	e089      	b.n	8019788 <_dtoa_r+0x9a8>
 8019674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019676:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801967a:	e75d      	b.n	8019538 <_dtoa_r+0x758>
 801967c:	9b01      	ldr	r3, [sp, #4]
 801967e:	1e5e      	subs	r6, r3, #1
 8019680:	9b06      	ldr	r3, [sp, #24]
 8019682:	42b3      	cmp	r3, r6
 8019684:	bfbf      	itttt	lt
 8019686:	9b06      	ldrlt	r3, [sp, #24]
 8019688:	9606      	strlt	r6, [sp, #24]
 801968a:	1af2      	sublt	r2, r6, r3
 801968c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801968e:	bfb6      	itet	lt
 8019690:	189b      	addlt	r3, r3, r2
 8019692:	1b9e      	subge	r6, r3, r6
 8019694:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019696:	9b01      	ldr	r3, [sp, #4]
 8019698:	bfb8      	it	lt
 801969a:	2600      	movlt	r6, #0
 801969c:	2b00      	cmp	r3, #0
 801969e:	bfb5      	itete	lt
 80196a0:	eba8 0503 	sublt.w	r5, r8, r3
 80196a4:	9b01      	ldrge	r3, [sp, #4]
 80196a6:	2300      	movlt	r3, #0
 80196a8:	4645      	movge	r5, r8
 80196aa:	e747      	b.n	801953c <_dtoa_r+0x75c>
 80196ac:	9e06      	ldr	r6, [sp, #24]
 80196ae:	9f08      	ldr	r7, [sp, #32]
 80196b0:	4645      	mov	r5, r8
 80196b2:	e74c      	b.n	801954e <_dtoa_r+0x76e>
 80196b4:	9a06      	ldr	r2, [sp, #24]
 80196b6:	e775      	b.n	80195a4 <_dtoa_r+0x7c4>
 80196b8:	9b05      	ldr	r3, [sp, #20]
 80196ba:	2b01      	cmp	r3, #1
 80196bc:	dc18      	bgt.n	80196f0 <_dtoa_r+0x910>
 80196be:	9b02      	ldr	r3, [sp, #8]
 80196c0:	b9b3      	cbnz	r3, 80196f0 <_dtoa_r+0x910>
 80196c2:	9b03      	ldr	r3, [sp, #12]
 80196c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80196c8:	b9a3      	cbnz	r3, 80196f4 <_dtoa_r+0x914>
 80196ca:	9b03      	ldr	r3, [sp, #12]
 80196cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80196d0:	0d1b      	lsrs	r3, r3, #20
 80196d2:	051b      	lsls	r3, r3, #20
 80196d4:	b12b      	cbz	r3, 80196e2 <_dtoa_r+0x902>
 80196d6:	9b04      	ldr	r3, [sp, #16]
 80196d8:	3301      	adds	r3, #1
 80196da:	9304      	str	r3, [sp, #16]
 80196dc:	f108 0801 	add.w	r8, r8, #1
 80196e0:	2301      	movs	r3, #1
 80196e2:	9306      	str	r3, [sp, #24]
 80196e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	f47f af74 	bne.w	80195d4 <_dtoa_r+0x7f4>
 80196ec:	2001      	movs	r0, #1
 80196ee:	e779      	b.n	80195e4 <_dtoa_r+0x804>
 80196f0:	2300      	movs	r3, #0
 80196f2:	e7f6      	b.n	80196e2 <_dtoa_r+0x902>
 80196f4:	9b02      	ldr	r3, [sp, #8]
 80196f6:	e7f4      	b.n	80196e2 <_dtoa_r+0x902>
 80196f8:	d085      	beq.n	8019606 <_dtoa_r+0x826>
 80196fa:	4618      	mov	r0, r3
 80196fc:	301c      	adds	r0, #28
 80196fe:	e77d      	b.n	80195fc <_dtoa_r+0x81c>
 8019700:	40240000 	.word	0x40240000
 8019704:	9b01      	ldr	r3, [sp, #4]
 8019706:	2b00      	cmp	r3, #0
 8019708:	dc38      	bgt.n	801977c <_dtoa_r+0x99c>
 801970a:	9b05      	ldr	r3, [sp, #20]
 801970c:	2b02      	cmp	r3, #2
 801970e:	dd35      	ble.n	801977c <_dtoa_r+0x99c>
 8019710:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019714:	f1b9 0f00 	cmp.w	r9, #0
 8019718:	d10d      	bne.n	8019736 <_dtoa_r+0x956>
 801971a:	4631      	mov	r1, r6
 801971c:	464b      	mov	r3, r9
 801971e:	2205      	movs	r2, #5
 8019720:	4620      	mov	r0, r4
 8019722:	f000 fac3 	bl	8019cac <__multadd>
 8019726:	4601      	mov	r1, r0
 8019728:	4606      	mov	r6, r0
 801972a:	4658      	mov	r0, fp
 801972c:	f000 fcda 	bl	801a0e4 <__mcmp>
 8019730:	2800      	cmp	r0, #0
 8019732:	f73f adbd 	bgt.w	80192b0 <_dtoa_r+0x4d0>
 8019736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019738:	9d00      	ldr	r5, [sp, #0]
 801973a:	ea6f 0a03 	mvn.w	sl, r3
 801973e:	f04f 0800 	mov.w	r8, #0
 8019742:	4631      	mov	r1, r6
 8019744:	4620      	mov	r0, r4
 8019746:	f000 fa8f 	bl	8019c68 <_Bfree>
 801974a:	2f00      	cmp	r7, #0
 801974c:	f43f aeb4 	beq.w	80194b8 <_dtoa_r+0x6d8>
 8019750:	f1b8 0f00 	cmp.w	r8, #0
 8019754:	d005      	beq.n	8019762 <_dtoa_r+0x982>
 8019756:	45b8      	cmp	r8, r7
 8019758:	d003      	beq.n	8019762 <_dtoa_r+0x982>
 801975a:	4641      	mov	r1, r8
 801975c:	4620      	mov	r0, r4
 801975e:	f000 fa83 	bl	8019c68 <_Bfree>
 8019762:	4639      	mov	r1, r7
 8019764:	4620      	mov	r0, r4
 8019766:	f000 fa7f 	bl	8019c68 <_Bfree>
 801976a:	e6a5      	b.n	80194b8 <_dtoa_r+0x6d8>
 801976c:	2600      	movs	r6, #0
 801976e:	4637      	mov	r7, r6
 8019770:	e7e1      	b.n	8019736 <_dtoa_r+0x956>
 8019772:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019774:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019778:	4637      	mov	r7, r6
 801977a:	e599      	b.n	80192b0 <_dtoa_r+0x4d0>
 801977c:	9b08      	ldr	r3, [sp, #32]
 801977e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019782:	2b00      	cmp	r3, #0
 8019784:	f000 80fd 	beq.w	8019982 <_dtoa_r+0xba2>
 8019788:	2d00      	cmp	r5, #0
 801978a:	dd05      	ble.n	8019798 <_dtoa_r+0x9b8>
 801978c:	4639      	mov	r1, r7
 801978e:	462a      	mov	r2, r5
 8019790:	4620      	mov	r0, r4
 8019792:	f000 fc3b 	bl	801a00c <__lshift>
 8019796:	4607      	mov	r7, r0
 8019798:	9b06      	ldr	r3, [sp, #24]
 801979a:	2b00      	cmp	r3, #0
 801979c:	d05c      	beq.n	8019858 <_dtoa_r+0xa78>
 801979e:	6879      	ldr	r1, [r7, #4]
 80197a0:	4620      	mov	r0, r4
 80197a2:	f000 fa21 	bl	8019be8 <_Balloc>
 80197a6:	4605      	mov	r5, r0
 80197a8:	b928      	cbnz	r0, 80197b6 <_dtoa_r+0x9d6>
 80197aa:	4b80      	ldr	r3, [pc, #512]	; (80199ac <_dtoa_r+0xbcc>)
 80197ac:	4602      	mov	r2, r0
 80197ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80197b2:	f7ff bb2e 	b.w	8018e12 <_dtoa_r+0x32>
 80197b6:	693a      	ldr	r2, [r7, #16]
 80197b8:	3202      	adds	r2, #2
 80197ba:	0092      	lsls	r2, r2, #2
 80197bc:	f107 010c 	add.w	r1, r7, #12
 80197c0:	300c      	adds	r0, #12
 80197c2:	f7fe fc5b 	bl	801807c <memcpy>
 80197c6:	2201      	movs	r2, #1
 80197c8:	4629      	mov	r1, r5
 80197ca:	4620      	mov	r0, r4
 80197cc:	f000 fc1e 	bl	801a00c <__lshift>
 80197d0:	9b00      	ldr	r3, [sp, #0]
 80197d2:	3301      	adds	r3, #1
 80197d4:	9301      	str	r3, [sp, #4]
 80197d6:	9b00      	ldr	r3, [sp, #0]
 80197d8:	444b      	add	r3, r9
 80197da:	9307      	str	r3, [sp, #28]
 80197dc:	9b02      	ldr	r3, [sp, #8]
 80197de:	f003 0301 	and.w	r3, r3, #1
 80197e2:	46b8      	mov	r8, r7
 80197e4:	9306      	str	r3, [sp, #24]
 80197e6:	4607      	mov	r7, r0
 80197e8:	9b01      	ldr	r3, [sp, #4]
 80197ea:	4631      	mov	r1, r6
 80197ec:	3b01      	subs	r3, #1
 80197ee:	4658      	mov	r0, fp
 80197f0:	9302      	str	r3, [sp, #8]
 80197f2:	f7ff fa69 	bl	8018cc8 <quorem>
 80197f6:	4603      	mov	r3, r0
 80197f8:	3330      	adds	r3, #48	; 0x30
 80197fa:	9004      	str	r0, [sp, #16]
 80197fc:	4641      	mov	r1, r8
 80197fe:	4658      	mov	r0, fp
 8019800:	9308      	str	r3, [sp, #32]
 8019802:	f000 fc6f 	bl	801a0e4 <__mcmp>
 8019806:	463a      	mov	r2, r7
 8019808:	4681      	mov	r9, r0
 801980a:	4631      	mov	r1, r6
 801980c:	4620      	mov	r0, r4
 801980e:	f000 fc85 	bl	801a11c <__mdiff>
 8019812:	68c2      	ldr	r2, [r0, #12]
 8019814:	9b08      	ldr	r3, [sp, #32]
 8019816:	4605      	mov	r5, r0
 8019818:	bb02      	cbnz	r2, 801985c <_dtoa_r+0xa7c>
 801981a:	4601      	mov	r1, r0
 801981c:	4658      	mov	r0, fp
 801981e:	f000 fc61 	bl	801a0e4 <__mcmp>
 8019822:	9b08      	ldr	r3, [sp, #32]
 8019824:	4602      	mov	r2, r0
 8019826:	4629      	mov	r1, r5
 8019828:	4620      	mov	r0, r4
 801982a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801982e:	f000 fa1b 	bl	8019c68 <_Bfree>
 8019832:	9b05      	ldr	r3, [sp, #20]
 8019834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019836:	9d01      	ldr	r5, [sp, #4]
 8019838:	ea43 0102 	orr.w	r1, r3, r2
 801983c:	9b06      	ldr	r3, [sp, #24]
 801983e:	430b      	orrs	r3, r1
 8019840:	9b08      	ldr	r3, [sp, #32]
 8019842:	d10d      	bne.n	8019860 <_dtoa_r+0xa80>
 8019844:	2b39      	cmp	r3, #57	; 0x39
 8019846:	d029      	beq.n	801989c <_dtoa_r+0xabc>
 8019848:	f1b9 0f00 	cmp.w	r9, #0
 801984c:	dd01      	ble.n	8019852 <_dtoa_r+0xa72>
 801984e:	9b04      	ldr	r3, [sp, #16]
 8019850:	3331      	adds	r3, #49	; 0x31
 8019852:	9a02      	ldr	r2, [sp, #8]
 8019854:	7013      	strb	r3, [r2, #0]
 8019856:	e774      	b.n	8019742 <_dtoa_r+0x962>
 8019858:	4638      	mov	r0, r7
 801985a:	e7b9      	b.n	80197d0 <_dtoa_r+0x9f0>
 801985c:	2201      	movs	r2, #1
 801985e:	e7e2      	b.n	8019826 <_dtoa_r+0xa46>
 8019860:	f1b9 0f00 	cmp.w	r9, #0
 8019864:	db06      	blt.n	8019874 <_dtoa_r+0xa94>
 8019866:	9905      	ldr	r1, [sp, #20]
 8019868:	ea41 0909 	orr.w	r9, r1, r9
 801986c:	9906      	ldr	r1, [sp, #24]
 801986e:	ea59 0101 	orrs.w	r1, r9, r1
 8019872:	d120      	bne.n	80198b6 <_dtoa_r+0xad6>
 8019874:	2a00      	cmp	r2, #0
 8019876:	ddec      	ble.n	8019852 <_dtoa_r+0xa72>
 8019878:	4659      	mov	r1, fp
 801987a:	2201      	movs	r2, #1
 801987c:	4620      	mov	r0, r4
 801987e:	9301      	str	r3, [sp, #4]
 8019880:	f000 fbc4 	bl	801a00c <__lshift>
 8019884:	4631      	mov	r1, r6
 8019886:	4683      	mov	fp, r0
 8019888:	f000 fc2c 	bl	801a0e4 <__mcmp>
 801988c:	2800      	cmp	r0, #0
 801988e:	9b01      	ldr	r3, [sp, #4]
 8019890:	dc02      	bgt.n	8019898 <_dtoa_r+0xab8>
 8019892:	d1de      	bne.n	8019852 <_dtoa_r+0xa72>
 8019894:	07da      	lsls	r2, r3, #31
 8019896:	d5dc      	bpl.n	8019852 <_dtoa_r+0xa72>
 8019898:	2b39      	cmp	r3, #57	; 0x39
 801989a:	d1d8      	bne.n	801984e <_dtoa_r+0xa6e>
 801989c:	9a02      	ldr	r2, [sp, #8]
 801989e:	2339      	movs	r3, #57	; 0x39
 80198a0:	7013      	strb	r3, [r2, #0]
 80198a2:	462b      	mov	r3, r5
 80198a4:	461d      	mov	r5, r3
 80198a6:	3b01      	subs	r3, #1
 80198a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80198ac:	2a39      	cmp	r2, #57	; 0x39
 80198ae:	d050      	beq.n	8019952 <_dtoa_r+0xb72>
 80198b0:	3201      	adds	r2, #1
 80198b2:	701a      	strb	r2, [r3, #0]
 80198b4:	e745      	b.n	8019742 <_dtoa_r+0x962>
 80198b6:	2a00      	cmp	r2, #0
 80198b8:	dd03      	ble.n	80198c2 <_dtoa_r+0xae2>
 80198ba:	2b39      	cmp	r3, #57	; 0x39
 80198bc:	d0ee      	beq.n	801989c <_dtoa_r+0xabc>
 80198be:	3301      	adds	r3, #1
 80198c0:	e7c7      	b.n	8019852 <_dtoa_r+0xa72>
 80198c2:	9a01      	ldr	r2, [sp, #4]
 80198c4:	9907      	ldr	r1, [sp, #28]
 80198c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80198ca:	428a      	cmp	r2, r1
 80198cc:	d02a      	beq.n	8019924 <_dtoa_r+0xb44>
 80198ce:	4659      	mov	r1, fp
 80198d0:	2300      	movs	r3, #0
 80198d2:	220a      	movs	r2, #10
 80198d4:	4620      	mov	r0, r4
 80198d6:	f000 f9e9 	bl	8019cac <__multadd>
 80198da:	45b8      	cmp	r8, r7
 80198dc:	4683      	mov	fp, r0
 80198de:	f04f 0300 	mov.w	r3, #0
 80198e2:	f04f 020a 	mov.w	r2, #10
 80198e6:	4641      	mov	r1, r8
 80198e8:	4620      	mov	r0, r4
 80198ea:	d107      	bne.n	80198fc <_dtoa_r+0xb1c>
 80198ec:	f000 f9de 	bl	8019cac <__multadd>
 80198f0:	4680      	mov	r8, r0
 80198f2:	4607      	mov	r7, r0
 80198f4:	9b01      	ldr	r3, [sp, #4]
 80198f6:	3301      	adds	r3, #1
 80198f8:	9301      	str	r3, [sp, #4]
 80198fa:	e775      	b.n	80197e8 <_dtoa_r+0xa08>
 80198fc:	f000 f9d6 	bl	8019cac <__multadd>
 8019900:	4639      	mov	r1, r7
 8019902:	4680      	mov	r8, r0
 8019904:	2300      	movs	r3, #0
 8019906:	220a      	movs	r2, #10
 8019908:	4620      	mov	r0, r4
 801990a:	f000 f9cf 	bl	8019cac <__multadd>
 801990e:	4607      	mov	r7, r0
 8019910:	e7f0      	b.n	80198f4 <_dtoa_r+0xb14>
 8019912:	f1b9 0f00 	cmp.w	r9, #0
 8019916:	9a00      	ldr	r2, [sp, #0]
 8019918:	bfcc      	ite	gt
 801991a:	464d      	movgt	r5, r9
 801991c:	2501      	movle	r5, #1
 801991e:	4415      	add	r5, r2
 8019920:	f04f 0800 	mov.w	r8, #0
 8019924:	4659      	mov	r1, fp
 8019926:	2201      	movs	r2, #1
 8019928:	4620      	mov	r0, r4
 801992a:	9301      	str	r3, [sp, #4]
 801992c:	f000 fb6e 	bl	801a00c <__lshift>
 8019930:	4631      	mov	r1, r6
 8019932:	4683      	mov	fp, r0
 8019934:	f000 fbd6 	bl	801a0e4 <__mcmp>
 8019938:	2800      	cmp	r0, #0
 801993a:	dcb2      	bgt.n	80198a2 <_dtoa_r+0xac2>
 801993c:	d102      	bne.n	8019944 <_dtoa_r+0xb64>
 801993e:	9b01      	ldr	r3, [sp, #4]
 8019940:	07db      	lsls	r3, r3, #31
 8019942:	d4ae      	bmi.n	80198a2 <_dtoa_r+0xac2>
 8019944:	462b      	mov	r3, r5
 8019946:	461d      	mov	r5, r3
 8019948:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801994c:	2a30      	cmp	r2, #48	; 0x30
 801994e:	d0fa      	beq.n	8019946 <_dtoa_r+0xb66>
 8019950:	e6f7      	b.n	8019742 <_dtoa_r+0x962>
 8019952:	9a00      	ldr	r2, [sp, #0]
 8019954:	429a      	cmp	r2, r3
 8019956:	d1a5      	bne.n	80198a4 <_dtoa_r+0xac4>
 8019958:	f10a 0a01 	add.w	sl, sl, #1
 801995c:	2331      	movs	r3, #49	; 0x31
 801995e:	e779      	b.n	8019854 <_dtoa_r+0xa74>
 8019960:	4b13      	ldr	r3, [pc, #76]	; (80199b0 <_dtoa_r+0xbd0>)
 8019962:	f7ff baaf 	b.w	8018ec4 <_dtoa_r+0xe4>
 8019966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019968:	2b00      	cmp	r3, #0
 801996a:	f47f aa86 	bne.w	8018e7a <_dtoa_r+0x9a>
 801996e:	4b11      	ldr	r3, [pc, #68]	; (80199b4 <_dtoa_r+0xbd4>)
 8019970:	f7ff baa8 	b.w	8018ec4 <_dtoa_r+0xe4>
 8019974:	f1b9 0f00 	cmp.w	r9, #0
 8019978:	dc03      	bgt.n	8019982 <_dtoa_r+0xba2>
 801997a:	9b05      	ldr	r3, [sp, #20]
 801997c:	2b02      	cmp	r3, #2
 801997e:	f73f aec9 	bgt.w	8019714 <_dtoa_r+0x934>
 8019982:	9d00      	ldr	r5, [sp, #0]
 8019984:	4631      	mov	r1, r6
 8019986:	4658      	mov	r0, fp
 8019988:	f7ff f99e 	bl	8018cc8 <quorem>
 801998c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019990:	f805 3b01 	strb.w	r3, [r5], #1
 8019994:	9a00      	ldr	r2, [sp, #0]
 8019996:	1aaa      	subs	r2, r5, r2
 8019998:	4591      	cmp	r9, r2
 801999a:	ddba      	ble.n	8019912 <_dtoa_r+0xb32>
 801999c:	4659      	mov	r1, fp
 801999e:	2300      	movs	r3, #0
 80199a0:	220a      	movs	r2, #10
 80199a2:	4620      	mov	r0, r4
 80199a4:	f000 f982 	bl	8019cac <__multadd>
 80199a8:	4683      	mov	fp, r0
 80199aa:	e7eb      	b.n	8019984 <_dtoa_r+0xba4>
 80199ac:	0801d674 	.word	0x0801d674
 80199b0:	0801d3d0 	.word	0x0801d3d0
 80199b4:	0801d608 	.word	0x0801d608

080199b8 <std>:
 80199b8:	2300      	movs	r3, #0
 80199ba:	b510      	push	{r4, lr}
 80199bc:	4604      	mov	r4, r0
 80199be:	e9c0 3300 	strd	r3, r3, [r0]
 80199c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80199c6:	6083      	str	r3, [r0, #8]
 80199c8:	8181      	strh	r1, [r0, #12]
 80199ca:	6643      	str	r3, [r0, #100]	; 0x64
 80199cc:	81c2      	strh	r2, [r0, #14]
 80199ce:	6183      	str	r3, [r0, #24]
 80199d0:	4619      	mov	r1, r3
 80199d2:	2208      	movs	r2, #8
 80199d4:	305c      	adds	r0, #92	; 0x5c
 80199d6:	f7fe fb5f 	bl	8018098 <memset>
 80199da:	4b05      	ldr	r3, [pc, #20]	; (80199f0 <std+0x38>)
 80199dc:	6263      	str	r3, [r4, #36]	; 0x24
 80199de:	4b05      	ldr	r3, [pc, #20]	; (80199f4 <std+0x3c>)
 80199e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80199e2:	4b05      	ldr	r3, [pc, #20]	; (80199f8 <std+0x40>)
 80199e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80199e6:	4b05      	ldr	r3, [pc, #20]	; (80199fc <std+0x44>)
 80199e8:	6224      	str	r4, [r4, #32]
 80199ea:	6323      	str	r3, [r4, #48]	; 0x30
 80199ec:	bd10      	pop	{r4, pc}
 80199ee:	bf00      	nop
 80199f0:	0801a9e5 	.word	0x0801a9e5
 80199f4:	0801aa07 	.word	0x0801aa07
 80199f8:	0801aa3f 	.word	0x0801aa3f
 80199fc:	0801aa63 	.word	0x0801aa63

08019a00 <_cleanup_r>:
 8019a00:	4901      	ldr	r1, [pc, #4]	; (8019a08 <_cleanup_r+0x8>)
 8019a02:	f000 b8c1 	b.w	8019b88 <_fwalk_reent>
 8019a06:	bf00      	nop
 8019a08:	0801ad4d 	.word	0x0801ad4d

08019a0c <__sfmoreglue>:
 8019a0c:	b570      	push	{r4, r5, r6, lr}
 8019a0e:	1e4a      	subs	r2, r1, #1
 8019a10:	2568      	movs	r5, #104	; 0x68
 8019a12:	4355      	muls	r5, r2
 8019a14:	460e      	mov	r6, r1
 8019a16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a1a:	f000 fcc3 	bl	801a3a4 <_malloc_r>
 8019a1e:	4604      	mov	r4, r0
 8019a20:	b140      	cbz	r0, 8019a34 <__sfmoreglue+0x28>
 8019a22:	2100      	movs	r1, #0
 8019a24:	e9c0 1600 	strd	r1, r6, [r0]
 8019a28:	300c      	adds	r0, #12
 8019a2a:	60a0      	str	r0, [r4, #8]
 8019a2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019a30:	f7fe fb32 	bl	8018098 <memset>
 8019a34:	4620      	mov	r0, r4
 8019a36:	bd70      	pop	{r4, r5, r6, pc}

08019a38 <__sfp_lock_acquire>:
 8019a38:	4801      	ldr	r0, [pc, #4]	; (8019a40 <__sfp_lock_acquire+0x8>)
 8019a3a:	f000 b8ca 	b.w	8019bd2 <__retarget_lock_acquire_recursive>
 8019a3e:	bf00      	nop
 8019a40:	20003dcc 	.word	0x20003dcc

08019a44 <__sfp_lock_release>:
 8019a44:	4801      	ldr	r0, [pc, #4]	; (8019a4c <__sfp_lock_release+0x8>)
 8019a46:	f000 b8c5 	b.w	8019bd4 <__retarget_lock_release_recursive>
 8019a4a:	bf00      	nop
 8019a4c:	20003dcc 	.word	0x20003dcc

08019a50 <__sinit_lock_acquire>:
 8019a50:	4801      	ldr	r0, [pc, #4]	; (8019a58 <__sinit_lock_acquire+0x8>)
 8019a52:	f000 b8be 	b.w	8019bd2 <__retarget_lock_acquire_recursive>
 8019a56:	bf00      	nop
 8019a58:	20003dcb 	.word	0x20003dcb

08019a5c <__sinit_lock_release>:
 8019a5c:	4801      	ldr	r0, [pc, #4]	; (8019a64 <__sinit_lock_release+0x8>)
 8019a5e:	f000 b8b9 	b.w	8019bd4 <__retarget_lock_release_recursive>
 8019a62:	bf00      	nop
 8019a64:	20003dcb 	.word	0x20003dcb

08019a68 <__sinit>:
 8019a68:	b510      	push	{r4, lr}
 8019a6a:	4604      	mov	r4, r0
 8019a6c:	f7ff fff0 	bl	8019a50 <__sinit_lock_acquire>
 8019a70:	69a3      	ldr	r3, [r4, #24]
 8019a72:	b11b      	cbz	r3, 8019a7c <__sinit+0x14>
 8019a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a78:	f7ff bff0 	b.w	8019a5c <__sinit_lock_release>
 8019a7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019a80:	6523      	str	r3, [r4, #80]	; 0x50
 8019a82:	4b13      	ldr	r3, [pc, #76]	; (8019ad0 <__sinit+0x68>)
 8019a84:	4a13      	ldr	r2, [pc, #76]	; (8019ad4 <__sinit+0x6c>)
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	62a2      	str	r2, [r4, #40]	; 0x28
 8019a8a:	42a3      	cmp	r3, r4
 8019a8c:	bf04      	itt	eq
 8019a8e:	2301      	moveq	r3, #1
 8019a90:	61a3      	streq	r3, [r4, #24]
 8019a92:	4620      	mov	r0, r4
 8019a94:	f000 f820 	bl	8019ad8 <__sfp>
 8019a98:	6060      	str	r0, [r4, #4]
 8019a9a:	4620      	mov	r0, r4
 8019a9c:	f000 f81c 	bl	8019ad8 <__sfp>
 8019aa0:	60a0      	str	r0, [r4, #8]
 8019aa2:	4620      	mov	r0, r4
 8019aa4:	f000 f818 	bl	8019ad8 <__sfp>
 8019aa8:	2200      	movs	r2, #0
 8019aaa:	60e0      	str	r0, [r4, #12]
 8019aac:	2104      	movs	r1, #4
 8019aae:	6860      	ldr	r0, [r4, #4]
 8019ab0:	f7ff ff82 	bl	80199b8 <std>
 8019ab4:	68a0      	ldr	r0, [r4, #8]
 8019ab6:	2201      	movs	r2, #1
 8019ab8:	2109      	movs	r1, #9
 8019aba:	f7ff ff7d 	bl	80199b8 <std>
 8019abe:	68e0      	ldr	r0, [r4, #12]
 8019ac0:	2202      	movs	r2, #2
 8019ac2:	2112      	movs	r1, #18
 8019ac4:	f7ff ff78 	bl	80199b8 <std>
 8019ac8:	2301      	movs	r3, #1
 8019aca:	61a3      	str	r3, [r4, #24]
 8019acc:	e7d2      	b.n	8019a74 <__sinit+0xc>
 8019ace:	bf00      	nop
 8019ad0:	0801d3bc 	.word	0x0801d3bc
 8019ad4:	08019a01 	.word	0x08019a01

08019ad8 <__sfp>:
 8019ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019ada:	4607      	mov	r7, r0
 8019adc:	f7ff ffac 	bl	8019a38 <__sfp_lock_acquire>
 8019ae0:	4b1e      	ldr	r3, [pc, #120]	; (8019b5c <__sfp+0x84>)
 8019ae2:	681e      	ldr	r6, [r3, #0]
 8019ae4:	69b3      	ldr	r3, [r6, #24]
 8019ae6:	b913      	cbnz	r3, 8019aee <__sfp+0x16>
 8019ae8:	4630      	mov	r0, r6
 8019aea:	f7ff ffbd 	bl	8019a68 <__sinit>
 8019aee:	3648      	adds	r6, #72	; 0x48
 8019af0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019af4:	3b01      	subs	r3, #1
 8019af6:	d503      	bpl.n	8019b00 <__sfp+0x28>
 8019af8:	6833      	ldr	r3, [r6, #0]
 8019afa:	b30b      	cbz	r3, 8019b40 <__sfp+0x68>
 8019afc:	6836      	ldr	r6, [r6, #0]
 8019afe:	e7f7      	b.n	8019af0 <__sfp+0x18>
 8019b00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b04:	b9d5      	cbnz	r5, 8019b3c <__sfp+0x64>
 8019b06:	4b16      	ldr	r3, [pc, #88]	; (8019b60 <__sfp+0x88>)
 8019b08:	60e3      	str	r3, [r4, #12]
 8019b0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b0e:	6665      	str	r5, [r4, #100]	; 0x64
 8019b10:	f000 f85e 	bl	8019bd0 <__retarget_lock_init_recursive>
 8019b14:	f7ff ff96 	bl	8019a44 <__sfp_lock_release>
 8019b18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b20:	6025      	str	r5, [r4, #0]
 8019b22:	61a5      	str	r5, [r4, #24]
 8019b24:	2208      	movs	r2, #8
 8019b26:	4629      	mov	r1, r5
 8019b28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b2c:	f7fe fab4 	bl	8018098 <memset>
 8019b30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b38:	4620      	mov	r0, r4
 8019b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b3c:	3468      	adds	r4, #104	; 0x68
 8019b3e:	e7d9      	b.n	8019af4 <__sfp+0x1c>
 8019b40:	2104      	movs	r1, #4
 8019b42:	4638      	mov	r0, r7
 8019b44:	f7ff ff62 	bl	8019a0c <__sfmoreglue>
 8019b48:	4604      	mov	r4, r0
 8019b4a:	6030      	str	r0, [r6, #0]
 8019b4c:	2800      	cmp	r0, #0
 8019b4e:	d1d5      	bne.n	8019afc <__sfp+0x24>
 8019b50:	f7ff ff78 	bl	8019a44 <__sfp_lock_release>
 8019b54:	230c      	movs	r3, #12
 8019b56:	603b      	str	r3, [r7, #0]
 8019b58:	e7ee      	b.n	8019b38 <__sfp+0x60>
 8019b5a:	bf00      	nop
 8019b5c:	0801d3bc 	.word	0x0801d3bc
 8019b60:	ffff0001 	.word	0xffff0001

08019b64 <fiprintf>:
 8019b64:	b40e      	push	{r1, r2, r3}
 8019b66:	b503      	push	{r0, r1, lr}
 8019b68:	4601      	mov	r1, r0
 8019b6a:	ab03      	add	r3, sp, #12
 8019b6c:	4805      	ldr	r0, [pc, #20]	; (8019b84 <fiprintf+0x20>)
 8019b6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019b72:	6800      	ldr	r0, [r0, #0]
 8019b74:	9301      	str	r3, [sp, #4]
 8019b76:	f000 fdf5 	bl	801a764 <_vfiprintf_r>
 8019b7a:	b002      	add	sp, #8
 8019b7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019b80:	b003      	add	sp, #12
 8019b82:	4770      	bx	lr
 8019b84:	20000944 	.word	0x20000944

08019b88 <_fwalk_reent>:
 8019b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b8c:	4606      	mov	r6, r0
 8019b8e:	4688      	mov	r8, r1
 8019b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b94:	2700      	movs	r7, #0
 8019b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8019b9e:	d505      	bpl.n	8019bac <_fwalk_reent+0x24>
 8019ba0:	6824      	ldr	r4, [r4, #0]
 8019ba2:	2c00      	cmp	r4, #0
 8019ba4:	d1f7      	bne.n	8019b96 <_fwalk_reent+0xe>
 8019ba6:	4638      	mov	r0, r7
 8019ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bac:	89ab      	ldrh	r3, [r5, #12]
 8019bae:	2b01      	cmp	r3, #1
 8019bb0:	d907      	bls.n	8019bc2 <_fwalk_reent+0x3a>
 8019bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	d003      	beq.n	8019bc2 <_fwalk_reent+0x3a>
 8019bba:	4629      	mov	r1, r5
 8019bbc:	4630      	mov	r0, r6
 8019bbe:	47c0      	blx	r8
 8019bc0:	4307      	orrs	r7, r0
 8019bc2:	3568      	adds	r5, #104	; 0x68
 8019bc4:	e7e9      	b.n	8019b9a <_fwalk_reent+0x12>
	...

08019bc8 <_localeconv_r>:
 8019bc8:	4800      	ldr	r0, [pc, #0]	; (8019bcc <_localeconv_r+0x4>)
 8019bca:	4770      	bx	lr
 8019bcc:	20000a98 	.word	0x20000a98

08019bd0 <__retarget_lock_init_recursive>:
 8019bd0:	4770      	bx	lr

08019bd2 <__retarget_lock_acquire_recursive>:
 8019bd2:	4770      	bx	lr

08019bd4 <__retarget_lock_release_recursive>:
 8019bd4:	4770      	bx	lr
	...

08019bd8 <malloc>:
 8019bd8:	4b02      	ldr	r3, [pc, #8]	; (8019be4 <malloc+0xc>)
 8019bda:	4601      	mov	r1, r0
 8019bdc:	6818      	ldr	r0, [r3, #0]
 8019bde:	f000 bbe1 	b.w	801a3a4 <_malloc_r>
 8019be2:	bf00      	nop
 8019be4:	20000944 	.word	0x20000944

08019be8 <_Balloc>:
 8019be8:	b570      	push	{r4, r5, r6, lr}
 8019bea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019bec:	4604      	mov	r4, r0
 8019bee:	460d      	mov	r5, r1
 8019bf0:	b976      	cbnz	r6, 8019c10 <_Balloc+0x28>
 8019bf2:	2010      	movs	r0, #16
 8019bf4:	f7ff fff0 	bl	8019bd8 <malloc>
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	6260      	str	r0, [r4, #36]	; 0x24
 8019bfc:	b920      	cbnz	r0, 8019c08 <_Balloc+0x20>
 8019bfe:	4b18      	ldr	r3, [pc, #96]	; (8019c60 <_Balloc+0x78>)
 8019c00:	4818      	ldr	r0, [pc, #96]	; (8019c64 <_Balloc+0x7c>)
 8019c02:	2166      	movs	r1, #102	; 0x66
 8019c04:	f7ff f842 	bl	8018c8c <__assert_func>
 8019c08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019c0c:	6006      	str	r6, [r0, #0]
 8019c0e:	60c6      	str	r6, [r0, #12]
 8019c10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8019c12:	68f3      	ldr	r3, [r6, #12]
 8019c14:	b183      	cbz	r3, 8019c38 <_Balloc+0x50>
 8019c16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c18:	68db      	ldr	r3, [r3, #12]
 8019c1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019c1e:	b9b8      	cbnz	r0, 8019c50 <_Balloc+0x68>
 8019c20:	2101      	movs	r1, #1
 8019c22:	fa01 f605 	lsl.w	r6, r1, r5
 8019c26:	1d72      	adds	r2, r6, #5
 8019c28:	0092      	lsls	r2, r2, #2
 8019c2a:	4620      	mov	r0, r4
 8019c2c:	f000 fb5a 	bl	801a2e4 <_calloc_r>
 8019c30:	b160      	cbz	r0, 8019c4c <_Balloc+0x64>
 8019c32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019c36:	e00e      	b.n	8019c56 <_Balloc+0x6e>
 8019c38:	2221      	movs	r2, #33	; 0x21
 8019c3a:	2104      	movs	r1, #4
 8019c3c:	4620      	mov	r0, r4
 8019c3e:	f000 fb51 	bl	801a2e4 <_calloc_r>
 8019c42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019c44:	60f0      	str	r0, [r6, #12]
 8019c46:	68db      	ldr	r3, [r3, #12]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d1e4      	bne.n	8019c16 <_Balloc+0x2e>
 8019c4c:	2000      	movs	r0, #0
 8019c4e:	bd70      	pop	{r4, r5, r6, pc}
 8019c50:	6802      	ldr	r2, [r0, #0]
 8019c52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019c56:	2300      	movs	r3, #0
 8019c58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019c5c:	e7f7      	b.n	8019c4e <_Balloc+0x66>
 8019c5e:	bf00      	nop
 8019c60:	0801d3f4 	.word	0x0801d3f4
 8019c64:	0801d6e8 	.word	0x0801d6e8

08019c68 <_Bfree>:
 8019c68:	b570      	push	{r4, r5, r6, lr}
 8019c6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019c6c:	4605      	mov	r5, r0
 8019c6e:	460c      	mov	r4, r1
 8019c70:	b976      	cbnz	r6, 8019c90 <_Bfree+0x28>
 8019c72:	2010      	movs	r0, #16
 8019c74:	f7ff ffb0 	bl	8019bd8 <malloc>
 8019c78:	4602      	mov	r2, r0
 8019c7a:	6268      	str	r0, [r5, #36]	; 0x24
 8019c7c:	b920      	cbnz	r0, 8019c88 <_Bfree+0x20>
 8019c7e:	4b09      	ldr	r3, [pc, #36]	; (8019ca4 <_Bfree+0x3c>)
 8019c80:	4809      	ldr	r0, [pc, #36]	; (8019ca8 <_Bfree+0x40>)
 8019c82:	218a      	movs	r1, #138	; 0x8a
 8019c84:	f7ff f802 	bl	8018c8c <__assert_func>
 8019c88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019c8c:	6006      	str	r6, [r0, #0]
 8019c8e:	60c6      	str	r6, [r0, #12]
 8019c90:	b13c      	cbz	r4, 8019ca2 <_Bfree+0x3a>
 8019c92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8019c94:	6862      	ldr	r2, [r4, #4]
 8019c96:	68db      	ldr	r3, [r3, #12]
 8019c98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019c9c:	6021      	str	r1, [r4, #0]
 8019c9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019ca2:	bd70      	pop	{r4, r5, r6, pc}
 8019ca4:	0801d3f4 	.word	0x0801d3f4
 8019ca8:	0801d6e8 	.word	0x0801d6e8

08019cac <__multadd>:
 8019cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cb0:	690e      	ldr	r6, [r1, #16]
 8019cb2:	4607      	mov	r7, r0
 8019cb4:	4698      	mov	r8, r3
 8019cb6:	460c      	mov	r4, r1
 8019cb8:	f101 0014 	add.w	r0, r1, #20
 8019cbc:	2300      	movs	r3, #0
 8019cbe:	6805      	ldr	r5, [r0, #0]
 8019cc0:	b2a9      	uxth	r1, r5
 8019cc2:	fb02 8101 	mla	r1, r2, r1, r8
 8019cc6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019cca:	0c2d      	lsrs	r5, r5, #16
 8019ccc:	fb02 c505 	mla	r5, r2, r5, ip
 8019cd0:	b289      	uxth	r1, r1
 8019cd2:	3301      	adds	r3, #1
 8019cd4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019cd8:	429e      	cmp	r6, r3
 8019cda:	f840 1b04 	str.w	r1, [r0], #4
 8019cde:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8019ce2:	dcec      	bgt.n	8019cbe <__multadd+0x12>
 8019ce4:	f1b8 0f00 	cmp.w	r8, #0
 8019ce8:	d022      	beq.n	8019d30 <__multadd+0x84>
 8019cea:	68a3      	ldr	r3, [r4, #8]
 8019cec:	42b3      	cmp	r3, r6
 8019cee:	dc19      	bgt.n	8019d24 <__multadd+0x78>
 8019cf0:	6861      	ldr	r1, [r4, #4]
 8019cf2:	4638      	mov	r0, r7
 8019cf4:	3101      	adds	r1, #1
 8019cf6:	f7ff ff77 	bl	8019be8 <_Balloc>
 8019cfa:	4605      	mov	r5, r0
 8019cfc:	b928      	cbnz	r0, 8019d0a <__multadd+0x5e>
 8019cfe:	4602      	mov	r2, r0
 8019d00:	4b0d      	ldr	r3, [pc, #52]	; (8019d38 <__multadd+0x8c>)
 8019d02:	480e      	ldr	r0, [pc, #56]	; (8019d3c <__multadd+0x90>)
 8019d04:	21b5      	movs	r1, #181	; 0xb5
 8019d06:	f7fe ffc1 	bl	8018c8c <__assert_func>
 8019d0a:	6922      	ldr	r2, [r4, #16]
 8019d0c:	3202      	adds	r2, #2
 8019d0e:	f104 010c 	add.w	r1, r4, #12
 8019d12:	0092      	lsls	r2, r2, #2
 8019d14:	300c      	adds	r0, #12
 8019d16:	f7fe f9b1 	bl	801807c <memcpy>
 8019d1a:	4621      	mov	r1, r4
 8019d1c:	4638      	mov	r0, r7
 8019d1e:	f7ff ffa3 	bl	8019c68 <_Bfree>
 8019d22:	462c      	mov	r4, r5
 8019d24:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019d28:	3601      	adds	r6, #1
 8019d2a:	f8c3 8014 	str.w	r8, [r3, #20]
 8019d2e:	6126      	str	r6, [r4, #16]
 8019d30:	4620      	mov	r0, r4
 8019d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d36:	bf00      	nop
 8019d38:	0801d674 	.word	0x0801d674
 8019d3c:	0801d6e8 	.word	0x0801d6e8

08019d40 <__hi0bits>:
 8019d40:	0c03      	lsrs	r3, r0, #16
 8019d42:	041b      	lsls	r3, r3, #16
 8019d44:	b9d3      	cbnz	r3, 8019d7c <__hi0bits+0x3c>
 8019d46:	0400      	lsls	r0, r0, #16
 8019d48:	2310      	movs	r3, #16
 8019d4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019d4e:	bf04      	itt	eq
 8019d50:	0200      	lsleq	r0, r0, #8
 8019d52:	3308      	addeq	r3, #8
 8019d54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019d58:	bf04      	itt	eq
 8019d5a:	0100      	lsleq	r0, r0, #4
 8019d5c:	3304      	addeq	r3, #4
 8019d5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019d62:	bf04      	itt	eq
 8019d64:	0080      	lsleq	r0, r0, #2
 8019d66:	3302      	addeq	r3, #2
 8019d68:	2800      	cmp	r0, #0
 8019d6a:	db05      	blt.n	8019d78 <__hi0bits+0x38>
 8019d6c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019d70:	f103 0301 	add.w	r3, r3, #1
 8019d74:	bf08      	it	eq
 8019d76:	2320      	moveq	r3, #32
 8019d78:	4618      	mov	r0, r3
 8019d7a:	4770      	bx	lr
 8019d7c:	2300      	movs	r3, #0
 8019d7e:	e7e4      	b.n	8019d4a <__hi0bits+0xa>

08019d80 <__lo0bits>:
 8019d80:	6803      	ldr	r3, [r0, #0]
 8019d82:	f013 0207 	ands.w	r2, r3, #7
 8019d86:	4601      	mov	r1, r0
 8019d88:	d00b      	beq.n	8019da2 <__lo0bits+0x22>
 8019d8a:	07da      	lsls	r2, r3, #31
 8019d8c:	d424      	bmi.n	8019dd8 <__lo0bits+0x58>
 8019d8e:	0798      	lsls	r0, r3, #30
 8019d90:	bf49      	itett	mi
 8019d92:	085b      	lsrmi	r3, r3, #1
 8019d94:	089b      	lsrpl	r3, r3, #2
 8019d96:	2001      	movmi	r0, #1
 8019d98:	600b      	strmi	r3, [r1, #0]
 8019d9a:	bf5c      	itt	pl
 8019d9c:	600b      	strpl	r3, [r1, #0]
 8019d9e:	2002      	movpl	r0, #2
 8019da0:	4770      	bx	lr
 8019da2:	b298      	uxth	r0, r3
 8019da4:	b9b0      	cbnz	r0, 8019dd4 <__lo0bits+0x54>
 8019da6:	0c1b      	lsrs	r3, r3, #16
 8019da8:	2010      	movs	r0, #16
 8019daa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8019dae:	bf04      	itt	eq
 8019db0:	0a1b      	lsreq	r3, r3, #8
 8019db2:	3008      	addeq	r0, #8
 8019db4:	071a      	lsls	r2, r3, #28
 8019db6:	bf04      	itt	eq
 8019db8:	091b      	lsreq	r3, r3, #4
 8019dba:	3004      	addeq	r0, #4
 8019dbc:	079a      	lsls	r2, r3, #30
 8019dbe:	bf04      	itt	eq
 8019dc0:	089b      	lsreq	r3, r3, #2
 8019dc2:	3002      	addeq	r0, #2
 8019dc4:	07da      	lsls	r2, r3, #31
 8019dc6:	d403      	bmi.n	8019dd0 <__lo0bits+0x50>
 8019dc8:	085b      	lsrs	r3, r3, #1
 8019dca:	f100 0001 	add.w	r0, r0, #1
 8019dce:	d005      	beq.n	8019ddc <__lo0bits+0x5c>
 8019dd0:	600b      	str	r3, [r1, #0]
 8019dd2:	4770      	bx	lr
 8019dd4:	4610      	mov	r0, r2
 8019dd6:	e7e8      	b.n	8019daa <__lo0bits+0x2a>
 8019dd8:	2000      	movs	r0, #0
 8019dda:	4770      	bx	lr
 8019ddc:	2020      	movs	r0, #32
 8019dde:	4770      	bx	lr

08019de0 <__i2b>:
 8019de0:	b510      	push	{r4, lr}
 8019de2:	460c      	mov	r4, r1
 8019de4:	2101      	movs	r1, #1
 8019de6:	f7ff feff 	bl	8019be8 <_Balloc>
 8019dea:	4602      	mov	r2, r0
 8019dec:	b928      	cbnz	r0, 8019dfa <__i2b+0x1a>
 8019dee:	4b05      	ldr	r3, [pc, #20]	; (8019e04 <__i2b+0x24>)
 8019df0:	4805      	ldr	r0, [pc, #20]	; (8019e08 <__i2b+0x28>)
 8019df2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8019df6:	f7fe ff49 	bl	8018c8c <__assert_func>
 8019dfa:	2301      	movs	r3, #1
 8019dfc:	6144      	str	r4, [r0, #20]
 8019dfe:	6103      	str	r3, [r0, #16]
 8019e00:	bd10      	pop	{r4, pc}
 8019e02:	bf00      	nop
 8019e04:	0801d674 	.word	0x0801d674
 8019e08:	0801d6e8 	.word	0x0801d6e8

08019e0c <__multiply>:
 8019e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e10:	4614      	mov	r4, r2
 8019e12:	690a      	ldr	r2, [r1, #16]
 8019e14:	6923      	ldr	r3, [r4, #16]
 8019e16:	429a      	cmp	r2, r3
 8019e18:	bfb8      	it	lt
 8019e1a:	460b      	movlt	r3, r1
 8019e1c:	460d      	mov	r5, r1
 8019e1e:	bfbc      	itt	lt
 8019e20:	4625      	movlt	r5, r4
 8019e22:	461c      	movlt	r4, r3
 8019e24:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019e28:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019e2c:	68ab      	ldr	r3, [r5, #8]
 8019e2e:	6869      	ldr	r1, [r5, #4]
 8019e30:	eb0a 0709 	add.w	r7, sl, r9
 8019e34:	42bb      	cmp	r3, r7
 8019e36:	b085      	sub	sp, #20
 8019e38:	bfb8      	it	lt
 8019e3a:	3101      	addlt	r1, #1
 8019e3c:	f7ff fed4 	bl	8019be8 <_Balloc>
 8019e40:	b930      	cbnz	r0, 8019e50 <__multiply+0x44>
 8019e42:	4602      	mov	r2, r0
 8019e44:	4b42      	ldr	r3, [pc, #264]	; (8019f50 <__multiply+0x144>)
 8019e46:	4843      	ldr	r0, [pc, #268]	; (8019f54 <__multiply+0x148>)
 8019e48:	f240 115d 	movw	r1, #349	; 0x15d
 8019e4c:	f7fe ff1e 	bl	8018c8c <__assert_func>
 8019e50:	f100 0614 	add.w	r6, r0, #20
 8019e54:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019e58:	4633      	mov	r3, r6
 8019e5a:	2200      	movs	r2, #0
 8019e5c:	4543      	cmp	r3, r8
 8019e5e:	d31e      	bcc.n	8019e9e <__multiply+0x92>
 8019e60:	f105 0c14 	add.w	ip, r5, #20
 8019e64:	f104 0314 	add.w	r3, r4, #20
 8019e68:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8019e6c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8019e70:	9202      	str	r2, [sp, #8]
 8019e72:	ebac 0205 	sub.w	r2, ip, r5
 8019e76:	3a15      	subs	r2, #21
 8019e78:	f022 0203 	bic.w	r2, r2, #3
 8019e7c:	3204      	adds	r2, #4
 8019e7e:	f105 0115 	add.w	r1, r5, #21
 8019e82:	458c      	cmp	ip, r1
 8019e84:	bf38      	it	cc
 8019e86:	2204      	movcc	r2, #4
 8019e88:	9201      	str	r2, [sp, #4]
 8019e8a:	9a02      	ldr	r2, [sp, #8]
 8019e8c:	9303      	str	r3, [sp, #12]
 8019e8e:	429a      	cmp	r2, r3
 8019e90:	d808      	bhi.n	8019ea4 <__multiply+0x98>
 8019e92:	2f00      	cmp	r7, #0
 8019e94:	dc55      	bgt.n	8019f42 <__multiply+0x136>
 8019e96:	6107      	str	r7, [r0, #16]
 8019e98:	b005      	add	sp, #20
 8019e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e9e:	f843 2b04 	str.w	r2, [r3], #4
 8019ea2:	e7db      	b.n	8019e5c <__multiply+0x50>
 8019ea4:	f8b3 a000 	ldrh.w	sl, [r3]
 8019ea8:	f1ba 0f00 	cmp.w	sl, #0
 8019eac:	d020      	beq.n	8019ef0 <__multiply+0xe4>
 8019eae:	f105 0e14 	add.w	lr, r5, #20
 8019eb2:	46b1      	mov	r9, r6
 8019eb4:	2200      	movs	r2, #0
 8019eb6:	f85e 4b04 	ldr.w	r4, [lr], #4
 8019eba:	f8d9 b000 	ldr.w	fp, [r9]
 8019ebe:	b2a1      	uxth	r1, r4
 8019ec0:	fa1f fb8b 	uxth.w	fp, fp
 8019ec4:	fb0a b101 	mla	r1, sl, r1, fp
 8019ec8:	4411      	add	r1, r2
 8019eca:	f8d9 2000 	ldr.w	r2, [r9]
 8019ece:	0c24      	lsrs	r4, r4, #16
 8019ed0:	0c12      	lsrs	r2, r2, #16
 8019ed2:	fb0a 2404 	mla	r4, sl, r4, r2
 8019ed6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019eda:	b289      	uxth	r1, r1
 8019edc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019ee0:	45f4      	cmp	ip, lr
 8019ee2:	f849 1b04 	str.w	r1, [r9], #4
 8019ee6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019eea:	d8e4      	bhi.n	8019eb6 <__multiply+0xaa>
 8019eec:	9901      	ldr	r1, [sp, #4]
 8019eee:	5072      	str	r2, [r6, r1]
 8019ef0:	9a03      	ldr	r2, [sp, #12]
 8019ef2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019ef6:	3304      	adds	r3, #4
 8019ef8:	f1b9 0f00 	cmp.w	r9, #0
 8019efc:	d01f      	beq.n	8019f3e <__multiply+0x132>
 8019efe:	6834      	ldr	r4, [r6, #0]
 8019f00:	f105 0114 	add.w	r1, r5, #20
 8019f04:	46b6      	mov	lr, r6
 8019f06:	f04f 0a00 	mov.w	sl, #0
 8019f0a:	880a      	ldrh	r2, [r1, #0]
 8019f0c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019f10:	fb09 b202 	mla	r2, r9, r2, fp
 8019f14:	4492      	add	sl, r2
 8019f16:	b2a4      	uxth	r4, r4
 8019f18:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019f1c:	f84e 4b04 	str.w	r4, [lr], #4
 8019f20:	f851 4b04 	ldr.w	r4, [r1], #4
 8019f24:	f8be 2000 	ldrh.w	r2, [lr]
 8019f28:	0c24      	lsrs	r4, r4, #16
 8019f2a:	fb09 2404 	mla	r4, r9, r4, r2
 8019f2e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8019f32:	458c      	cmp	ip, r1
 8019f34:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019f38:	d8e7      	bhi.n	8019f0a <__multiply+0xfe>
 8019f3a:	9a01      	ldr	r2, [sp, #4]
 8019f3c:	50b4      	str	r4, [r6, r2]
 8019f3e:	3604      	adds	r6, #4
 8019f40:	e7a3      	b.n	8019e8a <__multiply+0x7e>
 8019f42:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d1a5      	bne.n	8019e96 <__multiply+0x8a>
 8019f4a:	3f01      	subs	r7, #1
 8019f4c:	e7a1      	b.n	8019e92 <__multiply+0x86>
 8019f4e:	bf00      	nop
 8019f50:	0801d674 	.word	0x0801d674
 8019f54:	0801d6e8 	.word	0x0801d6e8

08019f58 <__pow5mult>:
 8019f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f5c:	4615      	mov	r5, r2
 8019f5e:	f012 0203 	ands.w	r2, r2, #3
 8019f62:	4606      	mov	r6, r0
 8019f64:	460f      	mov	r7, r1
 8019f66:	d007      	beq.n	8019f78 <__pow5mult+0x20>
 8019f68:	4c25      	ldr	r4, [pc, #148]	; (801a000 <__pow5mult+0xa8>)
 8019f6a:	3a01      	subs	r2, #1
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019f72:	f7ff fe9b 	bl	8019cac <__multadd>
 8019f76:	4607      	mov	r7, r0
 8019f78:	10ad      	asrs	r5, r5, #2
 8019f7a:	d03d      	beq.n	8019ff8 <__pow5mult+0xa0>
 8019f7c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8019f7e:	b97c      	cbnz	r4, 8019fa0 <__pow5mult+0x48>
 8019f80:	2010      	movs	r0, #16
 8019f82:	f7ff fe29 	bl	8019bd8 <malloc>
 8019f86:	4602      	mov	r2, r0
 8019f88:	6270      	str	r0, [r6, #36]	; 0x24
 8019f8a:	b928      	cbnz	r0, 8019f98 <__pow5mult+0x40>
 8019f8c:	4b1d      	ldr	r3, [pc, #116]	; (801a004 <__pow5mult+0xac>)
 8019f8e:	481e      	ldr	r0, [pc, #120]	; (801a008 <__pow5mult+0xb0>)
 8019f90:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019f94:	f7fe fe7a 	bl	8018c8c <__assert_func>
 8019f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019f9c:	6004      	str	r4, [r0, #0]
 8019f9e:	60c4      	str	r4, [r0, #12]
 8019fa0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019fa8:	b94c      	cbnz	r4, 8019fbe <__pow5mult+0x66>
 8019faa:	f240 2171 	movw	r1, #625	; 0x271
 8019fae:	4630      	mov	r0, r6
 8019fb0:	f7ff ff16 	bl	8019de0 <__i2b>
 8019fb4:	2300      	movs	r3, #0
 8019fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8019fba:	4604      	mov	r4, r0
 8019fbc:	6003      	str	r3, [r0, #0]
 8019fbe:	f04f 0900 	mov.w	r9, #0
 8019fc2:	07eb      	lsls	r3, r5, #31
 8019fc4:	d50a      	bpl.n	8019fdc <__pow5mult+0x84>
 8019fc6:	4639      	mov	r1, r7
 8019fc8:	4622      	mov	r2, r4
 8019fca:	4630      	mov	r0, r6
 8019fcc:	f7ff ff1e 	bl	8019e0c <__multiply>
 8019fd0:	4639      	mov	r1, r7
 8019fd2:	4680      	mov	r8, r0
 8019fd4:	4630      	mov	r0, r6
 8019fd6:	f7ff fe47 	bl	8019c68 <_Bfree>
 8019fda:	4647      	mov	r7, r8
 8019fdc:	106d      	asrs	r5, r5, #1
 8019fde:	d00b      	beq.n	8019ff8 <__pow5mult+0xa0>
 8019fe0:	6820      	ldr	r0, [r4, #0]
 8019fe2:	b938      	cbnz	r0, 8019ff4 <__pow5mult+0x9c>
 8019fe4:	4622      	mov	r2, r4
 8019fe6:	4621      	mov	r1, r4
 8019fe8:	4630      	mov	r0, r6
 8019fea:	f7ff ff0f 	bl	8019e0c <__multiply>
 8019fee:	6020      	str	r0, [r4, #0]
 8019ff0:	f8c0 9000 	str.w	r9, [r0]
 8019ff4:	4604      	mov	r4, r0
 8019ff6:	e7e4      	b.n	8019fc2 <__pow5mult+0x6a>
 8019ff8:	4638      	mov	r0, r7
 8019ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ffe:	bf00      	nop
 801a000:	0801d838 	.word	0x0801d838
 801a004:	0801d3f4 	.word	0x0801d3f4
 801a008:	0801d6e8 	.word	0x0801d6e8

0801a00c <__lshift>:
 801a00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a010:	460c      	mov	r4, r1
 801a012:	6849      	ldr	r1, [r1, #4]
 801a014:	6923      	ldr	r3, [r4, #16]
 801a016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a01a:	68a3      	ldr	r3, [r4, #8]
 801a01c:	4607      	mov	r7, r0
 801a01e:	4691      	mov	r9, r2
 801a020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a024:	f108 0601 	add.w	r6, r8, #1
 801a028:	42b3      	cmp	r3, r6
 801a02a:	db0b      	blt.n	801a044 <__lshift+0x38>
 801a02c:	4638      	mov	r0, r7
 801a02e:	f7ff fddb 	bl	8019be8 <_Balloc>
 801a032:	4605      	mov	r5, r0
 801a034:	b948      	cbnz	r0, 801a04a <__lshift+0x3e>
 801a036:	4602      	mov	r2, r0
 801a038:	4b28      	ldr	r3, [pc, #160]	; (801a0dc <__lshift+0xd0>)
 801a03a:	4829      	ldr	r0, [pc, #164]	; (801a0e0 <__lshift+0xd4>)
 801a03c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801a040:	f7fe fe24 	bl	8018c8c <__assert_func>
 801a044:	3101      	adds	r1, #1
 801a046:	005b      	lsls	r3, r3, #1
 801a048:	e7ee      	b.n	801a028 <__lshift+0x1c>
 801a04a:	2300      	movs	r3, #0
 801a04c:	f100 0114 	add.w	r1, r0, #20
 801a050:	f100 0210 	add.w	r2, r0, #16
 801a054:	4618      	mov	r0, r3
 801a056:	4553      	cmp	r3, sl
 801a058:	db33      	blt.n	801a0c2 <__lshift+0xb6>
 801a05a:	6920      	ldr	r0, [r4, #16]
 801a05c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a060:	f104 0314 	add.w	r3, r4, #20
 801a064:	f019 091f 	ands.w	r9, r9, #31
 801a068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a06c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a070:	d02b      	beq.n	801a0ca <__lshift+0xbe>
 801a072:	f1c9 0e20 	rsb	lr, r9, #32
 801a076:	468a      	mov	sl, r1
 801a078:	2200      	movs	r2, #0
 801a07a:	6818      	ldr	r0, [r3, #0]
 801a07c:	fa00 f009 	lsl.w	r0, r0, r9
 801a080:	4302      	orrs	r2, r0
 801a082:	f84a 2b04 	str.w	r2, [sl], #4
 801a086:	f853 2b04 	ldr.w	r2, [r3], #4
 801a08a:	459c      	cmp	ip, r3
 801a08c:	fa22 f20e 	lsr.w	r2, r2, lr
 801a090:	d8f3      	bhi.n	801a07a <__lshift+0x6e>
 801a092:	ebac 0304 	sub.w	r3, ip, r4
 801a096:	3b15      	subs	r3, #21
 801a098:	f023 0303 	bic.w	r3, r3, #3
 801a09c:	3304      	adds	r3, #4
 801a09e:	f104 0015 	add.w	r0, r4, #21
 801a0a2:	4584      	cmp	ip, r0
 801a0a4:	bf38      	it	cc
 801a0a6:	2304      	movcc	r3, #4
 801a0a8:	50ca      	str	r2, [r1, r3]
 801a0aa:	b10a      	cbz	r2, 801a0b0 <__lshift+0xa4>
 801a0ac:	f108 0602 	add.w	r6, r8, #2
 801a0b0:	3e01      	subs	r6, #1
 801a0b2:	4638      	mov	r0, r7
 801a0b4:	612e      	str	r6, [r5, #16]
 801a0b6:	4621      	mov	r1, r4
 801a0b8:	f7ff fdd6 	bl	8019c68 <_Bfree>
 801a0bc:	4628      	mov	r0, r5
 801a0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0c2:	f842 0f04 	str.w	r0, [r2, #4]!
 801a0c6:	3301      	adds	r3, #1
 801a0c8:	e7c5      	b.n	801a056 <__lshift+0x4a>
 801a0ca:	3904      	subs	r1, #4
 801a0cc:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0d0:	f841 2f04 	str.w	r2, [r1, #4]!
 801a0d4:	459c      	cmp	ip, r3
 801a0d6:	d8f9      	bhi.n	801a0cc <__lshift+0xc0>
 801a0d8:	e7ea      	b.n	801a0b0 <__lshift+0xa4>
 801a0da:	bf00      	nop
 801a0dc:	0801d674 	.word	0x0801d674
 801a0e0:	0801d6e8 	.word	0x0801d6e8

0801a0e4 <__mcmp>:
 801a0e4:	b530      	push	{r4, r5, lr}
 801a0e6:	6902      	ldr	r2, [r0, #16]
 801a0e8:	690c      	ldr	r4, [r1, #16]
 801a0ea:	1b12      	subs	r2, r2, r4
 801a0ec:	d10e      	bne.n	801a10c <__mcmp+0x28>
 801a0ee:	f100 0314 	add.w	r3, r0, #20
 801a0f2:	3114      	adds	r1, #20
 801a0f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a0f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a0fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a100:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a104:	42a5      	cmp	r5, r4
 801a106:	d003      	beq.n	801a110 <__mcmp+0x2c>
 801a108:	d305      	bcc.n	801a116 <__mcmp+0x32>
 801a10a:	2201      	movs	r2, #1
 801a10c:	4610      	mov	r0, r2
 801a10e:	bd30      	pop	{r4, r5, pc}
 801a110:	4283      	cmp	r3, r0
 801a112:	d3f3      	bcc.n	801a0fc <__mcmp+0x18>
 801a114:	e7fa      	b.n	801a10c <__mcmp+0x28>
 801a116:	f04f 32ff 	mov.w	r2, #4294967295
 801a11a:	e7f7      	b.n	801a10c <__mcmp+0x28>

0801a11c <__mdiff>:
 801a11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a120:	460c      	mov	r4, r1
 801a122:	4606      	mov	r6, r0
 801a124:	4611      	mov	r1, r2
 801a126:	4620      	mov	r0, r4
 801a128:	4617      	mov	r7, r2
 801a12a:	f7ff ffdb 	bl	801a0e4 <__mcmp>
 801a12e:	1e05      	subs	r5, r0, #0
 801a130:	d110      	bne.n	801a154 <__mdiff+0x38>
 801a132:	4629      	mov	r1, r5
 801a134:	4630      	mov	r0, r6
 801a136:	f7ff fd57 	bl	8019be8 <_Balloc>
 801a13a:	b930      	cbnz	r0, 801a14a <__mdiff+0x2e>
 801a13c:	4b39      	ldr	r3, [pc, #228]	; (801a224 <__mdiff+0x108>)
 801a13e:	4602      	mov	r2, r0
 801a140:	f240 2132 	movw	r1, #562	; 0x232
 801a144:	4838      	ldr	r0, [pc, #224]	; (801a228 <__mdiff+0x10c>)
 801a146:	f7fe fda1 	bl	8018c8c <__assert_func>
 801a14a:	2301      	movs	r3, #1
 801a14c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a150:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a154:	bfa4      	itt	ge
 801a156:	463b      	movge	r3, r7
 801a158:	4627      	movge	r7, r4
 801a15a:	4630      	mov	r0, r6
 801a15c:	6879      	ldr	r1, [r7, #4]
 801a15e:	bfa6      	itte	ge
 801a160:	461c      	movge	r4, r3
 801a162:	2500      	movge	r5, #0
 801a164:	2501      	movlt	r5, #1
 801a166:	f7ff fd3f 	bl	8019be8 <_Balloc>
 801a16a:	b920      	cbnz	r0, 801a176 <__mdiff+0x5a>
 801a16c:	4b2d      	ldr	r3, [pc, #180]	; (801a224 <__mdiff+0x108>)
 801a16e:	4602      	mov	r2, r0
 801a170:	f44f 7110 	mov.w	r1, #576	; 0x240
 801a174:	e7e6      	b.n	801a144 <__mdiff+0x28>
 801a176:	693e      	ldr	r6, [r7, #16]
 801a178:	60c5      	str	r5, [r0, #12]
 801a17a:	6925      	ldr	r5, [r4, #16]
 801a17c:	f107 0114 	add.w	r1, r7, #20
 801a180:	f104 0914 	add.w	r9, r4, #20
 801a184:	f100 0e14 	add.w	lr, r0, #20
 801a188:	f107 0210 	add.w	r2, r7, #16
 801a18c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801a190:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801a194:	46f2      	mov	sl, lr
 801a196:	2700      	movs	r7, #0
 801a198:	f859 3b04 	ldr.w	r3, [r9], #4
 801a19c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a1a0:	fa1f f883 	uxth.w	r8, r3
 801a1a4:	fa17 f78b 	uxtah	r7, r7, fp
 801a1a8:	0c1b      	lsrs	r3, r3, #16
 801a1aa:	eba7 0808 	sub.w	r8, r7, r8
 801a1ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a1b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a1b6:	fa1f f888 	uxth.w	r8, r8
 801a1ba:	141f      	asrs	r7, r3, #16
 801a1bc:	454d      	cmp	r5, r9
 801a1be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a1c2:	f84a 3b04 	str.w	r3, [sl], #4
 801a1c6:	d8e7      	bhi.n	801a198 <__mdiff+0x7c>
 801a1c8:	1b2b      	subs	r3, r5, r4
 801a1ca:	3b15      	subs	r3, #21
 801a1cc:	f023 0303 	bic.w	r3, r3, #3
 801a1d0:	3304      	adds	r3, #4
 801a1d2:	3415      	adds	r4, #21
 801a1d4:	42a5      	cmp	r5, r4
 801a1d6:	bf38      	it	cc
 801a1d8:	2304      	movcc	r3, #4
 801a1da:	4419      	add	r1, r3
 801a1dc:	4473      	add	r3, lr
 801a1de:	469e      	mov	lr, r3
 801a1e0:	460d      	mov	r5, r1
 801a1e2:	4565      	cmp	r5, ip
 801a1e4:	d30e      	bcc.n	801a204 <__mdiff+0xe8>
 801a1e6:	f10c 0203 	add.w	r2, ip, #3
 801a1ea:	1a52      	subs	r2, r2, r1
 801a1ec:	f022 0203 	bic.w	r2, r2, #3
 801a1f0:	3903      	subs	r1, #3
 801a1f2:	458c      	cmp	ip, r1
 801a1f4:	bf38      	it	cc
 801a1f6:	2200      	movcc	r2, #0
 801a1f8:	441a      	add	r2, r3
 801a1fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801a1fe:	b17b      	cbz	r3, 801a220 <__mdiff+0x104>
 801a200:	6106      	str	r6, [r0, #16]
 801a202:	e7a5      	b.n	801a150 <__mdiff+0x34>
 801a204:	f855 8b04 	ldr.w	r8, [r5], #4
 801a208:	fa17 f488 	uxtah	r4, r7, r8
 801a20c:	1422      	asrs	r2, r4, #16
 801a20e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801a212:	b2a4      	uxth	r4, r4
 801a214:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801a218:	f84e 4b04 	str.w	r4, [lr], #4
 801a21c:	1417      	asrs	r7, r2, #16
 801a21e:	e7e0      	b.n	801a1e2 <__mdiff+0xc6>
 801a220:	3e01      	subs	r6, #1
 801a222:	e7ea      	b.n	801a1fa <__mdiff+0xde>
 801a224:	0801d674 	.word	0x0801d674
 801a228:	0801d6e8 	.word	0x0801d6e8

0801a22c <__d2b>:
 801a22c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a230:	4689      	mov	r9, r1
 801a232:	2101      	movs	r1, #1
 801a234:	ec57 6b10 	vmov	r6, r7, d0
 801a238:	4690      	mov	r8, r2
 801a23a:	f7ff fcd5 	bl	8019be8 <_Balloc>
 801a23e:	4604      	mov	r4, r0
 801a240:	b930      	cbnz	r0, 801a250 <__d2b+0x24>
 801a242:	4602      	mov	r2, r0
 801a244:	4b25      	ldr	r3, [pc, #148]	; (801a2dc <__d2b+0xb0>)
 801a246:	4826      	ldr	r0, [pc, #152]	; (801a2e0 <__d2b+0xb4>)
 801a248:	f240 310a 	movw	r1, #778	; 0x30a
 801a24c:	f7fe fd1e 	bl	8018c8c <__assert_func>
 801a250:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801a254:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a258:	bb35      	cbnz	r5, 801a2a8 <__d2b+0x7c>
 801a25a:	2e00      	cmp	r6, #0
 801a25c:	9301      	str	r3, [sp, #4]
 801a25e:	d028      	beq.n	801a2b2 <__d2b+0x86>
 801a260:	4668      	mov	r0, sp
 801a262:	9600      	str	r6, [sp, #0]
 801a264:	f7ff fd8c 	bl	8019d80 <__lo0bits>
 801a268:	9900      	ldr	r1, [sp, #0]
 801a26a:	b300      	cbz	r0, 801a2ae <__d2b+0x82>
 801a26c:	9a01      	ldr	r2, [sp, #4]
 801a26e:	f1c0 0320 	rsb	r3, r0, #32
 801a272:	fa02 f303 	lsl.w	r3, r2, r3
 801a276:	430b      	orrs	r3, r1
 801a278:	40c2      	lsrs	r2, r0
 801a27a:	6163      	str	r3, [r4, #20]
 801a27c:	9201      	str	r2, [sp, #4]
 801a27e:	9b01      	ldr	r3, [sp, #4]
 801a280:	61a3      	str	r3, [r4, #24]
 801a282:	2b00      	cmp	r3, #0
 801a284:	bf14      	ite	ne
 801a286:	2202      	movne	r2, #2
 801a288:	2201      	moveq	r2, #1
 801a28a:	6122      	str	r2, [r4, #16]
 801a28c:	b1d5      	cbz	r5, 801a2c4 <__d2b+0x98>
 801a28e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a292:	4405      	add	r5, r0
 801a294:	f8c9 5000 	str.w	r5, [r9]
 801a298:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a29c:	f8c8 0000 	str.w	r0, [r8]
 801a2a0:	4620      	mov	r0, r4
 801a2a2:	b003      	add	sp, #12
 801a2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a2ac:	e7d5      	b.n	801a25a <__d2b+0x2e>
 801a2ae:	6161      	str	r1, [r4, #20]
 801a2b0:	e7e5      	b.n	801a27e <__d2b+0x52>
 801a2b2:	a801      	add	r0, sp, #4
 801a2b4:	f7ff fd64 	bl	8019d80 <__lo0bits>
 801a2b8:	9b01      	ldr	r3, [sp, #4]
 801a2ba:	6163      	str	r3, [r4, #20]
 801a2bc:	2201      	movs	r2, #1
 801a2be:	6122      	str	r2, [r4, #16]
 801a2c0:	3020      	adds	r0, #32
 801a2c2:	e7e3      	b.n	801a28c <__d2b+0x60>
 801a2c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a2c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a2cc:	f8c9 0000 	str.w	r0, [r9]
 801a2d0:	6918      	ldr	r0, [r3, #16]
 801a2d2:	f7ff fd35 	bl	8019d40 <__hi0bits>
 801a2d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a2da:	e7df      	b.n	801a29c <__d2b+0x70>
 801a2dc:	0801d674 	.word	0x0801d674
 801a2e0:	0801d6e8 	.word	0x0801d6e8

0801a2e4 <_calloc_r>:
 801a2e4:	b513      	push	{r0, r1, r4, lr}
 801a2e6:	434a      	muls	r2, r1
 801a2e8:	4611      	mov	r1, r2
 801a2ea:	9201      	str	r2, [sp, #4]
 801a2ec:	f000 f85a 	bl	801a3a4 <_malloc_r>
 801a2f0:	4604      	mov	r4, r0
 801a2f2:	b118      	cbz	r0, 801a2fc <_calloc_r+0x18>
 801a2f4:	9a01      	ldr	r2, [sp, #4]
 801a2f6:	2100      	movs	r1, #0
 801a2f8:	f7fd fece 	bl	8018098 <memset>
 801a2fc:	4620      	mov	r0, r4
 801a2fe:	b002      	add	sp, #8
 801a300:	bd10      	pop	{r4, pc}
	...

0801a304 <_free_r>:
 801a304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a306:	2900      	cmp	r1, #0
 801a308:	d048      	beq.n	801a39c <_free_r+0x98>
 801a30a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a30e:	9001      	str	r0, [sp, #4]
 801a310:	2b00      	cmp	r3, #0
 801a312:	f1a1 0404 	sub.w	r4, r1, #4
 801a316:	bfb8      	it	lt
 801a318:	18e4      	addlt	r4, r4, r3
 801a31a:	f000 fdf5 	bl	801af08 <__malloc_lock>
 801a31e:	4a20      	ldr	r2, [pc, #128]	; (801a3a0 <_free_r+0x9c>)
 801a320:	9801      	ldr	r0, [sp, #4]
 801a322:	6813      	ldr	r3, [r2, #0]
 801a324:	4615      	mov	r5, r2
 801a326:	b933      	cbnz	r3, 801a336 <_free_r+0x32>
 801a328:	6063      	str	r3, [r4, #4]
 801a32a:	6014      	str	r4, [r2, #0]
 801a32c:	b003      	add	sp, #12
 801a32e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a332:	f000 bdef 	b.w	801af14 <__malloc_unlock>
 801a336:	42a3      	cmp	r3, r4
 801a338:	d90b      	bls.n	801a352 <_free_r+0x4e>
 801a33a:	6821      	ldr	r1, [r4, #0]
 801a33c:	1862      	adds	r2, r4, r1
 801a33e:	4293      	cmp	r3, r2
 801a340:	bf04      	itt	eq
 801a342:	681a      	ldreq	r2, [r3, #0]
 801a344:	685b      	ldreq	r3, [r3, #4]
 801a346:	6063      	str	r3, [r4, #4]
 801a348:	bf04      	itt	eq
 801a34a:	1852      	addeq	r2, r2, r1
 801a34c:	6022      	streq	r2, [r4, #0]
 801a34e:	602c      	str	r4, [r5, #0]
 801a350:	e7ec      	b.n	801a32c <_free_r+0x28>
 801a352:	461a      	mov	r2, r3
 801a354:	685b      	ldr	r3, [r3, #4]
 801a356:	b10b      	cbz	r3, 801a35c <_free_r+0x58>
 801a358:	42a3      	cmp	r3, r4
 801a35a:	d9fa      	bls.n	801a352 <_free_r+0x4e>
 801a35c:	6811      	ldr	r1, [r2, #0]
 801a35e:	1855      	adds	r5, r2, r1
 801a360:	42a5      	cmp	r5, r4
 801a362:	d10b      	bne.n	801a37c <_free_r+0x78>
 801a364:	6824      	ldr	r4, [r4, #0]
 801a366:	4421      	add	r1, r4
 801a368:	1854      	adds	r4, r2, r1
 801a36a:	42a3      	cmp	r3, r4
 801a36c:	6011      	str	r1, [r2, #0]
 801a36e:	d1dd      	bne.n	801a32c <_free_r+0x28>
 801a370:	681c      	ldr	r4, [r3, #0]
 801a372:	685b      	ldr	r3, [r3, #4]
 801a374:	6053      	str	r3, [r2, #4]
 801a376:	4421      	add	r1, r4
 801a378:	6011      	str	r1, [r2, #0]
 801a37a:	e7d7      	b.n	801a32c <_free_r+0x28>
 801a37c:	d902      	bls.n	801a384 <_free_r+0x80>
 801a37e:	230c      	movs	r3, #12
 801a380:	6003      	str	r3, [r0, #0]
 801a382:	e7d3      	b.n	801a32c <_free_r+0x28>
 801a384:	6825      	ldr	r5, [r4, #0]
 801a386:	1961      	adds	r1, r4, r5
 801a388:	428b      	cmp	r3, r1
 801a38a:	bf04      	itt	eq
 801a38c:	6819      	ldreq	r1, [r3, #0]
 801a38e:	685b      	ldreq	r3, [r3, #4]
 801a390:	6063      	str	r3, [r4, #4]
 801a392:	bf04      	itt	eq
 801a394:	1949      	addeq	r1, r1, r5
 801a396:	6021      	streq	r1, [r4, #0]
 801a398:	6054      	str	r4, [r2, #4]
 801a39a:	e7c7      	b.n	801a32c <_free_r+0x28>
 801a39c:	b003      	add	sp, #12
 801a39e:	bd30      	pop	{r4, r5, pc}
 801a3a0:	20001150 	.word	0x20001150

0801a3a4 <_malloc_r>:
 801a3a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a6:	1ccd      	adds	r5, r1, #3
 801a3a8:	f025 0503 	bic.w	r5, r5, #3
 801a3ac:	3508      	adds	r5, #8
 801a3ae:	2d0c      	cmp	r5, #12
 801a3b0:	bf38      	it	cc
 801a3b2:	250c      	movcc	r5, #12
 801a3b4:	2d00      	cmp	r5, #0
 801a3b6:	4606      	mov	r6, r0
 801a3b8:	db01      	blt.n	801a3be <_malloc_r+0x1a>
 801a3ba:	42a9      	cmp	r1, r5
 801a3bc:	d903      	bls.n	801a3c6 <_malloc_r+0x22>
 801a3be:	230c      	movs	r3, #12
 801a3c0:	6033      	str	r3, [r6, #0]
 801a3c2:	2000      	movs	r0, #0
 801a3c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3c6:	f000 fd9f 	bl	801af08 <__malloc_lock>
 801a3ca:	4921      	ldr	r1, [pc, #132]	; (801a450 <_malloc_r+0xac>)
 801a3cc:	680a      	ldr	r2, [r1, #0]
 801a3ce:	4614      	mov	r4, r2
 801a3d0:	b99c      	cbnz	r4, 801a3fa <_malloc_r+0x56>
 801a3d2:	4f20      	ldr	r7, [pc, #128]	; (801a454 <_malloc_r+0xb0>)
 801a3d4:	683b      	ldr	r3, [r7, #0]
 801a3d6:	b923      	cbnz	r3, 801a3e2 <_malloc_r+0x3e>
 801a3d8:	4621      	mov	r1, r4
 801a3da:	4630      	mov	r0, r6
 801a3dc:	f000 faf2 	bl	801a9c4 <_sbrk_r>
 801a3e0:	6038      	str	r0, [r7, #0]
 801a3e2:	4629      	mov	r1, r5
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f000 faed 	bl	801a9c4 <_sbrk_r>
 801a3ea:	1c43      	adds	r3, r0, #1
 801a3ec:	d123      	bne.n	801a436 <_malloc_r+0x92>
 801a3ee:	230c      	movs	r3, #12
 801a3f0:	6033      	str	r3, [r6, #0]
 801a3f2:	4630      	mov	r0, r6
 801a3f4:	f000 fd8e 	bl	801af14 <__malloc_unlock>
 801a3f8:	e7e3      	b.n	801a3c2 <_malloc_r+0x1e>
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	1b5b      	subs	r3, r3, r5
 801a3fe:	d417      	bmi.n	801a430 <_malloc_r+0x8c>
 801a400:	2b0b      	cmp	r3, #11
 801a402:	d903      	bls.n	801a40c <_malloc_r+0x68>
 801a404:	6023      	str	r3, [r4, #0]
 801a406:	441c      	add	r4, r3
 801a408:	6025      	str	r5, [r4, #0]
 801a40a:	e004      	b.n	801a416 <_malloc_r+0x72>
 801a40c:	6863      	ldr	r3, [r4, #4]
 801a40e:	42a2      	cmp	r2, r4
 801a410:	bf0c      	ite	eq
 801a412:	600b      	streq	r3, [r1, #0]
 801a414:	6053      	strne	r3, [r2, #4]
 801a416:	4630      	mov	r0, r6
 801a418:	f000 fd7c 	bl	801af14 <__malloc_unlock>
 801a41c:	f104 000b 	add.w	r0, r4, #11
 801a420:	1d23      	adds	r3, r4, #4
 801a422:	f020 0007 	bic.w	r0, r0, #7
 801a426:	1ac2      	subs	r2, r0, r3
 801a428:	d0cc      	beq.n	801a3c4 <_malloc_r+0x20>
 801a42a:	1a1b      	subs	r3, r3, r0
 801a42c:	50a3      	str	r3, [r4, r2]
 801a42e:	e7c9      	b.n	801a3c4 <_malloc_r+0x20>
 801a430:	4622      	mov	r2, r4
 801a432:	6864      	ldr	r4, [r4, #4]
 801a434:	e7cc      	b.n	801a3d0 <_malloc_r+0x2c>
 801a436:	1cc4      	adds	r4, r0, #3
 801a438:	f024 0403 	bic.w	r4, r4, #3
 801a43c:	42a0      	cmp	r0, r4
 801a43e:	d0e3      	beq.n	801a408 <_malloc_r+0x64>
 801a440:	1a21      	subs	r1, r4, r0
 801a442:	4630      	mov	r0, r6
 801a444:	f000 fabe 	bl	801a9c4 <_sbrk_r>
 801a448:	3001      	adds	r0, #1
 801a44a:	d1dd      	bne.n	801a408 <_malloc_r+0x64>
 801a44c:	e7cf      	b.n	801a3ee <_malloc_r+0x4a>
 801a44e:	bf00      	nop
 801a450:	20001150 	.word	0x20001150
 801a454:	20001154 	.word	0x20001154

0801a458 <__ssputs_r>:
 801a458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a45c:	688e      	ldr	r6, [r1, #8]
 801a45e:	429e      	cmp	r6, r3
 801a460:	4682      	mov	sl, r0
 801a462:	460c      	mov	r4, r1
 801a464:	4690      	mov	r8, r2
 801a466:	461f      	mov	r7, r3
 801a468:	d838      	bhi.n	801a4dc <__ssputs_r+0x84>
 801a46a:	898a      	ldrh	r2, [r1, #12]
 801a46c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a470:	d032      	beq.n	801a4d8 <__ssputs_r+0x80>
 801a472:	6825      	ldr	r5, [r4, #0]
 801a474:	6909      	ldr	r1, [r1, #16]
 801a476:	eba5 0901 	sub.w	r9, r5, r1
 801a47a:	6965      	ldr	r5, [r4, #20]
 801a47c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a484:	3301      	adds	r3, #1
 801a486:	444b      	add	r3, r9
 801a488:	106d      	asrs	r5, r5, #1
 801a48a:	429d      	cmp	r5, r3
 801a48c:	bf38      	it	cc
 801a48e:	461d      	movcc	r5, r3
 801a490:	0553      	lsls	r3, r2, #21
 801a492:	d531      	bpl.n	801a4f8 <__ssputs_r+0xa0>
 801a494:	4629      	mov	r1, r5
 801a496:	f7ff ff85 	bl	801a3a4 <_malloc_r>
 801a49a:	4606      	mov	r6, r0
 801a49c:	b950      	cbnz	r0, 801a4b4 <__ssputs_r+0x5c>
 801a49e:	230c      	movs	r3, #12
 801a4a0:	f8ca 3000 	str.w	r3, [sl]
 801a4a4:	89a3      	ldrh	r3, [r4, #12]
 801a4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a4aa:	81a3      	strh	r3, [r4, #12]
 801a4ac:	f04f 30ff 	mov.w	r0, #4294967295
 801a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a4b4:	6921      	ldr	r1, [r4, #16]
 801a4b6:	464a      	mov	r2, r9
 801a4b8:	f7fd fde0 	bl	801807c <memcpy>
 801a4bc:	89a3      	ldrh	r3, [r4, #12]
 801a4be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a4c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a4c6:	81a3      	strh	r3, [r4, #12]
 801a4c8:	6126      	str	r6, [r4, #16]
 801a4ca:	6165      	str	r5, [r4, #20]
 801a4cc:	444e      	add	r6, r9
 801a4ce:	eba5 0509 	sub.w	r5, r5, r9
 801a4d2:	6026      	str	r6, [r4, #0]
 801a4d4:	60a5      	str	r5, [r4, #8]
 801a4d6:	463e      	mov	r6, r7
 801a4d8:	42be      	cmp	r6, r7
 801a4da:	d900      	bls.n	801a4de <__ssputs_r+0x86>
 801a4dc:	463e      	mov	r6, r7
 801a4de:	4632      	mov	r2, r6
 801a4e0:	6820      	ldr	r0, [r4, #0]
 801a4e2:	4641      	mov	r1, r8
 801a4e4:	f000 fcf6 	bl	801aed4 <memmove>
 801a4e8:	68a3      	ldr	r3, [r4, #8]
 801a4ea:	6822      	ldr	r2, [r4, #0]
 801a4ec:	1b9b      	subs	r3, r3, r6
 801a4ee:	4432      	add	r2, r6
 801a4f0:	60a3      	str	r3, [r4, #8]
 801a4f2:	6022      	str	r2, [r4, #0]
 801a4f4:	2000      	movs	r0, #0
 801a4f6:	e7db      	b.n	801a4b0 <__ssputs_r+0x58>
 801a4f8:	462a      	mov	r2, r5
 801a4fa:	f000 fd11 	bl	801af20 <_realloc_r>
 801a4fe:	4606      	mov	r6, r0
 801a500:	2800      	cmp	r0, #0
 801a502:	d1e1      	bne.n	801a4c8 <__ssputs_r+0x70>
 801a504:	6921      	ldr	r1, [r4, #16]
 801a506:	4650      	mov	r0, sl
 801a508:	f7ff fefc 	bl	801a304 <_free_r>
 801a50c:	e7c7      	b.n	801a49e <__ssputs_r+0x46>
	...

0801a510 <_svfiprintf_r>:
 801a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a514:	4698      	mov	r8, r3
 801a516:	898b      	ldrh	r3, [r1, #12]
 801a518:	061b      	lsls	r3, r3, #24
 801a51a:	b09d      	sub	sp, #116	; 0x74
 801a51c:	4607      	mov	r7, r0
 801a51e:	460d      	mov	r5, r1
 801a520:	4614      	mov	r4, r2
 801a522:	d50e      	bpl.n	801a542 <_svfiprintf_r+0x32>
 801a524:	690b      	ldr	r3, [r1, #16]
 801a526:	b963      	cbnz	r3, 801a542 <_svfiprintf_r+0x32>
 801a528:	2140      	movs	r1, #64	; 0x40
 801a52a:	f7ff ff3b 	bl	801a3a4 <_malloc_r>
 801a52e:	6028      	str	r0, [r5, #0]
 801a530:	6128      	str	r0, [r5, #16]
 801a532:	b920      	cbnz	r0, 801a53e <_svfiprintf_r+0x2e>
 801a534:	230c      	movs	r3, #12
 801a536:	603b      	str	r3, [r7, #0]
 801a538:	f04f 30ff 	mov.w	r0, #4294967295
 801a53c:	e0d1      	b.n	801a6e2 <_svfiprintf_r+0x1d2>
 801a53e:	2340      	movs	r3, #64	; 0x40
 801a540:	616b      	str	r3, [r5, #20]
 801a542:	2300      	movs	r3, #0
 801a544:	9309      	str	r3, [sp, #36]	; 0x24
 801a546:	2320      	movs	r3, #32
 801a548:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a54c:	f8cd 800c 	str.w	r8, [sp, #12]
 801a550:	2330      	movs	r3, #48	; 0x30
 801a552:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801a6fc <_svfiprintf_r+0x1ec>
 801a556:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a55a:	f04f 0901 	mov.w	r9, #1
 801a55e:	4623      	mov	r3, r4
 801a560:	469a      	mov	sl, r3
 801a562:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a566:	b10a      	cbz	r2, 801a56c <_svfiprintf_r+0x5c>
 801a568:	2a25      	cmp	r2, #37	; 0x25
 801a56a:	d1f9      	bne.n	801a560 <_svfiprintf_r+0x50>
 801a56c:	ebba 0b04 	subs.w	fp, sl, r4
 801a570:	d00b      	beq.n	801a58a <_svfiprintf_r+0x7a>
 801a572:	465b      	mov	r3, fp
 801a574:	4622      	mov	r2, r4
 801a576:	4629      	mov	r1, r5
 801a578:	4638      	mov	r0, r7
 801a57a:	f7ff ff6d 	bl	801a458 <__ssputs_r>
 801a57e:	3001      	adds	r0, #1
 801a580:	f000 80aa 	beq.w	801a6d8 <_svfiprintf_r+0x1c8>
 801a584:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a586:	445a      	add	r2, fp
 801a588:	9209      	str	r2, [sp, #36]	; 0x24
 801a58a:	f89a 3000 	ldrb.w	r3, [sl]
 801a58e:	2b00      	cmp	r3, #0
 801a590:	f000 80a2 	beq.w	801a6d8 <_svfiprintf_r+0x1c8>
 801a594:	2300      	movs	r3, #0
 801a596:	f04f 32ff 	mov.w	r2, #4294967295
 801a59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a59e:	f10a 0a01 	add.w	sl, sl, #1
 801a5a2:	9304      	str	r3, [sp, #16]
 801a5a4:	9307      	str	r3, [sp, #28]
 801a5a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a5aa:	931a      	str	r3, [sp, #104]	; 0x68
 801a5ac:	4654      	mov	r4, sl
 801a5ae:	2205      	movs	r2, #5
 801a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5b4:	4851      	ldr	r0, [pc, #324]	; (801a6fc <_svfiprintf_r+0x1ec>)
 801a5b6:	f7e5 fe13 	bl	80001e0 <memchr>
 801a5ba:	9a04      	ldr	r2, [sp, #16]
 801a5bc:	b9d8      	cbnz	r0, 801a5f6 <_svfiprintf_r+0xe6>
 801a5be:	06d0      	lsls	r0, r2, #27
 801a5c0:	bf44      	itt	mi
 801a5c2:	2320      	movmi	r3, #32
 801a5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5c8:	0711      	lsls	r1, r2, #28
 801a5ca:	bf44      	itt	mi
 801a5cc:	232b      	movmi	r3, #43	; 0x2b
 801a5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a5d2:	f89a 3000 	ldrb.w	r3, [sl]
 801a5d6:	2b2a      	cmp	r3, #42	; 0x2a
 801a5d8:	d015      	beq.n	801a606 <_svfiprintf_r+0xf6>
 801a5da:	9a07      	ldr	r2, [sp, #28]
 801a5dc:	4654      	mov	r4, sl
 801a5de:	2000      	movs	r0, #0
 801a5e0:	f04f 0c0a 	mov.w	ip, #10
 801a5e4:	4621      	mov	r1, r4
 801a5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a5ea:	3b30      	subs	r3, #48	; 0x30
 801a5ec:	2b09      	cmp	r3, #9
 801a5ee:	d94e      	bls.n	801a68e <_svfiprintf_r+0x17e>
 801a5f0:	b1b0      	cbz	r0, 801a620 <_svfiprintf_r+0x110>
 801a5f2:	9207      	str	r2, [sp, #28]
 801a5f4:	e014      	b.n	801a620 <_svfiprintf_r+0x110>
 801a5f6:	eba0 0308 	sub.w	r3, r0, r8
 801a5fa:	fa09 f303 	lsl.w	r3, r9, r3
 801a5fe:	4313      	orrs	r3, r2
 801a600:	9304      	str	r3, [sp, #16]
 801a602:	46a2      	mov	sl, r4
 801a604:	e7d2      	b.n	801a5ac <_svfiprintf_r+0x9c>
 801a606:	9b03      	ldr	r3, [sp, #12]
 801a608:	1d19      	adds	r1, r3, #4
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	9103      	str	r1, [sp, #12]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	bfbb      	ittet	lt
 801a612:	425b      	neglt	r3, r3
 801a614:	f042 0202 	orrlt.w	r2, r2, #2
 801a618:	9307      	strge	r3, [sp, #28]
 801a61a:	9307      	strlt	r3, [sp, #28]
 801a61c:	bfb8      	it	lt
 801a61e:	9204      	strlt	r2, [sp, #16]
 801a620:	7823      	ldrb	r3, [r4, #0]
 801a622:	2b2e      	cmp	r3, #46	; 0x2e
 801a624:	d10c      	bne.n	801a640 <_svfiprintf_r+0x130>
 801a626:	7863      	ldrb	r3, [r4, #1]
 801a628:	2b2a      	cmp	r3, #42	; 0x2a
 801a62a:	d135      	bne.n	801a698 <_svfiprintf_r+0x188>
 801a62c:	9b03      	ldr	r3, [sp, #12]
 801a62e:	1d1a      	adds	r2, r3, #4
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	9203      	str	r2, [sp, #12]
 801a634:	2b00      	cmp	r3, #0
 801a636:	bfb8      	it	lt
 801a638:	f04f 33ff 	movlt.w	r3, #4294967295
 801a63c:	3402      	adds	r4, #2
 801a63e:	9305      	str	r3, [sp, #20]
 801a640:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801a70c <_svfiprintf_r+0x1fc>
 801a644:	7821      	ldrb	r1, [r4, #0]
 801a646:	2203      	movs	r2, #3
 801a648:	4650      	mov	r0, sl
 801a64a:	f7e5 fdc9 	bl	80001e0 <memchr>
 801a64e:	b140      	cbz	r0, 801a662 <_svfiprintf_r+0x152>
 801a650:	2340      	movs	r3, #64	; 0x40
 801a652:	eba0 000a 	sub.w	r0, r0, sl
 801a656:	fa03 f000 	lsl.w	r0, r3, r0
 801a65a:	9b04      	ldr	r3, [sp, #16]
 801a65c:	4303      	orrs	r3, r0
 801a65e:	3401      	adds	r4, #1
 801a660:	9304      	str	r3, [sp, #16]
 801a662:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a666:	4826      	ldr	r0, [pc, #152]	; (801a700 <_svfiprintf_r+0x1f0>)
 801a668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a66c:	2206      	movs	r2, #6
 801a66e:	f7e5 fdb7 	bl	80001e0 <memchr>
 801a672:	2800      	cmp	r0, #0
 801a674:	d038      	beq.n	801a6e8 <_svfiprintf_r+0x1d8>
 801a676:	4b23      	ldr	r3, [pc, #140]	; (801a704 <_svfiprintf_r+0x1f4>)
 801a678:	bb1b      	cbnz	r3, 801a6c2 <_svfiprintf_r+0x1b2>
 801a67a:	9b03      	ldr	r3, [sp, #12]
 801a67c:	3307      	adds	r3, #7
 801a67e:	f023 0307 	bic.w	r3, r3, #7
 801a682:	3308      	adds	r3, #8
 801a684:	9303      	str	r3, [sp, #12]
 801a686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a688:	4433      	add	r3, r6
 801a68a:	9309      	str	r3, [sp, #36]	; 0x24
 801a68c:	e767      	b.n	801a55e <_svfiprintf_r+0x4e>
 801a68e:	fb0c 3202 	mla	r2, ip, r2, r3
 801a692:	460c      	mov	r4, r1
 801a694:	2001      	movs	r0, #1
 801a696:	e7a5      	b.n	801a5e4 <_svfiprintf_r+0xd4>
 801a698:	2300      	movs	r3, #0
 801a69a:	3401      	adds	r4, #1
 801a69c:	9305      	str	r3, [sp, #20]
 801a69e:	4619      	mov	r1, r3
 801a6a0:	f04f 0c0a 	mov.w	ip, #10
 801a6a4:	4620      	mov	r0, r4
 801a6a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a6aa:	3a30      	subs	r2, #48	; 0x30
 801a6ac:	2a09      	cmp	r2, #9
 801a6ae:	d903      	bls.n	801a6b8 <_svfiprintf_r+0x1a8>
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d0c5      	beq.n	801a640 <_svfiprintf_r+0x130>
 801a6b4:	9105      	str	r1, [sp, #20]
 801a6b6:	e7c3      	b.n	801a640 <_svfiprintf_r+0x130>
 801a6b8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a6bc:	4604      	mov	r4, r0
 801a6be:	2301      	movs	r3, #1
 801a6c0:	e7f0      	b.n	801a6a4 <_svfiprintf_r+0x194>
 801a6c2:	ab03      	add	r3, sp, #12
 801a6c4:	9300      	str	r3, [sp, #0]
 801a6c6:	462a      	mov	r2, r5
 801a6c8:	4b0f      	ldr	r3, [pc, #60]	; (801a708 <_svfiprintf_r+0x1f8>)
 801a6ca:	a904      	add	r1, sp, #16
 801a6cc:	4638      	mov	r0, r7
 801a6ce:	f7fd fd8b 	bl	80181e8 <_printf_float>
 801a6d2:	1c42      	adds	r2, r0, #1
 801a6d4:	4606      	mov	r6, r0
 801a6d6:	d1d6      	bne.n	801a686 <_svfiprintf_r+0x176>
 801a6d8:	89ab      	ldrh	r3, [r5, #12]
 801a6da:	065b      	lsls	r3, r3, #25
 801a6dc:	f53f af2c 	bmi.w	801a538 <_svfiprintf_r+0x28>
 801a6e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a6e2:	b01d      	add	sp, #116	; 0x74
 801a6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a6e8:	ab03      	add	r3, sp, #12
 801a6ea:	9300      	str	r3, [sp, #0]
 801a6ec:	462a      	mov	r2, r5
 801a6ee:	4b06      	ldr	r3, [pc, #24]	; (801a708 <_svfiprintf_r+0x1f8>)
 801a6f0:	a904      	add	r1, sp, #16
 801a6f2:	4638      	mov	r0, r7
 801a6f4:	f7fe f81c 	bl	8018730 <_printf_i>
 801a6f8:	e7eb      	b.n	801a6d2 <_svfiprintf_r+0x1c2>
 801a6fa:	bf00      	nop
 801a6fc:	0801d844 	.word	0x0801d844
 801a700:	0801d84e 	.word	0x0801d84e
 801a704:	080181e9 	.word	0x080181e9
 801a708:	0801a459 	.word	0x0801a459
 801a70c:	0801d84a 	.word	0x0801d84a

0801a710 <__sfputc_r>:
 801a710:	6893      	ldr	r3, [r2, #8]
 801a712:	3b01      	subs	r3, #1
 801a714:	2b00      	cmp	r3, #0
 801a716:	b410      	push	{r4}
 801a718:	6093      	str	r3, [r2, #8]
 801a71a:	da08      	bge.n	801a72e <__sfputc_r+0x1e>
 801a71c:	6994      	ldr	r4, [r2, #24]
 801a71e:	42a3      	cmp	r3, r4
 801a720:	db01      	blt.n	801a726 <__sfputc_r+0x16>
 801a722:	290a      	cmp	r1, #10
 801a724:	d103      	bne.n	801a72e <__sfputc_r+0x1e>
 801a726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a72a:	f000 b99f 	b.w	801aa6c <__swbuf_r>
 801a72e:	6813      	ldr	r3, [r2, #0]
 801a730:	1c58      	adds	r0, r3, #1
 801a732:	6010      	str	r0, [r2, #0]
 801a734:	7019      	strb	r1, [r3, #0]
 801a736:	4608      	mov	r0, r1
 801a738:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a73c:	4770      	bx	lr

0801a73e <__sfputs_r>:
 801a73e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a740:	4606      	mov	r6, r0
 801a742:	460f      	mov	r7, r1
 801a744:	4614      	mov	r4, r2
 801a746:	18d5      	adds	r5, r2, r3
 801a748:	42ac      	cmp	r4, r5
 801a74a:	d101      	bne.n	801a750 <__sfputs_r+0x12>
 801a74c:	2000      	movs	r0, #0
 801a74e:	e007      	b.n	801a760 <__sfputs_r+0x22>
 801a750:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a754:	463a      	mov	r2, r7
 801a756:	4630      	mov	r0, r6
 801a758:	f7ff ffda 	bl	801a710 <__sfputc_r>
 801a75c:	1c43      	adds	r3, r0, #1
 801a75e:	d1f3      	bne.n	801a748 <__sfputs_r+0xa>
 801a760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a764 <_vfiprintf_r>:
 801a764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a768:	460d      	mov	r5, r1
 801a76a:	b09d      	sub	sp, #116	; 0x74
 801a76c:	4614      	mov	r4, r2
 801a76e:	4698      	mov	r8, r3
 801a770:	4606      	mov	r6, r0
 801a772:	b118      	cbz	r0, 801a77c <_vfiprintf_r+0x18>
 801a774:	6983      	ldr	r3, [r0, #24]
 801a776:	b90b      	cbnz	r3, 801a77c <_vfiprintf_r+0x18>
 801a778:	f7ff f976 	bl	8019a68 <__sinit>
 801a77c:	4b89      	ldr	r3, [pc, #548]	; (801a9a4 <_vfiprintf_r+0x240>)
 801a77e:	429d      	cmp	r5, r3
 801a780:	d11b      	bne.n	801a7ba <_vfiprintf_r+0x56>
 801a782:	6875      	ldr	r5, [r6, #4]
 801a784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a786:	07d9      	lsls	r1, r3, #31
 801a788:	d405      	bmi.n	801a796 <_vfiprintf_r+0x32>
 801a78a:	89ab      	ldrh	r3, [r5, #12]
 801a78c:	059a      	lsls	r2, r3, #22
 801a78e:	d402      	bmi.n	801a796 <_vfiprintf_r+0x32>
 801a790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a792:	f7ff fa1e 	bl	8019bd2 <__retarget_lock_acquire_recursive>
 801a796:	89ab      	ldrh	r3, [r5, #12]
 801a798:	071b      	lsls	r3, r3, #28
 801a79a:	d501      	bpl.n	801a7a0 <_vfiprintf_r+0x3c>
 801a79c:	692b      	ldr	r3, [r5, #16]
 801a79e:	b9eb      	cbnz	r3, 801a7dc <_vfiprintf_r+0x78>
 801a7a0:	4629      	mov	r1, r5
 801a7a2:	4630      	mov	r0, r6
 801a7a4:	f000 f9c6 	bl	801ab34 <__swsetup_r>
 801a7a8:	b1c0      	cbz	r0, 801a7dc <_vfiprintf_r+0x78>
 801a7aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a7ac:	07dc      	lsls	r4, r3, #31
 801a7ae:	d50e      	bpl.n	801a7ce <_vfiprintf_r+0x6a>
 801a7b0:	f04f 30ff 	mov.w	r0, #4294967295
 801a7b4:	b01d      	add	sp, #116	; 0x74
 801a7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ba:	4b7b      	ldr	r3, [pc, #492]	; (801a9a8 <_vfiprintf_r+0x244>)
 801a7bc:	429d      	cmp	r5, r3
 801a7be:	d101      	bne.n	801a7c4 <_vfiprintf_r+0x60>
 801a7c0:	68b5      	ldr	r5, [r6, #8]
 801a7c2:	e7df      	b.n	801a784 <_vfiprintf_r+0x20>
 801a7c4:	4b79      	ldr	r3, [pc, #484]	; (801a9ac <_vfiprintf_r+0x248>)
 801a7c6:	429d      	cmp	r5, r3
 801a7c8:	bf08      	it	eq
 801a7ca:	68f5      	ldreq	r5, [r6, #12]
 801a7cc:	e7da      	b.n	801a784 <_vfiprintf_r+0x20>
 801a7ce:	89ab      	ldrh	r3, [r5, #12]
 801a7d0:	0598      	lsls	r0, r3, #22
 801a7d2:	d4ed      	bmi.n	801a7b0 <_vfiprintf_r+0x4c>
 801a7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a7d6:	f7ff f9fd 	bl	8019bd4 <__retarget_lock_release_recursive>
 801a7da:	e7e9      	b.n	801a7b0 <_vfiprintf_r+0x4c>
 801a7dc:	2300      	movs	r3, #0
 801a7de:	9309      	str	r3, [sp, #36]	; 0x24
 801a7e0:	2320      	movs	r3, #32
 801a7e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a7e6:	f8cd 800c 	str.w	r8, [sp, #12]
 801a7ea:	2330      	movs	r3, #48	; 0x30
 801a7ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a9b0 <_vfiprintf_r+0x24c>
 801a7f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a7f4:	f04f 0901 	mov.w	r9, #1
 801a7f8:	4623      	mov	r3, r4
 801a7fa:	469a      	mov	sl, r3
 801a7fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a800:	b10a      	cbz	r2, 801a806 <_vfiprintf_r+0xa2>
 801a802:	2a25      	cmp	r2, #37	; 0x25
 801a804:	d1f9      	bne.n	801a7fa <_vfiprintf_r+0x96>
 801a806:	ebba 0b04 	subs.w	fp, sl, r4
 801a80a:	d00b      	beq.n	801a824 <_vfiprintf_r+0xc0>
 801a80c:	465b      	mov	r3, fp
 801a80e:	4622      	mov	r2, r4
 801a810:	4629      	mov	r1, r5
 801a812:	4630      	mov	r0, r6
 801a814:	f7ff ff93 	bl	801a73e <__sfputs_r>
 801a818:	3001      	adds	r0, #1
 801a81a:	f000 80aa 	beq.w	801a972 <_vfiprintf_r+0x20e>
 801a81e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a820:	445a      	add	r2, fp
 801a822:	9209      	str	r2, [sp, #36]	; 0x24
 801a824:	f89a 3000 	ldrb.w	r3, [sl]
 801a828:	2b00      	cmp	r3, #0
 801a82a:	f000 80a2 	beq.w	801a972 <_vfiprintf_r+0x20e>
 801a82e:	2300      	movs	r3, #0
 801a830:	f04f 32ff 	mov.w	r2, #4294967295
 801a834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a838:	f10a 0a01 	add.w	sl, sl, #1
 801a83c:	9304      	str	r3, [sp, #16]
 801a83e:	9307      	str	r3, [sp, #28]
 801a840:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a844:	931a      	str	r3, [sp, #104]	; 0x68
 801a846:	4654      	mov	r4, sl
 801a848:	2205      	movs	r2, #5
 801a84a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a84e:	4858      	ldr	r0, [pc, #352]	; (801a9b0 <_vfiprintf_r+0x24c>)
 801a850:	f7e5 fcc6 	bl	80001e0 <memchr>
 801a854:	9a04      	ldr	r2, [sp, #16]
 801a856:	b9d8      	cbnz	r0, 801a890 <_vfiprintf_r+0x12c>
 801a858:	06d1      	lsls	r1, r2, #27
 801a85a:	bf44      	itt	mi
 801a85c:	2320      	movmi	r3, #32
 801a85e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a862:	0713      	lsls	r3, r2, #28
 801a864:	bf44      	itt	mi
 801a866:	232b      	movmi	r3, #43	; 0x2b
 801a868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a86c:	f89a 3000 	ldrb.w	r3, [sl]
 801a870:	2b2a      	cmp	r3, #42	; 0x2a
 801a872:	d015      	beq.n	801a8a0 <_vfiprintf_r+0x13c>
 801a874:	9a07      	ldr	r2, [sp, #28]
 801a876:	4654      	mov	r4, sl
 801a878:	2000      	movs	r0, #0
 801a87a:	f04f 0c0a 	mov.w	ip, #10
 801a87e:	4621      	mov	r1, r4
 801a880:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a884:	3b30      	subs	r3, #48	; 0x30
 801a886:	2b09      	cmp	r3, #9
 801a888:	d94e      	bls.n	801a928 <_vfiprintf_r+0x1c4>
 801a88a:	b1b0      	cbz	r0, 801a8ba <_vfiprintf_r+0x156>
 801a88c:	9207      	str	r2, [sp, #28]
 801a88e:	e014      	b.n	801a8ba <_vfiprintf_r+0x156>
 801a890:	eba0 0308 	sub.w	r3, r0, r8
 801a894:	fa09 f303 	lsl.w	r3, r9, r3
 801a898:	4313      	orrs	r3, r2
 801a89a:	9304      	str	r3, [sp, #16]
 801a89c:	46a2      	mov	sl, r4
 801a89e:	e7d2      	b.n	801a846 <_vfiprintf_r+0xe2>
 801a8a0:	9b03      	ldr	r3, [sp, #12]
 801a8a2:	1d19      	adds	r1, r3, #4
 801a8a4:	681b      	ldr	r3, [r3, #0]
 801a8a6:	9103      	str	r1, [sp, #12]
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	bfbb      	ittet	lt
 801a8ac:	425b      	neglt	r3, r3
 801a8ae:	f042 0202 	orrlt.w	r2, r2, #2
 801a8b2:	9307      	strge	r3, [sp, #28]
 801a8b4:	9307      	strlt	r3, [sp, #28]
 801a8b6:	bfb8      	it	lt
 801a8b8:	9204      	strlt	r2, [sp, #16]
 801a8ba:	7823      	ldrb	r3, [r4, #0]
 801a8bc:	2b2e      	cmp	r3, #46	; 0x2e
 801a8be:	d10c      	bne.n	801a8da <_vfiprintf_r+0x176>
 801a8c0:	7863      	ldrb	r3, [r4, #1]
 801a8c2:	2b2a      	cmp	r3, #42	; 0x2a
 801a8c4:	d135      	bne.n	801a932 <_vfiprintf_r+0x1ce>
 801a8c6:	9b03      	ldr	r3, [sp, #12]
 801a8c8:	1d1a      	adds	r2, r3, #4
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	9203      	str	r2, [sp, #12]
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	bfb8      	it	lt
 801a8d2:	f04f 33ff 	movlt.w	r3, #4294967295
 801a8d6:	3402      	adds	r4, #2
 801a8d8:	9305      	str	r3, [sp, #20]
 801a8da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a9c0 <_vfiprintf_r+0x25c>
 801a8de:	7821      	ldrb	r1, [r4, #0]
 801a8e0:	2203      	movs	r2, #3
 801a8e2:	4650      	mov	r0, sl
 801a8e4:	f7e5 fc7c 	bl	80001e0 <memchr>
 801a8e8:	b140      	cbz	r0, 801a8fc <_vfiprintf_r+0x198>
 801a8ea:	2340      	movs	r3, #64	; 0x40
 801a8ec:	eba0 000a 	sub.w	r0, r0, sl
 801a8f0:	fa03 f000 	lsl.w	r0, r3, r0
 801a8f4:	9b04      	ldr	r3, [sp, #16]
 801a8f6:	4303      	orrs	r3, r0
 801a8f8:	3401      	adds	r4, #1
 801a8fa:	9304      	str	r3, [sp, #16]
 801a8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a900:	482c      	ldr	r0, [pc, #176]	; (801a9b4 <_vfiprintf_r+0x250>)
 801a902:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a906:	2206      	movs	r2, #6
 801a908:	f7e5 fc6a 	bl	80001e0 <memchr>
 801a90c:	2800      	cmp	r0, #0
 801a90e:	d03f      	beq.n	801a990 <_vfiprintf_r+0x22c>
 801a910:	4b29      	ldr	r3, [pc, #164]	; (801a9b8 <_vfiprintf_r+0x254>)
 801a912:	bb1b      	cbnz	r3, 801a95c <_vfiprintf_r+0x1f8>
 801a914:	9b03      	ldr	r3, [sp, #12]
 801a916:	3307      	adds	r3, #7
 801a918:	f023 0307 	bic.w	r3, r3, #7
 801a91c:	3308      	adds	r3, #8
 801a91e:	9303      	str	r3, [sp, #12]
 801a920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a922:	443b      	add	r3, r7
 801a924:	9309      	str	r3, [sp, #36]	; 0x24
 801a926:	e767      	b.n	801a7f8 <_vfiprintf_r+0x94>
 801a928:	fb0c 3202 	mla	r2, ip, r2, r3
 801a92c:	460c      	mov	r4, r1
 801a92e:	2001      	movs	r0, #1
 801a930:	e7a5      	b.n	801a87e <_vfiprintf_r+0x11a>
 801a932:	2300      	movs	r3, #0
 801a934:	3401      	adds	r4, #1
 801a936:	9305      	str	r3, [sp, #20]
 801a938:	4619      	mov	r1, r3
 801a93a:	f04f 0c0a 	mov.w	ip, #10
 801a93e:	4620      	mov	r0, r4
 801a940:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a944:	3a30      	subs	r2, #48	; 0x30
 801a946:	2a09      	cmp	r2, #9
 801a948:	d903      	bls.n	801a952 <_vfiprintf_r+0x1ee>
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d0c5      	beq.n	801a8da <_vfiprintf_r+0x176>
 801a94e:	9105      	str	r1, [sp, #20]
 801a950:	e7c3      	b.n	801a8da <_vfiprintf_r+0x176>
 801a952:	fb0c 2101 	mla	r1, ip, r1, r2
 801a956:	4604      	mov	r4, r0
 801a958:	2301      	movs	r3, #1
 801a95a:	e7f0      	b.n	801a93e <_vfiprintf_r+0x1da>
 801a95c:	ab03      	add	r3, sp, #12
 801a95e:	9300      	str	r3, [sp, #0]
 801a960:	462a      	mov	r2, r5
 801a962:	4b16      	ldr	r3, [pc, #88]	; (801a9bc <_vfiprintf_r+0x258>)
 801a964:	a904      	add	r1, sp, #16
 801a966:	4630      	mov	r0, r6
 801a968:	f7fd fc3e 	bl	80181e8 <_printf_float>
 801a96c:	4607      	mov	r7, r0
 801a96e:	1c78      	adds	r0, r7, #1
 801a970:	d1d6      	bne.n	801a920 <_vfiprintf_r+0x1bc>
 801a972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a974:	07d9      	lsls	r1, r3, #31
 801a976:	d405      	bmi.n	801a984 <_vfiprintf_r+0x220>
 801a978:	89ab      	ldrh	r3, [r5, #12]
 801a97a:	059a      	lsls	r2, r3, #22
 801a97c:	d402      	bmi.n	801a984 <_vfiprintf_r+0x220>
 801a97e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a980:	f7ff f928 	bl	8019bd4 <__retarget_lock_release_recursive>
 801a984:	89ab      	ldrh	r3, [r5, #12]
 801a986:	065b      	lsls	r3, r3, #25
 801a988:	f53f af12 	bmi.w	801a7b0 <_vfiprintf_r+0x4c>
 801a98c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a98e:	e711      	b.n	801a7b4 <_vfiprintf_r+0x50>
 801a990:	ab03      	add	r3, sp, #12
 801a992:	9300      	str	r3, [sp, #0]
 801a994:	462a      	mov	r2, r5
 801a996:	4b09      	ldr	r3, [pc, #36]	; (801a9bc <_vfiprintf_r+0x258>)
 801a998:	a904      	add	r1, sp, #16
 801a99a:	4630      	mov	r0, r6
 801a99c:	f7fd fec8 	bl	8018730 <_printf_i>
 801a9a0:	e7e4      	b.n	801a96c <_vfiprintf_r+0x208>
 801a9a2:	bf00      	nop
 801a9a4:	0801d6a8 	.word	0x0801d6a8
 801a9a8:	0801d6c8 	.word	0x0801d6c8
 801a9ac:	0801d688 	.word	0x0801d688
 801a9b0:	0801d844 	.word	0x0801d844
 801a9b4:	0801d84e 	.word	0x0801d84e
 801a9b8:	080181e9 	.word	0x080181e9
 801a9bc:	0801a73f 	.word	0x0801a73f
 801a9c0:	0801d84a 	.word	0x0801d84a

0801a9c4 <_sbrk_r>:
 801a9c4:	b538      	push	{r3, r4, r5, lr}
 801a9c6:	4d06      	ldr	r5, [pc, #24]	; (801a9e0 <_sbrk_r+0x1c>)
 801a9c8:	2300      	movs	r3, #0
 801a9ca:	4604      	mov	r4, r0
 801a9cc:	4608      	mov	r0, r1
 801a9ce:	602b      	str	r3, [r5, #0]
 801a9d0:	f7f0 fd60 	bl	800b494 <_sbrk>
 801a9d4:	1c43      	adds	r3, r0, #1
 801a9d6:	d102      	bne.n	801a9de <_sbrk_r+0x1a>
 801a9d8:	682b      	ldr	r3, [r5, #0]
 801a9da:	b103      	cbz	r3, 801a9de <_sbrk_r+0x1a>
 801a9dc:	6023      	str	r3, [r4, #0]
 801a9de:	bd38      	pop	{r3, r4, r5, pc}
 801a9e0:	20003dd4 	.word	0x20003dd4

0801a9e4 <__sread>:
 801a9e4:	b510      	push	{r4, lr}
 801a9e6:	460c      	mov	r4, r1
 801a9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a9ec:	f000 fabe 	bl	801af6c <_read_r>
 801a9f0:	2800      	cmp	r0, #0
 801a9f2:	bfab      	itete	ge
 801a9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a9f6:	89a3      	ldrhlt	r3, [r4, #12]
 801a9f8:	181b      	addge	r3, r3, r0
 801a9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a9fe:	bfac      	ite	ge
 801aa00:	6563      	strge	r3, [r4, #84]	; 0x54
 801aa02:	81a3      	strhlt	r3, [r4, #12]
 801aa04:	bd10      	pop	{r4, pc}

0801aa06 <__swrite>:
 801aa06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa0a:	461f      	mov	r7, r3
 801aa0c:	898b      	ldrh	r3, [r1, #12]
 801aa0e:	05db      	lsls	r3, r3, #23
 801aa10:	4605      	mov	r5, r0
 801aa12:	460c      	mov	r4, r1
 801aa14:	4616      	mov	r6, r2
 801aa16:	d505      	bpl.n	801aa24 <__swrite+0x1e>
 801aa18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa1c:	2302      	movs	r3, #2
 801aa1e:	2200      	movs	r2, #0
 801aa20:	f000 f9d0 	bl	801adc4 <_lseek_r>
 801aa24:	89a3      	ldrh	r3, [r4, #12]
 801aa26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801aa2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801aa2e:	81a3      	strh	r3, [r4, #12]
 801aa30:	4632      	mov	r2, r6
 801aa32:	463b      	mov	r3, r7
 801aa34:	4628      	mov	r0, r5
 801aa36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801aa3a:	f000 b869 	b.w	801ab10 <_write_r>

0801aa3e <__sseek>:
 801aa3e:	b510      	push	{r4, lr}
 801aa40:	460c      	mov	r4, r1
 801aa42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa46:	f000 f9bd 	bl	801adc4 <_lseek_r>
 801aa4a:	1c43      	adds	r3, r0, #1
 801aa4c:	89a3      	ldrh	r3, [r4, #12]
 801aa4e:	bf15      	itete	ne
 801aa50:	6560      	strne	r0, [r4, #84]	; 0x54
 801aa52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801aa56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801aa5a:	81a3      	strheq	r3, [r4, #12]
 801aa5c:	bf18      	it	ne
 801aa5e:	81a3      	strhne	r3, [r4, #12]
 801aa60:	bd10      	pop	{r4, pc}

0801aa62 <__sclose>:
 801aa62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa66:	f000 b8db 	b.w	801ac20 <_close_r>
	...

0801aa6c <__swbuf_r>:
 801aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa6e:	460e      	mov	r6, r1
 801aa70:	4614      	mov	r4, r2
 801aa72:	4605      	mov	r5, r0
 801aa74:	b118      	cbz	r0, 801aa7e <__swbuf_r+0x12>
 801aa76:	6983      	ldr	r3, [r0, #24]
 801aa78:	b90b      	cbnz	r3, 801aa7e <__swbuf_r+0x12>
 801aa7a:	f7fe fff5 	bl	8019a68 <__sinit>
 801aa7e:	4b21      	ldr	r3, [pc, #132]	; (801ab04 <__swbuf_r+0x98>)
 801aa80:	429c      	cmp	r4, r3
 801aa82:	d12b      	bne.n	801aadc <__swbuf_r+0x70>
 801aa84:	686c      	ldr	r4, [r5, #4]
 801aa86:	69a3      	ldr	r3, [r4, #24]
 801aa88:	60a3      	str	r3, [r4, #8]
 801aa8a:	89a3      	ldrh	r3, [r4, #12]
 801aa8c:	071a      	lsls	r2, r3, #28
 801aa8e:	d52f      	bpl.n	801aaf0 <__swbuf_r+0x84>
 801aa90:	6923      	ldr	r3, [r4, #16]
 801aa92:	b36b      	cbz	r3, 801aaf0 <__swbuf_r+0x84>
 801aa94:	6923      	ldr	r3, [r4, #16]
 801aa96:	6820      	ldr	r0, [r4, #0]
 801aa98:	1ac0      	subs	r0, r0, r3
 801aa9a:	6963      	ldr	r3, [r4, #20]
 801aa9c:	b2f6      	uxtb	r6, r6
 801aa9e:	4283      	cmp	r3, r0
 801aaa0:	4637      	mov	r7, r6
 801aaa2:	dc04      	bgt.n	801aaae <__swbuf_r+0x42>
 801aaa4:	4621      	mov	r1, r4
 801aaa6:	4628      	mov	r0, r5
 801aaa8:	f000 f950 	bl	801ad4c <_fflush_r>
 801aaac:	bb30      	cbnz	r0, 801aafc <__swbuf_r+0x90>
 801aaae:	68a3      	ldr	r3, [r4, #8]
 801aab0:	3b01      	subs	r3, #1
 801aab2:	60a3      	str	r3, [r4, #8]
 801aab4:	6823      	ldr	r3, [r4, #0]
 801aab6:	1c5a      	adds	r2, r3, #1
 801aab8:	6022      	str	r2, [r4, #0]
 801aaba:	701e      	strb	r6, [r3, #0]
 801aabc:	6963      	ldr	r3, [r4, #20]
 801aabe:	3001      	adds	r0, #1
 801aac0:	4283      	cmp	r3, r0
 801aac2:	d004      	beq.n	801aace <__swbuf_r+0x62>
 801aac4:	89a3      	ldrh	r3, [r4, #12]
 801aac6:	07db      	lsls	r3, r3, #31
 801aac8:	d506      	bpl.n	801aad8 <__swbuf_r+0x6c>
 801aaca:	2e0a      	cmp	r6, #10
 801aacc:	d104      	bne.n	801aad8 <__swbuf_r+0x6c>
 801aace:	4621      	mov	r1, r4
 801aad0:	4628      	mov	r0, r5
 801aad2:	f000 f93b 	bl	801ad4c <_fflush_r>
 801aad6:	b988      	cbnz	r0, 801aafc <__swbuf_r+0x90>
 801aad8:	4638      	mov	r0, r7
 801aada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aadc:	4b0a      	ldr	r3, [pc, #40]	; (801ab08 <__swbuf_r+0x9c>)
 801aade:	429c      	cmp	r4, r3
 801aae0:	d101      	bne.n	801aae6 <__swbuf_r+0x7a>
 801aae2:	68ac      	ldr	r4, [r5, #8]
 801aae4:	e7cf      	b.n	801aa86 <__swbuf_r+0x1a>
 801aae6:	4b09      	ldr	r3, [pc, #36]	; (801ab0c <__swbuf_r+0xa0>)
 801aae8:	429c      	cmp	r4, r3
 801aaea:	bf08      	it	eq
 801aaec:	68ec      	ldreq	r4, [r5, #12]
 801aaee:	e7ca      	b.n	801aa86 <__swbuf_r+0x1a>
 801aaf0:	4621      	mov	r1, r4
 801aaf2:	4628      	mov	r0, r5
 801aaf4:	f000 f81e 	bl	801ab34 <__swsetup_r>
 801aaf8:	2800      	cmp	r0, #0
 801aafa:	d0cb      	beq.n	801aa94 <__swbuf_r+0x28>
 801aafc:	f04f 37ff 	mov.w	r7, #4294967295
 801ab00:	e7ea      	b.n	801aad8 <__swbuf_r+0x6c>
 801ab02:	bf00      	nop
 801ab04:	0801d6a8 	.word	0x0801d6a8
 801ab08:	0801d6c8 	.word	0x0801d6c8
 801ab0c:	0801d688 	.word	0x0801d688

0801ab10 <_write_r>:
 801ab10:	b538      	push	{r3, r4, r5, lr}
 801ab12:	4d07      	ldr	r5, [pc, #28]	; (801ab30 <_write_r+0x20>)
 801ab14:	4604      	mov	r4, r0
 801ab16:	4608      	mov	r0, r1
 801ab18:	4611      	mov	r1, r2
 801ab1a:	2200      	movs	r2, #0
 801ab1c:	602a      	str	r2, [r5, #0]
 801ab1e:	461a      	mov	r2, r3
 801ab20:	f7f0 fc67 	bl	800b3f2 <_write>
 801ab24:	1c43      	adds	r3, r0, #1
 801ab26:	d102      	bne.n	801ab2e <_write_r+0x1e>
 801ab28:	682b      	ldr	r3, [r5, #0]
 801ab2a:	b103      	cbz	r3, 801ab2e <_write_r+0x1e>
 801ab2c:	6023      	str	r3, [r4, #0]
 801ab2e:	bd38      	pop	{r3, r4, r5, pc}
 801ab30:	20003dd4 	.word	0x20003dd4

0801ab34 <__swsetup_r>:
 801ab34:	4b32      	ldr	r3, [pc, #200]	; (801ac00 <__swsetup_r+0xcc>)
 801ab36:	b570      	push	{r4, r5, r6, lr}
 801ab38:	681d      	ldr	r5, [r3, #0]
 801ab3a:	4606      	mov	r6, r0
 801ab3c:	460c      	mov	r4, r1
 801ab3e:	b125      	cbz	r5, 801ab4a <__swsetup_r+0x16>
 801ab40:	69ab      	ldr	r3, [r5, #24]
 801ab42:	b913      	cbnz	r3, 801ab4a <__swsetup_r+0x16>
 801ab44:	4628      	mov	r0, r5
 801ab46:	f7fe ff8f 	bl	8019a68 <__sinit>
 801ab4a:	4b2e      	ldr	r3, [pc, #184]	; (801ac04 <__swsetup_r+0xd0>)
 801ab4c:	429c      	cmp	r4, r3
 801ab4e:	d10f      	bne.n	801ab70 <__swsetup_r+0x3c>
 801ab50:	686c      	ldr	r4, [r5, #4]
 801ab52:	89a3      	ldrh	r3, [r4, #12]
 801ab54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ab58:	0719      	lsls	r1, r3, #28
 801ab5a:	d42c      	bmi.n	801abb6 <__swsetup_r+0x82>
 801ab5c:	06dd      	lsls	r5, r3, #27
 801ab5e:	d411      	bmi.n	801ab84 <__swsetup_r+0x50>
 801ab60:	2309      	movs	r3, #9
 801ab62:	6033      	str	r3, [r6, #0]
 801ab64:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ab68:	81a3      	strh	r3, [r4, #12]
 801ab6a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab6e:	e03e      	b.n	801abee <__swsetup_r+0xba>
 801ab70:	4b25      	ldr	r3, [pc, #148]	; (801ac08 <__swsetup_r+0xd4>)
 801ab72:	429c      	cmp	r4, r3
 801ab74:	d101      	bne.n	801ab7a <__swsetup_r+0x46>
 801ab76:	68ac      	ldr	r4, [r5, #8]
 801ab78:	e7eb      	b.n	801ab52 <__swsetup_r+0x1e>
 801ab7a:	4b24      	ldr	r3, [pc, #144]	; (801ac0c <__swsetup_r+0xd8>)
 801ab7c:	429c      	cmp	r4, r3
 801ab7e:	bf08      	it	eq
 801ab80:	68ec      	ldreq	r4, [r5, #12]
 801ab82:	e7e6      	b.n	801ab52 <__swsetup_r+0x1e>
 801ab84:	0758      	lsls	r0, r3, #29
 801ab86:	d512      	bpl.n	801abae <__swsetup_r+0x7a>
 801ab88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ab8a:	b141      	cbz	r1, 801ab9e <__swsetup_r+0x6a>
 801ab8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ab90:	4299      	cmp	r1, r3
 801ab92:	d002      	beq.n	801ab9a <__swsetup_r+0x66>
 801ab94:	4630      	mov	r0, r6
 801ab96:	f7ff fbb5 	bl	801a304 <_free_r>
 801ab9a:	2300      	movs	r3, #0
 801ab9c:	6363      	str	r3, [r4, #52]	; 0x34
 801ab9e:	89a3      	ldrh	r3, [r4, #12]
 801aba0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aba4:	81a3      	strh	r3, [r4, #12]
 801aba6:	2300      	movs	r3, #0
 801aba8:	6063      	str	r3, [r4, #4]
 801abaa:	6923      	ldr	r3, [r4, #16]
 801abac:	6023      	str	r3, [r4, #0]
 801abae:	89a3      	ldrh	r3, [r4, #12]
 801abb0:	f043 0308 	orr.w	r3, r3, #8
 801abb4:	81a3      	strh	r3, [r4, #12]
 801abb6:	6923      	ldr	r3, [r4, #16]
 801abb8:	b94b      	cbnz	r3, 801abce <__swsetup_r+0x9a>
 801abba:	89a3      	ldrh	r3, [r4, #12]
 801abbc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801abc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801abc4:	d003      	beq.n	801abce <__swsetup_r+0x9a>
 801abc6:	4621      	mov	r1, r4
 801abc8:	4630      	mov	r0, r6
 801abca:	f000 f931 	bl	801ae30 <__smakebuf_r>
 801abce:	89a0      	ldrh	r0, [r4, #12]
 801abd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801abd4:	f010 0301 	ands.w	r3, r0, #1
 801abd8:	d00a      	beq.n	801abf0 <__swsetup_r+0xbc>
 801abda:	2300      	movs	r3, #0
 801abdc:	60a3      	str	r3, [r4, #8]
 801abde:	6963      	ldr	r3, [r4, #20]
 801abe0:	425b      	negs	r3, r3
 801abe2:	61a3      	str	r3, [r4, #24]
 801abe4:	6923      	ldr	r3, [r4, #16]
 801abe6:	b943      	cbnz	r3, 801abfa <__swsetup_r+0xc6>
 801abe8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801abec:	d1ba      	bne.n	801ab64 <__swsetup_r+0x30>
 801abee:	bd70      	pop	{r4, r5, r6, pc}
 801abf0:	0781      	lsls	r1, r0, #30
 801abf2:	bf58      	it	pl
 801abf4:	6963      	ldrpl	r3, [r4, #20]
 801abf6:	60a3      	str	r3, [r4, #8]
 801abf8:	e7f4      	b.n	801abe4 <__swsetup_r+0xb0>
 801abfa:	2000      	movs	r0, #0
 801abfc:	e7f7      	b.n	801abee <__swsetup_r+0xba>
 801abfe:	bf00      	nop
 801ac00:	20000944 	.word	0x20000944
 801ac04:	0801d6a8 	.word	0x0801d6a8
 801ac08:	0801d6c8 	.word	0x0801d6c8
 801ac0c:	0801d688 	.word	0x0801d688

0801ac10 <abort>:
 801ac10:	b508      	push	{r3, lr}
 801ac12:	2006      	movs	r0, #6
 801ac14:	f000 f9e4 	bl	801afe0 <raise>
 801ac18:	2001      	movs	r0, #1
 801ac1a:	f7f0 fbc3 	bl	800b3a4 <_exit>
	...

0801ac20 <_close_r>:
 801ac20:	b538      	push	{r3, r4, r5, lr}
 801ac22:	4d06      	ldr	r5, [pc, #24]	; (801ac3c <_close_r+0x1c>)
 801ac24:	2300      	movs	r3, #0
 801ac26:	4604      	mov	r4, r0
 801ac28:	4608      	mov	r0, r1
 801ac2a:	602b      	str	r3, [r5, #0]
 801ac2c:	f7f0 fbfd 	bl	800b42a <_close>
 801ac30:	1c43      	adds	r3, r0, #1
 801ac32:	d102      	bne.n	801ac3a <_close_r+0x1a>
 801ac34:	682b      	ldr	r3, [r5, #0]
 801ac36:	b103      	cbz	r3, 801ac3a <_close_r+0x1a>
 801ac38:	6023      	str	r3, [r4, #0]
 801ac3a:	bd38      	pop	{r3, r4, r5, pc}
 801ac3c:	20003dd4 	.word	0x20003dd4

0801ac40 <__sflush_r>:
 801ac40:	898a      	ldrh	r2, [r1, #12]
 801ac42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ac46:	4605      	mov	r5, r0
 801ac48:	0710      	lsls	r0, r2, #28
 801ac4a:	460c      	mov	r4, r1
 801ac4c:	d458      	bmi.n	801ad00 <__sflush_r+0xc0>
 801ac4e:	684b      	ldr	r3, [r1, #4]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	dc05      	bgt.n	801ac60 <__sflush_r+0x20>
 801ac54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	dc02      	bgt.n	801ac60 <__sflush_r+0x20>
 801ac5a:	2000      	movs	r0, #0
 801ac5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ac60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac62:	2e00      	cmp	r6, #0
 801ac64:	d0f9      	beq.n	801ac5a <__sflush_r+0x1a>
 801ac66:	2300      	movs	r3, #0
 801ac68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ac6c:	682f      	ldr	r7, [r5, #0]
 801ac6e:	602b      	str	r3, [r5, #0]
 801ac70:	d032      	beq.n	801acd8 <__sflush_r+0x98>
 801ac72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ac74:	89a3      	ldrh	r3, [r4, #12]
 801ac76:	075a      	lsls	r2, r3, #29
 801ac78:	d505      	bpl.n	801ac86 <__sflush_r+0x46>
 801ac7a:	6863      	ldr	r3, [r4, #4]
 801ac7c:	1ac0      	subs	r0, r0, r3
 801ac7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ac80:	b10b      	cbz	r3, 801ac86 <__sflush_r+0x46>
 801ac82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ac84:	1ac0      	subs	r0, r0, r3
 801ac86:	2300      	movs	r3, #0
 801ac88:	4602      	mov	r2, r0
 801ac8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ac8c:	6a21      	ldr	r1, [r4, #32]
 801ac8e:	4628      	mov	r0, r5
 801ac90:	47b0      	blx	r6
 801ac92:	1c43      	adds	r3, r0, #1
 801ac94:	89a3      	ldrh	r3, [r4, #12]
 801ac96:	d106      	bne.n	801aca6 <__sflush_r+0x66>
 801ac98:	6829      	ldr	r1, [r5, #0]
 801ac9a:	291d      	cmp	r1, #29
 801ac9c:	d82c      	bhi.n	801acf8 <__sflush_r+0xb8>
 801ac9e:	4a2a      	ldr	r2, [pc, #168]	; (801ad48 <__sflush_r+0x108>)
 801aca0:	40ca      	lsrs	r2, r1
 801aca2:	07d6      	lsls	r6, r2, #31
 801aca4:	d528      	bpl.n	801acf8 <__sflush_r+0xb8>
 801aca6:	2200      	movs	r2, #0
 801aca8:	6062      	str	r2, [r4, #4]
 801acaa:	04d9      	lsls	r1, r3, #19
 801acac:	6922      	ldr	r2, [r4, #16]
 801acae:	6022      	str	r2, [r4, #0]
 801acb0:	d504      	bpl.n	801acbc <__sflush_r+0x7c>
 801acb2:	1c42      	adds	r2, r0, #1
 801acb4:	d101      	bne.n	801acba <__sflush_r+0x7a>
 801acb6:	682b      	ldr	r3, [r5, #0]
 801acb8:	b903      	cbnz	r3, 801acbc <__sflush_r+0x7c>
 801acba:	6560      	str	r0, [r4, #84]	; 0x54
 801acbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801acbe:	602f      	str	r7, [r5, #0]
 801acc0:	2900      	cmp	r1, #0
 801acc2:	d0ca      	beq.n	801ac5a <__sflush_r+0x1a>
 801acc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801acc8:	4299      	cmp	r1, r3
 801acca:	d002      	beq.n	801acd2 <__sflush_r+0x92>
 801accc:	4628      	mov	r0, r5
 801acce:	f7ff fb19 	bl	801a304 <_free_r>
 801acd2:	2000      	movs	r0, #0
 801acd4:	6360      	str	r0, [r4, #52]	; 0x34
 801acd6:	e7c1      	b.n	801ac5c <__sflush_r+0x1c>
 801acd8:	6a21      	ldr	r1, [r4, #32]
 801acda:	2301      	movs	r3, #1
 801acdc:	4628      	mov	r0, r5
 801acde:	47b0      	blx	r6
 801ace0:	1c41      	adds	r1, r0, #1
 801ace2:	d1c7      	bne.n	801ac74 <__sflush_r+0x34>
 801ace4:	682b      	ldr	r3, [r5, #0]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d0c4      	beq.n	801ac74 <__sflush_r+0x34>
 801acea:	2b1d      	cmp	r3, #29
 801acec:	d001      	beq.n	801acf2 <__sflush_r+0xb2>
 801acee:	2b16      	cmp	r3, #22
 801acf0:	d101      	bne.n	801acf6 <__sflush_r+0xb6>
 801acf2:	602f      	str	r7, [r5, #0]
 801acf4:	e7b1      	b.n	801ac5a <__sflush_r+0x1a>
 801acf6:	89a3      	ldrh	r3, [r4, #12]
 801acf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801acfc:	81a3      	strh	r3, [r4, #12]
 801acfe:	e7ad      	b.n	801ac5c <__sflush_r+0x1c>
 801ad00:	690f      	ldr	r7, [r1, #16]
 801ad02:	2f00      	cmp	r7, #0
 801ad04:	d0a9      	beq.n	801ac5a <__sflush_r+0x1a>
 801ad06:	0793      	lsls	r3, r2, #30
 801ad08:	680e      	ldr	r6, [r1, #0]
 801ad0a:	bf08      	it	eq
 801ad0c:	694b      	ldreq	r3, [r1, #20]
 801ad0e:	600f      	str	r7, [r1, #0]
 801ad10:	bf18      	it	ne
 801ad12:	2300      	movne	r3, #0
 801ad14:	eba6 0807 	sub.w	r8, r6, r7
 801ad18:	608b      	str	r3, [r1, #8]
 801ad1a:	f1b8 0f00 	cmp.w	r8, #0
 801ad1e:	dd9c      	ble.n	801ac5a <__sflush_r+0x1a>
 801ad20:	6a21      	ldr	r1, [r4, #32]
 801ad22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ad24:	4643      	mov	r3, r8
 801ad26:	463a      	mov	r2, r7
 801ad28:	4628      	mov	r0, r5
 801ad2a:	47b0      	blx	r6
 801ad2c:	2800      	cmp	r0, #0
 801ad2e:	dc06      	bgt.n	801ad3e <__sflush_r+0xfe>
 801ad30:	89a3      	ldrh	r3, [r4, #12]
 801ad32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ad36:	81a3      	strh	r3, [r4, #12]
 801ad38:	f04f 30ff 	mov.w	r0, #4294967295
 801ad3c:	e78e      	b.n	801ac5c <__sflush_r+0x1c>
 801ad3e:	4407      	add	r7, r0
 801ad40:	eba8 0800 	sub.w	r8, r8, r0
 801ad44:	e7e9      	b.n	801ad1a <__sflush_r+0xda>
 801ad46:	bf00      	nop
 801ad48:	20400001 	.word	0x20400001

0801ad4c <_fflush_r>:
 801ad4c:	b538      	push	{r3, r4, r5, lr}
 801ad4e:	690b      	ldr	r3, [r1, #16]
 801ad50:	4605      	mov	r5, r0
 801ad52:	460c      	mov	r4, r1
 801ad54:	b913      	cbnz	r3, 801ad5c <_fflush_r+0x10>
 801ad56:	2500      	movs	r5, #0
 801ad58:	4628      	mov	r0, r5
 801ad5a:	bd38      	pop	{r3, r4, r5, pc}
 801ad5c:	b118      	cbz	r0, 801ad66 <_fflush_r+0x1a>
 801ad5e:	6983      	ldr	r3, [r0, #24]
 801ad60:	b90b      	cbnz	r3, 801ad66 <_fflush_r+0x1a>
 801ad62:	f7fe fe81 	bl	8019a68 <__sinit>
 801ad66:	4b14      	ldr	r3, [pc, #80]	; (801adb8 <_fflush_r+0x6c>)
 801ad68:	429c      	cmp	r4, r3
 801ad6a:	d11b      	bne.n	801ada4 <_fflush_r+0x58>
 801ad6c:	686c      	ldr	r4, [r5, #4]
 801ad6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d0ef      	beq.n	801ad56 <_fflush_r+0xa>
 801ad76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ad78:	07d0      	lsls	r0, r2, #31
 801ad7a:	d404      	bmi.n	801ad86 <_fflush_r+0x3a>
 801ad7c:	0599      	lsls	r1, r3, #22
 801ad7e:	d402      	bmi.n	801ad86 <_fflush_r+0x3a>
 801ad80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad82:	f7fe ff26 	bl	8019bd2 <__retarget_lock_acquire_recursive>
 801ad86:	4628      	mov	r0, r5
 801ad88:	4621      	mov	r1, r4
 801ad8a:	f7ff ff59 	bl	801ac40 <__sflush_r>
 801ad8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ad90:	07da      	lsls	r2, r3, #31
 801ad92:	4605      	mov	r5, r0
 801ad94:	d4e0      	bmi.n	801ad58 <_fflush_r+0xc>
 801ad96:	89a3      	ldrh	r3, [r4, #12]
 801ad98:	059b      	lsls	r3, r3, #22
 801ad9a:	d4dd      	bmi.n	801ad58 <_fflush_r+0xc>
 801ad9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ad9e:	f7fe ff19 	bl	8019bd4 <__retarget_lock_release_recursive>
 801ada2:	e7d9      	b.n	801ad58 <_fflush_r+0xc>
 801ada4:	4b05      	ldr	r3, [pc, #20]	; (801adbc <_fflush_r+0x70>)
 801ada6:	429c      	cmp	r4, r3
 801ada8:	d101      	bne.n	801adae <_fflush_r+0x62>
 801adaa:	68ac      	ldr	r4, [r5, #8]
 801adac:	e7df      	b.n	801ad6e <_fflush_r+0x22>
 801adae:	4b04      	ldr	r3, [pc, #16]	; (801adc0 <_fflush_r+0x74>)
 801adb0:	429c      	cmp	r4, r3
 801adb2:	bf08      	it	eq
 801adb4:	68ec      	ldreq	r4, [r5, #12]
 801adb6:	e7da      	b.n	801ad6e <_fflush_r+0x22>
 801adb8:	0801d6a8 	.word	0x0801d6a8
 801adbc:	0801d6c8 	.word	0x0801d6c8
 801adc0:	0801d688 	.word	0x0801d688

0801adc4 <_lseek_r>:
 801adc4:	b538      	push	{r3, r4, r5, lr}
 801adc6:	4d07      	ldr	r5, [pc, #28]	; (801ade4 <_lseek_r+0x20>)
 801adc8:	4604      	mov	r4, r0
 801adca:	4608      	mov	r0, r1
 801adcc:	4611      	mov	r1, r2
 801adce:	2200      	movs	r2, #0
 801add0:	602a      	str	r2, [r5, #0]
 801add2:	461a      	mov	r2, r3
 801add4:	f7f0 fb50 	bl	800b478 <_lseek>
 801add8:	1c43      	adds	r3, r0, #1
 801adda:	d102      	bne.n	801ade2 <_lseek_r+0x1e>
 801addc:	682b      	ldr	r3, [r5, #0]
 801adde:	b103      	cbz	r3, 801ade2 <_lseek_r+0x1e>
 801ade0:	6023      	str	r3, [r4, #0]
 801ade2:	bd38      	pop	{r3, r4, r5, pc}
 801ade4:	20003dd4 	.word	0x20003dd4

0801ade8 <__swhatbuf_r>:
 801ade8:	b570      	push	{r4, r5, r6, lr}
 801adea:	460e      	mov	r6, r1
 801adec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801adf0:	2900      	cmp	r1, #0
 801adf2:	b096      	sub	sp, #88	; 0x58
 801adf4:	4614      	mov	r4, r2
 801adf6:	461d      	mov	r5, r3
 801adf8:	da07      	bge.n	801ae0a <__swhatbuf_r+0x22>
 801adfa:	2300      	movs	r3, #0
 801adfc:	602b      	str	r3, [r5, #0]
 801adfe:	89b3      	ldrh	r3, [r6, #12]
 801ae00:	061a      	lsls	r2, r3, #24
 801ae02:	d410      	bmi.n	801ae26 <__swhatbuf_r+0x3e>
 801ae04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ae08:	e00e      	b.n	801ae28 <__swhatbuf_r+0x40>
 801ae0a:	466a      	mov	r2, sp
 801ae0c:	f000 f912 	bl	801b034 <_fstat_r>
 801ae10:	2800      	cmp	r0, #0
 801ae12:	dbf2      	blt.n	801adfa <__swhatbuf_r+0x12>
 801ae14:	9a01      	ldr	r2, [sp, #4]
 801ae16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ae1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ae1e:	425a      	negs	r2, r3
 801ae20:	415a      	adcs	r2, r3
 801ae22:	602a      	str	r2, [r5, #0]
 801ae24:	e7ee      	b.n	801ae04 <__swhatbuf_r+0x1c>
 801ae26:	2340      	movs	r3, #64	; 0x40
 801ae28:	2000      	movs	r0, #0
 801ae2a:	6023      	str	r3, [r4, #0]
 801ae2c:	b016      	add	sp, #88	; 0x58
 801ae2e:	bd70      	pop	{r4, r5, r6, pc}

0801ae30 <__smakebuf_r>:
 801ae30:	898b      	ldrh	r3, [r1, #12]
 801ae32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ae34:	079d      	lsls	r5, r3, #30
 801ae36:	4606      	mov	r6, r0
 801ae38:	460c      	mov	r4, r1
 801ae3a:	d507      	bpl.n	801ae4c <__smakebuf_r+0x1c>
 801ae3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ae40:	6023      	str	r3, [r4, #0]
 801ae42:	6123      	str	r3, [r4, #16]
 801ae44:	2301      	movs	r3, #1
 801ae46:	6163      	str	r3, [r4, #20]
 801ae48:	b002      	add	sp, #8
 801ae4a:	bd70      	pop	{r4, r5, r6, pc}
 801ae4c:	ab01      	add	r3, sp, #4
 801ae4e:	466a      	mov	r2, sp
 801ae50:	f7ff ffca 	bl	801ade8 <__swhatbuf_r>
 801ae54:	9900      	ldr	r1, [sp, #0]
 801ae56:	4605      	mov	r5, r0
 801ae58:	4630      	mov	r0, r6
 801ae5a:	f7ff faa3 	bl	801a3a4 <_malloc_r>
 801ae5e:	b948      	cbnz	r0, 801ae74 <__smakebuf_r+0x44>
 801ae60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae64:	059a      	lsls	r2, r3, #22
 801ae66:	d4ef      	bmi.n	801ae48 <__smakebuf_r+0x18>
 801ae68:	f023 0303 	bic.w	r3, r3, #3
 801ae6c:	f043 0302 	orr.w	r3, r3, #2
 801ae70:	81a3      	strh	r3, [r4, #12]
 801ae72:	e7e3      	b.n	801ae3c <__smakebuf_r+0xc>
 801ae74:	4b0d      	ldr	r3, [pc, #52]	; (801aeac <__smakebuf_r+0x7c>)
 801ae76:	62b3      	str	r3, [r6, #40]	; 0x28
 801ae78:	89a3      	ldrh	r3, [r4, #12]
 801ae7a:	6020      	str	r0, [r4, #0]
 801ae7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ae80:	81a3      	strh	r3, [r4, #12]
 801ae82:	9b00      	ldr	r3, [sp, #0]
 801ae84:	6163      	str	r3, [r4, #20]
 801ae86:	9b01      	ldr	r3, [sp, #4]
 801ae88:	6120      	str	r0, [r4, #16]
 801ae8a:	b15b      	cbz	r3, 801aea4 <__smakebuf_r+0x74>
 801ae8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ae90:	4630      	mov	r0, r6
 801ae92:	f000 f8e1 	bl	801b058 <_isatty_r>
 801ae96:	b128      	cbz	r0, 801aea4 <__smakebuf_r+0x74>
 801ae98:	89a3      	ldrh	r3, [r4, #12]
 801ae9a:	f023 0303 	bic.w	r3, r3, #3
 801ae9e:	f043 0301 	orr.w	r3, r3, #1
 801aea2:	81a3      	strh	r3, [r4, #12]
 801aea4:	89a0      	ldrh	r0, [r4, #12]
 801aea6:	4305      	orrs	r5, r0
 801aea8:	81a5      	strh	r5, [r4, #12]
 801aeaa:	e7cd      	b.n	801ae48 <__smakebuf_r+0x18>
 801aeac:	08019a01 	.word	0x08019a01

0801aeb0 <__ascii_mbtowc>:
 801aeb0:	b082      	sub	sp, #8
 801aeb2:	b901      	cbnz	r1, 801aeb6 <__ascii_mbtowc+0x6>
 801aeb4:	a901      	add	r1, sp, #4
 801aeb6:	b142      	cbz	r2, 801aeca <__ascii_mbtowc+0x1a>
 801aeb8:	b14b      	cbz	r3, 801aece <__ascii_mbtowc+0x1e>
 801aeba:	7813      	ldrb	r3, [r2, #0]
 801aebc:	600b      	str	r3, [r1, #0]
 801aebe:	7812      	ldrb	r2, [r2, #0]
 801aec0:	1e10      	subs	r0, r2, #0
 801aec2:	bf18      	it	ne
 801aec4:	2001      	movne	r0, #1
 801aec6:	b002      	add	sp, #8
 801aec8:	4770      	bx	lr
 801aeca:	4610      	mov	r0, r2
 801aecc:	e7fb      	b.n	801aec6 <__ascii_mbtowc+0x16>
 801aece:	f06f 0001 	mvn.w	r0, #1
 801aed2:	e7f8      	b.n	801aec6 <__ascii_mbtowc+0x16>

0801aed4 <memmove>:
 801aed4:	4288      	cmp	r0, r1
 801aed6:	b510      	push	{r4, lr}
 801aed8:	eb01 0402 	add.w	r4, r1, r2
 801aedc:	d902      	bls.n	801aee4 <memmove+0x10>
 801aede:	4284      	cmp	r4, r0
 801aee0:	4623      	mov	r3, r4
 801aee2:	d807      	bhi.n	801aef4 <memmove+0x20>
 801aee4:	1e43      	subs	r3, r0, #1
 801aee6:	42a1      	cmp	r1, r4
 801aee8:	d008      	beq.n	801aefc <memmove+0x28>
 801aeea:	f811 2b01 	ldrb.w	r2, [r1], #1
 801aeee:	f803 2f01 	strb.w	r2, [r3, #1]!
 801aef2:	e7f8      	b.n	801aee6 <memmove+0x12>
 801aef4:	4402      	add	r2, r0
 801aef6:	4601      	mov	r1, r0
 801aef8:	428a      	cmp	r2, r1
 801aefa:	d100      	bne.n	801aefe <memmove+0x2a>
 801aefc:	bd10      	pop	{r4, pc}
 801aefe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801af02:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801af06:	e7f7      	b.n	801aef8 <memmove+0x24>

0801af08 <__malloc_lock>:
 801af08:	4801      	ldr	r0, [pc, #4]	; (801af10 <__malloc_lock+0x8>)
 801af0a:	f7fe be62 	b.w	8019bd2 <__retarget_lock_acquire_recursive>
 801af0e:	bf00      	nop
 801af10:	20003dc8 	.word	0x20003dc8

0801af14 <__malloc_unlock>:
 801af14:	4801      	ldr	r0, [pc, #4]	; (801af1c <__malloc_unlock+0x8>)
 801af16:	f7fe be5d 	b.w	8019bd4 <__retarget_lock_release_recursive>
 801af1a:	bf00      	nop
 801af1c:	20003dc8 	.word	0x20003dc8

0801af20 <_realloc_r>:
 801af20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af22:	4607      	mov	r7, r0
 801af24:	4614      	mov	r4, r2
 801af26:	460e      	mov	r6, r1
 801af28:	b921      	cbnz	r1, 801af34 <_realloc_r+0x14>
 801af2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801af2e:	4611      	mov	r1, r2
 801af30:	f7ff ba38 	b.w	801a3a4 <_malloc_r>
 801af34:	b922      	cbnz	r2, 801af40 <_realloc_r+0x20>
 801af36:	f7ff f9e5 	bl	801a304 <_free_r>
 801af3a:	4625      	mov	r5, r4
 801af3c:	4628      	mov	r0, r5
 801af3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af40:	f000 f89a 	bl	801b078 <_malloc_usable_size_r>
 801af44:	42a0      	cmp	r0, r4
 801af46:	d20f      	bcs.n	801af68 <_realloc_r+0x48>
 801af48:	4621      	mov	r1, r4
 801af4a:	4638      	mov	r0, r7
 801af4c:	f7ff fa2a 	bl	801a3a4 <_malloc_r>
 801af50:	4605      	mov	r5, r0
 801af52:	2800      	cmp	r0, #0
 801af54:	d0f2      	beq.n	801af3c <_realloc_r+0x1c>
 801af56:	4631      	mov	r1, r6
 801af58:	4622      	mov	r2, r4
 801af5a:	f7fd f88f 	bl	801807c <memcpy>
 801af5e:	4631      	mov	r1, r6
 801af60:	4638      	mov	r0, r7
 801af62:	f7ff f9cf 	bl	801a304 <_free_r>
 801af66:	e7e9      	b.n	801af3c <_realloc_r+0x1c>
 801af68:	4635      	mov	r5, r6
 801af6a:	e7e7      	b.n	801af3c <_realloc_r+0x1c>

0801af6c <_read_r>:
 801af6c:	b538      	push	{r3, r4, r5, lr}
 801af6e:	4d07      	ldr	r5, [pc, #28]	; (801af8c <_read_r+0x20>)
 801af70:	4604      	mov	r4, r0
 801af72:	4608      	mov	r0, r1
 801af74:	4611      	mov	r1, r2
 801af76:	2200      	movs	r2, #0
 801af78:	602a      	str	r2, [r5, #0]
 801af7a:	461a      	mov	r2, r3
 801af7c:	f7f0 fa1c 	bl	800b3b8 <_read>
 801af80:	1c43      	adds	r3, r0, #1
 801af82:	d102      	bne.n	801af8a <_read_r+0x1e>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	b103      	cbz	r3, 801af8a <_read_r+0x1e>
 801af88:	6023      	str	r3, [r4, #0]
 801af8a:	bd38      	pop	{r3, r4, r5, pc}
 801af8c:	20003dd4 	.word	0x20003dd4

0801af90 <_raise_r>:
 801af90:	291f      	cmp	r1, #31
 801af92:	b538      	push	{r3, r4, r5, lr}
 801af94:	4604      	mov	r4, r0
 801af96:	460d      	mov	r5, r1
 801af98:	d904      	bls.n	801afa4 <_raise_r+0x14>
 801af9a:	2316      	movs	r3, #22
 801af9c:	6003      	str	r3, [r0, #0]
 801af9e:	f04f 30ff 	mov.w	r0, #4294967295
 801afa2:	bd38      	pop	{r3, r4, r5, pc}
 801afa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801afa6:	b112      	cbz	r2, 801afae <_raise_r+0x1e>
 801afa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801afac:	b94b      	cbnz	r3, 801afc2 <_raise_r+0x32>
 801afae:	4620      	mov	r0, r4
 801afb0:	f000 f830 	bl	801b014 <_getpid_r>
 801afb4:	462a      	mov	r2, r5
 801afb6:	4601      	mov	r1, r0
 801afb8:	4620      	mov	r0, r4
 801afba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801afbe:	f000 b817 	b.w	801aff0 <_kill_r>
 801afc2:	2b01      	cmp	r3, #1
 801afc4:	d00a      	beq.n	801afdc <_raise_r+0x4c>
 801afc6:	1c59      	adds	r1, r3, #1
 801afc8:	d103      	bne.n	801afd2 <_raise_r+0x42>
 801afca:	2316      	movs	r3, #22
 801afcc:	6003      	str	r3, [r0, #0]
 801afce:	2001      	movs	r0, #1
 801afd0:	e7e7      	b.n	801afa2 <_raise_r+0x12>
 801afd2:	2400      	movs	r4, #0
 801afd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801afd8:	4628      	mov	r0, r5
 801afda:	4798      	blx	r3
 801afdc:	2000      	movs	r0, #0
 801afde:	e7e0      	b.n	801afa2 <_raise_r+0x12>

0801afe0 <raise>:
 801afe0:	4b02      	ldr	r3, [pc, #8]	; (801afec <raise+0xc>)
 801afe2:	4601      	mov	r1, r0
 801afe4:	6818      	ldr	r0, [r3, #0]
 801afe6:	f7ff bfd3 	b.w	801af90 <_raise_r>
 801afea:	bf00      	nop
 801afec:	20000944 	.word	0x20000944

0801aff0 <_kill_r>:
 801aff0:	b538      	push	{r3, r4, r5, lr}
 801aff2:	4d07      	ldr	r5, [pc, #28]	; (801b010 <_kill_r+0x20>)
 801aff4:	2300      	movs	r3, #0
 801aff6:	4604      	mov	r4, r0
 801aff8:	4608      	mov	r0, r1
 801affa:	4611      	mov	r1, r2
 801affc:	602b      	str	r3, [r5, #0]
 801affe:	f7f0 f9c1 	bl	800b384 <_kill>
 801b002:	1c43      	adds	r3, r0, #1
 801b004:	d102      	bne.n	801b00c <_kill_r+0x1c>
 801b006:	682b      	ldr	r3, [r5, #0]
 801b008:	b103      	cbz	r3, 801b00c <_kill_r+0x1c>
 801b00a:	6023      	str	r3, [r4, #0]
 801b00c:	bd38      	pop	{r3, r4, r5, pc}
 801b00e:	bf00      	nop
 801b010:	20003dd4 	.word	0x20003dd4

0801b014 <_getpid_r>:
 801b014:	f7f0 b9ae 	b.w	800b374 <_getpid>

0801b018 <__ascii_wctomb>:
 801b018:	b149      	cbz	r1, 801b02e <__ascii_wctomb+0x16>
 801b01a:	2aff      	cmp	r2, #255	; 0xff
 801b01c:	bf85      	ittet	hi
 801b01e:	238a      	movhi	r3, #138	; 0x8a
 801b020:	6003      	strhi	r3, [r0, #0]
 801b022:	700a      	strbls	r2, [r1, #0]
 801b024:	f04f 30ff 	movhi.w	r0, #4294967295
 801b028:	bf98      	it	ls
 801b02a:	2001      	movls	r0, #1
 801b02c:	4770      	bx	lr
 801b02e:	4608      	mov	r0, r1
 801b030:	4770      	bx	lr
	...

0801b034 <_fstat_r>:
 801b034:	b538      	push	{r3, r4, r5, lr}
 801b036:	4d07      	ldr	r5, [pc, #28]	; (801b054 <_fstat_r+0x20>)
 801b038:	2300      	movs	r3, #0
 801b03a:	4604      	mov	r4, r0
 801b03c:	4608      	mov	r0, r1
 801b03e:	4611      	mov	r1, r2
 801b040:	602b      	str	r3, [r5, #0]
 801b042:	f7f0 f9fe 	bl	800b442 <_fstat>
 801b046:	1c43      	adds	r3, r0, #1
 801b048:	d102      	bne.n	801b050 <_fstat_r+0x1c>
 801b04a:	682b      	ldr	r3, [r5, #0]
 801b04c:	b103      	cbz	r3, 801b050 <_fstat_r+0x1c>
 801b04e:	6023      	str	r3, [r4, #0]
 801b050:	bd38      	pop	{r3, r4, r5, pc}
 801b052:	bf00      	nop
 801b054:	20003dd4 	.word	0x20003dd4

0801b058 <_isatty_r>:
 801b058:	b538      	push	{r3, r4, r5, lr}
 801b05a:	4d06      	ldr	r5, [pc, #24]	; (801b074 <_isatty_r+0x1c>)
 801b05c:	2300      	movs	r3, #0
 801b05e:	4604      	mov	r4, r0
 801b060:	4608      	mov	r0, r1
 801b062:	602b      	str	r3, [r5, #0]
 801b064:	f7f0 f9fd 	bl	800b462 <_isatty>
 801b068:	1c43      	adds	r3, r0, #1
 801b06a:	d102      	bne.n	801b072 <_isatty_r+0x1a>
 801b06c:	682b      	ldr	r3, [r5, #0]
 801b06e:	b103      	cbz	r3, 801b072 <_isatty_r+0x1a>
 801b070:	6023      	str	r3, [r4, #0]
 801b072:	bd38      	pop	{r3, r4, r5, pc}
 801b074:	20003dd4 	.word	0x20003dd4

0801b078 <_malloc_usable_size_r>:
 801b078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b07c:	1f18      	subs	r0, r3, #4
 801b07e:	2b00      	cmp	r3, #0
 801b080:	bfbc      	itt	lt
 801b082:	580b      	ldrlt	r3, [r1, r0]
 801b084:	18c0      	addlt	r0, r0, r3
 801b086:	4770      	bx	lr

0801b088 <atan>:
 801b088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b08c:	ec55 4b10 	vmov	r4, r5, d0
 801b090:	4bc3      	ldr	r3, [pc, #780]	; (801b3a0 <atan+0x318>)
 801b092:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b096:	429e      	cmp	r6, r3
 801b098:	46ab      	mov	fp, r5
 801b09a:	dd18      	ble.n	801b0ce <atan+0x46>
 801b09c:	4bc1      	ldr	r3, [pc, #772]	; (801b3a4 <atan+0x31c>)
 801b09e:	429e      	cmp	r6, r3
 801b0a0:	dc01      	bgt.n	801b0a6 <atan+0x1e>
 801b0a2:	d109      	bne.n	801b0b8 <atan+0x30>
 801b0a4:	b144      	cbz	r4, 801b0b8 <atan+0x30>
 801b0a6:	4622      	mov	r2, r4
 801b0a8:	462b      	mov	r3, r5
 801b0aa:	4620      	mov	r0, r4
 801b0ac:	4629      	mov	r1, r5
 801b0ae:	f7e5 f8ed 	bl	800028c <__adddf3>
 801b0b2:	4604      	mov	r4, r0
 801b0b4:	460d      	mov	r5, r1
 801b0b6:	e006      	b.n	801b0c6 <atan+0x3e>
 801b0b8:	f1bb 0f00 	cmp.w	fp, #0
 801b0bc:	f300 8131 	bgt.w	801b322 <atan+0x29a>
 801b0c0:	a59b      	add	r5, pc, #620	; (adr r5, 801b330 <atan+0x2a8>)
 801b0c2:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b0c6:	ec45 4b10 	vmov	d0, r4, r5
 801b0ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0ce:	4bb6      	ldr	r3, [pc, #728]	; (801b3a8 <atan+0x320>)
 801b0d0:	429e      	cmp	r6, r3
 801b0d2:	dc14      	bgt.n	801b0fe <atan+0x76>
 801b0d4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 801b0d8:	429e      	cmp	r6, r3
 801b0da:	dc0d      	bgt.n	801b0f8 <atan+0x70>
 801b0dc:	a396      	add	r3, pc, #600	; (adr r3, 801b338 <atan+0x2b0>)
 801b0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b0e2:	ee10 0a10 	vmov	r0, s0
 801b0e6:	4629      	mov	r1, r5
 801b0e8:	f7e5 f8d0 	bl	800028c <__adddf3>
 801b0ec:	4baf      	ldr	r3, [pc, #700]	; (801b3ac <atan+0x324>)
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	f7e5 fd12 	bl	8000b18 <__aeabi_dcmpgt>
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	d1e6      	bne.n	801b0c6 <atan+0x3e>
 801b0f8:	f04f 3aff 	mov.w	sl, #4294967295
 801b0fc:	e02b      	b.n	801b156 <atan+0xce>
 801b0fe:	f000 f963 	bl	801b3c8 <fabs>
 801b102:	4bab      	ldr	r3, [pc, #684]	; (801b3b0 <atan+0x328>)
 801b104:	429e      	cmp	r6, r3
 801b106:	ec55 4b10 	vmov	r4, r5, d0
 801b10a:	f300 80bf 	bgt.w	801b28c <atan+0x204>
 801b10e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801b112:	429e      	cmp	r6, r3
 801b114:	f300 80a0 	bgt.w	801b258 <atan+0x1d0>
 801b118:	ee10 2a10 	vmov	r2, s0
 801b11c:	ee10 0a10 	vmov	r0, s0
 801b120:	462b      	mov	r3, r5
 801b122:	4629      	mov	r1, r5
 801b124:	f7e5 f8b2 	bl	800028c <__adddf3>
 801b128:	4ba0      	ldr	r3, [pc, #640]	; (801b3ac <atan+0x324>)
 801b12a:	2200      	movs	r2, #0
 801b12c:	f7e5 f8ac 	bl	8000288 <__aeabi_dsub>
 801b130:	2200      	movs	r2, #0
 801b132:	4606      	mov	r6, r0
 801b134:	460f      	mov	r7, r1
 801b136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801b13a:	4620      	mov	r0, r4
 801b13c:	4629      	mov	r1, r5
 801b13e:	f7e5 f8a5 	bl	800028c <__adddf3>
 801b142:	4602      	mov	r2, r0
 801b144:	460b      	mov	r3, r1
 801b146:	4630      	mov	r0, r6
 801b148:	4639      	mov	r1, r7
 801b14a:	f7e5 fb7f 	bl	800084c <__aeabi_ddiv>
 801b14e:	f04f 0a00 	mov.w	sl, #0
 801b152:	4604      	mov	r4, r0
 801b154:	460d      	mov	r5, r1
 801b156:	4622      	mov	r2, r4
 801b158:	462b      	mov	r3, r5
 801b15a:	4620      	mov	r0, r4
 801b15c:	4629      	mov	r1, r5
 801b15e:	f7e5 fa4b 	bl	80005f8 <__aeabi_dmul>
 801b162:	4602      	mov	r2, r0
 801b164:	460b      	mov	r3, r1
 801b166:	4680      	mov	r8, r0
 801b168:	4689      	mov	r9, r1
 801b16a:	f7e5 fa45 	bl	80005f8 <__aeabi_dmul>
 801b16e:	a374      	add	r3, pc, #464	; (adr r3, 801b340 <atan+0x2b8>)
 801b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b174:	4606      	mov	r6, r0
 801b176:	460f      	mov	r7, r1
 801b178:	f7e5 fa3e 	bl	80005f8 <__aeabi_dmul>
 801b17c:	a372      	add	r3, pc, #456	; (adr r3, 801b348 <atan+0x2c0>)
 801b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b182:	f7e5 f883 	bl	800028c <__adddf3>
 801b186:	4632      	mov	r2, r6
 801b188:	463b      	mov	r3, r7
 801b18a:	f7e5 fa35 	bl	80005f8 <__aeabi_dmul>
 801b18e:	a370      	add	r3, pc, #448	; (adr r3, 801b350 <atan+0x2c8>)
 801b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b194:	f7e5 f87a 	bl	800028c <__adddf3>
 801b198:	4632      	mov	r2, r6
 801b19a:	463b      	mov	r3, r7
 801b19c:	f7e5 fa2c 	bl	80005f8 <__aeabi_dmul>
 801b1a0:	a36d      	add	r3, pc, #436	; (adr r3, 801b358 <atan+0x2d0>)
 801b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1a6:	f7e5 f871 	bl	800028c <__adddf3>
 801b1aa:	4632      	mov	r2, r6
 801b1ac:	463b      	mov	r3, r7
 801b1ae:	f7e5 fa23 	bl	80005f8 <__aeabi_dmul>
 801b1b2:	a36b      	add	r3, pc, #428	; (adr r3, 801b360 <atan+0x2d8>)
 801b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1b8:	f7e5 f868 	bl	800028c <__adddf3>
 801b1bc:	4632      	mov	r2, r6
 801b1be:	463b      	mov	r3, r7
 801b1c0:	f7e5 fa1a 	bl	80005f8 <__aeabi_dmul>
 801b1c4:	a368      	add	r3, pc, #416	; (adr r3, 801b368 <atan+0x2e0>)
 801b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ca:	f7e5 f85f 	bl	800028c <__adddf3>
 801b1ce:	4642      	mov	r2, r8
 801b1d0:	464b      	mov	r3, r9
 801b1d2:	f7e5 fa11 	bl	80005f8 <__aeabi_dmul>
 801b1d6:	a366      	add	r3, pc, #408	; (adr r3, 801b370 <atan+0x2e8>)
 801b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1dc:	4680      	mov	r8, r0
 801b1de:	4689      	mov	r9, r1
 801b1e0:	4630      	mov	r0, r6
 801b1e2:	4639      	mov	r1, r7
 801b1e4:	f7e5 fa08 	bl	80005f8 <__aeabi_dmul>
 801b1e8:	a363      	add	r3, pc, #396	; (adr r3, 801b378 <atan+0x2f0>)
 801b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1ee:	f7e5 f84b 	bl	8000288 <__aeabi_dsub>
 801b1f2:	4632      	mov	r2, r6
 801b1f4:	463b      	mov	r3, r7
 801b1f6:	f7e5 f9ff 	bl	80005f8 <__aeabi_dmul>
 801b1fa:	a361      	add	r3, pc, #388	; (adr r3, 801b380 <atan+0x2f8>)
 801b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b200:	f7e5 f842 	bl	8000288 <__aeabi_dsub>
 801b204:	4632      	mov	r2, r6
 801b206:	463b      	mov	r3, r7
 801b208:	f7e5 f9f6 	bl	80005f8 <__aeabi_dmul>
 801b20c:	a35e      	add	r3, pc, #376	; (adr r3, 801b388 <atan+0x300>)
 801b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b212:	f7e5 f839 	bl	8000288 <__aeabi_dsub>
 801b216:	4632      	mov	r2, r6
 801b218:	463b      	mov	r3, r7
 801b21a:	f7e5 f9ed 	bl	80005f8 <__aeabi_dmul>
 801b21e:	a35c      	add	r3, pc, #368	; (adr r3, 801b390 <atan+0x308>)
 801b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b224:	f7e5 f830 	bl	8000288 <__aeabi_dsub>
 801b228:	4632      	mov	r2, r6
 801b22a:	463b      	mov	r3, r7
 801b22c:	f7e5 f9e4 	bl	80005f8 <__aeabi_dmul>
 801b230:	4602      	mov	r2, r0
 801b232:	460b      	mov	r3, r1
 801b234:	4640      	mov	r0, r8
 801b236:	4649      	mov	r1, r9
 801b238:	f7e5 f828 	bl	800028c <__adddf3>
 801b23c:	4622      	mov	r2, r4
 801b23e:	462b      	mov	r3, r5
 801b240:	f7e5 f9da 	bl	80005f8 <__aeabi_dmul>
 801b244:	f1ba 3fff 	cmp.w	sl, #4294967295
 801b248:	4602      	mov	r2, r0
 801b24a:	460b      	mov	r3, r1
 801b24c:	d14b      	bne.n	801b2e6 <atan+0x25e>
 801b24e:	4620      	mov	r0, r4
 801b250:	4629      	mov	r1, r5
 801b252:	f7e5 f819 	bl	8000288 <__aeabi_dsub>
 801b256:	e72c      	b.n	801b0b2 <atan+0x2a>
 801b258:	ee10 0a10 	vmov	r0, s0
 801b25c:	4b53      	ldr	r3, [pc, #332]	; (801b3ac <atan+0x324>)
 801b25e:	2200      	movs	r2, #0
 801b260:	4629      	mov	r1, r5
 801b262:	f7e5 f811 	bl	8000288 <__aeabi_dsub>
 801b266:	4b51      	ldr	r3, [pc, #324]	; (801b3ac <atan+0x324>)
 801b268:	4606      	mov	r6, r0
 801b26a:	460f      	mov	r7, r1
 801b26c:	2200      	movs	r2, #0
 801b26e:	4620      	mov	r0, r4
 801b270:	4629      	mov	r1, r5
 801b272:	f7e5 f80b 	bl	800028c <__adddf3>
 801b276:	4602      	mov	r2, r0
 801b278:	460b      	mov	r3, r1
 801b27a:	4630      	mov	r0, r6
 801b27c:	4639      	mov	r1, r7
 801b27e:	f7e5 fae5 	bl	800084c <__aeabi_ddiv>
 801b282:	f04f 0a01 	mov.w	sl, #1
 801b286:	4604      	mov	r4, r0
 801b288:	460d      	mov	r5, r1
 801b28a:	e764      	b.n	801b156 <atan+0xce>
 801b28c:	4b49      	ldr	r3, [pc, #292]	; (801b3b4 <atan+0x32c>)
 801b28e:	429e      	cmp	r6, r3
 801b290:	da1d      	bge.n	801b2ce <atan+0x246>
 801b292:	ee10 0a10 	vmov	r0, s0
 801b296:	4b48      	ldr	r3, [pc, #288]	; (801b3b8 <atan+0x330>)
 801b298:	2200      	movs	r2, #0
 801b29a:	4629      	mov	r1, r5
 801b29c:	f7e4 fff4 	bl	8000288 <__aeabi_dsub>
 801b2a0:	4b45      	ldr	r3, [pc, #276]	; (801b3b8 <atan+0x330>)
 801b2a2:	4606      	mov	r6, r0
 801b2a4:	460f      	mov	r7, r1
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	4620      	mov	r0, r4
 801b2aa:	4629      	mov	r1, r5
 801b2ac:	f7e5 f9a4 	bl	80005f8 <__aeabi_dmul>
 801b2b0:	4b3e      	ldr	r3, [pc, #248]	; (801b3ac <atan+0x324>)
 801b2b2:	2200      	movs	r2, #0
 801b2b4:	f7e4 ffea 	bl	800028c <__adddf3>
 801b2b8:	4602      	mov	r2, r0
 801b2ba:	460b      	mov	r3, r1
 801b2bc:	4630      	mov	r0, r6
 801b2be:	4639      	mov	r1, r7
 801b2c0:	f7e5 fac4 	bl	800084c <__aeabi_ddiv>
 801b2c4:	f04f 0a02 	mov.w	sl, #2
 801b2c8:	4604      	mov	r4, r0
 801b2ca:	460d      	mov	r5, r1
 801b2cc:	e743      	b.n	801b156 <atan+0xce>
 801b2ce:	462b      	mov	r3, r5
 801b2d0:	ee10 2a10 	vmov	r2, s0
 801b2d4:	4939      	ldr	r1, [pc, #228]	; (801b3bc <atan+0x334>)
 801b2d6:	2000      	movs	r0, #0
 801b2d8:	f7e5 fab8 	bl	800084c <__aeabi_ddiv>
 801b2dc:	f04f 0a03 	mov.w	sl, #3
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	460d      	mov	r5, r1
 801b2e4:	e737      	b.n	801b156 <atan+0xce>
 801b2e6:	4b36      	ldr	r3, [pc, #216]	; (801b3c0 <atan+0x338>)
 801b2e8:	4e36      	ldr	r6, [pc, #216]	; (801b3c4 <atan+0x33c>)
 801b2ea:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801b2ee:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801b2f2:	e9da 2300 	ldrd	r2, r3, [sl]
 801b2f6:	f7e4 ffc7 	bl	8000288 <__aeabi_dsub>
 801b2fa:	4622      	mov	r2, r4
 801b2fc:	462b      	mov	r3, r5
 801b2fe:	f7e4 ffc3 	bl	8000288 <__aeabi_dsub>
 801b302:	4602      	mov	r2, r0
 801b304:	460b      	mov	r3, r1
 801b306:	e9d6 0100 	ldrd	r0, r1, [r6]
 801b30a:	f7e4 ffbd 	bl	8000288 <__aeabi_dsub>
 801b30e:	f1bb 0f00 	cmp.w	fp, #0
 801b312:	4604      	mov	r4, r0
 801b314:	460d      	mov	r5, r1
 801b316:	f6bf aed6 	bge.w	801b0c6 <atan+0x3e>
 801b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b31e:	461d      	mov	r5, r3
 801b320:	e6d1      	b.n	801b0c6 <atan+0x3e>
 801b322:	a51d      	add	r5, pc, #116	; (adr r5, 801b398 <atan+0x310>)
 801b324:	e9d5 4500 	ldrd	r4, r5, [r5]
 801b328:	e6cd      	b.n	801b0c6 <atan+0x3e>
 801b32a:	bf00      	nop
 801b32c:	f3af 8000 	nop.w
 801b330:	54442d18 	.word	0x54442d18
 801b334:	bff921fb 	.word	0xbff921fb
 801b338:	8800759c 	.word	0x8800759c
 801b33c:	7e37e43c 	.word	0x7e37e43c
 801b340:	e322da11 	.word	0xe322da11
 801b344:	3f90ad3a 	.word	0x3f90ad3a
 801b348:	24760deb 	.word	0x24760deb
 801b34c:	3fa97b4b 	.word	0x3fa97b4b
 801b350:	a0d03d51 	.word	0xa0d03d51
 801b354:	3fb10d66 	.word	0x3fb10d66
 801b358:	c54c206e 	.word	0xc54c206e
 801b35c:	3fb745cd 	.word	0x3fb745cd
 801b360:	920083ff 	.word	0x920083ff
 801b364:	3fc24924 	.word	0x3fc24924
 801b368:	5555550d 	.word	0x5555550d
 801b36c:	3fd55555 	.word	0x3fd55555
 801b370:	2c6a6c2f 	.word	0x2c6a6c2f
 801b374:	bfa2b444 	.word	0xbfa2b444
 801b378:	52defd9a 	.word	0x52defd9a
 801b37c:	3fadde2d 	.word	0x3fadde2d
 801b380:	af749a6d 	.word	0xaf749a6d
 801b384:	3fb3b0f2 	.word	0x3fb3b0f2
 801b388:	fe231671 	.word	0xfe231671
 801b38c:	3fbc71c6 	.word	0x3fbc71c6
 801b390:	9998ebc4 	.word	0x9998ebc4
 801b394:	3fc99999 	.word	0x3fc99999
 801b398:	54442d18 	.word	0x54442d18
 801b39c:	3ff921fb 	.word	0x3ff921fb
 801b3a0:	440fffff 	.word	0x440fffff
 801b3a4:	7ff00000 	.word	0x7ff00000
 801b3a8:	3fdbffff 	.word	0x3fdbffff
 801b3ac:	3ff00000 	.word	0x3ff00000
 801b3b0:	3ff2ffff 	.word	0x3ff2ffff
 801b3b4:	40038000 	.word	0x40038000
 801b3b8:	3ff80000 	.word	0x3ff80000
 801b3bc:	bff00000 	.word	0xbff00000
 801b3c0:	0801d880 	.word	0x0801d880
 801b3c4:	0801d860 	.word	0x0801d860

0801b3c8 <fabs>:
 801b3c8:	ec51 0b10 	vmov	r0, r1, d0
 801b3cc:	ee10 2a10 	vmov	r2, s0
 801b3d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801b3d4:	ec43 2b10 	vmov	d0, r2, r3
 801b3d8:	4770      	bx	lr
	...

0801b3dc <roundf>:
 801b3dc:	ee10 0a10 	vmov	r0, s0
 801b3e0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801b3e4:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801b3e8:	2a16      	cmp	r2, #22
 801b3ea:	dc15      	bgt.n	801b418 <roundf+0x3c>
 801b3ec:	2a00      	cmp	r2, #0
 801b3ee:	da08      	bge.n	801b402 <roundf+0x26>
 801b3f0:	3201      	adds	r2, #1
 801b3f2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801b3f6:	d101      	bne.n	801b3fc <roundf+0x20>
 801b3f8:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 801b3fc:	ee00 3a10 	vmov	s0, r3
 801b400:	4770      	bx	lr
 801b402:	4908      	ldr	r1, [pc, #32]	; (801b424 <roundf+0x48>)
 801b404:	4111      	asrs	r1, r2
 801b406:	4208      	tst	r0, r1
 801b408:	d0fa      	beq.n	801b400 <roundf+0x24>
 801b40a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b40e:	4113      	asrs	r3, r2
 801b410:	4403      	add	r3, r0
 801b412:	ea23 0301 	bic.w	r3, r3, r1
 801b416:	e7f1      	b.n	801b3fc <roundf+0x20>
 801b418:	2a80      	cmp	r2, #128	; 0x80
 801b41a:	d1f1      	bne.n	801b400 <roundf+0x24>
 801b41c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801b420:	4770      	bx	lr
 801b422:	bf00      	nop
 801b424:	007fffff 	.word	0x007fffff

0801b428 <sqrt>:
 801b428:	b538      	push	{r3, r4, r5, lr}
 801b42a:	ed2d 8b02 	vpush	{d8}
 801b42e:	ec55 4b10 	vmov	r4, r5, d0
 801b432:	f000 f82d 	bl	801b490 <__ieee754_sqrt>
 801b436:	4b15      	ldr	r3, [pc, #84]	; (801b48c <sqrt+0x64>)
 801b438:	eeb0 8a40 	vmov.f32	s16, s0
 801b43c:	eef0 8a60 	vmov.f32	s17, s1
 801b440:	f993 3000 	ldrsb.w	r3, [r3]
 801b444:	3301      	adds	r3, #1
 801b446:	d019      	beq.n	801b47c <sqrt+0x54>
 801b448:	4622      	mov	r2, r4
 801b44a:	462b      	mov	r3, r5
 801b44c:	4620      	mov	r0, r4
 801b44e:	4629      	mov	r1, r5
 801b450:	f7e5 fb6c 	bl	8000b2c <__aeabi_dcmpun>
 801b454:	b990      	cbnz	r0, 801b47c <sqrt+0x54>
 801b456:	2200      	movs	r2, #0
 801b458:	2300      	movs	r3, #0
 801b45a:	4620      	mov	r0, r4
 801b45c:	4629      	mov	r1, r5
 801b45e:	f7e5 fb3d 	bl	8000adc <__aeabi_dcmplt>
 801b462:	b158      	cbz	r0, 801b47c <sqrt+0x54>
 801b464:	f7fc fde0 	bl	8018028 <__errno>
 801b468:	2321      	movs	r3, #33	; 0x21
 801b46a:	6003      	str	r3, [r0, #0]
 801b46c:	2200      	movs	r2, #0
 801b46e:	2300      	movs	r3, #0
 801b470:	4610      	mov	r0, r2
 801b472:	4619      	mov	r1, r3
 801b474:	f7e5 f9ea 	bl	800084c <__aeabi_ddiv>
 801b478:	ec41 0b18 	vmov	d8, r0, r1
 801b47c:	eeb0 0a48 	vmov.f32	s0, s16
 801b480:	eef0 0a68 	vmov.f32	s1, s17
 801b484:	ecbd 8b02 	vpop	{d8}
 801b488:	bd38      	pop	{r3, r4, r5, pc}
 801b48a:	bf00      	nop
 801b48c:	20000b14 	.word	0x20000b14

0801b490 <__ieee754_sqrt>:
 801b490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b494:	ec55 4b10 	vmov	r4, r5, d0
 801b498:	4e56      	ldr	r6, [pc, #344]	; (801b5f4 <__ieee754_sqrt+0x164>)
 801b49a:	43ae      	bics	r6, r5
 801b49c:	ee10 0a10 	vmov	r0, s0
 801b4a0:	ee10 3a10 	vmov	r3, s0
 801b4a4:	4629      	mov	r1, r5
 801b4a6:	462a      	mov	r2, r5
 801b4a8:	d110      	bne.n	801b4cc <__ieee754_sqrt+0x3c>
 801b4aa:	ee10 2a10 	vmov	r2, s0
 801b4ae:	462b      	mov	r3, r5
 801b4b0:	f7e5 f8a2 	bl	80005f8 <__aeabi_dmul>
 801b4b4:	4602      	mov	r2, r0
 801b4b6:	460b      	mov	r3, r1
 801b4b8:	4620      	mov	r0, r4
 801b4ba:	4629      	mov	r1, r5
 801b4bc:	f7e4 fee6 	bl	800028c <__adddf3>
 801b4c0:	4604      	mov	r4, r0
 801b4c2:	460d      	mov	r5, r1
 801b4c4:	ec45 4b10 	vmov	d0, r4, r5
 801b4c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4cc:	2d00      	cmp	r5, #0
 801b4ce:	dc10      	bgt.n	801b4f2 <__ieee754_sqrt+0x62>
 801b4d0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801b4d4:	4330      	orrs	r0, r6
 801b4d6:	d0f5      	beq.n	801b4c4 <__ieee754_sqrt+0x34>
 801b4d8:	b15d      	cbz	r5, 801b4f2 <__ieee754_sqrt+0x62>
 801b4da:	ee10 2a10 	vmov	r2, s0
 801b4de:	462b      	mov	r3, r5
 801b4e0:	ee10 0a10 	vmov	r0, s0
 801b4e4:	f7e4 fed0 	bl	8000288 <__aeabi_dsub>
 801b4e8:	4602      	mov	r2, r0
 801b4ea:	460b      	mov	r3, r1
 801b4ec:	f7e5 f9ae 	bl	800084c <__aeabi_ddiv>
 801b4f0:	e7e6      	b.n	801b4c0 <__ieee754_sqrt+0x30>
 801b4f2:	1509      	asrs	r1, r1, #20
 801b4f4:	d076      	beq.n	801b5e4 <__ieee754_sqrt+0x154>
 801b4f6:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801b4fa:	07ce      	lsls	r6, r1, #31
 801b4fc:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801b500:	bf5e      	ittt	pl
 801b502:	0fda      	lsrpl	r2, r3, #31
 801b504:	005b      	lslpl	r3, r3, #1
 801b506:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801b50a:	0fda      	lsrs	r2, r3, #31
 801b50c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801b510:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 801b514:	2000      	movs	r0, #0
 801b516:	106d      	asrs	r5, r5, #1
 801b518:	005b      	lsls	r3, r3, #1
 801b51a:	f04f 0e16 	mov.w	lr, #22
 801b51e:	4684      	mov	ip, r0
 801b520:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801b524:	eb0c 0401 	add.w	r4, ip, r1
 801b528:	4294      	cmp	r4, r2
 801b52a:	bfde      	ittt	le
 801b52c:	1b12      	suble	r2, r2, r4
 801b52e:	eb04 0c01 	addle.w	ip, r4, r1
 801b532:	1840      	addle	r0, r0, r1
 801b534:	0052      	lsls	r2, r2, #1
 801b536:	f1be 0e01 	subs.w	lr, lr, #1
 801b53a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b53e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801b542:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b546:	d1ed      	bne.n	801b524 <__ieee754_sqrt+0x94>
 801b548:	4671      	mov	r1, lr
 801b54a:	2720      	movs	r7, #32
 801b54c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801b550:	4562      	cmp	r2, ip
 801b552:	eb04 060e 	add.w	r6, r4, lr
 801b556:	dc02      	bgt.n	801b55e <__ieee754_sqrt+0xce>
 801b558:	d113      	bne.n	801b582 <__ieee754_sqrt+0xf2>
 801b55a:	429e      	cmp	r6, r3
 801b55c:	d811      	bhi.n	801b582 <__ieee754_sqrt+0xf2>
 801b55e:	2e00      	cmp	r6, #0
 801b560:	eb06 0e04 	add.w	lr, r6, r4
 801b564:	da43      	bge.n	801b5ee <__ieee754_sqrt+0x15e>
 801b566:	f1be 0f00 	cmp.w	lr, #0
 801b56a:	db40      	blt.n	801b5ee <__ieee754_sqrt+0x15e>
 801b56c:	f10c 0801 	add.w	r8, ip, #1
 801b570:	eba2 020c 	sub.w	r2, r2, ip
 801b574:	429e      	cmp	r6, r3
 801b576:	bf88      	it	hi
 801b578:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801b57c:	1b9b      	subs	r3, r3, r6
 801b57e:	4421      	add	r1, r4
 801b580:	46c4      	mov	ip, r8
 801b582:	0052      	lsls	r2, r2, #1
 801b584:	3f01      	subs	r7, #1
 801b586:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801b58a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801b58e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801b592:	d1dd      	bne.n	801b550 <__ieee754_sqrt+0xc0>
 801b594:	4313      	orrs	r3, r2
 801b596:	d006      	beq.n	801b5a6 <__ieee754_sqrt+0x116>
 801b598:	1c4c      	adds	r4, r1, #1
 801b59a:	bf13      	iteet	ne
 801b59c:	3101      	addne	r1, #1
 801b59e:	3001      	addeq	r0, #1
 801b5a0:	4639      	moveq	r1, r7
 801b5a2:	f021 0101 	bicne.w	r1, r1, #1
 801b5a6:	1043      	asrs	r3, r0, #1
 801b5a8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 801b5ac:	0849      	lsrs	r1, r1, #1
 801b5ae:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 801b5b2:	07c2      	lsls	r2, r0, #31
 801b5b4:	bf48      	it	mi
 801b5b6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 801b5ba:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801b5be:	460c      	mov	r4, r1
 801b5c0:	463d      	mov	r5, r7
 801b5c2:	e77f      	b.n	801b4c4 <__ieee754_sqrt+0x34>
 801b5c4:	0ada      	lsrs	r2, r3, #11
 801b5c6:	3815      	subs	r0, #21
 801b5c8:	055b      	lsls	r3, r3, #21
 801b5ca:	2a00      	cmp	r2, #0
 801b5cc:	d0fa      	beq.n	801b5c4 <__ieee754_sqrt+0x134>
 801b5ce:	02d7      	lsls	r7, r2, #11
 801b5d0:	d50a      	bpl.n	801b5e8 <__ieee754_sqrt+0x158>
 801b5d2:	f1c1 0420 	rsb	r4, r1, #32
 801b5d6:	fa23 f404 	lsr.w	r4, r3, r4
 801b5da:	1e4d      	subs	r5, r1, #1
 801b5dc:	408b      	lsls	r3, r1
 801b5de:	4322      	orrs	r2, r4
 801b5e0:	1b41      	subs	r1, r0, r5
 801b5e2:	e788      	b.n	801b4f6 <__ieee754_sqrt+0x66>
 801b5e4:	4608      	mov	r0, r1
 801b5e6:	e7f0      	b.n	801b5ca <__ieee754_sqrt+0x13a>
 801b5e8:	0052      	lsls	r2, r2, #1
 801b5ea:	3101      	adds	r1, #1
 801b5ec:	e7ef      	b.n	801b5ce <__ieee754_sqrt+0x13e>
 801b5ee:	46e0      	mov	r8, ip
 801b5f0:	e7be      	b.n	801b570 <__ieee754_sqrt+0xe0>
 801b5f2:	bf00      	nop
 801b5f4:	7ff00000 	.word	0x7ff00000

0801b5f8 <_init>:
 801b5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5fa:	bf00      	nop
 801b5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b5fe:	bc08      	pop	{r3}
 801b600:	469e      	mov	lr, r3
 801b602:	4770      	bx	lr

0801b604 <_fini>:
 801b604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b606:	bf00      	nop
 801b608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b60a:	bc08      	pop	{r3}
 801b60c:	469e      	mov	lr, r3
 801b60e:	4770      	bx	lr
